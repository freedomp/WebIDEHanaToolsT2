// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.suite.ui.generic.template.library-all');
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.js.AnnotationHelper') ) {
(function () {
	"use strict";
	jQuery.sap.require('sap.ui.model.odata.AnnotationHelper'); // unlisted dependency retained

	jQuery.sap.require('sap.ui.comp.smartfield.SmartField'); // unlisted dependency retained


	jQuery.sap.declare("sap.suite.ui.generic.template.js.AnnotationHelper");

	sap.suite.ui.generic.template.js.AnnotationHelper = {

		formatWithExpandSimple: function (oInterface, oDataField) {
			var aExpand = [], sExpand;
			var oMetaModel = oInterface.getModel();

			// TODO: check with UI2 if helper to get entity type can be used
			var aMatches = /^(\/dataServices\/schema\/\d+\/entityType\/\d+)(?:\/|$)/.exec(oInterface.getPath());
			if (aMatches && aMatches.length && aMatches[0]) {
				var oEntityTypeContext = oMetaModel.getProperty(aMatches[0]);
				var sNamespace = oMetaModel.getODataEntityContainer().namespace;
				var oEntityType = oMetaModel.getODataEntityType(sNamespace + '.' + oEntityTypeContext.name);

				// check if expand is needed
				if (oDataField && oDataField.Path) {
					sExpand = sap.suite.ui.generic.template.js.AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, oDataField.Path);
					if (sExpand) {
						aExpand.push(sExpand);
					}

				} else if (oDataField && oDataField.Apply && oDataField.Apply.Name === "odata.concat") {
					oDataField.Apply.Parameters.forEach(function (oParameter) {
						if (oParameter.Type === "Path") {
							sExpand = sap.suite.ui.generic.template.js.AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, oParameter.Value);
							if (sExpand) {
								if (aExpand.indexOf(sExpand) === -1) {
									aExpand.push(sExpand);
								}
							}
						}
					});
				}

				if (aExpand.length > 0) {
					// we analyze a facet that is part of the root context
					// set expand to expand data bag
					var oPreprocessorsData = oInterface.getSetting("preprocessorsData");
					if (oPreprocessorsData) {
						var aRootContextExpand = oPreprocessorsData.rootContextExpand || [];
						for (var j = 0; j < aExpand.length; j++) {
							if (aRootContextExpand.indexOf(aExpand[j]) === -1) {
								aRootContextExpand.push(aExpand[j]);
							}
						}
						oPreprocessorsData.rootContextExpand = aRootContextExpand;
					}

				}
			}

			return sap.ui.model.odata.AnnotationHelper.format(oInterface, oDataField);
		},

		formatWithExpand : function(oInterface, oDataField, oEntitySet){
			sap.suite.ui.generic.template.js.AnnotationHelper.getNavigationPathWithExpand(oInterface, oDataField, oEntitySet);

			oInterface = oInterface.getInterface(0);
			return sap.ui.model.odata.AnnotationHelper.format(oInterface, oDataField);
		},

		_getNavigationPrefix: function (oMetaModel, oEntityType, sProperty) {
			var sExpand = "";
			var aParts = sProperty.split("/");

			if (aParts.length > 1){
				for (var i = 0; i < (aParts.length - 1); i++){
					var oAssociationEnd = oMetaModel.getODataAssociationEnd(oEntityType, aParts[i]);
					if (oAssociationEnd){
						oEntityType = oMetaModel.getODataEntityType(oAssociationEnd.type);
						if (sExpand){
							sExpand = sExpand + "/";
						}
						sExpand = sExpand + aParts[i];
					} else {
						return sExpand;
					}
				}
			}

			return sExpand;
		},

		getNavigationPathWithExpand: function (oInterface, oContext, oEntitySetContext) {
			oInterface = oInterface.getInterface(0);
			var aDependents = [], aExpand = [], oFacetContent, aFacetContent = [];
			var oMetaModel = oInterface.getModel();
			var oEntitySet = oMetaModel.getODataEntitySet(oEntitySetContext.name || '');
			var sResolvedPath = sap.ui.model.odata.AnnotationHelper.resolvePath(oMetaModel.getContext(oInterface.getPath()));

			var sNavigationPath = sap.ui.model.odata.AnnotationHelper.getNavigationPath(oInterface, oContext);
			var sNavigationProperty = sNavigationPath.replace("{", "").replace("}", "");
			if (sNavigationProperty) {
				// from now on we need to set the entity set to the target
				var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
				var oAssociationEnd = oMetaModel.getODataAssociationSetEnd(oEntityType, sNavigationProperty);
				if (oAssociationEnd && oAssociationEnd.entitySet) {
					oEntitySet = oMetaModel.getODataEntitySet(oAssociationEnd.entitySet);
				}
			} else {
				var oEntityType = oMetaModel.getODataEntityType(oEntitySetContext.entityType);
			}
			if (sResolvedPath) {
				aFacetContent = oMetaModel.getObject(sResolvedPath);
			}

			aFacetContent = aFacetContent.Data || aFacetContent;

			var fnGetDependents = function (sProperty, bIsValue) {
				var sExpand = sap.suite.ui.generic.template.js.AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, sProperty);
				if (sExpand){
					// check if already in expand array - if not yet add it
					if (aExpand.indexOf(sExpand) === -1) {
						aExpand.push(sExpand);
					}
				}
				if (bIsValue) {
					try {
						aDependents = sap.ui.comp.smartfield.SmartField.getSupportedAnnotationPaths(oMetaModel, oEntitySet, sProperty, true) || [];
					} catch (e) {
						aDependents = [];
					}
					for (var i = 0; i < aDependents.length; i++) {
						if (aExpand.indexOf(aDependents[i]) === -1) {
							aExpand.push(aDependents[i]);
						}
					}
				}
			};

			var fnAnalyzeApplyFunctions = function (oParameter) {
				if (oParameter.Type === "LabeledElement") {
					fnGetDependents(oParameter.Value.Path);
				} else if (oParameter.Type === "Path") {
					fnGetDependents(oParameter.Value);
				}
			};

			for (var i = 0; i < aFacetContent.length; i++) {
				oFacetContent = aFacetContent[i];

				if (oFacetContent.Value && oFacetContent.Value.Path) {
					fnGetDependents(oFacetContent.Value.Path, true);
				}

				if (oFacetContent.Value && oFacetContent.Value.Apply && oFacetContent.Value.Apply.Name === "odata.concat") {
					oFacetContent.Value.Apply.Parameters.forEach(fnAnalyzeApplyFunctions);
				}

				if (oFacetContent.Action && oFacetContent.Action.Path) {
					fnGetDependents(oFacetContent.Action.Path);
				}

				if (oFacetContent.Target && oFacetContent.Target.Path) {
					fnGetDependents(oFacetContent.Target.Path);
				}

				if (oFacetContent.SemanticObject && oFacetContent.SemanticObject.Path) {
					fnGetDependents(oFacetContent.SemanticObject.Path);
				}

				if (oFacetContent.Url && oFacetContent.Url.Path) {
					fnGetDependents(oFacetContent.Url.Path);
				}

				if (oFacetContent.Url && oFacetContent.Url.Apply && oFacetContent.Url.Apply.Parameters) {
					oFacetContent.Url.Apply.Parameters.forEach(fnAnalyzeApplyFunctions);
				}


				if (oFacetContent.UrlContentType && oFacetContent.UrlContentType.Path) {
					fnGetDependents(oFacetContent.UrlContentType.Path);
				}

			}

			if (aFacetContent.name) {
				fnGetDependents(aFacetContent.name, true);
			}

			if (aExpand.length > 0) {
				if (sNavigationProperty === "") {
					// we analyze a facet that is part of the root context
					// set expand to expand data bag
					var oPreprocessorsData = oInterface.getSetting("preprocessorsData");
					if (oPreprocessorsData) {
						var aRootContextExpand = oPreprocessorsData.rootContextExpand || [];
						for (var j = 0; j < aExpand.length; j++) {
							if (aRootContextExpand.indexOf(aExpand[j]) === -1) {
								aRootContextExpand.push(aExpand[j]);
							}
						}
						oPreprocessorsData.rootContextExpand = aRootContextExpand;
					}
				} else {
					// add expand to navigation path
					sNavigationPath = "{ path : '" + sNavigationProperty + "', parameters : { expand : '" + aExpand.join(',') + "'} }";
				}
			}

			return sNavigationPath;

		},

		isSelf: function (sPath) {
			if (sPath === undefined || (sPath && sPath.indexOf('@') === 0 && sPath.indexOf('/') === -1)) {
				return true;
			}
			return false;
		},
		// Needed for analytics fragments
		number: function (val) {
			if (!val) {
				return NaN;
			} else if (val.Decimal) {
				return +val.Decimal;
			} else if (val.Path) {
				return '{' + val.Path + '}';
			} else {
				return NaN;
			}
		},
		// Needed for analytics fragments
		formatColor: (function () {
			function formatVal(val) {
				if (!val) {
					return NaN;
				} else if (val.Decimal) {
					return val.Decimal;
				} else if (val.EnumMember) {
					return '\'' + val.EnumMember + '\'';
				} else if (val.Path) {
					return '${' + val.Path + '}';
				} else {
					return NaN;
				}
			}

			function formatCriticality(oDataPoint) {
				var criticality = oDataPoint.Criticality;

				return '{= ' + formatVal(criticality) + ' === \'UI.CriticalityType/Negative\' ? \'Error\' : ' + formatVal(criticality) + '=== \'UI.CriticalityType/Critical\' ? \'Critical\' : \'Good\'}';
			}

			function formatCriticalityCalculation(oDataPoint) {
				var value = formatVal(oDataPoint.Value);
				var oCriticalityCalc = oDataPoint.CriticalityCalculation;

				return '{= (' + value + ' < ' + formatVal(oCriticalityCalc.DeviationRangeLowValue) + ' || ' + value + ' > ' + formatVal(oCriticalityCalc.DeviationRangeHighValue) + ') ? \'Error\' : (' + value
					+ ' < ' + formatVal(oCriticalityCalc.ToleranceRangeLowValue) + ' || ' + value + ' > ' + formatVal(oCriticalityCalc.ToleranceRangeHighValue) + ') ? \'Critical\' : \'Good\'}';
			}

			return function (oDataPoint) {
				if (oDataPoint.Criticality) {
					return formatCriticality(oDataPoint);
				} else if (oDataPoint.CriticalityCalculation) {
					return formatCriticalityCalculation(oDataPoint);
				}
			};
		})(),
		createP13N: function (oContextSet, oContextProp, oDataField) {
			var sP13N = "", aAdditionalProperties = [];
			if (oDataField.Value.Path) {
				sP13N = '\\{"columnKey":"' + oDataField.Value.Path + '", "leadingProperty":"' + oDataField.Value.Path;
			} else if (oDataField.Value.Apply && oDataField.Value.Apply.Name === "odata.concat") {
				oDataField.Value.Apply.Parameters.forEach(function (oParameter) {
					if (oParameter.Type === "Path") {
						if (!sP13N) {
							sP13N = '\\{"columnKey":"' + oParameter.Value + '", "leadingProperty":"' + oParameter.Value;
						} else {
							aAdditionalProperties.push(oParameter.Value);
						}
					}
				});
			}
			// get Navigation Prefix
			var oMetaModel = this.getModel("meta");
			if (oMetaModel){
				var oEntityType = oMetaModel.getODataEntityType(oContextSet.entityType);
				if (oEntityType){
					var sNavigation = sap.suite.ui.generic.template.js.AnnotationHelper._getNavigationPrefix(oMetaModel, oEntityType, oDataField.Value.Path);
					if (sNavigation){
						sNavigation = sNavigation + "/";
					}
				}
			}
			if (oContextProp["com.sap.vocabularies.Common.v1.Text"]) {
				aAdditionalProperties.push(sNavigation + oContextProp["com.sap.vocabularies.Common.v1.Text"].Path);
			}
			if (oContextProp["Org.OData.Measures.V1.ISOCurrency"]) {
				aAdditionalProperties.push(sNavigation + oContextProp["Org.OData.Measures.V1.ISOCurrency"].Path);
			}
			if (oContextProp["Org.OData.Measures.V1.Unit"]) {
				aAdditionalProperties.push(sNavigation + oContextProp["Org.OData.Measures.V1.Unit"].Path);
			}
			if ((oDataField["RecordType"] === "com.sap.vocabularies.UI.v1.DataFieldWithUrl") && oDataField.Url && oDataField.Url.Apply && oDataField.Url.Apply.Parameters) {
				oDataField.Url.Apply.Parameters.forEach(function (oParameter) {
					if (oParameter.Type === "LabeledElement") {
						aAdditionalProperties.push(sNavigation + oParameter.Value.Path);
					}
				});
			}
			if (aAdditionalProperties.length > 0) {
				var sAdditionalProperties = "";
				aAdditionalProperties.forEach(function (oProperty) {
					if (sAdditionalProperties) {
						sAdditionalProperties = sAdditionalProperties + ",";
					}
					sAdditionalProperties = sAdditionalProperties + oProperty;
				});
				sP13N += '", "additionalProperty":"' + sAdditionalProperties;
			}
			var bNotSortable = false;
			if (oContextSet["Org.OData.Capabilities.V1.SortRestrictions"] && oContextSet["Org.OData.Capabilities.V1.SortRestrictions"].NonSortableProperties) {
				var aNonSortableProperties = oContextSet["Org.OData.Capabilities.V1.SortRestrictions"].NonSortableProperties;
				for (var i = aNonSortableProperties.length - 1; i >= 0; i--) {
					if (aNonSortableProperties[i].PropertyPath === oDataField.Value.Path) {
						bNotSortable = true;
						break;
					}
				}
			}
			if (!bNotSortable) {
				sP13N += '", "sortProperty":"' + oContextProp.name;
			}
			var bNotFilterable = false;
			if (oContextSet["Org.OData.Capabilities.V1.FilterRestrictions"]) {
				if (oContextSet["Org.OData.Capabilities.V1.FilterRestrictions"].Filterable !== 'false') {
					if (oContextSet["Org.OData.Capabilities.V1.FilterRestrictions"].NonFilterableProperties) {
						var aNonFilterableProperties = oContextSet["Org.OData.Capabilities.V1.FilterRestrictions"].NonFilterableProperties;
						for (var j = aNonFilterableProperties.length - 1; j >= 0; j--) {
							if (aNonFilterableProperties[j].PropertyPath === oDataField.Value.Path) {
								bNotFilterable = true;
								break;
							}
						}
					}
				} else {
					bNotFilterable = true;
				}
			}
			if (!bNotFilterable) {
				sP13N += '", "filterProperty":"' + oContextProp.name;
			}
			return sP13N + '" \\}';
		},
		getEntitySetOfPath: function (oContext) {
			var sContextPath = "", vRawValue = oContext.getObject(), sAnnotationPath = null, sNavigationProperty = null, oAssociationEnd = null, oEntityType = null, oModel = oContext.getModel(), sEntitySet = null, aSchema = [], nSchemaIndex = null, aEntityContainer = null;

			var aMatches = /^(\/dataServices\/schema\/\d+\/entityType\/\d+)(?:\/|$)/.exec(oContext.getPath());
			if (aMatches) {
				if (vRawValue.hasOwnProperty("AnnotationPath")) {
					sAnnotationPath = vRawValue.AnnotationPath;
					if (sAnnotationPath.indexOf('/') > -1) {
						sNavigationProperty = sAnnotationPath.split("/")[0];
						oEntityType = oContext.getObject(aMatches[1]);
						// aNavigationProperties = oEntityType.navigationProperty;
						// for (var i = 0, len = aNavigationProperties.length; i < len; i++) {
						// if (aNavigationProperties[i].name === sNavigationProperty) {
						// //sContextPath = aMatches[1] + "/navigationProperty/" + i;
						oAssociationEnd = oModel.getODataAssociationEnd(oEntityType, sNavigationProperty);
						// Find the associationSet
						aSchema = oContext.getObject('/dataServices/schema');
						jQuery.each(aSchema, function (sindex, oSchema) {
							aEntityContainer = oSchema.entityContainer;
							jQuery.each(aEntityContainer, function (index, oEntityContainer) {
								jQuery.each(oEntityContainer.associationSet, function (index, oAssociationSet) {
									jQuery.each(oAssociationSet.end, function (index, oEnd) {
										if (oEnd.role === oAssociationEnd.role) {
											sEntitySet = oEnd.entitySet;
											nSchemaIndex = sindex;
											return false;
										}
									});
									if (sEntitySet) {
										return false;
									}
								});
								if (sEntitySet) {
									return false;
								}
							});
							if (sEntitySet) {
								return false;
							}
						});
						if (sEntitySet) {
							// Saved the entity container from the scheme that hat the association set
							// ignoring that an assoicationset from one scheme may point to an entity set
							// of another
							jQuery.each(aEntityContainer, function (index, oEntityContainer) {
								jQuery.each(oEntityContainer.entitySet, function (jndex, oEntitySet) {
									if (oEntitySet.name === sEntitySet) {
										sContextPath = '/dataServices/schema/' + nSchemaIndex + '/entityContainer/' + index + '/entitySet/' + jndex;
										return false;
									}
								});
								if (sContextPath) {
									return false;
								}
							});
						}
					}
				}
			}
			return sContextPath ? sContextPath : undefined;
		},
		hasActions: function (Par) {
			for (var i = 0; i < Par.length; i++) {
				if (Par[i].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction" || Par[i].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") {
					return true;
				}
			}
		},
		getSortOrder: function (Par) {
			var str = '';
			for (var i = 0; i < Par.length; i++) {
				if (!str) {
					str = Par[i].Property.PropertyPath;
				} else {
					str = str + ', ' + Par[i].Property.PropertyPath;
				}
				if (Par[i].Descending) {
					str = str + ' ' + Par[i].Descending.Bool;
				}
			}
			return str;
		},
		replaceSpecialCharsInId: function (sId) {
			if (sId.indexOf(" ") >= 0) {
				jQuery.sap.log.error("Annotation Helper: Spaces are not allowed in ID parts. Please check the annotations, probably something is wrong there.");
			}
			return sId.replace("@", "").replace("/", "::").replace("#", "::");
		},
		getStableIdPartFromDataField: function (oDataField) {
			var sPathConcat = "", sIdPart = "";
			if (oDataField.RecordType && oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction") {
				return sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataField.Action.String);
			} else if (oDataField.RecordType && oDataField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") {
				if (oDataField.SemanticObject.String) {
					sIdPart = sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataField.SemanticObject.String);
				} else if (oDataField.SemanticObject.Path) {
					sIdPart = sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataField.SemanticObject.Path);
				}
				if (oDataField.Action && oDataField.Action.String) {
					sIdPart = sIdPart + "::" + sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataField.Action.String);
				} else if (oDataField.Action && oDataField.Action.Path) {
					sIdPart = sIdPart + "::" + sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataField.Action.Path);
				}
				return sIdPart;
			} else if (oDataField.Value && oDataField.Value.Path) {
				return sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataField.Value.Path);
			} else if (oDataField.Value && oDataField.Value.Apply && oDataField.Value.Apply.Name === "odata.concat") {
				for (var i = 0; i < oDataField.Value.Apply.Parameters.length; i++) {
					if (oDataField.Value.Apply.Parameters[i].Type === "Path") {
						if (sPathConcat) {
							sPathConcat = sPathConcat + "::";
						}
						sPathConcat = sPathConcat + sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataField.Value.Apply.Parameters[i].Value);
					}
				}
				return sPathConcat;
			} else {
				// In case of a string or unknown property
				jQuery.sap.log.error("Annotation Helper: Unable to create a stable ID. Please check the annotations.");
			}
		},
		getStableIdPartFromDataPoint: function (oDataPoint) {
			var sPathConcat = "";
			if (oDataPoint.Value && oDataPoint.Value.Path) {
				return sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataPoint.Value.Path);
			} else if (oDataPoint.Value && oDataPoint.Value.Apply && oDataPoint.Value.Apply.Name === "odata.concat") {
				for (var i = 0; i < oDataPoint.Value.Apply.Parameters.length; i++) {
					if (oDataPoint.Value.Apply.Parameters[i].Type === "Path") {
						if (sPathConcat) {
							sPathConcat = sPathConcat + "::";
						}
						sPathConcat = sPathConcat + sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oDataPoint.Value.Apply.Parameters[i].Value);
					}
				}
				return sPathConcat;
			} else {
				// In case of a string or unknown property
				jQuery.sap.log.error("Annotation Helper: Unable to create stable ID derived from annotations.");
			}
		},
		getStableIdPartFromFacet: function (oFacet) {
			if (oFacet.RecordType && oFacet.RecordType === "com.sap.vocabularies.UI.v1.CollectionFacet") {
				if (oFacet.ID && oFacet.ID.String) {
					return oFacet.ID.String;
				} else {
					// If the ID is missing a random value is returned because a duplicate ID error will be thrown as soon as there is
					// more than one form on the UI.
					jQuery.sap.log.error("Annotation Helper: Unable to create a stable ID. You have to set an ID at all collection facets.");
					return Math.floor((Math.random() * 99999) + 1).toString();
				}
			} else if (oFacet.RecordType && oFacet.RecordType === "com.sap.vocabularies.UI.v1.ReferenceFacet") {
				return sap.suite.ui.generic.template.js.AnnotationHelper.replaceSpecialCharsInId(oFacet.Target.AnnotationPath);
			} else {
				jQuery.sap.log.error("Annotation Helper: Unable to create a stable ID. Please check the facet annotations.");
				return Math.floor((Math.random() * 99999) + 1).toString();
			}
		},
		extensionPointBeforeFacetExists: function (sEntitySet, oFacet, oManifestExtend) {
			var sExtensionPointId = "BeforeFacet|" + sEntitySet + "|" + sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
			if (oManifestExtend['sap.suite.ui.generic.template.ObjectPage.view.Details'][sExtensionPointId]) {
				return "true";
			} else {
				return "";
			}
		},
		extensionPointAfterFacetExists: function (sEntitySet, oFacet, oManifestExtend) {
			var sExtensionPointId = "AfterFacet|" + sEntitySet + "|" + sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
			if (oManifestExtend['sap.suite.ui.generic.template.ObjectPage.view.Details'][sExtensionPointId]) {
				return "true";
			} else {
				return "";
			}
		},
		getExtensionPointBeforeFacetTitle: function (sEntitySet, oFacet, oManifestExtend) {
			var sExtensionPointId = "BeforeFacet|" + sEntitySet + "|" + sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
			var oExtension = oManifestExtend['sap.suite.ui.generic.template.ObjectPage.view.Details'][sExtensionPointId];
			if (oExtension &&  oExtension['sap.ui.generic.app'] && oExtension['sap.ui.generic.app'].title) {
				return oExtension['sap.ui.generic.app'].title;
			}
		},
		getExtensionPointAfterFacetTitle: function (sEntitySet, oFacet, oManifestExtend) {
			var sExtensionPointId = "AfterFacet|" + sEntitySet + "|" + sap.suite.ui.generic.template.js.AnnotationHelper.getStableIdPartFromFacet(oFacet);
			var oExtension = oManifestExtend['sap.suite.ui.generic.template.ObjectPage.view.Details'][sExtensionPointId];
			if (oExtension &&  oExtension['sap.ui.generic.app'] && oExtension['sap.ui.generic.app'].title) {
				return oExtension['sap.ui.generic.app'].title;
			}
		},
		getRepeatIndex: function (oValue) {
			if (oValue && oValue.getPath()) {
				return parseInt(oValue.getPath().substring(oValue.getPath().lastIndexOf("/") + 1), 10) + 1;
			} else {
				jQuery.sap.log.error("Annotation Helper: Unable to get index.");
			}
		},
		getColumnListItemType: function (oListEntitySet, aSubPages) {
			var sType = "Inactive";
			if (oListEntitySet.name && aSubPages && aSubPages.length > 0) {
				aSubPages.forEach(function (oSubPage) {
					if (oListEntitySet.name === oSubPage.entitySet) {
						sType = "Navigation";
					}
				});
			}
			return sType;
		},
		getEntityTypesForFormPersonalization: function (oInterface, oFacet, oEntitySetContext) {
			oInterface = oInterface.getInterface(0);
			var aEntityTypes = [];
			var oMetaModel = oInterface.getModel();
			var oEntitySet = oMetaModel.getODataEntitySet(oEntitySetContext.name || '');
			var aFacets = [];
			if (oFacet.RecordType === "com.sap.vocabularies.UI.v1.CollectionFacet" && oFacet.Facets) {
				aFacets = oFacet.Facets;
			} else if (oFacet.RecordType === "com.sap.vocabularies.UI.v1.ReferenceFacet") {
				aFacets.push(oFacet);
			}
			aFacets.forEach(function (oFacet) {
				var sNavigationProperty;
				if (oFacet.Target && oFacet.Target.AnnotationPath && oFacet.Target.AnnotationPath.indexOf("/") > 0) {
					sNavigationProperty = oFacet.Target.AnnotationPath.split("/")[0];
					var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
					var oAssociationEnd = oMetaModel.getODataAssociationSetEnd(oEntityType, sNavigationProperty);
					if (oAssociationEnd && oAssociationEnd.entitySet) {
						oEntitySet = oMetaModel.getODataEntitySet(oAssociationEnd.entitySet);
						if (aEntityTypes.indexOf(oEntitySet.entityType.split(".")[1]) === -1) {
							aEntityTypes.push(oEntitySet.entityType.split(".")[1]);
						}
					}
				} else {
					if (aEntityTypes.indexOf(oEntitySetContext.entityType.split(".")[1]) === -1) {
						aEntityTypes.push(oEntitySetContext.entityType.split(".")[1]);
					}
				}
			});
			return aEntityTypes.join(", ");
		}

	};
	sap.suite.ui.generic.template.js.AnnotationHelper.getRepeatIndex.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.formatWithExpand.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.formatWithExpandSimple.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.getNavigationPathWithExpand.requiresIContext = true;
	sap.suite.ui.generic.template.js.AnnotationHelper.getEntityTypesForFormPersonalization.requiresIContext = true;
})();

}; // end of sap/suite/ui/generic/template/js/AnnotationHelper.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.library') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */
 
/**
* @namespace reserved for Smart Temaplates
* @name sap.suite.ui.generic.template
* @public
*/

/**
 * Initialization Code and shared classes of library sap.suite.ui.generic.template.
 */
jQuery.sap.declare('sap.suite.ui.generic.template.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/library",[
	'jquery.sap.global', 'sap/ui/core/library'
], function(jQuery, library1) {
	"use strict";

	/**
	 * Library with generic Suite UI templates.
	 * 
	 * @namespace
	 * @name sap.suite.ui.generic.template
	 * @public
	 */

	// library dependencies
	// delegate further initialization of this library to the Core
	sap.ui.getCore().initLibrary({
		name: "sap.suite.ui.generic.template",
		dependencies: [
			"sap.ui.core"
		],
		types: [
			"sap.suite.ui.generic.template.ListReport.nav.NavType", "sap.suite.ui.generic.template.ListReport.nav.ParamHandlingMode", "sap.suite.ui.generic.template.ListReport.nav.SuppressionBehavior", "sap.suite.ui.generic.template.ListReport.nav.Severity"
		],
		interfaces: [],
		controls: [],
		elements: [],
		version: "1.32.6"
	});

	sap.suite.ui.generic.template.ListReport.nav.NavType = {
		initial: "initial",
		URLParams: "URLParams",
		xAppState: "xAppState",
		iAppState: "iAppState",
		AppCtx: "AppCtx"
	};

	sap.suite.ui.generic.template.ListReport.nav.ParamHandlingMode = {
		SelVarWins: "SelVarWins",
		URLParamWins: "URLParamWins",
		InsertInSelOpt: "InsertInSelOpt"
	};

	sap.suite.ui.generic.template.ListReport.nav.SuppressionBehavior = {
		standard: 0,
		ignoreEmptyString: 1,
		raiseErrorOnNull: 2,
		raiseErrorOnUndefined: 4
	};

	sap.suite.ui.generic.template.ListReport.nav.Severity = {
		INFO: "INFO",
		WARNING: "WARNING",
		ERROR: "ERROR",
		SUCCESS: "SUCCESS"
	};

	return sap.suite.ui.generic.template;

}, /* bExport= */false);
}; // end of sap/suite/ui/generic/template/library.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ListReport.nav.Error') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.suite.ui.generic.template.ListReport.nav.Error'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/ListReport/nav/Error",[
	"jquery.sap.global", "sap/ui/base/EventProvider", "sap/suite/ui/generic/template/library", "sap/m/MessageBox"
], function(jQuery, EventProvider, TemplateLibrary, MessageBox) {
	"use strict";
	var SeverityType = TemplateLibrary.ListReport.nav.SeverityType;

	var LibError = EventProvider.extend("sap.suite.ui.generic.template.ListReport.nav.Error",
	{

		metadata: {
			publicMethods: [
				// getter methods of properties
				"getErrorCode", "getSeverity", "getPrevious", "getI18n", "getTextKey", "getParameters",
				// additional methods
				"resolveUIText", "resolveUITextDeep", "showMessageBox", "getErrorObject", "setUIText", "getUIText"
			],
			properties: []
		},

		constructor: function(sErrorCode, sSeverity, oPrevious, mUIText) {
			EventProvider.apply(this);

			this._sErrorCode = sErrorCode;
			this._sSeverity = sSeverity;
			this._oPrevious = oPrevious;

			this.setUIText(mUIText);
		},

		_sErrorCode: "",
		_sSeverity: "",
		_oPrevious: null,
		_mUIText: {
			oi18n: null,
			sTextKey: "",
			aParams: []
		}

	});

	LibError.prototype.getErrorCode = function() {
		return this._sErrorCode;
	};

	LibError.prototype.getSeverity = function() {
		return this._sSeverity;
	};

	LibError.prototype.getPrevious = function() {
		return this._oPrevious;
	};

	LibError.prototype.getI18n = function() {
		return this._mUIText.oi18n;
	};

	LibError.prototype.getTextKey = function() {
		return this._mUIText.sTextKey;
	};

	LibError.prototype.getParameters = function() {
		return this._mUIText.aParams;
	};

	LibError.prototype.getUIText = function() {
		return this._mUIText;
	};

	LibError.prototype.setUIText = function(mUIText) {
		if (typeof mUIText === "undefined") {
			return;
		}

		this._mUIText = {}; // create a new instance not at the level of the prototype, but on the level of the instance!
		this._mUIText.oi18n = mUIText.oi18n;
		this._mUIText.sTextKey = mUIText.sTextKey;
		this._mUIText.aParams = mUIText.aParams;

		if (typeof mUIText.oi18n !== "undefined" || typeof mUIText.sTextKey !== "undefined" || typeof mUIText.aParams !== "undefined") {
			jQuery.sap.assert(typeof mUIText.oi18n !== "undefined", "Specifying an error text message, but no i18n reference was provided");
			jQuery.sap.assert(typeof mUIText.sTextKey !== "undefined", "Specifying an error text message, but no text key was provided");
		}
	};

	LibError.prototype.isUITextAvailable = function() {
		return this._mUIText.sTextKey !== "" && typeof this._mUIText.oi18n !== undefined;
	};

	LibError.prototype.resolveUIText = function() {
		jQuery.sap.assert(typeof this._mUIText.oi18n !== "undefined", "Call to resolveUIText without a proper UI Text configuration: i18n object is missing");
		if (!this.isUITextAvailable()) {
			return "";
		}

		var aGetTextArgs = [
			this._mUIText.sTextKey
		];

		// add the parameters of the text
		if (typeof this._mUIText.aParams !== "undefined") {
			aGetTextArgs.push(this._mUIText.aParams);
		}

		return this._mUIText.oi18n.getText.apply(this._mUIText.oi18n, aGetTextArgs);
	};

	LibError.prototype.resolveUITextDeep = function() {
		var vResult = this._iterateThroughPreviousChain(function(oError) {
			if (!oError.isUITextAvailable()) {
				return undefined; // search for the next one
			}

			// oError can create a UIText
			return oError.resolveUIText();
		});

		if (typeof vResult === "undefined") {
			// there is no Error in the chain which is able to provide a UI Text
			return "";
		}

		return vResult;
	};

	LibError.prototype._iterateThroughPreviousChain = function(fVisitor) {
		var that = this; // oCurrentError
		var vResult;

		while (typeof that !== "undefined" && that !== null) {
			vResult = fVisitor(that);
			if (typeof vResult !== "undefined") {
				// fTask found what it searched for
				return vResult;
			}
			that = this._oPrevious;
		}

		return undefined;
	};

	LibError.prototype.showMessageBox = function(bDeep) {
		if (typeof bDeep === "undefined") {
			bDeep = false;
		}

		var sUIText = "", sSeverity = "";
		if (bDeep) {
			var vResult = this._iterateThroughPreviousChain(function(oError) {
				if (!oError.isUITextAvailable()) {
					return undefined; // search for the next one
				}

				// oError can create a UIText
				return {
					severity: oError._sSeverity,
					text: oError.resolveUIText()
				};
			});

			if (typeof vResult === "undefined") {
				jQuery.sap.assert(this.isUITextAvailable(), "Call to showMessagePopup on an error chain which does not have a proper UI Text");
				return;
			}
			sSeverity = vResult.severity;
			sUIText = vResult.text;

		} else {
			jQuery.sap.assert(this.isUITextAvailable(), "Call to showMessagePopup on an error without proper UI Text");

			sSeverity = this._sSeverity;
			sUIText = this.resolveUIText();
		}

		var sType;

		switch (sSeverity) {
			case SeverityType.ERROR:
				sType = MessageBox.Icon.ERROR;
				break;
			case SeverityType.INFO:
				sType = MessageBox.Icon.INFORMATION;
				break;
			case SeverityType.WARNING:
				sType = MessageBox.Icon.WARNING;
				break;
			case SeverityType.SUCCESS:
				sType = MessageBox.Icon.SUCCESS;
				break;
			default:
				jQuery.sap.assert(false, "Call to showMessagePopup on an error without proper Severity Type. Using SUCCESS as default");
				sType = MessageBox.Icon.SUCCESS;
		}

		MessageBox.show(sUIText, {
			icon: sType
		});
	};

	LibError.prototype.getErrorObject = function() {
		var oErrorObject = null;
		if (!this.isUITextAvailable()) {
			oErrorObject = new Error();
		} else {
			oErrorObject = new Error(this.resolveUIText());
		}

		oErrorObject.origin = this;
		return oErrorObject;
	};

	// final step for library
	return LibError;
});

}; // end of sap/suite/ui/generic/template/ListReport/nav/Error.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ListReport.nav.SelectionVariant') ) {
/*
 * ! @copyright@
 */
jQuery.sap.declare('sap.suite.ui.generic.template.ListReport.nav.SelectionVariant'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/generic/template/ListReport/nav/SelectionVariant",[
	"./Error", "sap/suite/ui/generic/template/library"
], function(Error, TemplateLibrary) {
	"use strict";
	
	var Severity = TemplateLibrary.ListReport.nav.Severity;
	
	var SelectionVariant = sap.ui.base.Object.extend("sap.suite.ui.generic.template.ListReport.nav.SelectionVariant",
	{
		_rValidateSign: new RegExp("[E|I]"),
		_rValidateOption: new RegExp("EQ|NE|LE|GE|LT|GT|BT|CP"),

		constructor: function(vSelectionVariant) {
			this._mParameters = {};
			this._mSelectOptions = {};

			this._sId = "";

			if (vSelectionVariant !== undefined) {
				if (typeof vSelectionVariant === "string") {
					this._parseFromString(vSelectionVariant);
				} else if (typeof vSelectionVariant === "object") {
					this._parseFromObject(vSelectionVariant);
				} else {
					throw new Error("SelectionVariant.INVALID_INPUT_TYPE", Severity.ERROR);
				}
			}
		},

		getID: function() {
			return this._sId;
		},

		setID: function(sId) {
			this._sId = sId;
		},

		setText: function(sNewText) {
			if (typeof sNewText !== "string") {
				throw new Error("SelectionVariant.INVALID_INPUT_TYPE", Severity.ERROR);
			}
			this._sText = sNewText;
		},

		getText: function() {
			return this._sText;
		},

		setParameterContextUrl: function(sURL) {
			if (typeof sURL !== "string") {
				throw new Error("SelectionVariant.INVALID_INPUT_TYPE", Severity.ERROR);
			}
			this._sParameterCtxUrl = sURL;
		},

		getParameterContextUrl: function() {
			return this._sParameterCtxUrl;
		},

		getFilterContextUrl: function() {
			return this._sFilterCtxUrl;
		},

		setFilterContextUrl: function(sURL) {
			if (typeof sURL !== "string") {
				throw new Error("SelectionVariant.INVALID_INPUT_TYPE", Severity.ERROR);
			}
			this._sFilterCtxUrl = sURL;
		},

		addParameter: function(sName, sValue) {
			if (typeof sName !== "string") {
				throw new Error("SelectionVariant.INVALID_INPUT_TYPE", Severity.ERROR);
			}
			if (typeof sValue !== "string") {
				throw new Error("SelectionVariant.INVALID_INPUT_TYPE", Severity.ERROR);
			}
			if (sName === "") {
				throw new Error("SelectionVariant.PARAMETER_WITHOUT_NAME", Severity.ERROR);
			}

			if (this._mSelectOptions[sName]) {
				throw new Error("SelectionVariant.PARAMETER_SELOPT_COLLISION", Severity.ERROR);
			}

			this._mParameters[sName] = sValue;

			return this;
		},

		removeParameter: function(sName) {
			if (typeof sName !== "string") {
				throw new Error("SelectionVariant.INVALID_INPUT_TYPE", Severity.ERROR);
			}
			if (sName === "") {
				throw new Error("SelectionVariant.PARAMETER_WITHOUT_NAME", Severity.ERROR);
			}

			delete this._mParameters[sName];

			return this;
		},

		renameParameter: function(sNameOld, sNameNew) {
			if (typeof sNameOld !== "string" || typeof sNameNew !== "string") {
				throw new Error("SelectionVariant.INVALID_INPUT_TYPE", Severity.ERROR);
			}
			if (sNameOld === "" || sNameNew === "") {
				throw new Error("SelectionVariant.PARAMETER_WITHOUT_NAME", Severity.ERROR);
			}
			if (this._mParameters[sNameOld] !== undefined) {
				if (this._mSelectOptions[sNameNew]) {
					throw new Error("SelectionVariant.PARAMETER_SELOPT_COLLISION", Severity.ERROR);
				}
				if (this._mParameters[sNameNew]) {
					throw new Error("SelectionVariant.PARAMETER_COLLISION", Severity.ERROR);
				}
				this._mParameters[sNameNew] = this._mParameters[sNameOld];
				delete this._mParameters[sNameOld];
			}
			return this;
		},

		getParameter: function(sName) {
			if (typeof sName !== "string") {
				throw new Error("SelectionVariant.INVALID_INPUT_TYPE", Severity.ERROR);
			}
			return this._mParameters[sName];
		},

		getParameterNames: function() {
			return Object.keys(this._mParameters);
		},

		addSelectOption: function(sPropertyName, sSign, sOption, sLow, sHigh) {
			if (typeof sPropertyName !== "string") {
				throw new Error("SelectionVariant.INVALID_INPUT_TYPE", Severity.ERROR);
			}
			if (sPropertyName === "") {
				throw new Error("SelectionVariant.INVALID_PROPERTY_NAME", Severity.ERROR);
			}
			if (typeof sSign !== "string") {
				throw new Error("SelectionVariant.INVALID_INPUT_TYPE", Severity.ERROR);
			}
			if (typeof sOption !== "string") {
				throw new Error("SelectionVariant.INVALID_INPUT_TYPE", Severity.ERROR);
			}
			if (typeof sLow !== "string") {
				throw new Error("SelectionVariant.INVALID_INPUT_TYPE", Severity.ERROR);
			}
			if (sOption === "BT" && typeof sHigh !== "string") {
				throw new Error("SelectionVariant.INVALID_INPUT_TYPE", Severity.ERROR);
			}
			if (!this._rValidateSign.test(sSign.toUpperCase())) {
				throw new Error("SelectionVariant.INVALID_SIGN", Severity.ERROR);
			}

			if (!this._rValidateOption.test(sOption.toUpperCase())) {
				throw new Error("SelectionVariant.INVALID_OPTION", Severity.ERROR);
			}

			if (this._mParameters[sPropertyName]) {
				throw new Error("SelectionVariant.PARAMETER_SELOPT_COLLISION", Severity.ERROR);
			}

			if (sOption !== "BT") {
				// only "Between" has two parameters; for all others, sHigh may not be filled
				if ((sHigh !== undefined) && (sHigh !== "") && (sHigh !== null)) {
					throw new Error("SelectionVariant.HIGH_PROVIDED_THOUGH_NOT_ALLOWED", Severity.ERROR);
				}
			}

			// check, if there's already an entry for this property
			if (this._mSelectOptions[sPropertyName] === undefined) {
				// if not, create a new set of entries
				this._mSelectOptions[sPropertyName] = [];
			}

			var oEntry = {
				Sign: sSign.toUpperCase(),
				Option: sOption.toUpperCase(),
				Low: sLow
			};

			if (sOption === "BT") {
				oEntry.High = sHigh;
			} else {
				oEntry.High = null; // Note this special case in the specification!
				// The specification requires that the "High" attribute is always
				// available. In case that no high value is necessary, yet the value
				// may not be empty, but needs to be set to "null"
			}

			// check if it is necessary to add select option
			for (var i = 0; i < this._mSelectOptions[sPropertyName].length; i++) {
				var oExistingEntry = this._mSelectOptions[sPropertyName][i];
				if (oExistingEntry.Sign === oEntry.Sign && oExistingEntry.Option === oEntry.Option && oExistingEntry.Low === oEntry.Low && oExistingEntry.High === oEntry.High) {
					return this;
				}
			}
			this._mSelectOptions[sPropertyName].push(oEntry);

			return this;
		},

		removeSelectOption: function(sName) {
			if (typeof sName !== "string") {
				throw new Error("SelectionVariant.SELOPT_WRONG_TYPE", Severity.ERROR);
			}

			if (sName === "") {
				throw new Error("SelectionVariant.SELOPT_WITHOUT_NAME", Severity.ERROR);
			}

			delete this._mSelectOptions[sName];

			return this;
		},

		renameSelectOption: function(sNameOld, sNameNew) {
			if (typeof sNameOld !== "string" || typeof sNameNew !== "string") {
				throw new Error("SelectionVariant.SELOPT_WRONG_TYPE", Severity.ERROR);
			}
			if (sNameOld === "" || sNameNew === "") {
				throw new Error("SelectionVariant.SELOPT_WITHOUT_NAME", Severity.ERROR);
			}
			if (this._mSelectOptions[sNameOld] !== undefined) {
				if (this._mSelectOptions[sNameNew]) {
					throw new Error("SelectionVariant.SELOPT_COLLISION", Severity.ERROR);
				}
				if (this._mParameters[sNameNew]) {
					throw new Error("SelectionVariant.PARAMETER_SELOPT_COLLISION", Severity.ERROR);
				}
				this._mSelectOptions[sNameNew] = this._mSelectOptions[sNameOld];
				delete this._mSelectOptions[sNameOld];
			}
			return this;
		},

		getSelectOption: function(sPropertyName) {
			if (typeof sPropertyName !== "string") {
				throw new Error("SelectionVariant.INVALID_INPUT_TYPE", Severity.ERROR);
			}
			if (sPropertyName === "") {
				throw new Error("SelectionVariant.INVALID_PROPERTY_NAME", Severity.ERROR);
			}

			var oEntries = this._mSelectOptions[sPropertyName];
			if (!oEntries) {
				return undefined;
			}

			return JSON.parse(JSON.stringify(oEntries)); // create an immutable clone of data to prevent obfuscation by caller.
		},

		getSelectOptionsPropertyNames: function() {
			return Object.keys(this._mSelectOptions);
		},

		getValue: function(sName) {
			var aValue = this.getSelectOption(sName);
			if (aValue !== undefined) {
				// a range for the selection option is provided; so this is the leading one
				return aValue;
			}

			var sParamValue = this.getParameter(sName);
			if (sParamValue !== undefined) {
				// a parameter value has been provided; we need to convert it to the range format
				aValue = [
					{
						Sign: "I",
						Option: "EQ",
						Low: sParamValue,
						High: null
					}
				];
				return aValue;
			}

			return undefined;
		},

		toJSONObject: function() {
			var oExternalSelectionVariant = {
				Version: { // Version attributes are not part of the official specification,
					Major: "1", // but could be helpful later for implementing a proper lifecycle/interoperability
					Minor: "0",
					Patch: "0"
				},
				SelectionVariantID: this._sId
			};

			if (this._sParameterCtxUrl) {
				oExternalSelectionVariant.ParameterContextUrl = this._sParameterCtxUrl;
			}

			if (this._sFilterCtxUrl) {
				oExternalSelectionVariant.FilterContextUrl = this._sFilterCtxUrl;
			}

			if (this._sText) {
				oExternalSelectionVariant.Text = this._sText;
			} else {
				oExternalSelectionVariant.Text = "Selection Variant with ID " + this._sId;
			}

			this._determineODataFilterExpression(oExternalSelectionVariant);

			this._serializeParameters(oExternalSelectionVariant);
			this._serializeSelectOptions(oExternalSelectionVariant);

			return oExternalSelectionVariant;
		},

		toJSONString: function() {
			return JSON.stringify(this.toJSONObject());
		},

		_determineODataFilterExpression: function(oExternalSelectionVariant) {
			// specification does not indicate what is expected here in detail
			oExternalSelectionVariant.ODataFilterExpression = ""; // not supported yet - it's allowed to be optional
		},

		_serializeParameters: function(oExternalSelectionVariant) {

			if (this._mParameters.length === 0) {
				return;
			}

			// Note: Parameters section is optional (see specification section 2.4.2.1)
			oExternalSelectionVariant.Parameters = [];

			jQuery.each(this._mParameters, function(sParameterName, sParameterValue) {
				var oParObject = {
					PropertyName: sParameterName,
					PropertyValue: sParameterValue
				};
				oExternalSelectionVariant.Parameters.push(oParObject);
			});
		},

		_serializeSelectOptions: function(oExternalSelectionVariant) {

			if (this._mSelectOptions.length === 0) {
				return;
			}

			oExternalSelectionVariant.SelectOptions = [];

			jQuery.each(this._mSelectOptions, function(sPropertyName, aEntries) {
				var oSelectOption = {
					PropertyName: sPropertyName,
					Ranges: aEntries
				};

				oExternalSelectionVariant.SelectOptions.push(oSelectOption);
			});
		},

		_parseFromString: function(sJSONString) {
			if (sJSONString === undefined) {
				throw new Error("SelectionVariant.UNABLE_TO_PARSE_INPUT", Severity.ERROR);
			}

			if (typeof sJSONString !== "string") {
				throw new Error("SelectionVariant.INVALID_INPUT_TYPE", Severity.ERROR);
			}

			var oInput = JSON.parse(sJSONString);
			// the input needs to be an JSON string by specification

			this._parseFromObject(oInput);
		},

		_parseFromObject: function(oInput) {

			if (oInput.SelectionVariantID === undefined) {
				// Do not throw an error, but only write a warning into the log.
				// The SelectionVariantID is mandatory according to the specification document version 1.0,
				// but this document is not a universally valid standard.
				// It is said that the "implementation of the SmartFilterBar" may supersede the specification.
				// Thus, also allow an initial SelectionVariantID.
				// throw new sap.suite.ui.generic.template.ListReport.nav.Error("SelectionVariant.INPUT_DOES_NOT_CONTAIN_SELECTIONVARIANT_ID",
				// Severity.ERROR);
				jQuery.sap.log.warning("SelectionVariantID is not defined");
				oInput.SelectionVariantID = "";
			}

			this.setID(oInput.SelectionVariantID);

			if (oInput.ParameterContextUrl !== undefined && oInput.ParameterContextUrl !== "") {
				this.setParameterContextUrl(oInput.ParameterContextUrl);
			}

			if (oInput.FilterContextUrl !== undefined && oInput.FilterContextUrl !== "") {
				this.setFilterContextUrl(oInput.FilterContextUrl);
			}

			if (oInput.Text !== undefined) {
				this.setText(oInput.Text);
			}

			// note that ODataFilterExpression is ignored right now - not supported yet!

			if (oInput.Parameters) {
				this._parseFromStringParameters(oInput.Parameters);
			}

			if (oInput.SelectOptions) {
				this._parseFromStringSelectOptions(oInput.SelectOptions);
			}
		},

		_parseFromStringParameters: function(aParameters) {
			jQuery.each(aParameters, jQuery.proxy(function(iIdx, oEntry) {
				this.addParameter(oEntry.PropertyName, oEntry.PropertyValue);
			}, this));
		},

		_parseFromStringSelectOptions: function(aSelectOptions) {
			jQuery.each(aSelectOptions, jQuery.proxy(function(iIdx, oSelectOption) {

				if (!oSelectOption.Ranges) {
					jQuery.sap.log.warning("Select Option object does not contain a Ranges entry; ignoring entry");
					return true; // "continue"
				}

				if (!jQuery.isArray(oSelectOption.Ranges)) {
					throw new Error("SelectionVariant.SELECT_OPTION_RANGES_NOT_ARRAY", Severity.ERROR);
				}

				jQuery.each(oSelectOption.Ranges, jQuery.proxy(function(iIdx2, oRange) {
					this.addSelectOption(oSelectOption.PropertyName, oRange.Sign, oRange.Option, oRange.Low, oRange.High);
				}, this));
			}, this));
		}
	});

	return SelectionVariant;

});
}; // end of sap/suite/ui/generic/template/ListReport/nav/SelectionVariant.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.TemplateComponent') ) {
jQuery.sap.require('sap.ui.generic.template.TemplateComponent'); // unlisted dependency retained


jQuery.sap.declare("sap.suite.ui.generic.template.lib.TemplateComponent");

jQuery.sap.require('sap.ui.core.CustomizingConfiguration'); // unlisted dependency retained

(function() {
	//monkey patch the sap.ui.core.CustomizingConfiguration
	//as UI5 doesn't support viewExtensions for nested components we replace the component in vObject
	//with the parent component. The getAppComponent function comes from the component property appComponent
	//in sap.ui.generic.template.TemplateComponent.js
	var fOriginal = sap.ui.core.CustomizingConfiguration.getViewExtension;
	sap.ui.core.CustomizingConfiguration.getViewExtension = function(sViewName, sExtensionPointName, vObject) {
		// check whether a context is given and determine a componentId from it
		// - either it is a string, then this is the pre-processor use case and the string is a component id
		// - or it is a view or fragment and the Id of the owner component should be used
		var sComponentId = vObject && typeof vObject === "string" ? vObject : (vObject && sap.ui.core.Component.getOwnerIdFor(vObject));
		// retrieve the component (if an Id is known)
		var oComponent = sComponentId && sap.ui.component(sComponentId);
		// only when it inherits from TemplateComponent, ask for the AppComponent instead
		if (oComponent instanceof sap.suite.ui.generic.template.lib.TemplateComponent) {
			vObject = oComponent.getAppComponent().getId();
		}
		var oResultConfig = fOriginal(sViewName, sExtensionPointName, vObject);
		return oResultConfig;
	};

	// monkey patch for controller extension
	var fOriginal2 = sap.ui.core.CustomizingConfiguration.getControllerExtension;

	sap.ui.core.CustomizingConfiguration.getControllerExtension = function(sControllerName, sComponentID) {
		var oComponent = null;
		if (sComponentID) {
			oComponent = sap.ui.component(sComponentID);
			if (oComponent instanceof sap.suite.ui.generic.template.lib.TemplateComponent) {
				oComponent = oComponent.getAppComponent();
				if (oComponent) {
					sComponentID = oComponent.getId();
				}
			}
		}
		var oResultConfig = fOriginal2(sControllerName, sComponentID);
		return oResultConfig;
	};
})();

sap.ui.generic.template.TemplateComponent.extend("sap.suite.ui.generic.template.lib.TemplateComponent", {

	metadata: {
		library: "sap.suite.ui.generic.template",
		properties: {
			"isLeaf": {
				"type": "boolean"
			},
			preventBinding: {
				type: "boolean",
				defaultValue: true
			}
		}
	},

	getCreateMode: function (sBindingPath) {
		"use strict";
		var oEntity;
		var oModel = this.getModel();

		if (sBindingPath) {
			if (oModel) {
				oEntity = oModel.getProperty(sBindingPath);
			}
		} else {
			var oContext = this.getBindingContext();
			if (oContext){
				oEntity = oContext.getObject();
			}
		}

		if (oEntity && oEntity.__metadata && oEntity.__metadata.created) {
			// workaround until ODataModel provides method
			return true;
		}
		return false;
	},

	init: function () {
		"use strict";

		sap.ui.generic.template.TemplateComponent.prototype.init.apply(this, arguments);

		var oUIModel = new sap.ui.model.json.JSONModel({
			editable: false,
			enabled: false
		});
		this.setModel(oUIModel, "ui");
	},

	getEntityType: function () {
		"use strict";

		var oMetaModel = this.getModel().getMetaModel();
		var oEntitySet = oMetaModel.getODataEntitySet(this.getEntitySet(), false);
		var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType, false);
		return oEntityType.name;
	},

	bindComponent: function () {
		"use strict";

		var oParameter = {};
		if (this._sBindingPath) {
			var oComponentContainer = this.getComponentContainer();
			if (oComponentContainer) {
				if (this.getCreateMode(this._sBindingPath)) {
					oComponentContainer.unbindElement();
					oComponentContainer.setBindingContext(oComponentContainer.getModel().getContext(this._sBindingPath));
				} else {
					var oComponentData = this.getComponentData();
					if (oComponentData && oComponentData.preprocessorsData && oComponentData.preprocessorsData.rootContextExpand && oComponentData.preprocessorsData.rootContextExpand.length) {
						oParameter.expand = oComponentData.preprocessorsData.rootContextExpand.join(",");
					}
					oComponentContainer.bindElement({
						path: this._sBindingPath,
						parameters: oParameter,
						batchGroupId: "Changes",  // get navigation controller constant?
						changeSetId: "Changes"
					});
				}
			}
		}
	},

	onActivate: function (sBindingPath) {
		"use strict";

		this._sBindingPath = sBindingPath;

		var oComponentContainer = this.getComponentContainer();
		if (oComponentContainer && oComponentContainer.getElementBinding()) {
			// unbind element to avoid that old data is shown
			oComponentContainer.unbindElement();

			// set the UI model to not editable / enabled as long as the binding data is read
			this.getModel("ui").setProperty("/enabled", false);
			this.getModel("ui").setProperty("/editable", false);
		}

		if (this.getAggregation("rootControl")) {
			// root control is already created - do the binding
			this.bindComponent();
		}

		if (this.getIsRefreshRequired()) {
			this.refreshBinding();
			this.setIsRefreshRequired(false);
		}
	},

	refreshBinding: function () {
		"use strict";

		// default implementation: refresh element binding
		var oElementBinding = this.getComponentContainer().getElementBinding();
		if (oElementBinding) {
			oElementBinding.refresh();
		}
	}

});

}; // end of sap/suite/ui/generic/template/lib/TemplateComponent.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ListReport.Component') ) {



jQuery.sap.declare("sap.suite.ui.generic.template.ListReport.Component");

sap.suite.ui.generic.template.lib.TemplateComponent.extend("sap.suite.ui.generic.template.ListReport.Component", {
	// templateName: "sap.suite.ui.generic.template.ListReport.view.List",

	metadata: {
		library: "sap.suite.ui.generic.template",
		properties: {
			"templateName": {
				"type": "string",
				"defaultValue": "sap.suite.ui.generic.template.ListReport.view.ListReport"
			},
			"gridTable": "boolean",
			"hideTableVariantManagement": "boolean"
		},
		"manifest": "json"
	},

	hasDraft: function() {
		"use strict";

		return this.getAppComponent().getTransactionController().getDraftController().getDraftContext().isDraftEnabled(this.getEntitySet());
	},

	refreshBinding: function() {
		"use strict";

		// refresh list binding
		var oView = this.getAggregation("rootControl");
		if (oView instanceof sap.ui.core.mvc.XMLView) {
			// Rebind table
			var oSmartTable = oView.byId("listReport");
			if (oSmartTable && oSmartTable.rebindTable) {
				oSmartTable.rebindTable();
			}
		}
	}

});

}; // end of sap/suite/ui/generic/template/ListReport/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ListReport.nav.NavigationHandler') ) {
/*
 * ! @copyright@
 */
jQuery.sap.declare('sap.suite.ui.generic.template.ListReport.nav.NavigationHandler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/suite/ui/generic/template/ListReport/nav/NavigationHandler",[
	"./Error", "./SelectionVariant", "sap/suite/ui/generic/template/library"
], function(Error, SelectionVariant, TemplateLibrary) {
	"use strict";

	var NavType = TemplateLibrary.ListReport.nav.NavType;
	var ParamHandlingMode = TemplateLibrary.ListReport.nav.ParamHandlingMode;
	var Severity = TemplateLibrary.ListReport.nav.Severity;
	var SuppressionBehavior = TemplateLibrary.ListReport.nav.SuppressionBehavior;
	var NavigationHandler = sap.ui.base.Object.extend("sap.suite.ui.generic.template.ListReport.nav.NavigationHandler",
	{
		metadata: {
			publicMethods: [
				"navigate", "parseNavigation", "storeInnerAppState", "openSmartLinkPopover", "mixAttributesAndSelectionVariant"
			]
		},

		constructor: function(oController, sParamHandlingMode) {
			this.oRouter = this._getRouter(oController);
			this.oComponent = oController.getOwnerComponent().getAppComponent();

			if (typeof this.oRouter === "undefined" || typeof this.oComponent === "undefined") {
				throw new Error("NavigationHandler.INVALID_INPUT", Severity.ERROR);
			}
			
			try {
				this.oCrossAppNavService = sap.ushell.Container.getService("CrossApplicationNavigation");
			} catch (err) {
				jQuery.sap.log.error("NavigationHandler: UShell service for cross app navigation is not available.");
			}
			this.IAPP_STATE = "sap-iapp-state";
			this._oLastSavedInnerAppData = {
				sAppStateKey: "",
				oAppData: {},
				iCacheHit: 0,
				iCacheMiss: 0
			};

			/*
			 * There exists a generation of "old" sap-iapp-states which are based on the following URL schema:
			 * #SemObj-action&/route/sap-iapp-state=ABC12345678 The new URL schema is: #SemObj-action&/route?sap-iapp-state=ABC12345678 (mind the
			 * difference between / and ? above), i.e. the sap-iapp-state has become a parameter of the query parameter section in the AppHash string.
			 * Yet, this tool shall be able to deal even with old sap-iapp-states. Therefore, we use two Regular Expressions (rIAppStateOld and
			 * rIAppStateOldAtStart) as defined below to scan for these old variants. The new variant is being scanned using rIAppStateNew as Regular
			 * Expression search string. Compatibility is centrally ensured by the two methods _getInnerAppStateKey and _replaceInnerAppStateKey (see
			 * below). Never use these RegExp in a method on your own, as it typically indicates that you will fall into the compatibility trap!
			 */
			// Warning! Do not use GLOBAL flags here; RegExp in GLOBAL mode store the lastIndex value
			// Therefore, repeated calls to the RegExp will then only start beginning with that stored
			// lastIndex. Thus, multiple calls therefore could yield strange results.
			// Moreover, there shall only be exactly one IAPP_STATE per RegExp in an AppHash.
			// Therefore, GLOBAL search should be superfluous.
			this._rIAppStateOld = new RegExp("/" + this.IAPP_STATE + "=([^/?]+)");
			this._rIAppStateOldAtStart = new RegExp("^" + this.IAPP_STATE + "=([^/?]+)");

			this._rIAppStateNew = new RegExp("[\?&]" + this.IAPP_STATE + "=([^&]+)");
			/*
			 * Regular Expression in words: Search for something that either stars with ? or &, followed by the term "sap-iapp-state". That one is
			 * followed by an equal sign (=). The stuff that is after the equal sign forms the first regexp group. This group consists of at least one
			 * (or arbitrary many) characters, as long as it is not an ampersand sign (&). Characters after such an ampersand would be ignored and do
			 * not belong to the group. Alternatively, the string also may end.
			 */

			if (sParamHandlingMode === ParamHandlingMode.URLParamWins || sParamHandlingMode === ParamHandlingMode.InsertInSelOpt) {
				this.sParamHandlingMode = sParamHandlingMode;
			} else {
				this.sParamHandlingMode = ParamHandlingMode.SelVarWins; // default
			}

			this.oi18n = new sap.ui.model.resource.ResourceModel({
				bundleName: "sap.suite.ui.generic.template.ListReport.i18n.i18n",
				bundleLocale: sap.ui.getCore().getConfiguration().getFormatLocale()
			}).getResourceBundle();

		},

		hasCrossApplicationNavigationService: function() {
			return this.oCrossAppNavService !== undefined;
		},

		_getRouter: function(oController) {
			return sap.ui.core.UIComponent.getRouterFor(oController);
		},

		navigate: function(sSemanticObject, sActionName, vNavigationParameters, oInnerAppData, fnOnError) {

			var sSelectionVariant, mParameters;

			// for navigation we need URL parameters (legacy navigation) and sap-xapp-state, therefore we need
			// to create the missing one from the passed one
			if (typeof vNavigationParameters === "string") {
				sSelectionVariant = vNavigationParameters;
				mParameters = this._getURLParametersFromSelectionVariant(sSelectionVariant);
			} else if (typeof vNavigationParameters === "object") {
				mParameters = vNavigationParameters;
				var oEnrichedAppData = this._addParametersToAppData({}, mParameters);
				sSelectionVariant = oEnrichedAppData.selectionVariant;
			} else {
				throw new Error("NavigationHandler.INVALID_INPUT", Severity.ERROR);
			}

			var that = this;
			var oNavArguments = {
				target: {
					semanticObject: sSemanticObject,
					action: sActionName
				},
				params: mParameters || {}
			};
			var sIntent = that.oCrossAppNavService.hrefForExternal(oNavArguments);
			var oSupportedPromise = that.oCrossAppNavService.isIntentSupported([
				sIntent
			]);

			oSupportedPromise.done(function(oTargets) {

				if (oTargets[sIntent].supported) {

					var oStorePromise = that.storeInnerAppState(oInnerAppData);
					oStorePromise.done(function() {
						var fnOnContainerSave = function(sAppStateKey) {
							// set the app state key in addition to the navigation arguments
							oNavArguments.appStateKey = sAppStateKey;
							// Remark:
							// The Cross App Service takes care of encoding parameter keys and values. Example:
							// mParams = { "$@%" : "&/=" } results in the URL parameter
							// %2524%2540%2525=%2526%252F%253D
							// Note the double encoding, this is correct.

							// toExternal sets sap-xapp-state in the URL if appStateKey is provided in oNavArguments
							that.oCrossAppNavService.toExternal(oNavArguments, that.oComponent); // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>OUT
						};

						that._saveAppState({
							selectionVariant: sSelectionVariant
						}, fnOnContainerSave, fnOnError);
					});

					if (fnOnError) {
						oStorePromise.fail(function(oError) {
							fnOnError(oError);
						});
					}

				} else if (fnOnError) {
					// intent is not supported
					var sErrorCode = "NavigationHandler.isIntentSupported.notSupported";
					var sSeverity = Severity.ERROR;
					var mUItext = {
						oi18n: that.oi18n,
						sTextKey: "INTENT_NOT_SUPPORTED",
						aParams: [
							sSemanticObject, sActionName
						]
					};
					var oError = new Error(sErrorCode, sSeverity, undefined, mUItext);
					fnOnError(oError);
				}
			});

			if (fnOnError) {
				oSupportedPromise.fail(function() {
					// technical error: could not determine if intent is supported
					var oError = that._createTechnicalError("NavigationHandler.isIntentSupported.failed");
					fnOnError(oError);
				});
			}
		},

		parseNavigation: function() {

			var sAppHash = this.oRouter.oHashChanger.getHash();
			var sIAppState = this._getInnerAppStateKey(sAppHash);

			var oComponentData = this.oComponent.oComponentData;
			// Remark:
			// The startup parameters are already decoded. Example:
			// The original URL parameter %2524%2540%2525=%2526%252F%253D results in oStartupParameters = {
			// "$@%" : "&/=" }
			// Note the double encoding in the URL, this is correct. An URL parameter like xyz=%25 causes an
			// "URI malformed" error.
			// If the decoded value should be e.g. "%25", the parameter in the URL needs to be: xyz=%252525
			var oStartupParameters;
			
			if (oComponentData){
				oStartupParameters = oComponentData.startupParameters;
			}

			/* eslint-disable */
			var oMyDeferred = jQuery.Deferred();
			/* eslint-enable */
			var that = this;

			if (sIAppState) {
				// inner app state is available in the AppHash (back navigation); extract the parameter value
				this._loadAppState(sIAppState, oMyDeferred);

			} else {

				// no back navigation
				var bIsXappStateNavigation = oComponentData !== undefined && oComponentData["sap-xapp-state"] !== undefined;
				if (bIsXappStateNavigation) {
					// inner app state was not found in the AppHash, but xapp state => try to read the xapp state
					var oStartupPromise = this.oCrossAppNavService.getStartupAppState(this.oComponent);

					oStartupPromise.done(function(oAppState) {
						var oError;
						// get app state from sap-xapp-state
						var oAppStateData = oAppState.getData();

						// add URL parameters if available
						if (!jQuery.isEmptyObject(oStartupParameters)) {

							if (oAppStateData) {
								// sap-xapp-state navigation
								oAppStateData = that._addParametersToAppData(oAppStateData, oStartupParameters);
								oMyDeferred.resolve(oAppStateData, oStartupParameters, NavType.xAppState);
							} else {
								// sap-xapp-state navigation, but ID has already expired, but URL parameters
								// available
								oError = that._createTechnicalError("NavigationHandler.getDataFromAppState.failed");
								oMyDeferred.reject(oError, oStartupParameters, NavType.xAppState);
							}
						} else if (oAppStateData) {
							// there are no URL parameters

							// ??!??! broken sender: navigation with sap-xapp-state, but no URL parameters
							jQuery.sap.log.warning("Broken Sender navigation via xapp-state detected; sender did not provide legacy URL parameters");

							oAppStateData.selectionVariant = that._ensureSelectionVariantFormatString(oAppStateData.selectionVariant);

							oMyDeferred.resolve(oAppStateData, {}, NavType.xAppState);
						} else {
							// sap-xapp-state navigation by broken sender, but ID has already expired
							jQuery.sap.log.warning("Broken Sender navigation via xapp-state detected; sender did not provide legacy URL parameters");
							oError = that._createTechnicalError("NavigationHandler.getDataFromAppState.failed");
							oMyDeferred.reject(oError, {}, NavType.xAppState);
						}
					});
					oStartupPromise.fail(function() {
						var oError = that._createTechnicalError("NavigationHandler.getStartupState.failed");
						oMyDeferred.reject(oError, {}, NavType.xAppState);
					});

				} else if (oStartupParameters) {
					// no sap-xapp-state
					// standard URL navigation
					var oAppData = that._addParametersToAppData({}, oStartupParameters);
					oMyDeferred.resolve(oAppData, oStartupParameters, NavType.URLParams);
				} else {
					// no sap-xapp-state & no URL params
					// initial navigation
					oMyDeferred.resolve({}, {}, NavType.initial);
				}
			}

			return oMyDeferred.promise();
		},

		storeInnerAppState: function(mInnerAppData, bImmediateHashReplace) {

			if (typeof bImmediateHashReplace !== "boolean") {
				bImmediateHashReplace = true; // default
			}
			var that = this;

			/* eslint-disable */
			var oMyDeferred = jQuery.Deferred();
			/* eslint-enable */

			var fnReplaceHash = function(sAppStateKey) {
				var sAppHashOld = that.oRouter.oHashChanger.getHash();
				var sAppHashNew = that._replaceInnerAppStateKey(sAppHashOld, sAppStateKey);
				that.oRouter.oHashChanger.replaceHash(sAppHashNew);
			};

			// check if we already saved the same data
			var sAppStateKeyCached = this._oLastSavedInnerAppData.sAppStateKey;
			var bInnerAppDataEqual = (JSON.stringify(mInnerAppData) === JSON.stringify(this._oLastSavedInnerAppData.oAppData));
			if (bInnerAppDataEqual && sAppStateKeyCached) {
				// passed inner app state found in cache
				this._oLastSavedInnerAppData.iCacheHit++;

				// replace inner app hash with cached appStateKey in url (just in case the app has changed the
				// hash in meantime)
				fnReplaceHash(sAppStateKeyCached);
				oMyDeferred.resolve(sAppStateKeyCached);
				return oMyDeferred.promise();
			}

			// passed inner app state not found in cache
			this._oLastSavedInnerAppData.iCacheMiss++;

			var fnOnAfterSave = function(sAppStateKey) {

				// replace inner app hash with new appStateKey in url
				if (!bImmediateHashReplace) {
					fnReplaceHash(sAppStateKey);
				}

				// remember last saved state
				that._oLastSavedInnerAppData.oAppData = mInnerAppData;
				that._oLastSavedInnerAppData.sAppStateKey = sAppStateKey;
				oMyDeferred.resolve(sAppStateKey);
			};

			var fnOnError = function(oError) {
				oMyDeferred.reject(oError);
			};

			var sAppStateKey = this._saveAppState(mInnerAppData, fnOnAfterSave, fnOnError);

			/*
			 * Note that _sapAppState may return 'undefined' in case that the parsing has failed. In this case, we should not trigger the replacement
			 * of the App Hash with the generated key, as the container was not written before. Note as well that the error handling has already
			 * happened before by making the oMyDeferred promise fail (see fnOnError above).
			 */
			if (sAppStateKey !== undefined) {
				// replace inner app hash with new appStateKey in url
				// note: we do not wait for the save to be completed: this asynchronously behaviour is necessary if
				// this method is called e.g. in a onLinkPressed event with no possibility to wait for the promise resolution
				if (bImmediateHashReplace) {
					fnReplaceHash(sAppStateKey);
				}
			}

			return oMyDeferred.promise();
		},

		processBeforeSmartLinkPopoverOpens: function(oTableEventParameters, sSelectionVariant, mInnerAppData) {
			/* eslint-disable */
			var oMyDeferred = jQuery.Deferred();
			/* eslint-enable */
			var mSemanticAttributes = oTableEventParameters.semanticAttributes;
			var that = this;

			var fnStoreXappAndCallOpen = function(mSemanticAttributes, sSelectionVariant) {

				// mix the semantic attributes (e.g. from the row line) with the selection variant (e.g. from
				// the filter bar)
				sSelectionVariant = sSelectionVariant || "{}";

				var iSuppressionBehavior = SuppressionBehavior.raiseErrorOnNull | SuppressionBehavior.raiseErrorOnUndefined;
				/*
				 * compatiblity: Until SAPUI5 1.28.5 (or even later) the Smart Link in a Smart Table is filtering all null- and undefined values.
				 * Therefore, mSemanticAttributes are already reduced appropriately -- this does not need to be done by
				 * mixAttributesAndSelectionVariant again. To ensure that we still have the old behaviour (i.e. an Error is raised in case that
				 * behaviour of the Smart Link control has changed), the "old" Suppression Behaviour is retained.
				 */

				var oMixedSelVar = that.mixAttributesAndSelectionVariant(mSemanticAttributes, sSelectionVariant, iSuppressionBehavior);
				sSelectionVariant = oMixedSelVar.toJSONString();

				// enrich the semantic attributes with single selections from the selection variant
				mSemanticAttributes = that._getURLParametersFromSelectionVariant(oMixedSelVar);

				var fnOnContainerSave = function(sAppStateKey) {
					// set the stored data in popover and call open()
					oTableEventParameters.setSemanticAttributes(mSemanticAttributes);
					oTableEventParameters.setAppStateKey(sAppStateKey);
					oTableEventParameters.open(); // >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Note that "open" does not
					// open the popover, but proceeds
					// with firing the onNavTargetsObtained event.
					oMyDeferred.resolve(oTableEventParameters);
				};

				var fnOnError = function(oError) {
					oMyDeferred.reject(oError);
				};

				// store the sap-xapp-state
				that._saveAppState({
					selectionVariant: sSelectionVariant
				}, fnOnContainerSave, fnOnError);
			};

			if (mInnerAppData) {

				var oStoreInnerAppStatePromise = this.storeInnerAppState(mInnerAppData, true);

				// if the inner app state was successfully stored, store also the xapp-state
				oStoreInnerAppStatePromise.done(function() {
					fnStoreXappAndCallOpen(mSemanticAttributes, sSelectionVariant);
				});

				oStoreInnerAppStatePromise.fail(function(oError) {
					oMyDeferred.reject(oError);
				});

			} else {
				// there is no inner app state to save, just put the parameters into xapp-state
				fnStoreXappAndCallOpen(mSemanticAttributes, sSelectionVariant);
			}

			return oMyDeferred.promise();
		},

		mixAttributesAndSelectionVariant: function(mSemanticAttributes, sSelectionVariant, iSuppressionBehavior) {

			if (iSuppressionBehavior === undefined) {
				iSuppressionBehavior = sap.suite.ui.generic.template.ListReport.nav.SuppressionBehavior.standard;
			}

			var oSelectionVariant = new SelectionVariant(sSelectionVariant);
			var oNewSelVariant = new SelectionVariant();

			// add all semantic attributes to the mixed selection variant
			for ( var sPropertyName in mSemanticAttributes) {
				if (mSemanticAttributes.hasOwnProperty(sPropertyName)) {
					// A value of a semantic attribute may not be a string, but can be e.g. a date.
					// Since the selection variant accepts only a string, we have to convert it in dependence of
					// the type.
					var vSemanticAttributeValue = mSemanticAttributes[sPropertyName];

					if (jQuery.type(vSemanticAttributeValue) === "array" || jQuery.type(vSemanticAttributeValue) === "object") {
						vSemanticAttributeValue = JSON.stringify(vSemanticAttributeValue);
					} else if (jQuery.type(vSemanticAttributeValue) === "date") {
						// use the same conversion method for dates as the SmartFilterBar: toJSON()
						vSemanticAttributeValue = vSemanticAttributeValue.toJSON();
					} else if (jQuery.type(vSemanticAttributeValue) === "number" || jQuery.type(vSemanticAttributeValue) === "boolean") {
						vSemanticAttributeValue = vSemanticAttributeValue.toString();
					}

					if (vSemanticAttributeValue === "") {
						if (iSuppressionBehavior & SuppressionBehavior.ignoreEmptyString) {
							jQuery.sap.log.info("Semantic attribute " + sPropertyName + " is an empty string and due to the chosen Suppression Behiavour is being ignored.");
							continue;
						}
					}

					if (vSemanticAttributeValue === null) {
						if (iSuppressionBehavior & SuppressionBehavior.raiseErrorOnNull) {
							throw new Error("NavigationHandler.INVALID_INPUT", Severity.ERROR);
						} else {
							jQuery.sap.log.warning("Semantic attribute " + sPropertyName + " is null and ignored for mix in to selection variant");
							continue; // ignore!
						}
					}

					if (vSemanticAttributeValue === undefined) {
						if (iSuppressionBehavior & SuppressionBehavior.raiseErrorOnUndefined) {
							throw new Error("NavigationHandler.INVALID_INPUT", Severity.ERROR);
						} else {
							jQuery.sap.log.warning("Semantic attribute " + sPropertyName + " is undefined and ignored for mix in to selection variant");
							continue;
						}
					}

					if (jQuery.type(vSemanticAttributeValue) === "string") {
						oNewSelVariant.addSelectOption(sPropertyName, "I", "EQ", vSemanticAttributeValue);
					} else {
						throw new Error("NavigationHandler.INVALID_INPUT", Severity.ERROR);
					}

				}
			}

			// add parameters that are not part of the oNewSelVariant yet
			var aParameters = oSelectionVariant.getParameterNames();
			var i;
			for (i = 0; i < aParameters.length; i++) {
				if (!oNewSelVariant.getSelectOption(aParameters[i])) {
					oNewSelVariant.addSelectOption(aParameters[i], "I", "EQ", oSelectionVariant.getParameter(aParameters[i]));
				}
			}

			// add selOptions that are not part of the oNewSelVariant yet
			var aSelOptionNames = oSelectionVariant.getSelectOptionsPropertyNames();
			for (i = 0; i < aSelOptionNames.length; i++) {
				if (!oNewSelVariant.getSelectOption(aSelOptionNames[i])) {
					var aSelectOption = oSelectionVariant.getSelectOption(aSelOptionNames[i]);
					// add every range in the current select option
					for (var j = 0; j < aSelectOption.length; j++) {
						oNewSelVariant.addSelectOption(aSelOptionNames[i], aSelectOption[j].Sign, aSelectOption[j].Option, aSelectOption[j].Low, aSelectOption[j].High);
					}
				}
			}

			return oNewSelVariant;
		},

		_ensureSelectionVariantFormatString: function(vSelectionVariant) {
			/*
			 * There are legacy AppStates where the SelectionVariant is being stored as a string. However, that is not compliant to the specification,
			 * which states that a standard JS object shall be provided. Internally, however, the selectionVariant is always of type string. Situation
			 * Persistency internal API ---------------- ------------------ --------------------- legacy string string new approach (JSON) object
			 * string
			 */

			if (vSelectionVariant === undefined) {
				return undefined;
			}

			var vConvertedSelectionVariant = vSelectionVariant;

			if (typeof vSelectionVariant === "object") {
				vConvertedSelectionVariant = JSON.stringify(vSelectionVariant);
			}

			return vConvertedSelectionVariant;
		},

		_addParametersToAppData: function(oAppData, oStartupParameters) {
			var vSelectionVariant = oAppData.selectionVariant || {};
			/*
			 * Be aware that oAppData.selectionVariant may be both: a string or an object. for details see also _ensureSelectionVariantFormatString()
			 */
			var oSelectionVariant = new SelectionVariant(vSelectionVariant);

			for ( var sPropertyName in oStartupParameters) {
				if (oStartupParameters.hasOwnProperty(sPropertyName)) {

					var sValue = "";
					// We support parameters as a map with strings and as a map with arrays with length one (as
					// returned by component.getStartupParameters).
					if (typeof oStartupParameters[sPropertyName] === "string") {
						sValue = oStartupParameters[sPropertyName];
					} else if (jQuery.type(oStartupParameters[sPropertyName]) === "array" && oStartupParameters[sPropertyName].length === 1) {
						sValue = oStartupParameters[sPropertyName][0]; // only single-valued parameters are allowed
					} else {
						throw new Error("NavigationHandler.INVALID_INPUT", Severity.ERROR);
					}

					// add URL parameter to SelectionVariant:

					// if the property is neither in parameters nor in selOpts, there is no conflict and we can
					// just put URL parameter to the selection variant
					if (typeof oSelectionVariant.getSelectOption(sPropertyName) === "undefined" && typeof oSelectionVariant.getParameter(sPropertyName) === "undefined") {
						oSelectionVariant.addSelectOption(sPropertyName, "I", "EQ", sValue);
						continue;
					}

					// if the property is already in the selection variant there could be a conflict
					if (oSelectionVariant.getSelectOption(sPropertyName) || oSelectionVariant.getParameter(sPropertyName)) {

						switch (this.sParamHandlingMode) {
							// SelectionVariant wins do nothing
							case ParamHandlingMode.SelVarWins:
								break;

							// URL parameters wins
							case ParamHandlingMode.URLParamWins:

								// first remove the property if it's already in the select option or parameters
								oSelectionVariant.removeSelectOption(sPropertyName);
								oSelectionVariant.removeParameter(sPropertyName);

								oSelectionVariant.addSelectOption(sPropertyName, "I", "EQ", sValue);
								break;

							// Insert URL parameters into Selection Options
							case ParamHandlingMode.InsertInSelOpt:
								// if the parameter which has to be added to the selection variant is already in the
								// parameters of the selection variant,
								// we have to ensure that the added one is in the select option and the old one is
								// removed from the selection variant
								var sOldParamValue = oSelectionVariant.getParameter(sPropertyName);
								if (sOldParamValue) {
									oSelectionVariant.removeParameter(sPropertyName);
									oSelectionVariant.addSelectOption(sPropertyName, "I", "EQ", sOldParamValue);
								}

								// addSelectOption will not add if already in
								oSelectionVariant.addSelectOption(sPropertyName, "I", "EQ", sValue);
								break;
							default:
								// default: SelectionVariant wins. Do nothing.
								break;
						}
					}
				}
			}
			oAppData.selectionVariant = oSelectionVariant.toJSONString();
			return oAppData;
		},

		_saveAppState: function(oAppData, fnOnAfterSave, fnOnError) {

			var oAppState = this.oCrossAppNavService.createEmptyAppState(this.oComponent);
			var sAppStateKey = oAppState.getKey();
			var oError;

			var oAppDataForSave = {
				selectionVariant: {},
				tableVariantId: "",
				customData: {}
			};

			if (oAppData.selectionVariant) {
				/*
				 * The specification states that Selection Variants need to be JSON objects. However, internally, we work with strings for
				 * "selectionVariant". Therefore, in case that this is a string, we need to JSON-parse the data.
				 */
				if (typeof oAppData.selectionVariant === "string") {
					try {
						oAppDataForSave.selectionVariant = JSON.parse(oAppData.selectionVariant);
					} catch (x) {
						oError = this._createTechnicalError("NavigationHandler.AppStateSave.parseError");
						if (fnOnError) {
							fnOnError(oError);
						}
						return undefined;
					}
				} else {
					oAppDataForSave.selectionVariant = oAppData.selectionVariant;
				}
			}
			if (oAppData.tableVariantId) {
				oAppDataForSave.tableVariantId = oAppData.tableVariantId;
			}
			if (oAppData.customData) {
				oAppDataForSave.customData = oAppData.customData;
			}
			oAppState.setData(oAppDataForSave);
			var oSavePromise = oAppState.save();

			if (fnOnAfterSave) {
				oSavePromise.done(function() {
					fnOnAfterSave(sAppStateKey);
				});
			}

			if (fnOnError) {
				var that = this;
				oSavePromise.fail(function() {
					oError = that._createTechnicalError("NavigationHandler.AppStateSave.failed");
					fnOnError(oError);
				});
			}
			return sAppStateKey;
		},

		_loadAppState: function(sAppStateKey, oDeferred) {

			var oAppStatePromise = this.oCrossAppNavService.getAppState(this.oComponent, sAppStateKey);
			var that = this;

			oAppStatePromise.done(function(oAppState) {
				var oAppData = {
					selectionVariant: "{}",
					tableVariantId: "",
					customData: {}
				};
				var oAppDataLoaded = oAppState.getData();

				if (typeof oAppDataLoaded === "undefined") {
					var oError = that._createTechnicalError("NavigationHandler.getDataFromAppState.failed");
					oDeferred.reject(oError, {}, NavType.iAppState);
				} else {
					if (oAppDataLoaded.selectionVariant) {
						/*
						 * In case that we get an object from the stored AppData (=persistency), we need to stringify the JSON object.
						 */
						oAppData.selectionVariant = that._ensureSelectionVariantFormatString(oAppDataLoaded.selectionVariant);
					}
					if (oAppDataLoaded.tableVariantId) {
						oAppData.tableVariantId = oAppDataLoaded.tableVariantId;
					}
					if (oAppDataLoaded.customData) {
						oAppData.customData = oAppDataLoaded.customData;
					}
				}

				// resolve is called on passed Deferred object to trigger a call of the done method, if
				// implemented
				// the done method will receive the loaded appState and the navigation type as parameters
				oDeferred.resolve(oAppData, {}, NavType.iAppState);
			});
			oAppStatePromise.fail(function() {
				var oError = that._createTechnicalError("NavigationHandler.getAppState.failed");
				oDeferred.reject(oError, {}, NavType.iAppState);
			});
		},

		_getInnerAppStateKey: function(sAppHash) {

			// trivial case: no app hash available at all.
			if (!sAppHash) {
				return undefined;
			}

			/* new approach: separated via question mark / part of the query parameter of the AppHash */
			var aMatches = this._rIAppStateNew.exec(sAppHash);

			/* old approach: spearated via slashes / i.e. part of the route itself */
			if (aMatches === null) {
				aMatches = this._rIAppStateOld.exec(sAppHash);
			}

			/*
			 * old approach: special case: if there is no deep route/key defined, the sap-iapp-state may be at the beginning of the string, without
			 * any separation with the slashes
			 */
			if (aMatches === null) {
				aMatches = this._rIAppStateOldAtStart.exec(sAppHash);
			}

			if (aMatches === null) {
				// there is no (valid) sap-iapp-state in the App Hash
				return undefined;
			}

			return aMatches[1];
		},

		_replaceInnerAppStateKey: function(sAppHash, sAppStateKey) {
			var sNewIAppState = this.IAPP_STATE + "=" + sAppStateKey;

			/*
			 * generate sap-iapp-states with the new way
			 */
			if (!sAppHash) {
				// there's no sAppHash key yet
				return "?" + sNewIAppState;
			}

			var fnAppendToQueryParameter = function(sAppHash) {
				// there is an AppHash available, but it does not contain a sap-iapp-state parameter yet - we need to append one

				// new approach: we need to check, if a set of query parameters is already available
				if (sAppHash.indexOf("?") !== -1) {
					// there are already query parameters available - append it as another parameter
					return sAppHash + "&" + sNewIAppState;
				}
				// there are no a query parameters available yet; create a set with a single parameter
				return sAppHash + "?" + sNewIAppState;
			};

			if (!this._getInnerAppStateKey(sAppHash)) {
				return fnAppendToQueryParameter(sAppHash);
			}
			// There is an AppHash available and there is already an sap-iapp-state in the AppHash

			if (this._rIAppStateNew.test(sAppHash)) {
				// the new approach is being used
				return sAppHash.replace(this._rIAppStateNew, function(sNeedle) {
					return sNeedle.replace(/\=.*/ig, "=" + sAppStateKey);
				});
			}

			// we need to remove the old AppHash entirely and replace it with a new one.

			var fnReplaceOldApproach = function(rOldApproach, sAppHash) {
				sAppHash = sAppHash.replace(rOldApproach, "");
				return fnAppendToQueryParameter(sAppHash);
			};

			if (this._rIAppStateOld.test(sAppHash)) {
				return fnReplaceOldApproach(this._rIAppStateOld, sAppHash);
			}

			if (this._rIAppStateOldAtStart.test(sAppHash)) {
				return fnReplaceOldApproach(this._rIAppStateOldAtStart, sAppHash);
			}

			jQuery.sap.assert(false, "internal inconsistency: Approach of sap-iapp-state not known, but _getInnerAppStateKey returned it");
			return undefined;
		},

		_getURLParametersFromSelectionVariant: function(vSelectionVariant) {
			var mURLParameters = {};
			var i = 0;
			var oSelectionVariant;

			if (typeof vSelectionVariant === "string") {
				oSelectionVariant = new SelectionVariant(vSelectionVariant);
			} else if (typeof vSelectionVariant === "object") {
				oSelectionVariant = vSelectionVariant;
			} else {
				throw new Error("NavigationHandler.INVALID_INPUT", Severity.ERROR);
			}

			// add URLs parameters from SelectionVariant.SelectOptions (if single value)
			var aSelectProperties = oSelectionVariant.getSelectOptionsPropertyNames();
			for (i = 0; i < aSelectProperties.length; i++) {
				var aSelectOptions = oSelectionVariant.getSelectOption(aSelectProperties[i]);
				if (aSelectOptions.length === 1 && aSelectOptions[0].Sign === "I" && aSelectOptions[0].Option === "EQ") {
					mURLParameters[aSelectProperties[i]] = aSelectOptions[0].Low;
				}
			}

			// add parameters from SelectionVariant.Parameters
			var aParameterNames = oSelectionVariant.getParameterNames();
			for (i = 0; i < aParameterNames.length; i++) {
				var sParameterValue = oSelectionVariant.getParameter(aParameterNames[i]);

				mURLParameters[aParameterNames[i]] = sParameterValue;
			}
			return mURLParameters;
		},

		_createTechnicalError: function(sErrorCode, oPrevious) {

			// currently the following error codes are set:
			// "NavigationHandler.isIntentSupported.failed"
			// "NavigationHandler.AppStateSave.failed"
			// "NavigationHandler.getDataFromAppState.failed"
			// "NavigationHandler.getStartupState.failed"

			var sSeverity = Severity.ERROR;
			var mUItext = {
				oi18n: this.oi18n,
				sTextKey: "TECHNICAL_ERROR"
			};
			/* eslint-disable */
			// TODO provide detail error messages, as soon as Error object supports it
			/* eslint-enable */
			return new Error(sErrorCode, sSeverity, oPrevious, mUItext);
		}
	});

	return NavigationHandler;

});

}; // end of sap/suite/ui/generic/template/ListReport/nav/NavigationHandler.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ObjectPage.Component') ) {



jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained

jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained

jQuery.sap.declare("sap.suite.ui.generic.template.ObjectPage.Component");

sap.suite.ui.generic.template.lib.TemplateComponent.extend("sap.suite.ui.generic.template.ObjectPage.Component", {
	metadata: {
		library: "sap.suite.ui.generic.template",
		properties: {
			"templateName": {
				"type": "string",
				"defaultValue": "sap.suite.ui.generic.template.ObjectPage.view.Details"
			},
			"attachmentSupport": "boolean",
			"showRelatedApps": "boolean"
		},
		"manifest": "json"
	},
	updateBindingContext: function () {
		"use strict";

		sap.suite.ui.generic.template.lib.TemplateComponent.prototype.updateBindingContext.apply(this, arguments);
		var that = this;

		var oBindingContext = this.getBindingContext();
		if (oBindingContext) {
			this.getModel().getMetaModel().loaded().then(function () {
				var oUIModel = that.getModel("ui");

				// set draft status to blank according to UI decision
				oUIModel.setProperty("/draftStatus", '');

				var oActiveEntity = oBindingContext.getObject();
				if (oActiveEntity) {

					var oDraftController = that.getAppComponent().getTransactionController().getDraftController();
					var oDraftContext = oDraftController.getDraftContext();
					var bIsDraft = oDraftContext.hasDraft(oBindingContext) && !oActiveEntity.IsActiveEntity;
					var bHasActiveEntity = oActiveEntity.HasActiveEntity;
					if (that.getCreateMode()) {
						oUIModel.setProperty("/createMode", true);
						oUIModel.setProperty("/editable", true);
						oUIModel.setProperty("/enabled", true);
					} else {
						if (bIsDraft) {
							if (bHasActiveEntity) {
								oUIModel.setProperty("/createMode", false);
								oUIModel.setProperty("/editable", true);
								oUIModel.setProperty("/enabled", true);
							} else {
								oUIModel.setProperty("/createMode", true);
								oUIModel.setProperty("/editable", true);
								oUIModel.setProperty("/enabled", true);
							}
						} else {
							oUIModel.setProperty("/createMode", false);
							oUIModel.setProperty("/editable", false);

							if (oActiveEntity.hasOwnProperty("HasDraftEntity") && oActiveEntity.HasDraftEntity && oDraftContext.hasSiblingEntity(that.getEntitySet())) {
								oUIModel.setProperty("/enabled", false);
								that.getModel().read(oBindingContext.getPath(), {
										urlParameters: {'$expand': "SiblingEntity,DraftAdministrativeData"},
										success: function (oResponseData) {
											var oSiblingContext = {};
											if (oResponseData.hasOwnProperty("SiblingEntity")) {
												oSiblingContext = that.getModel().getContext("/" + that.getModel().getKey(oResponseData.SiblingEntity));
											}
											if (oSiblingContext) {
												var oSiblingEntity = oSiblingContext.getObject();
												if (oSiblingEntity && oSiblingEntity.hasOwnProperty("IsActiveEntity") && oSiblingEntity.IsActiveEntity === false) {
													var oResourceBundle = that.getModel("i18n").getResourceBundle();
													var oModel = that.getModel();
													var oMetaModel = oModel.getMetaModel();
													var oModelEntitySet = oMetaModel.getODataEntitySet(that.getEntitySet());
													var oDataEntityType = oMetaModel.getODataEntityType(oModelEntitySet.entityType);

													var sType = "";
													var sPath;
													//TODO: not use String directly but Thomas Ch. helpers, sometimes the value is behind a path
													//to do so best way would be to extract this in a DraftResumeDialoge
													//determining the value from an annotation path is not yet supported
													if (oDataEntityType["com.sap.vocabularies.Common.v1.Label"]) {
														sType = oDataEntityType["com.sap.vocabularies.Common.v1.Label"].String;
														if (sType === "") {
															sPath = oDataEntityType["com.sap.vocabularies.Common.v1.Label"].Path;
															if (sPath) {
																sType = oActiveEntity[sPath];
															}
														}
													}
													if (oDataEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"] && oDataEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"].TypeName) {
														if (sType === "") {
															sType = oDataEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"].TypeName.String;
														}
														if (sType === "") {
															sPath = oDataEntityType["com.sap.vocabularies.UI.v1.HeaderInfo"].TypeName.Path;
															if (sPath) {
																sType = oActiveEntity[sPath];
															}
														}
													}

													var sObjectKey = "";
													var aSemKey = oDataEntityType["com.sap.vocabularies.Common.v1.SemanticKey"];
													for (var i in aSemKey) {
														var oPropertyRef = aSemKey[i];
														if (sObjectKey === "") {
															sObjectKey = oActiveEntity[oPropertyRef.PropertyPath];
														} else {
															sObjectKey = sObjectKey + "-" + oActiveEntity[oPropertyRef.PropertyPath];
														}
													}

													var sChangedAt = "-";
													if (oResponseData.DraftAdministrativeData !== null && oResponseData.DraftAdministrativeData.LastChangeDateTime !== null) {
														var oDateFormatter = sap.ui.core.format.DateFormat.getDateTimeInstance({
															pattern: "MMMM d, yyyy HH:mm",
															style: "long"
														});
														sChangedAt = oDateFormatter.format(oResponseData.DraftAdministrativeData.LastChangeDateTime);
													}

													var aParams = [sType, sObjectKey, sChangedAt];
													var sDraftFoundText = oResourceBundle.getText("DRAFT_FOUND_RESUME", aParams);

													var oDialog = new sap.m.Dialog({
															title: oResourceBundle.getText("WARNING"),
															type: 'Message',
															state: 'Warning',
															content: new sap.m.Text({text: sDraftFoundText}),
															buttons: [
																new sap.m.Button({
																	text: oResourceBundle.getText("RESUME"),
																	press: function () {
																		oDialog.close();
																		that.getAppComponent().getNavigationController().navigateToContext(oSiblingContext, null, true);
																	}
																}),
																new sap.m.Button({
																	text: oResourceBundle.getText("DISCARD"),
																	press: function () {
																		oDialog.close();
																		// enable the buttons
																		oUIModel.setProperty("/enabled", true);																		
																		//delete the draft node
																		var oView = that.getAggregation("rootControl");
																		var oController = oView.getController();
																		oController.oBaseViewController.deleteEntity(true);
																		var oLockButton = sap.ui.getCore().byId(oView.getAggregation("content")[0].getAggregation("content")[0].getAggregation("headerTitle").getId() + "-lock");
																		oLockButton.setVisible(false);
																		oActiveEntity.HasDraftEntity = false;
																		//refresh the nodes
																		var oContainers = that.getAppComponent().getNavigationController().getViews();
																		for (var sContainer in oContainers) {
																			var oComponent = oContainers[sContainer].getComponentInstance();
																			if (oComponent.setIsRefreshRequired) {
																				oComponent.setIsRefreshRequired(true);
																			}
																		}
																	}
																})
															],
															afterClose: function () {
																oDialog.destroy();
															}
														}
													);
													oDialog.open();
												}
											}
											// enable the buttons
											oUIModel.setProperty("/enabled", true);												
										}
									}
								);
							} else {
								// enable the buttons
								oUIModel.setProperty("/enabled", true);
							}
						}
					}
				}
			});
		}
	},
	refreshBinding: function () {
		"use strict";

		sap.suite.ui.generic.template.lib.TemplateComponent.prototype.refreshBinding.apply(this, arguments);
		var oView = this.getAggregation("rootControl");
		if (oView instanceof sap.ui.core.mvc.XMLView) {
			try {
				oView.getContent()[0].getContent()[0].getSections().forEach(function (oSection) {
					oSection.getSubSections().forEach(function (oSubSection) {
						oSubSection.getBlocks().forEach(function (oBlock) {
							if (oBlock instanceof sap.ui.comp.smarttable.SmartTable) {
								oBlock.rebindTable();
							}
						});
					});
				});
			} catch (e) {
				// In case of refresh did not work
				jQuery.sap.log.error("Object Page could not rebind tables");
			}
		}
	}
});

}; // end of sap/suite/ui/generic/template/ObjectPage/Component.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.lib.TemplateViewController') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.lib.TemplateViewController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.template.BaseViewController'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.template.ViewUtil'); // unlisted dependency retained
jQuery.sap.require('sap.m.Table'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/lib/TemplateViewController",["sap/ui/core/mvc/Controller", "sap/ui/generic/template/BaseViewController", "sap/ui/generic/template/ViewUtil", "sap/m/Table", "sap/suite/ui/generic/template/ListReport/nav/NavigationHandler", "sap/suite/ui/generic/template/library"], function (mvcController, BaseViewController, ViewUtil, Table, NavigationHandler /*, library */) {
	"use strict";

	return mvcController.extend("sap.suite.ui.generic.template.lib.TemplateViewController", {

		metadata: {
			library: "sap.suite.ui.generic.template"
		},

		onInit: function () {
			this.oBaseViewController = new BaseViewController();
			this.oBaseViewController.onInit({
				showMessages: function () {
					var oUIModel = this.getView().getModel("ui");
					if (oUIModel) {
						return oUIModel.getProperty("/editable") ? false : true;
					} else {
						return true;
					}
				}
			});
			this.oBaseViewController.connectToView(this.getView());
			var oComponent = this.getComponent();
			this._resourceBundle = oComponent.getModel("i18n").getResourceBundle(); //template resource bundle which gets enhanced later
			if (typeof oComponent.bindComponent === 'function') {
				oComponent.bindComponent();
			}
		},

		onShowMessages: function (oEvent) {
			var oButton = oEvent.getSource();
			this.showMessagePopover(oButton, true);
		},

		showMessagePopover: function (oButton, bToggle) {
			return this.oBaseViewController.showMessagePopover(oButton, bToggle);
		},

		handleSuccess: function (oResponse, mParameters) {
			return this.oBaseViewController.handleSuccess(oResponse, mParameters);
		},

		handleError: function (oError, mParameters) {
			return this.oBaseViewController.handleError(oError, mParameters);
		},

		getContext: function () {
			return this.oBaseViewController.getContext();
		},

		getComponent: function () {
			return this.oBaseViewController.getComponent();
		},

		getComponentContainer: function () {
			return this.oBaseViewController.getComponentContainer();
		},

		getTransactionController: function () {
			return this.oBaseViewController.getTransactionController();
		},

		getNavigationController: function () {
			return this.oBaseViewController.getNavigationController();
		},

		getDraftContext: function () {
			return this.oBaseViewController.getDraftContext();
		},

		/*
		 onContinueLater: function () {
		 var sSavedAsDraft = this._resourceBundle.getText("SAVED_AS_DRAFT"); //"The object was saved as a draft";

		 if (this.getDraftContext().hasDraft(this.getContext())) {
		 // show message with timeout to show it after navigation
		 setTimeout(function () {
		 sap.m.MessageToast.show(sSavedAsDraft);
		 }, 10);
		 }

		 return this.goBack();
		 },
		 */

		onBack: function () {
			return this.goBack();
		},

		goBack: function () {
			// TODO once navigation controller provides back method use this one
			// return this.getNavigationController().goBack(true);
			window.history.back();

		},

		onEdit: function () {
			var that = this;
			//"Expired Lock Dialog" for "unsaved changes" in case of "lock of other user expired"
			var bEditDialog = false;
			var sCreatedByUser;
			var sEntitySet = that.getComponent().getEntitySet();
			// check whether Draft exists
			if (that.getDraftContext().isDraftEnabled(sEntitySet) && that.getDraftContext().isDraftRoot(sEntitySet)) {
				//check whether is DraftAdministrativeData available
				if (that.getDraftContext().hasDraftAdministrativeData(sEntitySet)) {
					var oDraftAdministrativeData = that.getContext().getProperty("DraftAdministrativeData");
					//check whether lock by other user is expired
					if (oDraftAdministrativeData && !oDraftAdministrativeData.DraftIsProcessedByMe && !oDraftAdministrativeData.InProcessByUser) {
						bEditDialog = true;
						sCreatedByUser = oDraftAdministrativeData.CreatedByUser;
					}
				} else {
					//In case of DeepLink the DraftAdministrativeData still not retrieved
					var oBindingContext = that.getComponent().getBindingContext();
					var oModel = that.getComponent().getModel();
					oModel.read(oBindingContext.getPath(), {
						urlParameters: {
							"$expand": "SiblingEntity,DraftAdministrativeData"
						},
						success: function (oResponseData) {
							//check whether lock by other user is expired
							if (oResponseData.DraftAdministrativeData && !oResponseData.DraftAdministrativeData.DraftIsProcessedByMe && !oResponseData.DraftAdministrativeData.InProcessByUser) {
								bEditDialog = true;
								sCreatedByUser = oResponseData.DraftAdministrativeData.CreatedByUser;
								//start "Expired Lock Dialog", because lock by other user is expired
								that.expiredLockDialog(sCreatedByUser);
							}
						}
					});
					return;
				}
			}
			// Continue with edit mode or start "Expired Lock Dialog", because lock by other user is expired
			if (bEditDialog) {
				that.expiredLockDialog(sCreatedByUser);
			} else {
				that.oBaseViewController.editEntity().then(function (oContext) {
					var oDraft;
					if (that.getDraftContext().hasDraft(oContext)) {
						that._setRootPageToDirty();
						oDraft = oContext && oContext.context || oContext;
					}
					if (oDraft) {
						// navigate to draft
						that.getNavigationController().navigateToContext(oDraft, undefined, true);
					} else {
						var oUIModel = that.getView().getModel("ui");
						oUIModel.setProperty("/editable", true);
					}
				});
			}
		},

		expiredLockDialog: function (sCreatedByUser) {
			var that = this;
			var aTextParams = [sCreatedByUser];
			var sDialogContentText = that._resourceBundle.getText("DRAFT_LOCK_EXPIRED", aTextParams);
			var oDialog = new sap.m.Dialog({
				title: that._resourceBundle.getText("WARNING"),
				type: "Message",
				state: "Warning",
				content: new sap.m.Text({
					text: sDialogContentText
				}),
				buttons: [
					new sap.m.Button({
						text: that._resourceBundle.getText("EDIT"),
						press: function () {
							oDialog.close();
							//delete draft (execute by edit mode ?)
							//continue with edit mode and navigate to draft
							that.oBaseViewController.editEntity().then(function (oContext) {
								var oDraft;
								if (that.getDraftContext().hasDraft(oContext)) {
									oDraft = oContext && oContext.context || oContext;
								}
								if (oDraft) {
									// navigate to draft
									that.getNavigationController().navigateToContext(oDraft, undefined, true);
								} else {
									var oUIModel = that.getView().getModel("ui");
									oUIModel.setProperty("/editable", true);
								}
							});
						}
					}),
					new sap.m.Button({
						text: that._resourceBundle.getText("CANCEL"),
						press: function () {
							oDialog.close();
							// ready
						}
					})
				],
				afterClose: function () {
					oDialog.destroy();
				}
			});
			oDialog.open();
		},

		fnDraftPopover: function (oContext, oBindingContext, oView, oTarget) {
			if (!oContext._oPopover) {
				oContext._oPopover = sap.ui.xmlfragment("sap.suite.ui.generic.template.fragments.DraftAdminDataPopover", oContext);//this);
				oView.addDependent(oContext._oPopover);
			} else {
				oContext._oPopover.unbindElement();
			}
			var oAdminModel = new sap.ui.model.json.JSONModel({
				IsActiveEntity: oBindingContext.getProperty("IsActiveEntity"),
				HasDraftEntity: oBindingContext.getProperty("HasDraftEntity")
			});
			oContext._oPopover.setModel(oAdminModel, "admin");

			oContext._oPopover.bindElement({
				path: oBindingContext.getPath() + '/DraftAdministrativeData'
			});

			if (oContext._oPopover.getBindingContext() !== undefined && oContext._oPopover.getBindingContext() !== null) {
				oContext._oPopover.openBy(oTarget);
			} else {
				oContext._oPopover.getObjectBinding().attachDataReceived(jQuery.proxy(function () {
					oContext._oPopover.openBy(oTarget);
				}, this));
				oContext._oPopover.getObjectBinding().getModel().attachBatchRequestFailed(jQuery.proxy(function () {
					oContext._oPopover.openBy(oTarget);
				}, this));
			}
			//handling of the close button in the popover
			var oPopoverButton = sap.ui.getCore().byId(oContext._oPopover.getAggregation("_internalHeader").getAggregation("contentRight")[0].getId());
			oPopoverButton.attachPress(function (oEvent) {
				oEvent.getSource().getParent().getParent().close();
			});
		},

		formatText: function () {
			var aArgs = Array.prototype.slice.call(arguments, 1);
			var sKey = arguments[0];
			if (!sKey) {
				return '';
			}
			var oBundle = this.getView().getModel("i18n").getResourceBundle();
			if (aArgs.length > 0 && (aArgs[0] === null || aArgs[0] === undefined || aArgs[0] === "")) {
				if (aArgs.length > 2 && (aArgs[1] === null || aArgs[1] === undefined || aArgs[1] === "")) {
					return aArgs[2];
				} else {
					return "";
				}
			} else {
				return oBundle.getText(sKey, aArgs[0]);
			}
		},

		formatDraftLockText: function (IsActiveEntity, HasDraftEntity, LockedBy) {
			return this.formatDraftLockTextGeneric(IsActiveEntity, HasDraftEntity, LockedBy, this);
		},

		formatDraftLockTextGeneric: function (IsActiveEntity, HasDraftEntity, LockedBy, oController) {
			var oBundle = oController.getView().getModel("i18n").getResourceBundle();
			if (!IsActiveEntity) {
				// current assumption: is my Draft as I don't see other's draft -> TODO: to be checked
				return oBundle.getText("DRAFT_OBJECT");
			} else if (HasDraftEntity) {
				// current assumption: is other's Draft -> TODO: to be checked
				if (LockedBy !== '') {
					return oBundle.getText("LOCKED_OBJECT");
				} else {
					return oBundle.getText("UNSAVED_CHANGES");
				}
			} else {
				return ""; // not visible
			}
		},

		onDiscardDraft: function (oEvent) {
			var aCustomData = oEvent.getSource().getCustomData();
			var that = this;
			var oContext = that.getContext();
			var oEntity = oContext.getObject();
			var sPlacement;
			var sPopOverText;
			// Get Placement via custom data or set default to Top
			if (aCustomData && aCustomData.length && aCustomData[0]) {
				sPlacement = aCustomData[0].getValue();
			} else {
				sPlacement = sap.m.PlacementType.Top;
			}

			// Determine the right text CSS 1570522238
			if (oEntity.hasOwnProperty("HasActiveEntity") && !oContext.getProperty("IsActiveEntity") && !oContext.getProperty("HasActiveEntity")) {
				sPopOverText = this._resourceBundle.getText("CANCEL_AND_DISCARD"); //"Cancel editing and discard this object?"
			} else {
				sPopOverText = this._resourceBundle.getText("DISCARD_EDIT"); //"Cancel editing and discard all changes?"
			}

			var oPopover = new sap.m.Popover(
				{
					placement: sPlacement,
					showHeader: false,
					content: new sap.m.VBox({
						items: [new sap.m.Text({
							text: sPopOverText,
							width: '16rem'
						}),
							new sap.m.Button({
								text: this._resourceBundle.getText("DISCARD"), //'Discard',
								width: '100%',
								press: function () {
									var fnDiscardDraft = function (oActive) {
										that.oBaseViewController.deleteEntity().then(function () {
											that._setRootPageToDirty();
											if (oActive && oActive.getObject() && oActive.getObject().IsActiveEntity) {
												that.getNavigationController().navigateToContext(oActive, undefined, true);
											} else {
												// new document discarded, go back to previous page
												that.goBack();
											}
										});
									};

									var oModel = that.getView().getModel();

									if (oEntity.hasOwnProperty("HasActiveEntity") && oEntity.HasActiveEntity && oEntity.hasOwnProperty("SiblingEntity")) {
										oModel.read(oContext.getPath() + "/SiblingEntity", {
											success: function (oResponseData) {
												var oContext = oModel.getContext("/" + oModel.getKey(oResponseData));
												fnDiscardDraft(oContext);
											}
										});
									} else {
										fnDiscardDraft();
									}
								}
							})]
					})
				});

			oPopover.addStyleClass("sapUiContentPadding");

			oPopover.openBy(oEvent.getSource());
		},

		onDelete: function (oEvent) {
			var aCustomData = oEvent.getSource().getCustomData();
			var sPlacement;
			var that = this;

			// Get Placement via custom data or set default to Top
			if (aCustomData && aCustomData.length && aCustomData[0]) {
				sPlacement = aCustomData[0].getValue();
			} else {
				sPlacement = sap.m.PlacementType.Top;
			}

			var oPopover = new sap.m.ResponsivePopover({
				placement: sPlacement,
				showHeader: false,
				content: new sap.m.VBox({
					items: [new sap.m.Label({
						text: this._resourceBundle.getText("DELETE_QUESTION") //"Do you really want to delete this object?"
					}), new sap.m.Button({
						text: this._resourceBundle.getText("DELETE"), // 'Delete',
						width: '100%',
						press: function () {
							that.oBaseViewController.deleteEntity().then(function () {
								that._setOthersToDirty();
								// document was deleted, go back to previous page
								that.goBack();
							});
						}
					})]
				})
			});

			oPopover.addStyleClass("sapUiContentPadding");

			oPopover.openBy(oEvent.getSource());
		},

		onRelatedApps: function (oEvent) {
			var that = this;
			that.oButton = oEvent.getSource();
			that.oMetaModel = that.getComponent().getModel().getMetaModel();
			that.oContext = that.getContext();
			that.oParsedUrl = sap.ushell.Container.getService("URLParsing").parseShellHash(document.location.hash);
			var oLinks = sap.ushell.Container.getService("CrossApplicationNavigation").getSemanticObjectLinks(that.oParsedUrl.semanticObject);
			//var oLinks = sap.ushell.Container.getService("CrossApplicationNavigation").getSemanticObjectLinks("EPMProduct"); // test

			oLinks.done(function (aLinks) {
				var oEntity = that.oContext.getObject();
				var sEntityType = oEntity.__metadata.type;
				var oDataEntityType = that.oMetaModel.getODataEntityType(sEntityType);
				var aSemKey = oDataEntityType["com.sap.vocabularies.Common.v1.SemanticKey"];
				//var oSemKeyParam = {};
				var oParam = {};
				if (aSemKey && aSemKey.length > 0) {
					for (var j in aSemKey) {
						var sSemKey = aSemKey[j].PropertyPath;
						if (!oParam[sSemKey]) {
							oParam[sSemKey] = [];
							oParam[sSemKey].push(oEntity[sSemKey]);
						}
					}
				} else {
					// Fallback if no SemanticKey
					for (var k in oDataEntityType.key.propertyRef) {
						var sObjKey = oDataEntityType.key.propertyRef[k].name;
						if (!oParam[sObjKey]) {
							oParam[sObjKey] = [];
							oParam[sObjKey].push(oEntity[sObjKey]);
						}
					}
				}
				// filter current semanticObject-action
				var aLinksforNav = [];
				var sCurrentAction = that.oParsedUrl.semanticObject + "-" + that.oParsedUrl.action;
				for (var i in aLinks) {
					var oLink = aLinks[i];
					if (oLink.intent.indexOf(sCurrentAction) < 0) {
						aLinksforNav.push(oLink);
					}
				}
				//prepare ActionSheet
				var oActionSheet = new sap.m.ActionSheet({
					placement: sap.m.PlacementType.Bottom,
					showCancelButton: false
				});
				if (aLinksforNav.length > 0) {
					for (var n in aLinksforNav) {
						var oLinkforNav = aLinksforNav[n];
						var oBtn = new sap.m.Button({
							text: oLinkforNav.text
						});
						oBtn.attachPress(that.onPressLinkedApps, that);
						oBtn.addCustomData(new sap.ui.core.CustomData({
							key: "linkData",
							value: {
								"oParam": oParam,
								"oLinkforNav": oLinkforNav
							}
						}));
						oActionSheet.addButton(oBtn);
					}
				} else {
					var oBtnNoData = new sap.m.Button({
						text: sap.ui.getCore().getLibraryResourceBundle("sap.m").getText("LIST_NO_DATA"), //workaround until NO_RELATED_APPS is translated
						enabled: false
					});
					oActionSheet.addButton(oBtnNoData);
				}
				oActionSheet.openBy(that.oButton);
			});
		},

		onPressLinkedApps: function (oEvent) {
			var oBtn = oEvent.getSource();
			var oLinkData = oBtn.getCustomData()[0].getValue();
			// prepare navigation with SemanticKey e.q.: #SalesOrder-manage?ActiveSalesOrderID=500000096
			var str = oLinkData.oLinkforNav.intent;
			var sSemanticObject = str.substring(1, str.indexOf("-"));
			var sPos = (str.indexOf("~") > -1) ? str.indexOf("~") : str.length;
			var sAction = str.substring(str.indexOf("-") + 1, sPos);
			var oNavArguments = {
				target: {
					semanticObject: sSemanticObject,
					action: sAction
				},
				params: oLinkData.oParam
			};
			this.oCrossAppNavService = sap.ushell.Container.getService("CrossApplicationNavigation").toExternal(oNavArguments);
		},

		showMessagesButton: function (aMessages) {
			if (aMessages && aMessages.length && aMessages.length > 0) {
				return true;
			} else {
				return false;
			}
		},

		showMessagesButtonText: function (aMessages) {
			return aMessages && aMessages.length || '';
		},

		onActivate: function () {
			var that = this;
			this.oBaseViewController.activateDraftEntity().then(function (oResponse) {
				sap.m.MessageToast.show(that._resourceBundle.getText("OBJECT_SAVED"));
				if (oResponse && oResponse.context) {
					// Set Root to dirty
					that._setRootPageToDirty();

					// navigate to activate document
					that.getNavigationController().navigateToContext(oResponse.context, undefined, true);
				}
			});
		},

		onSave: function () {
			var that = this;

			// Non-Draft, save and switch back to read-only mode
			this.oBaseViewController.saveEntity().then(function (oContext) {
				var oNavigationController = that.getNavigationController();
				var oUIModel = that.getView().getModel("ui");

				oUIModel.setProperty("/editable", false);

				if (that.getComponent().getCreateMode()) {
					// in case of create mode navigate to new item
					if (oContext) {
						oNavigationController.navigateToContext(oContext, undefined, true);
					}

					setTimeout(function () {
						sap.m.MessageToast.show(this._resourceBundle.getText("OBJECT_CREATED")); //"Object was created");
					}, 10);
				} else {
					sap.m.MessageToast.show(this._resourceBundle.getText("OBJECT_SAVED")); //"Object was saved");
				}

			});
		},

		// action triggered from tables
		onCallActionFromList: function (oEvent, oSmartFilterBar) {
			var mOutboundParameters, oInnerAppData;
			if (oEvent) {
				var oTable = oEvent.getSource().getParent().getParent().getTable();
				var oContext = this._getSelectedContext(oTable);
				var oCustomData = this._getCustomData(oEvent);
				var oNavigationHandler = new NavigationHandler(this);
				if (oCustomData.Type === "com.sap.vocabularies.UI.v1.DataFieldForAction") {
					this._callAction(oEvent, oCustomData, oContext, "", oTable);
				} else if (oNavigationHandler) {
					var mSemanticAttributes = oContext.getObject();
					delete mSemanticAttributes.__metadata;
					if (oSmartFilterBar) {
						var sSelectionVariant = this.oSmartFilterBar.getDataSuiteFormat() || "{}";
						mSemanticAttributes = this._filterObjectsFromJSON(mSemanticAttributes);
						mOutboundParameters = oNavigationHandler.mixAttributesAndSelectionVariant(mSemanticAttributes, sSelectionVariant).toJSONString();
						oInnerAppData = {
							selectionVariant: this.oSmartFilterBar.getDataSuiteFormat(),
							tableVariantID: this.oSmartTable.getCurrentVariantId()
						};
					} else {
						jQuery.extend(mSemanticAttributes, this.getContext().getObject());
						mOutboundParameters = this._filterObjectsFromJSON(mSemanticAttributes);
						mOutboundParameters = JSON.stringify(mOutboundParameters);
						oInnerAppData = {};
					}
					var fCallbackOnError = jQuery.proxy(this._handleError, this);
					oNavigationHandler.navigate(oCustomData.SemanticObject, oCustomData.Action, mOutboundParameters, oInnerAppData, fCallbackOnError);
				}
			}
		},

		// action triggered from details/object page
		onCallAction: function (oEvent) {
			var oCustomData = this._getCustomData(oEvent);
			var oContext = this.getContext();
			if (oContext && oCustomData.Type === "com.sap.vocabularies.UI.v1.DataFieldForAction") {
				this._callAction(oEvent, oCustomData, oContext, this.getComponent().getNavigationProperty(), "");
			}
		},

		onCancel: function () {
			var oUIModel = this.getView().getModel("ui");
			oUIModel.setProperty("/editable", false);
			oUIModel.setProperty("/enabled", true);
			this.getView().getModel().resetChanges();

			if (this.getComponent().getCreateMode()) {
				// in case of create mode navigate back to list
				this.goBack();
			}
		},

		triggerPrepareOnEnterKeyPress: function () {
			var oDraftContext = this.getDraftContext();
			if (oDraftContext.isDraftEnabled(this.getComponent().getEntitySet())) {

				var that = this;

				this.getView().attachBrowserEvent("keyup", function (oBrowswerEvent) {
					if (oBrowswerEvent.keyCode === 13 && that.getView().getModel("ui").getProperty("/editable")) {
						var oContext = that.getContext();
						if (oContext && oDraftContext.hasDraftPreparationAction(oContext)) {
							that.getTransactionController().getDraftController().saveAndPrepareDraftEntity(oContext, {
								binding: that.getComponentContainer().getElementBinding()
							}).then(function (oResponse) {
								that.oBaseViewController.handleSuccess(oResponse);
								// as this is only a temporarely solution we use a private method of the UI5 baseviewcontroller, aligned with UI5
								that._setOthersToDirty();
							}, function (oError) {
								that.oBaseViewController.handleError(oError);
							});
						}
					}
				});
			}
		},

		onBeforeRebindTable: function (oEvent) {
			// still open
			var oBindingParams = oEvent.getParameter("bindingParams");
			oBindingParams.parameters = oBindingParams.parameters || {};
			var oSmartTable = oEvent.getSource();
			/* deactivated until AI support filter by NavProp
			 var oSmartFilterBar = this.byId(oSmartTable.getSmartFilterId());
			 if (oSmartFilterBar instanceof sap.ui.comp.smartfilterbar.SmartFilterBar) {
			 var oCustomControl = oSmartFilterBar.getControlByKey('DraftState');
			 if (oCustomControl instanceof sap.m.ComboBox) {
			 var vDraftState = oCustomControl.getSelectedKey();
			 switch (vDraftState) {
			 case "0":
			 break;
			 case "1": //Active
			 oBindingParams.filters.push(new sap.ui.model.Filter('IsActiveEntity', 'EQ', true));
			 oBindingParams.filters.push(new sap.ui.model.Filter('HasDraftEntity', 'EQ', false));
			 break;
			 case "2": //Draft
			 oBindingParams.filters.push(new sap.ui.model.Filter('IsActiveEntity', 'EQ', false));
			 oBindingParams.filters.push(new sap.ui.model.Filter('I_DraftAdministrativeDataType/DraftIsCreatedByMe', 'EQ', true ));
			 break;
			 case "3": // Locked
			 oBindingParams.filters.push(new sap.ui.model.Filter('IsActiveEntity', 'EQ', false));
			 oBindingParams.filters.push(new sap.ui.model.Filter('I_DraftAdministrativeDataType/DraftIsCreatedByMe', 'EQ', false ));
			 oBindingParams.filters.push(new sap.ui.model.Filter('I_DraftAdministrativeDataType/InProcessByUser', 'NE', ' ' ));
			 break;
			 case "4": // Unsaved changes
			 oBindingParams.filters.push(new sap.ui.model.Filter('IsActiveEntity', 'EQ', false));
			 oBindingParams.filters.push(new sap.ui.model.Filter('I_DraftAdministrativeDataType/DraftIsCreatedByMe', 'EQ', false ));
			 oBindingParams.filters.push(new sap.ui.model.Filter('I_DraftAdministrativeDataType/InProcessByUser', 'EQ', ' ' ));
			 break;
			 default:
			 break;
			 }
			 }
			 }	*/
			this.oBaseViewController.getTableQueryParameters(oSmartTable.getEntitySet(), oBindingParams);
			var aSelect = oBindingParams.parameters.select && oBindingParams.parameters.select.split(',') || [];
			var aExpands = oBindingParams.parameters && oBindingParams.parameters.expand && oBindingParams.parameters.expand.split(',') || [];
			var sEntitySet = oSmartTable.getEntitySet();

			// check if any expand is neccessary
			for (var i = 0; i < aSelect.length; i++) {
				// check if expand is neccessary
				if (aSelect[i].indexOf("/") !== -1) {
					var aParts = aSelect[i].split("/");
					// remove property from path
					aParts.pop();
					var sNavigation = aParts.join("/");
					if (aExpands.indexOf(sNavigation) === -1) {
						aExpands.push(sNavigation);
					}
				}
			}

			// add Draft Admin Data to expand if entity is Draft and Draft Root and has Draft Admin Data
			if (this.getDraftContext().isDraftEnabled(sEntitySet) && this.getDraftContext().isDraftRoot(sEntitySet)) {
				if (this.getTransactionController().getDraftController().getDraftContext().hasDraftAdministrativeData(sEntitySet)) {

					if (aSelect && aSelect.length > 0) {
						if (aSelect.indexOf("DraftAdministrativeData") === -1) {
							oBindingParams.parameters.select = oBindingParams.parameters.select + ',DraftAdministrativeData';
						}
					}

					if (aExpands.indexOf("DraftAdministrativeData") === -1) {
						aExpands.push("DraftAdministrativeData");
					}
				}
			}

			if (aExpands.length > 0) {
				oBindingParams.parameters.expand = aExpands.join(",");
			}

			// sortOrder Annotation of presentation variant - only relevant for sap.m.Table
			var aCustomData = oSmartTable.getCustomData();
			var oCustomData = {};
			for (var k = 0; k < aCustomData.length; k++) {
				oCustomData[aCustomData[k].getKey()] = aCustomData[k].getValue();
			}
			var oTable = oSmartTable.getTable();
			var oVariant = oSmartTable.fetchVariant();
			var isEmpty = true;
			for (var key in oVariant) {
				if (oVariant.hasOwnProperty(key)) {
					isEmpty = false;
				}
			}
			if (isEmpty && oTable instanceof Table && oCustomData.TemplateSortOrder) {
				var aSortOrder = oCustomData.TemplateSortOrder.split(', ');
				for (var j = 0; j < aSortOrder.length; j++) {
					var aSort = aSortOrder[j].split(' ');
					if (aSort.length > 1) {
						oBindingParams.sorter.push(new sap.ui.model.Sorter(aSort[0], aSort[1] === "true"));
					} else {
						oBindingParams.sorter.push(new sap.ui.model.Sorter(aSort[0]));
					}
				}
			}

		},

		onListNavigate: function (oEvent) {
			oEvent.getSource().detachPress("onListNavigate");
			var result = this.oBaseViewController.navigateFromListItem(oEvent.getSource());
			oEvent.getSource().attachPress("onListNavigate");
			return result;
		},

		navigateFromListItem: function (oItem, oTable) {
			return this.oBaseViewController.navigateFromListItem(oItem, oTable);
		},

		addEntry: function (oEvent) {
			var that = this;
			var oTable = ViewUtil.getParentTable(oEvent.getSource());
			return this.oBaseViewController.addEntry(oTable).then(function () {
				that._setMeToDirty();
			});
		},

		onSearch: function (oEvent) {
			// for non-smart tables
			var oTable = ViewUtil.getParentTable(oEvent.getSource());
			return this.oBaseViewController.searchOnTable(oTable, oEvent.getParameter("query"));
		},

		onChange: function (oEvent) {
			var that = this;
			var sProperty = oEvent.getSource().getBindingPath("value");

			if (this.getDraftContext().hasDraft(this.getContext())) {
				var oUIModel = this.getView().getModel("ui");
				if (oUIModel) {
					var oModel = this.getView().getModel();

					oModel.attachEventOnce("requestSent", function () {
						oUIModel.setProperty("/draftStatus", that._resourceBundle.getText("DRAFT_SAVING")); // "Draft saving..."

						/* due to concept issues not yet released
						 Don't forget to uncomment sProperty definition above
						 var aSideEffects = that.getDraftContext().getSideEffects(that.getComponent().getEntitySet(), sProperty);
						 if (aSideEffects && aSideEffects.length){
						 for (var i = 0; i < aSideEffects.length; i++){
						 var oBlocked = oUIModel.getProperty("/blocked");
						 if (!oBlocked){
						 oBlocked = {};
						 oUIModel.setProperty("/blocked", oBlocked);
						 }

						 if (aSideEffects[i].hasOwnProperty('PropertyPath')){
						 oUIModel.setProperty("/blocked/" + aSideEffects[i].PropertyPath, true);
						 }
						 }
						 }
						 */
					});
					var oRequestFailedHandler;
					var oRequestCompletedHandler = function () {
						oUIModel.setProperty("/draftStatus", that._resourceBundle.getText("DRAFT_SAVED")); // "Draft saved"
						oModel.detachEvent("requestCompleted", oRequestCompletedHandler);
						oModel.detachEvent("requestFailed", oRequestFailedHandler);
					};

					oRequestFailedHandler = function () {
						oUIModel.setProperty("/draftStatus", that._resourceBundle.getText("DRAFT_NOT_SAVED")); // "Draft not saved"
						oModel.detachEvent("requestCompleted", oRequestCompletedHandler);
						oModel.detachEvent("requestFailed", oRequestFailedHandler);
					};

					oModel.attachRequestCompleted(oRequestCompletedHandler);
					oModel.attachRequestFailed(oRequestFailedHandler);

				}
			}

			return this.oBaseViewController.modifyEntity(sProperty, oEvent.getSource());
			// unblock side effects
			/*	due to concept issues not yet released
			 .then(function () {
			 var aSideEffects = that.getDraftContext().getSideEffects(that.getComponent().getEntitySet(), sProperty);
			 if (aSideEffects && aSideEffects.length){
			 for (var i = 0; i < aSideEffects.length; i++){
			 var oBlocked = oUIModel.getProperty("/blocked");
			 if (!oBlocked){
			 oBlocked = {};
			 oUIModel.setProperty("/blocked", oBlocked);
			 }

			 if (aSideEffects[i].hasOwnProperty('PropertyPath')){
			 oUIModel.setProperty("/blocked/" + aSideEffects[i].PropertyPath, undefined);
			 }
			 }
			 }
			 });
			 */
		},

		onContactDetails: function (oEvent) {
			if (!this.oPopover) {
				this.oPopover = oEvent.getSource().getParent().getParent().getParent().getParent().getParent().getAggregation("items")[1];
			}
			this.oPopover.bindElement(oEvent.getSource().getBindingContext().getPath());
			this.oPopover.openBy(oEvent.getSource());
		},

		/* PRIVATES */

		_setEnabledOfExportToExcel: function (aToolbarContent, sEnabled) {
			var iContentLength = aToolbarContent.length;
			for (var n = iContentLength - 1; n >= 0; --n ) {
				if (aToolbarContent[n].getIcon() === "sap-icon://excel-attachment") {
					aToolbarContent[n].setProperty("enabled", sEnabled);
					break;
				}
			}
			return this;
		},

		_setRootPageToDirty: function () {
			var oViews = this.getNavigationController().getViews();
			if (oViews && oViews.root) {
				var oInstance = oViews.root.getComponentInstance();
				if (oInstance && typeof oInstance.setIsRefreshRequired === 'function') {
					oInstance.setIsRefreshRequired(true);
				}
			}
		},

		_setMeToDirty: function () {
			var oViews = this.getNavigationController().getViews();
			var sMyId = this.getComponent().getId();

			for (var sView in oViews) {
				var oInstance = oViews[sView].getComponentInstance();
				if (oInstance) {
					if (oInstance.getId() === sMyId) {
						if (typeof oInstance.setIsRefreshRequired === 'function') {
							oInstance.setIsRefreshRequired(true);
						}
						return;
					}
				}
			}
		},

		_setOthersToDirty: function () {
			var oViews = this.getNavigationController().getViews();
			var sMyId = this.getComponent().getId();

			for (var sView in oViews) {
				var oInstance = oViews[sView].getComponentInstance();
				if (oInstance) {
					if (oInstance.getId() === sMyId) {
						continue;
					}
					if (typeof oInstance.setIsRefreshRequired === 'function') {
						oInstance.setIsRefreshRequired(true);
					}
				}
			}
		},

		_getCustomData: function (oEvent) {
			var aCustomData = oEvent.getSource().getCustomData();
			var oCustomData = {};
			for (var i = 0; i < aCustomData.length; i++) {
				oCustomData[aCustomData[i].getKey()] = aCustomData[i].getValue();
			}
			return oCustomData;
		},

		_checkActionCustomData: function (oCustomData) {
			if (!oCustomData.Action) {
				throw "Template Error: Function Import Name not found in custom data";
			}

			if (!oCustomData.Label) {
				// as fallback show function import name
				oCustomData.Label = oCustomData.Action;
			}
		},

		_getSelectedContext: function (oTable) {

			var aSelectedContexts = [];
			if (oTable instanceof Table) {
				aSelectedContexts = oTable.getSelectedContexts();
			} else {
				var aIndex = oTable.getSelectedIndices();
				for (var i = 0; i < aIndex.length; i++) {
					aSelectedContexts.push(oTable.getContextByIndex(aIndex[i]));
				}
			}

			var oSelectedContext = null;
			var oBundle = new sap.ui.model.resource.ResourceModel({bundleName: "sap/suite/ui/generic/template/ListReport/i18n/i18n"}).getResourceBundle();
			var bCompact = !!this.getView().$().closest(".sapUiSizeCompact").length;
			if ((!aSelectedContexts || aSelectedContexts.length === 0)) {
				sap.m.MessageBox.error(oBundle.getText("NO_ITEM_SELECTED"), {
					styleClass: bCompact ? "sapUiSizeCompact" : ""
				});
				return undefined;
			} else if (aSelectedContexts.length > 1) {
				sap.m.MessageBox.error(oBundle.getText("MULTIPLE_ITEMS_SELECTED"), {
					styleClass: bCompact ? "sapUiSizeCompact" : ""
				});
				return undefined;
			} else {
				oSelectedContext = aSelectedContexts[0];
			}
			return oSelectedContext;
		},

		_filterObjectsFromJSON: function (mJSON) {
			var mFilteredJSON = {};
			for (var sPropertyName in mJSON) {
				var vAttributeValue = mJSON[sPropertyName];
				if (jQuery.type(vAttributeValue) !== "object") {
					mFilteredJSON[sPropertyName] = vAttributeValue;
				}
			}
			return mFilteredJSON;
		},

		_handleError: function (oError) {
			if (oError instanceof Error) {
				oError.showMessageBox();
			}
		},

		// internal wrapper for call action against base view controller
		_callAction: function (oEvent, oCustomData, oContext, oNavigationProperty, oSourceControl) {
			this._checkActionCustomData(oCustomData);

			return this.oBaseViewController.callAction({
				functionImportPath: oCustomData.Action,
				context: oContext,
				sourceControl: oSourceControl,
				label: oCustomData.Label,
				navigationProperty: oNavigationProperty
			});
		},

		_getTableFromContent: function (aContent) {
			var oTable = null;
			if (aContent && aContent.length > 0) {
				for (var i = 0; i < aContent.length; i++) {
					var oContent = aContent[i];
					if (oContent instanceof sap.m.Table || oContent instanceof sap.ui.comp.smarttable.SmartTable) {
						oTable = oContent;
						return oTable;
					} else {
						try {
							oTable = this._getTableFromContent(oContent.getContent());
							if (oTable) {
								return oTable;
							}
						} catch (e) {
							continue;
						}
					}
				}
			}

			return oTable;
		}

	});
}, /* bExport= */true);

}; // end of sap/suite/ui/generic/template/lib/TemplateViewController.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ListReport.view.ListReport.controller') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ListReport.view.ListReport.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.Table'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Icon'); // unlisted dependency retained
jQuery.sap.require('sap.m.HBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.ObjectIdentifier'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smarttable.SmartTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartfield.SmartField'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/ListReport/view/ListReport.controller",[
	"sap/suite/ui/generic/template/lib/TemplateViewController", "sap/ui/model/json/JSONModel", "sap/m/Table", "sap/m/Text", "sap/m/Link", "sap/ui/core/Icon", "sap/m/HBox", "sap/m/ObjectIdentifier", "sap/ui/comp/smarttable/SmartTable", "sap/ui/comp/smartfield/SmartField", "sap/suite/ui/generic/template/ListReport/nav/NavigationHandler", "sap/suite/ui/generic/template/library", "sap/suite/ui/generic/template/ListReport/nav/SelectionVariant", "sap/suite/ui/generic/template/ListReport/nav/Error"
], function(BaseController, JSONModel, Table, Text, Link, Icon, HBox, ObjectIdentifier, SmartTable, SmartField, NavigationHandler, TemplateLibrary, SelectionVariant, Error) {
	"use strict";

	var NavType = TemplateLibrary.ListReport.nav.NavType;

	var oListReportController = BaseController.extend("sap.suite.ui.generic.template.ListReport.view.ListReport", {

		bOnInitFinished: false,
		bFilterBarInitialized: false,

		onInit: function() {

			BaseController.prototype.onInit.apply(this, arguments);

			var that = this;
			var oComponent = this.getComponent();
			var oView = this.getView();
			var oTable = oView.byId("listReport");
			var sEntitySet = oComponent.getEntitySet();

			var oAdminModel = new sap.ui.model.json.JSONModel({
				HasDetail: !this.getOwnerComponent().getIsLeaf()
			});
			oAdminModel.setDefaultBindingMode("OneWay");
			oView.setModel(oAdminModel, "admin");

			//SmartFilterBar: CustomData (Edit State)
			// var oSFBModel = new sap.ui.model.odata.ODataModel("/DraftState", true);
			var oSFBModel = new sap.ui.model.json.JSONModel({
				DraftState: " "
			});
			oView.setModel(oSFBModel, "sfb");

			var fnGetUser = jQuery.sap.getObject("sap.ushell.Container.getUser");
			var oManifest = this.getOwnerComponent().getAppComponent().getMetadata().getManifestEntry("sap.ui");
			var sBookmarkIcon = (oManifest && oManifest.icons && oManifest.icons.icon) ? oManifest.icons.icon : "";
			// share Model: holds all the sharing relevant texts and info used in the XML view
			var oShareModel = new JSONModel({
				// BOOKMARK
				bookmarkIcon: sBookmarkIcon,
				bookmarkCustomUrl: function() {
					try {
						// refresh link before using document.URL as bookmark
						this.storeCurrentAppState();
					} catch (err) {
						// URL with updated app state could not be generated. Just use the current URL instead.
						jQuery.sap.log.error("ListReport.bookmarkCustomUrl: " + err);
					}
					return document.URL;
				}.bind(this),
				bookmarkServiceUrl: function() {
					if (this.oSmartTable.getTable().getBinding("rows")){
						return this.oSmartTable.getTable().getBinding("rows").getDownloadUrl() + "&$top=0&$inlinecount=allpages";
					} else if (this.oSmartTable.getTable().getBinding("items")) {
						return this.oSmartTable.getTable().getBinding("items").getDownloadUrl() + "&$top=0&$inlinecount=allpages";
					} else {
						return "";
					}
				}.bind(this),
				// JAM
				isShareInJamActive: fnGetUser ? fnGetUser().isJamActive() : false
			});
			oShareModel.setDefaultBindingMode("OneWay");
			oView.setModel(oShareModel, "share");

			this.oSmartTable = this.byId("listReport");
			this.oSmartFilterBar = this.byId("listReportFilter");

			if (sap.ui.Device.system.desktop) {
				oView.addStyleClass("sapUiSizeCompact");
				oTable.addStyleClass("sapUiSizeCondensed");
			} else {
				oTable.addStyleClass("sapUiSizeCozy");
			}

			var fnDraftFormatter = function(IsActiveEntity, HasDraftEntity) {
				return (!IsActiveEntity || (IsActiveEntity && HasDraftEntity));
			};

			var fnDraftIconFormatter = function(IsActiveEntity, HasDraftEntity, LockedBy) {
				this.removeStyleClass("sapSmartTemplatesListReportDraftInfoIcon");
				this.addStyleClass("sapSmartTemplatesListReportDraftInfoIcon");

				return ((IsActiveEntity && HasDraftEntity && LockedBy !== ''));
			};

			var fnObjectText = function(IsActiveEntity, HasDraftEntity, LockedBy) {
				return that.formatDraftLockTextGeneric(IsActiveEntity, HasDraftEntity, LockedBy, that);
			};

			var fnOnPressDraftInfo = function(oEvent) {
				var oBindingContext = oEvent.getSource().getBindingContext();
				that.oButton = oEvent.getSource();

				BaseController.prototype.fnDraftPopover.call(this, that, oBindingContext, that.oView, that.oButton);
			};

			// in draft case add the draft info to the identifier cell for the sap.m.Table
			if (oTable instanceof SmartTable) {
				for (var i = 0; i < oTable.getItems().length; i++) {
					if (oTable.getItems()[i] instanceof Table) {
						oTable = oTable.getItems()[i];

						if (oComponent.hasDraft()) {
							jQuery.sap.log.info(sEntitySet + " is draft enabled");
							var hasDraftAdministrativeData = this.getTransactionController().getDraftController().getDraftContext().hasDraftAdministrativeData(sEntitySet);

							if (!hasDraftAdministrativeData) {
								jQuery.sap.log.info(sEntitySet + " doesn't have nav. prop. DraftAdministrativeData - no admin data is shown");
							} else {
								// get template of table
								var aItems = oTable.getItems() || [];
								var oTableBinding = aItems[0];
								if (oTableBinding) {
									var aCells = oTableBinding.getCells() || [];
									var aSemanticKey = this.getTransactionController().getDraftController().getDraftContext().getSemanticKey(sEntitySet);
									var sBinding = "";
									var oIdentifier;
									var oCell;
									var oIdentifier_;
									var oCell_;

									// search for first semantic key that is in table
									// this is the current UX behavior as long as there's no annotation
									for (var k = 0; k < aSemanticKey.length; k++) {
										for (var c = 0; c < aCells.length; c++) {
											aItems = aCells[c].getItems();
											for (i = 0; i < aItems.length; i++) {
												// currently only text and identifier are supported - more to be checked
												if (aItems[i] instanceof ObjectIdentifier) {
													sBinding = aItems[i].getBindingPath("title");
												} else if (aItems[i] instanceof SmartField) {
													sBinding = aItems[i].getBindingPath("value");
												} else {
													sBinding = aItems[i].getBindingPath("text");
												}
												if (!(oCell_ && oIdentifier_)) {
													oIdentifier_ = aItems[i];
													oCell_ = aCells[c];
												}
												if (sBinding === aSemanticKey[k].name) {
													oIdentifier = aItems[i];
													oCell = aCells[c];
													break;
												}
											}
											if (oIdentifier) {
												break;
											}
										}
										if (oIdentifier) {
											break;
										}
									}

									if (!(oCell && oIdentifier)) {
										// if no semantic key was found, take the first column in the table
										oCell = oCell_;
										oIdentifier = oIdentifier_;
									}
									if (!(oCell && oIdentifier)) {
										jQuery.sap.log.info("No semantic key found in Object List - no admin data is shown");
									} else {
										if (!(oIdentifier instanceof ObjectIdentifier)) {
											// if identifier is not yet a
											// ObjectIdentifier convert it
											if (oIdentifier instanceof Text) {
												sBinding = oIdentifier.getBindingPath("text");
												oCell.removeItem(oIdentifier);
												oIdentifier = new ObjectIdentifier({
													title: {
														path: sBinding
													}
												});
												oCell.addItem(oIdentifier);
											}
										}

										var oDraftIcon = new Icon({
											src : "sap-icon://locked",
											enabled: {
												parts: [
													{
														path: 'IsActiveEntity'
													}, {
														path: 'HasDraftEntity'
													},{
														path: 'DraftAdministrativeData/InProcessByUser'
													}
												],
												formatter: fnDraftIconFormatter
											},
											visible: {
												parts: [
													{
														path: 'IsActiveEntity'
													}, {
														path: 'HasDraftEntity'
													},{
														path: 'DraftAdministrativeData/InProcessByUser'
													}
												],
												formatter: fnDraftIconFormatter
											}
										}).addStyleClass("sapUiTinyMarginTop");
										var oDraftInfo = new Link({
											enabled: {
												parts: [
													{
														path: 'IsActiveEntity'
													}, {
														path: 'HasDraftEntity'
													}
												],
												formatter: fnDraftFormatter
											},
											visible: {
												parts: [
													{
														path: 'IsActiveEntity'
													}, {
														path: 'HasDraftEntity'
													}
												],
												formatter: fnDraftFormatter
											},
											press: fnOnPressDraftInfo,
											text: {
												parts: [
													{
														path: 'IsActiveEntity'
													}, {
														path: 'HasDraftEntity'
													},{
														path: 'DraftAdministrativeData/InProcessByUser'
													}
												],
												formatter: fnObjectText
											}
										}).addStyleClass("sapUiTinyMarginTop");
										oCell.addItem(new HBox({
											items : [oDraftIcon, oDraftInfo]
										}));
									}

								}
							}

						}
					}
				}
			}

			if (sap.ushell) {
				this.oNavigationHandler = new NavigationHandler(this);
				this.bOnInitFinished = true;
				this.initAppState();
			}
		},

		initAppState: function() {
			// check if both init events for the controller and the SmartFilterBar have finished
			if (!(this.bFilterBarInitialized && this.bOnInitFinished && this.oNavigationHandler)) {
				return;
			}

			var oParseNavigationPromise = this.oNavigationHandler.parseNavigation();

			var that = this;
			oParseNavigationPromise.done(function(oAppData, oURLParameters, sNavType) {

				if (sNavType !== NavType.initial) {
					// if the app is started with any parameters, then clear the filter bar variant
					that.oSmartFilterBar.clearVariantSelection();
					that.oSmartFilterBar.setDataSuiteFormat(oAppData.selectionVariant, true);
					that.oSmartTable.setCurrentVariantId(oAppData.tableVariantId);
					that.restoreCustomAppStateData(oAppData.customData);
					that.oSmartTable.rebindTable();
				}
			});

			oParseNavigationPromise.fail(function(oError) {
				that._handleError(oError);
			});
		},

		// ---------------------------------------------
		// APP STATE HANDLING FOR BACK NAVIGATION
		// ---------------------------------------------

		// Changes the URL according to the current app state and stores the app state for later retrieval.
		storeCurrentAppState: function() {
			if (this.oNavigationHandler) {
				if (!this.oNavigationHandler.hasCrossApplicationNavigationService()) {
					return undefined;
				}
				var oAppStatePromise = this.oNavigationHandler.storeInnerAppState(this.getCurrentAppState());
				oAppStatePromise.fail(function(oError) {
					this._handleError(oError);
				}.bind(this));
				return oAppStatePromise;
			} else {
				throw "ListReport: navigation handler is not defined. Check if UShell services exist.";
			}
		},

		getCurrentAppState: function() {
			// Special handling for selection fields, for which defaults are defined:
			// If a field is visible in the SmartFilterBar and the user has cleared the input value, the field is not included in the selection
			// variant, which is returned by getDataSuiteFormat() of the SmartFilterBar. But since it was cleared by purpose, we have to store 
			// the selection with the value "", in order to set it again to an empty value, when restoring the selection after a back navigation. 
			// Otherwise, the default value would be set.
			var oSelectionVariant = new SelectionVariant(this.oSmartFilterBar.getDataSuiteFormat());
			var aVisibleFields = this.getVisibleSelectionsWithDefaults();
			for (var i = 0; i < aVisibleFields.length; i++) {
				if (!oSelectionVariant.getValue(aVisibleFields[i])) {
					oSelectionVariant.addSelectOption(aVisibleFields[i], "I", "EQ", "");
				}
			}
			return {
				selectionVariant: oSelectionVariant.toJSONString(),
				tableVariantId: this.oSmartTable.getCurrentVariantId(),
				customData: this.getCustomAppStateData()
			};
		},

		getCustomAppStateData: function() {
			// add custom data for back navigation
			var oCustomData = {};
			if (this.getCustomAppStateDataExtension) {
				this.getCustomAppStateDataExtension(oCustomData);
			}
			return oCustomData;
		},

		restoreCustomAppStateData: function(oCustomData) {
			// perform custom logic for restoring the custom data of the app state
			if (this.restoreCustomAppStateDataExtension) {
				this.restoreCustomAppStateDataExtension(oCustomData);
			}
		},

		getVisibleSelectionsWithDefaults: function() {
			// We need a list of all selection fields in the SmartFilterBar for which defaults are defined
			// (see method setSmartFilterBarDefaults) and which are currently visible.
			// This is needed by _getBackNavigationParameters in the NavigationController.
			var aVisibleFields = [];
			// if(this.oView.byId(this.sPrefix + ".DateKeyDate").getVisible()){
			// aVisibleFields.push("KeyDate");
			// }
			return aVisibleFields;
		},

		onInitSmartFilterBar: function(oEvent) {
			if (this.onInitSmartFilterBarExtension) {
				this.onInitSmartFilterBarExtension(oEvent);
			}
			this.bFilterBarInitialized = true;
			this.initAppState();
		},

		onBeforeRebindTable : function(oEvent){
			sap.suite.ui.generic.template.lib.TemplateViewController.prototype.onBeforeRebindTable.apply(this, arguments);

			if (this.onBeforeRebindTableExtension) {
				this.onBeforeRebindTableExtension(oEvent);
			}
		},

		onExit: function() {
			if (this._oPopover) {
				this._oPopover.destroy();
			}
		},

		getTable: function() {
			var oSmartTable = this.getView().byId("listReport");
			return oSmartTable.getTable();
		},

		// replaced by TemplateViewController.js - onCallActionFromList
		onCallAction: function(oEvent) {
			this.onCallActionFromList(oEvent, this.oSmartFilterBar);
		},
		/*onCallAction: function(oEvent) {
			var oSelectedContext = this.getSelectedContext();
			var oCustomData = this.getCustomData(oEvent);
			if (oSelectedContext) {

				if (oCustomData.Type === "com.sap.vocabularies.UI.v1.DataFieldForAction") {
					this.oBaseViewController.callAction({
						functionImportPath : oCustomData.Action,
						context : oSelectedContext,
						sourceControl : oEvent.getSource().getParent().getParent().getTable(),
						label : oCustomData.Label
					});
				} else if (this.oNavigationHandler) {
					var mSemanticAttributes = oSelectedContext.getObject();
					delete mSemanticAttributes.__metadata;
					var sSelectionVariant = this.oSmartFilterBar.getDataSuiteFormat() || "{}";
					var mOutboundParameters = this.oNavigationHandler.mixAttributesAndSelectionVariant(mSemanticAttributes, sSelectionVariant).toJSONString();
					var oInnerAppData = {
						selectionVariant: this.oSmartFilterBar.getDataSuiteFormat(),
						tableVariantID: this.oSmartTable.getCurrentVariantId()
					};
					var fCallbackOnError = jQuery.proxy(this._handleError, this);
					this.oNavigationHandler.navigate(oCustomData.SemanticObject, oCustomData.Action, mOutboundParameters, oInnerAppData, fCallbackOnError);
				}
			}
		},

		getCustomData: function(oEvent) {
			var aCustomData = oEvent.getSource().getCustomData();
			var oCustomData = {};
			for (var i = 0; i < aCustomData.length; i++) {
				oCustomData[aCustomData[i].getKey()] = aCustomData[i].getValue();
			}
			return oCustomData;
		},*/

		getSelectedContext: function() {
			var oTable = this.getTable();

			var aSelectedContexts = [];
			if (oTable instanceof Table) {
				aSelectedContexts = oTable.getSelectedContexts();
			} else {
				var aIndex = oTable.getSelectedIndices();
				for (var i = 0; i < aIndex.length; i++) {
					aSelectedContexts.push(oTable.getContextByIndex(aIndex[i]));
				}
			}

			var oSelectedContext = null;
			var oBundle = this.getView().getModel("i18n").getResourceBundle();
			var bCompact = !!this.getView().$().closest(".sapUiSizeCompact").length;
			if ((!aSelectedContexts || aSelectedContexts.length === 0)) {
				sap.m.MessageBox.error(oBundle.getText("NO_ITEM_SELECTED"), {
					styleClass: bCompact ? "sapUiSizeCompact" : ""
				});
				return undefined;
			} else if (aSelectedContexts.length > 1) {
				sap.m.MessageBox.error(oBundle.getText("MULTIPLE_ITEMS_SELECTED"), {
					styleClass: bCompact ? "sapUiSizeCompact" : ""
				});
				return undefined;
			} else {
				oSelectedContext = aSelectedContexts[0];
			}
			return oSelectedContext;
		},

		onSearchButtonPressed: function() {
            //store navigation context
			this.storeForBackNavigation();
		},

		onBeforePopoverOpens: function(oEvent) {
			if (this.oNavigationHandler) {
				var oParams = oEvent.getParameters();
				var sSelectionVariant = this.oSmartFilterBar.getDataSuiteFormat();
				this.oNavigationHandler.processBeforeSmartLinkPopoverOpens(oParams, sSelectionVariant);
			} else {
				oEvent.getParameters().open();
			}
		},

		onPopoverLinkPressed: function() {
			this.storeForBackNavigation();
		},

		onAfterTableVariantSave: function() {
			this.storeForBackNavigation();
		},

		onAfterApplyTableVariant: function() {
			this.storeForBackNavigation();
		},

		onBeforeSFBVariantSave: function(oEvent) {
			/*
			 * When the app is started, the VariantManagement of the SmartFilterBar saves the initial state in the STANDARD (=default) variant and
			 * therefore this event handler is called. We do not need to store the inner app state in this case, because it is the initial state. Only
			 * for variants, saved by the user, storeForBackNavigation must be called.
			 */
			if (oEvent.getParameter("context") !== "STANDARD") {
				this.oSmartFilterBar.setFilterData({"_CUSTOM": this.getCustomAppStateData()});			
			}
			//store navigation context
			this.storeForBackNavigation();
		},

		onAfterSFBVariantLoad: function() {
			var oData = this.oSmartFilterBar.getFilterData();
			if (oData["_CUSTOM"] !== undefined) {
				this.restoreCustomAppStateData(oData["_CUSTOM"]);
			}
			//store navigation context
			this.storeForBackNavigation();
		},

		storeForBackNavigation: function() {
			try {
				this.storeCurrentAppState();
			} catch (err) {
				jQuery.sap.log.error("ListReport.storeForBackNavigation: " + err);
			}
		},

		// ---------------------------------------------
		// EVENT HANDLERS FOR COLLABORATION ACTIONS
		// ---------------------------------------------

		/**
		 * Event handler when the share by E-Mail button has been clicked
		 *
		 * @public
		 */
		onShareEmailPress: function() {
			var oRessouceBundle = this.getView().getModel("i18n").getResourceBundle();
			try {
				// refresh link before using document.URL
				this.storeCurrentAppState().done(function() {
					sap.m.URLHelper.triggerEmail(null, oRessouceBundle.getText("EMAIL_HEADER", [
						oRessouceBundle.getText("PAGEHEADER")
					]), document.URL);
				});
			} catch (err) {
				jQuery.sap.log.error("ListReport.onShareInJamPress: " + err);
				// URL with updated app state could not be generated. Just use the current URL instead.
				sap.m.URLHelper.triggerEmail(null, oRessouceBundle.getText("EMAIL_HEADER", [
					oRessouceBundle.getText("PAGEHEADER")
				]), document.URL);
			}
		},

		/**
		 * Event handler when the share in JAM button has been clicked
		 *
		 * @public
		 */
		onShareInJamPress: function() {
			var oRessouceBundle = this.getView().getModel("i18n").getResourceBundle();
			try {
				// refresh link before using document.URL
				this.storeCurrentAppState().done(function() {
					var oShareDialog = sap.ui.getCore().createComponent({
						name: "sap.collaboration.components.fiori.sharing.dialog",
						settings: {
							object: {
								id: document.URL,
								share: oRessouceBundle.getText("PAGEHEADER")
							}
						}
					});
					oShareDialog.open();
				});
			} catch (err) {
				jQuery.sap.log.error("ListReport.onShareInJamPress: " + err);
				// URL with updated app state could not be generated. Just use the current URL instead.
				var oShareDialog = sap.ui.getCore().createComponent({
					name: "sap.collaboration.components.fiori.sharing.dialog",
					settings: {
						object: {
							id: document.URL,
							share: oRessouceBundle.getText("PAGEHEADER")
						}
					}
				});
				oShareDialog.open();
			}
		},

		/**
		 * Event handler that changes the URL based on the current app state before the bookmark button is pressed
		 *
		 * @public
		 */
		onBeforePressBookmark: function() {
			try {
				// refresh link before using document.URL as bookmark
				this.storeCurrentAppState();
			} catch (err) {
				// URL with updated app state could not be generated. Just use the current URL instead.
				jQuery.sap.log.error("ListReport.onBeforePressBookmark: " + err);
			}
		},

		// ---------------------------------------------
		// END COLLABORATION ACTIONS
		// ---------------------------------------------

		onNavigateToDetail: function(oEvent) {
			var oSelectedContext = this.getSelectedContext();
			this.navigateFromListItem(oSelectedContext, this.getTable());
		},

		// ---------------------------------------------
		// MISC
		// ---------------------------------------------

		_handleError: function(oError) {
			if (oError instanceof Error) {
				oError.showMessageBox();
			}
		}

	});

	return oListReportController;

}, /* bExport= */true);

}; // end of sap/suite/ui/generic/template/ListReport/view/ListReport.controller.js
if ( !jQuery.sap.isDeclared('sap.suite.ui.generic.template.ObjectPage.view.Details.controller') ) {
jQuery.sap.declare('sap.suite.ui.generic.template.ObjectPage.view.Details.controller'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.m.Table'); // unlisted dependency retained
sap.ui.define("sap/suite/ui/generic/template/ObjectPage/view/Details.controller",["sap/suite/ui/generic/template/lib/TemplateViewController", "sap/m/Table"], function(BaseController, Table) {
	"use strict";

	return BaseController.extend("sap.suite.ui.generic.template.ObjectPage.view.Details", {

		onInit: function() {
			BaseController.prototype.onInit.apply(this, arguments);
			this.triggerPrepareOnEnterKeyPress();
			var bShell = false;
			try {
				bShell = sap.ushell.Container.getService("URLParsing").isIntentUrl(document.URL) ? true : false;
			} catch (err) {
				jQuery.sap.log.error("Detail.controller: UShell service is not available.");
			}
			var oAdminModel = new sap.ui.model.json.JSONModel({
				HasDetail: !this.getOwnerComponent().getIsLeaf(),
				HasShell: bShell
			});
			oAdminModel.setDefaultBindingMode("OneWay");
			this.getView().setModel(oAdminModel, "admin");
		},
	
		onPressDraftInfo: function(oEvent) {
			var oContext = this.getContext();
			var oLockButton = sap.ui.getCore().byId(oEvent.getSource().getId() + "-lock");
			BaseController.prototype.fnDraftPopover.call(this, this, oContext, this.oView, oLockButton);
		}
	});
}, /* bExport= */true);

}; // end of sap/suite/ui/generic/template/ObjectPage/view/Details.controller.js
