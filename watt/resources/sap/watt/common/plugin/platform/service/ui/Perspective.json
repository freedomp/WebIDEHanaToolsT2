{

	"name": "sap.watt.common.service.ui.Perspective",
	"description": "The perspective interface",
	"extends": "sap.watt.common.service.ui.Part",

	"configurationProperties": {

		"placeAt": {
			"type": "string",
			"multiple": false
		},

		"perspectives": {
			"type": {
				"id": "string"
			},
			"multiple": true
		},

		"defaultPerspective": {
			"type": "string",
			"multiple": false
		},

		"areas": {
			"type": {
				"id": "string",
				"position": "string",
				"cssclass": "string",
				"perspective": "string",
				"visibility": "boolean",
				"service": "sap.watt.common.service.ui.Part",
				"view": "string"
			},
			"multiple": true
		},

		"items": {
			"type": {
				"id": "string",
				"position": "string",
				"cssclass": "string",
				"perspective": "string",
				"visibility": "boolean",
				"service": "sap.watt.common.service.ui.Part"
			},
			"multiple": true
		},

		"views": {
			"type": {
				"id": "string",
				"service": "sap.watt.common.service.ui.Part",
				"cssclass": "string",
				"restore": "boolean",
				"alwaysOpenAsDefaultAfterNormalized": "boolean"
			},
			"multiple": true
		},

		"preferenceService": {
			"type": {
				"node": "string"
			},
			"multiple": false
		}
	},

	"methods": {

		"renderPerspective": {
			"params": [{
				"name": "sPerspective",
				"type": "string"
			}]
		},

		"resetToDefault": {
			"params": []
		},

		"getCurrentPerspective": {
			"params": [],
			"returns": "string"
		},

		"placeServiceAt": {
			"params": [{
				"name": "sId",
				"type": "string"
			}, {
				"name": "sViewId",
				"type": "string"
			}]
		},

		"getServiceAt": {
			"params": [{
				"name": "sId",
				"type": "string"
			}],
			"returns": "object"
		},

		"getViewIdAt": {
			"description": "returns the viewId which is currently located in area with id sId",
			"params": [{
				"name": "sId",
				"type": "string"
			}],
			"returns": "string"
		},

		"getAreaForService": {
			"params": [{
				"name": "sViewId",
				"type": "string"
			}],
			"returns": "string"
		},

		"setAreaMaximized": {
			"params": [{
				"name": "sId",
				"type": "string"
			}, {
				"name": "bVisible",
				"type": "boolean"
			}]
		},

		"isAreaMaximized": {
			"params": [{
				"name": "sId",
				"type": "string"
			}],
			"returns": "boolean"
		},

		"setAreaVisible": {
			"params": [{
				"name": "sId",
				"type": "string"
			}, {
				"name": "bVisible",
				"type": "boolean"
			}]
		},

		"isAreaVisible": {
			"params": [{
				"name": "sId",
				"type": "string"
			}],
			"returns": "boolean"
		},

		"isPerspectiveRegistered": {
			"params": [{
				"name": "sPerspectiveId",
				"type": "string"
			}],
			"returns": "boolean"
		},
		"report": {
			"params": [{
				"name": "sEventType",
				"type": "string"
			},
			{
				"name": "sData",
				"type": "string",
				"description": "The service name with the toggle state"
			}],
			"description" : "This method is used to report usage analytics. in order to avoid each UI part to add dependency to usagemonitoring when using AbstractUIPartToggler that is context-less"
		}

	},

	"events": {
		"perspectiveChanged": {
			"description": "Notification about change from one perspective to another.",
			"params": [{
				"name": "from",
				"type": "string"
			}, {
				"name": "to",
				"type": "string"
			}]
		},

		"splitterPositionChanged": {
			"description": "Notification about change of any splitter position",
			"params": []
		}

	}

}