/**
 * DISCLAIMER:
 * 
 * This view is implemented under the following assumptions related to the selected OData service:
 * 
 * 1. Status Property
 *    a. The main OData collection contains a status property
 *    b. The status property accepts the following values: "New", "In Process", "Approved", and â€œRejected".
 *
 * 2. Attachments Collection
 *    a. The OData service provides an attachments collection.
 *    b. There is a navigation property from the main data collection to the attachment collection.
 *    c. Each attachment contains the following properties: file name, content (as a Base-64 string), content type and a unique id.
 *    d. Additionally, each attachment entry contains the id of the item in the main collection that relates to it (foreign key).
 *    e. Only image file attachments are supported.
 *
 * 3. Create Attachment
 *    a. The create operation is executed on the attachments collection.
 *    b. The new attachment entry includes all the attributes mentioned above.
 *    c. The new attachment entry includes the id of the item in the main collection it relates to.
 *    d. The new attachment unique id is created by the service during the create operation.
 * 
 */
jQuery.sap.require("{{projectName}}.util.Formatter");
jQuery.sap.require("{{projectName}}.util.Controller");
jQuery.sap.require("sap.m.MessageBox");

{{projectName}}.util.Controller.extend("{{projectName}}.view.Master", {

	onInit : function() {
{{~#if smpOffline}}	
		this.setLastUpdated(false);
{{~/if}}	
		this.oInitialLoadFinishedDeferred = jQuery.Deferred();

		var oEventBus = this.getEventBus();
		oEventBus.subscribe("Detail", "TabChanged", this.onDetailTabChanged, this);

		this.getView().byId("list").attachEventOnce("updateFinished", function() {
			this.oInitialLoadFinishedDeferred.resolve();
			oEventBus.publish("Master", "InitialLoadFinished", {
				oListItem : this.getView().byId("list").getItems()[0]
			});
		}, this);

		//on phones, we will not have to select anything in the list so we don't need to attach to events
		if (sap.ui.Device.system.phone) {
			return;
		}

		this.getRouter().attachRoutePatternMatched(this.onRouteMatched, this);

		oEventBus.subscribe("Detail", "Changed", this.onDetailChanged, this);
		oEventBus.subscribe("Detail", "NotFound", this.onNotFound, this);
	},

	onRouteMatched : function(oEvent) {
		var sName = oEvent.getParameter("name");

		if (sName !== "main") {
			return;
		}

		//Load the detail view in desktop
		this.getRouter().myNavToWithoutHash({
			currentView : this.getView(),
			targetViewName : "{{projectName}}.view.Detail",
			targetViewType : "XML" 
		});

		//Wait for the list to be loaded once
		this.waitForInitialListLoading(function() {

			//On the empty hash select the first item
			this.selectFirstItem();

		});

	},

	onDetailChanged : function(sChanel, sEvent, oData) {
		var sEntityPath = oData.sEntityPath;
		//Wait for the list to be loaded once
		this.waitForInitialListLoading(function() {
			var oList = this.getView().byId("list");

			var oSelectedItem = oList.getSelectedItem();
			// the correct item is already selected
			if (oSelectedItem && oSelectedItem.getBindingContext().getPath() === sEntityPath) {
				return;
			}

			var aItems = oList.getItems();

			for ( var i = 0; i < aItems.length; i++) {
				if (aItems[i].getBindingContext().getPath() === sEntityPath) {
					oList.setSelectedItem(aItems[i], true);
					break;
				}
			}
		});
	},

	onDetailTabChanged : function(sChanel, sEvent, oData) {
		this.sTab = oData.sTabKey;
	},

	waitForInitialListLoading : function(fnToExecute) {
		jQuery.when(this.oInitialLoadFinishedDeferred).then(jQuery.proxy(fnToExecute, this));
	},

	onNotFound : function() {
		this.getView().byId("list").removeSelections();
	},

	selectFirstItem : function() {
		var oList = this.getView().byId("list");
		var aItems = oList.getItems();

		if (aItems.length) {
			oList.setSelectedItem(aItems[0], true);
		}
	},

	onSearch : function() {
		// add filter for search
		var filters = [];
		var searchString = this.getView().byId("searchField").getValue();
		if (searchString && searchString.length > 0) {
			filters = [ new sap.ui.model.Filter("{{claimProcessing.parameters.ItemTitle.value.name}}",
					sap.ui.model.FilterOperator.Contains, searchString) ];
		}

		// update list binding
		this.getView().byId("list").getBinding("items").filter(filters);
	},

	onSelect : function(oEvent) {
		// Get the list item, either from the listItem parameter or from the event's
		// source itself (will depend on the device-dependent mode).
		this.showDetail(oEvent.getParameter("listItem") || oEvent.getSource());
	},
	
{{~#if smpOffline}}			
	openActionSheet: function() {
		if(window.cordova){
			if (!this._oActionSheet) {
				this._oActionSheet = new sap.m.ActionSheet({
					buttons: [
					new sap.m.Button({text : "Sync",
									 icon:"sap-icon://synchronize",
									 press:[this.onSyncSelect,this]}),
									 
					new sap.m.Button({text : "Log Out",
									 icon:"sap-icon://log", 
									 press:[this.onLogOut,this]})]
				});
				this._oActionSheet.setShowCancelButton(true);
				this._oActionSheet.setPlacement(sap.m.PlacementType.Top);
			}
			
			this._oActionSheet.openBy(this.getView().byId("actionButton"));
		}
	},
	
	showPopup : function(message) {
		jQuery.sap.require("sap.m.MessageToast");
		sap.m.MessageToast.show(message);
	},
	
	storeClosedSuccess : function() {
	    console.log('Offline store was closed.');
	    devapp.store.clear(function(){
	    		doDeleteRegistration();
			},
			function(err){
				console.error('Failed to clear offline store: '+ err);
			});
		
	},
	
	storeClosedFailure : function(err) {
		console.error('Failed to close offline store: '+ err);
	},	
	
	onSyncSelect : function(bLogOutAfterSync) {
		var that = this;
		devapp.store.flush(
		
			function() {
				that.showPopup("Changes have been uploaded");
				devapp.store.refresh(
										function() {
												  that.setLastUpdated(true);
												  that.showPopup("The application has been updated");
												  that.getView().byId("list").getBinding("items").filter([]);
												
												  if(bLogOutAfterSync === true) {
													devapp.store.close(that.storeClosedSuccess,that.storeClosedFailure);
												  }
												}, 
												
									function(err) {
    											console.error("An error occurred while updating data:  " + JSON.stringify(err));
			    								alert("An error occurred while updating data:  " + JSON.stringify(err)); 
    											});}
			, function(err) {
    			console.error("An error occurred while uploading data:  " + JSON.stringify(err));
			    alert("An error occurred while uploading data:  " + JSON.stringify(err)); 
				});
	},
	
	onLogOut: function(oEvent) {
	    var that = this;
	    devapp.store.getRequestQueueStatus(function(status) {
		    if (status.isEmpty) {
		        console.log("Request queue is empty");
		        devapp.store.close(that.storeClosedSuccess,that.storeClosedFailure);
		    } else {
			    console.log("Items in request queue that can be flushed");
			    sap.m.MessageBox.show("Logging out will delete all unsaved changes in your application. Are you sure you want to continue?", {
			      context : that,    
			      icon : sap.m.MessageBox.Icon.WARNING,
			      title : "Log Out Confirmation",
			      actions : [sap.m.MessageBox.Action.YES, sap.m.MessageBox.Action.NO],
			      onClose : function(oAction) { 
			        if ( oAction === sap.m.MessageBox.Action.YES ) {
			            // Loguut without syncing
			            devapp.store.close(that.storeClosedSuccess,that.storeClosedFailure);
			        }
			      },
			      dialogId : "messageBoxId" 
			    });			      
			    }
		}, function(error) {
		    console.log("Failed to get queue status");
		});
     },
  
	setLastUpdated : function(bUpdateDateTime){
		if(window.cordova){
				var sLastUpdated;
				var sLastUpdatedText;
				if(bUpdateDateTime === true){
					sLastUpdated = this.setCurrentTimeInLocalStorage();
				}else{
					sLastUpdated = window.localStorage.getItem( 'last_updated');
					if(sLastUpdated === null){
						sLastUpdated = this.setCurrentTimeInLocalStorage();
					}
				}
				var bIsToday = this.checkIfDateIsToday(sLastUpdated);
				if(bIsToday){
					sLastUpdatedText = "Today @ "+sLastUpdated.substring(sLastUpdated.indexOf("@")+1);
				}else{
					sLastUpdatedText = sLastUpdated;
				}
				this.getView().byId("lastUpdatedText").setText("Updated: "+sLastUpdatedText);
		  }		
	 },
    
	setCurrentTimeInLocalStorage : function(){
		var now = new Date();
		var sCurrentTime = now.toLocaleDateString()+" @ "+now.toLocaleTimeString();
		window.localStorage.setItem( 'last_updated', sCurrentTime);
		return sCurrentTime;
	 },
	 
	 checkIfDateIsToday : function(sDate){
		var now = new Date();
		var sToday = now.toLocaleDateString();
		if(sToday === sDate.substring(0, sDate.indexOf("@")-1)){
			return true;
		}
		return false;
	 },
{{~/if}}
	showDetail : function(oItem) {
		// If we're on a phone, include nav in history; if not, don't.
		var bReplace = jQuery.device.is.phone ? false : true;
		this.getRouter().navTo("detail", {
			from : "master",
			entity : oItem.getBindingContext().getPath().substr(1),
			tab : this.sTab
		}, bReplace);
	},
	
	onExit : function(oEvent){
		var oEventBus = this.getEventBus();
		oEventBus.unsubscribe("Detail", "TabChanged", this.onDetailTabChanged, this);
		oEventBus.unsubscribe("Detail", "Changed", this.onDetailChanged, this);
		oEventBus.unsubscribe("Detail", "NotFound", this.onNotFound, this);
	}
});