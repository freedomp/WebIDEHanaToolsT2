<!DOCTYPE HTML>
<html>
<head>
<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />

<base href="/resources/sap/ide/watt/" />
<script src="../lib/qunit/qunitHelper.js" ></script>

<script src="../lib/requirejs/require.js" 
	        data-main="../core/Global"
	        data-sap-ide-main="runTests" 
	        data-sap-ide-environment-path="../../../../env.json"
	        data-sap-ide-basedir="../../../"></script>

<title>Translation Service qUnit Test</title>

<script>
	defineTest([ "sap/ide/watt/plugin/translation/service/TranslationImpl" ], function(oTranslationService) {
			
			module("Translation Service", {
			});

			test("test if an document entity can be translated", function() {
				var sType = "folder";
				var sFilename = "";
				var entity = { 
						getType : function() { return sType; },
						getName : function() { return sFilename; }
					};

				ok(!oTranslationService.isEntityTranslatable(entity), "folder can't be translated");

				sType = "file";
				sFilename = ".properties";
				ok(!oTranslationService.isEntityTranslatable(entity), sFilename + " can't be translated");

				sFilename = "whatever_a.properties";
				ok(!oTranslationService.isEntityTranslatable(entity), sFilename + " can't be translated");

				sFilename = "_whatever.properties";
				ok(oTranslationService.isEntityTranslatable(entity), sFilename + " can be translated");

				sFilename = "whatever_.properties";
				ok(oTranslationService.isEntityTranslatable(entity), sFilename + " can be translated");

				sFilename = "whatever_a_.properties";
				ok(oTranslationService.isEntityTranslatable(entity), sFilename + " can be translated");

				sFilename = "whatever.properties";
				ok(oTranslationService.isEntityTranslatable(entity), sFilename + " can be translated");
			});
			
			test("Get current domain", function() {
				
				oTranslationService._setCurrentDomain("XFLD");
				var domain = oTranslationService.getCurrentDomain();
				equal(domain, "XFLD", "Domain retrieved -- OK");
				
				oTranslationService._setCurrentDomain(null);
				var domain = oTranslationService.getCurrentDomain();
				equal(domain, "BC", "Default Domain retrieved -- OK");
						
			});
			
			test("Set current TextTypes", function() {
				
				oTranslationService.setCurrentTextType(null);
				equal(oTranslationService._sTextType, undefined, "treat null as undefined -- OK");
				
				oTranslationService.setCurrentTextType("");
				equal(oTranslationService._sTextType, undefined, "treat empty string as undefined -- OK");
				
				oTranslationService.setCurrentTextType("CRWB");
				equal(oTranslationService._sTextType, "CRWB", "Update texttypes value -- OK");
			
			});
			test("Get current TextTypes", function() {
				
				var texttype = oTranslationService.getCurrentTextType();
				equal(texttype, oTranslationService._sTextType, "TextTypes retrieved -- OK");
						
			});
			
			//Test asynchronous functions
			asyncTest("Get All Domains", 3, function() {
				oTranslationService.getDomains().then(function(oDomains) {
					var hasDomain = false;
					
					var domains = oDomains.domains;
					
					var isValues = false;
					if (domains.length > 0) {
						isValues = true;	
					}
					equal(isValues , true, "muliple domain items were returned -- OK");
					
					var id = domains[0].id;
					var name = domains[0].name;
					
					equal(id, "AL","Domain id returned -- OK");
					equal(name, "ADL","Domain name returned -- OK");
					
					start();
				});
			});
			
			asyncTest("Get All Text Types", 4, function() {
				
				oTranslationService.getTextTypes().then(function(oTextTypes) {
					var texttypes = oTextTypes.texttypes;
					
					notEqual(texttypes, null, "The text types object was retrieved -- OK");
					
					var isValues = false;
					if (texttypes.length > 0) {
						isValues = true;	
					}
					equal(isValues , true, "muliple text type items were returned -- OK");
					
					var id = texttypes[0].id;
					var name = texttypes[0].name;
					
					equal(id, "CRWB","texttypes id returned -- OK");
					equal(name, "A Version Crystal Report","texttypes name returned -- OK");
					
					start();
				});
			});
			
			asyncTest("Get Terms -- with full parameters", 14, function() {
				oTranslationService.getTerms("user", "BC", "XFLD").then(function(oTerm) {
					
					notEqual(oTerm, undefined, "term object is defined -- OK");
					notEqual(oTerm, null, "term oject is not null -- OK");
					
					var suggestions = oTerm.suggestions;
					
					var isValues = false;
					if (suggestions.length > 0) {
						isValues = true;	
					}
					equal(isValues , true, "muliple terms  were returned -- OK");
					
					notEqual(suggestions[0].id, undefined, "term ID is defined -- OK");
					notEqual(suggestions[0].id, null, "term ID is not null -- OK");
					
					notEqual(suggestions[0].value, undefined, "term value is defined -- OK");
					notEqual(suggestions[0].value, null, "term value is not null -- OK");
					
					notEqual(suggestions[0].domainId, undefined, "term Domain ID is defined -- OK");
					notEqual(suggestions[0].domainId, null, "term ID Domain ID is not null -- OK");
					
					notEqual(suggestions[0].domainName, undefined, "term domain name is defined -- OK");
					notEqual(suggestions[0].domainName, null, "term domain name is not null -- OK");
					
					notEqual(suggestions[0].texttypeName, undefined, "term texttype name is defined -- OK");
					notEqual(suggestions[0].texttypeName, null, "term texttype name is not null -- OK");
					
					notEqual(suggestions[0].availableLanguages, 0, "term available language is defined -- OK");
					
					start();
				});
			
			});
			
			asyncTest("Get Terms -- default texttypes", 15, function() {
				oTranslationService.setCurrentTextType("XFLD");
				equal(oTranslationService._sTextType, "XFLD", "the default texttypes was set correctly");
				
				oTranslationService.getTerms("user", "BC").then(function(oTerm) {
					
					notEqual(oTerm, undefined, "term object is defined -- OK");
					notEqual(oTerm, null, "term oject is not null -- OK");
					
					var suggestions = oTerm.suggestions;
					
					var isValues = false;
					if (suggestions.length > 0) {
						isValues = true;	
					}
					equal(isValues , true, "muliple terms  were returned -- OK");
					
					notEqual(suggestions[0].id, undefined, "term ID is defined -- OK");
					notEqual(suggestions[0].id, null, "term ID is not null -- OK");
					
					notEqual(suggestions[0].value, undefined, "term value is defined -- OK");
					notEqual(suggestions[0].value, null, "term value is not null -- OK");
					
					notEqual(suggestions[0].domainId, undefined, "term Domain ID is defined -- OK");
					notEqual(suggestions[0].domainId, null, "term ID Domain ID is not null -- OK");
					
					notEqual(suggestions[0].domainName, undefined, "term domain name is defined -- OK");
					notEqual(suggestions[0].domainName, null, "term domain name is not null -- OK");
					
					notEqual(suggestions[0].texttypeName, undefined, "term texttype name is defined -- OK");
					notEqual(suggestions[0].texttypeName, null, "term texttype name is not null -- OK");
					
					notEqual(suggestions[0].availableLanguages, 0, "term available language is defined -- OK");
					
					start();
				});
				
			});
			asyncTest("Get Terms -- undefined texttypes", 15, function() {
				oTranslationService.setCurrentTextType(undefined);
				equal(oTranslationService._sTextType, undefined, "the texttypes was set to undeifned correctly");
				
				oTranslationService.getTerms("user", "BC").then(function(oTerm) {
					
					notEqual(oTerm, undefined, "term object is defined -- OK");
					notEqual(oTerm, null, "term oject is not null -- OK");
					
					var suggestions = oTerm.suggestions;
					
					var isValues = false;
					if (suggestions.length > 0) {
						isValues = true;	
					}
					equal(isValues , true, "muliple terms  were returned -- OK");
					
					notEqual(suggestions[0].id, undefined, "term ID is defined -- OK");
					notEqual(suggestions[0].id, null, "term ID is not null -- OK");
					
					notEqual(suggestions[0].value, undefined, "term value is defined -- OK");
					notEqual(suggestions[0].value, null, "term value is not null -- OK");
					
					notEqual(suggestions[0].domainId, undefined, "term Domain ID is defined -- OK");
					notEqual(suggestions[0].domainId, null, "term ID Domain ID is not null -- OK");
					
					notEqual(suggestions[0].domainName, undefined, "term domain name is defined -- OK");
					notEqual(suggestions[0].domainName, null, "term domain name is not null -- OK");
					
					notEqual(suggestions[0].texttypeName, undefined, "term texttype name is defined -- OK");
					notEqual(suggestions[0].texttypeName, null, "term texttype name is not null -- OK");
					
					notEqual(suggestions[0].availableLanguages, 0, "term available language is defined -- OK");
					
					start();
				});
				
			});
			asyncTest("Get Terms -- default domain", 14, function() {
				oTranslationService.setCurrentTextType(undefined);
				
				oTranslationService.getTerms("user").then(function(oTerm) {
					
					notEqual(oTerm, undefined, "term object is defined -- OK");
					notEqual(oTerm, null, "term oject is not null -- OK");
					
					var suggestions = oTerm.suggestions;
					
					var isValues = false;
					if (suggestions.length > 0) {
						isValues = true;	
					}
					equal(isValues , true, "muliple terms  were returned -- OK");
					
					notEqual(suggestions[0].id, undefined, "term ID is defined -- OK");
					notEqual(suggestions[0].id, null, "term ID is not null -- OK");
					
					notEqual(suggestions[0].value, undefined, "term value is defined -- OK");
					notEqual(suggestions[0].value, null, "term value is not null -- OK");
					
					notEqual(suggestions[0].domainId, undefined, "term Domain ID is defined -- OK");
					notEqual(suggestions[0].domainId, null, "term ID Domain ID is not null -- OK");
					
					notEqual(suggestions[0].domainName, undefined, "term domain name is defined -- OK");
					notEqual(suggestions[0].domainName, null, "term domain name is not null -- OK");
					
					notEqual(suggestions[0].texttypeName, undefined, "term texttype name is defined -- OK");
					notEqual(suggestions[0].texttypeName, null, "term texttype name is not null -- OK");
					
					notEqual(suggestions[0].availableLanguages, 0, "term available language is defined -- OK");
					
					start();
				});
				
			});
		
			asyncTest("Get Terms -- for undefined text", 3, function() {
				oTranslationService.getTerms().then(function(oTerm) {
					
					notEqual(oTerm, undefined, "term object is defined -- OK");	
					notEqual(oTerm, null, "term oject is not null -- OK");
					
					var suggestions = oTerm.suggestions;
					
					equal(suggestions , undefined, "return is undefined -- OK");
					
					start();
				});
				
			});
			asyncTest("Get Terms -- for null text", 3, function() {
				oTranslationService.getTerms(null).then(function(oTerm) {
					
					notEqual(oTerm, undefined, "term object is defined -- OK");	
					notEqual(oTerm, null, "term oject is not null -- OK");
					
					var suggestions = oTerm.suggestions;
					
					equal(suggestions , undefined, "empty array  was returned -- OK");
					
					start();
				});
				
			});
			asyncTest("Get Terms -- for empty string", 3, function() {
				oTranslationService.getTerms("").then(function(oTerm) {
					
					notEqual(oTerm, undefined, "term object is defined -- OK");	
					notEqual(oTerm, null, "term oject is not null -- OK");
					
					var suggestions = oTerm.suggestions;
					
					
					equal(suggestions , undefined, "empty array  was returned -- OK");
					
					start();
				});
				
			});
			
			asyncTest("Get All languages", 3, function() {
				oTranslationService.getLanguages().then(function(oLanguages) {
					
					var langs = oLanguages.languages;
					
					var isValues = false;
					if (langs.length > 0) {
						isValues = true;	
					}
					equal(isValues , true, "muliple languages were returned -- OK");
					
					var id = langs[0].id;
					var name = langs[0].name;
					
					equal(id, "af","Language id returned -- OK");
					equal(name, "Afrikaans","Language name returned -- OK");
					
					start();
				});
			});
			
			test("Set source language", function() {
				
				oTranslationService.setSourceLanguage(null);
				equal(oTranslationService._oSourceLanguage, undefined, "treat null as undefined -- OK");
				
				oTranslationService.setSourceLanguage("");
				equal(oTranslationService._oSourceLanguage, undefined, "treat empty string as undefined -- OK");
				
				var lang = {id:"de", name:"German"};
				
				oTranslationService.setSourceLanguage(lang);
				equal(oTranslationService._oSourceLanguage.id, "de", "Update source language id -- OK");
				equal(oTranslationService._oSourceLanguage.name, "German", "Update source language id -- OK");
			
			});
			test("Get source language", function() {
				var lang = {id:"fr", name:"French"};				
				oTranslationService.setSourceLanguage(lang);
				
				var lang1 = oTranslationService.getSourceLanguage();
				equal(lang1.id, "fr", "source language id was  retrieved -- OK");
				equal(lang1.name, "French", "source language name was  retrieved -- OK");
						
			});
			
			//////////////////////////////////////////////
			
		});
		
</script>

</head>
<body>
	<div id="qunit"></div>
</body>
</html>