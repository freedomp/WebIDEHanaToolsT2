// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.generic.app.library-all');
if ( !jQuery.sap.isDeclared('sap.ui.generic.app.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

/**
 * Initialization Code and shared classes of library sap.ui.generic.app.
 */
jQuery.sap.declare('sap.ui.generic.app.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained
sap.ui.define("sap/ui/generic/app/library",['jquery.sap.global', 'sap/ui/core/library'],
	function(jQuery, library1) {
	"use strict";


	/**
	 * SAPUI5 library with ...
	 *
	 * @namespace
	 * @name sap.ui.generic.app
	 * @public
	 */
	
	// delegate further initialization of this library to the Core
	sap.ui.getCore().initLibrary({
		name : "sap.ui.generic.app",
		version: "1.32.7",
		dependencies : ["sap.ui.core"],
		types: [
				 "sap.ui.generic.app.navigation.service.NavType",
		         "sap.ui.generic.app.navigation.service.ParamHandlingMode",
				 "sap.ui.generic.app.navigation.service.SuppressionBehavior"		         
			   ],
		interfaces: [],
		controls: [],
		elements: [],
		noLibraryCSS: true
	});
	
	/**
	 * A static enumeration type which indicates the conflict resolution method when merging URL parameters into select options
	 * @enum {string}
	 * @name sap.ui.generic.app.navigation.serviceigation.ParamHandlingMode
	 * @readonly
	 * @public
	 */
	sap.ui.generic.app.navigation.service.ParamHandlingMode = {
		
		/**
		 * the conflict resolution favors the SelectionVariant over URL parameters
		 * @public
		 */
		SelVarWins : "SelVarWins",
		
		/**
		 * the conflict resolution favors the URL parameters over the SelectionVariant. Caution: In case of cross-app navigation
		 * a navigation parameter value from the source app is overwritten by a default, if a default is maintained in the launchpad
		 * designer for this parameter in the target app!
		 * @public
		 */
		URLParamWins : "URLParamWins",
		
		/**
		 * the conflict resolution adds URL parameters to the SelectionVariant
		 * @public
		 */
		InsertInSelOpt : "InsertInSelOpt"
	};	
	
	/**
	 * A static enumeration type which indicates the type of inbound navigation
	 * @enum {string}
	 * @readonly
	 * @public
	 */
	sap.ui.generic.app.navigation.service.NavType = {
		/** 
		 * initial startup without any navigation or default parameters
		 * @public
		 */
		initial : "initial",
		
		/**
		 * basic cross-app navigation with URL parameters only (without sap-xapp-state) or initial start with default parameters
		 * @public
		 */
		URLParams : "URLParams",
		
		/**
		 * cross-app navigation with sap-xapp-state parameter (and URL parameters), defaulted parameters may be added
		 * @public
		 */
		xAppState : "xAppState",
		
		/**
		 * back navigation with sap-iapp-state parameter
		 * @public
		 */
		iAppState : "iAppState",
		
		/**
		 * legacy App Context navigation from personalized tiles or email / JAM links, which used the AppCtx parameter
		 */
		AppCtx : "AppCtx"
	};	
	
	/**
	 * A static enumeration type which indicates whether semantic attributes with values <code>null</code>,
	 * <code>undefined</code> or <code>""</code> (empty string) shall be suppressed, before they are mixed in to the selection variant in the
	 * method {@link sap.ui.generic.app.navigation.service..NavigationHandler.mixAttributesAndSelectionVariant mixAttributesAndSelectionVariant}
	 * of the {@link sap.ui.generic.app.navigation.service..NavigationHandler NavigationHandler}
	 * @enum {integer}
	 * @name sap.ui.generic.app.navigation.service.SuppressionBehavior
	 * @readonly
	 * @public
	 */
	sap.ui.generic.app.navigation.service.SuppressionBehavior = {
		
		/**
		 * standard suppression behavior: semantic attributes with a <code>null</code> or an <code>undefined</code> value are ignored,
		 * the remaining attributes are mixed in to the selection variant
		 * @public
		 */
		standard : 0,
		
		/**
		 * semantic attributes with an empty string are ignored, the remaining attributes are mixed in to the selection variant.
		 * Warning! Consider the impact on Boolean variable values!
		 * @public
		 */
		ignoreEmptyString : 1,
		
		/**
		 * semantic attributes with a <code>null</code> value lead to an {@link sap.fin.central.lib.error.Error error} of type NavigationHandler.INVALID_INPUT
		 * @public
		 */
		raiseErrorOnNull : 2,
		
		/**
		 * semantic attributes with an <code>undefined</code> value lead to an {@link sap.fin.central.lib.error.Error error} of type NavigationHandler.INVALID_INPUT
		 * @public
		 */
		raiseErrorOnUndefined : 4

	};	
	
	sap.ui.lazyRequire("sap.ui.generic.app.AppComponent", "new extend getMetadata");
	
	return sap.ui.generic.app;

}, /* bExport= */ false);

}; // end of sap/ui/generic/app/library.js
if ( !jQuery.sap.isDeclared('sap.ui.generic.app.navigation.NavigationController') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// ------------------------------------------------------------------------------------------------------------
// Provides class sap.ui.generic.app.navigation.NavigationController to handle navigation/routing related tasks
// ------------------------------------------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.generic.app.navigation.NavigationController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ComponentContainer'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.routing.HashChanger'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.routing.History'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessagePage'); // unlisted dependency retained
jQuery.sap.require('sap.m.Link'); // unlisted dependency retained
sap.ui.define("sap/ui/generic/app/navigation/NavigationController",[
	'jquery.sap.global', 'sap/ui/base/Object', 'sap/ui/core/ComponentContainer', 'sap/ui/core/routing/HashChanger', 'sap/ui/core/routing/History', 'sap/ui/model/Filter', 'sap/ui/model/FilterOperator', 'sap/m/MessageBox', 'sap/m/MessagePage', 'sap/m/Link'
], function(jQuery, BaseObject, ComponentContainer, HashChanger, History, Filter, FilterOperator, MessageBox, MessagePage, Link) {
	"use strict";

	/**
	 * Handles all navigation and routing-related tasks for the application.
	 * 
	 * @class The NavigationController class creates and initializes a new navigation controller with the given
	 *        {@link sap.ui.generic.app.AppComponent AppComponent}.
	 * @param {sap.ui.generic.app.AppComponent} oComponent The AppComponent instance
	 * @public
	 * @extends sap.ui.base.Object
	 * @version 1.32.7
	 * @since 1.30.0
	 * @alias sap.ui.generic.app.navigation.NavigationController
	 */
	var NavigationController = BaseObject.extend("sap.ui.generic.app.navigation.NavigationController", {
		metadata: {
			library: "sap.ui.generic.app"
		},
		constructor: function(oComponent) {
			if (!oComponent || !oComponent.getRouter()) {
				throw "No component with router passed";
			}
			// inherit from base object.
			BaseObject.apply(this, arguments);
			this.oRouter = oComponent.getRouter();
			this.oViews = {};
			this.oComponent = oComponent;
			this._oNavContainer = this.oComponent._oNavContainer;
			this._sNavigationTargetId = this._oNavContainer.getId();

			this.oRouter.attachRouteMatched(this._handleRouteMatched, this);
			this.oRouter.attachBypassed(this._handleBypassed, this);

			// TODO: this has to be clarified and fixed
			this.oRouter._oViews._getViewWithGlobalId = function(oView) {
				// Test only
				if (!this.oViews[oView.viewName]) {
					var oRoute = this.oRouter.getRoute(oView.viewName);
					if (oRoute && oRoute._oConfig) {
						this.oViews[oView.viewName] = this._createComponentInstance(oRoute._oConfig);
					} else {
						this.oViews[oView.viewName] = sap.ui.view({
							viewName: oView.viewName,
							type: oView.type,
							height: "100%"
						});
					}
				}
				return this.oViews[oView.viewName];
			}.bind(this);
			this._oHashChanger = HashChanger.getInstance();
			this._generateRoutingMetadata();
			this._initialise();
		}
	});

	NavigationController._sChanges = "Changes";

	/**
	 * Initialises the necessary info
	 * 
	 * @private
	 */
	NavigationController.prototype._initialise = function() {
		var oData;
		oData = this.oComponent.getComponentData();
		if (oData) {
			this._oStartupParameters = oData.startupParameters;
		}
		// check if there entitySet and startup parameters are present and no hash exists!
		if (this._sEntitySet && this._oStartupParameters && !this._oHashChanger.getHash()) {
			this._processStartupParameters();
		} else {
			this._initialiseRouting();
		}
	};

	/**
	 * checks the startup parameters for triggering navigation
	 * 
	 * @private
	 */
	NavigationController.prototype._processStartupParameters = function() {
		var oModel;
		// wait for the ODataMetaModel to be loaded
		oModel = this.oComponent.getModel();
		oModel.getMetaModel().loaded().then(function() {
			var oEntitySet, oEntityType, fCheckKeys, bCheckKeys, aSemanticKey, sHash;
			fCheckKeys = function(aKeys, mParams) {
				var i, iLength, bSuccess = false, oKey, sKeyProperty;
				if (mParams && aKeys) {
					iLength = aKeys.length;
					for (i = 0; i < iLength; i++) {
						// assume key handling shall be successful
						bSuccess = true;
						oKey = aKeys[i];
						// Keys are located either at name (resource/entity key) or PropertyPath (SemanticKey annotation)
						sKeyProperty = oKey.name || oKey.PropertyPath;
						if (!mParams[sKeyProperty] || mParams[sKeyProperty].length > 1) {
							// if no key params or multiple key params are present set unsuccessful and break
							bSuccess = false;
							break;
						}
					}
				}
				return bSuccess;
			};

			oEntitySet = oModel.getMetaModel().getODataEntitySet(this._sEntitySet);
			if (oEntitySet) {
				oEntityType = oModel.getMetaModel().getODataEntityType(oEntitySet.entityType);
			}
			if (oEntityType) {
				bCheckKeys = fCheckKeys(oEntityType.key.propertyRef, this._oStartupParameters);
			}

			if (bCheckKeys) {
				// if entity key check passes, a full technical key can be created
				sHash = oModel.createKey(this._sEntitySet, this._oStartupParameters);
				if (sHash) {
					this._oHashChanger.replaceHash(sHash);
				}
			} else {
				// get the semantic key annotation
				aSemanticKey = oEntityType["com.sap.vocabularies.Common.v1.SemanticKey"];
				bCheckKeys = fCheckKeys(aSemanticKey, this._oStartupParameters);

				if (bCheckKeys) {
					this._readObject(aSemanticKey, this._oStartupParameters, oModel);
					// read will trigger the initialisation as needed
					return;
				}
			}
			this._initialiseRouting();
		}.bind(this));
	};

	/**
	 * Creates necessary routing info and initialises the Router
	 * 
	 * @private
	 */
	NavigationController.prototype._initialiseRouting = function() {
		var sHash;
		this._oHistory = new History(this._oHashChanger);
		if (!this._oHashChanger.getHash()) {
			sHash = "";
			// no route is set yet, check if start entity was passed via parameter
			if (this._oStartupParameters && this._oStartupParameters.route && this._oStartupParameters.route.length === 1) {
				sHash = this._oStartupParameters.route[0];
				this._oHashChanger.replaceHash(sHash);
			}
		}
		this.oRouter.initialize();
	};

	/**
	 * Creates necessary routing metadata from configuration and adds it to the Router
	 * 
	 * @private
	 */
	NavigationController.prototype._generateRoutingMetadata = function() {
		var oConfig = this.oComponent.getConfig(), oTopRouteConfig, oTopRoute;
		if (!oConfig.pages || !oConfig.pages.length || oConfig.pages.length === 0) {
			throw new Error("Route Configuration missing");
		} else if (oConfig.pages.length > 1) {
			throw new Error("Currently only one Top route supported");
		} else {
			// create Top-Route
			// currently only one top route supported
			oTopRouteConfig = oConfig.pages[0];

			// Store the top route's entitySet, since it could be used later
			this._sEntitySet = oTopRouteConfig.entitySet;

			oTopRoute = this._createRoute(oTopRouteConfig, "root", 0);
			this.oRouter.addRoute(oTopRoute);

			this._createQueryRoute(oTopRoute);

			this._createChildRoutes(oTopRouteConfig, 0, null);
		}
	};

	/**
	 * Creates child route from the specified route configuration
	 * 
	 * @private
	 * @param {Object} oRoute - the route configuration
	 * @param {Number} iLevel - the level
	 * @param {Object} oParent - the parent route (if any)
	 */
	NavigationController.prototype._createChildRoutes = function(oRoute, iLevel, oParent) {
		var i, iLen;
		if (oRoute.pages) {
			iLen = oRoute.pages.length;
			for (i = 0; i < iLen; i++) {
				this._createRoutes(oRoute.pages[i], (iLevel + 1), oParent);
			}
		}
	};

	/**
	 * Creates all necessary route(s) metadata from configuration and adds it to the Router instance
	 * 
	 * @private
	 * @param {Object} oRoute - the route configuration
	 * @param {Number} iLevel - the level
	 * @param {Object} oParent - the parent route (if any)
	 */
	NavigationController.prototype._createRoutes = function(oRoute, iLevel, oParent) {
		var oNewRoute = this._createRoute(oRoute, oRoute.component.list ? "aggregation" : "detail", iLevel, oParent);
		this.oRouter.addRoute(oNewRoute);
		this._createQueryRoute(oNewRoute);
		this._createChildRoutes(oRoute, iLevel, oNewRoute);
	};

	/**
	 * Creates a Query route from the specified route and adds it to the router
	 * 
	 * @private
	 * @param {Object} oRoute - the route configuration
	 */
	NavigationController.prototype._createQueryRoute = function(oRoute) {
		var oQueryRoute = jQuery.extend({}, oRoute);
		oQueryRoute.name = oRoute.name + "query";
		oQueryRoute.pattern = oRoute.pattern + "{?query}";
		this.oRouter.addRoute(oQueryRoute);
	};

	/**
	 * Creates and returns a route metadata from configuration
	 * 
	 * @private
	 * @param {Object} oRoute - the route configuration
	 * @param {string} sOperation - the operation for which the route has to be created
	 * @param {Number} iLevel - the level
	 * @param {Object} oParentRoute - the parent route (if any)
	 * @returns {Object} the created route metadata
	 */
	NavigationController.prototype._createRoute = function(oRoute, sOperation, iLevel, oParentRoute) {
		var sPathPattern, oNewRoute;
		sPathPattern = oRoute.navigationProperty || oRoute.entitySet;

		oNewRoute = jQuery.extend({}, oRoute);
		oNewRoute.path = "/" + oRoute.entitySet;
		oNewRoute.operation = sOperation;
		oNewRoute.viewLevel = iLevel;
		// TODO: use only component name here?
		oNewRoute.template = oRoute.component ? (oRoute.component.name || oRoute.component) : oRoute.template;

		switch (sOperation) {
			case "root":
				oNewRoute.name = 'root';
				oNewRoute.pattern = '';
				break;
			case "aggregation":
				oNewRoute.name = sPathPattern + "~aggregation";
				oNewRoute.pattern = sPathPattern;
				oNewRoute.path = oParentRoute.path || oNewRoute.path;
				oNewRoute.entitySet = oParentRoute.entitySet || oNewRoute.entitySet;
				break;
			default:
				oNewRoute.name = sPathPattern;
				oNewRoute.pattern = sPathPattern + "({keys" + iLevel + "})";
				break;
		}

		if (oParentRoute) {
			oNewRoute.name = oParentRoute.name + "/" + oNewRoute.name;
			oNewRoute.pattern = oParentRoute.pattern + "/" + oNewRoute.pattern;
			oNewRoute.parentEntitySet = oParentRoute.entitySet;
		}
		oNewRoute.view = oNewRoute.name; // TODO: simplify this
		oNewRoute.controlId = this._sNavigationTargetId;
		oNewRoute.controlAggregation = "pages";
		return oNewRoute;
	};

	/**
	 * Creates a new ComponentContainer with template from routing configuration
	 * 
	 * @private
	 * @param {Object} oRouteConfig - the route configuration
	 * @returns {sap.ui.core.ComponentContainer} instance of the component container
	 */
	NavigationController.prototype._createComponentInstance = function(oRouteConfig) {
		var sTemplate, sEntitySet, oComponentContainer, oSettings;
		sTemplate = oRouteConfig.template;
		sEntitySet = oRouteConfig.entitySet;

		oSettings = {
			appComponent: this.oComponent,
			isLeaf: !oRouteConfig.pages || !oRouteConfig.pages.length,
			subPages: oRouteConfig.pages,
			entitySet: sEntitySet,
			navigationProperty: oRouteConfig.navigationProperty,
			componentData: {
				preprocessorsData: {}
			}
		};

		if (oRouteConfig.component.settings) {
			// consider component specific settings from app descriptor
			jQuery.extend(oSettings, oRouteConfig.component.settings);
		}

		try {
			oComponentContainer = new ComponentContainer({
				name: sTemplate,
				propagateModel: true,
				width: '100%',
				height: '100%',
				handleValidation: true,
				settings: oSettings
			});
			return oComponentContainer;
		} catch (e) {
			throw new Error("Component " + sTemplate + " could not be loaded");
		}
	};

	/**
	 * Event hander fired by router once it finds a match
	 * 
	 * @private
	 * @param {Object} oEvt - the event object
	 */
	NavigationController.prototype._handleRouteMatched = function(oEvt) {
		var oView, oRouteConfig, sKey, oKeys, sPath;
		oView = oEvt.getParameter("view");
		oRouteConfig = oEvt.getParameter("config");

		// remove all messages before setting a new binding context
		sap.ui.getCore().getMessageManager().removeAllMessages();

		// If the path from a binding context exists --> use it instead of checking for operation in route config
		if (this._oTargetContextPath) {
			sPath = this._oTargetContextPath;
			// delete the path from binding context, so it not read again
			delete this._oTargetContextPath;
			// 
		} else if (oRouteConfig.operation !== "root") {// check for operation
			// The view is for an instance
			sPath = this._getContextPath(oRouteConfig);
			oKeys = oEvt.getParameter("arguments");
			delete oKeys["?query"];
			if (oKeys) {
				for (sKey in oKeys) {
					// replace each key in pattern with corresponding key in argument
					sPath = sPath.replace("{" + sKey + "}", oKeys[sKey]);
				}
			}
		}

		// Bind the view from the path
		this._activateView(oView, sPath);
	};

	/**
	 * calls onActivate on the specified view, if it exists
	 * 
	 * @private
	 * @param {Object} oView - the view
	 * @param {string} sPath - the path in the model
	 * @param {boolean} bDelayedActivate - optional boolean flag, true if activate is (re-)triggered delayed
	 */
	NavigationController.prototype._activateView = function(oView, sPath, bDelayedActivate) {
		var oOldPage, oOldComponent, oComponent, oViewEventDelegate;
		if (oView) {
			// Check if a component exists
			if (oView.getComponentInstance) {
				oComponent = oView.getComponentInstance();
				// if no component exists --> delay handling for activation/binding by attaching to the rendering delegate
				if (!oComponent) {
					oViewEventDelegate = {
						onBeforeRendering: function() {
							// at this point of time the component should exists;
							// --> if so, retrigger the activate call
							oView.removeEventDelegate(oViewEventDelegate, this);
							if (oView.getComponentInstance && oView.getComponentInstance()) {
								this._activateView(oView, sPath, true);
							}
						}
					};
					oView.addEventDelegate(oViewEventDelegate, this);
					return;
				}
			}

			// Check if an old/active view exists
			// try to use previous page - since it should be the old one by default
			oOldPage = this._oNavContainer.getPreviousPage();
			// if activate was not delayed and the view is not same as the current page - use the current page; since we still might not haven
			// transitioned to the new page
			if (!bDelayedActivate && (oOldPage || oView !== this._oNavContainer.getCurrentPage())) {
				oOldPage = this._oNavContainer.getCurrentPage();
			}
			// trigger onDeactivate on the old component instance
			if (oOldPage && oOldPage.getComponentInstance) {
				oOldComponent = oOldPage.getComponentInstance();
				if (oOldComponent && oOldComponent.onDeactivate) {
					oOldComponent.onDeactivate();
				}
			}

			// trigger onActivate on the component instance
			if (oComponent) {
				if (oComponent.onActivate) {
					oComponent.onActivate(sPath);
				}
				if (!oComponent.getPreventBinding()) {
					this._bindView(oView, sPath);
				}
			}
		}
	};

	/**
	 * binds the view with the specified path
	 * 
	 * @private
	 * @param {Object} oView - the view
	 * @param {string} sPath - the path in the model
	 */
	NavigationController.prototype._bindView = function(oView, sPath) {
		var oEntity;
		if (oView && sPath) {
			// check if path refers to an entry created in the local model only
			// TODO: replace this lines with standard UI5 method once available
			oEntity = oView.getModel().getProperty(sPath);
			if (oEntity && oEntity.__metadata && oEntity.__metadata.created) {
				// in this case no bindElement can be used but setBindingContext instead
				// always unbind first
				oView.unbindElement();
				oView.setBindingContext(oView.getModel().getContext(sPath));
			} else {
				oView.bindElement({
					path: sPath,
					events: {
						dataReceived: this._handleDataReceived.bind(this)
					},
					batchGroupId: NavigationController._sChanges,
					changeSetId: NavigationController._sChanges
				});
			}
		}

	};

	/**
	 * Sets/Replaces the hash via the router/hash changer
	 * 
	 * @private
	 * @param {string} sHash - the hash string
	 * @param {boolean} bReplace - whether the hash should be replaced
	 */
	NavigationController.prototype._navigate = function(sHash, bReplace) {
		if (!sHash) {
			sHash = ""; // when no hash is passed, undefined seems to be used in the URL
		}
		if (bReplace) {
			this.oRouter.oHashChanger.replaceHash(sHash);
		} else {
			this.oRouter.oHashChanger.setHash(sHash);
		}
	};

	/**
	 * Navigates to the root view.
	 * 
	 * @public
	 * @param {boolean} bReplace If this is true the navigation/hash will be replaced
	 */
	NavigationController.prototype.navigateToRoot = function(bReplace) {
		this._navigate("", bReplace);
	};

	/**
	 * Navigates back to the previous view.
	 * 
	 * @public
	 * @param {boolean} bReplace If this is true the navigation/hash will be replaced
	 */
	NavigationController.prototype.navigateBack = function(bReplace) {
		this._navigate(this._oHistory ? this._oHistory.getPreviousHash() : "", bReplace);
	};

	/**
	 * Navigates to the specified context.
	 * 
	 * @public
	 * @param {Object} oTargetContext - The context to navigate to
	 * @param {string} sNavigationProperty - The navigation property
	 * @param {boolean} bReplace If this is true the navigation/hash will be replaced
	 */
	NavigationController.prototype.navigateToContext = function(oTargetContext, sNavigationProperty, bReplace) {
		var sHash = this.oRouter.oHashChanger.getHash(), sPath, fTruncateHash;

		if (oTargetContext) {
			// get the navigation path from binding context
			sPath = this._getNavigationPath(oTargetContext, sNavigationProperty);

			if (sNavigationProperty) {
				fTruncateHash = function(sHash, sMatch, iDelta) {
					var iIndex;
					if (sHash && sMatch) {
						if (isNaN(iDelta)) {
							iDelta = 0;
						}
						iIndex = sHash.indexOf(sMatch);
						if (iIndex > -1) {
							sHash = sHash.substring(0, iIndex - iDelta);
						}
					}
					return sHash;
				};
				// add a leading "/" is none exists
				if (sNavigationProperty.indexOf("/") < 0) {
					sNavigationProperty = "/" + sNavigationProperty;
				}
				// hash contains EntitySet(Key)/NavProp() -> only EntitySet(Key) is required
				sHash = fTruncateHash(sHash, sNavigationProperty);
				// get hash path until "?"
				sHash = fTruncateHash(sHash, "?");

				// just concatenate current hash with selected path e.g. Root(Key) + / + NavProp(Key)
				if (sHash) {
					sPath = sHash + "/" + sPath;
				}
			}

			// Store the context path and use it in _handleNavigation, so no data retrieval is done!
			this._oTargetContextPath = oTargetContext.getPath();

			// navigate to context
			this._navigate(sPath, bReplace);
		}
	};

	/**
	 * get the navigation path from binding context
	 * 
	 * @private
	 * @param {Object} oTargetContext - the binding context
	 * @param {string} sNavigationProperty - the navigation property that should replace the entity
	 * @returns {string} the resolved path
	 */
	NavigationController.prototype._getNavigationPath = function(oTargetContext, sNavigationProperty) {
		var sPath, aPath, sEntitySet;
		// Get the path from binding context without "/"
		sPath = oTargetContext.getPath().substring(1);
		// Get the entityset from path
		aPath = sPath.split('(');
		if (aPath[0]) {
			sEntitySet = aPath[0];
		}
		// Replace the entitySet with navigationProperty in the path, if it is specified
		if (sNavigationProperty) {
			sPath = sPath.replace(sEntitySet, sNavigationProperty);
			if (sPath.indexOf("/") === 0) {
				sPath = sPath.substring(1);
			}
		}
		return sPath;
	};

	/**
	 * get the context path from navigation path/pattern
	 * 
	 * @private
	 * @param {Object} oRouteConfig - the route configuration
	 * @returns {String} the context path
	 */
	NavigationController.prototype._getContextPath = function(oRouteConfig) {
		var sPath, sPathPattern, iIndex;
		if (oRouteConfig) {
			// get the pattern from route configuration
			sPath = oRouteConfig.pattern;
			// get the current path pattern from either navigation property or the entitySet
			sPathPattern = oRouteConfig.navigationProperty || oRouteConfig.entitySet;
			if (sPath && sPathPattern) {
				iIndex = sPath.indexOf("{?query}");
				// if the query is not at the beginning there is a query suffix
				if (iIndex > 0) {
					// get the current path by ignoring the query suffix
					sPath = sPath.substring(0, iIndex);
				}
				// reset the index
				iIndex = -1;
				// Look for path pattern with ({key
				sPathPattern += "({keys";
				iIndex = sPath.indexOf(sPathPattern);
				// if the pattern is not at the beginning there is a parent path prefix
				if (iIndex > 0) {
					// get the current path by ignoring the parent prefix
					sPath = sPath.substring(iIndex);
				}
				// replace the navigation property with entity set to form the binding context path
				if (oRouteConfig.navigationProperty) {
					sPath = sPath.replace(oRouteConfig.navigationProperty, oRouteConfig.entitySet);
				}
				// context always needs to start with a "/"
				sPath = "/" + sPath;
			}
		}
		return sPath;
	};

	/**
	 * Navigates to the message page and shows the specified content.
	 * 
	 * @public
	 * @param {Object} mParameters - The parameters for message page
	 */
	NavigationController.prototype.navigateToMessagePage = function(mParameters) {
		var sEntitySet, sTitle, bReplaceURL, sText, oEntitySet, oEntityType, oHeaderInfo, sIcon = null, oMetaModel, oRB;
		if (mParameters) {
			sEntitySet = mParameters.entitySet;
			sTitle = mParameters.title;
			sText = mParameters.text;
			sIcon = mParameters.icon;
			bReplaceURL = mParameters.replaceURL;
		}

		if (sEntitySet) {
			oMetaModel = this.oComponent.getModel().getMetaModel();
			if (oMetaModel) {
				oEntitySet = oMetaModel.getODataEntitySet(sEntitySet);
				oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
				oHeaderInfo = oEntityType['com.sap.vocabularies.UI.v1.HeaderInfo'];
			}
			if (oHeaderInfo && oHeaderInfo.TypeImageUrl && oHeaderInfo.TypeImageUrl.String) {
				sIcon = oHeaderInfo.TypeImageUrl.String;
			}
		}
		if (this.oMessagePage) {
			this.oMessagePage.destroy();
		}
		if (!this._sLinkText) {
			oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ui.generic.app");
			this._sLinkText = oRB.getText("RETURN_TO_MAIN");
		}
		this.oMessagePage = new MessagePage({
			title: sTitle,
			text: sText,
			icon: sIcon,
			customDescription: new Link({
				text: this._sLinkText,
				press: this.navigateBack.bind(this, bReplaceURL)
			})
		});

		this._oNavContainer.addPage(this.oMessagePage);
		this._oNavContainer.to(this.oMessagePage);
	};

	/**
	 * Event handler fired by router when no matching route is found
	 * 
	 * @private
	 * @param {Object} oEvt - the event object
	 */
	NavigationController.prototype._handleBypassed = function(oEvt) {
		var oRB;
		if (!this._sNavigationTitle) {
			oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ui.generic.app");
			this._sNavigationTitle = oRB.getText("UNKNOWN_NAVIGATION_TARGET");
		}

		this.navigateToMessagePage({
			title: this._sNavigationTitle,
			replaceURL: true
		});
	};

	/**
	 * Event handler fired by router when no matching route is found
	 * 
	 * @private
	 * @param {Object} oEvent - the event object
	 */
	NavigationController.prototype._handleDataReceived = function(oEvent) {
		var oData = null, oRB;
		if (oEvent) {
			oData = oEvent.getParameter("data");
			// When not data parameter is received there is usually an exception
			// TODO: show backend error messages
			if (!oData) {
				if (!this._sDataLoadFailedTitle || !this._sDataLoadFailedText) {
					oRB = sap.ui.getCore().getLibraryResourceBundle("sap.ui.generic.app");
					this._sDataLoadFailedTitle = oRB.getText("ERROR_LOAD_DATA_TITLE");
					this._sDataLoadFailedText = oRB.getText("ERROR_LOAD_DATA_TEXT");
				}
				this.navigateToMessagePage({
					title: this._sDataLoadFailedTitle,
					text: this._sDataLoadFailedText
				});
			}
		}
	};

	/**
	 * Returns a map of views currently existing in the navigation controller.
	 * 
	 * @protected
	 * @returns {Object} the views from the navigation controller
	 */
	NavigationController.prototype.getViews = function() {
		return this.oViews;
	};

	/**
	 * Returns the NavContainer instance used in the application.
	 * 
	 * @protected
	 * @returns {sap.m.NavContainer} the NavContainer instance
	 */
	NavigationController.prototype.getNavContainer = function() {
		return this._oNavContainer;
	};

	/**
	 * perform a read with the specified data and trigger further initialisation of router
	 * 
	 * @private
	 * @param {Array} aKeys - the keys used to create the filter
	 * @param {Object} mParams - object containing parameters
	 * @param {Object} oModel- the odata model instance
	 */
	NavigationController.prototype._readObject = function(aKeys, mParams, oModel) {
		var i, iLen, sProperty, sValue, aFilters = [];
		if (aKeys && mParams && oModel) {
			iLen = aKeys.length;
			for (i = 0; i < iLen; i++) {
				// get property from property path
				sProperty = aKeys[i].PropertyPath;
				// get value from parameter array (should have only 1)
				sValue = mParams[sProperty][0];
				aFilters.push(new Filter(sProperty, FilterOperator.EQ, sValue));
			}
			oModel.read('/' + this._sEntitySet, {
				filters: aFilters,
				success: function(oResult) {
					var oRow, i, iLength, sKey;
					if (oResult && oResult.results) {
						iLength = oResult.results.length;
						for (i = 0; i < iLength; i++) {
							oRow = oResult.results[i];
							if (oRow && oRow.IsActiveEntity) {
								break;
							}
							oRow = null;
						}
						if (!oRow) {
							oRow = oResult.results[0];
						}
					}
					if (oRow) {
						sKey = oModel.getKey(oRow);
					}
					if (sKey) {
						this._oHashChanger.replaceHash(sKey);
					}
					this._initialiseRouting();
				}.bind(this),
				error: function(oError) {
					// just continue with initialisation in case of errors
					this._initialiseRouting();
				}.bind(this)
			});
		}

	};

	/**
	 * Cleans up the resources.
	 * 
	 * @public
	 */
	NavigationController.prototype.destroy = function() {
		BaseObject.prototype.destroy.apply(this, arguments);
		if (this._oHistory && this._oHistory.destroy) {
			this._oHistory.destroy();
		}
		this._oHistory = null;
		this.oRouter = null;
		this.oViews = null;
		this.oComponent = null;
		this._sLinkText = null;
		this._sNavigationTitle = null;
		this._sDataLoadFailedText = null;
		this._sDataLoadFailedTitle = null;
	};

	return NavigationController;

}, /* bExport= */true);

}; // end of sap/ui/generic/app/navigation/NavigationController.js
if ( !jQuery.sap.isDeclared('sap.ui.generic.app.navigation.service.NavError') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.generic.app.navigation.service.NavError'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/ui/generic/app/navigation/service/NavError",["jquery.sap.global", "sap/ui/base/Object"],
	function(jQuery, BaseObject) {

		"use strict";
		
		/**
		 * @class
		 * An object representing error handling information during runtime.
		 * @extends sap.ui.base.Object
		 * @constructor
		 * @public
		 * @alias sap.ui.generic.app.navigation.service.Error
		 * @param {string} sErrorCode an consumer's internal error code which allows tracking the source locations.
		 */
		var NavError = BaseObject.extend("sap.ui.generic.app.navigation.service.NavError", /** @lends sap.ui.generic.app.navigation.service.NavError */ {
		
			metadata : {
				publicMethods : [
					// getter methods of properties
					"getErrorCode"
				],
				properties : [
				              ],				              
				library: "sap.ui.generic.app"
			},
			
			constructor : function(sErrorCode) {
				BaseObject.apply(this);
				
				this._sErrorCode = sErrorCode;
			}
		
		});
		
		/**
		 * returns the error code with which the instance has been created.
		 * @public
		 * @returns {string} the error code of the error
		 * 
		 */
		/* jshint freeze: true */		
		NavError.prototype.getErrorCode = function() {
			return this._sErrorCode;
		};

		
		// final step for library
		return NavError;
	}
);

}; // end of sap/ui/generic/app/navigation/service/NavError.js
if ( !jQuery.sap.isDeclared('sap.ui.generic.app.navigation.service.SelectionVariant') ) {
/*!
 * @copyright@
 */
jQuery.sap.declare('sap.ui.generic.app.navigation.service.SelectionVariant'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/generic/app/navigation/service/SelectionVariant",["./NavError",  "sap/ui/base/Object", "jquery.sap.global"],
	function(Error, BaseObject, jQuery) {	
	"use strict";

	/**
	 * @class
	 * creates a new instance of a SelectionVariant. If no parameter is being passed, 
	 * an new empty instance is being created which ID has been set to <code>""</code>.
	 * Passing a JSON-serialized string complying to the Selection Variant Specification will parse it
	 * and the newly created instance will contain the same information. 
	 * @extends sap.ui.base.Object
	 * @constructor
	 * @public
	 * @alias sap.ui.generic.app.navigation.service.SelectionVariant
	 * @param {string|object} [vSelectionVariant] in case of type <code>string</code> the JSON-formatted string containing a Selection Variant which shall be parsed.
	 * If of type <code>object</code> the object-styled instance of the (raw) Selection Variant is expected.
	 * @throws an instance of {@link sap.ui.generic.app.navigation.service.Error} in case of input errors. Valid error codes are:
	 * <table>
	 * <tr><th>Error code</th><th>Description</th></tr>
	 * <tr><td>SelectionVariant.INVALID_INPUT_TYPE</td><td>indicating that the data format of the Selection Variant provided is inconsistent</td></tr>
	 * <tr><td>SelectionVariant.UNABLE_TO_PARSE_INPUT</td><td>indicating that the provided string is not a JSON-formatted string</td></tr>
	 * <tr><td>SelectionVariant.INPUT_DOES_NOT_CONTAIN_SELECTIONVARIANT_ID</td><td>indicating the SelectionVariantID of the SelectionVariantID cannot be retrieved</td></tr>
	 * <tr><td>SelectionVariant.PARAMETER_WITHOUT_VALUE</td><td>indicating that a parameter was attempted to be specified, but without providing any value (even not the empty value)</td></tr>
	 * <tr><td>SelectionVariant.SELECT_OPTION_WITHOUT_PROPERTY_NAME</td><td>indicating that a selection option has been defined, but missing the Ranges definition</td></tr>
	 * <tr><td>SelectionVariant.SELECT_OPTION_RANGES_NOT_ARRAY</td><td>indicating that the Ranges definition is not an array</td></tr>
	 * </table>
	 * These exceptions can only be thrown in case that the parameter <code>vSelectionVariant</code> has been provided. 
	 */
	var SelectionVariant = BaseObject.extend("sap.ui.generic.app.navigation.service.SelectionVariant",  /** @lends sap.ui.generic.app.navigation.service.SelectionVariant */ {
		_rVALIDATE_SIGN : new RegExp("[E|I]"),
		_rVALIDATE_OPTION : new RegExp("EQ|NE|LE|GE|LT|GT|BT|CP"),
	
		constructor : function(vSelectionVariant) {
			this._mParameters = {};
			this._mSelectOptions = {};
		
			this._sId = "";
		
			if (vSelectionVariant !== undefined) {
				if (typeof vSelectionVariant === "string") {
					this._parseFromString(vSelectionVariant);
				} else if (typeof vSelectionVariant === "object") {
					this._parseFromObject(vSelectionVariant);
				} else {
					throw new Error("SelectionVariant.INVALID_INPUT_TYPE");
				}
			}
		},
	
		/**
		 * returns the identification of this Selection Variant
		 * @returns {string} the identification of this Selection Variant as made available during construction
		 * @public
		 */
		getID : function() {
			return this._sId;
		},
	
		/**
		 * sets the identification of this Selection Variant
		 * @param {string} sId the new identification of this Selection Variant 
		 * @public
		 */
		setID : function(sId) {
			this._sId = sId;
		},
	
		/**
		 * sets the text / description of this selection variant
		 * @param {string} sNewText the new description which shall be used
		 * @public
		 * @throws an instance of {@link sap.ui.generic.app.navigation.service.Error} in case of input errors. Valid error codes are:
		 * <table>
		 * <tr><th>Error code</th><th>Description</th></tr>
		 * <tr><td>SelectionVariant.INVALID_INPUT_TYPE</td><td>indicating an input parameter has an invalid type</td></tr>
		 * </table>
		 */
		setText : function(sNewText) {
			if (typeof sNewText !== "string") {
				throw new Error("SelectionVariant.INVALID_INPUT_TYPE");
			}
			this._sText = sNewText;
		},
	
		/**
		 * returns the current text / description of this selection variant.
		 * @returns {string} the current description of this selection variant.
		 * @public
		 */
		getText : function() {
			return this._sText;
		},
	
		/**
		 * sets the context URL intended for the parameters
		 * @param {string} sURL the URL of the parameter context
		 * @public
		 * @throws an instance of {@link sap.ui.generic.app.navigation.service.Error} in case of input errors. Valid error codes are:
		 * <table>
		 * <tr><th>Error code</th><th>Description</th></tr>
		 * <tr><td>SelectionVariant.INVALID_INPUT_TYPE</td><td>indicating an input parameter has an invalid type</td></tr>
		 * </table>
		 */
		setParameterContextUrl : function(sURL) {
			if (typeof sURL !== "string") {
				throw new Error("SelectionVariant.INVALID_INPUT_TYPE");
			}
			this._sParameterCtxUrl = sURL;
		},
	
		/**
		 * gets the currently context url intended for the parameters
		 * @returns {string} the current context URL for the parameters
		 * @public
		 */
		getParameterContextUrl : function() {
			return this._sParameterCtxUrl;
		},
	
		/**
		 * gets the currently context URL intended for the filters
		 * @returns {string} the current context URL for the filters
		 * @public
		 */
		getFilterContextUrl : function() {
			return this._sFilterCtxUrl;
		},
	
		/**
		 * sets the context URL intended for the filters
		 * @param {string} sURL the URL of the filters
		 * @public
		 * @throws an instance of {@link sap.ui.generic.app.navigation.service.Error} in case of input errors. Valid error codes are:
		 * <table>
		 * <tr><th>Error code</th><th>Description</th></tr>
		 * <tr><td>SelectionVariant.INVALID_INPUT_TYPE</td><td>indicating an input parameter has an invalid type</td></tr>
		 * </table>
		 */
		setFilterContextUrl : function(sURL) {
			if (typeof sURL !== "string") {
				throw new Error("SelectionVariant.INVALID_INPUT_TYPE");
			}
			this._sFilterCtxUrl = sURL;
		},
	
		/**
		 * sets the value of a parameter called <code>sName</code> to the new value <code>sValue</code>.
		 * If the parameter was already set before, its value is overwritten.
		 * @param {string} sName the name of the parameter which shall be set. The <code>null</code> value is not allowed 
		 * (see specification "Selection Variants for UI Navigation in Fiori", section 2.4.2.1)
		 * @param {string} sValue the value of the parameter to be set
		 * @returns {object} this instance to allow method chaining.
		 * @public
		 * @throws an instance of {@link sap.ui.generic.app.navigation.service.Error} in case of input errors. Valid error codes are:
		 * <table>
		 * <tr><th>Error code</th><th>Description</th></tr>
		 * <tr><td>SelectionVariant.PARAMETER_WITHOUT_NAME</td><td>indicating that name of the parameter has not been specified</td></tr>
		 * <tr><td>SelectionVariant.INVALID_INPUT_TYPE</td><td>indicating an input parameter has an invalid type or the value is set to <code>null</code></td></tr>
		 * <tr><td>SelectionVariant.PARAMETER_SELOPT_COLLISION</td><td>indicating that another SelectOption with the same name as the parameter already exists</td></tr>
		 * </table>
		 */
		addParameter : function(sName, sValue) {
			if (typeof sName !== "string") {
				throw new Error("SelectionVariant.INVALID_INPUT_TYPE");
			}
			if (typeof sValue !== "string") {
				throw new Error("SelectionVariant.INVALID_INPUT_TYPE");
			}
			if (sName === "") {
				throw new Error("SelectionVariant.PARAMETER_WITHOUT_NAME");
			}
		
			if (this._mSelectOptions[sName]) {
				throw new Error("SelectionVariant.PARAMETER_SELOPT_COLLISION");
			}

			this._mParameters[sName] = sValue;
		
			return this;
		},
	
		/**
		 * removes a parameter called <code>sName</code> from the selection variant
		 * @param {string} sName the name of the parameter which shall be removed
		 * @returns {object} this instance to allow method chaining.
		 * @public
		 * @throws an instance of {@link sap.ui.generic.app.navigation.service.Error} in case of input errors. Valid error codes are:
		 * <table>
		 * <tr><th>Error code</th><th>Description</th></tr>
		 * <tr><td>SelectionVariant.PARAMETER_WITHOUT_NAME</td><td>indicating that name of the parameter has not been specified</td></tr>
		 * <tr><td>SelectionVariant.INVALID_INPUT_TYPE</td><td>indicating an input parameter has an invalid type</td></tr>
		 * </table>
		 */
		removeParameter : function(sName) {
			if (typeof sName !== "string") {
				throw new Error("SelectionVariant.INVALID_INPUT_TYPE");
			}
			if (sName === "") {
				throw new Error("SelectionVariant.PARAMETER_WITHOUT_NAME");
			}
		
			delete this._mParameters[sName];
		
			return this;
		},
	
		/**
		 * Renames a parameter called <code>sNameOld</code> to <code>sNameNew</code>. If a parameter or a select option with
		 * the name <code>sNameNew</code> already exists, an error is thrown. If a parameter with the name <code>sNameOld</code>
		 * does not exist, nothing is changed.
		 * @param {string} sNameOld the current name of the parameter which shall be renamed
		 * @param {string} sNameNew the new name of the parameter
		 * @returns {object} this instance to allow method chaining.
		 * @public
		 * @throws an instance of {@link sap.ui.generic.app.navigation.service.Error} in case of input errors. Valid error codes are:
		 * <table>
		 * <tr><th>Error code</th><th>Description</th></tr>
		 * <tr><td>SelectionVariant.PARAMETER_WITHOUT_NAME</td><td>indicating that the name of a parameter has not been specified</td></tr>
		 * <tr><td>SelectionVariant.INVALID_INPUT_TYPE</td><td>indicating an input parameter has an invalid type</td></tr>
		 * <tr><td>SelectionVariant.PARAMETER_SELOPT_COLLISION</td><td>indicating that another select option with the same new name already exists</td></tr>
		 * <tr><td>SelectionVariant.PARAMETER_COLLISION</td><td>indicating that another parameter with the same new name already exists</td></tr>
		 * </table>
		 */	
		renameParameter : function(sNameOld, sNameNew) {
			if (typeof sNameOld !== "string" || typeof sNameNew !== "string") {
				throw new Error("SelectionVariant.INVALID_INPUT_TYPE");
			}
			if (sNameOld === "" || sNameNew === "") {
				throw new Error("SelectionVariant.PARAMETER_WITHOUT_NAME");
			}
			if (this._mParameters[sNameOld] !== undefined) {
				if (this._mSelectOptions[sNameNew]) {
					throw new Error("SelectionVariant.PARAMETER_SELOPT_COLLISION");
				}
				if (this._mParameters[sNameNew]) {
					throw new Error("SelectionVariant.PARAMETER_COLLISION");
				}
				this._mParameters[sNameNew] = this._mParameters[sNameOld];
				delete this._mParameters[sNameOld];
			}
			return this;
		},
	
		/**
		 * returns the value of the parameter called <code>sName</code> if it has been set before.
		 * In case that the parameter has never been set or has been removed, <code>undefined</code> is returned.
		 * @param {string} sName the name of the parameter which shall be returned.
		 * @returns {string} the value of parameter <code>sName</code>. Note that it is not possible that the value <code>null</code> is being returned.
		 * @public
		 * @throws an instance of {@link sap.ui.generic.app.navigation.service.Error} in case of input errors. Valid error codes are:
		 * <table>
		 * <tr><th>Error code</th><th>Description</th></tr>
		 * <tr><td>SelectionVariant.INVALID_INPUT_TYPE</td><td>indicating an input parameter has an invalid type</td></tr>
		 * </table>
		 */
		getParameter : function(sName) {
			if (typeof sName !== "string") {
				throw new Error("SelectionVariant.INVALID_INPUT_TYPE");
			}
			return this._mParameters[sName];
		},
	
		/**
		 * returns the set of parameter names available in this selection variant
		 * @returns {array} the list of parameter names which are valid
		 * @public
		 */
		getParameterNames : function() {
			return Object.keys(this._mParameters);
		},
	
		/**
		 * adds a new range to the list of Select Options for a given parameter.
		 * @param {string} sPropertyName the name of the property for which the selection range shall be added.
		 * @param {string} sSign the sign of the range (<b>I</b>nclude or <b>E</b>xclude)
		 * @param {string} sOption the option of the range (<b>EQ</b> for "equals", <b>NE</b> for "not equals",
		 * <b>LE</b> for "less or equals", <b>GE</b> for "greater or equals", <b>LT</b> for "less than" (and not equals),
		 * <b>GT</b> for "greater than" (and not equals), <b>BT</b> for "between", or <b>CP</b> for "contains pattern"
		 * (ABAP-styled pattern matching with the asterisk as wildcard).
		 * @param {string} sLow the single value or the lower boundary of the interval. The <code>null</code> value is not allowed 
		 * (see specification "Selection Variants for UI Navigation in Fiori", section 2.4.2.1)
		 * @param {string} [sHigh] only to be set, in case sOption is <b>BT</b>: the upper boundary of the interval.
		 * Must be <code>undefined</code> or <code>null</code> in all other cases.
		 * @return {object} this instance to allow method chaining.
		 * @public
		 * @throws an instance of {@link sap.ui.generic.app.navigation.service.Error} in case of input errors. Valid error codes are:
		 * <table>
		 * <tr><th>Error code</th><th>Description</th></tr>
		 * <tr><td>SelectionVariant.INVALID_SIGN</td><td>indicating that the sign is an invalid expression</td></tr>
		 * <tr><td>SelectionVariant.INVALID_OPTION</td><td>indicating that the option is an invalid expression</td></tr>
		 * <tr><td>SelectionVariant.HIGH_PROVIDED_THOUGH_NOT_ALLOWED</td><td>indicating that the upper boundary was specified, though the option is not "BT"</td></tr>
		 * <tr><td>SelectionVariant.INVALID_INPUT_TYPE</td><td>indicating an input parameter has an invalid type or the value is set to <code>null</code></td></tr>
		 * <tr><td>SelectionVariant.INVALID_PROPERTY_NAME</td><td>indicating that the property name is invalid, for example, it is not specified</td></tr>
		 * <tr><td>SelectionVariant.PARAMETER_SELOPT_COLLISION</td><td>indicating that another Parameter with the same name as the property name already exists</td></tr>
		 * </table>
		 */
		addSelectOption : function(sPropertyName, sSign, sOption, sLow, sHigh) {
			if (typeof sPropertyName !== "string") {
				throw new Error("SelectionVariant.INVALID_INPUT_TYPE");
			}
			if (sPropertyName === "") {
				throw new Error("SelectionVariant.INVALID_PROPERTY_NAME");
			}
			if (typeof sSign !== "string") {
				throw new Error("SelectionVariant.INVALID_INPUT_TYPE");
			}
			if (typeof sOption !== "string") {
				throw new Error("SelectionVariant.INVALID_INPUT_TYPE");
			}
			if (typeof sLow !== "string") {
				throw new Error("SelectionVariant.INVALID_INPUT_TYPE");
			}
			if (sOption === "BT" && typeof sHigh !== "string") {
				throw new Error("SelectionVariant.INVALID_INPUT_TYPE");
			}
			if (!this._rVALIDATE_SIGN.test(sSign.toUpperCase())) {
				throw new Error("SelectionVariant.INVALID_SIGN");
			}
		
			if (!this._rVALIDATE_OPTION.test(sOption.toUpperCase())) {
				throw new Error("SelectionVariant.INVALID_OPTION");
			}
		
			if (this._mParameters[sPropertyName]) {
				throw new Error("SelectionVariant.PARAMETER_SELOPT_COLLISION");
			}
		
			if (sOption !== "BT") {
				// only "Between" has two parameters; for all others, sHigh may not be filled
				if ( (sHigh !== undefined) && (sHigh !== "") && (sHigh !== null)) {
					throw new Error("SelectionVariant.HIGH_PROVIDED_THOUGH_NOT_ALLOWED");
				}
			}
		
			// check, if there's already an entry for this property
			if (this._mSelectOptions[sPropertyName] === undefined) {
				// if not, create a new set of entries
				this._mSelectOptions[sPropertyName] = [];
			}
		
			var oEntry = {
				Sign : sSign.toUpperCase(),
				Option : sOption.toUpperCase(),
				Low : sLow
			};
		
			if (sOption === "BT") {
				oEntry.High = sHigh;
			} else {
				oEntry.High = null;	// Note this special case in the specification!
				// The specification requires that the "High" attribute is always 
				// available. In case that no high value is necessary, yet the value
				// may not be empty, but needs to be set to "null"
			}
		
			//check if it is necessary to add select option
			for (var i = 0; i < this._mSelectOptions[sPropertyName].length; i++) {
				var oExistingEntry = this._mSelectOptions[sPropertyName][i];
				if (oExistingEntry.Sign === oEntry.Sign && oExistingEntry.Option === oEntry.Option && oExistingEntry.Low === oEntry.Low && oExistingEntry.High === oEntry.High) {
					return this;
				}
			}
			this._mSelectOptions[sPropertyName].push(oEntry);

			return this;
		},

		/**
		 * removes a select option called <code>sName</code> from the selection variant
		 * @param {string} sName the name of the select option which shall be removed
		 * @returns {object} this instance to allow method chaining.
		 * @public
		 * @throws an instance of {@link sap.ui.generic.app.navigation.service.Error} in case of input errors. Valid error codes are:
		 * <table>
		 * <tr><th>Error code</th><th>Description</th></tr>
		 * <tr><td>SelectionVariant.SELOPT_WITHOUT_NAME</td><td>indicating that name of the Select Option has not been specified</td></tr>
		 * <tr><td>SelectionVariant.SELOPT_WRONG_TYPE</td><td>indicating that name of the parameter <code>sName</code> is an invalid type</td></tr>
		 * </table>
		 */
		removeSelectOption : function(sName) {
			if (typeof sName !== "string") {
				throw new Error("SelectionVariant.SELOPT_WRONG_TYPE");
			}
		
			if (sName === "") {
				throw new Error("SelectionVariant.SELOPT_WITHOUT_NAME");
			}
		
			delete this._mSelectOptions[sName];
		
			return this;
		},
	
		/**
		 * Renames a select option called <code>sNameOld</code> to <code>sNameNew</code>. If a select option or a parameter
		 * with the name <code>sNameNew</code> already exists, an error is thrown. If a select option with the name <code>sNameOld</code>
		 * does not exist, nothing is changed.
		 * @param {string} sNameOld the current name of the select option property which shall be renamed
		 * @param {string} sNameNew the new name of the select option property
		 * @returns {object} this instance to allow method chaining.
		 * @public
		 * @throws an instance of {@link sap.ui.generic.app.navigation.service.Error} in case of input errors. Valid error codes are:
		 * <table>
		 * <tr><th>Error code</th><th>Description</th></tr>
		 * <tr><td>SelectionVariant.SELOPT_WITHOUT_NAME</td><td>indicating that the name of a select option has not been specified</td></tr>
		 * <tr><td>SelectionVariant.SELOPT_WRONG_TYPE</td><td>indicating a select option has an invalid type</td></tr>
		 * <tr><td>SelectionVariant.PARAMETER_SELOPT_COLLISION</td><td>indicating that another parameter with the same new name already exists</td></tr>
		 * <tr><td>SelectionVariant.SELOPT_COLLISION</td><td>indicating that another select option with the same new name already exists</td></tr>
		 * </table>
		 */	
		renameSelectOption : function(sNameOld, sNameNew) {
			if (typeof sNameOld !== "string" || typeof sNameNew !== "string") {
				throw new Error("SelectionVariant.SELOPT_WRONG_TYPE");
			}
			if (sNameOld === "" || sNameNew === "") {
				throw new Error("SelectionVariant.SELOPT_WITHOUT_NAME");
			}
			if (this._mSelectOptions[sNameOld] !== undefined) {
				if (this._mSelectOptions[sNameNew]) {
					throw new Error("SelectionVariant.SELOPT_COLLISION");
				}
				if (this._mParameters[sNameNew]) {
					throw new Error("SelectionVariant.PARAMETER_SELOPT_COLLISION");
				}
				this._mSelectOptions[sNameNew] = this._mSelectOptions[sNameOld];
				delete this._mSelectOptions[sNameOld];
			}
			return this;
		},
	
		/**
		 * returns the set of select options/ranges available for a given property name.
		 * @param {string} sPropertyName the name of the property for which the set of select options/ranges shall be returned.
		 * @returns {array} If <code>sPropertyName</code> is an invalid name of a property or no range exists, <code>undefined</code>
		 * is returned. Otherwise, an immutable array of ranges is returned. Each entry of the array is an object, having the 
		 * following properties:
		 * <ul>
		 * <li><code>Sign</code>: the sign of the range</li>
		 * <li><code>Option</code>: the option of the range</li>
		 * <li><code>Low</code>: the low value of the range. Note that it is not possible that the value <code>null</code> is being returned.</li>
		 * <li><code>High</code>: the high value of the range; in case that this value is not necessary, <code>null</code> (but does exist)</li>
		 * </ul>
		 * For further information on the meaning of the attributes, refer to method <code>addSelectOption</code>.
		 * @public
		 * @throws an instance of {@link sap.ui.generic.app.navigation.service.Error} in case of input errors. Valid error codes are:
		 * <table>
		 * <tr><th>Error code</th><th>Description</th></tr>
		 * <tr><td>SelectionVariant.INVALID_INPUT_TYPE</td><td>indicating an input parameter has an invalid type</td></tr>
		 * <tr><td>SelectionVariant.INVALID_PROPERTY_NAME</td><td>indicating that the property name is invalid, for example, it is not specified</td></tr>
		 * </table>
		 */
		getSelectOption : function(sPropertyName) {
			if (typeof sPropertyName !== "string") {
				throw new Error("SelectionVariant.INVALID_INPUT_TYPE");
			}
			if (sPropertyName === "") {
				throw new Error("SelectionVariant.INVALID_PROPERTY_NAME");
			}
		
			var oEntries = this._mSelectOptions[sPropertyName];
			if (!oEntries) {
				return undefined;
			}
		
			return JSON.parse(JSON.stringify(oEntries)); // create an immutable clone of data to prevent obfuscation by caller.
		},
	
		/**
		 * returns the names of the properties available for this instance.
		 * @returns {array} the list of property names available for this instance.
		 * @public
		 */
		getSelectOptionsPropertyNames : function() {
			return Object.keys(this._mSelectOptions);
		},
	
		/**
		 * adds a set of Select Options to the list of Select Options for a given parameter.
		 * @param {string} sPropertyName the name of the property for which the set of select options shall be added.
		 * @param {array} aSelectOptions set of select options that shall be added.
		 * @return {object} this instance to allow method chaining.
		 * @throws an instance of {@link sap.ui.generic.app.navigation.service.Error} in case of input errors. Valid error codes are:
		 * <table>
		 * <tr><th>Error code</th><th>Description</th></tr>
		 * <tr><td>SelectionVariant.INVALID_INPUT_TYPE</td><td>indicating an input parameter has an invalid type</td></tr>
		 * </table>
		 * @public
		 */
		massAddSelectOption : function(sPropertyName, aSelectOptions){
			
			if (!jQuery.isArray(aSelectOptions)) {
				throw new Error("SelectionVariant.INVALID_INPUT_TYPE");
			}
			
			for (var i = 0; i < aSelectOptions.length; i++){
				var oSelectOption = aSelectOptions[i];
				this.addSelectOption(sPropertyName, oSelectOption.Sign, oSelectOption.Option, oSelectOption.Low, oSelectOption.High);
			}
			
			return this;
		},
		
		/**
		 * First tries to retrieve the set of select options/ranges available for <code>sName</code> as property name. If successful, 
		 * this array of selections is being returned. If it fails, an attempt to find a parameter, whose name is <code>sName</code>, is
		 * being made. If the latter succeeds, the single value is being converted to fit in an array of selections to make it 
		 * type compatible with ranges. This array then is returned. <br />
		 * If neither a select option nor a parameter could be found, <code>undefined</code> is returned.
		 * @param {string} sName the name of the attribute for which the value shall be retrieved.
		 * @returns {array} the ranges in the select options for this specified property, or a range-converted representation of a parameter is returned.
		 * If both lookups fail, <code>undefined</code> is returned. <br />
		 * The returned ranges have the format:
		 * <ul>
		 * <li><code>Sign</code>: the sign of the range</li>
		 * <li><code>Option</code>: the option of the range</li>
		 * <li><code>Low</code>: the low value of the range. Note that it is not possible that the value <code>null</code> is being returned.</li>
		 * <li><code>High</code>: the high value of the range; in case that this value is not necessary, <code>null</code> (but does exist)</li>
		 * </ul>
		 * For further information on the meaning of the attributes, refer to method {@link #.addSelectOption addSelectOption}.
		 * @public
		 * @throws an instance of {@link sap.ui.generic.app.navigation.service.Error} in case of input errors. Valid error codes are:
		 * <table>
		 * <tr><th>Error code</th><th>Description</th></tr>
		 * <tr><td>SelectionVariant.INVALID_INPUT_TYPE</td><td>indicating an input parameter has an invalid type</td></tr>
		 * <tr><td>SelectionVariant.INVALID_PROPERTY_NAME</td><td>indicating that the property name is invalid, for example, it is not specified</td></tr>
		 * </table>
		 */
		getValue : function(sName) {
			var aValue = this.getSelectOption(sName);
			if (aValue !== undefined) {
				// a range for the selection option is provided; so this is the leading one
				return aValue;
			}
		
			var sParamValue = this.getParameter(sName);
			if (sParamValue !== undefined) {
				// a parameter value has been provided; we need to convert it to the range format
				aValue = [
					{
						Sign : "I",
						Option : "EQ",
						Low : sParamValue,
						High : null
					}
				];
				return aValue;
			}
		
			return undefined;
		},
	
		
		/**
		 * returns <code>true</code> in case that this SelectionVariant does neither contain parameters
		 * nor ranges.
		 * @return {boolean} <code>true</code> in case that there are no parameters and no select options available in
		 * the selection variant; <code>false</code> otherwise.
		 * @public
		 */
		isEmpty : function() {
			return this.getParameterNames().length === 0 && this.getSelectOptionsPropertyNames().length === 0;
		},
	
		/**
		 * returns the external representation of the selection variant as JSON object
		 * @return {object} the external representation of this instance as a JSON object
		 * @public
		 */
		toJSONObject : function() {
			var oExternalSelectionVariant = {
				Version : { // Version attributes are not part of the official specification, 
					Major : "1", // but could be helpful later for implementing a proper lifecycle/interoperability
					Minor : "0",
					Patch : "0"
				},
				SelectionVariantID : this._sId
			};
		
			if (this._sParameterCtxUrl) {
				oExternalSelectionVariant.ParameterContextUrl = this._sParameterCtxUrl;
			}
		
			if (this._sFilterCtxUrl) {
				oExternalSelectionVariant.FilterContextUrl = this._sFilterCtxUrl;
			}
		
			if (this._sText) {
				oExternalSelectionVariant.Text = this._sText;
			} else {
				oExternalSelectionVariant.Text = "Selection Variant with ID " + this._sId;
			}
		
			this._determineODataFilterExpression(oExternalSelectionVariant);
		
			this._serializeParameters(oExternalSelectionVariant);
			this._serializeSelectOptions(oExternalSelectionVariant);
			
			return oExternalSelectionVariant;
		},
		
		/**
		 * serializes this instance into a JSON-formatted string
		 * @return {string} the JSON-formatted representation of this instance in stringified format
		 * @public
		 */
		toJSONString : function() {
			return JSON.stringify(this.toJSONObject());
		},
	
		_determineODataFilterExpression : function(oExternalSelectionVariant) {
			// TODO - specification does not indicate what is expected here in detail
			oExternalSelectionVariant.ODataFilterExpression = ""; // not supported yet - it's allowed to be optional
		},
	
		_serializeParameters : function(oExternalSelectionVariant) {
		
			if (this._mParameters.length === 0) {
				return;
			}
		
			// Note: Parameters section is optional (see specification section 2.4.2.1)
			oExternalSelectionVariant.Parameters = [];
		
			jQuery.each(this._mParameters, function(sParameterName, sParameterValue) {
				var oParObject = {
					PropertyName : sParameterName,
					PropertyValue : sParameterValue
				};
				oExternalSelectionVariant.Parameters.push(oParObject);
			});
		},
	
		_serializeSelectOptions : function(oExternalSelectionVariant) {
		
			if (this._mSelectOptions.length === 0) {
				return;
			}
		
			oExternalSelectionVariant.SelectOptions = [];
		
			jQuery.each(this._mSelectOptions, function(sPropertyName, aEntries) {
				var oSelectOption = {
					PropertyName : sPropertyName,
					Ranges : aEntries
				};
			
				oExternalSelectionVariant.SelectOptions.push(oSelectOption);
			});
		},

		_parseFromString : function(sJSONString) {
			if (sJSONString === undefined) {
				throw new Error("SelectionVariant.UNABLE_TO_PARSE_INPUT");
			}
		
			if (typeof sJSONString !== "string") {
				throw new Error("SelectionVariant.INVALID_INPUT_TYPE");
			}
		
			var oInput = JSON.parse(sJSONString);
			// the input needs to be an JSON string by specification
			
			this._parseFromObject(oInput);
		}, 
		
		_parseFromObject : function(oInput) {
		
			if (oInput.SelectionVariantID === undefined) {
				// Do not throw an error, but only write a warning into the log.
				// The SelectionVariantID is mandatory according to the specification document version 1.0, 
				// but this document is not a universally valid standard.
				// It is said that the "implementation of the SmartFilterBar" may supersede the specification.
				// Thus, also allow an initial SelectionVariantID.
	//		throw new sap.ui.generic.app.navigation.service.Error("SelectionVariant.INPUT_DOES_NOT_CONTAIN_SELECTIONVARIANT_ID");
				jQuery.sap.log.warning("SelectionVariantID is not defined");
				oInput.SelectionVariantID = "";
			}

			this.setID(oInput.SelectionVariantID);
		
			if (oInput.ParameterContextUrl !== undefined && oInput.ParameterContextUrl !== "") {
				this.setParameterContextUrl(oInput.ParameterContextUrl);
			}
		
			if (oInput.FilterContextUrl !== undefined && oInput.FilterContextUrl !== "") {
				this.setFilterContextUrl(oInput.FilterContextUrl);
			}
		
			if (oInput.Text !== undefined) {
				this.setText(oInput.Text);
			}
		
			// note that ODataFilterExpression is ignored right now - not supported yet!
		
			if (oInput.Parameters) {
				this._parseFromStringParameters(oInput.Parameters);
			}
		
			if (oInput.SelectOptions) {
				this._parseFromStringSelectOptions(oInput.SelectOptions);
			}
		},
	
		_parseFromStringParameters : function(aParameters) {
			jQuery.each(aParameters, jQuery.proxy(function(iIdx, oEntry) {
				this.addParameter(oEntry.PropertyName, oEntry.PropertyValue);
			}, this));
		},
	
		_parseFromStringSelectOptions: function(aSelectOptions) {
			jQuery.each(aSelectOptions, jQuery.proxy(function(iIdx, oSelectOption) {
			
				if (!oSelectOption.Ranges) {
					jQuery.sap.log.warning("Select Option object does not contain a Ranges entry; ignoring entry");
					return true; // "continue"
				}
			
				if (!jQuery.isArray(oSelectOption.Ranges)) {
					throw new Error("SelectionVariant.SELECT_OPTION_RANGES_NOT_ARRAY");
				}
			
				jQuery.each(oSelectOption.Ranges, jQuery.proxy(function(iIdx2, oRange) {
					this.addSelectOption(oSelectOption.PropertyName, oRange.Sign, oRange.Option, oRange.Low, oRange.High);
				}, this));
			}, this));
		}
	});

	return SelectionVariant;

});

}; // end of sap/ui/generic/app/navigation/service/SelectionVariant.js
if ( !jQuery.sap.isDeclared('sap.ui.generic.app.util.DraftUtil') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.generic.app.util.DraftUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/generic/app/util/DraftUtil",[	"jquery.sap.global" ], function(jQuery) { // EXC_JSHINT_002
	"use strict";

	/**
	 * Constructor for generic utility for draft instance handling.
	 * @author SAP SE
	 * @version 1.32.7
	 * @since 1.30.0
	 * @alias sap.ui.generic.app.util.DraftUtil
	 * @private
	 */
	var DraftUtil = function() { // EXC_JSLINT_021

	};
	
	/**
	 * Checks if the current entity is an active instance or not.
	 * 
	 * @param {object} oEntity The given entity 
	 * @returns {boolean} <code>true</code> if the given entity is active, <code>false</code> otherwise
	 * @public
	 */
	DraftUtil.prototype.isActiveEntity = function(oEntity) {
		return oEntity.IsActiveEntity;
	};
	
	/**
	 * Checks if the current entity has a corresponding draft entity.
	 * 
	 * @param {object} oEntity The given entity 
	 * @returns {boolean} <code>true</code> if the given entity has a corresponding draft entity, <code>false</code> otherwise
	 * @public
	 */
	DraftUtil.prototype.hasDraftEntity = function(oEntity) {
		return oEntity.HasDraftEntity;
	};
	
	/**
	 * Checks if the current entity has a corresponding active entity.
	 * 
	 * @param {object} oEntity The given entity
	 * @returns {boolean} <code>true</code> if the given entity a corresponding active entity, <code>false</code> otherwise 
	 * @public
	 */
	DraftUtil.prototype.hasActiveEntity = function(oEntity) {
		return oEntity.HasActiveEntity;
	};	

	/**
	 * Frees all resources claimed during the life-time of this instance.
	 * 
	 * @private
	 */
	DraftUtil.prototype.destroy = function() { // EXC_JSLINT_021
		
	};
	
	return DraftUtil;

}, /* bExport= */true);

}; // end of sap/ui/generic/app/util/DraftUtil.js
if ( !jQuery.sap.isDeclared('sap.ui.generic.app.util.ModelUtil') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.generic.app.util.ModelUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/generic/app/util/ModelUtil",[	"jquery.sap.global" ], function(jQuery) { // EXC_JSHINT_002 //EXC_JSHINT_034 //EXC_JSHINT_037
	"use strict";

	/**
	 * Constructor for generic utility for model access.
	 * 
	 * @private
	 * @class 
	 * @classdesc
	 * Generic utility for model access.
	 * @author SAP SE
	 * @version 1.32.7
	 * @since 1.30.0
	 * @alias sap.ui.generic.app.util.ModelUtil
	 * @param {sap.ui.model.odata.ODataModel} oModel The OData model currently used
	 */
	var ModelUtil = function(oModel) { // EXC_JSLINT_021
		this._oModel = oModel;
	};
	
	/**
	 * Converts response data into a binding context.
	 * 
	 * @param {object} oResponseData Response data.
	 * @returns {object} Binding context, can be <code>null</code>.
	 * @public
	 */
	ModelUtil.prototype.getContextFromResponse = function(oResponseData) {
		var sPath = "/" + this._oModel.getKey(oResponseData);
		return this._oModel.getContext(sPath);
	};
	
	/**
	 * Calculates the name of an OData entity set from the given binding context.
	 * 
	 * @param {sap.ui.model.Context} oContext The given binding context
	 * @returns {string} The name of the entity set, can be <code>null</code>.
	 * @throws {Error} If no context is handed over as input parameter.
	 * @public
	 */
	ModelUtil.getEntitySetFromContext = function(oContext) {
		var sPath, sEntitySet;

		if (!oContext) {
			throw new Error("No context");
		}
		
		if (oContext && oContext.getPath) {
			sPath = oContext.getPath().split("(")[0];
			sEntitySet = sPath.substring(1);
		}

		return sEntitySet;
	};
	
	/**
	 * Checks for client-side messages, e.g. validation errors.
	 * 
	 * @returns {boolean} <code>true</code>, if client-side messages exist, <code>false</code> otherwise. 
	 * @public
	 */
	ModelUtil.prototype.hasClientMessages = function() {
		var oManager, oModel, aMessages, oMessage, i = 0, len = 0;
		
		oManager = sap.ui.getCore().getMessageManager();
		oModel = oManager.getMessageModel();
		aMessages = oModel.getData();
		
		if (aMessages) {
			len = aMessages.length;
		}
		
		for (i = 0; i < len; i++) {
			oMessage = aMessages[i];
			
			if (oMessage.processor.getMetadata()._sClassName === "sap.ui.core.message.ControlMessageProcessor") {
				return true;
			}
		}
		
		return false;
	};
	
	/**
	 * Frees all resources claimed during the life-time of this instance.
	 * 
	 * @public
	 */
	ModelUtil.prototype.destroy = function() { // EXC_JSLINT_021
		this._oModel = null;
	};
	
	return ModelUtil;

}, /* bExport= */true);

}; // end of sap/ui/generic/app/util/ModelUtil.js
if ( !jQuery.sap.isDeclared('sap.ui.generic.app.util.Queue') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.generic.app.util.Queue'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/generic/app/util/Queue",[	"jquery.sap.global" ], function(jQuery) { // EXC_JSHINT_002
	"use strict";

	/* global Promise */
	
	/**
	 * Creates a new queue instance.
	 * 
	 * @private
	 * @class
	 * @classdesc Asynchronous queue for JavaScript functions.
	 * @author SAP SE
	 * @version 1.32.7
	 * @since 1.30.0
	 * @alias sap.ui.generic.app.util.Queue
	 * @param {integer} iMaxLength Maximum queue length
	 */
	var Queue = function(iMaxLength) { // EXC_JSLINT_021
		this._iMaxLength = iMaxLength;
		this._aQueue = [];
	};

	/**
	 * Removes the first item from the queue and executes the next item on the queue.
	 * 
	 * @private
	 */
	Queue.prototype._execNext = function() {
		var oNext;

		this._aQueue.shift();
		oNext = this._aQueue[0];

		if (oNext) {
			this._exec(oNext);
		}
	};

	/**
	 * Executes the given item and defers execution of the next item, if it exists.
	 * 
	 * @param {object} oItem The item to be executed
	 * @private
	 */
	Queue.prototype._exec = function(oItem) {
		var that = this, fSuccess = function() {
			that._execNext();
		};

		oItem.jqdeferred.resolve();
		oItem.wait.then(function() {
			// wait until other handlers have executed.
			oItem.wait.then(fSuccess);
		}, jQuery.proxy(that._cancel, that));
	};

	/**
	 * Enqueues a function. If the queue has reached its maximum capacity, the function is rejected.
	 * 
	 * @param {function} fFunc The function to be enqueued
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution of the enqueued item
	 * @public
	 */
	Queue.prototype.enqueue = function(fFunc) {
		var oItem = {
			fn: fFunc
		};
		
		// build up the item:
		// use jQuery.Deferred to create a pending promise.
		oItem.jqdeferred = jQuery.Deferred();
		oItem.defer = new Promise(function (fulfill, reject) {
			oItem.jqdeferred.then(fulfill, reject);
		});
		
		// enable consumers to chain to the executed function:
		// function also returns a promise:
		// so implicitly consumers chain to the resolved or rejected promise
		// returned by the function.
		oItem.wait = oItem.defer.then(fFunc);
		
		if (this._aQueue.length >= this._iMaxLength) {
			oItem.jqdeferred.reject(new Error("Queue overflow: " + this._aQueue.length));
		} else {
			this._aQueue.push(oItem);

			// if only one item is on the queue, execute it immediately.
			if (this._aQueue.length === 1) {
				this._exec(oItem);
			}
		}

		return oItem.wait.then();
	};

	/**
	 * Cancels the execution of the current queue by rejecting each enqueued item. Additionally all existing items are removed from the queue.
	 * 
	 * @private
	 */
	Queue.prototype._cancel = function() {
		var oItem, i, len = this._aQueue.length;
		
		for (i = 0; i < len; i++) {
			oItem = this._aQueue[i];
			oItem.jqdeferred.reject(new Error("Queue cancellation"));
		}

		this._aQueue = [];
	};

	/**
	 * Frees all resources claimed during the life-time of this instance.
	 * 
	 * @public
	 */
	Queue.prototype.destroy = function() { // EXC_JSLINT_021
		this._aQueue = [];
	};

	return Queue;

}, true);

}; // end of sap/ui/generic/app/util/Queue.js
if ( !jQuery.sap.isDeclared('sap.ui.generic.app.navigation.service.NavigationHandler') ) {
/*!
 * @copyright@
 */
jQuery.sap.declare('sap.ui.generic.app.navigation.service.NavigationHandler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.resource.ResourceModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/generic/app/navigation/service/NavigationHandler",["./NavError","./SelectionVariant",  "sap/ui/base/Object", "sap/ui/model/resource/ResourceModel", "sap/ui/core/UIComponent", "jquery.sap.global"],
	function(Error, SelectionVariant, BaseObject, ResourceModel, UIComponent, jQuery) {
	/* Note that "sap/ca/ui/message/message" has been requested as dependency.
	 * However, sap/ca/ui/message/message.js creates the declarations at sap.ca.ui.message and not at sap.ca.ui.message.message. Thus the AMD
	 * loader goes nuts and returns a null reference in variable message.
	 * Therefore, below we need to provide a reference to global scope and may not make use of local scope variable message.
	 */
	
	"use strict";

	/**
	 * @class
	 * Creates a new NavigationHandler by providing the necessary environment.
	 * 
	 * Note that this class requires that the UShell Navigation Service API (CrossApplicationNavigation) is available
	 * and initialized.
	 * @extends sap.ui.base.Object
	 * @constructor
	 * @public
	 * @param {object} oController UI5 controller (which contains Router and Component). Typically this is the main controller of your application.
	 * E.g. a subclass of the BaseFullscreenController, if scaffolding is used.
	 * @param {string} [sParamHandlingMode=SelVarWins] Mode that should be used to handle conflicts at merging URL parameters and SelectionVariant, see {@link sap.ui.generic.app.navigation.service.ParamHandlingMode}
	 * @throws an instance of {@link sap.ui.generic.app.navigation.service.Error} in case of input errors. Valid error codes are:
	 * <table>
	 * <tr><th align="left">Error code</th><th align="left">Description</th></tr>
	 * <tr><td>NavigationHandler.INVALID_INPUT</td><td>indicating that the input parameter is invalid</td></tr>
	 * </table>
	 * @alias sap.ui.generic.app.navigation.service.NavigationHandler
	 */
	var NavigationHandler = BaseObject.extend("sap.ui.generic.app.navigation.service.NavigationHandler", /** @lends sap.ui.generic.app.navigation.service.NavigationHandler */ {
		metadata : {
			publicMethods : ["navigate","parseNavigation","storeInnerAppState","openSmartLinkPopover","mixAttributesAndSelectionVariant"]
		},
	
		constructor: function(oController, sParamHandlingMode){
			
			if (typeof oController === "undefined" || typeof oController.getOwnerComponent !== "function"){
				throw new Error("NavigationHandler.INVALID_INPUT");
			}
			
			this.oRouter = this._getRouter(oController);
			this.oComponent = oController.getOwnerComponent();
			
			if (typeof this.oRouter === "undefined" || typeof this.oComponent === "undefined" || typeof this.oComponent.getComponentData !== "function" ) {
				throw new Error("NavigationHandler.INVALID_INPUT");
			}
		
			try {
				this.oCrossAppNavService = sap.ushell.Container.getService("CrossApplicationNavigation");
			} catch (ex) {
				jQuery.sap.log.error("NavigationHandler: UShell service API for CrossApplicationNavigation is not available.");
			}
			this.IAPP_STATE = "sap-iapp-state";
			this.sDefaultedParamProp = "sap-ushell-defaultedParameterNames";
			this.sSAPSystemProp = "sap-system";
			this._oLastSavedInnerAppData = { sAppStateKey: "" , oAppData: {}, iCacheHit: 0, iCacheMiss: 0 };
			
			/*
			 * There exists a generation of "old" sap-iapp-states which are based on the following
			 * URL schema:
			 * 
			 * #SemObj-action&/route/sap-iapp-state=ABC12345678
			 * 
			 * The new URL schema is:
			 * 
			 * #SemObj-action&/route?sap-iapp-state=ABC12345678
			 * 
			 * (mind the difference between / and ? above), i.e. the sap-iapp-state has become a
			 * parameter of the query parameter section in the AppHash string.
			 * Yet, this tool shall be able to deal even with old sap-iapp-states. Therefore, we
			 * use two Regular Expressions (rIAppStateOld and rIAppStateOldAtStart) as defined below
			 * to scan for these old variants.
			 * The new variant is being scanned using rIAppStateNew as Regular Expression search string.
			 * 
			 * Compatibility is centrally ensured by the two methods
			 *    _getInnerAppStateKey
			 * and
			 *    _replaceInnerAppStateKey
			 * (see below). Never use these RegExp in a method on your own, as it typically indicates that 
			 * you will fall into the compatibility trap!
			 */
			// Warning! Do not use GLOBAL flags here; RegExp in GLOBAL mode store the lastIndex value
			// Therefore, repeated calls to the RegExp will then only start beginning with that stored
			// lastIndex. Thus, multiple calls therefore could yield strange results.
			// Moreover, there shall only be exactly one IAPP_STATE per RegExp in an AppHash.
			// Therefore, GLOBAL search should be superfluous.
			this._rIAppStateOld = new RegExp("/" + this.IAPP_STATE + "=([^/?]+)");
			this._rIAppStateOldAtStart = new RegExp("^" + this.IAPP_STATE + "=([^/?]+)");
			
			this._rIAppStateNew = new RegExp("[\?&]" + this.IAPP_STATE + "=([^&]+)");
			/* 
			 * Regular Expression in words:
			 * Search for something that either stars with ? or &, followed by the term
			 * "sap-iapp-state". That one is followed by an equal sign (=). 
			 * The stuff that is after the equal sign forms the first regexp group.
			 * This group consists of at least one (or arbitrary many) characters, as long
			 * as it is not an ampersand sign (&). 
			 * Characters after such an ampersand would be ignored and do not belong to the group.
			 * Alternatively, the string also may end.
			 */

			if (sParamHandlingMode === sap.ui.generic.app.navigation.service.ParamHandlingMode.URLParamWins || sParamHandlingMode === sap.ui.generic.app.navigation.service.ParamHandlingMode.InsertInSelOpt) {
				this.sParamHandlingMode = sParamHandlingMode;
			} else {
				this.sParamHandlingMode = sap.ui.generic.app.navigation.service.ParamHandlingMode.SelVarWins; //default
			}
		},
	
	
		/**
		 * retrieves the reference to the router object for navigation for this given Controller
		 * @param {object} oController the reference to the Controller for which the Router instance shall be determined.
		 * @returns {object} the Router for the given Controller
		 * @private
		 * @desc used especially for mocking during QUnit testing!
		 */
		_getRouter : function(oController) {
			return UIComponent.getRouterFor(oController);
		},

		/**
		 * Triggers a cross app navigation after saving the inner and the cross app states 
		 * @param {string} sSemanticObject name of the semantic object of the target app
		 * @param {string} sActionName name of the action of the target app
		 * @param {object | string } [vNavigationParameters] Navigation parameters as an object with key/value pairs or as a stringified JSON object
		 * @param {object} [oInnerAppData] Object for storing current state of the app
		 * @param {string} [oInnerAppData.selectionVariant] stringified JSON object as returned e.g. from the SmartFilterBar's getDataSuiteFormat()
		 * @param {string} [oInnerAppData.tableVariantId] id of the SmartTable variant
		 * @param {object} [oInnerAppData.customData] Object that can be used to store arbitrary data
		 * @param {function} [fnOnError] callback which is being called in case that during navigating an error occurs<br>
		 * <b>Parameters:</b>
		 * <table>
		 * <tr><td align="center">{object}</td><td><b>oError</b></td><td>Error object (instance of {@link sap.ui.generic.app.navigation.service.Error}) which describes
		 * which kind of error occurred</td>
		 * <tr><td align="center">{string}</td><td><b>oError.errorCode</b></td><td>code to identify the error</td>
		 * <tr><td align="center">{string}</td><td><b>oError.type</b></td><td>severity of the error (info/warning/error)</td>
		 * <tr><td align="center">{array}</td><td><b>oError.params</b></td><td>an array of objects (typically: strings) which describes additional value parameters
		 * which are necessary for generating the message</td>
		 * </table>
		 * @public 
		 * @example
		 * <code>
		 * var oNavigationHandler = new sap.ui.generic.app.navigation.service.NavigationHandler(oController);
		 * var sSemanticObject = "SalesOrder";
		 * var sActionName = "create";
		 * 
		 * //simple parameters as Object
		 * var vNavigationParameters = {
		 * 		CompanyCode : "0001",
		 * 		Customer : "C0001"
		 * };
		 * 
		 * //or as selection variant
		 * var oSelectionVariant = new sap.ui.generic.app.navigation.service.SelectionVariant();
		 * oSelectionVariant.addSelectOption("CompanyCode", "I", "EQ", "0001");
		 * oSelectionVariant.addSelectOption("Customer", "I", "EQ", "C0001");
		 * vNavigationParameters = oSelectionVariant.toJSONString(); 
		 * 
		 * //or directly from SmartFilterBar
		 * vNavigationParameters = oSmartFilterBar.getDataSuiteFormat();
		 * 
		 * //app state for back navigation
		 * var oInnerAppData = {
		 * 		selectionVariant : oSmartFilterBar.getDataSuiteFormat(),
		 * 		tableVariantId : oSmartTable.getCurrentVariantId(),
		 * 		customData : oMyCustomData
		 * };
		 * 
		 * // callback function in case of errors
		 * var fnOnError = function(oError){
		 * 		var oi18n = oController.getView().getModel("i18n").getResourceBundle();
		 * 		oError.setUIText({oi18n : oi18n, sTextKey : "OUTBOUND_NAV_ERROR"});
		 * 		oError.showMessageBox();
		 * };
		 * 
		 * oNavigationHandler.navigate(sSemanticObject, sActionName, vNavigationParameters, oInnerAppData, fnOnError);
		 * </code>
		 */
		navigate : function(sSemanticObject, sActionName, vNavigationParameters, oInnerAppData, fnOnError) {
	
			var sSelectionVariant, mParameters;
		
			//for navigation we need URL parameters (legacy navigation) and sap-xapp-state, therefore we need to create the missing one from the passed one
			if (typeof vNavigationParameters === "string") {
				sSelectionVariant = vNavigationParameters;
				mParameters = this._getURLParametersFromSelectionVariant(sSelectionVariant);
			} else if (typeof vNavigationParameters === "object") {
				mParameters = vNavigationParameters;
				var oEnrichedSelVar = this._splitInboundNavigationParameters(new SelectionVariant(), mParameters, []).oNavigationSelVar;
				sSelectionVariant = oEnrichedSelVar.toJSONString();
			} else {
				throw new Error("NavigationHandler.INVALID_INPUT");
			}

			var oNavHandler = this;
			var oNavArguments = {
					target: {
						semanticObject: sSemanticObject,
						action: sActionName
					},
					params: mParameters || {}
			};
			var sIntent = oNavHandler.oCrossAppNavService.hrefForExternal(oNavArguments, oNavHandler.oComponent);
			var oSupportedPromise = oNavHandler.oCrossAppNavService.isIntentSupported([sIntent]);
		
			oSupportedPromise.done(function(oTargets){
	
				if (oTargets[sIntent].supported){
				
					var oStorePromise = oNavHandler.storeInnerAppState(oInnerAppData);
					oStorePromise.done(function(){
						var fnOnContainerSave = function(sAppStateKey){
							//set the app state key in addition to the navigation arguments
							oNavArguments.appStateKey = sAppStateKey;
							// Remark:
							// The Cross App Service takes care of encoding parameter keys and values. Example:
							// mParams = { "$@%" : "&/=" } results in the URL parameter %2524%2540%2525=%2526%252F%253D
							// Note the double encoding, this is correct.
						
							// toExternal sets sap-xapp-state in the URL if appStateKey is provided in oNavArguments
							oNavHandler.oCrossAppNavService.toExternal(oNavArguments, oNavHandler.oComponent); //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>OUT
						};
					
						oNavHandler._saveAppState({selectionVariant:sSelectionVariant}, fnOnContainerSave, fnOnError);
					});
				
					if (fnOnError) {
						oStorePromise.fail(function(oError){ 
							fnOnError(oError);
						});
					}
				
				} else {
					// intent is not supported
					if (fnOnError) {
						var sErrorCode = "NavigationHandler.isIntentSupported.notSupported";
						//var mUItext = {oi18n: oNavHandler.oi18n, sTextKey: "INTENT_NOT_SUPPORTED", aParams: [sSemanticObject,sActionName]};
						var oError = new Error(sErrorCode);
						fnOnError(oError);
					}
				}
			});
		
			if (fnOnError) {
				oSupportedPromise.fail(function(){
					// technical error: could not determine if intent is supported
					var oError = oNavHandler._createTechnicalError("NavigationHandler.isIntentSupported.failed");
					fnOnError(oError);
				});
			}
		},
	
		/**
		 * Parses the incoming URL and gives back a promise. If this method detects a back navigation, the inner app state is returned
		 * in the resolved promise. Otherwise startup parameters will be merged into the app state provided by cross app navigation and a combined
		 * app state will be returned. The conflict resolution can be influenced with sParamHandlingMode set in the constructor.
		 * @returns {object} a Promise object to observe when all actions of the function have finished. On success the extracted app state,
		 * the startup parameters, and the type of navigation are returned, see also above example. The app state is an object which contains
		 * the following information:
		 * <ul>
		 * <li><code>oAppData.oSelectionVariant</code>: an instance of {@link sap.ui.generic.app.navigation.service.SelectionVariant} containing only
		 * parameters/select options which are related to a navigation</li>
		 * <li><code>oAppData.selectionVariant</code>: the above navigation related selection variant as a JSON-formatted string</li>
		 * <li><code>oAppData.bNavSelVarHasDefaultsOnly</code>: a boolean flag which indicates whether only defaulted parameters and
		 * <li><code>oAppData.oDefaultedSelectionVariant</code>: an instance of {@link sap.ui.generic.app.navigation.service.SelectionVariant} containing
		 * only the parameters/select options which are set by user defaults</li>
		 * <li><code>oAppData.hasOnlyDefaultParameters</code>: a boolean flag which indicates whether only defaulted parameters and
		 * no navigation parameters are present</li>
		 * </ul>
		 * If the navigation related selection variant would be empty, it is replaced by a copy of the defaulted selection variant.<br>
		 * On error an error object of type {@link sap.ui.generic.app.navigation.service.Error}, URL parameters (if available) and the type of
		 * navigation are returned.<br>
		 * The navigation type is an enumeration type of kind {@link sap.ui.generic.app.navigation.service.NavType} (possible values are initial,
		 * URLParams, xAppState, and iAppState). <b>Note:</b> If the navigation type is {@link sap.ui.generic.app.navigation.service.NavType.initial}
		 * oAppData is an empty object!
		 * @public
		 * @example
		 * <code>
		 * var oNavigationHandler = new sap.ui.generic.app.navigation.service.NavigationHandler(oController);
		 * var oParseNavigationPromise = oNavigationHandler.parseNavigation();
		 * 
		 * oParseNavigationPromise.done(function(oAppData, oStartupParameters, sNavType){
		 * 		oSmartFilterBar.setDataSuiteFormat(oAppData.selectionVariant);
		 * 		// oAppData.oSelectionVariant can be used to manipulate the selection variant
		 * 		// oAppData.oDefaultedSelectionVariant contains the parameters which are set by user defaults
		 * 		// oAppData.bNavSelVarHasDefaultsOnly indicates whether only defaulted parameters and no navigation parameters are present
		 * 	
		 * });
		 * 
		 * oParseNavigationPromise.fail(function(oError, oURLParameters, sNavType){
		 * 		// if e.g. the xapp state could not be loaded, nevertheless there may be URL parameters available 
		 * 		var oi18n = oController.getView().getModel("i18n").getResourceBundle();
		 * 		oError.setUIText({oi18n : oi18n, sTextKey : "INBOUND_NAV_ERROR"});
		 * 		oError.showMessageBox();
		 * });
		 * </code>
		 */	
		parseNavigation: function(){
			
			var sAppHash = this.oRouter.oHashChanger.getHash();
			/* use .getHash() here instead of .getAppHash() to also be able dealing with
			 * environments where only SAPUI5 is loaded and the UShell is not initialized properly.
			 */
			var sIAppState = this._getInnerAppStateKey(sAppHash);
			
			var oComponentData = this.oComponent.getComponentData();
			/*
			 * There are some race conditions where the oComponentData may not be set,
			 * for example in case the UShell was not initialized properly. 
			 * To make sure that we do not dump here with an exception, we
			 * take this special error handling behavior:
			 */
			if (oComponentData === undefined) {
				jQuery.sap.log.warning("The navigation Component's data was not set properly; assuming instead that no parameters are provided.");
				oComponentData = {};
			}
			
			// Remark:
			// The startup parameters are already decoded. Example:
			// The original URL parameter %2524%2540%2525=%2526%252F%253D results in oStartupParameters = { "$@%" : "&/=" }
			// Note the double encoding in the URL, this is correct. An URL parameter like xyz=%25 causes an "URI malformed" error.
			// If the decoded value should be e.g. "%25", the parameter in the URL needs to be: xyz=%252525
			var oStartupParameters = oComponentData.startupParameters;
			
			var aDefaultedParameters = [];
			if (oStartupParameters && oStartupParameters[this.sDefaultedParamProp] && oStartupParameters[this.sDefaultedParamProp].length > 0) {
				aDefaultedParameters = JSON.parse(oStartupParameters[this.sDefaultedParamProp][0]);
			}
			
			var oMyDeferred = jQuery.Deferred();
			var oNavHandler = this;
		
			if (sIAppState) {
				// inner app state is available in the AppHash (back navigation); extract the parameter value
				this._loadAppState(sIAppState,oMyDeferred);
			
			} else {
			
				// no back navigation
				var bIsXappStateNavigation = oComponentData["sap-xapp-state"] !== undefined;
				if (bIsXappStateNavigation) {
					// inner app state was not found in the AppHash, but xapp state => try to read the xapp state
					var oStartupPromise = this.oCrossAppNavService.getStartupAppState(this.oComponent);
				
					oStartupPromise.done(
						function(oAppState) {
							//get app state from sap-xapp-state,
							//create a copy, not only a reference, because we want to modify the object
							var oAppStateData = oAppState.getData();
							if (oAppStateData){
								try {
									oAppStateData = JSON.parse(JSON.stringify(oAppStateData));
								} catch (x) {
									var oError = oNavHandler._createTechnicalError("NavigationHandler.AppStateData.parseError");
									oMyDeferred.reject(oError, oStartupParameters, sap.ui.generic.app.navigation.service.NavType.xAppState);
									return oMyDeferred.promise();
								}
							}
							
							//add URL parameters if available
							if (!jQuery.isEmptyObject(oStartupParameters)) {
							
								if (oAppStateData) {
									// sap-xapp-state navigation
									
									//parameters in xapp-state have to be removed from defaulted list 
									var oSelVar = new SelectionVariant(oAppStateData.selectionVariant);
									var i = aDefaultedParameters.length;
									while (i--){
										if (oSelVar.getValue(aDefaultedParameters[i])) {
											aDefaultedParameters.splice(i,1);
										}
									}
									var oSelVars = oNavHandler._splitInboundNavigationParameters(oSelVar, oStartupParameters, aDefaultedParameters);
									oAppStateData.selectionVariant = oSelVars.oNavigationSelVar.toJSONString();
									oAppStateData.oSelectionVariant = oSelVars.oNavigationSelVar;
									oAppStateData.oDefaultedSelectionVariant = oSelVars.oDefaultedSelVar;
									oAppStateData.bNavSelVarHasDefaultsOnly = oSelVars.bNavSelVarHasDefaultsOnly;
									oMyDeferred.resolve(oAppStateData, oStartupParameters, sap.ui.generic.app.navigation.service.NavType.xAppState);
								} else {
									// sap-xapp-state navigation, but ID has already expired, but URL parameters available
									oError = oNavHandler._createTechnicalError("NavigationHandler.getDataFromAppState.failed");
									oMyDeferred.reject(oError, oStartupParameters, sap.ui.generic.app.navigation.service.NavType.xAppState);
								}
							} else {
								// there are no URL parameters
								
								if (oAppStateData) {
									// ??!??! broken sender: navigation with sap-xapp-state, but no URL parameters
									jQuery.sap.log.warning("Broken Sender navigation via xapp-state detected; sender did not provide legacy URL parameters");
									
									oAppStateData.selectionVariant = oNavHandler._ensureSelectionVariantFormatString(oAppStateData.selectionVariant);
									oAppStateData.oSelectionVariant = new SelectionVariant(oAppStateData.selectionVariant);
									oAppStateData.oDefaultedSelectionVariant = new SelectionVariant();
									oAppStateData.bNavSelVarHasDefaultsOnly = false;
									oMyDeferred.resolve(oAppStateData, {}, sap.ui.generic.app.navigation.service.NavType.xAppState);
								} else {
									// sap-xapp-state navigation by broken sender, but ID has already expired
									jQuery.sap.log.warning("Broken Sender navigation via xapp-state detected; sender did not provide legacy URL parameters");
									oError = oNavHandler._createTechnicalError("NavigationHandler.getDataFromAppState.failed");
									oMyDeferred.reject(oError, {}, sap.ui.generic.app.navigation.service.NavType.xAppState);
								}
							}
						}
					);
					oStartupPromise.fail(function(){
						var oError = oNavHandler._createTechnicalError("NavigationHandler.getStartupState.failed");
						oMyDeferred.reject(oError, {}, sap.ui.generic.app.navigation.service.NavType.xAppState);
						}
					);
				
				} else {
					// no sap-xapp-state
					if (oStartupParameters) {
						// standard URL navigation
						var oSelVars = oNavHandler._splitInboundNavigationParameters(new SelectionVariant(), oStartupParameters, aDefaultedParameters);
						if (oSelVars.oNavigationSelVar.isEmpty() && oSelVars.oDefaultedSelVar.isEmpty()){
							// Startup parameters contain only technical parameters (SAP system) which were filtered out.
							// oNavigationSelVar and oDefaultedSelVar are empty.
							// Thus, concider this type of navigation as an initial navigation.
							oMyDeferred.resolve( {}, oStartupParameters, sap.ui.generic.app.navigation.service.NavType.initial);
						} else {
							var oAppStateData = {};
							oAppStateData.selectionVariant = oSelVars.oNavigationSelVar.toJSONString();
							oAppStateData.oSelectionVariant = oSelVars.oNavigationSelVar;
							oAppStateData.oDefaultedSelectionVariant = oSelVars.oDefaultedSelVar;
							oAppStateData.bNavSelVarHasDefaultsOnly = oSelVars.bNavSelVarHasDefaultsOnly;
							oMyDeferred.resolve(oAppStateData, oStartupParameters, sap.ui.generic.app.navigation.service.NavType.URLParams);
						}
					} else {
						// initial navigation
						oMyDeferred.resolve( {}, {}, sap.ui.generic.app.navigation.service.NavType.initial);
					}
				}
			}
		
			return oMyDeferred.promise();
		},
	
	
		/**
		 * Splits the parameters provided during inbound navigation and separates the contextual information
		 * between defaulted parameter values and navigation parameters
		 * @param {object} oSelectionVariant Instance of {@link sap.ui.generic.app.navigation.service.SelectionVariant} containing 
		 * navigation data of the app
		 * @param {object} oStartupParameters Object containing startup parameters of the app (derived from the component)
		 * @param {array} aDefaultedParameters Array containing defaulted parameter names
		 * 
		 * @returns {object} Object containing two SelectionVariants, one for navigation (oNavigationSelVar) and one for 
		 * defaulted startup parameters (oDefaultedSelVar), and a flag (bNavSelVarHasDefaultsOnly) indicating whether all 
		 * parameters were defaulted.
		 * 
		 * The function is handed two objects containing parameters (names and their corresponding values), 
		 * oSelectionVariant and oStartupParameters. A parameter could be stored in just one of these two 
		 * objects or in both of them simultaneously. Because of the latter case a parameter could be associated
		 * with conflicting values and it is the job of this function to resolve any such conflict.
		 *
		 * Parameters are assigned to the two returned SelectionVariants, oNavigationSelVar and oDefaultedSelVar, as 
		 * follows:
		 * 
		 *                    | parameter NOT in  | parameter in
		 *                    | oSelectionVariant | oSelectionVariant
		 * ---------------------------------------|------------------
		 * parameter NOT in   | nothing to do     | Add parameter
		 * oStartupParameters | here              | (see below)
		 * ----------------------------------------------------------
		 * parameter in       | Add parameter     | Conflict resolution
		 * oStartupParameters | (see below)       | (see below)
		 * 
		 * Add parameter:
		 *     if parameter in aDefaultedParameters:
		 *         add parameter to oDefaultedSelVar
		 *     else:
		 *         add parameter to oNavigationSelVar
		 * 
		 * Conflict resolution:
		 *     if parameter in aDefaultedParameters:
		 *         add parameter value from oSelectionVariant to oNavigationSelVar
		 *         add parameter value from oStartupParameters to oDefaultedSelVar
		 *         Note: This case only occurs in UI5 1.32. In later versions UShell stores any defaulted parameter
		 *         either in oSelectionVariant or oStartupParameters but never simultaneously in both. 
		 *     else:
		 *         Choose 1 of the following options based on given handling mode (this.sParamHandlingMode).
		 *              -> add parameter value from oStartupParameters to oNavigationSelVar
		 *|             -> add parameter value from oAppState.selectionVariant to oNavigationSelVar
		 *              -> add both parameter values to navigationSelVar
		 * 
		 * If navigationSelVar is still empty at the end of execution, navigationSelVar is replaced by a copy of 
		 * oDefaultedSelVar and the flag bNavSelVarHasDefaultsOnly is set to true. The selection variant 
		 * oDefaultedSelVar itself is always returned as is.
		 * 
		 * @private
		 * 
		 */
		_splitInboundNavigationParameters : function(oSelectionVariant, oStartupParameters, aDefaultedParameters) {
			
			if (!jQuery.isArray(aDefaultedParameters)) {
				throw new Error("NavigationHandler.INVALID_INPUT");
			}
			
			var sPropName;
			// First we do some parsing of the StartUp Parameters.
			var oStartupParametersAdjusted = {};
			for (sPropName in oStartupParameters){
				if (!oStartupParameters.hasOwnProperty(sPropName)) {
					continue;
				}
				
				if (sPropName === this.sSAPSystemProp || sPropName === this.sDefaultedParamProp) {
					// Do not add the SAP system parameter to the selection variant as it is a technical parameter
					// not relevant for the selection variant.
					// Do not add the startup parameter for default values to the selection variant. The information, which parameters
					// are defaulted, is available in the defaulted selection variant.
					continue;
				}
				
				// We support parameters as a map with strings and as a map with arrays with length one (as returned by component.getStartupParameters).
				if (typeof oStartupParameters[sPropName] === "string") {
					oStartupParametersAdjusted[sPropName] = oStartupParameters[sPropName];
				} else if (jQuery.type(oStartupParameters[sPropName]) === "array" && oStartupParameters[sPropName].length === 1) {
					oStartupParametersAdjusted[sPropName] = oStartupParameters[sPropName][0]; //only single-valued parameters are allowed
				} else {
					throw new Error("NavigationHandler.INVALID_INPUT");
				}
			}
				
			// Construct two selection variants for defaults and navigation to be returned by the function.
			var oDefaultedSelVar = new SelectionVariant();
			var oNavigationSelVar = new SelectionVariant();

			var aSelVarPropNames = oSelectionVariant.getParameterNames().concat(oSelectionVariant.getSelectOptionsPropertyNames());
			for (var i = 0; i < aSelVarPropNames.length; i++) {
				sPropName = aSelVarPropNames[i];
				if (sPropName in oStartupParametersAdjusted) { 
					// Resolve conflict.
					if (jQuery.inArray(sPropName, aDefaultedParameters) > -1) {
						oNavigationSelVar.massAddSelectOption(sPropName, oSelectionVariant.getValue(sPropName));
						oDefaultedSelVar.addSelectOption(sPropName, "I", "EQ", oStartupParametersAdjusted[sPropName]);
					} else {
						switch (this.sParamHandlingMode) {
							case sap.ui.generic.app.navigation.service.ParamHandlingMode.SelVarWins:
								oNavigationSelVar.massAddSelectOption(sPropName, oSelectionVariant.getValue(sPropName));
								break;
							case sap.ui.generic.app.navigation.service.ParamHandlingMode.URLParamWins:
								oNavigationSelVar.addSelectOption(sPropName, "I", "EQ", oStartupParametersAdjusted[sPropName]);
								break;
							case sap.ui.generic.app.navigation.service.ParamHandlingMode.InsertInSelOpt:
								oNavigationSelVar.massAddSelectOption(sPropName, oSelectionVariant.getValue(sPropName));
								oNavigationSelVar.addSelectOption(sPropName, "I", "EQ", oStartupParametersAdjusted[sPropName]);
								break;
							default:
								throw new Error("NavigationHandler.INVALID_INPUT");
						}
					}
				} else { // parameter only in SelVar
					if (jQuery.inArray(sPropName, aDefaultedParameters) > -1) {
						oDefaultedSelVar.massAddSelectOption(sPropName, oSelectionVariant.getValue(sPropName));
					} else {
						oNavigationSelVar.massAddSelectOption(sPropName, oSelectionVariant.getValue(sPropName));
					}
				}
			}
			
			for (sPropName in oStartupParametersAdjusted) {
				// The case where the parameter appears twice has already been taken care of above so we skip it here.
				if (jQuery.inArray(sPropName, aSelVarPropNames) > -1) {
					continue;
				}
				if (jQuery.inArray(sPropName, aDefaultedParameters) > -1) {
					oDefaultedSelVar.addSelectOption(sPropName, "I", "EQ", oStartupParametersAdjusted[sPropName]);
				} else {
					oNavigationSelVar.addSelectOption(sPropName, "I", "EQ", oStartupParametersAdjusted[sPropName]);
				}
			}
			
			// the selection variant used for navigation should be filled with defaults in case that only defaults exist
			var bNavSelVarHasDefaultsOnly = false;
			if (oNavigationSelVar.isEmpty()) {
				bNavSelVarHasDefaultsOnly = true;
				var aPropNames = oDefaultedSelVar.getSelectOptionsPropertyNames();
				for (i = 0; i < aPropNames.length; i++) {
					oNavigationSelVar.massAddSelectOption(aPropNames[i], oDefaultedSelVar.getValue(aPropNames[i]));
				}
			}
			
			return {
				oNavigationSelVar : oNavigationSelVar,
				oDefaultedSelVar : oDefaultedSelVar,
				bNavSelVarHasDefaultsOnly : bNavSelVarHasDefaultsOnly
			};
		},		
		
		
		/**
		 * Changes the URL according to the current app state and stores the app state for later retrieval.
		 * @param {object} mInnerAppData Object containing the current state of the app
		 * @param {string} mInnerAppData.selectionVariant stringified JSON object as returned e.g. from the SmartFilterBar's getDataSuiteFormat()
		 * @param {string} [mInnerAppData.tableVariantId] id of the SmartTable variant
		 * @param {object} [mInnerAppData.customData] Object that can be used to store additional app specific data
		 * @param {boolean} [bImmediateHashReplace=true] if set to false, the inner app hash will not be replaced until the store was successful.
		 * Do not set to false if you are not able react on promise resolution, e.g. when calling in beforeLinkPressed event!
		 * @returns {object} a Promise object to observe when all actions of the function are finished. On success the app state key is returned.
		 * On error an error object of type {@link sap.ui.generic.app.navigation.service.Error} is returned.
		 * @public
		 * @example
		 * <code>
		 * var oNavigationHandler = new sap.ui.generic.app.navigation.service.NavigationHandler(oController);
		 * var mInnerAppData = {
		 * 		selectionVariant : oSmartFilterBar.getDataSuiteFormat(),
		 * 		tableVariantId : oSmartTable.getCurrentVariantId(),
		 * 		customData : oMyCustomData
		 * };
		 * 
		 * var oStoreInnerAppStatePromise = oNavigationHandler.storeInnerAppState(mInnerAppData);
		 * 
		 * oStoreInnerAppStatePromise.done(function(sAppStateKey){
		 * 	//your inner app state is saved now, sAppStateKey was added to URL
		 * 	//perform actions that must run after save
		 * });
		 * 
		 * oStoreInnerAppStatePromise.fail(function(oError){
		 * 		var oi18n = oController.getView().getModel("i18n").getResourceBundle();
		 * 		oError.setUIText({oi18n : oi18n, sTextKey : "STORE_ERROR"});
		 * 		oError.showMessageBox();
		 * });
		 * </code>
		 */
		storeInnerAppState: function(mInnerAppData, bImmediateHashReplace){

			if (typeof bImmediateHashReplace !== "boolean") {
				bImmediateHashReplace = true; //default
			}
			var oNavHandler = this;
			var oMyDeferred = jQuery.Deferred();
		
			var fnReplaceHash = function(sAppStateKey){
				var sAppHashOld = oNavHandler.oRouter.oHashChanger.getHash();
				/* use .getHash() here instead of .getAppHash() to also be able dealing with
				 * environments where only SAPUI5 is loaded and the UShell is not initialized properly.
				 */
				var sAppHashNew = oNavHandler._replaceInnerAppStateKey(sAppHashOld,sAppStateKey);
				oNavHandler.oRouter.oHashChanger.replaceHash(sAppHashNew);
			};
		
			//check if we already saved the same data
			var sAppStateKeyCached = this._oLastSavedInnerAppData.sAppStateKey;
			var bInnerAppDataEqual = (JSON.stringify(mInnerAppData) === JSON.stringify(this._oLastSavedInnerAppData.oAppData));
			if (bInnerAppDataEqual && sAppStateKeyCached) {
				// passed inner app state found in cache
				this._oLastSavedInnerAppData.iCacheHit++;
			
				//replace inner app hash with cached appStateKey in url (just in case the app has changed the hash in meantime)
				fnReplaceHash(sAppStateKeyCached);
				oMyDeferred.resolve(sAppStateKeyCached);
				return oMyDeferred.promise();
			}
		
			// passed inner app state not found in cache
			this._oLastSavedInnerAppData.iCacheMiss++;
		
			var fnOnAfterSave = function(sAppStateKey){
			
				//replace inner app hash with new appStateKey in url
				if (!bImmediateHashReplace) {
					fnReplaceHash(sAppStateKey);
				}
			
				//remember last saved state
				oNavHandler._oLastSavedInnerAppData.oAppData = mInnerAppData;
				oNavHandler._oLastSavedInnerAppData.sAppStateKey = sAppStateKey;
				oMyDeferred.resolve(sAppStateKey);
			};
		
			var fnOnError = function(oError){
				oMyDeferred.reject(oError);
			};
		
			var sAppStateKey = this._saveAppState(mInnerAppData, fnOnAfterSave, fnOnError);
			/* Note that _sapAppState may return 'undefined' in case that the parsing
			 * has failed. In this case, we should not trigger the replacement of the App Hash
			 * with the generated key, as the container was not written before.
			 * Note as well that the error handling has already happened before by
			 * making the oMyDeferred promise fail (see fnOnError above).
			 */
			if (sAppStateKey !== undefined) {
				//replace inner app hash with new appStateKey in url
				//note: we do not wait for the save to be completed: this asynchronously behaviour is necessary if
				//this method is called e.g. in a onLinkPressed event with no possibility to wait for the promise resolution
				if (bImmediateHashReplace) {
					fnReplaceHash(sAppStateKey);
				}
			}
		
			return oMyDeferred.promise();
		},
	
		/**
		 * Processes navigation related tasks in the context of the SmartLink's beforePopoverOpens event handling and returns a promise object.
		 * @description In particular the following tasks are performed, before the SmartLink popover can be opened:
		 * <ul>
		 * 	<li>If <code>mInnerAppData</code> is provided, this inner app state is saved for later back navigation.</li>
		 * 	<li>The table event parameters ("semantic attributes") and the selection variant data are mixed by calling the
		 * 			method {@link #.mixAttributesAndSelectionVariant mixAttributesAndSelectionVariant}.</li>
		 * 	<li>The mixed data is saved as the cross app state to be handed over to the target app and the corresponding sap-xapp-state key is set in the URL.</li>
		 * 	<li>All single selections ("including equal") of the mixed selection data are passed to the SmartLink popover as semantic attributes.</li>
		 * 	<li>The method <code>oTableEventParameters.open()</code> is called. Note that this does not really open the popover, but the SmartLink control proceeds
		 *			with firing the event <code>navigationTargetsObtained</code>.</li>
		 * </ul>
		 * @param {object} oTableEventParameters The parameters made available by the SmartTable control containing the "semantic Attributes" of the line.
		 * on which the Smart Link control has been clicked. in fact this is an instance of a PopOver.
		 * @param {string} sSelectionVariant Stringified JSON object as returned e.g. from the SmartFilterBar's getDataSuiteFormat().
		 * @param {object} [mInnerAppData] Object containing the current state of the app. If provided, opening the Popover is deferred until the inner app data is consistetnly saved.
		 * @param {string} [mInnerAppData.selectionVariant] Stringified JSON object as returned e.g. from the SmartFilterBar's getDataSuiteFormat(). If provided the selection
		 * is merged into the semantic attributes.
		 * @param {string} [mInnerAppData.tableVariantId] Id of the SmartTable variant
		 * @param {object} [mInnerAppData.customData] Object that can be used to store additional app specific data.
		 * @returns {object} a Promise object to observe when all actions of the function are finished. On success the modified oTableEventParameters are returned.
		 * On error an error object of type {@link sap.ui.generic.app.navigation.service.Error} is returned.
		 * @public
		 * @example
		 * <code>
		 * //event handler for the smart link event "beforePopoverOpens"
		 * 	onBeforePopoverOpens: function(oEvent) {
		 * 		var oTableEventParameters = oEvent.getParameters();
		 * 
		 * 		var mInnerAppData = {
		 * 			selectionVariant : oSmartFilterBar.getDataSuiteFormat(),
		 * 			tableVariantId : oSmartTable.getCurrentVariantId(),
		 * 			customData : oMyCustomData
		 * 		};
		 * 		
		 * 		var oSelectionVariant = new sap.ui.generic.app.navigation.service.SelectionVariant();
		 * 		oSelectionVariant.addSelectOption("CompanyCode", "I", "EQ", "0001");
		 * 		oSelectionVariant.addSelectOption("Customer", "I", "EQ", "C0001");
		 * 		var sSelectionVariant= oSelectionVariant.toJSONString();
		 * 
		 * 		var oNavigationHandler = new sap.ui.generic.app.navigation.service.NavigationHandler(oController);
		 * 		var oSmartLinkPromise = oNavigationHandler.processBeforeSmartLinkPopoverOpens(oTableEventParameters, sSelectionVariant, mInnerAppData);
		 * 
		 * 		oSmartLinkPromise.done(function(oTableEventParameters){
		 * 			// here you can add coding that should run after all app states are saved and the semantic attributes are set
		 * 		});
		 * 
		 * 		oSmartLinkPromise.fail(function(oError){
		 *			var oi18n = oController.getView().getModel("i18n").getResourceBundle();
		 * 			oError.setUIText({oi18n : oi18n, sTextKey : "STORE_ERROR"});
		 * 			oError.showMessageBox();
		 * 		});
		 * };
		 * </code>
		 */
		processBeforeSmartLinkPopoverOpens: function(oTableEventParameters, sSelectionVariant, mInnerAppData){
			var oMyDeferred = jQuery.Deferred();
			var mSemanticAttributes = oTableEventParameters.semanticAttributes;
			var oNavHandler = this;
		
			var fnStoreXappAndCallOpen = function(mSemanticAttributes, sSelectionVariant){
			
				//mix the semantic attributes (e.g. from the row line) with the selection variant (e.g. from the filter bar)
				sSelectionVariant = sSelectionVariant || "{}";
				
				var iSuppressionBehavior = sap.ui.generic.app.navigation.service.SuppressionBehavior.raiseErrorOnNull | sap.ui.generic.app.navigation.service.SuppressionBehavior.raiseErrorOnUndefined;
				/* compatiblity: Until SAPUI5 1.28.5 (or even later) the Smart Link in a Smart Table is 
				 * filtering all null- and undefined values. Therefore, mSemanticAttributes are already 
				 * reduced appropriately -- this does not need to be done by mixAttributesAndSelectionVariant
				 * again. To ensure that we still have the old behaviour (i.e. an Error is raised in case
				 * that behaviour of the Smart Link control has changed), the "old" Suppression Behaviour is 
				 * retained.
				 */
				
				var oMixedSelVar = oNavHandler.mixAttributesAndSelectionVariant(mSemanticAttributes, sSelectionVariant, iSuppressionBehavior);
				sSelectionVariant = oMixedSelVar.toJSONString();
			
				//enrich the semantic attributes with single selections from the selection variant
				mSemanticAttributes = oNavHandler._getURLParametersFromSelectionVariant(oMixedSelVar);
			
				var fnOnContainerSave = function(sAppStateKey){
					//set the stored data in popover and call open()
					oTableEventParameters.setSemanticAttributes(mSemanticAttributes);
					oTableEventParameters.setAppStateKey(sAppStateKey);
					oTableEventParameters.open(); //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Note that "open" does not open the popover, but proceeds
					//                                                               with firing the onNavTargetsObtained event.
					oMyDeferred.resolve(oTableEventParameters);
				};
			
				var fnOnError = function(oError){
					oMyDeferred.reject(oError);
				};
			
				//store the sap-xapp-state
				oNavHandler._saveAppState({selectionVariant:sSelectionVariant}, fnOnContainerSave, fnOnError);
			};
		
			if (mInnerAppData) {
			
				var oStoreInnerAppStatePromise = this.storeInnerAppState(mInnerAppData, true);
			
				//if the inner app state was successfully stored, store also the xapp-state
				oStoreInnerAppStatePromise.done(function(){
					fnStoreXappAndCallOpen(mSemanticAttributes, sSelectionVariant);
				});
			
				oStoreInnerAppStatePromise.fail(function(oError){
					oMyDeferred.reject(oError);
				});
			
			} else {
				//there is no inner app state to save, just put the parameters into xapp-state
				fnStoreXappAndCallOpen(mSemanticAttributes, sSelectionVariant);
			}
		
			return oMyDeferred.promise();
		},
	
	
		/** Mixes the given parameters and selection variant into a new selection variant containing properties from both, whereby parameters 
		 * override existing properties in the selection variant. The new selection variant does not contain any parameters. All parameters are merged into select options.
		 * The output of this function, converted to a JSON string, can be used for the {@link #.navigate NavigationHandler.navigate} method.
		 * @param {object} mSemanticAttributes Object containing key/value pairs
		 * @param {string} sSelectionVariant The selection variant in form of string as provided by the SmartFilterBar
		 * @param {integer} [iSuppressionBehavior=sap.ui.generic.app.navigation.service.SuppressionBehavior.standard] Indicates, whether semantic attributes with special values
		 *(see {@link sap.ui.generic.app.navigation.service.SuppressionBehavior suppression behavior}) shall be suppressed, before they are mixed in to the selection variant.
		 * Several {@link sap.ui.generic.app.navigation.service.SuppressionBehavior suppression behaviors} can be combined with the bitwise OR operator (|)
		 * @returns {object} instance of {@link sap.ui.generic.app.navigation.service.SelectionVariant}
		 * @public
		 * @example 
		 * <code>
		 * var mSemanticAttributes = { "Customer" : "C0001" };
		 * var sSelectionVariant = oSmartFilterBar.getDataSuiteFormat();
		 * var oNavigationHandler = new sap.ui.generic.app.navigation.service.NavigationHandler(oController);
		 * var sNavigationSelectionVariant = oNavigationHandler.mixAttributesAndSelectionVariant(mSemanticAttributes, sSelectionVariant).toJSONString();
		 * // Optionally, you can specify one or several suppression behaviors. Several suppression behaviors are combined with the bitwise OR operator, e.g.
		 * // var iSuppressionBehavior = sap.ui.generic.app.navigation.service.SuppressionBehavior.raiseErrorOnNull | sap.ui.generic.app.navigation.service.SuppressionBehavior.raiseErrorOnUndefined;
		 * // var sNavigationSelectionVariant = oNavigationHandler.mixAttributesAndSelectionVariant(mSemanticAttributes, sSelectionVariant, iSuppressionBehavior).toJSONString();
		 * 
		 * oNavigationHandler.navigate("SalesOrder", "create", sNavigationSelectionVariant);
		 * </code>
		 */
		mixAttributesAndSelectionVariant: function(mSemanticAttributes, sSelectionVariant, iSuppressionBehavior){
		
			if (iSuppressionBehavior === undefined) {
				iSuppressionBehavior = sap.ui.generic.app.navigation.service.SuppressionBehavior.standard;
			}
			var oSelectionVariant = new SelectionVariant(sSelectionVariant);
			var oNewSelVariant = new SelectionVariant();
		
			//add all semantic attributes to the mixed selection variant
			for (var sPropertyName in mSemanticAttributes){
				if (mSemanticAttributes.hasOwnProperty(sPropertyName)) {
					// A value of a semantic attribute may not be a string, but can be e.g. a date.
					// Since the selection variant accepts only a string, we have to convert it in dependence of the type.
					var vSemanticAttributeValue = mSemanticAttributes[sPropertyName];
				
					if (jQuery.type(vSemanticAttributeValue) === "array" || jQuery.type(vSemanticAttributeValue) === "object") {
						vSemanticAttributeValue = JSON.stringify(vSemanticAttributeValue);
					} else if ( jQuery.type(vSemanticAttributeValue) === "date"){
						// use the same conversion method for dates as the SmartFilterBar: toJSON()
						vSemanticAttributeValue = vSemanticAttributeValue.toJSON();
					} else if ( jQuery.type(vSemanticAttributeValue) === "number" || jQuery.type(vSemanticAttributeValue) === "boolean") {
						vSemanticAttributeValue = vSemanticAttributeValue.toString();
					}
					
					if (vSemanticAttributeValue === "") {
						if (iSuppressionBehavior & sap.ui.generic.app.navigation.service.SuppressionBehavior.ignoreEmptyString) {
							jQuery.sap.log.info("Semantic attribute " + sPropertyName + " is an empty string and due to the chosen Suppression Behiavour is being ignored.");
							continue;
						}
					}

					if (vSemanticAttributeValue === null) {
						if (iSuppressionBehavior & sap.ui.generic.app.navigation.service.SuppressionBehavior.raiseErrorOnNull) {
							throw new Error("NavigationHandler.INVALID_INPUT");
						} else {
							jQuery.sap.log.warning("Semantic attribute " + sPropertyName + " is null and ignored for mix in to selection variant");
							continue; // ignore!
						}
					} 

					if (vSemanticAttributeValue === undefined) {
						if (iSuppressionBehavior & sap.ui.generic.app.navigation.service.SuppressionBehavior.raiseErrorOnUndefined) {
							throw new Error("NavigationHandler.INVALID_INPUT");
						} else {
							jQuery.sap.log.warning("Semantic attribute " + sPropertyName + " is undefined and ignored for mix in to selection variant");
							continue;
						}
					}
					
					if (jQuery.type(vSemanticAttributeValue) === "string" ) {
						oNewSelVariant.addSelectOption(sPropertyName, "I", "EQ", vSemanticAttributeValue);
					} else {
						throw new Error("NavigationHandler.INVALID_INPUT");
					}
				
				}
			}
		
			//add parameters that are not part of the oNewSelVariant yet
			var aParameters = oSelectionVariant.getParameterNames();
			for (var i = 0; i < aParameters.length; i++) {
				if (!oNewSelVariant.getSelectOption(aParameters[i])) {
					oNewSelVariant.addSelectOption(aParameters[i], "I", "EQ", oSelectionVariant.getParameter(aParameters[i]));
				}
			}
		
			//add selOptions that are not part of the oNewSelVariant yet
			var aSelOptionNames =  oSelectionVariant.getSelectOptionsPropertyNames();
			for (i = 0; i < aSelOptionNames.length; i++) {
				if (!oNewSelVariant.getSelectOption(aSelOptionNames[i])) {
					var aSelectOption = oSelectionVariant.getSelectOption(aSelOptionNames[i]);
					//add every range in the current select option
					for (var j = 0; j < aSelectOption.length; j++) {
						oNewSelVariant.addSelectOption( aSelOptionNames[i], aSelectOption[j].Sign, aSelectOption[j].Option, aSelectOption[j].Low, aSelectOption[j].High);
					}
				}
			}
		
			return oNewSelVariant;
		},
	
		_ensureSelectionVariantFormatString : function(vSelectionVariant) {
			/* There are legacy AppStates where the SelectionVariant is being stored
			 * as a string. However, that is not compliant to the specification, which
			 * states that a standard JS object shall be provided.
			 * Internally, however, the selectionVariant is always of type string.
			 * 
			 * Situation           Persistency         internal API
			 * ----------------    ------------------  ---------------------
			 * legacy              string              string
			 * new approach        (JSON) object       string
			 * 
			 */
			
			if (vSelectionVariant === undefined) {
				return undefined;
			}
			
			var vConvertedSelectionVariant = vSelectionVariant;
			
			if (typeof vSelectionVariant === "object") {
				vConvertedSelectionVariant = JSON.stringify(vSelectionVariant);
			}
			
			return vConvertedSelectionVariant;
		},
			
		_saveAppState: function(oAppData, fnOnAfterSave, fnOnError){
		
			var oAppState = this.oCrossAppNavService.createEmptyAppState(this.oComponent);
			var sAppStateKey = oAppState.getKey();
	
			var oAppDataForSave = { selectionVariant: {}, tableVariantId: "", customData: {}};
		
			if (oAppData.selectionVariant) {
				
				/*
				 * The specification states that Selection Variants need to be JSON objects.
				 * However, internally, we work with strings for "selectionVariant". Therefore,
				 * in case that this is a string, we need to JSON-parse the data.
				 */
				if (typeof oAppData.selectionVariant === "string") {
					try {
						oAppDataForSave.selectionVariant = JSON.parse(oAppData.selectionVariant);
					} catch (x) {
						var oError = this._createTechnicalError("NavigationHandler.AppStateSave.parseError");
						if (fnOnError) {
							fnOnError(oError);
						}
						return undefined;
					}
				} else {
					oAppDataForSave.selectionVariant = oAppData.selectionVariant;
				}
			}
			if (oAppData.tableVariantId) {
				oAppDataForSave.tableVariantId = oAppData.tableVariantId;
			}
			if (oAppData.customData) {
				oAppDataForSave.customData = oAppData.customData;
			}
			oAppState.setData(oAppDataForSave);
			var oSavePromise = oAppState.save();
		
			if (fnOnAfterSave) {
				oSavePromise.done(function(){
					fnOnAfterSave(sAppStateKey);
				});
			}
		
			if (fnOnError) {
				var oNavHandler = this;
				oSavePromise.fail(function(){
					oError = oNavHandler._createTechnicalError("NavigationHandler.AppStateSave.failed");
					fnOnError(oError);
				});
			}
			return sAppStateKey;
		},
	
		_loadAppState: function(sAppStateKey,oDeferred){
	
			var oAppStatePromise = this.oCrossAppNavService.getAppState(this.oComponent, sAppStateKey);
			var oNavHandler = this;
		
			oAppStatePromise.done(function(oAppState){
				var oAppData = { selectionVariant: "{}", tableVariantId: "", customData: {}};
				var oAppDataLoaded = oAppState.getData();
			
				if (typeof oAppDataLoaded === "undefined") {
					var oError = oNavHandler._createTechnicalError("NavigationHandler.getDataFromAppState.failed");
					oDeferred.reject(oError, {}, sap.ui.generic.app.navigation.service.NavType.iAppState);
				} else {
					if (oAppDataLoaded.selectionVariant) {
						/* In case that we get an object from the stored AppData (=persistency), we need
						 * to stringify the JSON object.
						 */
						oAppData.selectionVariant = oNavHandler._ensureSelectionVariantFormatString(oAppDataLoaded.selectionVariant);
					}
					if (oAppDataLoaded.tableVariantId) {
						oAppData.tableVariantId = oAppDataLoaded.tableVariantId; 
					}
					if (oAppDataLoaded.customData){
						oAppData.customData = oAppDataLoaded.customData;
					}
				}
			
				//resolve is called on passed Deferred object to trigger a call of the done method, if implemented
				//the done method will receive the loaded appState and the navigation type as parameters
				oDeferred.resolve(oAppData, {}, sap.ui.generic.app.navigation.service.NavType.iAppState);
			});
			oAppStatePromise.fail(function(){
				var oError = oNavHandler._createTechnicalError("NavigationHandler.getAppState.failed");
				oDeferred.reject(oError, {}, sap.ui.generic.app.navigation.service.NavType.iAppState);
			});
		},
	
		/**
		 * retrieves the parameter value of the sap-iapp-state (the internal apps) from the AppHash string.
		 * It automatically takes care about compatibility between the old and the new approach of
		 * the sap-iapp-state. Precedence is that the new approach is favoured against the old approach.
		 * @param {string} sAppHash the AppHash, which may contain a sap-iapp-state parameter (both old and/or new approach)
		 * @return {string} the value of sap-iapp-state (i.e. the name of the container to retrieve the parameters), 
		 * or <code>undefined</code> in case that no sap-iapp-state was found in <code>sAppHash</code>.
		 * @private
		 */
		_getInnerAppStateKey : function(sAppHash) {
			
			// trivial case: no app hash available at all.
			if (!sAppHash) {
				return undefined;
			}
			
			/* new approach: separated via question mark / part of the query parameter of the AppHash */
			var aMatches = this._rIAppStateNew.exec(sAppHash);
			
			/* old approach: spearated via slashes / i.e. part of the route itself */
			if (aMatches === null) {
				aMatches = this._rIAppStateOld.exec(sAppHash);
			}
			
			/* old approach: special case: if there is no deep route/key defined, the sap-iapp-state may be at the beginning
			 * of the string, without any separation with the slashes
			 */
			if (aMatches === null) {
				aMatches = this._rIAppStateOldAtStart.exec(sAppHash);
			}
			
			if (aMatches === null) {
				// there is no (valid) sap-iapp-state in the App Hash
				return undefined;
			}
			
			return aMatches[1];
		},
		
		
		/**
		 * replaces (or inserts) a parameter value (an AppStateKey) for the sap-iapp-state into an existing 
		 * AppHash string. Other routes/parameters are ignored and returned without modification ("environmental 
		 * agnostic" property).
		 * Only the new approach (sap-iapp-state as query parameter in the AppHash) is being issued.
		 * @param {string} sAppHash the AppHash into which the sap-iapp-state parameter shall be made available
		 * @param {string} sAppStateKey the key value of the AppState which shall be stored as parameter value of
		 * the sap-iapp-state property.
		 * @return {string} the modified sAppHash string, such that the sap-iapp-state has been set based on the
		 * new (query option-based) sap-iapp-state. If a sap-iapp-state has been specified before, the key is replaced.
		 * If <code>sAppHash</code> was of the old format (sap-iapp-state as part of the keys/route), the format is 
		 * converted to the new format before the result is returned.
		 * @private
		 */
		_replaceInnerAppStateKey: function(sAppHash,sAppStateKey){
			var sNewIAppState = this.IAPP_STATE + "=" + sAppStateKey;

			/*
			 * generate sap-iapp-states with the new way
			 */
			if (!sAppHash) {
				// there's no sAppHash key yet
				return "?" + sNewIAppState;
			}
		
			var fnAppendToQueryParameter = function(sAppHash) {
				// there is an AppHash available, but it does not contain a sap-iapp-state parameter yet - we need to append one
				
				// new approach: we need to check, if a set of query parameters is already available
				if (sAppHash.indexOf("?") !== -1) {
					// there are already query parameters available - append it as another parameter
					return sAppHash + "&" + sNewIAppState;
				}
				// there are no a query parameters available yet; create a set with a single parameter
				return sAppHash + "?" + sNewIAppState;
			};
			
			if (!this._getInnerAppStateKey(sAppHash)) {
				return fnAppendToQueryParameter(sAppHash);
			}
			// There is an AppHash available and there is already an sap-iapp-state in the AppHash
			
			if (this._rIAppStateNew.test(sAppHash)) {
				// the new approach is being used
				return sAppHash.replace(this._rIAppStateNew, function(sNeedle) {
					return sNeedle.replace(/\=.*/ig, "=" + sAppStateKey);
				});
			}
			
			// we need to remove the old AppHash entirely and replace it with a new one.
			
			var fnReplaceOldApproach = function(rOldApproach, sAppHash) {
				sAppHash = sAppHash.replace(rOldApproach, "");
				return fnAppendToQueryParameter(sAppHash);
			};
			
			if (this._rIAppStateOld.test(sAppHash)) {
				return fnReplaceOldApproach(this._rIAppStateOld, sAppHash);
			}
			
			if (this._rIAppStateOldAtStart.test(sAppHash)) {
				return fnReplaceOldApproach(this._rIAppStateOldAtStart, sAppHash);
			}
			
			jQuery.sap.assert(false, "internal inconsistency: Approach of sap-iapp-state not known, but _getInnerAppStateKey returned it");
			return undefined;
		},
	
		_getURLParametersFromSelectionVariant : function(vSelectionVariant){
			var mURLParameters = {};
			var i = 0;
		
			if (typeof vSelectionVariant === "string") {
				var oSelectionVariant = new SelectionVariant(vSelectionVariant);
			} else if (typeof vSelectionVariant === "object") {
				oSelectionVariant = vSelectionVariant;
			} else {
				throw new Error("NavigationHandler.INVALID_INPUT");
			}
		
			//add URLs parameters from SelectionVariant.SelectOptions (if single value)
			var aSelectProperties = oSelectionVariant.getSelectOptionsPropertyNames();
			for (i = 0; i < aSelectProperties.length; i++) {
				var aSelectOptions = oSelectionVariant.getSelectOption(aSelectProperties[i]);
				if (aSelectOptions.length === 1 && aSelectOptions[0].Sign === "I" && aSelectOptions[0].Option === "EQ") {
						mURLParameters[aSelectProperties[i]] = aSelectOptions[0].Low;
				}
			}
		
			//add parameters from SelectionVariant.Parameters
			var aParameterNames = oSelectionVariant.getParameterNames();
			for (i = 0; i < aParameterNames.length; i++) {
				var sParameterValue = oSelectionVariant.getParameter(aParameterNames[i]);
			
				mURLParameters[aParameterNames[i]] = sParameterValue;
			}
			return mURLParameters;
		},
	
		_createTechnicalError: function(sErrorCode){
		
			//currently the following error codes are set:
			//"NavigationHandler.isIntentSupported.failed"
			//"NavigationHandler.AppStateSave.failed"
			//"NavigationHandler.getDataFromAppState.failed"
			//"NavigationHandler.getStartupState.failed"
		
//			var sSeverity = sap.ca.ui.message.Type.ERROR;
//			var mUItext = {oi18n: this.oi18n, 
//							sTextKey: "TECHNICAL_ERROR"
//				};
			//TODO provide detail error messages, as soon as Error object supports it
			return new Error(sErrorCode);
		}
	});


	return NavigationHandler;

});

}; // end of sap/ui/generic/app/navigation/service/NavigationHandler.js
if ( !jQuery.sap.isDeclared('sap.ui.generic.app.transaction.BaseController') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.generic.app.transaction.BaseController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
jQuery.sap.require('sap.m.BusyDialog'); // unlisted dependency retained
sap.ui.define("sap/ui/generic/app/transaction/BaseController",[	"jquery.sap.global", "sap/ui/base/EventProvider", "sap/ui/generic/app/util/ModelUtil", "sap/ui/generic/app/util/DraftUtil", "sap/m/BusyDialog", "sap/ui/generic/app/util/Queue" ], function(jQuery, EventProvider, ModelUtil, DraftUtil, BusyDialog, Queue) {  //EXC_JSHINT_037  //EXC_JSHINT_034
	"use strict";
	
	/*global Promise */	

	/**
	 * Constructor for base class for transaction controller.
	 * 
	 * @private
	 * @class Common base class for <code>sap.ui.generic.app.transaction.TransactionController</code> and
	 *        <code>sap.ui.generic.app.transaction.DraftController</code>, which offers basic functionality to invoke OData functions and
	 *        actions as well as OData CRUD functions in general.
	 * @author SAP SE
	 * @version 1.32.7
	 * @since 1.30.0
	 * @alias sap.ui.generic.app.transaction.BaseController
	 * @param {sap.ui.model.odata.ODataModel} oModel The OData model currently used
	 * @param {sap.ui.generic.app.util.Queue} oQueue Optional HTTP request queue
	 * @throws {Error} If no model is handed over as input parameter
	 */
	var BaseController = EventProvider.extend("sap.ui.generic.app.transaction.BaseController", {
		metadata: {
			publicMethods: [
				"hasClientMessages", "triggerSubmitChanges", "attachFatalError", "detachFatalError", "destroy"
			]
		},
		
		constructor: function(oModel, oQueue) {
			// model is a mandatory parameter.
			if (!oModel) {
				throw new Error("No model");
			}
			
			// inherit from event provider.
			EventProvider.apply(this, arguments);
			
			this.sName = "sap.ui.generic.app.transaction.BaseController";
			this._oModel = oModel;
			this._oMeta = oModel.getMetaModel();
			this._oDraftUtil = new DraftUtil();
			this._oModelUtil = new ModelUtil(oModel);
			
			if (oQueue) {
				this._oQueue = oQueue;
			} else {
				this._oQueue = new Queue(10);
				this._bOwnsQueue = true;
			}

			this._initCounts();
		}
	});
	
	/**
	 * Attaches event handler <code>fnFunction</code> to the <code>fatalError</code> event.
	 * 
	 * @param {function} fnFunction The function to call when the event occurs
	 * @param {object} [oListener] Object on which to call the given function
	 * @public
	 */
	BaseController.prototype.attachFatalError = function(fnFunction, oListener) {		
		this.attachEvent("fatalError", fnFunction, oListener);		
	};

	/**
	 * Detaches event handler <code>fnFunction</code> from the <code>fatalError</code> event.
	 * 
	 * @param {function} fnFunction The function to call when the event occurs
	 * @param {object} [oListener] Object on which to call the given function
	 * @public
	 */
	BaseController.prototype.detachFatalError = function(fnFunction, oListener) {		
		this.detachEvent("fatalError", fnFunction, oListener);	
	};
	
	/**
	 * Prepares an action invocation, as it checks the existence of the function import and correctness of function import parameters.
	 * 
	 * @param {string} sFunctionImportName The name of the function or action
	 * @param {sap.ui.model.Context} oContext the given binding context
	 * @param {map} mParameters Parameters to control the behavior of the action invocation
	 * @returns {map} The parameters used to invoke the action
	 * @throws {Error} Throws an error if the function import does not exist or the action input parameters are invalid
	 * @private
	 */
	BaseController.prototype._prepareCallAction = function(sFunctionImportName, oContext, mParameters) {
		var oEntitySet, oEntityType, oEntity, sEntitySet, aKeyProperties;
		
		// check the input.
		if (!sFunctionImportName) {
			throw new Error("Invalid Function Import");
		}
		
		mParameters.urlParameters = mParameters.urlParameters || {};		
		mParameters.functionImport = this._oMeta.getODataFunctionImport(sFunctionImportName.split("/")[1]);
		
		if (!mParameters.functionImport) {
			throw new Error("Unknown Function Import " + sFunctionImportName);
		}
		
		// retrieve current entity set from binding context
		sEntitySet = ModelUtil.getEntitySetFromContext(oContext);
		oEntitySet = this._oMeta.getODataEntitySet(sEntitySet, false);
		oEntityType = this._oMeta.getODataEntityType(oEntitySet.entityType, false);
		aKeyProperties = oEntityType.key.propertyRef;
	
		// get the action parameters.
		if (oContext) {
			oEntity = oContext.getObject();
		}
		if (oEntity) {
			this._getActionParameters(oEntity, mParameters, aKeyProperties);
			this._getAdditionalActionParameters(oEntity, mParameters, aKeyProperties);
			// activate etag header as soon as abap infrastructure supports it
			// this._getActionRequestHeaders(oContext, oEntity, mParameters);
		}
		
		return mParameters;
	};
	
	/**
	 * Invokes an action with the given name.
	 * 
	 * @param {string} sFunctionImportName The name of the function or action
	 * @param {sap.ui.model.Context} oContext The given binding context
	 * @param {map} mParameters Parameters to control the behavior of the action invocation
	 * @param {map} mParameters.urlParameters An optional map containing the parameters that will be passed as query strings
	 * @param {string} mParameters.batchGroupId BatchGroupId for this request 
	 * @param {string} mParameters.changeSetId ChangeSetId for this request
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution of the action
	 * @throws {Error} Throws an error if the function import does not exist or the action input parameters are invalid
	 * @private
	 */
	BaseController.prototype._callAction = function(sFunctionImportName, oContext, mParameters) {
		var that = this;

		if (!mParameters.urlParameters || !mParameters.functionImport) {
			mParameters = this._prepareCallAction(sFunctionImportName, oContext, mParameters);
		}

		return new Promise(function(resolve, reject) {
			var sFunctionImport, mCallBacks;
			
			sFunctionImport = "/" + mParameters.functionImport.name;
			mCallBacks = that._getRequestCallBacks(resolve, reject);
			
			that._oModel.callFunction(sFunctionImport, {
				method: mParameters.functionImport.httpMethod,
				urlParameters: mParameters.urlParameters,
				success: mCallBacks.success,
				error: mCallBacks.error,
				batchGroupId: mParameters.batchGroupId,
				changeSetId: mParameters.changeSetId,
				headers: mParameters.headers				
			});
		});		
	};
	
	/**
	 * Calculates the action header parameters - only for ETag so far.
	 * 
	 * @param {sap.ui.model.Context} oContext The given binding context
	 * @param {object} oEntity The given entity.
	 * @param {map} mParameters Parameters to control the behavior of the action invocation.
	 * @throws {Error} Throws an error if the function import does not exist or the action input parameters are invalid
	 * @private
	 */
	BaseController.prototype._getActionRequestHeaders = function(oContext, oEntity, mParameters) {
		// bound actions have OData v2 annotation action-for and work on entity level: ETags only for bound actions
		var sETag;

		if (!mParameters.headers) {
			mParameters.headers = {};
		}
		
		// set ETag only, if it hasn't been set before, e.g. due to an overwrite action on UI -> value = '*'
		if (!mParameters.headers["If-Match"] && mParameters.functionImport["sap:action-for"]) {
			sETag = this._oModel.getETag(null, oContext, oEntity);

			if (sETag) {
				mParameters.headers["If-Match"] = sETag;
			}
		}
	};	
	
	/**
	 * Calculates the action parameters.
	 * 
	 * @param {object} oEntity The given entity
	 * @param {map} mParameters Parameters to control the behavior of the action invocation
	 * @param {array} aKeyProperties The key properties
	 * @returns {map} The action parameters
	 * @throws {Error} Throws an error if the function import does not exist or the action input parameters are invalid
	 * @private
	 */	
	BaseController.prototype._getActionParameters = function(oEntity, mParameters, aKeyProperties) {
		var i, isFunctionImportParameter, length = aKeyProperties.length, mActionParameters = {}, sActionFor;

		// bound actions have OData v2 annotation action-for and work on entity level -> parameter of function import
		// need to contain all key properties of the corresponding entity type
		// instance level actions with action-for do not need to fulfill the requirement to have all keys of the entity
		// types as parameters -> therefore no hard check for completeness of key parameters
		sActionFor = mParameters.functionImport["sap:action-for"];
		
		isFunctionImportParameter = function(sPropertyName) {
			if (mParameters.functionImport.parameter) {
				var j, len = mParameters.functionImport.parameter.length;

				for (j = 0; j < len; j++) {
					if (mParameters.functionImport.parameter[j].name === sPropertyName) {
						return true;
					}
				}				
			}	

			return false;
		};

		if (!mParameters.functionImport.parameter && sActionFor) {
			jQuery.sap.log.error("Action doesn't have any parameters");
			throw new Error("Action doesn't have any parameters");
		}
		
		// map action parameters and check whether action parameters fully contain keys of entity type
		// assumption: equality of names - parameter of function
		for (i = 0; i < length; i++) {
			if (isFunctionImportParameter(aKeyProperties[i].name)) {
				mParameters.urlParameters[aKeyProperties[i].name] = oEntity[aKeyProperties[i].name];
			} else if (sActionFor) {
				// only raise errors for bound actions if key is not part of function import parameters
				jQuery.sap.log.error("Action parameters do not contain key property: " + aKeyProperties[i].name);
				throw new Error("Action parameters do not contain key property: " + aKeyProperties[i].name);							
			}
		}

		return mActionParameters;
	};

	/**
	 * Calculates the action parameters.
	 * 
	 * @param {object} oEntity The given entity
	 * @param {map} mParameters Parameters to control the behavior of the action invocation
	 * @param {array} aKeyProperties The key properties
	 * @throws {Error} Throws an error if the function import does not exist or the action input parameters are invalid
	 * @private
	 */
	BaseController.prototype._getAdditionalActionParameters = function(oEntity, mParameters, aKeyProperties) {
		var j, length = 0, oParameterName, isKeyProperty = function(sParameterName) {
			var i = 0, len = aKeyProperties.length;

			for (i = 0; i < len; i++) {
				if (aKeyProperties[i].name === sParameterName) {
					return true;
				}
			}
			return false;
		};

		if (mParameters.functionImport.parameter) {
			length = mParameters.functionImport.parameter.length;				
		}		
		
		if (length > aKeyProperties.length) {
			// additional parameters have to be passed although part of entity
			for (j = 0; j < length; j++) {
				oParameterName = mParameters.functionImport.parameter[j];

				if (!isKeyProperty(oParameterName.name)) {
					// accept also empty parameters e.g. empty string or optional parameters (nullable=true)
					// if nullable is not set -> default is currently false on client - ideally be true
					// reason ->  Gateway rejects requests which do not contain parameters which don't have the nullable attribute at all
					var bNullable = (oParameterName.nullable === "true") ? true : false;
					if (!mParameters.urlParameters.hasOwnProperty(oParameterName.name) && !bNullable) {						
						jQuery.sap.log.error("Unknown parameter " + oParameterName.name);
						throw new Error("Unknown parameter " + oParameterName.name);
					}
				}
			}
		}
	};
	
	/**
	 * Triggers a GET request to the OData service that has been specified in the model constructor. The data will be stored in the model. The requested data is returned with the response. 
	 * 
	 * @param {string} sPath The path to the data that is retrieved
	 * @param {map} mParameters Parameters to control the behavior of the request
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution of the request
	 * @private
	 */
	BaseController.prototype._read = function(sPath, mParameters) {
		var that = this;
		
		return new Promise(function(resolve, reject) {
			var mCallBacks, urlParams;
			
			if (mParameters.urlParameters) {
				urlParams = mParameters.urlParameters;
			}
			
			mCallBacks = that._getRequestCallBacks(resolve, reject);

			that._oModel.read(sPath, {
				success: mCallBacks.success,
				error: mCallBacks.error,
				batchGroupId: mParameters.batchGroupId,
				changeSetId: mParameters.changeSetId,
				urlParameters: urlParams
			});
		});
	};
	
	/**
	 * Triggers a delete request.
	 * 
	 * @param {string} sPath The path identifying the entity to be removed
	 * @param {map} mParameters Parameters to control the behavior
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution
	 * @private
	 */
	BaseController.prototype._remove = function(sPath, mParameters) {
		var that = this;

		return new Promise(function(resolve, reject) {
			var mCallBacks = that._getRequestCallBacks(resolve, reject);

			that._oModel.remove(sPath, {
				success: mCallBacks.success,
				error: mCallBacks.error,
				eTag: "*",
				batchGroupId: mParameters.batchGroupId,
				changeSetId: mParameters.changeSetId
			});
		});
	};
	
	/**
	 * Submits all changes that were collected by the currently used model.
	 * 
	 * @param {map} mParameters Parameters to control the submit behavior
	 * @param {string} mParameters.batchGroupId The ID of the batch group to use for the submit
	 * @param {string} mParameters.eTag The ETag to use for the submit
	 * @param {forceSubmit} mParameters.forceSubmit forces a submit to the back-end
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution of the submit
	 * @private
	 */
	BaseController.prototype._submitChanges = function(mParameters) {
		var that = this, oContext;

		if (mParameters && mParameters.context) {
			oContext = mParameters.context;
		}
		
		return new Promise(function(resolve, reject) {
			var bPending = false, mCallBacks = that._getRequestCallBacks(resolve, reject);

			// take into consideration that no pending changes might exist and that some
			// client just might want to execute some action => forceSubmit.
			// without forceSubmit, interaction would be pending.
			bPending = that._oModel.hasPendingChanges();
			
			if (bPending || mParameters.forceSubmit) {
				mParameters.pendingChanges = bPending;
				that._oModel.submitChanges({
					batchGroupId: mParameters.batchGroupId,
					success: mCallBacks.success,
					error: mCallBacks.error,
					eTag: mParameters.eTag
				});
			} else {
				resolve({
					context: oContext
				});
			}
		});
	};
	
	/**
	 * Triggers submitting the currently tracked changes to the back-end.
	 * 
	 * @param {map} mParameters Parameters to control the submit behavior
	 * @param {boolean} mParameters.noBlockUI If set to <code>true</code>, the current user interface is not blocked by a busy animation
	 * @param {boolean} mParameters.noShowResponse If set to <code>true</code>, no success and error messages are shown
	 * @param {boolean} mParameters.noShowSuccessToast If set to <code>true</code>, the success message is not shown in a toast
	 * @param {string} mParameters.successMsg An optional success message
	 * @param {string} mParameters.failedMsg An optional error message
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution of the submit
	 * @public
	 */
	BaseController.prototype.triggerSubmitChanges = function(mParameters) {
		var that = this, oBusyDialog, fFunc;

		// check and default the input.
		mParameters = mParameters || {};
		mParameters.successMsg = mParameters.successMsg || "Action succeeded";
		mParameters.failedMsg = mParameters.failedMsg || "Action failed";

		if (!mParameters.noBlockUI) {
			oBusyDialog = new BusyDialog();
			oBusyDialog.open();
		}

		fFunc = function() {
			return that._submitChanges(mParameters).then(function(oResponse) {
				// first of all close the busy dialog.
				if (oBusyDialog) {
					oBusyDialog.close();
				}
					
				// check for "implicitly" triggered merge requests that failed.
				that._checkImplicitError(oResponse, mParameters);
					
				// mind nesting of promises.
				return that._normalizeResponse(oResponse, true);
			}, function(oResponse) {
				var oResponseOut = that._normalizeError(oResponse);

				// this call back is only invoked, if the complete request fails.
				// so if an operation in a change set fails, this is technically considered a success;
				// especially failure of individual requests does not lead to invocation of this call back.
				if (oBusyDialog) {
					oBusyDialog.close();
				}
					
				// notify possible listeners of the fatal error situation.
				that.fireEvent("fatalError", {
					response: oResponseOut
				});
					
				throw oResponseOut;
			});
		};
		
		// enqueue the item to process HTTP requests in sequence.
		return this._oQueue.enqueue(fFunc);
	};
	
	/**
	 * Checks for client messages.
	 * 
	 * @returns {Promise} If client-side messages exist a rejected promise is returned, <code>null</code> otherwise
	 * @public
	 */
	BaseController.prototype.hasClientMessages = function() {
		if (this._oModelUtil.hasClientMessages()) {
			return Promise.reject(new Error("Client messages detected"));
		}
		
		return null;
	};
	
	/**
	 * Converts the response into an object with two properties, <code>response</code> that represents the response of the HTTP request and
	 * <code>context</code> that is the binding context.
	 * 
	 * @param {object} oResponse The given response
	 * @param {boolean} bContext flag indicating whether context has to be added
	 * @returns {object} The response object
	 * @private
	 */
	BaseController.prototype._normalizeResponse = function(oResponse, bContext) {		
		if (oResponse && (oResponse.httpResponse || oResponse.responseData)) {
			return { 
				data: oResponse.responseData,
				response : oResponse.httpResponse || null,
				context : bContext ? this._oModelUtil.getContextFromResponse(oResponse.responseData) : null
			};			
		}
		
		return oResponse;	
	};
	
	/**
	 * Converts the error response into an object with one property, <code>response</code>, which represents the response of the failed HTTP
	 * request.
	 * 
	 * @param {object} oResponse The given response
	 * @returns {object} The response object
	 * @private
	 */
	BaseController.prototype._normalizeError = function(oResponse) {
		if (oResponse && oResponse.message) {
			return { 
				response : oResponse
			};
		} 
	
		return oResponse;
	};
	
	/**
	 * Creates a sync point for using multiple promises and returns a promise to use for chaining.
	 * 
	 * @param {array} aPromises The promises
	 * @returns {Promise} A promise for chaining
	 * @private
	 */
	BaseController.prototype._returnPromiseAll = function(aPromises) {
		return Promise.all(aPromises).then(function(oResponse) {
			// on successful execution an array of the collected responses for all sub-ordinate promises is created by Promise.all and returned.
			// so take the first response, as it has a context object.
			if (oResponse.length) {
				return oResponse[0];
			}
			
			return oResponse;
		});
	};
	
	/**
	 * Checks a batch response for implicitly triggered patch or merge requests.
	 * 
	 * @param {object} oResponse The response of the HTTP request
	 * @param {map} mParameters Parameters to control the submit behavior
	 * @param {boolean} mParameters.noBlockUI If set to <code>true</code> the current user interface is not blocked by a busy animation
	 * @param {boolean} mParameters.noShowResponse If set to <code>true</code> no success and error messages are shown
	 * @param {boolean} mParameters.noShowSuccessToast If set to <code>true</code> the success message is not shown in a toast
	 * @param {string} mParameters.successMsg An optional success message
	 * @param {string} mParameters.failedMsg An optional error message
	 * @throws {object} Error object, if a requests was triggered that submits implicitly changes to the back-end.
	 * @private
	 */
	BaseController.prototype._checkImplicitError = function(oResponse, mParameters) {
		var oPart, oParsed, iStatus, bCounts = false;
		
		// check the counters
		if (this._mCounts.requestSent === 1 && this._mCounts.requestCompleted === 1) {
			bCounts = true;
		}
		
		this._initCounts();	
		
		// if a batch request with one batch containing only changes has been sent to the back-end
		// and fails, the "success" call-back is invoked.
		// so we check for error in such situations.
		if (mParameters.pendingChanges && bCounts) {
			if (oResponse && oResponse.responseData && oResponse.responseData.__batchResponses && (oResponse.responseData.__batchResponses.length === 1)) {
				oPart = oResponse.responseData.__batchResponses[0];
			}
			
			if (oPart && oPart.response && oPart.response.statusCode) {
				iStatus = parseInt(oPart.response.statusCode, 10);
				
				// check whether the request failed and throw in this case an exception.
				if (iStatus < 200 || iStatus > 299) {
					oParsed = this._parseError(oPart);
					throw this._normalizeError(oParsed);
				}					
			}
		}
	};

	/**
	 * Converts a batch response part to an error message.
	 * 
	 * @param {object} oPart The response part
	 * @returns {object} Error message.
	 * @private
	 */
	BaseController.prototype._parseError = function(oPart) {
		var oResult = {};

		if (oPart.message) {
			oResult.message = oPart.message;
		}
		
		if (oPart.response) {
			oResult.statusCode = oPart.response.statusCode;
			oResult.statusText = oPart.response.statusText;
			oResult.headers = oPart.response.headers;
			oResult.responseText = oPart.response.body;
		}
		
		return oResult;
	};
	
	/**
	 * Sets the request counters to their initial state.
	 * 
	 * @private
	 */
	BaseController.prototype._initCounts = function() {
		this._mCounts = {
			requestSent: 0,
			requestCompleted: 0
		};
	};
	
	/**
	 * Returns the call-backs for HTTP response handling.
	 * 
	 * @param {function} resolve Call-back from <code>Promise</code>
	 * @param {function} reject Call-back from <code>Promise</code>
	 * @returns {map} Call-backs for HTTP response handling
	 * @private
	 */
	BaseController.prototype._getRequestCallBacks = function(resolve, reject) {
		var that = this;
		
		// increment request count.
		this._mCounts.requestSent++;
		
		return {
			success : function(oData, oResponse) {
				// increment request completed count.
				that._mCounts.requestCompleted++;
				
				// resolve the promise.
				resolve({
					responseData: oData,
					httpResponse: oResponse
				});
			},
			error : function(oResponse) {
				// increment request completed count.
				that._mCounts.requestCompleted++;
				
				// reject the promise.
				reject(oResponse);
			}
		};
	};
	
	/**
	 * Frees all resources claimed during the life-time of this instance.
	 * 
	 * @public
	 */
	BaseController.prototype.destroy = function() {
		if (this._oModelUtil) {
			this._oModelUtil.destroy();
		}
		
		if (this._oQueue && this._bOwnsQueue) {
			this._oQueue.destroy();
		}
		
		this._oModel = null;
		this._oMeta = null;
		this._oDraftUtil = null;
		this._oModelUtil = null;
	};
	
	return BaseController;

}, true);

}; // end of sap/ui/generic/app/transaction/BaseController.js
if ( !jQuery.sap.isDeclared('sap.ui.generic.app.transaction.DraftContext') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.generic.app.transaction.DraftContext'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/ui/generic/app/transaction/DraftContext",[	"jquery.sap.global", "sap/ui/base/Object", "sap/ui/generic/app/util/ModelUtil" ], function(jQuery, BaseObject, ModelUtil) { // EXC_JSHINT_002
	"use strict";

	/**
	 * Constructor for meta model access class.
	 * 
	 * @public
	 * @class The class provides access to information on draft handling that is available in the
	 *        OData service's metadata as it interprets draft-specific annotations.
	 * @author SAP SE
	 * @version 1.32.7
	 * @since 1.30.0
	 * @alias sap.ui.generic.app.transaction.DraftContext
	 * @param {sap.ui.model.odata.ODataModel} oModel The OData model currently used
	 * @throws {Error} If no model is handed over as input parameter
	 */
	var DraftContext = BaseObject.extend("sap.ui.generic.app.transaction.DraftContext", {
		metadata: {
			publicMethods: [
				"isDraftEnabled", "isDraftRoot", "hasDraft", "hasDraftRoot", "hasDraftValidationFunction", "hasDraftPreparationAction", "isTechnicalKey", "isSemanticKey", "getSemanticKey", "checkUpdateOnChange", "getODataDraftFunctionImportName", "hasDraftAdministrativeData", "hasSiblingEntity", "destroy" // EXC_JSHINT_037
			]
		},

		constructor: function(oModel) { // EXC_JSLINT_021
			// model is a mandatory parameter.
			if (!oModel) {
				throw new Error("No model");
			}
			
			this._oModel = oModel;
			this._oMeta = oModel.getMetaModel();
			this._oModelUtil = new ModelUtil(oModel);
			
			return this.getInterface();
		}
	});

	/**
	 * Checks whether a given entity set is draft-enabled.
	 * 
	 * @param {string} sEntitySet The name of the entity set
	 * @returns {boolean} <code>true</code>, if a given entity set is draft-enabled, <code>false</code> otherwise
	 * @throws {Error} If no entity set is handed over as input parameter
	 * @public
	 */
	DraftContext.prototype.isDraftEnabled = function(sEntitySet) {
		var oDraftEntitySet = this._getODataDraftEntitySet(sEntitySet);
		return !!(oDraftEntitySet && oDraftEntitySet.isDraft);
	};

	/**
	 * Checks whether a given entity set is a draft root.
	 * 
	 * @param {string} sEntitySet The name of the entity set
	 * @returns {boolean} <code>true</code>, if a given entity set is draft root, <code>false</code> otherwise
	 * @throws {Error} If no entity set is handed over as input parameter
	 * @public
	 */
	DraftContext.prototype.isDraftRoot = function(sEntitySet) {
		var oDraftEntitySet = this._getODataDraftEntitySet(sEntitySet);
		return !!(oDraftEntitySet && oDraftEntitySet.isRoot);
	};

	/**
	 * Checks whether an entity set is draft-enabled. The entity set name is derived from the given binding context
	 * 
	 * @param {sap.ui.model.Context} oContext The given binding context
	 * @returns {boolean} <code>true</code>, if a given entity set is draft-enabled, <code>false</code> otherwise
	 * @throws {Error} If no context is handed over as input parameter
	 * @public
	 */
	DraftContext.prototype.hasDraft = function(oContext) {
		var sEntitySet = ModelUtil.getEntitySetFromContext(oContext);
		return this.isDraftEnabled(sEntitySet);
	};

	/**
	 * Checks whether an entity set is draft root. The entity set name is derived from the given binding context.
	 * 
	 * @param {sap.ui.model.Context} oContext The given binding context
	 * @returns {boolean} <code>true</code>, if a given entity set is draft root, <code>false</code> otherwise
	 * @throws {Error} If no context is handed over as input parameter
	 * @public
	 */
	DraftContext.prototype.hasDraftRoot = function(oContext) {
		var sEntitySet = ModelUtil.getEntitySetFromContext(oContext);
		return this.isDraftRoot(sEntitySet);
	};

	/**
	 * Checks whether an entity set has a draft validation function. The entity set name is derived from the given binding context.
	 * 
	 * @param {sap.ui.model.Context} oContext The given binding context
	 * @returns {boolean} <code>true</code>, if a given entity set has a draft validation function, <code>false</code> otherwise
	 * @throws {Error} If no context is handed over as input parameter
	 * @public
	 */
	DraftContext.prototype.hasDraftValidationFunction = function(oContext) {
		return !!this.getODataDraftFunctionImportName(oContext, "ValidationFunction");
	};

	/**
	 * Checks whether an entity set has a draft preparation action. The entity set name is derived from the given binding context.
	 * 
	 * @param {sap.ui.model.Context} oContext The given binding context
	 * @returns {boolean} <code>true</code>, if a given entity set has a draft preparation action, <code>false</code> otherwise
	 * @throws {Error} If no context is handed over as input parameter
	 * @public
	 */
	DraftContext.prototype.hasDraftPreparationAction = function(oContext) {
		return !!this.getODataDraftFunctionImportName(oContext, "PreparationAction");
	};

	/**
	 * Checks whether a given key is a technical key.
	 * 
	 * @param {string} sEntitySet The name of the entity set
	 * @param {oKeys} oKeys The given key
	 * @returns {boolean} <code>true</code>, if a given key is a technical key, <code>false</code> otherwise
	 * @throws {Error} If no entity set is handed over as input parameter
	 * @public
	 */
	DraftContext.prototype.isTechnicalKey = function(sEntitySet, oKeys) {
		var oEntitySet, oEntityType, iKeys, i, sKey;

		if (!sEntitySet) {
			throw new Error("No entity set");
		}
		
		oEntitySet = this._oMeta.getODataEntitySet(sEntitySet);
		oEntityType = this._oMeta.getODataEntityType(oEntitySet.entityType);
		iKeys = oEntityType.key.propertyRef.length;

		// different amount of keys
		if (Object.keys(oKeys).length !== iKeys) {
			return false;
		}

		for (i = 0; i < iKeys; i++) {
			sKey = oEntityType.key.propertyRef[i].name;

			if (!oKeys[sKey]) {
				return false;
			}
		}

		return true;
	};

	/**
	 * Checks whether a given key is a semantic key.
	 * 
	 * @param {string} sEntitySet The name of the entity set
	 * @param {oKeys} oKeys The given key
	 * @returns {boolean} <code>true</code>, if a given key is a semantic key, <code>false</code> otherwise
	 * @throws {Error} If no entity set is handed over as input parameter
	 * @public
	 */
	DraftContext.prototype.isSemanticKey = function(sEntitySet, oKeys) {
		var aSemanticKeyProperties, i, len;

		if (this.isDraftEnabled(sEntitySet)) {
			aSemanticKeyProperties = this.getSemanticKey(sEntitySet);
			len = aSemanticKeyProperties.length;

			for (i = 0; i < len; i++) {
				if (!oKeys[aSemanticKeyProperties[i].name]) {
					return false;
				}
			}

			return true;
		}

		return false;
	};

	/**
	 * Returns the semantic keys for a given entity set.
	 * 
	 * @param {string} sEntitySet The given entity set
	 * @returns {array} The semantic keys
	 * @throws {Error} If no entity set is handed over as input parameter
	 * @public
	 */
	DraftContext.prototype.getSemanticKey = function(sEntitySet) {
		var oEntitySet, oEntityType, aSemanticKeys, aSemanticKey = [], i, len;

		if (!sEntitySet) {
			throw new Error("No entity set");
		}
		
		oEntitySet = this._oMeta.getODataEntitySet(sEntitySet);
		oEntityType = this._oMeta.getODataEntityType(oEntitySet.entityType);
		aSemanticKeys = oEntityType["com.sap.vocabularies.Common.v1.SemanticKey"];
		
		if (aSemanticKeys) {
			len = aSemanticKeys.length;
			
			for (i = 0; i < len; i++) {
				// to be conform to property-ref of keys -> name : value
				aSemanticKey.push({name : aSemanticKeys[i].PropertyPath});				
			}
		}
		
		return aSemanticKey;					
	};

	/**
	 * Returns the name of the function import to be used.
	 * 
	 * @param {sap.ui.model.Context} oContext The given binding context
	 * @param {string} sDraftFunctionImport The draft function import
	 * @returns {string} The name of the function import to be used
	 * @throws {Error} If no context is handed over as input parameter
	 * @public
	 */
	DraftContext.prototype.getODataDraftFunctionImportName = function(oContext, sDraftFunctionImport) {
		var sEntitySet, oDraftEntitySet;

		sEntitySet = ModelUtil.getEntitySetFromContext(oContext);
		oDraftEntitySet = this._getODataDraftEntitySet(sEntitySet);

		if (oDraftEntitySet.oDraft[sDraftFunctionImport] && oDraftEntitySet.oDraft[sDraftFunctionImport].String) {
			return oDraftEntitySet.oDraft[sDraftFunctionImport].String;
		}

		return null;
	};

	/**
	 * Calculates the description of an entity set with regards to draft enablement.
	 * 
	 * @param {string} sEntitySet The name of the entity set
	 * @returns {object} The description of an entity set
	 * @throws {Error} If no entity set is handed over as input parameter
	 * @private
	 */
	DraftContext.prototype._getODataDraftEntitySet = function(sEntitySet) {
		var oODataDraftEntitySet = {}, oEntitySet;

		if (!sEntitySet) {
			throw new Error("No entity set");
		}
		
		oEntitySet = this._oMeta.getODataEntitySet(sEntitySet);
		oODataDraftEntitySet.ODataEntitySet = oEntitySet;

		if (oEntitySet["com.sap.vocabularies.Common.v1.DraftRoot"]) {
			oODataDraftEntitySet.isDraft = true;
			oODataDraftEntitySet.isRoot = true;
			oODataDraftEntitySet.oDraft = oEntitySet["com.sap.vocabularies.Common.v1.DraftRoot"];
		} else if (oEntitySet["com.sap.vocabularies.Common.v1.DraftNode"]) {
			oODataDraftEntitySet.isDraft = true;
			oODataDraftEntitySet.isRoot = false;
			oODataDraftEntitySet.oDraft = oEntitySet["com.sap.vocabularies.Common.v1.DraftNode"];
		}

		return oODataDraftEntitySet;
	};

	/**
	 * Checks whether administrative data for a given draft is available.
	 * 
	 * @param {string} sEntitySet The name of the entity set
	 * @returns {boolean} <code>true</code>, if administrative data is available, <code>false</code> otherwise 
	 * @public
	 */
	DraftContext.prototype.hasDraftAdministrativeData = function(sEntitySet) {
		return this._hasNavigationProperty(sEntitySet, "DraftAdministrativeData");
	};
	
	/**
	 * Checks whether a sibling entity for a given entity set is available.
	 * 
	 * @param {string} sEntitySet The name of the entity set
	 * @returns {boolean} <code>true</code>, if sibling entity is available, <code>false</code> otherwise 
	 * @public
	 */
	DraftContext.prototype.hasSiblingEntity = function(sEntitySet) {
		return this._hasNavigationProperty(sEntitySet, "SiblingEntity");
	};	
	
	/**
	 * Checks whether entity type of given entity set has the navigation property.
	 * 
	 * @param {string} sEntitySet The name of the entity set
	 * @param {string} sNavigationProperty The name of the navigation property 
	 * @returns {boolean}  <code>true</code>, if navigation property exists, <code>false</code> otherwise
	 * @private
	 */	
	DraftContext.prototype._hasNavigationProperty = function(sEntitySet, sNavigationProperty) {
		var oEntitySet, oEntityType, i, len;
		
		oEntitySet = this._oMeta.getODataEntitySet(sEntitySet);
		oEntityType = this._oMeta.getODataEntityType(oEntitySet.entityType);
		
		if (oEntityType.navigationProperty) {
			len = oEntityType.navigationProperty.length;
			
			for (i = 0; i < len; i++) {
				if (oEntityType.navigationProperty[i].name === sNavigationProperty) {
					return true;
				}
			}	
			
		}
		
		return false;
	};	
	
	/**
	 * Checks whether an OData property is annotated with UpdateOnChange. The method is used in context of a validation success event.
	 *
	 * @param {string} sEntitySet The name of the entity set
	 * @param {string} sProperty The name of the property
	 * @return {boolean} <code>true</code>, if the property is annotated with UpdateOnChange, <code>false</code> otherwise
	 * @throws {Error} If no entity set is handed over as input parameter
	 * @public
	 * @deprecated Since 1.32.0
	 */
	DraftContext.prototype.checkUpdateOnChange = function(sEntitySet, sProperty) {
		var sProp, oEntitySet, oSideEffect;

		if (!sEntitySet) {
			throw new Error("No entity set");
		}

		oEntitySet = this._oMeta.getODataEntitySet(sEntitySet);

		for (sProp in oEntitySet) { // EXC_JSHINT_041
			if (sProp.indexOf && sProp.indexOf("com.sap.vocabularies.Common.v1.SideEffects") === 0) {
				oSideEffect = oEntitySet[sProp];
				
				if (oSideEffect.SourceProperties && oSideEffect.SourceProperties.length) {
					if (oSideEffect.SourceProperties.length === 1 && oSideEffect.SourceProperties[0].PropertyPath) {
						if (oSideEffect.SourceProperties[0].PropertyPath === sProperty) {
							return true;
						}
					}
				}
			}
		}
		
		return false;
	};
	
	/**
	 * Frees all resources claimed during the life-time of this instance.
	 * 
	 * @public
	 */
	DraftContext.prototype.destroy = function() { // EXC_JSLINT_021
		if (this._oModelUtil) {
			this._oModelUtil.destroy();
		}
		
		this._oModelUtil = null;
		this._oModel = null;
		this._oMeta = null;
	};

	return DraftContext;

}, true);

}; // end of sap/ui/generic/app/transaction/DraftContext.js
if ( !jQuery.sap.isDeclared('sap.ui.generic.app.transaction.DraftController') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.generic.app.transaction.DraftController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/generic/app/transaction/DraftController",[	"jquery.sap.global", "./BaseController", "./DraftContext" ], function(jQuery, BaseController, DraftContext) {
	"use strict";

	/* global Promise */

	/**
	 * Constructor for a new draft controller instance.
	 * 
	 * @public
	 * @class Gives access to runtime draft handling for applications. Assuming state-less communication, each single data modification request (or
	 *        change set in an OData $batch request) is a "mini-transaction", which saves data to the database. The class implements the transactional
	 *        interaction patterns specified for OData services that support draft documents and provides methods for draft-specific actions, for
	 *        example validate, prepare, activate. 
	 *        
	 *        Additionally, it handles transactional request processing, ensures concurrency control and correct
	 *        ETag handling. It provides access to the simple interaction patterns of runtime handling for drafts according to the draft
	 *        specification. These can be combined as required by client applications. Additionally, error handling is provided to notify client
	 *        implementations of error situations. The event <code>fatalError</code> is thrown, if fatal errors occur during execution of OData
	 *        requests.
	 * @author SAP SE
	 * @version 1.32.7
	 * @since 1.30.0
	 * @alias sap.ui.generic.app.transaction.DraftController
	 * @param {sap.ui.model.odata.ODataModel} oModel The OData model currently used
	 * @param {sap.ui.generic.app.util.Queue} oQueue Optional HTTP request queue
	 * @throws {Error} Throws an error if no model is handed over as input parameter
	 */
	var DraftController = BaseController.extend("sap.ui.generic.app.transaction.DraftController", {
		metadata: {
			publicMethods: [
				"getDraftContext", "getDraftForActiveEntity", "createNewDraftEntity", "createEditDraftEntity", "validateDraftEntity", "prepareDraft", "prepareDraftEntity", "saveAndPrepareDraftEntity", "activateDraftEntity", "isActiveEntity", "hasActiveEntity", "destroy" // EXC_JSHINT_037
			]
		},

		constructor: function(oModel, oQueue) {
			BaseController.apply(this, [
				oModel, oQueue
			]);
			this.sName = "sap.ui.generic.app.transaction.DraftController";
			this._oContext = null;
		}
	});

	/**
	 * Returns the current draft context instance. If no instance exists, it is created lazily.
	 * 
	 * @returns {sap.ui.generic.app.transaction.DraftContext} The current draft context instance
	 * @public
	 */
	DraftController.prototype.getDraftContext = function() {
		if (!this._oContext) {
			this._oContext = new DraftContext(this._oModel);
		}

		return this._oContext;
	};

	/**
	 * Creates a new draft instance.
	 * 
	 * @param {string} sEntitySet The name of the entity set
	 * @param {string} sPath Path identifying the new entity instance
	 * @param {map} mParameters Parameters to control the behavior of the request
	 * @param {string} mParameters.batchGroupId The ID of the batch group to use
	 * @param {string} mParameters.changeSetId The ID of the change set to use
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution
	 * @throws {Error} Throws an error if no entity set is handed over as input parameter
	 * @private
	 */
	DraftController.prototype.createDraft = function(sEntitySet, sPath, mParameters) {
		var that = this;

		if (!sEntitySet) {
			throw new Error("No entity set");
		}

		mParameters = mParameters || {};

		return new Promise(function(resolve, reject) {
			var fSuccess = function(oData, oResponse) {
				resolve({
					responseData: oData,
					httpResponse: oResponse
				});
			};

			that._oModel.createEntry(sPath, {
				success: fSuccess,
				error: reject,
				batchGroupId: mParameters.batchGroupId,
				changeSetId: mParameters.changeSetId
			});
		});
	};

	/**
	 * Validates a draft in the back-end.
	 * 
	 * @param {sap.ui.model.Context} oContext The given binding context
	 * @param {map} mParameters Parameters to control the behavior
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution
	 * @throws {Error} Throws an error if no context is handed over as input parameter or if the function import does not exist or the action input
	 *         parameters are invalid
	 * @private
	 */
	DraftController.prototype.validateDraft = function(oContext, mParameters) {
		var oImport = this.getDraftContext().getODataDraftFunctionImportName(oContext, "ValidationFunction");
		return this._callAction(oImport, oContext, mParameters);
	};

	/**
	 * Prepares a draft in the back-end.
	 * 
	 * @param {sap.ui.model.Context} oContext The given binding context
	 * @param {map} mParameters Parameters to control the behavior
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution
	 * @throws {Error} Throws an error if no context is handed over as input parameter or if the function import does not exist or the action input
	 *         parameters are invalid
	 * @private
	 */
	DraftController.prototype.prepareDraft = function(oContext, mParameters) {
		var oImport;

		mParameters = mParameters || {};
		mParameters.urlParameters = mParameters.urlParameters || {};

		oImport = this.getDraftContext().getODataDraftFunctionImportName(oContext, "PreparationAction");
		return this._callAction(oImport, oContext, mParameters);
	};

	/**
	 * Activates a draft in the back-end.
	 * 
	 * @param {sap.ui.model.Context} oContext The given binding context
	 * @param {map} mParameters Parameters to control the behavior
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution
	 * @throws {Error} Throws an error if no context is handed over as input parameter or if the function import does not exist or the action input
	 *         parameters are invalid
	 * @private
	 */
	DraftController.prototype.activateDraft = function(oContext, mParameters) {
		var oImport = this.getDraftContext().getODataDraftFunctionImportName(oContext, "ActivationAction");
		return this._callAction(oImport, oContext, mParameters);
	};

	/**
	 * Creates an edit draft in the back-end.
	 * 
	 * @param {sap.ui.model.Context} oContext The given binding context
	 * @param {map} mParameters Parameters to control the behavior
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution
	 * @throws {Error} Throws an error if no context is handed over as input parameter or if the function import does not exist or the action input
	 *         parameters are invalid
	 * @private
	 */
	DraftController.prototype.editDraft = function(oContext, mParameters) {
		var oImport = this.getDraftContext().getODataDraftFunctionImportName(oContext, "EditAction");
		return this._callAction(oImport, oContext, mParameters);
	};

	/**
	 * Removes a draft in the back-end.
	 * 
	 * @param {sap.ui.model.Context} oContext The given binding context
	 * @param {map} mParameters Parameters to control the behavior
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution
	 * @throws {Error} Throws an error if no context is handed over as input parameter
	 * @private
	 */
	DraftController.prototype.discardDraft = function(oContext, mParameters) {
		if (!oContext) {
			throw new Error("No context");
		}

		return this._remove(oContext.getPath(), mParameters);
	};

	/**
	 * Retrieves a possibly existing draft entity for the given active entity using the binding context of the active entity from the back-end.
	 * 
	 * @param {sap.ui.model.Context} oContext The binding context of the active entity
	 * @param {map} mParameters Parameters to control the behavior
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution
	 * @throws {Error} Throws an error if no context is handed over as input parameter
	 * @private
	 * @since 1.32.0
	 */
	DraftController.prototype.getDraftForActive = function(oContext, mParameters) {
		var that = this;
		
		if (!oContext) {
			throw new Error("No context");
		}
		
		mParameters = mParameters || {};
		mParameters.urlParameters = {
			"$expand": "SiblingEntity"
		};
		
		return this._read(oContext.getPath(), mParameters).then(function(oResponse) {			
			if (oResponse.responseData && oResponse.responseData.hasOwnProperty("SiblingEntity")) {
				oResponse.context = that._oModel.getContext("/" + that._oModel.getKey(oResponse.responseData.SiblingEntity));
				return oResponse;
			}
			
			throw new Error("No draft entity could be found");
		});		
	};

	/**
	 * Retrieves a possibly existing draft entity for the given active entity using the binding context of the active entity from the back-end.
	 * 
	 * @param {sap.ui.model.Context} oContext The binding context of the active entity
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution
	 * @throws {Error} Throws an error if no context is handed over as input parameter
	 * @public
	 * @since 1.32.0
	 */
	DraftController.prototype.getDraftForActiveEntity = function(oContext) {
		var oPromise, oPromise2, that = this, mParameters = {
			batchGroupId: "Changes",
			changeSetId: "Changes",
			noShowSuccessToast: true,
			forceSubmit: true
		};	
		
		oPromise = this.getDraftForActive(oContext, mParameters).then(function(oResponse) {			
			return oResponse;
		}, function(oResponse) {
			throw that._normalizeError(oResponse);
		});
		oPromise2 = this.triggerSubmitChanges(mParameters);
		
		// continue, if all "sub-ordinate" promises have been resolved.
		return this._returnPromiseAll([
			oPromise, oPromise2
		]);		
	};
	
	/**
	 * Creates a new edit draft on the client and sends it to the back-end. Additionally, possible changes that have been collected on the client are
	 * sent to the back-end.
	 * 
	 * @param {string} sEntitySet The name of the entity set
	 * @param {string} sPath Path identifying the new entity instance
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution of the request
	 * @public
	 */
	DraftController.prototype.createNewDraftEntity = function(sEntitySet, sPath) {
		var oPromise, oPromise2, that = this, mParameters = {
			batchGroupId: "Changes",
			changeSetId: "Changes",
			noShowSuccessToast: true,
			forceSubmit: true,
			failedMsg: "New draft document could not be created"
		};

		oPromise = this.createDraft(sEntitySet, sPath, mParameters).then(function(oResponse) {
			return that._normalizeResponse(oResponse, true);
		}, function(oResponse) {
			var oResponseOut = that._normalizeError(oResponse);
			throw oResponseOut;
		});
		oPromise2 = this.triggerSubmitChanges(mParameters).then(function() {
			return oPromise.then(function(oResponse) {
				var bIsActiveEntity, bHasDraftEntity, oResponseEntity, oResponseOut = that._normalizeResponse(oResponse, true);

				// mind nesting of promises and error situation.
				if (oResponseOut.context) {
					oResponseEntity = oResponseOut.context.getObject();
				}

				if (!oResponseEntity) {
					jQuery.sap.log.error("Activate function returned no entity");
					return Promise.reject(new Error("Activate function returned no entity"));
				}
				bIsActiveEntity = that._oDraftUtil.isActiveEntity(oResponseEntity);
				if (bIsActiveEntity) {
					jQuery.sap.log.error("New draft entity is not marked as draft - isActiveEntity = " + bIsActiveEntity);
					return Promise.reject("New draft entity is not marked as draft - isActiveEntity = " + bIsActiveEntity);
				}
				bHasDraftEntity = that._oDraftUtil.hasDraftEntity(oResponseEntity);
				if (bHasDraftEntity) {
					jQuery.sap.log.error("Wrong value for HasTwin of new draft entity - HasDraftEntity = " + bHasDraftEntity);
					return Promise.reject(new Error("Wrong value for HasTwin of new draft entity - HasDraftEntity = " + bHasDraftEntity));
				}

				return oResponseOut;
			});
		});

		// continue, if all "sub-ordinate" promises have been resolved.
		return this._returnPromiseAll([
			oPromise, oPromise2
		]);
	};

	/**
	 * Creates an edit draft in the back-end. Additionally, possible changes that have been collected on the client are sent to the back-end.
	 * 
	 * @param {sap.ui.model.Context} oContext The given binding context
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution
	 * @public
	 */
	DraftController.prototype.createEditDraftEntity = function(oContext) {
		var oPromise, oPromise2, that = this, mParameters = {
			batchGroupId: "Changes",
			changeSetId: "Changes",
			successMsg: "Draft for document was created",
			failedMsg: "Could not create draft for document",
			forceSubmit: true,
			context: oContext
		};

		oPromise = this.editDraft(oContext, mParameters).then(function(oResponse) {
			var bIsActiveEntity, oResponseEntity, oResponseOut;

			oResponseOut = that._normalizeResponse(oResponse, true);

			// mind nesting of promises and error situation.
			if (oResponseOut.context) {
				oResponseEntity = oResponseOut.context.getObject();
			}

			if (!oResponseEntity) {
				jQuery.sap.log.error("Activate function returned no entity");
				return Promise.reject(new Error("Activate function returned no entity"));
			}

			bIsActiveEntity = that._oDraftUtil.isActiveEntity(oResponseEntity);
			if (bIsActiveEntity) {
				jQuery.sap.log.error("Edit function returned an entity which is not a draft instance - IsActiveEntity = " + bIsActiveEntity);
				return Promise.reject(new Error("Returned entity ist not a draft instance - IsActiveEntity = " + bIsActiveEntity));
			}

			return oResponseOut;
		}, function(oResponse) {
			var oResponseOut = that._normalizeError(oResponse);
			throw oResponseOut;
		});
		oPromise2 = this.triggerSubmitChanges(mParameters);

		// continue, if all "sub-ordinate" promises have been resolved.
		return this._returnPromiseAll([
			oPromise, oPromise2
		]);
	};

	/**
	 * Submits changes to the back-end and prepares an existing draft entity in the back-end for later activation by invoking the validation action.
	 * 
	 * @param {sap.ui.model.Context} oContext The given binding context
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution
	 * @public
	 */
	DraftController.prototype.validateDraftEntity = function(oContext) {
		var oPromise, oPromise2, that = this, mParameters = {
			batchGroupId: "Changes",
			changeSetId: "Changes",
			context: oContext,
			forceSubmit: true
		};

		oPromise = this.validateDraft(oContext, mParameters).then(function(oResponse) {
			return that._normalizeResponse(oResponse, true);
		}, function(oResponse) {
			var oResponseOut = that._normalizeError(oResponse);
			throw oResponseOut;
		});
		oPromise2 = this.triggerSubmitChanges(mParameters);

		// continue, if all "sub-ordinate" promises have been resolved.
		return this._returnPromiseAll([
			oPromise, oPromise2
		]);
	};

	/**
	 * Submits changes to the back-end and prepares a draft entity in the back-end for later activation by invoking the preparation action.
	 * 
	 * @param {sap.ui.model.Context} oContext The given binding context
	 * @param {map} mParameters Parameters to control the behavior of the request
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution
	 * @public
	 */
	DraftController.prototype.saveAndPrepareDraftEntity = function(oContext, mParameters) {
		var oPromise, oPromise2, that = this;

		mParameters = mParameters || {};
		mParameters.batchGroupId = "Changes";
		mParameters.changeSetId = "Changes";
		mParameters.successMsg = "Saved";
		mParameters.failedMsg = "Save failed";
		mParameters.context = oContext;
		mParameters.forceSubmit = true;

		oPromise = this.prepareDraft(oContext, mParameters).then(function(oResponse) {
			var bIsActiveEntity, oResponseEntity, oResponseOut;

			// mind nesting of promises and error situation.
			oResponseOut = that._normalizeResponse(oResponse, true);

			if (oResponseOut.context) {
				oResponseEntity = oResponseOut.context.getObject();
			}

			if (!oResponseEntity) {
				jQuery.sap.log.error("Activate function returned no entity");
				return Promise.reject(new Error("Activate function returned no entity"));
			}

			bIsActiveEntity = that._oDraftUtil.isActiveEntity(oResponseEntity);
			if (bIsActiveEntity) {
				jQuery.sap.log.error("Prepare function returned an entity which is not a draft instance - IsActiveEntity = " + bIsActiveEntity);
				return Promise.reject(new Error("Returned entity ist not a draft instance - IsActiveEntity = " + bIsActiveEntity));
			}

			return oResponseOut;
		}, function(oResponse) {
			var oResponseOut = that._normalizeError(oResponse);
			throw oResponseOut;
		});

		if (mParameters.binding) {
			mParameters.binding.refresh(true);
		}

		oPromise2 = this.triggerSubmitChanges(mParameters);

		// continue, if all "sub-ordinate" promises have been resolved.
		return this._returnPromiseAll([
			oPromise, oPromise2
		]);
	};

	/**
	 * Submits changes to the back-end and prepares an existing draft entity in the back-end for later activation by invoking the preparation action.
	 * 
	 * @param {sap.ui.model.Context} oContext The given binding context
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution
	 * @public
	 */
	DraftController.prototype.prepareDraftEntity = function(oContext) {
		var that = this;

		return this.prepareDraft(oContext).then(function(oResponse) {
			var oResponseOut, oResponseEntity;

			oResponseOut = that._normalizeResponse(oResponse, true);
			oResponseEntity = oResponseOut.context.getObject();

			if (that._oDraftUtil.isActiveEntity(oResponseEntity)) {
				jQuery.sap.log.error("Prepare function returned an entity which is not a draft instance - IsActiveEntity = " + true);
				return Promise.reject(new Error("Returned entity ist not a draft instance - IsActiveEntity = " + true));
			}

			return oResponseOut;
		}, function(oResponse) {
			var oResponseOut = that._normalizeError(oResponse);
			throw oResponseOut;
		});
	};

	/**
	 * Submits changes to the back-end and activates a draft entity in the back-end.
	 * 
	 * @param {sap.ui.model.Context} oContext The given binding context
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution
	 * @public
	 */
	DraftController.prototype.activateDraftEntity = function(oContext) {
		var oPromise, oPromise2, that = this, mParameters = {
			batchGroupId: "Changes",
			changeSetId: "Changes",
			successMsg: "Document activated",
			failedMsg: "Activation of document failed",
			forceSubmit: true,
			context: oContext
		};

		oPromise = this.activateDraft(oContext, mParameters).then(function(oResponse) {
			var bIsActiveEntity, oResponseEntity, oResponseOut;

			// mind nesting of promises and error situation.
			oResponseOut = that._normalizeResponse(oResponse, true);

			if (oResponseOut.context) {
				oResponseEntity = oResponseOut.context.getObject();
			}

			if (!oResponseEntity) {
				jQuery.sap.log.error("Activate function returned no entity");
				return Promise.reject(new Error("Activate function returned no entity"));
			}

			bIsActiveEntity = that._oDraftUtil.isActiveEntity(oResponseEntity);
			if (!bIsActiveEntity) {
				jQuery.sap.log.error("Activate function returned an entity which is still a draft instance - IsActiveEntity = " + bIsActiveEntity);
				return Promise.reject(new Error("Returned entity is still a draft instance - IsActiveEntity = " + bIsActiveEntity));
			}

			return oResponseOut;
		}, function(oResponse) {
			var oResponseOut = that._normalizeError(oResponse);
			throw oResponseOut;
		});
		oPromise2 = this.triggerSubmitChanges(mParameters);

		// continue, if all "sub-ordinate" promises have been resolved.
		return this._returnPromiseAll([
			oPromise, oPromise2
		]);
	};

	/**
	 * Checks whether an entity set is active. The entity set name is derived from the given binding context
	 * 
	 * @param {sap.ui.model.Context} oContext The given binding context
	 * @returns {boolean} <code>true</code>, if a given entity set is active, <code>false</code> otherwise
	 * @throws {Error} Throws an error if no context is handed over as input parameter
	 * @public
	 */
	DraftController.prototype.isActiveEntity = function(oContext) {
		if (this.getDraftContext().hasDraft(oContext)) {
			return this._oDraftUtil.isActiveEntity(oContext.getObject());
		}

		return true;
	};

	/**
	 * Checks whether an entity has an active entity associated.
	 * 
	 * @param {sap.ui.model.Context} oContext The given binding context
	 * @returns {boolean} <code>true</code>, if an active entity exists, <code>false</code> otherwise
	 * @public
	 * @since 1.32.0
	 */
	DraftController.prototype.hasActiveEntity = function(oContext) {
		return this._oDraftUtil.hasActiveEntity(oContext.getObject());
	};

	/**
	 * Frees all resources claimed during the life-time of this instance.
	 * 
	 * @public
	 */
	DraftController.prototype.destroy = function() { // EXC_JSLINT_021
		if (this._oContext) {
			this._oContext.destroy();
		}

		this._oContext = null;
		this._oModel = null;

		BaseController.prototype.destroy.apply(this, []);
	};

	return DraftController;

}, true);

}; // end of sap/ui/generic/app/transaction/DraftController.js
if ( !jQuery.sap.isDeclared('sap.ui.generic.app.transaction.TransactionController') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.generic.app.transaction.TransactionController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/generic/app/transaction/TransactionController",[	"jquery.sap.global", "./BaseController", "./DraftController", "sap/ui/generic/app/util/ModelUtil" ], function(jQuery, BaseController, DraftController, ModelUtil) { // EXC_JSHINT_037 // EXC_JSHINT_034
	"use strict";

	/* global Promise */

	/**
	 * Constructor for a new transaction controller instance.
	 * 
	 * @public
	 * @class Assuming state-less communication, each single data modification request (or change set in an OData $batch request) is a
	 *        "mini-transaction", which saves data to the database. The class allows you to submit changes, invoke actions, OData CRUD operations in general,
	 *        and trigger client-side validations. It ensures concurrency control and correct ETag handling.
	 *        
	 *        The class gives access to runtime draft handling for applications. Additionally error handling capabilities are provided to notify client 
	 *        implementations of error situations. The event <code>fatalError</code> is thrown, if fatal errors occur during execution of OData requests.
	 * @author SAP SE
	 * @version 1.32.7
	 * @since 1.30.0
	 * @alias sap.ui.generic.app.transaction.TransactionController
	 * @param {sap.ui.model.odata.ODataModel} oModel The OData model currently used
	 * @param {sap.ui.generic.app.util.Queue} oQueue Optional HTTP request queue
	 * @param {map} mParams Optional configuration parameters
	 * @param {boolean} mParams.noBatchGroups Suppresses creation of batch groups
	 * @throws {Error} Throws an error if no model is handed over as input parameter
	 */
	var TransactionController = BaseController.extend("sap.ui.generic.app.transaction.TransactionController", {
		metadata: {
			publicMethods: [
				"destroy", "setBatchStrategy", "getDraftController", "invokeAction", "editEntity", "deleteEntity", "propertyChanged", "hasClientValidationErrors", "resetChanges" // EXC_JSHINT_037
			]
		},

		constructor: function(oModel, oQueue, mParams) {
			BaseController.apply(this, [ oModel, oQueue ]);
			this.sName = "sap.ui.generic.app.transaction.TransactionController";
			this._oDraft = null;

			// make sure changes are sent by submitChanges only.
			mParams = mParams || {};
			
			if (!mParams.noBatchGroups) {
				oModel.setDeferredBatchGroups([
					"Changes"
				]);
	
				// make sure one change set is used by default for every change.
				oModel.setChangeBatchGroups({
					"*": {
						batchGroupId: "Changes",
						changeSetId: "Changes",
						single: false
					}
				});
			}
	
			return this.getInterface();
		}
	});

	/**
	 * Sets the strategy for batch handling. Currently all batch operations are sent in one batch group, but alternatively one can
	 * trigger sending all operations in their own batch group.
	 * 
	 * @param {boolean} bSingle If set to <code>true</code>, all batch operations are sent in their own batch group, otherwise all operations are
	 *        sent in one batch group
	 * @private
	 * @deprecated Since 1.32.0
	 */
	TransactionController.prototype.setBatchStrategy = function(bSingle) {
		var n, mChangeBatchGroups = this._oModel.getChangeBatchGroups();

		for (n in mChangeBatchGroups) { // EXC_JSHINT_041
			mChangeBatchGroups[n].single = bSingle;
		}

		this._oModel.setChangeBatchGroups(mChangeBatchGroups);
	};

	/**
	 * Returns the current draft controller instance.
	 * 
	 * @returns {sap.ui.generic.app.transaction.DraftController} The draft controller instance
	 * @public
	 */
	TransactionController.prototype.getDraftController = function() {
		// create the draft controller lazily.
		if (!this._oDraft) {
			this._oDraft = new DraftController(this._oModel, this._oQueue);
		}

		return this._oDraft;
	};

	/**
	 * Prepares an entity for editing. If the entity is active and draft enabled, a new draft document is created. If not, the control is
	 * automatically returned to the caller of the method by returning a resolved promise.
	 * 
	 * @param {sap.ui.model.Context} oContext The given binding context
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution
	 * @public
	 */
	TransactionController.prototype.editEntity = function(oContext) {
		var that = this;

		return new Promise(function(resolve) {
			var oDraftContext, sEntitySet;
			
			oDraftContext = that.getDraftController().getDraftContext();
			sEntitySet = ModelUtil.getEntitySetFromContext(oContext);
			
			if (oDraftContext.isDraftEnabled(sEntitySet) && that._oDraftUtil.isActiveEntity(oContext.getObject())) {
				return resolve(that.getDraftController().createEditDraftEntity(oContext));
			}

			return resolve({
				context: oContext
			});
		});
	};

	/**
	 * Submits changes to the back-end and deletes an entity in the back-end. This entity can be either a draft entity or an active entity.
	 * 
	 * @param {sap.ui.model.Context} oContext The given binding context
	 * @param {map} mParameters Parameters to control the behavior of the request
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution
	 * @public
	 */
	TransactionController.prototype.deleteEntity = function(oContext, mParameters) {
		var oPromise, oPromise2, that = this;

		mParameters = mParameters || {};
		jQuery.extend(mParameters, {
			batchGroupId: "Changes",
			changeSetId: "Changes",
			successMsg: "Changes were discarded",
			failedMsg: "Discarding of changes failed",
			forceSubmit: true,
			context: oContext
		});

		oPromise = this._remove(oContext.getPath(), mParameters).then(function(oResponse) {
			return that._normalizeResponse(oResponse, true);
		}, function(oResponse) {
			var oResponseOut = that._normalizeError(oResponse);
			throw oResponseOut;
		});
		oPromise2 = this.triggerSubmitChanges(mParameters);

		// continue, if all "sub-ordinate" promises have been resolved.
		return this._returnPromiseAll([
			oPromise, oPromise2
		]);
	};

	/**
	 * Invokes an action with the given name and submits changes to the back-end.
	 * 
	 * @param {string} sFunctionName The name of the function or action
	 * @param {sap.ui.model.Context} oContext The given binding context
	 * @param {map} mParameters Parameters to control the behavior of the request
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution of the action
	 * @throws {Error} Throws an error if the OData function import does not exist or the action input parameters are invalid
	 * @public
	 */
	TransactionController.prototype.invokeAction = function(sFunctionName, oContext, mParameters) {
		var that = this, oPromise, oPromise2;

		// check for client message.
		oPromise = this.hasClientMessages();

		if (oPromise) {
			return oPromise;
		}

		mParameters = {
			batchGroupId: "Changes",
			changeSetId: "Changes",
			successMsg: "Call of action succeeded",
			failedMsg: "Call of action failed",
			urlParameters: mParameters.urlParameters,
			forceSubmit: true,
			context: oContext
		};

		oPromise = this._callAction(sFunctionName, oContext, mParameters).then(function(oResponse) {
			return that._normalizeResponse(oResponse, true);
		}, function(oResponse) {
			var oOut = that._normalizeError(oResponse);
			throw oOut;
		});
		
        // TODO: check for side effects
        // if no side effects are annotated refresh the complete model
        this._oModel.refresh(true, false, "Changes");
		
		oPromise2 = this.triggerSubmitChanges(mParameters);

		// continue, if all "sub-ordinate" promises have been resolved.
		return this._returnPromiseAll([
			oPromise, oPromise2
		]);
	};

	/**
	 * Resets changes that have been tracked by the current instance of <code>sap.ui.model.odata.v2.ODatatModel</code>. These changes have been
	 * created by invoking the <code>setProperty</code> method of <code>sap.ui.model.odata.v2.ODatatModel</code>.
	 * 
	 * @param{array} aKeys Optional array of keys that have to be reset. If no array is passed all changes will be reset.
	 * @public
	 */
	TransactionController.prototype.resetChanges = function(aKeys) {
		this._oModel.resetChanges(aKeys);
	};
	
	/**
	 * Notifies the transaction controller of a change of a property. Please note that the method is not meant for public use currently.
	 * It is experimental.
	 * 
	 * @param {string} sEntitySet The name of the entity set
	 * @param {string} sProperty Path identifying the changed property
	 * @param {object} oBinding The binding associated with the changed property
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution of the action
	 * @deprecated
	 * @private
	 */
	TransactionController.prototype.propertyChanged = function(sEntitySet, sProperty, oBinding) {
		var oDraftContext, oContext, mParameters = {
			batchGroupId: "Changes",
			changeSetId: "Changes",
			binding: oBinding
		};

		oDraftContext = this.getDraftController().getDraftContext();

		// if (this.hasClientValidationErrors()) {
		// ask core guys how to check for client validation errors.
		// if (bUpdateOnChange) {
		// // what to do? inform user?
		// }
		// } else {
		if (oDraftContext.checkUpdateOnChange(sEntitySet, sProperty)) {
			oContext = oBinding.getBoundContext();

			if (oDraftContext.hasDraftPreparationAction(oContext)) {
				return this.getDraftController().saveAndPrepareDraftEntity(oContext, mParameters);
			}

			mParameters.onlyIfPending = true;
			return this.triggerSubmitChanges(mParameters);
		}

		mParameters.onlyIfPending = true;
		mParameters.noShowResponse = true;
		mParameters.noBlockUI = true;
		return this.triggerSubmitChanges(mParameters);
		// }
	};

	/**
	 * Frees all resources claimed during the life-time of this instance.
	 * 
	 * @public
	 */
	TransactionController.prototype.destroy = function() {
		BaseController.prototype.destroy.apply(this, []);

		if (this._oDraft) {
			this._oDraft.destroy();
		}

		this._oDraft = null;
	};

	return TransactionController;

}, true);

}; // end of sap/ui/generic/app/transaction/TransactionController.js
if ( !jQuery.sap.isDeclared('sap.ui.generic.app.AppComponent') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// ----------------------------------------------------------------------------------
// Provides base class sap.ui.generic.app.AppComponent for all generic app components
// ----------------------------------------------------------------------------------
jQuery.sap.declare('sap.ui.generic.app.AppComponent'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained
jQuery.sap.require('sap.m.NavContainer'); // unlisted dependency retained
sap.ui.define("sap/ui/generic/app/AppComponent",[
	'jquery.sap.global', 'sap/ui/core/UIComponent', 'sap/ui/generic/app/transaction/TransactionController', 'sap/ui/generic/app/navigation/NavigationController', 'sap/m/NavContainer'
], function(jQuery, UIComponent, TransactionController, NavigationController, NavContainer) {
	"use strict";

	/**
	 * Base Class for application components.
	 * 
	 * @class The AppComponent class creates and initializes a new application component. It boots up the SmartTemplate application, creates the
	 *        {@link sap.ui.generic.app.navigation.NavigationController NavigationController}, {@link sap.ui.generic.app.transaction.TransactionController TransactionController} and
	 *        {@link sap.m.NavContainer NavContainer}, which embeds Smart Template components defined in the app descriptor.
	 * @public
	 * @extends sap.ui.core.UIComponent
	 * @version 1.32.7
	 * @since 1.30.0
	 * @alias sap.ui.generic.app.AppComponent
	 */
	var AppComponent = UIComponent.extend("sap.ui.generic.app.AppComponent", {
		metadata: {
			config: {
				"title": "SAP UI Application Component", // TODO: This should be set from App descriptor
				fullWidth: true
			},
			routing: {
				config: {
					routerClass: "sap.m.routing.Router",
					viewType: "XML",
					viewPath: "",
					clearTarget: false
				},
				routes: []
			},
			library: "sap.ui.generic.app"
		}
	});

	/**
	 * Initializes the AppComponent instance after creation.
	 * 
	 * @protected
	 */
	AppComponent.prototype.init = function() {
		var oModel;
		// call overwritten init (calls createContent)
		sap.ui.core.UIComponent.prototype.init.apply(this, arguments);

		oModel = this.getModel();
		if (oModel) {
			// workaround until Modules Factory is available
			this._oTransactionController = new TransactionController(oModel);
			this._oNavigationController = new NavigationController(this);
		}
	};

	/**
	 * Creates the content of the component.
	 * 
	 * @public
	 * @returns {Object} the root view
	 */
	AppComponent.prototype.createContent = function() {
		// assign message model
		this.setModel(sap.ui.getCore().getMessageManager().getMessageModel(), "message");

		this._oNavContainer = new NavContainer({
			id: this.getId() + '-appContent'
		});

		if (sap.ui.Device.system.desktop) {
			this._oNavContainer.addStyleClass("sapUiSizeCompact");
		}

		// done
		return this._oNavContainer;
	};

	/**
	 * Returns the application configuration metadata that has been created and/or specified in the app descriptor.
	 * 
	 * @returns {Object} the application configuration
	 * @public
	 */
	AppComponent.prototype.getConfig = function() {
		var oConfig, oMeta;
		if (!this._oConfig) {
			oMeta = this.getMetadata();
			oConfig = oMeta.getManifestEntry('sap.ui.generic.app');
			this._oConfig = oConfig;
		}
		return this._oConfig;
	};

	/**
	 * Returns the reference to the transaction controller instance that has been created by AppComponent.
	 * 
	 * @returns {sap.ui.generic.app.transaction.TransactionController} the transaction controller instance
	 * @public
	 */
	AppComponent.prototype.getTransactionController = function() {
		return this._oTransactionController;
	};

	/**
	 * Returns the reference to the navigation controller instance that has been created by AppComponent.
	 * 
	 * @returns {sap.ui.generic.app.navigation.NavigationController} the navigation controller instance
	 * @public
	 */
	AppComponent.prototype.getNavigationController = function() {
		return this._oNavigationController;
	};

	/**
	 * Cleans up the component instance before destruction.
	 * 
	 * @protected
	 */
	AppComponent.prototype.exit = function() {
		if (this._oNavContainer) {
			this._oNavContainer.destroy();
		}
		this._oNavContainer = null;
		if (this._oTransactionController) {
			this._oTransactionController.destroy();
		}
		this._oTransactionController = null;
		if (this._oNavigationController) {
			this._oNavigationController.destroy();
		}
		this._oNavigationController = null;
	};

	return AppComponent;

}, /* bExport= */true);

}; // end of sap/ui/generic/app/AppComponent.js
if ( !jQuery.sap.isDeclared('sap.ui.generic.app.ApplicationController') ) {
/*
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.generic.app.ApplicationController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/generic/app/ApplicationController",[	"jquery.sap.global", "./transaction/BaseController", "./transaction/TransactionController" ], function(jQuery, BaseController, TransactionController) { // EXC_JSHINT_037 // EXC_JSHINT_034
	"use strict";

	/* global Promise */
	
	/**
	 * Constructor for application controller.
	 * 
	 * @private
	 * @class Application Controller.
	 * @author SAP SE
	 * @version 1.32.7
	 * @since 1.32.0
	 * @alias sap.ui.generic.app.ApplicationController
	 * @param {sap.ui.model.odata.v2.ODataModel} oModel The OData model currently used
	 * @param {sap.ui.core.mvc.View} oView The current view
	 * @throws {Error} If no model is handed over as input parameter
	 */
	var ApplicationController = BaseController.extend("sap.ui.generic.app.ApplicationController", {
		constructor: function(oModel, oView) {
			var that = this;
			
			// inherit from base controller.
			BaseController.apply(this, [ oModel ]);
			
			// set a reference to the view.
			this._oView = oView;
			
			// initialize the OData model.
			this._initModel(oModel);	
			
			// attach to the field group validation event.
			oView.attachValidateFieldGroup(function(oEvent) {
				var sID, oID;
				
				if (oEvent.mParameters.fieldGroupIds && oEvent.mParameters.fieldGroupIds.length) {
					sID = oEvent.mParameters.fieldGroupIds[0];
					oID = that._oView.data(sID);
				}
				
				if (oID) {
					setTimeout(function() {
						that._onFieldGroupLeft(sID, oID);
					});
				}
			});
		}
	});

	/**
	 * Parameterizes the OData model.
	 * 
	 * @param {sap.ui.model.odata.ODataModel} oModel The OData model currently used
	 * @private
	 */
	ApplicationController.prototype._initModel = function(oModel) {
		// set binding mode and refresh after change.
		oModel.setDefaultBindingMode(sap.ui.model.BindingMode.TwoWay);
		oModel.setRefreshAfterChange(false);
		
		// set the batch groups:
		// one should be deferred, as it is for batching actions and so
		// the other should be to sync changes immediately and should be
		// created second to make it "default".
		oModel.setDeferredBatchGroups([
			"Changes"
		]);
		oModel.setChangeBatchGroups({
			"*": {
				batchGroupId: "Changes",
				changeSetId: "Changes",
				single: false
			}
		});		
		oModel.setChangeBatchGroups({
			"*": {
				batchGroupId: "Sync",
				changeSetId: "Sync",
				single: false
			}
		});	
	};
	
	/**
	 * Event handler for field-group-validation event of the view.
	 * 
	 * @param {string} sID Field group id
	 * @param {object} oID Field group id
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution of the submit
	 * @private
	 */
	ApplicationController.prototype._onFieldGroupLeft = function(sID, oID) {
		var oContext, oSideEffect, fNoBusy, aControls, that = this, mParams = {
			batchGroupId: "Changes",
			changeSetId: "Changes",
			noShowSuccessToast: true,
			forceSubmit: true,	
			noBlockUI: true,
			urlParameters: {}
		};

		// busy animation.
		aControls = this._oView.getControlsByFieldGroupId(sID);
		this._setFieldGroupBusy(aControls, true);
				
		// set the side effects qualifier as action input.
		mParams.urlParameters.SideEffectsQualifier = oID.name.replace("com.sap.vocabularies.Common.v1.SideEffects", "");		
		
		if (mParams.urlParameters.SideEffectsQualifier.indexOf("#") === 0) {
			mParams.urlParameters.SideEffectsQualifier = mParams.urlParameters.SideEffectsQualifier.replace("#", "");
		}
		
		// create a new context and get the side effect.		
		oContext = this._oModel.getContext(oID.context);
		oSideEffect = this._getSideEffect(oID);
				
		// execute the side effect.
		fNoBusy = function() {
			that._setFieldGroupBusy(aControls, false);
		};
		return this._executeSideEffects(oSideEffect, oContext, mParams).then(fNoBusy, fNoBusy);	
	};

	/**
	 * Sets busy indicator for a field group.
	 * 
	 * @param {array} aControls Controls in field group
	 * @param {boolean} bBusy Flag for busy indicator state
	 * @private
	 */
	ApplicationController.prototype._setFieldGroupBusy = function(aControls, bBusy) {
		var len, i, oControl;
		
		if (aControls) {
			len = aControls.length;
		}
		
		for (i = 0; i < len; i++) {
			oControl = aControls[i];
			oControl.setBusy(bBusy);
		}
	};

	/**
	 * Executes a side effects annotation.
	 * 
	 * @param {object} oSideEffects The side effects annotation
	 * @param {sap.ui.model.Context} oContext The given binding context
	 * @param {map} mParameters Parameters to control the behavior of the request
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution of the submit
	 * @private
	 */
	ApplicationController.prototype._executeSideEffects = function(oSideEffects, oContext, mParameters) {
		// trigger prepare function
		this.getTransactionController().getDraftController().prepareDraft(oContext, mParameters);
		
		// trigger read.
		this._setSelect(oSideEffects, mParameters);
		this._read(oContext.getPath(), mParameters);
		
		// trigger flush.
		return this.triggerSubmitChanges(mParameters);			
	};
	
	/**
	 * Creates a $select statement for re-reading an entity based upon the side effects annotation.
	 * 
	 * @param {object} oSideEffects The side effects annotation
	 * @param {map} mParameters Parameters to control the behavior of the request
	 * @private
	 */
	ApplicationController.prototype._setSelect = function(oSideEffects, mParameters) {
		var i, len = 0, oTarget, sSelect = "$select=";
		
		if (oSideEffects.TargetProperties) {
			len = oSideEffects.TargetProperties.length;
			
			for (i = 0; i < len; i++) {
				if (i > 0) {
					sSelect = sSelect + ",";
				}
				
				oTarget = oSideEffects.TargetProperties[i];
				sSelect = sSelect + oTarget.PropertyPath;
			}
		}
		
		if (len > 0) {
			mParameters.urlParameters = [ sSelect ];
		}
	};
	
	/**
	 * Returns the side effect annotation for a given field group ID.
	 * 
	 * @param {object} oID Field group ID.
	 * @returns {object} The side effect annotation for a given ID
	 * @private
	 */
	ApplicationController.prototype._getSideEffect = function(oID) {
		var oMeta, oSet;
		
		oMeta = this._oModel.getMetaModel();
		oSet = oMeta.getODataEntitySet(oID.originName);
		
		return oSet[oID.name];
	};
	
	/**
	 * Returns the current transaction controller instance.
	 * 
	 * @returns {sap.ui.generic.app.transaction.TransactionController} The transaction controller instance
	 * @public
	 */
	ApplicationController.prototype.getTransactionController = function() {
		// create the transaction controller lazily.
		if (!this._oTransaction) {
			this._oTransaction = new TransactionController(this._oModel, this._oQueue, {
				noBatchGroups: true
			});
		}

		return this._oTransaction;
	};
	
	/**
	 * Frees all resources claimed during the life-time of this instance.
	 * 
	 * @public
	 */
	ApplicationController.prototype.destroy = function() {
		BaseController.prototype.destroy.apply(this, []);
		
		if (this._oTransaction) {
			this._oTransaction.destroy();
		}
		
		this._oView = null;
		this._oModel = null;
		this._oTransaction = null;
	};
	
	return ApplicationController;

}, true);
}; // end of sap/ui/generic/app/ApplicationController.js
