/* generated by jison-lex 0.3.4 */
define(["./OSDLConstants","rndrt/rnd"],
		function(OSDLConstants,rnd){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"moduleName":"OSDLLEX"},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
// define(["./OSDLConstants","../rndrt/Token","../rndrt/ErrorState","../rndrt/Category"],
//		function(OSDLConstants,Token,ErrorState,Category){

//                            var num = this.anyKeyword;
//                            var cat = Category.CAT_INCOMPLETE;
//                            this.m_input.push(new Token(num, "", cat, this.tok_begin, this.line, this.column, false, ErrorState.Correct, 0));

var codeOffset = function(_yy_) {
    return _yy_.matched.length + _yy_.yylloc.first_line - 1 - _yy_.match.length;
};
var newToken = function(t_num,t_text,t_category) {

//	var codeOffset = yy_.matched.length - yy_.match.length;
	return new rnd.Token(t_num,t_text,t_category, codeOffset(yy_), yy_.yylloc.first_line, yy_.yylloc.first_column+1, false, rnd.ErrorState.Correct, 0);
};

var newIdToken = function(t_text,t_tir) {
//	var codeOffset = yy_.matched.length - yy_.match.length;
	var numId = t_tir.getTokenIndex(t_text);
	if ( numId == -1 ) {
		return new rnd.Token(t_tir.getActualNUMID(),t_text,rnd.Category.CAT_UNDEF, codeOffset(yy_), yy_.yylloc.first_line, yy_.yylloc.first_column+1, false, rnd.ErrorState.Suspicious, 0);
	} else {
		return new rnd.Token(numId,t_text,rnd.Category.CAT_KEYWORD, codeOffset(yy_), yy_.yylloc.first_line, yy_.yylloc.first_column+1, false, rnd.ErrorState.Correct, 0);
	}
};

var newMultiplicityToken = function(t_text,t_tir) {
//	var codeOffset = yy_.matched.length - yy_.match.length;
    var multiplicityToken = {};
    multiplicityToken['"1"'] = OSDLConstants.MULTIPLICITY_ONE;
    multiplicityToken['"*"'] = OSDLConstants.MULTIPLICITY_MANY;
    multiplicityToken['"0..1"'] = OSDLConstants.MULTIPLICITY_ZERO_OR_ONE;
    multiplicityToken['"1..*"'] = OSDLConstants.MULTIPLICITY_ONE_OR_MORE;

	var numId = multiplicityToken[t_text];
	if ( numId == -1 ) {
		return new rnd.Token(t_tir.getActualNUMID(),t_text,rnd.Category.CAT_UNDEF, codeOffset(yy_), yy_.yylloc.first_line, yy_.yylloc.first_column+1, false, rnd.ErrorState.Suspicious, 0);
	} else {
		return new rnd.Token(numId,t_text,rnd.Category.CAT_KEYWORD, codeOffset(yy_), yy_.yylloc.first_line, yy_.yylloc.first_column+1, false, rnd.ErrorState.Correct, 0);
	}
};

var qstringBuffer = [];
var remarkBuffer = [];
var remarkFirstColumn = 0;


var literal_start = function(quoteSign) {
	this.qstringBuffer = [quoteSign];
    this.remarkFirstColumn = yy_.yylloc.first_column;
};

var literal_add = function(match) {
	this.qstringBuffer.push(match);
};

var quoted_id_add = function(match) {
	this.qstringBuffer.push(match);
};


var literal_get = function(quoteSign) {
	this.qstringBuffer.push(quoteSign);
    return this.qstringBuffer.join('');
};

var remark_start = function(remark) {
	this.remarkBuffer = [remark];
	this.remarkFirstColumn 	= yy_.yylloc.first_column;
};

var remark_add = function(match) {
	this.remarkBuffer.push(match);
};

var remark_get = function(remark) {
	this.remarkBuffer.push(remark);
    return this.remarkBuffer.join('');
};

var getRemarkFirstColumn = function() {
	return this.remarkFirstColumn;
};


var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: return newToken(OSDLConstants.NUM_COMMENT2, yy_.yytext, rnd.Category.CAT_COMMENT);
				 
case 1:
	console.log(yy_.yytext);
	this.pushState("xcc");
	remark_start(yy_.yytext);

case 2:  console.log(yy_.yytext);
    yy_.match 				= remark_get(yy_.yytext);
	yy_.yylloc.first_column = getRemarkFirstColumn();
	this.popState();	// remove state from stack
    return newToken(OSDLConstants.NUM_COMMENT1, yy_.match, rnd.Category.CAT_COMMENT); // return token with quoted string

case 3: console.log(yy_.yytext);
	remark_add(yy_.yytext);

break;
case 4:  console.log(yy_.yytext);
	remark_add(yy_.yytext); 

break;
case 5:  console.log(yy_.yytext);
	this.popState();
    return newToken(OSDLConstants.NUM_EOF, 'ENDOFFILE', rnd.Category.CAT_WS);

case 6: console.log(yy_.yytext);
							return newMultiplicityToken( yy_.yytext, this.TIR ); 
case 7: console.log(yy_.yytext);
							return newMultiplicityToken( yy_.yytext, this.TIR ); 
case 8: console.log(yy_.yytext);
							return newMultiplicityToken( yy_.yytext, this.TIR ); 
case 9: console.log(yy_.yytext);
							return newMultiplicityToken( yy_.yytext, this.TIR ); 
case 10: console.log(yy_.yytext);
								return newToken( OSDLConstants.NUM_REPOBJECT, yy_.yytext, rnd.Category.CAT_IDENTIFIER);
							
case 11: console.log(yy_.yytext);
								return newToken( OSDLConstants.NUM_CATOBJECT, yy_.yytext, rnd.Category.CAT_IDENTIFIER);
							
case 12:
    this.pushState("xd");
    literal_start('"');

break;
case 13:
    yy_.match = literal_get('"');
    yy_.yylloc.first_column = getRemarkFirstColumn();
	this.popState();	// remove state from stack
    return newToken(OSDLConstants.NUM_QUOTED_ID, yy_.match, rnd.Category.CAT_IDENTIFIER); // return token with quoted string

case 14:
    quoted_id_add(yy_.yytext);

break;
case 15:
   quoted_id_add(yy_.yytext);

break;
case 16:
    this.popState();
    return newToken(OSDLConstants.NUM_EOF, 'ENDOFFILE', rnd.Category.CAT_WS);

case 17: console.log(yy_.yytext);
								return newIdToken( yy_.yytext, this.TIR );
							
case 18: console.log(yy_.yytext); // return {"lexem":yy_.yytext,"token":"DOT"};
								return newToken(OSDLConstants.NUM_DOT, yy_.yytext, rnd.Category.CAT_OPERATOR); 
case 19: console.log(yy_.yytext); // return {"lexem":yy_.yytext,"token":"DOT"};
								return newToken(OSDLConstants.NUM_COMMA, yy_.yytext, rnd.Category.CAT_OPERATOR); 
case 20: console.log(yy_.yytext); // return {"lexem":yy_.yytext,"token":"LBRACE"};
								return newToken(OSDLConstants.NUM_LCURLY, yy_.yytext, rnd.Category.CAT_OPERATOR); 
case 21: console.log(yy_.yytext); // return {"lexem":yy_.yytext,"token":"RBRACE"};
								return newToken(OSDLConstants.NUM_RCURLY, yy_.yytext, rnd.Category.CAT_OPERATOR); 
case 22: console.log(yy_.yytext); // return {"lexem":yy_.yytext,"token":"LPAREN"};
								return newToken(OSDLConstants.NUM_LPAREN, yy_.yytext, rnd.Category.CAT_OPERATOR); 
case 23: console.log(yy_.yytext); // return {"lexem":yy_.yytext,"token":"RPAREN"};
								return newToken(OSDLConstants.NUM_RPAREN, yy_.yytext, rnd.Category.CAT_OPERATOR); 
case 24: console.log(yy_.yytext); // return {"lexem":yy_.yytext,"token":"COLON"};
								return newToken(OSDLConstants.NUM_COLON, yy_.yytext, rnd.Category.CAT_OPERATOR); 
case 25: console.log(yy_.yytext); // return {"lexem":yy_.yytext,"token":"SEMICOLON"};
								return newToken(OSDLConstants.NUM_SEMICOLON, yy_.yytext, rnd.Category.CAT_OPERATOR); 
case 26:/* skip New Line */
break;
case 27:/* skip whitespace */	
break;
case 28: //return 'ENDOFFILE';
								return newToken(OSDLConstants.NUM_EOF, 'ENDOFFILE', rnd.Category.CAT_WS); 
}
},
rules: [/^(?:\/\/.*)/,/^(?:(\/\*([,()\[\].;$\:\+\-\*\/\%\^\<\>\=])*))/,/^(?:(\*+\/))/,/^(?:.)/,/^(?:([^*\/]+))/,/^(?:$)/,/^(?:(["][1]["]))/,/^(?:(["][\*]["]))/,/^(?:(["]([0][\.][\.][1])["]))/,/^(?:(["]([1][\.][\.][\*])["]))/,/^(?:((["][^"][^"]*[(\:\:)][^"][^"]*["])))/,/^(?:((["][^"]*["][\.]["][^"]*["])))/,/^(?:(([\"])))/,/^(?:(([\"])))/,/^(?:(([\"])([\"])))/,/^(?:([^"]+))/,/^(?:$)/,/^(?:((((([a-zA-Z_])|[$]))(((((([a-zA-Z_])|[$]))|([0-9]))))*)))/,/^(?:\.)/,/^(?:,)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?::)/,/^(?:;)/,/^(?:((([\n|\r])|([\r\n]))))/,/^(?:([ \t\f\0]))/,/^(?:$)/],
conditions: {"xd":{"rules":[13,14,15,16],"inclusive":false},"xcc":{"rules":[2,3,4,5],"inclusive":false},"xcl":{"rules":[],"inclusive":false},"INITIAL":{"rules":[0,1,6,7,8,9,10,11,12,17,18,19,20,21,22,23,24,25,26,27,28],"inclusive":true}}
});
return lexer;
});