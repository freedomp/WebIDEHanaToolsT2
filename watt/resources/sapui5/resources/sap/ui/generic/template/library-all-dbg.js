// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.generic.template.library-all');
if ( !jQuery.sap.isDeclared('sap.ui.generic.template.ActionUtil') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */
jQuery.sap.declare('sap.ui.generic.template.ActionUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.form.SimpleForm'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartform.Group'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartform.GroupElement'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartfield.SmartField'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartfield.SmartLabel'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.util.ModelUtil'); // unlisted dependency retained
jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained
sap.ui.define("sap/ui/generic/template/ActionUtil",[
	"jquery.sap.global", "sap/ui/base/ManagedObject", "sap/m/MessageBox", "sap/ui/layout/form/SimpleForm", "sap/ui/comp/smartform/Group", "sap/ui/comp/smartform/GroupElement", "sap/ui/comp/smartfield/SmartField", "sap/ui/comp/smartfield/SmartLabel", "sap/m/Dialog", "sap/ui/generic/app/util/ModelUtil", "sap/m/VBox", "sap/m/Text"
], function(jQuery, ManagedObject, MessageBox, SimpleForm, Group, GroupElement, SmartField, SmartLabel, Dialog, ModelUtil, VBox, Text) {
	"use strict";

	var ActionUtil = ManagedObject.extend("sap.ui.generic.template.ActionUtil", {
		metadata: {
			properties: {
				/**
				 * The used controller.
				 */
				controller: {
					type: "object",
					group: "Misc",
					defaultValue: null
				},
				/**
				 * The context in which the action is called.
				 */
				context: {
					type: "object",
					group: "Misc",
					defaultValue: null
				},
				/**
				 * The callback that is called after the action has been successfully executed.
				 */
				successCallback: {
					type: "function",
					group: "Misc",
					defaultValue: null
				}
			}
		}
	});

	/**
	 * Returns a parental table of the given element or null.
	 *
	 * @param {string} sFunctionImportPath The function import that is called
	 * @param {string} sFunctionImportLabel Optional parameter for the confirmation popup text
	 * @public
	 */
	ActionUtil.prototype.call = function(sFunctionImportPath, sFunctionImportLabel) {
		this._sFunctionImportPath = sFunctionImportPath;
		var oController = this.getController();
		if (!oController) {
			throw new Error("Controller not provided");
		}
		
		this._oMetaModel = oController.getView().getModel().getMetaModel();
			
		var sFunctionName = sFunctionImportPath.split('/')[1];
		this._oFunctionImport = this._oMetaModel.getODataFunctionImport(sFunctionName);
		this._sFunctionImportLabel = sFunctionImportLabel || sFunctionName;

		if (!this._oFunctionImport) {
			throw new Error("Unknown Function Import " + sFunctionName);
		}

		if (this._isActionCritical()) {
			var that = this;
			var sMsgBoxText = sap.ui.getCore().getLibraryResourceBundle("sap.ui.generic.template").getText("ACTION_CONFIRM");
			sMsgBoxText = jQuery.sap.formatMessage(sMsgBoxText, this._sFunctionImportLabel);
			MessageBox.confirm(sMsgBoxText, {
				title: this._sFunctionImportLabel,
				onClose: function(oAction) {
					if (oAction === "OK") {
						that._prepareParameters();
						that._initiateCall();
					}
				},
				sClass: that._getCompactModeStyleClass()
			});
		} else {
			this._prepareParameters();
			this._initiateCall();
		}
	};

	ActionUtil.prototype._getCompactModeStyleClass = function() {
		if (this.getController().getView().$().closest(".sapUiSizeCompact").length) {
			return "sapUiSizeCompact";
		}
		return "";
	};
	
	/**
	 * checks if the action is critical
	 *
	 * @private
	 * @returns {boolean} true if the action is critical otherwise false
	 */
	ActionUtil.prototype._isActionCritical = function() {
		var oCritical = this._oFunctionImport["com.sap.vocabularies.Common.v1.IsActionCritical"];
		
		if (!oCritical){ return false; }		
		if (oCritical.Bool === undefined){ return true; }	
		
		return this._toBoolean(oCritical.Bool);
	};

	/**
	 * converts a parameter value to a boolean
	 *
	 * @param {object} oParameterValue The value to be converted 
	 * @private
	 * @returns {boolean}
	 */
	ActionUtil.prototype._toBoolean = function(oParameterValue) {	
		if (typeof oParameterValue === "string"){
			var oValue = oParameterValue.toLowerCase(); 
			return !(oValue == "false" || oValue == "" || oValue == " ");
			}
			
		return !!oParameterValue;			
	};
	
	/**
	 * Retrieves the parameters
	 *
	 * @private
	 */
	ActionUtil.prototype._prepareParameters = function() {			
		// oContext is only provided for action calls in list
		this._oCurrentContext = this.getContext() || this._oView.getBindingContext();
		this._oContextObject = this._oCurrentContext.getObject();
		var oEntityType = this._getEntityType();
		var oKeyProperties = this._getPropertyKeys(oEntityType);
		var oParameterValue;
		
		this._oParameters = {
			parameterData: {},
			additionalParameters: []
		};
		
		if (this._oFunctionImport.parameter) {
			for (var i = 0; i < this._oFunctionImport.parameter.length; i++) {
				var oParameter = this._oFunctionImport.parameter[i];
				
				this._addParameterLabel(oParameter, oEntityType);
				
				var sParameterName = oParameter.name;
				var bIsKey = !!oKeyProperties[sParameterName];
				
				oParameterValue = undefined; 
				if (this._oContextObject.hasOwnProperty(sParameterName)) {
					oParameterValue = this._oContextObject[sParameterName];
				} else if (bIsKey){
					//parameter is key but not part of the current projection - raise error
					jQuery.sap.log.error("Key parameter of action not found in current context: " + sParameterName);
					throw new Error("Key parameter of action not found in current context: " + sParameterName);								
				}				
				
				this._oParameters.parameterData[sParameterName] = oParameterValue;
				
				if (!bIsKey){
					// offer as optional parameter with default value from context
					this._oParameters.additionalParameters.push(oParameter);
				}
			}
		}
	};
	
	/**
	 * returns a map containing all keys retrieved for the given entityType
	 *
	 * @param {object} oEntityType - the entity type for which the keys should be retrieved
	 * @private
	 * @returns {object} map containing the properties keys
	 */
	ActionUtil.prototype._getPropertyKeys = function(oEntityType){
		var oKeyMap = {};
			
		if (oEntityType && oEntityType.key && oEntityType.key.propertyRef){
			for (var i = 0; i < oEntityType.key.propertyRef.length; i++) {
				var sKeyName = oEntityType.key.propertyRef[i].name; 
				oKeyMap[sKeyName] = true;
			}
		}		
		
		return oKeyMap;
	};

	/**
	 * returns the entity type for the current context
	 * 
	 * @private
	 * @returns {object} the entity type
	 */
	ActionUtil.prototype._getEntityType = function(){
		var oEntityType = null;
		if (this._oCurrentContext && this._oCurrentContext.getPath()) {
			var sEntitySet = ModelUtil.getEntitySetFromContext(this._oCurrentContext);							
			var oEntitySet = this._oMetaModel.getODataEntitySet(sEntitySet, false);
			oEntityType = this._oMetaModel.getODataEntityType(oEntitySet.entityType, false);		
		}
		
		return oEntityType;
	};	
	
	ActionUtil.prototype._initiateCall = function() {
		if (this._oParameters.additionalParameters.length > 0) {
			// depending on projection of smart table - parameters are probably not in projection scope - therefore analyze entity type
			var oParameterModel = new sap.ui.model.json.JSONModel();
			oParameterModel.setData(this._oParameters.parameterData);		
			var that = this;

			var mParameterForm = this._buildParametersForm();
			
			var oParameterDialog = new Dialog({
				title: this._sFunctionImportLabel,				
				content : [mParameterForm.form],
				beginButton: new sap.m.Button({
					text: this._sFunctionImportLabel,
					press: function(oEvent) {						
						// call action if there are no client errors, stay on parameter dialog in case of errors						
						if (!mParameterForm.checkClientErrors()) {
							var mParameters = that._getActionParameterData(oEvent.getSource().getModel());
							if (mParameters.missingMandatoryParameters.length == 0){
								oParameterDialog.close();
								that._call(mParameters.preparedParameterData);
							} else {
								var oContent = new VBox();
								
								var sRootMessage = sap.ui.getCore().getLibraryResourceBundle("sap.ui.generic.template").getText("ACTION_MISSING_MANDATORY");
								 
								for (var i = 0; i < mParameters.missingMandatoryParameters.length; i++){
									var sText = jQuery.sap.formatMessage(sRootMessage, that._getParameterName(mParameters.missingMandatoryParameters[i]));
									oContent.addItem(new Text({text: sText}));									
								}
								
								MessageBox.error(oContent, {
									sClass: that._getCompactModeStyleClass()
								});
							}
						}
					}
				}),
				endButton: new sap.m.Button({
					text: sap.ui.getCore().getLibraryResourceBundle("sap.ui.generic.template").getText("ACTION_CANCEL"),
					press: function() {
						oParameterDialog.close();
					}
				}),
				afterClose: function() {
					oParameterDialog.destroy();
				}
			}).addStyleClass("sapUiNoContentPadding");
			
			oParameterDialog.addStyleClass(this._getCompactModeStyleClass());
			
			oParameterDialog.setModel(oParameterModel);
			oParameterDialog.open();
		} else {
			this._call();
		}
	};

	ActionUtil.prototype._call = function(mUrlParameters) {
		// context is refreshed in action call - therefore get current path before method call
		// var sCurrentPath = this._oCurrentContext.getPath();
		var mParameters = {
			urlParameters : mUrlParameters
		};

		var oController = this.getController();
		var oCurrentContext = this._oCurrentContext;
		var that = this;
		
		try {
			oController.getTransactionController().invokeAction(this._sFunctionImportPath, this._oCurrentContext, mParameters).then(function(oResponse) {
				var fCallback = that.getSuccessCallback();
				if (fCallback){
					fCallback(oResponse.context);
				}				
				oController.handleSuccess(oResponse);
			}, function(oError) {
				oController.handleError(oError, {context : oCurrentContext});			
			});
		} catch (ex) {
			oController.handleError(ex, {context : oCurrentContext});
		}
	};	
	
	ActionUtil.prototype._getActionParameterData = function(oParameterModel) {	
		var aMissingMandatoryParameters = [];
		
		// raw parameter list contains all action parameters as key/value - no check required
		var oRawParameterData = oParameterModel.getObject('/');
		var oPreparedParameterData = {};
		for (var i = 0; i < this._oFunctionImport.parameter.length; i++) {
			var oParameter = this._oFunctionImport.parameter[i];
			var sParameterName = oParameter.name;			
			if (oRawParameterData.hasOwnProperty(sParameterName)) {				
				var oValue = oRawParameterData[sParameterName];
				if (oValue === undefined) {
					// if parameter is nullable=true don't pass it at all to function import call
					// TODO check boolean handling - should undefined boolean value be sent as false to backend or not at all
					if (!this._toBoolean(oParameter.nullable)) {
						// defaulting for boolean - set to false - UI state undefined for checkbox
						// all other not null checks should have already been done by smart field - if not throw error - should not happen at all
						if (oParameter.type === 'Edm.Boolean'){
							oPreparedParameterData[sParameterName] = false;
						} else {
							aMissingMandatoryParameters.push(oParameter);						
						}
					}
				} else {
					oPreparedParameterData[sParameterName] = oValue;
				}
			} else {
				throw new Error("Unknown parameter: " + sParameterName);
			}
		}
		
		return {
			preparedParameterData: oPreparedParameterData,
			missingMandatoryParameters: aMissingMandatoryParameters
		};
	};
	
	ActionUtil.prototype._buildParametersForm = function() {
		var oForm = new SimpleForm({
			editable: true
		});

		// list of all smart fields for input check
		var aFields = []; 
		
		for (var i = 0; i < this._oParameters.additionalParameters.length; i++) {
			var oParameter = this._oParameters.additionalParameters[i];					

			var sParameterLabel = this._getParameterName(oParameter);
			var sBinding = '{/' + oParameter.name + '}';
			var sJSONType = null;
			var sEdmType = oParameter.type;

			// default for nullable is false - due to Gateway parameter handling -> set all fields to mandatory which are not explicitely nullable=true
			//var bMandatory = !this._isParameterNullable(oParameter);			
			
			// max length - default undefined if not set in OData metadata
			var iMaxLength = oParameter.maxLength ? parseInt(oParameter.maxLength, 10) : undefined;
			
			// covers Edm.Byte, Edm.SByte, Edm.Boolean, Edm.Int16, Edm.Int32, Edm.Time
			if (sEdmType === 'Edm.String') {
				sJSONType = sap.ui.comp.smartfield.JSONType.String;
			} else if (sEdmType === 'Edm.Boolean') {
				sJSONType = sap.ui.comp.smartfield.JSONType.Boolean;
			} else if (sEdmType === 'Edm.Byte' || sEdmType === 'Edm.SByte' || sEdmType === 'Edm.Int16' || sEdmType === 'Edm.Int32') {
				sJSONType = sap.ui.comp.smartfield.JSONType.Integer;
			} else {
				throw new Error("Unsupported parameter type: " + sEdmType);
			}

			var oField = new SmartField({
				value: sBinding,
				mandatory: false, //bMandatory,
				jsontype: sJSONType,
				maxLength: iMaxLength
			});
			aFields.push(oField);
			var sLabel = new SmartLabel();

			sLabel.setText(sParameterLabel);
			sLabel.setLabelFor(oField);
			
			oForm.addContent(sLabel);
			oForm.addContent(oField);			
		}
		
		var fnCheckClientErrors = function(){
			var bHasErrors = false;
			
			//for now: alwas return false, as SmartField currently does not handle JSON models correctly
			
//			if (aFields && aFields.length) {
//				for (var i = 0; i < aFields.length; i++) {
//					var bClientError = aFields[i].checkClientError();
//					if (bClientError) {
//						bHasErrors = true;
//					}
//				}				
//			}
			return bHasErrors;
		};
		
		return {
			form : oForm,			
			checkClientErrors :  fnCheckClientErrors
		};
	};
	
	ActionUtil.prototype._getParameterName = function(oParameter){
		// if no label is set for parameter use parameter name as fallback
		return oParameter["com.sap.vocabularies.Common.v1.Label"] ? oParameter["com.sap.vocabularies.Common.v1.Label"].String : oParameter.name;
	};
	
	ActionUtil.prototype._addParameterLabel = function(oParameter, oEntityType){		
		if (oEntityType && oParameter && !oParameter["com.sap.vocabularies.Common.v1.Label"]) {			
			
			var oProperty = this._oMetaModel.getODataProperty(oEntityType, oParameter.name, false);
			if (oProperty && oProperty["com.sap.vocabularies.Common.v1.Label"]) {
				// copy label from property to parameter with same name as default if no label is set for function import parameter
				oParameter["com.sap.vocabularies.Common.v1.Label"] = oProperty["com.sap.vocabularies.Common.v1.Label"];
			}
		}
	};

	return ActionUtil;

}, /* bExport= */true);
}; // end of sap/ui/generic/template/ActionUtil.js
if ( !jQuery.sap.isDeclared('sap.ui.generic.template.MessageUtil') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */
jQuery.sap.declare('sap.ui.generic.template.MessageUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained
sap.ui.define("sap/ui/generic/template/MessageUtil",[
	"jquery.sap.global", "sap/ui/base/ManagedObject", "sap/m/MessageBox", "sap/m/Dialog"
], function(jQuery, ManagedObject, MessageBox, Dialog) {
	"use strict";

	var MessageUtil = ManagedObject.extend("sap.ui.generic.template.MessageUtil", {
		metadata: {
			properties: {
				/**
				 * The used controller
				 */
				controller: {
					type: "object",
					group: "Misc",
					defaultValue: null
				},
				/**
				 * The response (error or successful response)
				 */
				response: {
					type: "object",
					group: "Misc",
					defaultValue: null
				}
			}
		}
	});

	MessageUtil.prototype._httpStatusCodes = {
		badRequest: "400",
		forbidden: "403",
		methodNotAllowed: "405",
		preconditionFailed: "428",
		internalServerError: "500"
	};

	MessageUtil.prototype.handleError = function(mParameters) {
		mParameters = mParameters || {};
		var oErrorContext = mParameters.errorContext || {};
		var oError = this.getResponse();
		var oController = this.getController();

		var sMessage = sap.ui.getCore().getLibraryResourceBundle("sap.ui.generic.template").getText("ERROR_UNKNOWN");
		var sHttpStatusCode;

		if (oError instanceof Error) {
			// promise rejection
			if (oError.message) {
				// TODO differentiate between technical errors and business errors in case of promise rejections
				sMessage = oError.message;
			}
		} else if (oError.response) { // odata error
			if (oError.response.message) {
				// TODO differentiate between technical errors and business errors in case of promise rejections
				sMessage = oError.response.message;
			}

			// check http status code
			if (oError.response.statusCode) {
				sHttpStatusCode = oError.response.statusCode;
			}

			// check for content type of response - in case of a runtime error on the backend it is xml
			if (oError.response.headers) {
				for ( var sHeader in oError.response.headers) {
					if (sHeader.toLowerCase() === 'content-type') {
						var sHeaderValue = oError.response.headers[sHeader];
						if (sHeaderValue.toLowerCase().indexOf('application/json') === 0) {
							if (oError.response.responseText) {
								var oODataError = JSON.parse(oError.response.responseText);
								if (oODataError && oODataError.error && oODataError.error.message && oODataError.error.message.value) {
									sMessage = oODataError.error.message.value;
								}
							}
						} else {
							if (oError.message) {
								sMessage = oError.message;
							}
						}
						break;
					}// if content-type is not application/json it is usually an internal server error (status code 500)
				}
			}
		}

		var bShowMessageBox = true;

		// var isList = mParameters.isList || true;
		// error situations:
		// Draft SourceOperation=action
		// action & list & single select & editable=false -> MessageBox
		// action & detail & editable=false -> MessageBox
		// action & detail & editable=true -> MessageBox

		// Non-draft SourceOperation=action
		// action & list & single select & editable=false -> MessageBox
		// action & detail & editable=false -> MessageBox
		// action & detail & editable=true -> MessageBox
		// save/merge & action & detail & editable=true -> ?

		// Non-draft SourceOperation=create/update/patch
		// post/put/patch/merge & detail & editable=true -> evaluate status code
		// -> 400 Bad Request -> Message Box + MessagePopover
		// -> 403 Forbidden -> Message Page
		// -> 405 Method Not Allowed -> Message Page
		// -> 428 Precondition Failed -> Message Page
		// -> 500 Internal Server Error -> Message Page

		// Draft SourceOperation=create/update/patch
		// post on new root -> MessagePage
		// post on new item -> ?MessagePage
		// post/put/patch/merge/prepare & detail & editable=true -> evaluate status code
		// -> 400 Bad Request -> MessagePage
		// -> 403 Forbidden -> Message Page
		// -> 405 Method Not Allowed -> Message Page
		// -> 428 Precondition Failed -> Message Page
		// -> 500 Internal Server Error -> Message Page
		switch (oErrorContext.lastOperation.name) {
			case '':
				break;
			case oController.operations.callAction:
				break;
			case oController.operations.addEntry:
				bShowMessageBox = false;
				break;
			case oController.operations.modifyEntity:
				if (this._httpStatusCodes.preconditionFailed === sHttpStatusCode) {
					// navigate to message page if etag is invalid
					bShowMessageBox = false;
				}
				break;
			case oController.operations.saveEntity:
				if (oErrorContext.isDraft) {
					// save operation should always be successful in draft case - therefore navigate to message page
					bShowMessageBox = false;
				}
				// save operation (PUT/PATCH/MERGE) in non-draft scenarios fail due to business errors - therefore stay on details page
				break;
			case oController.operations.deleteEntity:
				// does it make a difference if it is the root or items of a root? what happens to list in details etc.?
				break;
			case oController.operations.editEntity:
				// edit function import or just edit mode in non-draft scenarios - stay on details screen
				break;
			case oController.operations.validateDraftEntity:
				break;
			case oController.operations.prepareDraftEntity:
				// prepare should never lead to technical errors
				bShowMessageBox = false;
				break;
			case oController.operations.activateDraftEntity:
				// business errors are transported via activation in case of minimal draft enabled
				break;
			default:
				break;
		}

		var mMessageParameters = {
			entitySet: oErrorContext.entitySet,
			title: mParameters.title,
			message: sMessage
		};

		if (bShowMessageBox) {
			if (oErrorContext.showMessages) {
				// only show message box if current view doesn't have a message popover
				this._showMessageBox(mMessageParameters);
			}
		} else {
			this._showMessagePage(mMessageParameters);
		}

	};

	MessageUtil.prototype._showMessageBox = function(mParameters) {
		sap.m.MessageBox.show(mParameters.message, {
			icon: mParameters.messageBoxIcon || sap.m.MessageBox.Icon.ERROR,
			title: mParameters.title || sap.ui.getCore().getLibraryResourceBundle("sap.ui.generic.template").getText("ERROR_TITLE"),
			actions: [
				sap.m.MessageBox.Action.OK
			],
			onClose: function(oAction) {

			},
			styleClass: this._getCompactModeStyleClass()
		});
	};

	MessageUtil.prototype._showMessagePage = function(mParameters) {
		var oNavigationController = this.getController().getNavigationController();
		oNavigationController.navigateToMessagePage({
			entitySet: mParameters.entitySet,
			title: mParameters.title,
			text: mParameters.message
		});
	};

	MessageUtil.prototype._getCompactModeStyleClass = function() {
		if (this.getController().getView().$().closest(".sapUiSizeCompact").length) {
			return "sapUiSizeCompact";
		}
		return "";
	};

	MessageUtil.prototype.handleSuccess = function(mParameters) {
		mParameters = mParameters || {};
		var oSuccessContext = mParameters.successContext || {};
		var oResponse, oMessage, aMessages;
		oResponse = this.getResponse();
		// response of oResponse object contains response incl. http headers etc.
		aMessages = this._getMessages(oResponse.response);
		if (aMessages && aMessages.length > 0) {
			if (aMessages.length === 1) {
				oMessage = aMessages[0];
				if (oMessage.state === sap.ui.core.ValueState.Success) {
					this._showSuccessToast(oMessage);
				} else {
					if (oSuccessContext.showMessages) {
						// clarify with UX -> show single warning/error message also as toast
						this._showMessages(aMessages);
					}
				}
			} else {
				if (oSuccessContext.showMessages) {
					// only show message box if current view doesn't have a message popover
					this._showMessages(aMessages);
				}
			}
		}
	};

	/**
	 * Retrieves the messages of the response
	 */
	MessageUtil.prototype._getMessages = function(oResponse) {
		var aMessages = [];
		if (!oResponse || !oResponse.statusCode) {
			return;
		}
		// check whether request was successful
		if (oResponse.statusCode.toString().substring(0, 1) === "2") {

			// *** handle messages which were passed in SUCCESSFUL requests
			if (oResponse.headers["sap-message"]) {

				var oMessageJSON = oResponse.headers["sap-message"];
				var oMessage = JSON.parse(oMessageJSON);
				aMessages.push(this._getMessage(oMessage));

				if (oMessage.details) {
					for (var i = 0; i < oMessage.details.length; i++) {
						aMessages.push(this._getMessage(oMessage.details[i]));
					}
				}
			}
		}
		return aMessages;
	};

	/**
	 * Retrieves the message from the given raw message response entry
	 * 
	 * @private
	 */
	MessageUtil.prototype._getMessage = function(oMessageResponseEntry) {
		var sIcon, sState;

		switch (oMessageResponseEntry.severity) {
			case "info":
				sIcon = "sap-icon://sys-enter";
				sState = sap.ui.core.ValueState.Success;
				break;
			case "warning":
				sIcon = "sap-icon://notification";
				sState = sap.ui.core.ValueState.Warning;
				break;
			case "error":
				sIcon = "sap-icon://error";
				sState = sap.ui.core.ValueState.Error;
				break;
			default:
				sIcon = "sap-icon://sys-enter";
				sState = sap.ui.core.ValueState.Success;
				break;
		}

		var oMessage = {
			message: oMessageResponseEntry.message,
			code: oMessageResponseEntry.messageCode,
			target: oMessageResponseEntry.target,
			icon: sIcon,
			state: sState
		};

		return oMessage;
	};

	MessageUtil.prototype._showSuccessToast = function(oMessage) {
		sap.m.MessageToast.show(oMessage.message);
	};

	MessageUtil.prototype._showMessages = function(aMessages) {
		var oMessageModel, oDialog;
		var that = this;

		oMessageModel = new sap.ui.model.json.JSONModel();
		oMessageModel.setData({
			messages: aMessages
		});

		oDialog = new sap.m.Dialog({
			content: that.getMessageTable(),
			type: sap.m.DialogType.Message,
			state: "None",
			afterClose: function() {
				oDialog.destroy();
			},
			buttons: [
				new sap.m.Button({
					// TODO text
					text: sap.ui.getCore().getLibraryResourceBundle("sap.ui.generic.template").getText("DIALOG_CLOSE"),
					press: function() {
						oDialog.close();
					}
				})
			]
		});
		oDialog.setModel(oMessageModel);
		oDialog.open();
	};

	MessageUtil.prototype.getMessageTable = function() {
		var oMessageTable = new sap.m.Table({
			growing: false,
			showSeparators: sap.m.ListSeparators.None,
			inset: false,
			fixedLayout: false,
			backgroundDesign: sap.m.BackgroundDesign.Transparent,
			columns: [
				new sap.m.Column({
					hAlign: "Left",
					vAlign: "Top"
				})
			]
		});

		var that = this;
		var template = new sap.m.ColumnListItem({
			unread: false,
			vAlign: "Top",
			type: "{itemType}",
			press: function(oEvt) {
				that._navigateToDetail(oEvt);
			},
			cells: [
				new sap.ui.layout.Grid({
					vSpacing: 0,
					hSpacing: 1,
					content: [

						new sap.m.ObjectStatus({
							icon: "{icon}",
							state: "{state}",
							layoutData: new sap.ui.layout.GridData({
								span: "L2 M2 S2"
							})
						}), new sap.m.Text({
							maxLines: 3,
							text: "{message}",
							layoutData: new sap.ui.layout.GridData({
								span: "L10 M10 S10"
							})
						})
					]
				})
			]
		});

		oMessageTable.bindAggregation("items", "/messages", template);
		return oMessageTable;
	};

	return MessageUtil;

}, /* bExport= */true);

}; // end of sap/ui/generic/template/MessageUtil.js
if ( !jQuery.sap.isDeclared('sap.ui.generic.template.ViewUtil') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */
jQuery.sap.declare('sap.ui.generic.template.ViewUtil'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Table'); // unlisted dependency retained
jQuery.sap.require('sap.m.Table'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smarttable.SmartTable'); // unlisted dependency retained
sap.ui.define("sap/ui/generic/template/ViewUtil",["sap/ui/base/Object","sap/ui/table/Table", "sap/m/Table", "sap/ui/comp/smarttable/SmartTable"], function(Object, Table, ResponsiveTable, SmartTable) {
	"use strict";

	var ViewUtil = Object.extend("sap.ui.generic.template.ViewUtil",{
        metadata : {
            properties : {}
        }
	});
	
	/**
	 * Returns a parental table of the given element or null
	 * 
	 * @param {sap.ui.core.Element} oSourceControl The element where to start searching for a parental table
	 * @returns {sap.ui.table.Table|sap.m.Table|sap.ui.comp.smarttable.SmartTable} The parent table or null
	 * @public
	 */
	ViewUtil.getParentTable = function(oSourceControl){
		var oCurrentControl = oSourceControl;
		while (oCurrentControl) {
				if (oCurrentControl instanceof ResponsiveTable || oCurrentControl instanceof Table || oCurrentControl instanceof SmartTable) {
					return oCurrentControl;
				}
				
				if (oCurrentControl.getParent){
					oCurrentControl = oCurrentControl.getParent();
				} else {
					return null;
				} 

			}		
		return null;
	};
	
	/**
	 * Returns the binding of the given table
	 * 
	 * @param {sap.ui.table.Table|sap.m.Table|sap.ui.comp.smarttable.SmartTable} oTable The table which's binding is to returned
	 * @returns {object} The found binding or null
	 * @public
	 */
	ViewUtil.getTableBinding = function(oTable) {
		if (oTable instanceof SmartTable) {
			oTable = oTable.getTable(); // get SmartTable's inner table first
		}
		
		if (oTable instanceof Table) {
			return oTable.getBindingInfo("rows");
		} else if (oTable instanceof ResponsiveTable) {
			return oTable.getBindingInfo("items");
		}
		
		return null;
	};
	
	return ViewUtil;

}, /* bExport= */ true);
}; // end of sap/ui/generic/template/ViewUtil.js
if ( !jQuery.sap.isDeclared('sap.ui.generic.template.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

/**
 * Initialization Code and shared classes of library sap.ui.generic.template.
 */
jQuery.sap.declare('sap.ui.generic.template.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.library'); // unlisted dependency retained
sap.ui.define("sap/ui/generic/template/library",['jquery.sap.global', 'sap/ui/core/library', 'sap/ui/comp/library'],
	function(jQuery, library1, library2) {
	"use strict";

	/**
	 * SAPUI5 library with ...
	 *
	 * @namespace
	 * @name sap.ui.generic.template
	 * @public
	 */
	
	// delegate further initialization of this library to the Core
	sap.ui.getCore().initLibrary({
		name : "sap.ui.generic.template",
		version: "1.32.7",
		dependencies : ["sap.ui.core", "sap.ui.comp"],
		types: [],
		interfaces: [],
		controls: [],
		elements: []
	});
	
	return sap.ui.generic.template;

}, /* bExport= */ true);

}; // end of sap/ui/generic/template/library.js
if ( !jQuery.sap.isDeclared('sap.ui.generic.template.BaseViewController') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.generic.templates.controller.BaseViewController.
jQuery.sap.declare('sap.ui.generic.template.BaseViewController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessagePopover'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessagePopoverItem'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Component'); // unlisted dependency retained
jQuery.sap.require('sap.m.PlacementType'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Table'); // unlisted dependency retained
jQuery.sap.require('sap.m.Table'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smarttable.SmartTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Sorter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.generic.app.util.ModelUtil'); // unlisted dependency retained
sap.ui.define("sap/ui/generic/template/BaseViewController",[
	'jquery.sap.global', 'sap/ui/core/mvc/Controller', 'sap/ui/generic/template/library', 'sap/m/MessagePopover', 'sap/m/MessagePopoverItem', 'sap/ui/core/Component', 'sap/m/PlacementType', 'sap/m/MessageToast', 'sap/m/MessageBox', 'sap/ui/table/Table', 'sap/m/Table', 'sap/ui/comp/smarttable/SmartTable', 'sap/ui/model/Sorter', 'sap/ui/model/Filter', 'sap/ui/generic/template/ViewUtil', 'sap/ui/generic/template/ActionUtil', 'sap/ui/generic/template/MessageUtil', 'sap/ui/generic/app/util/ModelUtil'
], function(jQuery, Controller, library, MessagePopover, MessagePopoverItem, Component, PlacementType, MessageToast, MessageBox, Table, ResponsiveTable, SmartTable, Sorter, Filter, ViewUtil, ActionUtil, MessageUtil, ModelUtil) {
	"use strict";

	/**
	 * Constructor for a new BaseViewController.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] Initial settings for the new control
	 * @class The BaseViewController controller provides a generic API for integration with the view controller and other re-use functions required in
	 *        the controllers for smart templates. The BaseViewController is enabled for handling non-draft as well as draft documents. The provided
	 *        generic API is based on OData model entities.
	 * @extends sap.ui.core.mvc.Controller
	 * @author SAP SE
	 * @version 1.32.7
	 * @constructor
	 * @public
	 * @since 1.30.0
	 * @alias sap.ui.generic.template.BaseViewController
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var BaseViewController = Controller.extend("sap.ui.generic.template.BaseViewController", /** @lends sap.ui.generic.template.BaseViewController.prototype */
	{
		metadata: {
			library: "sap.ui.generic.template"
		}
	});

	BaseViewController.prototype.onInit = function(mParameters) {
		mParameters = mParameters || {};
		// function to indicate whether messages should be shown or not (message box in MessageUtil)
		this._fnShowMessages = mParameters.showMessages;
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.generic.template");
		this._setCurrentOperation('', null);
	};

	/**
	 * Gets binding context of base view.
	 * 
	 * @returns {object} Context
	 * @public
	 */
	BaseViewController.prototype.getContext = function() {
		return this.getView().getBindingContext();
	};

	/**
	 * Gets component of base view.
	 * 
	 * @returns {sap.ui.core.UIComponent} Component
	 * @public
	 */
	BaseViewController.prototype.getComponent = function() {
		if (!this._oComponent) {
			this._oComponent = Component.getOwnerComponentFor(this.getView());
		}
		return this._oComponent;
	};

	/**
	 * Gets component container.
	 * 
	 * @returns {sap.ui.core.ComponentContainer} Component container
	 * @public
	 */
	BaseViewController.prototype.getComponentContainer = function() {
		return this.getComponent().getComponentContainer();
	};

	/**
	 * Gets transaction controller.
	 * 
	 * @returns {sap.ui.generic.app.transaction.TransactionController} Transaction controller
	 * @public
	 */
	BaseViewController.prototype.getTransactionController = function() {
		return this.getComponent().getAppComponent().getTransactionController();
	};

	/**
	 * Gets navigation controller.
	 * 
	 * @returns {sap.ui.generic.app.navigation.NavigationController} Navigation controller
	 * @public
	 */
	BaseViewController.prototype.getNavigationController = function() {
		return this.getComponent().getAppComponent().getNavigationController();
	};

	/**
	 * Gets draft controller.
	 * 
	 * @returns {sap.ui.generic.app.transaction.DraftController} Draft controller
	 * @public
	 */
	BaseViewController.prototype.getDraftController = function() {
		return this.getTransactionController().getDraftController();
	};

	/**
	 * Gets draft context.
	 * 
	 * @returns {sap.ui.generic.app.transaction.DraftContext} Draft context
	 * @public
	 */
	BaseViewController.prototype.getDraftContext = function() {
		return this.getTransactionController().getDraftController().getDraftContext();
	};

	/**
	 * Prepares current OData entity for editing. The entity can either be a non-draft document or draft root.
	 * 
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution
	 * @public
	 */
	BaseViewController.prototype.editEntity = function() {
		this._setCurrentOperation(this.operations.editEntity);

		var that = this;
		return new Promise(function(resolve, reject) {
			that.getTransactionController().editEntity(that.getContext()).then(function(oResponse) {
				that.getComponentContainer().bindElement(oResponse.context.getPath());

				that.handleSuccess(oResponse);
				return resolve(oResponse.context);
			}, function(oError) {
				that.handleError(oError);
				return reject(oError);
			});
		});
	};

	/**
	 * Deletes current OData entity. The entity can either be a non-draft document or a draft document. *
	 * 
	 * @param {boolean} bDeleteDraftForActiveEntity Can be set to <code>true</code> in order to delete the draft entity, although the current
	 *        binding context belongs to the active entity
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution
	 * @public
	 */
	BaseViewController.prototype.deleteEntity = function(bDeleteDraftForActiveEntity) {
		this._setCurrentOperation(this.operations.deleteEntity);

		var that = this;
		var oContext = this.getContext();
		var bIsActiveEntity = this.getDraftController().isActiveEntity(oContext);
		var bHasActiveEntity = this.getDraftController().hasActiveEntity(oContext);

		return new Promise(function(resolve, reject) {
			if (bIsActiveEntity && bDeleteDraftForActiveEntity) {
				// Current context is the active document. But we have to delete the draft of this active document.
				that.getDraftController().getDraftForActiveEntity(oContext).then(function(oResponse) {
					that.getTransactionController().deleteEntity(oResponse.context).then(function() {
						setTimeout(function() {
							MessageToast.show(that._oRb.getText("DRAFT_WITH_ACTIVE_DOCUMENT_DELETED"));
						}, 50);

						return resolve();
					});
				}, function(oError) {
					that.getComponentContainer().bindElement(oContext.getPath());
					that.handleError(oError);
					return reject();
				});
			} else {
				that.getTransactionController().deleteEntity(oContext).then(function() {
					var sEntitySet = ModelUtil.getEntitySetFromContext(oContext);
					var oDraftContext = that.getDraftController().getDraftContext();
					var bRoot = oDraftContext.isDraftRoot(sEntitySet);					
					var sMessageText = that._oRb.getText("OBJECT_DELETED");
					
					// replace the message only for the root.
					if (!bIsActiveEntity && bRoot) {
						sMessageText = bHasActiveEntity ? that._oRb.getText("DRAFT_WITH_ACTIVE_DOCUMENT_DELETED") : that._oRb.getText("DRAFT_WITHOUT_ACTIVE_DOCUMENT_DELETED");
					}
					setTimeout(function() {
						MessageToast.show(sMessageText);
					}, 50);
					
					return resolve();
				}, function(oError) {
					// anything to be done beside of messages handled by submit?
					that.getComponentContainer().bindElement(oContext.getPath());
					that.handleError(oError);
					return reject();
				});
			}
		});
	};

	/**
	 * Modifies current OData entity. The entity can either be a non-draft document or a draft document.
	 * 
	 * @param {string} sValue The value that has to be modified
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution
	 * @public
	 */
	BaseViewController.prototype.modifyEntity = function(sValue) {
		this._setCurrentOperation(this.operations.modifyEntity);

		var that = this;
		return new Promise(function(resolve, reject) {
			var sEntitySet = that.getComponent().getEntitySet();
			if (!that.getDraftContext().isDraftEnabled(sEntitySet)) {
				return resolve();
			}
			
			that.getTransactionController().propertyChanged(sEntitySet, sValue, that.getComponentContainer().getElementBinding()).then(function() {
				return resolve();
			}, function(oError) {
				that.handleError(oError);
				return reject();
			});
		});
	};

	/**
	 * Saves current OData entity. The entity can either be a non-draft document or a draft document.
	 * 
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution
	 * @public
	 */
	BaseViewController.prototype.saveEntity = function() {
		this._setCurrentOperation(this.operations.saveEntity);

		var that = this;
		return new Promise(function(resolve, reject) {
			that.getTransactionController().triggerSubmitChanges().then(function(oResponse) {
				that.handleSuccess(oResponse);
				return resolve(oResponse.context);
			}, function(oError) {
				that.handleError(oError);
				return reject(oError);
			});
		});
	};

	/**
	 * Activates a draft OData entity. Only the root entity can be activated.
	 * 
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution
	 * @public
	 */
	BaseViewController.prototype.activateDraftEntity = function() {
		this._setCurrentOperation(this.operations.activateDraftEntity);

		var that = this;
		return new Promise(function(resolve, reject) {
			that.getDraftController().activateDraftEntity(that.getContext()).then(function(oResponse) {
				that.getComponentContainer().unbindElement();
				that.getComponentContainer().bindElement(oResponse.context.getPath());

				that.handleSuccess(oResponse);
				return resolve(oResponse);
			}, function(oError) {
				that.handleError(oError);
				return reject(oError);
			});
		});
	};

	/**
	 * Prepares a draft OData entity. The entity can either be a draft root or a draft item.
	 * 
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution
	 * @public
	 */
	BaseViewController.prototype.prepareDraftEntity = function() {
		this._setCurrentOperation(this.operations.prepareDraftEntity);

		var that = this;
		return new Promise(function(resolve, reject) {
			that.getComponentContainer().unbindElement();
			that.getDraftController().prepareDraftEntity(that.getContext()).then(function(oResponse) {
				that.handleSuccess(oResponse);
				return resolve(oResponse);
			}, function(oError) {
				that.handleError(oError);
				return reject(oError);
			});
		});
	};

	/**
	 * Validates a draft OData entity. The entity can either be a draft root or a draft item.
	 * 
	 * @returns {Promise} A <code>Promise</code> for asynchronous execution
	 * @public
	 */
	BaseViewController.prototype.validateDraftEntity = function() {
		this._setCurrentOperation(this.operations.validateDraftEntity);

		var that = this;
		return new Promise(function(resolve, reject) {
			that.getComponentContainer().unbindElement();
			that.getDraftController().validateDraftEntity(that.getContext()).then(function(oResponse) {
				that.handleSuccess(oResponse);
				return resolve(oResponse);
			}, function(oError) {
				that.handleError(oError);
				return reject(oError);
			});
		});
	};

	/**
	 * Sets <code>isRefreshRequired</code> to <code>true</code> in all existing components (optionally, one can exclude a component).
	 * 
	 * @param {sap.ui.generic.template.TemplateComponent} oComponentToBeIgnored Component for which no refresh required is set
	 */
	BaseViewController.prototype._setRefreshRequiredOnComponents = function(oComponentToBeIgnored) {
		var oContainers = this.getNavigationController().getViews();
		for ( var sContainer in oContainers) {
			var oComponent = oContainers[sContainer].getComponentInstance();
			if (oComponent === oComponentToBeIgnored) {
				continue;
			}
			if (oComponent.setIsRefreshRequired) {
				oComponent.setIsRefreshRequired(true);
			}
		}
	};

	BaseViewController.prototype._setCurrentOperation = function(sCurrentOperation, oParameters) {
		this._oCurrentOperation = {
			name: sCurrentOperation
		};
		if (oParameters) {
			this._oCurrentOperation.parameters = oParameters;
		}
	};

	BaseViewController.prototype._getShowMessages = function() {
		if (this._fnShowMessages) {
			return this._fnShowMessages();
		}
		return true;
	};

	BaseViewController.prototype._getErrorContext = function(mParameters) {
		mParameters = mParameters || {};
		try {
			var bIsDraftEnabled, sEntitySet;
			var oDraftContext = this.getDraftContext();
			if (oDraftContext) {
				// context is only present for details view via this.getContext()
				var oContext = mParameters.context || this.getContext();
				// context is not given when creating a new draft entity and the corresponding POST request fails
				sEntitySet = oContext ? ModelUtil.getEntitySetFromContext(oContext) : this.getComponent().getEntitySet();
				bIsDraftEnabled = oDraftContext.isDraftEnabled(sEntitySet);
			}

			return {
				entitySet: sEntitySet,
				isDraft: bIsDraftEnabled,
				lastOperation: this._oCurrentOperation,
				showMessages: this._getShowMessages()
			};
		} catch (error) {
			jQuery.sap.log.error("BaseViewController._getErrorContext threw an exception: " + error);
			return null;
		}
	};

	BaseViewController.prototype.handleError = function(oError, mParameters) {
		// if error context is not set - allow to pass values to getErrorContext via mParameters - required for actions on list as context needs to be
		// provided
		if (!mParameters || !mParameters.errorContext) {
			mParameters = {
				errorContext: this._getErrorContext(mParameters)
			};
		}

		var oMessage = new MessageUtil({
			controller: this,
			response: oError
		});
		oMessage.handleError(mParameters);
	};

	BaseViewController.prototype.handleSuccess = function(oResponse, mParameters) {
		if (!mParameters) {
			mParameters = {
				successContext: {
					showMessages: this._getShowMessages()
				}
			};
		}

		var oMessage = new MessageUtil({
			controller: this,
			response: oResponse
		});
		oMessage.handleSuccess(mParameters);
	};

	/**
	 * Calls OData function import action.
	 * 
	 * @param {string|object} sFunctionImportPath Path of the function import that is called or object containing functionImportPath, context,
	 *        sourceControl, label, and navigationProperty
	 * @param {object} oCurrentContext The context in which the action is called
	 * @param {string} sFunctionImportLabel Optional parameter for the confirmation popup text
	 * @public
	 */
	BaseViewController.prototype.callAction = function(sFunctionImportPath, oCurrentContext, sFunctionImportLabel) {
		var sNavigationProperty, oSourceControl;
		if (typeof sFunctionImportPath === "object") {
			var oPropertyBag = sFunctionImportPath;
			sFunctionImportPath = oPropertyBag.functionImportPath;
			oCurrentContext = oPropertyBag.context;
			oSourceControl = oPropertyBag.sourceControl;
			sFunctionImportLabel = oPropertyBag.label;
			sNavigationProperty = oPropertyBag.navigationProperty;
		}

		this._setCurrentOperation(this.operations.callAction, {
			functionImport: sFunctionImportPath
		});

		var that = this;

		var oAction = new ActionUtil({
			controller: this,
			context: oCurrentContext,
			successCallback: function(context) {				
				// If success context is same as action context --> do not trigger any navigation
				if (context === oCurrentContext) {
					return;
				}

				// TODO check with UX navigate to object with history entry
				// if an action returns a complex type e.g. validate oContext.getPath() returns "/undefined". Not the final solution.
				if (context && context.getPath() !== "/undefined") {

					// TODO: check with Marcell - currently in any case we navigate, what is with Calculate Action where no navigation is needed?
					if (oSourceControl) {
						that.navigateFromListItem(context, oSourceControl);
					} else {
						that.getNavigationController().navigateToContext(context, sNavigationProperty, false);
					}
				}
			}
		});
		oAction.call(sFunctionImportPath, sFunctionImportLabel);
	};

	/**
	 * Triggers navigation from a given list item.
	 * 
	 * @param {sap.ui.core.Control|object} oSelectedListItem The control that has been selected in the table or its binding context
	 * @param {object} oTable The table from which navigation was triggered; if the parameter is not provided, the oSelectedListItem has to be a
	 *        control in the table
	 * @public
	 */
	BaseViewController.prototype.navigateFromListItem = function(oSelectedListItem, oTable) {
		// binding context and path of selected item in list
		var oSelectedContext = null;
		if (oSelectedListItem.getBindingContext) {
			oSelectedContext = oSelectedListItem.getBindingContext();
		} else {
			oSelectedContext = oSelectedListItem;
			oSelectedListItem = null;
		}

		var sSelectedPath = oSelectedContext.getPath();

		var oComponent = this.getComponent();

		// binding path of component - either binding path of list (list screen e.g. /SalesOrder) or binding path of details screen (e.g.
		// /SalesOrder(123) )
		// var sPath = oComponent.getBindingContext().getPath();
		var sPath = "";
		if (oComponent.getComponentContainer().getElementBinding()) {
			sPath = oComponent.getComponentContainer().getElementBinding().getPath();
		}

		// check whether it is a navigation property binding or just a collection
		var sNavigationProperty = null;

		if (sSelectedPath.indexOf(sPath) !== 0) {
			// relative binding - table bound to navigation property e.g. Item - get binding of embedded table in details screen
			if (!oTable) {
				oTable = ViewUtil.getParentTable(oSelectedListItem);
			}
			sNavigationProperty = ViewUtil.getTableBinding(oTable).path;
		}

		this.getNavigationController().navigateToContext(oSelectedContext, sNavigationProperty, false);
	};

	/**
	 * Executes a table search for provided term.
	 * 
	 * @param {sap.ui.table.Table|sap.m.Table} oTable The table on which search operation is triggered
	 * @param {string} sQuery Term for which the search is performed
	 * @public
	 */
	BaseViewController.prototype.searchOnTable = function(oTable, sQuery) {

		if (!oTable) {
			throw new Error("No table", "BaseViewController.js");
		}

		var oBinding = ViewUtil.getTableBinding(oTable);
		var oBindingParameters = {
			path: oBinding.path,
			template: oBinding.template,
			parameters: {
				custom: {
					search: sQuery
				}
			}
		};

		if (oTable instanceof Table) {
			oTable.bindRows(oBindingParameters);
		} else if (oTable instanceof ResponsiveTable) {
			oTable.bindItems(oBindingParameters);
		} else {
			throw new TypeError("searchOnTable not valid on " + oTable ? oTable.toString() : "(null)", "BaseViewController.js");
		}
	};

	/**
	 * Adds an entry to a table.
	 * 
	 * @param {sap.ui.table.Table|sap.m.Table|sap.ui.comp.smarttable.SmartTable} oTable The table to which an entry has been added
	 */
	BaseViewController.prototype.addEntry = function(oTable) {
		   this._setCurrentOperation(this.operations.addEntry);

		   var oNavigationController = this.getNavigationController();
		   var sBindingPath = "";
		   var sTableBindingPath = "";
		   var sEntitySet = this.getComponent().getEntitySet();
		   var that = this;
		   var oEntityType, oEntitySet, oNavigationEnd, oMetaModel, oContext;

		   if (!oTable) {
		      throw new Error("Unknown Table");
		   }

		   oContext = this.getView().getBindingContext();
		   if (oContext) {
		      // Detail screen
		      sTableBindingPath = ViewUtil.getTableBinding(oTable).path;

		      // get entityset of navigation property
		      oMetaModel = this.getView().getModel().getMetaModel();
		      oEntitySet = oMetaModel.getODataEntitySet(sEntitySet);
		      oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
		      oNavigationEnd = oMetaModel.getODataAssociationSetEnd(oEntityType, sTableBindingPath);
		      sEntitySet = oNavigationEnd.entitySet;

		      // create binding path
		      sTableBindingPath = '/' + sTableBindingPath;
		      sBindingPath = oContext.getPath() + sTableBindingPath;
		   } else {
		      // on list, support only one entityset mapped to the root component
		      sBindingPath = "/" + sEntitySet;
		   }


		   return new Promise(function(resolve, reject) {

		      if (that.getDraftContext().isDraftEnabled(sEntitySet)) {
		         that.getDraftController().createNewDraftEntity(sEntitySet, sBindingPath).then(function(oResponse) {
		            oContext = oResponse.context;
		            oNavigationController.navigateToContext(oContext, sTableBindingPath, false);
		            return resolve(oResponse.context);
		         }, function(oError) {
		            that.handleError(oError);
		            return reject(oError);
		         });
		      } else {
		         oContext = that.getView().getModel().createEntry(sBindingPath, {
		            batchGroupId: 'Changes',
		            changeSetId: 'Changes'
		         });

		        oNavigationController.navigateToContext(oContext, sTableBindingPath, false);

		         return resolve(oContext);
		      }
		   });
	};

	BaseViewController.prototype.showMessagePopover = function(oButton, bToggle) {
		if (!this._oMessagePopover) {
			this._oMessagePopover = new MessagePopover({
				items: {
					path: "message>/",
					template: new MessagePopoverItem({
						description: "{message>description}",
						type: "{message>type}",
						title: "{message>message}"
					})
				}
			});
			oButton.addDependent(this._oMessagePopover);
		}

		if (bToggle || !this._oMessagePopover.isOpen()) {
			this._oMessagePopover.toggle(oButton);
		}
	};

	// injection of $select for smart table - only subset of fields is requested (line items) but technical fields are; required as well: semantic
	// key, technical key + IsDraft / HasTwin
	BaseViewController.prototype.getTableQueryParameters = function(sEntitySet, oExistingQueryParameters) {// #ListController
		var oMetaModel = this.getView().getModel().getMetaModel();
		var oBindingParams = oExistingQueryParameters;
		var oEntitySet = oMetaModel.getODataEntitySet(sEntitySet, false);
		var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType, false);
		var aMandatoryFields = oEntityType.key.propertyRef;
		var i;

		if (this.getDraftContext().isDraftEnabled(sEntitySet)) {
			aMandatoryFields = aMandatoryFields.concat(this.getDraftContext().getSemanticKey(sEntitySet));
			aMandatoryFields.push({
				name: "IsActiveEntity"
			}, {
				name: "HasDraftEntity"
			}, {
				name: "HasActiveEntity"
			});
		}

		if (oBindingParams.parameters.select && oBindingParams.parameters.select.length > 0) {
			// at least one select parameter
			var aSelects = oBindingParams.parameters.select.split(',');
			for (i = 0; i < aMandatoryFields.length; i++) {
				if (jQuery.inArray(aMandatoryFields[i].name, aSelects) === -1) {
					oBindingParams.parameters.select += ',' + aMandatoryFields[i].name;
				}
			}
		}

		return oBindingParams;
	};

	BaseViewController.operations = {
		callAction: "callAction",
		addEntry: "addEntry",
		saveEntity: "saveEntity",
		deleteEntity: "deleteEntity",
		editEntity: "editEntity",
		modifyEntity: "modifyEntity",
		validateDraftEntity: "validateDraftEntity",
		prepareDraftEntity: "prepareDraftEntity",
		activateDraftEntity: "activateDraftEntity"
	};

	BaseViewController.prototype.operations = {
		callAction: BaseViewController.operations.callAction,
		addEntry: BaseViewController.operations.addEntry,
		saveEntity: BaseViewController.operations.saveEntity,
		deleteEntity: BaseViewController.operations.deleteEntity,
		editEntity: BaseViewController.operations.editEntity,
		modifyEntity: BaseViewController.operations.modifyEntity,
		validateDraftEntity: BaseViewController.operations.validateDraftEntity,
		prepareDraftEntity: BaseViewController.operations.prepareDraftEntity,
		activateDraftEntity: BaseViewController.operations.activateDraftEntity
	};

	return BaseViewController;

}, /* bExport= */true);

}; // end of sap/ui/generic/template/BaseViewController.js
if ( !jQuery.sap.isDeclared('sap.ui.generic.template.TemplateComponent') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.generic.templates.TemplateComponent.
jQuery.sap.declare('sap.ui.generic.template.TemplateComponent'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.mvc.ViewType'); // unlisted dependency retained
sap.ui.define("sap/ui/generic/template/TemplateComponent",[
	'jquery.sap.global', 'sap/ui/core/UIComponent', 'sap/ui/generic/template/library', 'sap/m/MessageBox', 'sap/ui/model/json/JSONModel', 'sap/ui/core/mvc/ViewType'
], function(jQuery, UIComponent, library, MessageBox, JSONModel, ViewType) {
	"use strict";

	/**
	 * Constructor for a new TemplateComponent.
	 * 
	 * @param {string} [sId] ID for the new control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Creates and initializes a new Smart Template component with the given <code>sId</code> and settings.
	 * @extends sap.ui.core.UIComponent
	 * @author SAP SE
	 * @version 1.32.7
	 * @constructor
	 * @public
	 * @since 1.30.0
	 * @alias sap.ui.generic.template.TemplateComponent
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var TemplateComponent = UIComponent.extend("sap.ui.generic.template.TemplateComponent", /** @lends sap.ui.generic.template.TemplateComponent.prototype */
	{
		metadata: {
			properties: {
				/**
				 * Name of template
				 */
				templateName: {
					type: "string",
					defaultValue: null
				},
				/**
				 * Entity Set
				 */
				entitySet: {
					type: "string",
					defaultValue: null
				},
				/**
				 * Navigation property of the current component
				 */
				navigationProperty: {
					type: "string",
					defaultValue: null
				},
				/**
				 * Instance of AppComponent
				 */
				appComponent: {
					type: "object",
					defaultValue: null
				},
				/**
				 * Refresh required when the component is activated
				 */
				isRefreshRequired: {
					type: "boolean",
					defaultValue: false
				},
				/**
				 * Prevent binding done in the navigation controller when the component is activated/created.
				 * 
				 * @since 1.32.0
				 */
				preventBinding: {
					type: "boolean",
					defaultValue: false
				}
			},
			library: "sap.ui.generic.template"
		}
	});

	// TODO: clarify with Marcel: this.oContainer
	TemplateComponent.prototype.getComponentContainer = function() {
		// TODO: align with UI5 - how to access component container
		return this.oContainer;
	};
	// TODO: clarify with above todo (this.oContainer)
	TemplateComponent.prototype.setContainer = function() {
		var oModel;
		// call overwritten setContainer (sets this.oContainer)
		sap.ui.core.UIComponent.prototype.setContainer.apply(this, arguments);
		if (this.oContainer) {
			oModel = this.oContainer.getModel();
			if (oModel) {
				oModel.getMetaModel().loaded().then(function() {
					// Do the templating once the metamodel is loaded
					this.runAsOwner(function() {
						var oView = this._createXMLView();
						this.setAggregation("rootControl", oView);
						this.getUIArea().invalidate();
					}.bind(this));
				}.bind(this));
			}
		}
	};

	TemplateComponent.prototype._createXMLView = function() {
		var oView = null;

		var oMetaModel = this.getModel().getMetaModel();
		var oEntitySet = oMetaModel.getODataEntitySet(this.getEntitySet());
		if (!oEntitySet || !oEntitySet.entityType) {
			this.handleErrors();
			return null;
		}

		this._enhanceI18nModel();

		// TODO: how to get the helpers from a template definition
		jQuery.sap.require("sap.ui.model.odata.AnnotationHelper");
		try {
			var sStableId = this._determineStableID();
			
			oView = sap.ui.getCore().byId(sStableId);
			if (oView){
				window.console.warn("View with ID: " + sStableId + " already exists - old view is getting destroyed now!");
				try {
					oView.destroy();
				} catch (ex) {
					window.console.error("Error destroying view: " + ex);
				}
				oView = null;
			}
			
			// device model
            var oDeviceModel = new JSONModel(sap.ui.Device);   
            oDeviceModel.setDefaultBindingMode("OneWay");
			
			oView = sap.ui.view({
				preprocessors: {
					xml: {
						bindingContexts: {
							meta: oMetaModel.createBindingContext(oMetaModel.getODataEntityType(oEntitySet.entityType, true)),
							entitySet: oMetaModel.createBindingContext(oMetaModel.getODataEntitySet(this.getEntitySet(), true))
						},
						models: {
							device: oDeviceModel,
							meta: oMetaModel,
							entitySet: oMetaModel,
							parameter: this._createParameterModel(oEntitySet.entityType)
						},
						preprocessorsData : this.getComponentData().preprocessorsData
					}
				},
				id: sStableId,
				type: ViewType.XML,
				viewName: this.getTemplateName(),
				height: "100%"
			});
		} catch (e) {
			this.handleErrors(e);
			// forward exception
			throw e;
		}
		return oView;
	};

	TemplateComponent.prototype._determineStableID = function() {
		if (this.getAppComponent().getMetadata().getComponentName() === "" || this.getTemplateName() === "" || this.getEntitySet() === "") {
			var sText = "Stable Id could not be determined in sap.ui.generic.template.TemplateComponent. Either application component name or template name or entity set is empty.";
			this.handleErrors(new Error(sText));
			throw new Error(sText + this);
		}
		return this.getAppComponent().getMetadata().getComponentName() + '::' + this.getTemplateName() + '::' + this.getEntitySet();
	};

	TemplateComponent.prototype._enhanceI18nModel = function() {
		var oModelApplication = this.getAppComponent().getModel('i18n|' + this.getMetadata().getComponentName() + '|' + this.getEntitySet());
		if (!oModelApplication) {
			return;
		}
		var oModelTemplate = this.getModel('i18n');
		oModelTemplate.enhance(oModelApplication.getResourceBundle());
	};

	TemplateComponent.prototype._createParameterModel = function(sEntityType) {
		var isDraftEnabled = this.getAppComponent().getTransactionController().getDraftController().getDraftContext().isDraftEnabled(this.getEntitySet());
		var oSettings = null;
		var oAllSettings = this.getComponentContainer().getSettings(); // this should have all settings passed to the component during creation

		// create settings section in parameter model with all settings passed to the component
		oSettings = jQuery.extend({}, oAllSettings);

		// remove properties not needed or available on the component itself
		delete oSettings.appComponent;
		delete oSettings.entitySet;
		delete oSettings.navigationProperty;

		return new JSONModel({
			entitySet: this.getEntitySet(),
			entityType: sEntityType,
			"sap-ui-debug": window['sap-ui-debug'],
			isDraftEnabled: isDraftEnabled,
			"settings": oSettings,
			"manifest": this.getAppComponent().getMetadata().getManifest()
		});
	};

	// TODO: Clarify error handling
	TemplateComponent.prototype.handleErrors = function(oError) {
		var oView = this.getAggregation("rootControl");
		if (!oView || !oView.getController()) {
			return;
		}
		var oController = oView.getController();
		oController.handleError(oError);
	};

	TemplateComponent.prototype.destroy = function() {
		UIComponent.prototype.destroy.apply(this, arguments);
	};

	TemplateComponent.prototype.getRouter = function() {
		if (this.getAppComponent()) {
			return this.getAppComponent().getRouter();
		}
		return UIComponent.prototype.getRouter.apply(this, arguments);
	};

	/**
	 * Method called if this component is activated. <b>Note</b>: This method is not called if the component is newly created. Example code:
	 * 
	 * <pre><code>
	 * if (this.getIsRefreshRequired()) {
	 * 	sap.ui.generic.template.TemplateComponent.prototype.onActivate.apply(this, arguments);
	 * 	// do refresh
	 * }
	 * </code></pre>
	 * 
	 * @protected
	 */
	TemplateComponent.prototype.onActivate = function() {
		this.setIsRefreshRequired(false);
	};

	/**
	 * Method called if this component is deactivated.
	 * 
	 * @protected
	 */
	TemplateComponent.prototype.onDeactivate = function() {
	};

	return TemplateComponent;

}, /* bExport= */true);

}; // end of sap/ui/generic/template/TemplateComponent.js
