// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.vk.library-all');
if ( !jQuery.sap.isDeclared('sap.ui.vk.DvlException') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides an exception class for DVL errors.
jQuery.sap.declare('sap.ui.vk.DvlException'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Exception'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/DvlException",[
	"jquery.sap.global", "sap/ui/base/Exception"
], function(jQuery, Exception) {
	"use strict";

	/**
	 * This exception is thrown, when an error occurs in DVL API.
	 *
	 * @class
	 *
	 * @param {sap.ve.dvl.DVLRESULT} code The error code.
	 * @param {string} message The error message.
	 * @private
	 * @author SAP SE
	 * @version 1.32.3
	 * @extends sap.ui.base.Exception
	 * @alias sap.ui.vk.DvlException
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var DvlException = function(code, message) {
		this.name = "DvlException";
		this.code = code;
		this.message = message;
	};
	DvlException.prototype = jQuery.sap.newObject(Exception.prototype);

	return DvlException;
});

}; // end of sap/ui/vk/DvlException.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.FlexibleControlRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides default renderer for control sap.ui.vk.FlexibleControl
jQuery.sap.declare('sap.ui.vk.FlexibleControlRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/FlexibleControlRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";


	/**
	 * vk/FlexibleControl renderer.
	 * @namespace
	 */
	var FlexibleControlRenderer = {
	};
	
	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRenderManager the RenderManager that can be used for writing to the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	FlexibleControlRenderer.render = function(oRenderManager, oFlexibleControl){
		// convenience variable
		var rm = oRenderManager;

		// write the HTML into the render manager
		rm.write("<div");
		rm.writeControlData(oFlexibleControl);
		rm.addClass("sapUiFlexControl");

		if (oFlexibleControl.getWidth() && oFlexibleControl.getWidth() != '') {
			rm.addStyle("width", oFlexibleControl.getWidth());
		}
		if (oFlexibleControl.getHeight() && oFlexibleControl.getHeight() != '') {
			rm.addStyle("height", oFlexibleControl.getHeight());
		}

		rm.writeStyles();
		rm.writeClasses();
		rm.write(">"); // DIV element
		
		// render content
		var aContent = oFlexibleControl.getContent();
		var layout = oFlexibleControl.getLayout();
	
		var cellClass = "sapUiFlexCellStacked";
		
		if (layout == "Vertical") {
			cellClass = "sapUiFlexCellVertical";
		}
		
		for ( var i = 0; i < aContent.length; i++) {
			var content = aContent[i];
			
			rm.write("<div id=\"" + oFlexibleControl.getId() + "Content_" + i + "\" class=\"" + cellClass + "\"");

			var layoutData = content.getLayoutData();
			if (layoutData && layout != "Stacked") {
				rm.write(" style=\"");
				
				if (layoutData.getSize() && layoutData.getSize() != '') {
					rm.write("height: " + layoutData.getSize() + ";");
				}
				if (layoutData.getMinSize() && layoutData.getMinSize() != '') {
					rm.write("min-height: " + layoutData.getMinSize() + ";" );
				}
				if (layoutData.getMarginTop() && layoutData.getMarginTop() != '') {
					rm.write("margin-top: " + layoutData.getMarginTop() + ";" );
				}
				if (layoutData.getMarginBottom() && layoutData.getMarginBottom() != '') {
					rm.write("margin-bottom: " + layoutData.getMarginBottom() + ";" );
				}
				
				rm.write("\"");
			}
			
			rm.write(">");
			rm.renderControl(content);
			rm.write("</div>");
		}
	
		rm.write("</div>");
	};
	

	return FlexibleControlRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/vk/FlexibleControlRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.InputDeviceMouse') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.InputDeviceMouse.
jQuery.sap.declare('sap.ui.vk.InputDeviceMouse'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/InputDeviceMouse",["jquery.sap.global", "sap/ui/base/EventProvider"], function(jQuery, EventProvider) {
	"use strict";
	
	var Mouse = EventProvider.extend("sap.ui.vk.InputDeviceMouse", {
		metadata: {
			publicMethods: [
			    "isSupported",
			    "enable",
			    "disable"
			]
		},
		
		constructor: function (Loco) {
			this._loco = Loco;
			this._buttons = 0;
			this._buttonFlagsValue = 0;
			this._zoomOrigin = {x: 0, y: 0};
		},
		
		_buttonFlags: function (button, down) {
			if (down) {
				this._buttonFlagsValue |= (1 << button);
			} else {
				this._buttonFlagsValue &= ~(1 << button);
			}
			
			return this._buttonFlagsValue;
		},
		
		_eventToInput: function (event, buttonsOverride) {
			// Encapsulate HTML mouse event to Loco input event
			// "button" as bit mask: 1: left, 2: right, 4: middle, 8: Fourth, 16: Fifth, ...			
			var btn = (event.buttons != undefined) ? event.buttons : this._buttonFlagsValue;
			if (buttonsOverride) {
				btn = buttonsOverride;
			}
			var input = { x: 0, y: 0, z: 0, d: 0, n: 0, buttons: btn, scroll: event.wheelDelta, points: [], handled: false};		
			var n = 0;
			
			switch (btn) {
			case 0: // Mouse up?
			case 1:	// 1 finger pan
				n = 1;
				input.points.push({x: event.pageX, y: event.pageY, z: 0});
				break;
			case 3:	// 2 fingers pan
			case 4: 
				n = 2;
				input.points.push({x: event.pageX, y: event.pageY, z: 0});
				input.points.push({x: event.pageX, y: event.pageY, z: 0});
				break;
			case 2: // 2 fingers zoom
				n = 2;
				input.points.push({x: this._zoomOrigin.x, y: event.pageY, z: 0});
				input.points.push({x: this._zoomOrigin.x, y: event.pageY + (this._zoomOrigin.y - event.pageY) * 2, z: 0});
				break;
			default:
				n = 0;
				break;
			}
			
			input.n = n;
			
			return input;
		},
		
		_onmouseup: function (event) {
			var btn = (event.buttons != undefined) ? event.buttons : this._buttonFlags(event.button, false);
			if (event._sapui_handledByControl) {
				return;
			}
			
			var input = this._eventToInput(event, this._buttons);
			this._loco.endGesture(input);
			
			if (btn == 2) {
				this._zoomOrigin.x = event.pageX;
				this._zoomOrigin.y = event.pageY;
			}
			
			var input = this._eventToInput(event);			
			if (btn != 0) {
				input.handled = false;
				this._loco.beginGesture(input);
			}
	
			this._buttons = btn;
			
			if (input.handled) {
				event.preventDefault();
			}
			
			event._sapui_handledByControl = true;
		},
		
		_onmousemove: function (event) {
			var btn = (event.buttons != undefined) ? event.buttons : this._buttonFlagsValue;
			if (event._sapui_handledByControl || btn == 0) {
				return;
			}
			
			var input = this._eventToInput(event);
			this._loco.move(input);
	
			if (input.handled) {
				event._sapui_handledByControl = true;
				event.preventDefault();
			}
		},
		
		_onmousedown: function (event) {
			var btn = (event.buttons != undefined) ? event.buttons : this._buttonFlags(event.button, true);
			
			if (event._sapui_handledByControl) {
				return;
			}
			
			if (this._buttons != 0) {
				var input = this._eventToInput(event, this._buttons);
				this._loco.endGesture(input);
			}

			if (btn == 2) {
				this._zoomOrigin.x = event.pageX;
				this._zoomOrigin.y = event.pageY;
			}			
			var input = this._eventToInput(event);
						
			input.handled = false;
			this._loco.beginGesture(input);
			this._prevButtons = btn;
			this._buttons = btn;
			
			if (input.handled) {
				event._sapui_handledByControl = true;
				event.preventDefault();
			}
		},
		
		_onmousewheel: function (ev) {
			var event = ev.originalEvent ? ev.originalEvent : ev;
			if (event._sapui_handledByControl || this._buttons != 0) {
				return;
			}
			
			this._zoomOrigin.x = event.pageX;
			this._zoomOrigin.y = event.pageY;
			
			var simevent = {pageX: event.pageX, pageY: event.pageY, buttons: 2, wheelDelta: event.wheelDelta};
			var input = this._eventToInput(simevent);
			this._loco.beginGesture(input);
			
			var delta = event.detail ? event.detail * (-40) : event.wheelDelta;
			
			simevent.pageY -= delta / 5;
			input = this._eventToInput(simevent);
			
			input.handled = false;
			this._loco.move(input);
			
			input.handled = false;
			this._loco.endGesture(input);
			
			if (input.handled) {
				event._sapui_handledByControl = true;
				event.preventDefault();
			}
		},
		
		_oncontextmenu: function (event) {			
			var input = this._eventToInput(event);
			
			this._loco.contextMenu(input);
			
			if (input.handled) {
				event._sapui_handledByControl = true;
				event.preventDefault();
			}
		},
		
		isSupported: function () {
			return true;
		},
		
		enable: function (control) {
			this._buttonFlagsValue = 0;
			this._buttons = 0;
			this._mousedownProxy = this._onmousedown.bind(this);
			this._mouseupProxy = this._onmouseup.bind(this);
			this._mousemoveProxy = this._onmousemove.bind(this);
			this._mousewheelProxy = this._onmousewheel.bind(this);
			this._contextmenuProxy = this._oncontextmenu.bind(this);
			this._control = control;
			
			var func = (this._control) ? this._control.attachBrowserEvent.bind(this._control) : window.document.addEventListener;
			func('mousedown', this._mousedownProxy, false);
			func('mouseup', this._mouseupProxy, false);
			func('mousemove', this._mousemoveProxy, false);
			func('mousewheel', this._mousewheelProxy, false);
			func('DOMMouseScroll', this._mousewheelProxy, false);
			func("contextmenu", this._contextmenuProxy, false);
		},
		
		disable: function () {
			var func = (this._control) ? this._control.attachBrowserEvent.bind(this._control) : window.document.addEventListener;
			func('mousedown', this._mousedownProxy);
			func('mouseup', this._mouseupProxy);		
			func('mousemove', this._mousemoveProxy);
			func('mousewheel', this._mousewheelProxy);
			func('DOMMouseScroll', this._mousewheelProxy);
			func("contextmenu", this._contextmenuProxy);
		}
	});
	
	return Mouse;
}, /* bExport= */ true);
}; // end of sap/ui/vk/InputDeviceMouse.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.InputDevicePointer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.InputDevicPointer.
jQuery.sap.declare('sap.ui.vk.InputDevicePointer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/InputDevicePointer",["jquery.sap.global", "sap/ui/base/EventProvider", "./InputDeviceMouse"], function(jQuery, EventProvider, InputDeviceMouse) {
	"use strict";
	
	var Pointer = EventProvider.extend("sap.ui.vk.InputDevicePointer", {
		metadata: {
			publicMethods: [
			    "isSupported",
			    "enable",
			    "disable"
			]
		},
		
		constructor: function (Loco) {
			this._loco = Loco;
			this._pointerIds = [];
			this._pointers = [];
			this._count = 0;
			this._points = 0;
			this._buttons = 0;
			this._mouse = new InputDeviceMouse(this._loco);
		},
		
		_clearPointers: function () {
			this._pointerIds = [];
			this._pointers = [];
			this._count = 0;
			this._points = 0;
			this._buttons = 0;
		},
	
		_addPointer: function (id, _x, _y) {
			//jQuery.sap.log.debug("AddPointer[" + id + "]: " + _x + ", " + _y);
			
			if (this._pointerIds[id] == null) {
				this._pointerIds[id] = this._count;
			}
			
			var index = this._pointerIds[id];
			
			if (this._pointers.length <= index || this._pointers[index] == null) {
				this._count++;
			}
			
			this._pointers[index] = {x: _x, y: _y};
			
			return this._count;
		},
	
		_removePointer: function (id) {
			//jQuery.sap.log.debug("RemovePointer[" + id + "]");
			
			if (this._pointerIds[id] == null) {
				return this._count;
			}
			
			var index = this._pointerIds[id];
			this._pointerIds[id] = null;
			
			if (this._pointers.length > index && this._pointers[index] != null) {
				this._count --;
			}
			
			this._pointers[index] = null;
			
			return this._count;
		},
	
		_eventToInput: function (event) {
			// Encapsulate HTML pointer event to this._loco input event
			var input = { x: 0, y: 0, z: 0, d: 0, n: this._count, buttons: 0, scroll: 0, points: [], handled: false};		
		
			var tp = this._pointers;
			var l = tp.length;
			
			for (var i = 0; i < l; i++) {
				var ep = tp[i];
				
				if (ep != null) {
					input.points.push({x: ep.x, y: ep.y, z: 0});
				}
			}
			
			return input;
		},
	
		_onpointerdown: function (ev) {
			var event = ev.originalEvent ? ev.originalEvent : ev;
			
			if (event.pointerType != "touch" && event.pointerType != "pen") {
				this._buttons = event.buttons;
				this._mouse._onmousedown(event);
				return;
			}
			
			if (event.isPrimary) {
				this._clearPointers();
			}
			
			this._addPointer(event.pointerId, event.pageX, event.pageY);
			
			event.target.setPointerCapture(event.pointerId);
			
			var input = this._eventToInput(event);
			
			if (this._points != 0 && this._points != input.n) {
				this._loco.endGesture(input);
			}
	
			this._points = input.n;
			input.handled = false;
			this._loco.beginGesture(input);
			
			if (input.handled) {
				event._sapui_handledByControl = true;
				event.preventDefault();
			} else {
				this._removePointer(event.pointerId);
			}
		},
		
		_onpointerup: function (ev) {
			var event = ev.originalEvent ? ev.originalEvent : ev;
			
			if (event.pointerType != "touch" && event.pointerType != "pen") {
				this._buttons = 0;
				this._mouse._onmouseup(event);
				return;
			}
			
			this._removePointer(event.pointerId);
			
			event.target.releasePointerCapture(event.pointerId);
			
			var input = this._eventToInput(event);
			
			this._loco.endGesture(input);
			
			if (input.n != 0 && this._points != input.n) {
				input.handled = false;
				this._loco.beginGesture(input);
			}
			
			this._points = input.n;
			
			if (input.handled) {
				event._sapui_handledByControl = true;
				event.preventDefault();
			}
		},
		
		_onpointermove: function (ev) {
			var event = ev.originalEvent ? ev.originalEvent : ev;
			
			if (event.pointerType != "touch" && event.pointerType != "pen") {
				if (this._buttons != event.buttons) {
					this._mouse._onmousedown(event);
					this._buttons = event.buttons;
				} else {
					this._mouse._onmousemove(event);
				}
				return;
			}
			
			this._addPointer(event.pointerId, event.pageX, event.pageY);
			
			var input = this._eventToInput(event);
			
			if (this._points != input.n) {
				this._loco.endGesture(input);
				input.handled = false;
				this._loco.beginGesture(input);
				this._points = input.n;
			} else {
				this._loco.move(input);
			}
			
			if (input.handled) {
				event._sapui_handledByControl = true;
				event.preventDefault();
			}
		},
		
		isSupported: function () {
			return typeof window.onpointerdown !== 'undefined';
		},
		
		enable: function (control) {
			this._pointerIds = [];
			this._pointers = [];		
			this._points = 0;
			this._count = 0;
			this._buttons = 0;
			this._mouse._buttons = 0;
			
			this._pointerdownProxy = this._onpointerdown.bind(this);
			this._pointerupProxy = this._onpointerup.bind(this);
			this._pointermoveProxy = this._onpointermove.bind(this);
			this._mousewheelProxy = this._mouse._onmousewheel.bind(this._mouse);
			this._contextmenuProxy = this._mouse._oncontextmenu.bind(this._mouse);
			this._control = control;
			
			var func = (this._control) ? this._control.attachBrowserEvent.bind(this._control) : window.document.addEventListener;
			func('pointerdown', this._pointerdownProxy, false);
			func('pointerup', this._pointerupProxy, false);
			func('pointermove', this._pointermoveProxy, false);
			func('mousewheel', this._mousewheelProxy, false);
			func('DOMMouseScroll', this._mousewheelProxy, false);
			func("contextmenu", this._contextmenuProxy, false);
		},
		
		disable: function () {
			var func = (this._control) ? this._control.attachBrowserEvent.bind(this._control) : window.document.addEventListener;
			func('pointerdown', this._pointerdownProxy);
			func('pointerup', this._pointerupProxy);
			func('pointermove', this._pointermoveProxy);
			func('mousewheel', this._mousewheelProxy);
			func('DOMMouseScroll', this._mousewheelProxy);
			func("contextmenu", this._contextmenuProxy);
		}
	});
	
	return Pointer;
}, /* bExport= */ true);
}; // end of sap/ui/vk/InputDevicePointer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.InputDeviceSAPUI5') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.InputDevicTouch.
jQuery.sap.declare('sap.ui.vk.InputDeviceSAPUI5'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/InputDeviceSAPUI5",["jquery.sap.global", "sap/ui/base/EventProvider"], function(jQuery, EventProvider) {
	"use strict";
	
	var Touch = EventProvider.extend("sap.ui.vk.InputDeviceSAPUI5", {
		metadata: {
			publicMethods: [
			    "isSupported",
			    "enable",
			    "disable"
			]
		},
		
		constructor: function (Loco) {
			this._loco = Loco;
			this._points = 0;
		},
		
		_eventToInput: function (event) {
			// Encapsulate HTML touch event to this._loco input event
			var input = { x: 0, y: 0, z: 0, d: 0, n: event.touches.length, buttons: 0, scroll: 0, points: [], handled: false};	
	
			for (var i = 0; i < input.n; i++) {
				var et = event.touches[i];
				input.points.push({x: et.pageX, y: et.pageY, z: 0});
			}
			
			return input;
		},
		
		_ontouchdown: function (event) {
			//if (event._sapui_handledByControl) {
			//	return;
			//}
			
			var input = this._eventToInput(event);
			
			if (this._points != 0 && this._points != input.n) {
				this._loco.endGesture(input);
			}
	
			this._points = input.n;
			input.handled = false;
			this._loco.beginGesture(input);
			
			if (input.handled) {
				event._sapui_handledByControl = true;
				event.preventDefault();
			}
		},
		
		_ontouchup: function (event) {
			//if (event._sapui_handledByControl) {
			//	return;
			//}
			
			var input = this._eventToInput(event);
			
			
			this._loco.endGesture(input);
			this._points = 0;
			
			if (input.handled) {
				event._sapui_handledByControl = true;
				event.preventDefault();
			}
		},
	
		_ontouchmove: function (event) {
			//if (event._sapui_handledByControl) {
			//	return;
			//}
			
			var input = this._eventToInput(event);
			
			//console.log("points: " + input.n);
			if (this._points != input.n) {
				this._loco.endGesture(input);
				input.handled = false;
				this._loco.beginGesture(input);
				this._points = input.n;
			} else {
				this._loco.move(input);
			}
			
			if (input.handled) {
				event._sapui_handledByControl = true;
				event.preventDefault();
			}
		},
	
		isSupported: function () {
			return typeof window.ontouchstart !== 'undefined';
		},
		
		enable: function (control) {
			this._points = 0;
			this._touchdownProxy = this._ontouchdown.bind(this);
			this._touchupProxy = this._ontouchup.bind(this);
			this._touchmoveProxy = this._ontouchmove.bind(this);
			this._control = control;
			
			if (!this._control) {
				return;
			}
			control.attachBrowserEvent("saptouchstart", this._touchdownProxy, false);
			control.attachBrowserEvent("saptouchend", this._touchupProxy, false);
			control.attachBrowserEvent("saptouchmove", this._touchmoveProxy, false);
			control.attachBrowserEvent("touchstart", this._touchdownProxy, false);
			control.attachBrowserEvent("touchend", this._touchupProxy, false);
			control.attachBrowserEvent("touchmove", this._touchmoveProxy, false);
		},
		
		disable: function () {
			if (!this._control) {
				return;
			}
			this._control.detachBrowserEvent("saptouchstart", this._touchdownProxy, false);
			this._control.detachBrowserEvent("saptouchend", this._touchupProxy, false);
			this._control.detachBrowserEvent("saptouchmove", this._touchmoveProxy, false);
			this._control.detachBrowserEvent("touchstart", this._touchdownProxy, false);
			this._control.detachBrowserEvent("touchend", this._touchupProxy, false);
			this._control.detachBrowserEvent("touchmove", this._touchmoveProxy, false);
		}
	});
	
	return Touch;
}, /* bExport= */ true);
}; // end of sap/ui/vk/InputDeviceSAPUI5.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.InputDeviceTouch') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.InputDevicTouch.
jQuery.sap.declare('sap.ui.vk.InputDeviceTouch'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/InputDeviceTouch",["jquery.sap.global", "sap/ui/base/EventProvider"], function(jQuery, EventProvider) {
	"use strict";
	
	var Touch = EventProvider.extend("sap.ui.vk.InputDeviceTouch", {
		metadata: {
			publicMethods: [
			    "isSupported",
			    "enable",
			    "disable"
			]
		},
		
		constructor: function (Loco) {
			this._loco = Loco;
			this._points = 0;
		},
		
		_eventToInput: function (event) {
			// Encapsulate HTML touch event to this._loco input event
			var input = { x: 0, y: 0, z: 0, d: 0, n: event.touches.length, buttons: 0, scroll: 0, points: [], handled: false};	
	
			for (var i = 0; i < input.n; i++) {
				var et = event.touches[i];
				input.points.push({x: et.pageX, y: et.pageY, z: 0});
			}
			
			return input;
		},
		
		_ontouchdown: function (event) {
			var input = this._eventToInput(event);
			
			if (this._points != 0 && this._points != input.n) {
				this._loco.endGesture(input);
			}
	
			this._points = input.n;
			input.handled = false;
			this._loco.beginGesture(input);
			
			if (input.handled) {
				event._sapui_handledByControl = true;
				event.preventDefault();
			}
		},
		
		_ontouchup: function (event) {
			var input = this._eventToInput(event);
			
			
			this._loco.endGesture(input);
			this._points = 0;
			
			if (input.handled) {
				event._sapui_handledByControl = true;
				event.preventDefault();
			}
		},
	
		_ontouchmove: function (event) {
			var input = this._eventToInput(event);
			
			//console.log("points: " + input.n);
			if (this._points != input.n) {
				this._loco.endGesture(input);
				input.handled = false;
				this._loco.beginGesture(input);
				this._points = input.n;
			} else {
				this._loco.move(input);
			}
			
			if (input.handled) {
				event._sapui_handledByControl = true;
				event.preventDefault();
			}
		},
	
		isSupported: function () {
			return typeof window.ontouchstart !== 'undefined';
		},
		
		enable: function (control) {
			this._points = 0;
			this._touchdownProxy = this._ontouchdown.bind(this);
			this._touchupProxy = this._ontouchup.bind(this);
			this._touchmoveProxy = this._ontouchmove.bind(this);
			this._control = control;
			
			var func = (this._control) ? this._control.attachBrowserEvent.bind(this._control) : window.document.addEventListener;
			func('touchstart', this._touchdownProxy, false);
			func('touchend', this._touchupProxy, false);
			func('touchmove', this._touchmoveProxy, false);
		},
		
		disable: function () {
			var func = (this._control) ? this._control.attachBrowserEvent.bind(this._control) : window.document.addEventListener;	
			func('touchstart', this._touchdownProxy);
			func('touchend', this._touchupProxy);
			func('touchmove', this._touchmoveProxy);
		}
	});
	
	return Touch;
}, /* bExport= */ true);
}; // end of sap/ui/vk/InputDeviceTouch.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.Loco') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.Loco.
jQuery.sap.declare('sap.ui.vk.Loco'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/Loco",[
	"jquery.sap.global", "sap/ui/base/EventProvider", "./InputDevicePointer", "./InputDeviceMouse", "./InputDeviceTouch"
], function(jQuery, EventProvider, InputDevicePointer, InputDeviceMouse, InputDeviceTouch) {
	"use strict";

	/**
	 * @class
	 * The Loco library's core purpose is to intercept input event data for a SAPUI5 target and interpret the data based on a supported set of gestures.
	 */
	var Loco = EventProvider.extend("sap.ui.vk.Loco", {
		metadata: {
			publicMethods: [
			    "addHandler",
			    "removeHandler",
			    "beginGesture",
			    "move",
			    "endGesture",
			    "contextMenu"
			]
		},

		/**
		 * Constructor for a Loco.
		 *
		 * @class
		 * Some class description goes here.
		 * @extends sap.ui.core.EventProvider
		 *
		 * @author SAP SE
		 * @version 1.32.3
		 *
		 * @constructor
		 * @public
		 * @alias sap.ui.vk.Loco
		 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
		 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
		 */
		constructor: function() {
			if (Loco._instance) {
				return Loco._instance;
			}

			EventProvider.apply(this);
			/* Array of ViewportHandler object */
			this._handlers = [];
			this._gesture = false;

			/* Click, double-click simulation */
			this._touchOrigin = {x: 0, y: 0, z: 0};
			this._touchMoved = false;
			this._touchButton = 0;

			/* Tick and timer */
			this._touchStart = 0;
			this._touchEnd = 0;
			this._clickTimer = 0;
			this._isDoubleClick = false;

			Loco._instance = this;
		},

		/**
		 * Cleans up, removes all handlers.
		 *
		 * @public
		 */
		destroy: function() {
			this._gesture = false;
			this._handlers = [];
		},

		/**
		 * Adds a viewport event handler from Loco.
		 *
		 * @param {handler} handler to be added.
		 *
		 * @public
		 */
		addHandler: function (handler) {
			this._handlers.push(handler);
			var viewport = handler.getViewport();
			
			var pointer = new InputDevicePointer(this);
			if (pointer.isSupported()) {
				pointer.enable(viewport);
				viewport._pointer = pointer;
			} else {
				var mouse = new InputDeviceMouse(this);
				if (mouse.isSupported()) {
					mouse.enable(viewport);
					viewport._mouse = mouse;
				}

				var touch = new InputDeviceTouch(this);
				if (touch.isSupported()) {
					touch.enable(viewport);
					viewport._touch = touch;
				}
			}
		},

		/**
		 * Removes a viewport event handler from Loco.
		 *
		 * @param {handler} handler to be removed.
		 *
		 * @public
		 */
		removeHandler: function (handler) {
			var h = this._handlers;
			var count = h.length;
			var viewport = handler.getViewport();

			for (var i = 0; i < count; i++) {
				if (h[i] == handler) {
					h.splice(i, 1);
					
					if (viewport._pointer) {
						viewport._pointer.disable();
						viewport._pointer = null;
					}
					
					if (viewport._touch) {
						viewport._touch.disable();
						viewport._touch = null;
					}
					
					if (viewport._mouse) {
						viewport._mouse.disable();
						viewport._mouse = null;
					}
					
					break;
				}
			}
		},

		/**
		 * @private
		 */
		_processClick: function (dblclk) {
			this._clickTimer = 0;

			var event = { x: 0, y: 0, z: 0, d: 0, n: 0, buttons: 0, scrolls: [], points: [], handled: false};
			event.x = this._touchOrigin.x;
			event.y = this._touchOrigin.y;
			event.z = this._touchOrigin.z;
			event.buttons = this._touchButton;

			var h = this._handlers;
			var count = h.length;

			for (var i = 0; i < count; i++) {
				if (dblclk) {
					h[i].doubleClick(event);
				} else {
					h[i].click(event);
				}

				if (event.handled) {
					break;
				}
			}
		},

		/**
		 * @private
		 */
		_processInput: function (event) {
			// Calculate action point (x, y, z) and distance (d)
			var eps = event.points;

			switch (event.n) {
			case 0:
				event.x = 0;
				event.y = 0;
				event.z = 0;
				event.d = 0;
				break;
			case 2:
				var dx = eps[0].x - eps[1].x, dy = eps[0].y - eps[1].y, dz = eps[0].z - eps[1].z;
				event.x = (eps[0].x + eps[1].x) / 2;
				event.y = (eps[0].y + eps[1].y) / 2;
				event.z = (eps[0].z + eps[1].z) / 2;
				event.d = Math.sqrt(dx * dx + dy * dy + dz * dz);
				break;
			default:
				event.x = eps[0].x;
				event.y = eps[0].y;
				event.z = eps[0].z;
				event.d = 0;
				break;
			}

			return event;
		},
		
		/**
		 * Signal begin of a input gesture.
		 *
		 * @param {event} JSON object including input event data.
		 *
		 * @public
		 */
		beginGesture: function (event) {
			if (this._gesture) {
				return;
			}

			if (this._clickTimer > 0) {
				clearTimeout(this._clickTimer);
				this._clickTimer = 0;
				this._isDoubleClick = true;

				if (event.n == 1 && event.buttons <= 1 && this._touchButton <= 1) {
					this._processClick(true);
				}
			}

			this._processInput(event);
			var h = this._handlers;
			var count = h.length;

			for (var i = 0; i < count; i++) {
				h[i].beginGesture(event);

				if (event.handled) {
					break;
				}
			}	

			var now = new Date();
			this._touchStart = now.getTime();
			this._touchMoved = false;
			this._gesture = true;

			this._touchOrigin.x = event.x;
			this._touchOrigin.y = event.y;
			this._touchOrigin.z = event.z;
			this._touchButton = event.buttons;

			if (this._touchEnd != 0 && this._touchStart - this._touchEnd < 50) {
				this._touchMoved = true;
			}
		},

		/**
		 * Signal movement of a input gesture.
		 *
		 * @param {event} JSON object including input event data.
		 *
		 * @public
		 */
		move: function (event) {
			if (!this._gesture) {
				return;
			}

			this._processInput(event);
			var h = this._handlers;
			var count = h.length;

			for (var i = 0; i < count; i++) {
				h[i].move(event);

				if (event.handled) {
					break;
				}
			}

			var dx = this._touchOrigin.x - event.x;
			var dy = this._touchOrigin.y - event.y;
			var dz = this._touchOrigin.z - event.z;

			if ((dx * dx + dy * dy + dz * dz) > 8) {
				this._touchMoved = true;
			}
		},

		/**
		 * Signal end of a input gesture.
		 *
		 * @param {event} JSON object including input event data.
		 *
		 * @public
		 */
		endGesture: function (event) {
			if (!this._gesture) {
				return;
			}

			this._processInput(event);
			var h = this._handlers;
			var count = h.length;

			for (var i = 0; i < count; i++) {
				h[i].endGesture(event);

				if (event.handled) {
					break;
				}
			}

			var now = new Date();
			this._touchEnd = now.getTime();

			if (!this._touchMoved && !this._isDoubleClick && (this._touchEnd - this._touchStart) < 2000) {
				this._clickTimer = setTimeout(function (that) { that._processClick(false); }, 200, this);
			}

			this._isDoubleClick = false;
			this._gesture = false;
		},
		
		/**
		 * Signal context menu event.
		 *
		 * @param {event} JSON object including input event data
		 *
		 * @public
		 */
		contextMenu: function (event) {
			this._processInput(event);
			
			var h = this._handlers;
			var count = h.length;

			for (var i = 0; i < count; i++) {
				h[i].contextMenu(event);

				if (event.handled) {
					break;
				}
			}
		}
	});

	return Loco;
}, /* bExport= */ true);
}; // end of sap/ui/vk/Loco.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.NativeViewportRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.NativeViewportRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/NativeViewportRenderer",[
	"jquery.sap.global"
], function(jQuery) {
	"use strict";

	/**
	 * Viewport renderer.
	 * @namespace
	 */
	var NativeViewportRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} rm
	 *            the RenderManager that can be used for writing to
	 *            the Render-Output-Buffer
	 * @param {sap.ui.core.Control} control
	 *            the control to be rendered
	 */
	NativeViewportRenderer.render = function(rm, control) {

		rm.write("<div");
		rm.writeControlData(control);
		rm.addClass("sapVizKitNativeViewport");
		rm.writeClasses();
		rm.write(">");
		rm.write("</div>");

	};

	return NativeViewportRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/vk/NativeViewportRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.OverlayRenderer') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.OverlayRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
sap.ui.define("sap/ui/vk/OverlayRenderer",function() {
   "use strict";

   /**
    * @class Overlay renderer.
    * @static
    * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
    */
   var OverlayRenderer = {};

   /**
    * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
    * 
    * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
    * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
    */
   OverlayRenderer.render = function(oRm, oControl) {
      // console.log( "sap.ui.vbm.OverlayRenderer.render.....\r\n");

      // write the HTML into the render manager
      oRm.write("<div align='center'");
      oRm.writeControlData(oControl);
      oRm.addClass("sapUiVkOverlay");
      oRm.writeClasses(oControl);
      oRm.write(">"); // span element
      oRm.write("</div>");

      // update bound data......................................................//
      var oApp;
      if ((oApp = oControl._update())) {
         oControl._load(oApp);
      }
   };

   return OverlayRenderer;

}, /* bExport= */true);

}; // end of sap/ui/vk/OverlayRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.SceneTreeRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.SceneTreeRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/SceneTreeRenderer",[
	"jquery.sap.global"
], function(jQuery) {
	"use strict";

	/**
	 * SceneTree renderer.
	 * @namespace
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var SceneTreeRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm
	 *            the RenderManager that can be used for writing to
	 *            the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl
	 *            the control to be rendered
	 */
	SceneTreeRenderer.render = function(oRm, oControl) {

		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapUiSizeCompact");
		oRm.addClass("sapRULTSceneTree");
		oRm.writeClasses();
		oRm.write(">");
		oRm.renderControl(oControl.getAggregation("_tree"));
		oRm.write("</div>");

	};

	return SceneTreeRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/vk/SceneTreeRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.StepNavigationRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.StepNavigationRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/StepNavigationRenderer",[
	"jquery.sap.global"
], function(jQuery) {
	"use strict";

	/**
	 * Step Navigation renderer.
	 * @namespace
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var StepNavigationRenderer = {};

	/**
	* Renders the HTML for the given control, using the provided
	* {@link sap.ui.core.RenderManager}.
	*
	* @param {sap.ui.core.RenderManager} rm
	*the RenderManager that can be used for writing to
	*the Render-Output-Buffer
	* @param {sap.ui.core.Control} control
	*the control to be rendered
	*/
	StepNavigationRenderer.render = function(rm, control) {
		// return immediately if control is invisible
		if (!control.getVisible()) {
		return;
		}
		
		if (control.getShowToolbar() || control.getShowThumbnails) {
		var oWidth = control.getWidth() !== "auto" ? control.getWidth() : "100%";
		var oHeight = control.getHeight() !== "auto" ? control.getHeight() : "auto";
	
		rm.write("<div");
		rm.addStyle("width", oWidth);
		rm.addStyle("height", oHeight);
		rm.writeControlData(control);
		rm.addClass("sapVizKitStepNavigation");
		rm.writeClasses();
	
		var sTooltip = control.getTooltip_AsString();
		if (sTooltip) {
			rm.writeAttributeEscaped("title", sTooltip);
		}
	
		if (!control.getVisible()) {
			rm.addStyle("visibility", "hidden");
		}
		rm.writeStyles();
	
		rm.write(">");
		if (control.getShowThumbnails()) {
			StepNavigationRenderer._renderScrollerDiv(rm, control);
		}
		rm.write("</div>");
		}

	};
	
	StepNavigationRenderer._renderScrollerDiv = function (rm, control) {
		rm.renderControl(control.getAggregation("layout"));
	};
	
	return StepNavigationRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/vk/StepNavigationRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ToolbarRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.ToolbarRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ToolbarRenderer",[
	"jquery.sap.global"
], function(jQuery) {
	"use strict";

	/**
	 * Toolbar renderer.
	 * @namespace
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var ToolbarRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm
	 *            the RenderManager that can be used for writing to
	 *            the Render-Output-Buffer
	 * @param {sap.ui.core.Control} oControl
	 *            the control to be rendered
	 */
	ToolbarRenderer.render = function(oRm, oControl) {

		oRm.write("<div");
		oRm.writeControlData(oControl);
		oRm.addClass("sapVizKitToolbar");
		oRm.writeClasses();
		oRm.write(">");
		oRm.renderControl(oControl.getAggregation("_toolbar"));
		oRm.write("</div>");

	};

	return ToolbarRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/vk/ToolbarRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.TransformationMatrix') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides data type sap.ui.vk.TransformationMatrix.
jQuery.sap.declare('sap.ui.vk.TransformationMatrix'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.DataType'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/TransformationMatrix",[
	"jquery.sap.global", "sap/ui/base/DataType"
], function(jQuery, DataType) {
	"use strict";

	/**
	 * @class
	 * Transformation matrix is an array of 12 numbers in a row major mode.
	 * @final
	 * @public
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var TransformationMatrix = DataType.createType("sap.ui.vk.TransformationMatrix", {
			isValid : function(value) {
				return TransformationMatrix.getBaseType().isValid(value) && value.length === 12;
			}
		},
		DataType.getType("float[]")
	);

	/**
	 * Parses the given string value and converts it into an array of numbers.
	 * @param {string} value a comma or white space delimited string
	 * @return {number[]} an array of 12 numbers
	 * @static
	 * @public
	 */
	TransformationMatrix.parseValue = function(value) {
		var componentType = TransformationMatrix.getComponentType();
		return value.split(/\s*,\s*|\s+/).map(componentType.parseValue.bind(componentType));
	};

	/**
	 * Converts matrix from 4x3 to 4x4.
	 * @param {number[]} matrix4x3 The matrix to convert.
	 * @return {number[]} The matrix 4x4 with [0, 0, 0, 1] in the last column.
	 * @static
	 * @public
	 */
	TransformationMatrix.convertTo4x4 = function(matrix4x3) {
		var m = matrix4x3;
		return [m[0], m[1], m[2], 0, m[3], m[4], m[5], 0, m[6], m[7], m[8], 0, m[9], m[10], m[11], 1];
	};

	/**
	 * Converts matrix from 4x4 to 4x3.
	 * @param {number[]} matrix4x4 The matrix to convert. The last column must be [0, 0, 0, 1].
	 * @return {number[]} The matrix 4x3 with the last column removed from matrix4x4.
	 * @public
	 * @static
	 */
	TransformationMatrix.convertTo4x3 = function(matrix4x4) {
		var m = matrix4x4;
		jQuery.sap.assert(m[3] === 0 && m[7] === 0 && m[11] === 0 && m[15] === 1, "The transformation matrix is invalid. The last column must be [0, 0, 0, 1].");
		return [m[0], m[1], m[2], m[4], m[5], m[6], m[8], m[9], m[10], m[12], m[13], m[14]];
	};

	jQuery.sap.setObject("sap.ui.vk.TransformationMatrix", TransformationMatrix);

	return TransformationMatrix;
});

}; // end of sap/ui/vk/TransformationMatrix.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ViewerRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.ViewerRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ViewerRenderer",[
	"jquery.sap.global"
], function(jQuery) {
	"use strict";

	/**
	 * Viewer renderer.
	 * @namespace
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var ViewerRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} rm
	 *            the RenderManager that can be used for writing to
	 *            the Render-Output-Buffer
	 * @param {sap.ui.core.Control} control
	 *            the control to be rendered
	 */
	ViewerRenderer.render = function(rm, control) {

		rm.write("<div");
		rm.writeControlData(control);
		rm.addClass("sapVizKitViewer");
		rm.writeClasses();
		rm.addStyle("width", control.getWidth());
		rm.addStyle("height", control.getHeight());
		rm.writeStyles();
		
		
		rm.write(">");
		rm.renderControl(control.getAggregation("_layout"));
		rm.write("</div>");
	};

	return ViewerRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/vk/ViewerRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ViewportHandler') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.ViewportHandler.
jQuery.sap.declare('sap.ui.vk.ViewportHandler'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ViewportHandler",[
    "jquery.sap.global", "sap/ui/base/EventProvider", "sap/ui/core/ResizeHandler"
], function(jQuery, EventProvider, ResizeHandler) {
	"use strict";
	
	var ViewportHandler = EventProvider.extend("sap.ui.vk.ViewportHandler", {
		metadata: {
			publicMethods: [
			    "beginGesture",
			    "move",
			    "endGesture",
			    "click",
			    "doubleClick",
			    "contextMenu",
			    "getViewport"
			]
		},
		
		constructor: function(Viewport) {
			this._viewport = Viewport;
			this._rect = null;
			this._evt = {x: 0, y: 0, z: 0, d: 0, initd: 0};
			this._gesture = false;
			this._viewport.attachEvent("resize", this, this._onresize);
			this._nomenu = false;
		},
		
		destroy: function() {
			this._viewport = null;
			this._rect = null;
			this._evt = null;
			this._gesture = false;
		},
		
		_getOffset: function (obj) {
			var p = {
				x: obj.offsetLeft,
				y: obj.offsetTop
			};
			
			var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement;
			
			while (obj.offsetParent) {
				var parent = obj.offsetParent;
				
				// Second statement in if () fixes Chrome's nasty bug in full screen mode where offsetTop/offsetLeft is wrong
				if (parent == document.getElementsByTagName("body")[0] || parent.parentElement == fullscreenElement) {
					break;
				}
				
				p.x = p.x + parent.offsetLeft - parent.scrollLeft;
				p.y = p.y + parent.offsetTop - parent.scrollTop;
				obj = obj.offsetParent;
			}
			
			return p;
		},
		
		_inside: function (event) {
			if (this._rect == null || true) {
				var id = this._viewport.getIdForLabel();
				var domobj = document.getElementById(id);
				
				if (domobj == null) {
					return false;
				}
				
				var o = this._getOffset(domobj);
				this._rect = {
					x: o.x,
					y: o.y,
					w: domobj.offsetWidth,
					h: domobj.offsetHeight
				};
			}
			
			return (event.x >= this._rect.x && event.x <= this._rect.x + this._rect.w && event.y >= this._rect.y && event.y <= this._rect.y + this._rect.h);
		},
		
		_onresize: function (event) {
			this._gesture = false;
			this._rect = null;
		},
	
		beginGesture: function (event) {
			if (this._inside(event) && !this._gesture) {
				this._gesture = true;
				
				var x = event.x - this._rect.x, y = event.y - this._rect.y;

				this._evt.x = x;
				this._evt.y = y;
				this._evt.d = event.d;
				this._evt.initd = event.d;
				this._evt.avgd = event.d;
				this._evt.avgx = 0;
				this._evt.avgy = 0;

				jQuery.sap.log.debug("Loco: beginGesture: " + x + ", " + y);
				this._viewport.queueCommand(function() {
					this._viewport.beginGesture(x, y);
				}.bind(this));
				
				event.handled = true;

				if (document.activeElement) {
					try {
						document.activeElement.blur();
					} catch (e) {
						// IE can have error calling blur() in fullscreen mode
					}
				}

				var domobj = document.getElementById(this._viewport.getIdForLabel());
				domobj.focus();
			}
			this._nomenu = false;
		},
		
		move: function (event) {
			if (this._gesture) {
				var x = event.x - this._rect.x, y = event.y - this._rect.y;
				var dx = x - this._evt.x;
				var dy = y - this._evt.y;
				var dd = event.d - this._evt.d;
				
				this._evt.x = x;
				this._evt.y = y;
				this._evt.d = event.d;
				
				this._evt.avgx = this._evt.avgx * 0.99 + dx * 0.01;
				this._evt.avgy = this._evt.avgy * 0.99 + dy * 0.01;
				
				var z = 1.0;
				
				if (this._evt.initd > 0) {
					z = 1.0 + dd * (1.0 / this._evt.initd);
				} else if (event.n == 2) {
					if (event.points[0].y > event.points[1].y) {
						z = 1.0 - dd * 0.005;
						if (z < 0.333) {
							z = 0.333;
						}
					} else {
						z = 1.0 + dd * 0.005;
						if (z > 3) {
							z = 3;
						}
					}
				}
				
				//console.log("n: " + event.n + " Zoom factor: " + z);
				
				// Zoom smoothing
				if (this._evt.initd > 0) {
					var avgdist = Math.sqrt(this._evt.avgx * this._evt.avgx + this._evt.avgy * this._evt.avgy);
					
					jQuery.sap.log.debug("AvgDist: " + avgdist);
					if ((Math.abs(event.d - this._evt.avgd) / this._evt.avgd) < (avgdist / 10)) {
						z = 1.0;
					}
				}
				
				// Weighted average threshold
				this._evt.avgd = this._evt.avgd * 0.97 + event.d * 0.03;
				
				switch (event.n) {
				case 1:
					jQuery.sap.log.debug("Loco: Rotate: " + (dx) + ", " + (dy));

					this._viewport.queueCommand(function() {
						this._viewport.rotate(dx, dy);
					}.bind(this));
					break;
				case 2:
					jQuery.sap.log.debug("Loco: Pan: " + (dx) + ", " + (dy));
					if (z != 0 && z != 1.0) {
						jQuery.sap.log.debug("Loco: Zoom: " + (z));
					}
					
					this._viewport.queueCommand(function() {
						this._viewport.pan(dx, dy);
						
						if (dx < 10 && dy < 10 && z != 0 && z != 1.0) {
							this._viewport.zoom(z);
						}
					}.bind(this));
					break;
				default:
					break;
				}
				
				this._nomenu = true;
				event.handled = true;
			}
		},
		
		endGesture: function (event) {
			if (this._gesture) {
				var x = event.x - this._rect.x, y = event.y - this._rect.y;

				jQuery.sap.log.debug("Loco: endGesture: " + x + ", " + y);
				
				this._viewport.queueCommand(function() {
					this._viewport.endGesture();
				}.bind(this));
				
				this._gesture = false;
				event.handled = true;		
			}
		},
		
		click: function (event) {
			if (this._inside(event) && event.buttons <= 1) {
				var x = event.x - this._rect.x, y = event.y - this._rect.y;
				jQuery.sap.log.debug("Loco: click: " + (x) + ", " + (y));
				
				this._viewport.queueCommand(function() {
					this._viewport.tap(x, y, false);
				}.bind(this));
				
				event.handled = true;
			}
		},
		
		doubleClick: function (event) {
			if (this._inside(event) && event.buttons <= 1) {
				var x = event.x - this._rect.x, y = event.y - this._rect.y;
				jQuery.sap.log.debug("Loco: doubleClick: " + (x) + ", " + (y));

				this._viewport.queueCommand(function() {
					this._viewport.tap(x, y, true);
				}.bind(this));
				
				event.handled = true;
			}
		},
		
		contextMenu: function (event) {
			if (this._inside(event) || this._nomenu) {
				this._nomenu = false;

				//jQuery.sap.log.debug("Loco: context menu")
				event.handled = true;
			}
		},
		
		getViewport: function() {
			return this._viewport;
		}
	});
	
	return ViewportHandler;
}, /* bExport= */ true);
}; // end of sap/ui/vk/ViewportHandler.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ViewportRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

jQuery.sap.declare('sap.ui.vk.ViewportRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ViewportRenderer",[
	"jquery.sap.global"
], function(jQuery) {
	"use strict";

	/**
	 * Viewport renderer.
	 * @namespace
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var ViewportRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided
	 * {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} rm
	 *            the RenderManager that can be used for writing to
	 *            the Render-Output-Buffer
	 * @param {sap.ui.core.Control} control
	 *            the control to be rendered
	 */
	ViewportRenderer.render = function(rm, control) {

		rm.write("<div");
		rm.writeControlData(control);
		rm.addClass("sapVizKitViewport");
		rm.writeClasses();
		rm.write(">");
		rm.write("</div>");

	};

	return ViewportRenderer;

}, /* bExport= */ true);

}; // end of sap/ui/vk/ViewportRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.library') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

/**
 * Initialization Code and shared classes of library sap.suite.ui.generic.template.
 */
jQuery.sap.declare('sap.ui.vk.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/library",[
	"jquery.sap.global", "./TransformationMatrix", "./DvlException"
], function(jQuery, TransformationMatrix, DvlException) {
	"use strict";

	/**
	 * SAPUI5 library with controls for displaying 3D models.
	 *
	 * @namespace
	 * @name sap.ui.vk
	 * @author SAP SE
	 * @version 1.32.3
	 * @public
	 */

	// Delegate further initialization of this library to the Core.
	sap.ui.getCore().initLibrary({
		name: "sap.ui.vk",
		dependencies: [
			"sap.ui.core", "sap.ui.unified", "sap.ui.vbm"
		],
		types: [
			"sap.ui.vk.ContentResourceSourceCategory", "sap.ui.vk.TransformationMatrix"
		],
		interfaces: [],
		controls: [
			"sap.ui.vk.NativeViewport", "sap.ui.vk.Overlay", "sap.ui.vk.Viewer", "sap.ui.vk.Viewport", "sap.ui.vk.SceneTree"
		],
		elements: [
			"sap.ui.vk.OverlayArea"
		],
		noLibraryCSS: false,
		version: "1.32.3"
	});

	/**
	 * The types of APIs supported by the {@link sap.ui.vk.GraphicsCore} class.
	 *
	 * @enum {string}
	 * @readonly
	 * @public
	 * @experimental since version 1.32.0. The enumeration might be deleted in the next version.
	 */
	sap.ui.vk.GraphicsCoreApi = {
		/**
		 * The legacy DVL API implemented in the com.sap.ve.dvl library (dvl.js).
		 * @public
		 */
		LegacyDvl: "LegacyDvl"
	};

	/**
	 * The categories of content resources.
	 * @enum {string}
	 * @readonly
	 * @public
	 * @experimental Since 1.32.0 This map is experimental and might be modified or removed in future versions.
	 */
	sap.ui.vk.ContentResourceSourceCategory = {
		/**
		 * The 3D content resource.
		 * @public
		 */
		"3D": "3D",
		/**
		 * The 2D content resource.
		 * @public
		 */
		"2D": "2D"
	};

	/**
	 * The map from file extensions to content resource categories.
	 * @readonly
	 * @private
	 * @experimental Since 1.32.0 This map is experimental and might be modified or removed in future versions.
	 */
	sap.ui.vk.ContentResourceSourceTypeToCategoryMap = {
		"vds": sap.ui.vk.ContentResourceSourceCategory["3D"],
		"png": sap.ui.vk.ContentResourceSourceCategory["2D"],
		"jpg": sap.ui.vk.ContentResourceSourceCategory["2D"],
		"gif": sap.ui.vk.ContentResourceSourceCategory["2D"]
	};

	/**
	 * Utility methods used internally by the library to handle results from DVL.
	 * @private
	 */
	sap.ui.vk.dvl = {
		checkResult: function(result) {
			if (result < 0) {
				throw new DvlException(result, sap.ve.dvl.DVLRESULT.getDescription ? sap.ve.dvl.DVLRESULT.getDescription(result) : "");
			}
			return result;
		},

		getPointer: function(pointer) {
			if (pointer.indexOf("errorcode") === 0) {
				var code = parseInt(pointer.substr(15), 16) - 0x100;
				throw new DvlException(code, sap.ve.dvl.DVLRESULT.getDescription ? sap.ve.dvl.DVLRESULT.getDescription(code) : "");
			}
			return pointer;
		},

		getJSONObject: function(object) {
			if (jQuery.type(object) === "number") {
				throw new DvlException(object, sap.ve.dvl.DVLRESULT.getDescription ? sap.ve.dvl.DVLRESULT.getDescription(object) : "");
			}
			return object;
		}
	};

	return sap.ui.vk;
});

}; // end of sap/ui/vk/library.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.BaseNodeProxy') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides the BaseNodeProxy class.
jQuery.sap.declare('sap.ui.vk.BaseNodeProxy'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.Object'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/BaseNodeProxy",[
	"jquery.sap.global", "./library", "sap/ui/base/Object"
], function(jQuery, library, BaseObject) {
	"use strict";

	var getJSONObject = sap.ui.vk.dvl.getJSONObject;

	/**
	 * Creates a new BaseNodeProxy object.
	 *
	 * @class
	 * Provides a simple, lightweight proxy object to a node in a node hierarchy.
	 *
	 * The objects of this class should not be created directly, and should only be created through the use of the following methods:
	 * <ul>
	 *   <li>{@link sap.ui.vk.NodeHierarchy#enumerateChildren sap.ui.vk.NodeHierarchy.enumerateChildren}</li>
	 *   <li>{@link sap.ui.vk.NodeHierarchy#enumerateAncestors sap.ui.vk.NodeHierarchy.enumerateAncestors}</li>
	 *   <li>{@link sap.ui.vk.ViewStateManager#enumerateSelection sap.ui.vk.ViewStateManager.enumerateSelection}</li>
	 * </ul>
	 *
	 * @param {sap.ui.vk.NodeHierarchy} nodeHierarchy The node hierarchy to which the node belongs to.
	 * @param {string} nodeId The ID of the node which we want to provide a proxy object for.
	 * @public
	 * @author SAP SE
	 * @version 1.32.3
	 * @extends sap.ui.base.BaseObject
	 * @implements sap.ui.base.Poolable
	 * @alias sap.ui.vk.BaseNodeProxy
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var BaseNodeProxy = BaseObject.extend("sap.ui.vk.BaseNodeProxy", /** @lends sap.ui.vk.BaseNodeProxy.prototype */ {
		metadata: {
			publicMethods: [
				"getNodeId",
				"getName",
				"getNodeMetadata",
				"getHasChildren"
			]
		},

		constructor: function(nodeHierarchy, nodeId) {
			this.init(nodeHierarchy, nodeId);
		},

		/**
		 * Initialize this BaseNodeProxy with its data.
		 *
		 * The <code>init</code> method is called by an object pool when the
		 * object is (re-)activated for a new caller.
		 *
		 * @param {sap.ui.vk.NodeHierarchy} nodeHierarchy The NodeHierarchy object this BaseNodeProxy object belongs to.
		 * @param {string} nodeId The ID of the node for which to get BaseNodeProxy.
		 *
		 * @private
		 *
		 * @see sap.ui.base.Poolable.prototype#init
		 */
		init: function(nodeHierarchy, nodeId) {
			this._dvl = nodeHierarchy ? nodeHierarchy.getGraphicsCore()._getDvl() : null;
			this._dvlSceneId = nodeHierarchy ? nodeHierarchy._getDvlSceneId() : null;
			this._dvlNodeId = nodeId;
		},

		/**
		 * Reset BaseNodeProxy data, needed for pooling.
		 *
		 * @private
		 *
		 * @see sap.ui.base.Poolable.prototype#reset
		 */
		reset: function() {
			this._dvlNodeId = null;
			this._dvlSceneId = null;
			this._dvl = null;
		},

		/**
		 * Gets the ID of the node.
		 *
		 * @returns {string} The node's ID.
		 *
		 * @public
		 */
		getNodeId: function() {
			return this._dvlNodeId;
		},

		/**
		 * Gets the name of the node.
		 *
		 * @returns {string} The node's name.
		 *
		 * @public
		 */
		getName: function() {
			return getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, this._dvlNodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_NAME)).NodeName;
		},

		/**
		 * Gets the metadata of the node.
		 *
		 * @return {object} A JSON object containing the node's metadata.
		 *
		 * @public
		 */
		// NB: We cannot name the method getMetadata as there already exists sap.ui.base.Object.getMetadata method.
		getNodeMetadata: function() {
			return getJSONObject(this._dvl.Scene.RetrieveMetadata(this._dvlSceneId, this._dvlNodeId)).metadata;
		},

		/**
		 * Indicates whether the node has child nodes.
		 *
		 * @returns {boolean} A value of <code>true</code> indicates that the node has child nodes, and a value of <code>false</code> indicates otherwise.
		 *
		 * @public
		 */
		getHasChildren: function() {
			return (getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, this._dvlNodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_FLAGS)).Flags
					& (sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_MAPPED_HASCHILDREN | sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_CLOSED)) === sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_MAPPED_HASCHILDREN;
		}
	});

	return BaseNodeProxy;
});

}; // end of sap/ui/vk/BaseNodeProxy.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.CheckEye') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.CheckEye.
jQuery.sap.declare('sap.ui.vk.CheckEye'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.commons.CheckBox'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/CheckEye",['jquery.sap.global', 'sap/ui/commons/CheckBox', './library'],
	function(jQuery, CheckBox, library) {
	"use strict";


	
	/**
	 * Constructor for a new CheckEye.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * In this layout the elements are ordered one below the other
	 * @extends sap.m.CheckBox
	 *
	 * @author SAP SE
	 * @version 1.32.3
	 *
	 * @constructor
	 * @public
	 * @since 1.16.0
	 * @alias sap.ui.vk.CheckEye
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var CheckEye = CheckBox.extend("sap.ui.vk.CheckEye", /** @lends sap.ui.vk.CheckEye.prototype */ { metadata : {
	
		library : "sap.ui.vk",
		properties : {
		}		
	},
	
	onAfterRendering: function() {
		var $this = this.$();
		$this.removeClass('sapUiCb');
		$this.removeClass('sapUiCbChk');
		$this.removeClass('sapUiCbInteractive');
		$this.removeClass('sapUiCbStd');
		$this.addClass('sapUiCheckEye');
	},
	
	renderer: {
		
	}
	
	});
	
	return CheckEye;

}, /* bExport= */ true);

}; // end of sap/ui/vk/CheckEye.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ContentResource') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides class sap.ui.vk.ContentResource.
jQuery.sap.declare('sap.ui.vk.ContentResource'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ContentResource",[
	"jquery.sap.global", "./library", "sap/ui/base/ManagedObject"
], function(jQuery, library, ManagedObject) {
	"use strict";

	/**
	 * Creates a new ContentResource object.
	 *
	 * @class
	 * Specifies a resource to load.

	 * @param {string} [sId] ID of the new content resource. <code>sId</code>is generated automatically if no non-empty ID is given.
	 *                       Note: this can be omitted, regardless of whether <code>mSettings</code> will be provided or not.
	 * @param {object} [mSettings] An optional map/JSON object with initial property values, aggregated objects etc. for the new content resource.
	 * @param {object} [oScope] scope An object for resolving string-based type and formatter references in bindings.
	 * @public
	 * @author SAP SE
	 * @version 1.32.3
	 * @extends sap.ui.base.ManagedObject
	 * @alias sap.ui.vk.ContentResource
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var ContentResource = ManagedObject.extend("sap.ui.vk.ContentResource", /** @lends sap.ui.vk.ContentResource.prototype */ {
		metadata: {
			properties: {
				/**
				 * The source URL of the content resource/file to load from.
				 * The source URL may be omitted if a grouping node is needed.
				 */
				source: "sap.ui.core.URI",

				/**
				 * The source type of the content resource. Valid types:
				 * <ul>
				 *   <li>.vds</li>
				 *   <li>.png</li>
				 *   <li>.jpg</li>
				 *   <li>.gif</li>
				 * </ul>
				 * The source type may be omitted if this is a grouping content node.
				 */
				sourceType: "string",

				/**
				 * The unique ID of the content resource.
				 */
				sourceId: "string",

				/**
				 * The local transformation matrix of the node created for this content resource.
				 */
				localMatrix: "sap.ui.vk.TransformationMatrix",

				/**
				 * The name of the node created for this content resource.
				 */
				name: "string"
			},

			aggregations: {
				/**
				 * Child content resources.
				 */
				contentResources: "sap.ui.vk.ContentResource"
			}
		},

		isTreeBinding: function(name) {
			return name === "contentResources";
		},

		constructor: function(sId, mSettings, oScope) {
			ManagedObject.apply(this, arguments);
			this._loaded = false;
			this._file = null;
			this._nodeProxy = null;
		},

		destroy: function() {
			this._nodeProxy = null;
			this._file = null;
			ManagedObject.prototype.destroy.call(this);
		},

		/**
		 * Sets a {@link https://developer.mozilla.org/en-US/docs/Web/API/File File} object as the source content.
		 * @param {File} file The file to use as the source content.
		 * @returns {sap.ui.vk.ContentResource} <code>this</code> to allow method chaining.
		 * @public
		 */
		setFile: function(file) {
			this._file = file;
			this.setSource(file.name);
			var index = file.name.lastIndexOf(".");
			if (index >= 0 && index < file.name.length - 1) {
				this.setSourceType(file.name.substr(index + 1));
			} else {
				this.setSourceType(undefined);
			}
			return this;
		},

		/**
		 * Gets a {@link https://developer.mozilla.org/en-US/docs/Web/API/File File} object and sets it as the source content.
		 * @returns {File} The file to use as the source content.
		 * @public
		 */
		getFile: function() {
			return this._file;
		},

		/**
		 * Marks the content resource as loaded. After marking the content resource as loaded, its properties cannot be changed.
		 * @returns {sap.ui.vk.ContentResource} <code>this</code> to allow method chaining.
		 * @public
		 */
		setLoaded: function() {
			if (this._loaded) {
				jQuery.sap.log.warning("Content resource can be marked as loaded only once.");
			}
			this._loaded = true;
			return this;
		},

		/**
		 * Indicates that the content resource has been loaded.
		 * @returns {boolean} A value of <code>true</code> is returned if the resource has been loaded; a value of <code>false</code> is returned otherwise.
		 * @public
		 */
		getLoaded: function() {
			return this._loaded;
		},

		/**
		 * Sets the {@link sap.ui.vk.NodeProxy NodeProxy} object created for this content resource.
		 *
		 * If this is the only top level content resource, the {@link sap.ui.vk.NodeProxy NodeProxy} object is not set since
		 * the grouping node is not created, which means that there may be multiple top level nodes.
		 *
		 * @param {sap.ui.vk.NodeProxy} node The {@link sap.ui.vk.NodeProxy NodeProxy} object created for this content resource.
		 * @returns {sap.ui.vk.ContentResource} <code>this</code> to allow method chaining.
		 * @private
		 */
		_setNodeProxy: function(node) {
			this._nodeProxy = node;
			return this;
		},

		/**
		 * Gets the {@link sap.ui.vk.NodeProxy NodeProxy} object created for this content resource.
		 *
		 * If this is the only top level content resource, the {@link sap.ui.vk.NodeProxy NodeProxy} object is not set since
		 * the grouping node is not created, which means that there may be multiple top level nodes.
		 *
		 * @returns {sap.ui.vk.NodeProxy} The {@link sap.ui.vk.NodeProxy NodeProxy} object created for this content resource.
		 * @public
		 */
		getNodeProxy: function() {
			return this._nodeProxy;
		},

		setProperty: function(name, value, suppressInvalidate) {
			if (this._loaded) {
				jQuery.sap.log.warning("Content resource's property " + name + " cannot be changed after the content resource has been loaded.");
			} else {
				ManagedObject.prototype.setProperty.apply(this, arguments);
			}
			return this;
		}
	});

	return ContentResource;
});

}; // end of sap/ui/vk/ContentResource.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.DownloadManager') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

/* global File */

// Provides the DownloadManager class.
jQuery.sap.declare('sap.ui.vk.DownloadManager'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/DownloadManager",[
	"jquery.sap.global", "./library", "sap/ui/base/EventProvider"
], function(jQuery, library, EventProvider) {
	"use strict";

	/**
	 * Creates a new DownloadManager object.
	 *
	 * @class
	 * Provides the functionality to download multiple files from remote locations (URLs) and from local files.
	 *
	 * @param {any[]} sources An array of strings (URLs) and File objects to download.
	 * @param {int} maxParallelTasks The maximum number of downloading tasks to execute in parallel.
	 * @private
	 * @author SAP SE
	 * @version 1.32.3
	 * @extends sap.ui.base.EventProvider
	 * @alias sap.ui.vk.DownloadManager
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var DownloadManager = EventProvider.extend("sap.ui.vk.DownloadManager", /** @lends sap.ui.vk.DownloadManager.prototype */ {
		metadata: {
			publicMethods: [
				"start",
				"attachItemSucceeded",
				"detachItemSucceeded",
				"attachItemFailed",
				"detachItemFailed",
				"attachAllItemsCompleted",
				"detachAllItemsCompleted"
			],

			events: {
				/**
				 * Item is successfully downloaded.
				 */
				itemSucceeded: {
					parameters: {
						/**
						 * The source of type sap.ui.core.URI or File.
						 */
						source: { type: "any" },
						/**
						 * The content of source of type ArrayBuffer.
						 */
						response: { type: "object" }
					}
				},

				/**
				 * Item is not downloaded due to an error.
				 */
				itemFailed: {
					parameters: {
						/**
						 * The source of type sap.ui.core.URI or File.
						 */
						source: { type: "any" },
						/**
						 * The status of the downloading process. Type might be int or string.
						 */
						status: { type: "any" },
						statusText: { type: "string" }
					}
				},

				/**
				 * Downloading all items is completed, successfully or not.
				 */
				allItemsCompleted: {}
			}
		},

		constructor: function(sources, maxParallelTasks) {
			EventProvider.apply(this);

			this._maxParallelTasks = maxParallelTasks || 5;
			this._sourcesToProcess = sources.slice();
			this._sourcesBeingProcessed = [];
		},

		/**
		 * Starts the downloading process.
		 * @returns {sap.ui.vk.DownloadManager} <code>this</code> to allow method chaining.
		 * @public
		 */
		start: function() {
			/* eslint-disable no-empty */
			while (this._pickAndDispatchTask()) {
				// A comment to avoid ESLint warnings.
			}
			/* eslint-enable no-empty */

			return this;
		},

		/**
		 * Picks and dispatches a source for downloading.
		 * @return {boolean} Returns <code>true</code> if a source is picked and dispatched, returns <code>false</code> if there are no more sources to download.
		 * @private
		 */
		_pickAndDispatchTask: function() {
			if (this._sourcesToProcess.length > 0 && this._sourcesBeingProcessed.length < this._maxParallelTasks) {
				var source = this._sourcesToProcess.shift();
				this._sourcesBeingProcessed.push(source);
				this._runTask(source);
				return true;
			}
			return false;
		},

		/**
		 * @param {sap.ui.core.URI|File} source The URL or File that is completed.
		 * @return {boolean} Returns <code>true</code> if it is the last task completed.
		 * @private
		 */
		_taskFinished: function(source) {
			var index = this._sourcesBeingProcessed.indexOf(source);
			if (index >= 0) {
				this._sourcesBeingProcessed.splice(index, 1);
			}

			return this._sourcesToProcess.length === 0 && this._sourcesBeingProcessed.length === 0;
		},

		_runTask: function(source) {
			var that = this;
			if (typeof source === "string") {
				var xhr = new XMLHttpRequest();

				xhr.onreadystatechange = function(event) {
					if (xhr.readyState === xhr.DONE) {
						var isLast = that._taskFinished(source);
						that._pickAndDispatchTask();

						if (xhr.status === 200) {
							that.fireItemSucceeded({
								source: source,
								response: xhr.response
							});
						} else {
							that.fireItemFailed({
								source: source,
								status: xhr.status,
								statusText: xhr.statusText
							});
						}

						if (isLast) {
							that.fireAllItemsCompleted({});
						}
					}
				};

				xhr.open("GET", source, true);
				xhr.responseType = "arraybuffer";
				xhr.send(null);
			} else if (source instanceof File) {
				var fileReader = new FileReader();

				fileReader.onload = function(event) {
					var isLast = that._taskFinished(source);
					that._pickAndDispatchTask();
					that.fireItemSucceeded({
						source: source,
						response: fileReader.result
					});
					if (isLast) {
						that.fireAllItemsCompleted({});
					}
				};

				fileReader.onerror = function(event) {
					var isLast = that._taskFinished(source);
					that._pickAndDispatchTask();
					that.fireItemFailed({
						source: source,
						status: fileReader.error.name,
						statusText: fileReader.error.message
					});
					if (isLast) {
						that.fireAllItemsCompleted({});
					}
				};

				fileReader.readAsArrayBuffer(source);
			} else {
				throw new Error("Unsupported type of the 'source' parameter");
			}

			return this;
		},

		attachItemSucceeded: function(data, func, listener) {
			return this.attachEvent("itemSucceeded", data, func, listener);
		},

		detachItemSucceeded: function(func, listener) {
			return this.detachEvent("itemSucceeded", func, listener);
		},

		fireItemSucceeded: function(parameters, allowPreventDefault, enableEventBubbling) {
			return this.fireEvent("itemSucceeded", parameters, allowPreventDefault, enableEventBubbling);
		},

		attachItemFailed: function(data, func, listener) {
			return this.attachEvent("itemFailed", data, func, listener);
		},

		detachItemFailed: function(func, listener) {
			return this.detachEvent("itemFailed", func, listener);
		},

		fireItemFailed: function(parameters, allowPreventDefault, enableEventBubbling) {
			return this.fireEvent("itemFailed", parameters, allowPreventDefault, enableEventBubbling);
		},

		attachAllItemsCompleted: function(data, func, listener) {
			return this.attachEvent("allItemsCompleted", data, func, listener);
		},

		detachAllItemsCompleted: function(func, listener) {
			return this.detachEvent("allItemsCompleted", func, listener);
		},

		fireAllItemsCompleted: function(parameters, allowPreventDefault, enableEventBubbling) {
			return this.fireEvent("allItemsCompleted", parameters, allowPreventDefault, enableEventBubbling);
		}
	});

	return DownloadManager;
});

}; // end of sap/ui/vk/DownloadManager.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.FlexibleControl') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.FlexibleControl.
jQuery.sap.declare('sap.ui.vk.FlexibleControl'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.EnabledPropagator'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/FlexibleControl",['jquery.sap.global', 'sap/ui/core/Control', 'sap/ui/core/EnabledPropagator', './library'],
	function(jQuery, Control, EnabledPropagator, library) {
	"use strict";


	
	/**
	 * Constructor for a new FlexibleControl.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * In this layout the elements are ordered one below the other
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.32.3
	 *
	 * @constructor
	 * @public
	 * @since 1.16.0
	 * @alias sap.ui.vk.FlexibleControl
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var FlexibleControl = Control.extend("sap.ui.vk.FlexibleControl", /** @lends sap.ui.vk.FlexibleControl.prototype */ { metadata : {
	
		library : "sap.ui.vk",
		properties : {
	
			/**
			 * CSS width of the vertical layout.
			 */
			width : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
			height : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : null},
			
			layout: {type: "string", group: "Behavior", defaultValue : "Stacked"},
			/**
			 * 
			 * If not enabled all controls inside are not enabled automatically.
			 */
			enabled : {type : "boolean", group : "Behavior", defaultValue : true}
		},
		defaultAggregation : "content",
		aggregations : {
	
			/**
			 * Child Controls within the layout.
			 */
			content : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}
		},
		designTime : true
	}});
	
	
	EnabledPropagator.call(FlexibleControl.prototype);

	return FlexibleControl;

}, /* bExport= */ true);

}; // end of sap/ui/vk/FlexibleControl.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.FlexibleControlLayoutData') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.FlexibleControlLayoutData.
jQuery.sap.declare('sap.ui.vk.FlexibleControlLayoutData'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.LayoutData'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/FlexibleControlLayoutData",['jquery.sap.global', 'sap/ui/core/LayoutData', './library'],
	function(jQuery, LayoutData, library) {
	"use strict";


	
	/**
	 * Constructor for a new FlexibleControlLayoutData.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Holds layout data for the FlexibleControl contents.
	 * Allowed size values are numeric values ending in "px" and "%" and the
	 * special case "auto".
	 * (The CSS value "auto" is used internally to recalculate the size of the content
	 * dynamically and is not directly set as style property.)
	 * @extends sap.ui.core.LayoutData
	 * @version 1.32.3
	 *
	 * @constructor
	 * @public
	 * @since 1.22.0
	 * @experimental Since version 1.22.0. 
	 * API is not yet finished and might change completely
	 * @alias sap.ui.vk.FlexibleControlLayoutData
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var FlexibleControlLayoutData = LayoutData.extend("sap.ui.vk.FlexibleControlLayoutData", /** @lends sap.ui.vk.FlexibleControlLayoutData.prototype */ { metadata : {
	
		library : "sap.ui.vk",
		properties : {
			/**
			 * Sets the size of the content.
			 */
			size : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : 'auto'},
			
			/**
			 * Sets the minimum size of the content in px.
			 */
			minSize : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '0px'},
			
			/**
			 * Sets the margin-bottom of the content in px.
			 */
			marginTop : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '0px'},
			marginBottom : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '0px'}
		}
	}});
	
	/*** NOTHING ***/

	return FlexibleControlLayoutData;

}, /* bExport= */ true);
}; // end of sap/ui/vk/FlexibleControlLayoutData.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.NativeViewport') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.Viewport.
jQuery.sap.declare('sap.ui.vk.NativeViewport'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/NativeViewport",[
	"jquery.sap.global", "./library", "sap/ui/core/Control", "sap/ui/core/ResizeHandler", "./Loco", "./ViewportHandler"
], function(jQuery, library, Control, ResizeHandler, Loco, ViewportHandler) {
	"use strict";

	/**
	 * Constructor for a new browser Native Viewport control.
	 *
	 * @param {string} [sId] ID for the new Native Viewport control, generated automatically if no ID is given.
	 * @param {object} [mSettings] Initial settings for the new Native Viewport control.
	 *
	 * @class
	 * This control enables loading, pan, zoom and overlay capabilities for a subset of file formats capable of being loaded into a browser natively. 
	 * <pre>viewer.loadContent("https://www.google.co.nz/images/srpr/logo11w.png", "png", true);</pre>
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.32.3
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.vk.NativeViewport
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var NativeViewport = Control.extend("sap.ui.vk.NativeViewport", /** @lends sap.ui.vk.NativeViewport.prototype */ {
		metadata: {
			library: "sap.ui.vk",
			publicMethods: [
				"beginGesture",
				"endGesture",
				"pan",
				"rotate",
				"zoom",
				"tap",
				"queueCommand",
				"getViewInfo",
				"setViewInfo",
				"loadUrl"
			],
			events: {
				/**
				 * Raised when the display size of the image in the Native Viewport changes.
				 * 
				 * @param {object} [oldSize] The starting size of the image.
				 * @param {object} [size] The final size of the image after the <code>resize</code> event.
				 */
				"resize": {
					parameters: {
						oldSize: "object",
						size: "object"
					}
				},
				/**
				 * Raised when the display position or magnification of the image in the Native Viewport changes.
				 * 
				 * @param {object} [pan] The change in distance along the x, y-coordinates.
				 * @param {float} [zoom] The change in zoom factor.
				 */
				"move": {
					parameters: {
						pan: "object",
						zoom: "float"
					}
				}
			}
		},

		init: function() {
			if (Control.prototype.init) {
				Control.prototype.init(this);
			}
			
			this._canvas = null;
			this._canvas = document.createElement("div");
			this._canvas.style.overflow = "none";
			this._canvas.style.width = "100%";
			this._canvas.style.height = "100%";
			this._canvas.id = jQuery.sap.uid();
			
			this._resizeListenerId = null;

			this._viewportHandler = new ViewportHandler(this);
			this._loco = new Loco();
			this._loco.addHandler(this._viewportHandler);
			
			this._img = null;
			this._reset();
			
			this._gx = 0;
			this._gy = 0;
			
			this._imageW = 0;
			this._imageH = 0;
		},

		exit: function() {
			this._loco.removeHandler(this._viewportHandler);
			this._viewportHandler.destroy();
			this._inputDevice.disable();
			
			if (this._resizeListenerId) {
				ResizeHandler.deregister(this._resizeListenerId);
				this._resizeListenerId = null;
			}
			if (Control.prototype.exit) {
				Control.prototype.exit.apply(this);
			}
		},

		onBeforeRendering: function() {
			if (this._resizeListenerId) {
				ResizeHandler.deregister(this._resizeListenerId);
				this._resizeListenerId = null;
			}
		},

		onAfterRendering: function() {
			if (this._canvas) {
				var domRef = this.getDomRef();
				domRef.appendChild(this._canvas);
				this._resizeListenerId = ResizeHandler.register(this, this._handleResize.bind(this));
				this._bestFit();
				this._handleResize({ size: { width: domRef.clientWidth, height: domRef.clientHeight } } );
			}
		},
		
		/**
		 * @private
		 */
		_handleResize: function(event) {
			this.fireResize({ oldSize: event.oldSize, size: event.size } );
			this._update();
		},
		
		/**
		 * @private
		 */
		_reset: function() {
			this._x = 0;
			this._y = 0;
			this._s = 1.0;
			this._r = 0;
		},
		
		/**
		 * @private
		 */
		_update: function() {
			if (this._img != null) {
				var x = this._x - (this._imageW - this._canvas.clientWidth) / 2;
				var y = this._y - (this._imageH - this._canvas.clientHeight) / 2;
				var transform =  "matrix(" + this._s + ",0,0," + this._s + "," + x + "," + y + ")";
			
				this._img.style.transform = transform;
				this._img.style.webkitTransform = transform;
				this._img.style.msTransform = transform;
				this._img.style.MozTransform = transform;
				this._img.style.OTransform = transform;
			}
		},
		
		/**
		 * @private
		 */
		_bestFit: function() {
			this._reset();
			var sx = this._canvas.clientWidth / this._imageW;
			var sy = this._canvas.clientHeight / this._imageH;
			this._s = sx < sy ? sx : sy;
			if (this._s == 0) {
				this._s = 1.0;
			}
			this._x = 0;
			this._y = 0;
			this._update();
		},
		
		/**
		 * Loads a image URL into Viewport.
		 * 
		 * @param {string} url: The URL of the resource.
		 * @param {function} onload: onload callback, called when the resource is loaded successfully. 
		 * @param {function} onerror: onerror callback, called when an error occurs during the loading process. 
		 * @param {function} onprogress: onprogress callback, called during the loading process.
		 * @param {array} resourceType: an array of type of resources to load.
		 * @return {sap.ui.vk.NativeViewport} this
		 * @public
		 */
		loadUrl: function(url, onload, onerror, onprogress, resourceType) {
			 if (/^(jpg|png|gif)$/.test(resourceType) == false){
				 jQuery.sap.log.error("Unsupported content resource type " + resourceType);
				 return this;
			 }
			 
			 while (this._canvas.lastChild) {
				 this._canvas.removeChild(this._canvas.lastChild);
			 }
			 
			 //pdf rendering 
			 //http://mozilla.github.io/pdf.js/web/viewer.html
			 //http://stackoverflow.com/questions/15341010/render-pdf-to-single-canvas-using-pdf-js-and-imagedata
			 //https://github.com/mozilla/pdf.js
			 this._reset();
			 
			 this._img = new Image();
			 this._img.onload = function() {
				 this._imageW = this._img.width;
				 this._imageH = this._img.height;
				 this._canvas.appendChild(this._img);
				 this._bestFit();
				 onload();
			 }.bind(this);
			 
			 this._img.onerror = function() {
				 onerror();
			 };
			 
			 this._img.src = url;
			 
			 return this;
		},
		
		/**
		 * Marks the start of the current gesture operation. 
		 * 
		 * @param {int} x: x-coordinate in screen space.
		 * @param {int} y: y-coordinate in screen space.
		 * @return {sap.ui.vk.NativeViewport} this
		 * @public
		 */
		beginGesture: function(x, y) {
			this._gx = (x - this._canvas.clientWidth / 2 - this._x) / this._s;
			this._gy = (y - this._canvas.clientHeight / 2 - this._y) / this._s;
			
			return this;
		},
		
		/**
		 * Marks the end of the current gesture operation. 
		 * 
		 * @return {sap.ui.vk.NativeViewport} this
		 * @public
		 */
		endGesture: function() {
			this._gx = 0;
			this._gy = 0;
			return this;
		},

		/**
		 * Performs a <code>pan</code> gesture to pan across the Viewport.
		 * 
		 * @param {int} dx: The change in distance along the x-coordinate.
		 * @param {int} dy: The change in distance along the y-coordinate.
		 * @return {sap.ui.vk.NativeViewport} this
		 * @public
		 */
		pan: function(dx, dy) {
			this._x += dx;
			this._y += dy;
			this._update();
			this.fireMove({pan: {x: dx, y: dy}, zoom: 1.0});
			
			return this;
		},

		/**
		 * Rotates the content of the Viewport.
		 * 
		 * @param {int} dx: The change in x-coordinate used to define the desired rotation.
		 * @param {int} dy: The change in y-coordinate used to define the desired rotation.
		 * @return {sap.ui.vk.NativeViewport} this
		 * @public
		 */
		rotate: function(dx, dy) {
			this._x += dx;
			this._y += dy;
			this._update();
			this.fireMove({pan: {x: dx, y: dy}, zoom: 1.0});
			
			return this;
		},

		/**
		 * Performs a <code>zoom</code> gesture to zoom in or out on the beginGesture coordinate.
		 * 
		 * @param {double} z: Zoom factor. A scale factor that specifies how much to zoom in or out by.
		 * @return {sap.ui.vk.NativeViewport} this
		 * @public
		 */
		zoom: function(z) {
			//Canvas zooming: http://stackoverflow.com/questions/3420975/html5-canvas-zooming
			var gxo = this._gx * this._s;
			var gyo = this._gy * this._s;
			this._s *= z;
			var gxn = this._gx * this._s;
			var gyn = this._gy * this._s;
			var dx = gxo - gxn;
			var dy = gyo - gyn;

			this._x += dx;
			this._y += dy;
			this._update();
			this.fireMove({pan: {x: dx, y: dy}, zoom: z});
			
			return this;
		},

		/**
		 * Executes a click or tap gesture.
		 * 
		 * @param {int} x: The tap gesture's x-coordinate.
		 * @param {int} y: The tap gesture's y-coordinate.
		 * @param {boolean} isDoubleClick: Indicates whether the tap gesture should be interpreted as a double-click. 
		 * A value of <code>true</code> indicates a double-click gesture, and <code>false</code> indicates a single click gesture.
		 * @return {sap.ui.vk.NativeViewport} this
		 * @public
		 */
		tap: function(x, y, isDoubleClick) {
			if (isDoubleClick) {
				this._bestFit();
			}
			return this;
		},

		/**
		 * Queues a command for execution during the rendering cycle. All gesture operations should be called using this method.
		 * 
		 * @param {function} command: The function to be executed.
		 * @return {sap.ui.vk.NativeViewport} this
		 * @public
		 */
		queueCommand: function(command) {
			command();
			return this;
		},
		
		/**
		 * Gets information about the Viewport's attributes; for example, camera.
		 * 
		 * @return {object} ViewInfo object.
		 * @public
		 */
		getViewInfo: function() {
			var viewInfo = {};			
			viewInfo.camera = [this._s, 0, 0, this._s, this._x, this._y];
			
			return viewInfo;
		},
		
		/**
		 * Sets information about the Viewport's attributes; for example, camera.
		 * 
		 * @param {object} viewInfo: ViewInfo object.
		 * @return {sap.ui.vk.NativeViewport} this
		 * @public
		 */
		setViewInfo: function(viewInfo) {
			var cam = viewInfo.camera;
			
			this._s = cam[0];
			this._x = cam[4];
			this._y = cam[5];
			
			this._update();
			
			return this;
		}
	});

	return NativeViewport;

});

}; // end of sap/ui/vk/NativeViewport.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.NodeProxy') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides the NodeProxy class.
jQuery.sap.declare('sap.ui.vk.NodeProxy'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/NodeProxy",[
	"jquery.sap.global", "./library", "sap/ui/base/ManagedObject"
], function(jQuery, library, ManagedObject) {
	"use strict";

	var getJSONObject = sap.ui.vk.dvl.getJSONObject;

	/**
	 * Creates a new NodeProxy object.
	 *
	 * @class
	 * Provides a proxy object to the node in the node hierarchy.
	 *
	 * Objects of this type should only be created with the {@link sap.ui.vk.NodeHierarchy#createNodeProxy sap.ui.vk.NodeHierarchy.createNodeProxy} method.
	 * and destroyed with the {@link sap.ui.vk.NodeHierarchy#destroyNodeProxy sap.ui.vk.NodeHierarchy.destroyNodeProxy} method.
	 *
	 * @param {sap.ui.vk.NodeHierarchy} nodeHierarchy The node hierarchy the node belongs to.
	 * @param {string} nodeId The node ID.
	 * @public
	 * @author SAP SE
	 * @version 1.32.3
	 * @extends sap.ui.base.ManagedObject
	 * @alias sap.ui.vk.NodeProxy
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var NodeProxy = ManagedObject.extend("sap.ui.vk.NodeProxy", /** @lends sap.ui.vk.NodeProxy.prototype */ {
		metadata: {
			properties: {
				/**
				 * The node ID. This property is read-only.
				 */
				nodeId: "string",

				/**
				 * The name of the node. This property is read-only.
				 */
				name: "string",

				/**
				 * The local transformation matrix of the node.
				 */
				localMatrix: {
					type: "sap.ui.vk.TransformationMatrix",
					bindable: "bindable"
				},

				/**
				 * The world transformation matrix of the node.
				 */
				worldMatrix: {
					type: "sap.ui.vk.TransformationMatrix",
					bindable: "bindable"
				},

				/**
				 * The node opacity.
				 */
				opacity: {
					type: "float",
					bindable: "bindable"
				},

				/**
				 * The tint color.<br/>
				 *
				 * The tint color is a 32-bit integer in the ABGR notation, where A is amount of blending between material color and tint color.
				 */
				tintColorABGR: {
					type: "int",
					bindable: "bindable"
				},

				/**
				 * The node metadata. This property is read-only.
				 */
				nodeMetadata: "object",

				/**
				 * The indicator showing if the node has child nodes. This property is read-only.
				 */
				hasChildren: "boolean",

				/**
				 * The indicator showing if the node is closed. This property is read-only.
				 */
				closed: "boolean"
			}
		},

		constructor: function(nodeHierarchy, nodeId) {
			ManagedObject.call(this);

			this._dvl = nodeHierarchy ? nodeHierarchy.getGraphicsCore()._getDvl() : null;
			this._dvlSceneId = nodeHierarchy ? nodeHierarchy._getDvlSceneId() : null;
			this._dvlNodeId = nodeId;
		},

		destroy: function() {
			this._dvlNodeId = null;
			this._dvlSceneId = null;
			this._dvl = null;

			ManagedObject.prototype.destroy.call(this);
		},

		getNodeId: function() {
			return this._dvlNodeId;
		},

		getName: function() {
			return getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._getDvlSceneId, this._dvlNodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_NAME)).NodeName;
		},

		getLocalMatrix: function() {
			return sap.ui.vk.TransformationMatrix.convertTo4x3(getJSONObject(this._dvl.Scene.GetNodeLocalMatrix(this._dvlSceneId, this._dvlNodeId)).matrix);
		},

		setLocalMatrix: function(value) {
			this._dvl.Scene.SetNodeLocalMatrix(this._dvlSceneId, this._dvlNodeId, sap.ui.vk.TransformationMatrix.convertTo4x4(value));
			this.setProperty("localMatrix", value, true);
			return this;
		},

		getWorldMatrix: function() {
			return sap.ui.vk.TransformationMatrix.convertTo4x3(getJSONObject(this._dvl.Scene.GetNodeWorldMatrix(this._dvlSceneId, this._dvlNodeId)).matrix);
		},

		setWorldMatrix: function(value) {
			this._dvl.Scene.SetNodeWorldMatrix(this._dvlSceneId, this._dvlNodeId, sap.ui.vk.TransformationMatrix.convertTo4x4(value));
			this.setProperty("worldMatrix", value, true);
			return this;
		},

		getOpacity: function() {
			return getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, this._dvlNodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_OPACITY)).Opacity;
		},

		setOpacity: function(value) {
			this._dvl.Scene.SetNodeOpacity(this._dvlSceneId, this._dvlNodeId, value);
			this.setProperty("opacity", value, true);
			return this;
		},

		getTintColorABGR: function() {
			return getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, this._dvlNodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_HIGHLIGHT_COLOR)).HighlightColor;
		},

		setTintColorABGR: function(value) {
			this._dvl.Scene.SetNodeHighlightColor(this._dvlSceneId, this._dvlNodeId, value);
			this.setProperty("tintColorABGR", value, true);
			return this;
		},

		getNodeMetadata: function() {
			return getJSONObject(this._dvl.Scene.RetrieveMetadata(this._dvlSceneId, this._dvlNodeId)).metadata;
		},

		getHasChildren: function() {
			return (getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, this._dvlNodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_FLAGS)).Flags
					& (sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_MAPPED_HASCHILDREN | sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_CLOSED)) === sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_MAPPED_HASCHILDREN;
		},

		getClosed: function() {
			return (getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, this._dvlNodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_FLAGS)).Flags & sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_CLOSED) !== 0;
		}
	});

	delete NodeProxy.prototype.setClosed;
	delete NodeProxy.prototype.setHasChildren;
	delete NodeProxy.prototype.setName;
	delete NodeProxy.prototype.setNodeId;
	delete NodeProxy.prototype.setNodeMetadata;

	return NodeProxy;
});

}; // end of sap/ui/vk/NodeProxy.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.Overlay') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.Overlay.
jQuery.sap.declare('sap.ui.vk.Overlay'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-widget'); // unlisted dependency retained
jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-core'); // unlisted dependency retained
jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-mouse'); // unlisted dependency retained
jQuery.sap.require('sap.ui.thirdparty.jqueryui.jquery-ui-draggable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.vbm.lib.sapvbi'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/Overlay",[
	'jquery.sap.global', './library', 'sap/ui/core/Control', 'sap/ui/core/IconPool', 'sap/ui/thirdparty/jqueryui/jquery-ui-widget', 'sap/ui/thirdparty/jqueryui/jquery-ui-core', 'sap/ui/thirdparty/jqueryui/jquery-ui-mouse', 'sap/ui/thirdparty/jqueryui/jquery-ui-draggable', 'sap/ui/vbm/lib/sapvbi'
], function(jQuery, library, Control, IconPool, jqueryuiwidget, jqueryuicore, jqueryuimouse, jqueryuidraggable, sapvbi) {
	"use strict";

	/**
	 * Constructor for a new Overlay.
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class The control.
	 * @extends sap.ui.core.Control
	 * @author SAP SE
	 * @constructor
	 * @public
	 * @alias sap.ui.vk.Overlay
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var Overlay = Control.extend("sap.ui.vk.Overlay", /** @lends sap.ui.vk.Overlay.prototype */
	{
		metadata: {

			library: "sap.ui.vk",
			properties: {
				zoomOnResize: {
					type: "boolean",
					group: "Behavior",
					defaultValue: true
				}
			},
			aggregations: {
				/**
				 * Aggregation of Highlight Areas.
				 */
				areas: {
					type: "sap.ui.vk.OverlayArea",
					multiple: true,
					singularName: "area"
				}
			},
			associations: {
				/**
				 * Aggregation of Highlight Areas.
				 */
				target: {
					type: "sap.ui.core.Control",
					cardinality: "0..1"

				}
			},
			events: {
				/**
				 * Raised when the Control is clicked.
				 */
				click: {
					parameters: {
						/**
						 * Client coordinate X
						 */
						clientX: {
							type: "int"
						},

						/**
						 * Client coordinate Y
						 */
						clientY: {
							type: "int"
						},

						/**
						 * Coordinates of click position in format "x;y;0"
						 */
						pos: {
							type: "string"
						}
					}
				},

				/**
				 * Raised when the Control is right clicked/longPress(tap and hold).
				 */
				contextMenu: {
					parameters: {

						/**
						 * Coordinates of click position in format "x;y;0"
						 */
						pos: {
							type: "string"
						},

						/**
						 * Menu to open
						 */
						menu: {
							type: "sap.ui.unified.Menu"
						}
					}
				}
			}
		}
	});

	// ...........................................................................//
	// This file defines behavior for the control,...............................//
	// ...........................................................................//
	// Public API functions
	// ............................................................................//

	/**
	 * Trigger the interactive creation mode to get a position or position array.
	 * 
	 * @param {boolean} bPosArray Indicator if a single position or an array is requested
	 * @param {function} callback Callback function func( sPosArray ) to be called when done. Position(array) sPosArray is provided in format
	 *        "x;y;0;..."
	 * @returns {boolean} Indicator whether the creation mode could be triggered successfully or not.
	 * @public
	 * @experimental Since 1.32.0 This method is experimental and might be modified or removerd in future versions.
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	Overlay.prototype.getPositionInteractive = function(bPosArray, callback) {
		if (!this.mIACreateCB && callback && typeof (callback) === "function") {
			this.mIACreateCB = callback;

			var sType = "POS";
			if (bPosArray) {
				sType += "ARRAY";
			}
			// trigger interactive creation mode by defining an automation call
			var oLoad = {
				"SAPVB": {
					"Automation": {
						"Call": {
							"handler": "OBJECTCREATIONHANDLER",
							"name": "CreateObject",
							"object": "MainScene",
							"scene": "MainScene",
							"instance": "",
							"Param": {
								"name": "data",
								"#": "{" + sType + "}"
							}
						}
					}
				}
			};
			this._load(oLoad);
			return true;
		} else {
			// callback function registered -> other create still pending!
			return false;
		}
	};

	/**
	 * open the context menu
	 * 
	 * @param {object} oMenu the context menu to be opened
	 * @returns {void}
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	Overlay.prototype.openContextMenu = function(oMenu) {
		this._openContextMenu("Overlay", this, oMenu);
	};

	// ........................................................................//
	// Implementation of UI5 Interface functions
	// ........................................................................//

	Overlay.prototype.init = function() {
		this.aLoadQueue = null; // load queue...................//

		this.oTargetDomRef = null;
	
		// create the vbi control
		// context.........................................//
		this.mVBIContext = new VBI.VBIContext(this);
		this.resizeID = "";

		// initially set dirty state for all elements............................//
		this.bVosDirty = true;
		this.bWindowsDirty = true;
		this.bSceneDirty = true;
		this.bDataDeltaUpdate = false;

		// internal state markers
		this.bHandleDataChangeActive = false;
		this.bForceDataUpdate = false;

		this.mAddMenuItems = [];
	};

	Overlay.prototype.exit = function() {
		if (this.mVBIContext) {
			this.mVBIContext.clear(); // clear the resources...................//
		}

		if (this.resizeID != "") {
			sap.ui.core.ResizeHandler.deregister(this.resizeID);
			this.resizeID = "";
		}

	};

	Overlay.prototype.resize = function(event) {
		var cntrl = (this.oControl != undefined) ? this.oControl : this;

		var ctx = cntrl.mVBIContext;
		if (ctx) {
			var scene = ctx.GetMainScene();
			if (scene) {
				if (cntrl.getZoomOnResize() && event && event.oldSize.width > 0) {
					var zoomChange = Math.log2(event.size.width / event.oldSize.width);
					scene.ZoomToGeoPosition(scene.GetCenterPos(), scene.GetCurrentZoomlevel() + zoomChange, false, true, true);
				}
				scene.resizeCanvas(event, true, true);
			}
		}

		// test
		cntrl._adaptSizeOfTarget();
	};

	Overlay.prototype.setTarget = function(oTarget) {
		var that = this;
		// Track target
		// this.oTargetDomRef = oTarget.getDomRef();
		this.setAssociation("target", oTarget);

		// image

		if (oTarget instanceof sap.m.Image) {
			oTarget.addEventDelegate({
				onAfterRendering: function(oEvent) {

					that.oTargetDomRef = oTarget.getDomRef();
					that.oTargetDomRef.addEventListener("load", jQuery.proxy(that._adaptSizeOfTarget, that));

				}
			});
		}

		// native Viewport

		if (oTarget instanceof sap.ui.vk.NativeViewport) {
			oTarget.addEventDelegate({
				onAfterRendering: function(oEvent) {

					that.oTargetDomRef = oTarget.getDomRef();
					that._adaptSizeOfTarget();

				}
			});
		}

	};

	Overlay.prototype._adaptSizeOfTarget = function() {
		var target = this.oTargetDomRef;
		var domref = this.getDomRef();
		if (target) {
			try {
				var jTarget = jQuery(target);
				var placing = {
					top: jTarget.offset().top,
					left: jTarget.offset().left,
					width: jTarget.outerWidth(),
					height: jTarget.outerHeight()
				};
				jQuery(domref).width(placing.width).height(placing.height).css("position", "absolute");
	
				// TODO: find better solution
//				jQuery(domref).css("top", placing.top + "px");
//				jQuery(domref).css("left", placing.left + "px");
				jQuery(domref).css("top", "0px").css("left", "0px").css("visibility","");
			} catch (e) {
	
				jQuery.sap.log.error(e);
			}
	
	
	
			// added to Static Area
			jQuery(domref).insertAfter(target);
		
			
		} else {
			jQuery(domref).css("position", "fixed").width("0px").height("0px").css("top", "0px").css("left", "0px").css("visibility","hidden");
		}

	};

	// ...........................................................................//
	// once Overlay control is rendered, we attach navigation bar and map it
	// self....//

	Overlay.prototype.onAfterRendering = function() {
		// when there is preserved content restore
		// it.............................//
		if (this.$oldContent.length > 0) {
			this.$().append(this.$oldContent);
		}

		this._adaptSizeOfTarget();

		// process the load
		// queue.................................................//
		if (this.aLoadQueue) {
			var nJ;
			for (nJ = 0; nJ < this.aLoadQueue.length; ++nJ) {
				this._load(this.aLoadQueue[nJ]);
			}
			this.aLoadQueue = null;
		}

		if (this.resizeID == "") {
			this.resize();
			this.resizeID = sap.ui.core.ResizeHandler.register(this, this.resize);
		}

		// do a new adjust of DOM placed
		// elements.................................//
		// the function should do nothing if nothing needs to be
		// done.............//
		var sOverlayId = this.getId();
		if (this.mVBIContext.m_Windows) {
			this.mVBIContext.m_Windows.Awake(sOverlayId);
		}

	};

	Overlay.prototype.onBeforeRendering = function() {
		// this is called before the renderer is
		// called...........................//

		this.$oldContent = sap.ui.core.RenderManager.findPreservedContent(this.getId());
	};

	Overlay.prototype.invalidate = function(oSource) {
		// invalidate scene in any case to trigger updateScene
		this.bSceneDirty = true;
		// set the vos dirty state when the aggregations have changed
		if (oSource instanceof sap.ui.vk.OverlayArea) {
			this.bVosDirty = true;
			// if invalidate results from internal data change we allow delta update for data
			this.bDataDeltaUpdate = this.bHandleDataChangeActive;
		}

		sap.ui.core.Control.prototype.invalidate.apply(this, arguments);
	};

	// ...............................................................................
	// Internal functions
	// ...............................................................................

	Overlay.prototype._load = function(dat) {
		// when the control is not yet rendered, queue the load
		// calls.............//
		if (!this.isRendered()) {
			// create the queue and push load
			// requests.............................//
			if (!this.aLoadQueue) {
				this.aLoadQueue = [];
			}
			this.aLoadQueue.push(dat);
			return;
		}

		// do processing when running as a
		// plugin.................................//
		this._loadHtml(dat);

	};

	Overlay.prototype._loadHtml = function(data) {
		var sOverlayId = this.getId();

		var dat = null;

		// ensure that data is converted to a json
		// object.........................//
		// when this is a string, due ABAP servers sometimes sets a BOM at
		// the....//
		// beginning of the string we try to skip
		// this............................//
		if (typeof data == 'string') {
			dat = JSON.parse(data.indexOf('{') ? data.substr(data.indexOf('{')) : data);
		} else if (typeof data == 'object') {
			dat = data; // this is already an object
		}
		// return immediately when data can not be
		// interpreted....................//
		if (!dat) {
			return;
		}

		// check for data
		// binding.................................................//
		if (!dat["SAPVB"]) {
			var md;
			if (this.mVBIContext && (md = (new VBI.Adaptor(this.mVBIContext)).CreateLoadData(dat))) {
				this.loadHtml(md);
				return;
			} else {
				return; // this is no valid data..............
			}
		}

		// todo: do correct handling when change flags get
		// set....................//
		var bModifiedData = false;
		var bModifiedScenes = false;
		var bModifiedWindows = false;

		// the data can be a json
		// object..........................................//
		if (jQuery.type(dat) == 'object') {
			if (dat.SAPVB) {
				// process configuration
				// ...........................................//
				if (dat.SAPVB.Config) {
					// load the configuraiont
					// .......................................//
					this.mVBIContext.GetConfig().load(dat.SAPVB.Config, this.mVBIContext);
				}
				// process
				// resources................................................//
				if (dat.SAPVB.Resources) {
					// load the
					// resources............................................//
					this.mVBIContext.GetResources().load(dat.SAPVB.Resources, this.mVBIContext);
				}
				// process
				// datatypes................................................//
				if (dat.SAPVB.DataTypes) {
					// load the datatype
					// provider....................................//
					if (!this.mVBIContext.m_DataTypeProvider) {
						this.mVBIContext.m_DataTypeProvider = new VBI.DataTypeProvider();
					}

					this.mVBIContext.m_DataTypeProvider.load(dat.SAPVB.DataTypes, this.mVBIContext);
				}
				// process
				// datacontext..............................................//
				if (dat.SAPVB.Data) {
					// load the
					// datacontext..........................................//
					// when the datacontext is loaded, provide the datatype
					// info.....//
					if (!this.mVBIContext.m_DataProvider) {
						this.mVBIContext.m_DataProvider = new VBI.DataProvider();
					}

					this.mVBIContext.m_DataProvider.load(dat.SAPVB.Data, this.mVBIContext);
					bModifiedData = true;
				}

				// process
				// windows..................................................//
				if (dat.SAPVB.Windows) {
					if (!this.mVBIContext.m_Windows) {
						this.mVBIContext.m_Windows = new VBI.Windows();
					}
					this.mVBIContext.m_Windows.load(dat.SAPVB.Windows, this.mVBIContext);
					bModifiedWindows = true;
				}
				// process
				// actions..................................................//
				if (dat.SAPVB.Actions) {
					if (!this.mVBIContext.m_Actions) {
						this.mVBIContext.m_Actions = new VBI.Actions();
					}
					this.mVBIContext.m_Actions.load(dat.SAPVB.Actions, this.mVBIContext);
				}
				// process
				// automations..............................................//
				if (dat.SAPVB.Automation) {
					if (!this.mVBIContext.m_Automations) {
						this.mVBIContext.m_Automations = new VBI.Automations();
					}
					this.mVBIContext.m_Automations.load(dat.SAPVB.Automation, this.mVBIContext);
				}
				// context menues
				// ..................................................//
				if (dat.SAPVB.Menus) {
					if (!this.mVBIContext.m_Menus) {
						this.mVBIContext.m_Menus = new VBI.Menus();
					}
					this.mVBIContext.m_Menus.load(dat.SAPVB.Menus, this.mVBIContext);
				}

				// process
				// scenes...................................................//
				// Note: process scenes last! Since it triggers a re-rendering
				// everything should be updated before
				if (dat.SAPVB.Scenes) {
					if (!this.mVBIContext.m_SceneManager) {
						this.mVBIContext.m_SceneManager = new VBI.SceneManager();
					}
					this.mVBIContext.m_SceneManager.load(dat.SAPVB.Scenes, this.mVBIContext);
					bModifiedScenes = true;
				}

			}

			// notify framework about data
			// modifications...........................//
			if (bModifiedData) {
				if (this.mVBIContext.m_Windows) {
					this.mVBIContext.m_Windows.NotifyDataChange();
				}
			}

			// control context is loaded
			if (bModifiedScenes || bModifiedWindows) {
				if (this.mVBIContext.m_Windows) {
					this.mVBIContext.m_Windows.Awake(sOverlayId);
				}
			}

			if (bModifiedScenes || bModifiedData) {
				if (this.mVBIContext.m_Windows) {
					this.mVBIContext.m_Windows.RenderAsync();
				}
			}
		}
	};

	Overlay.prototype._openContextMenu = function(sTyp, oInst, oMenu) {
		if (oMenu && oMenu.vbi_data && oMenu.vbi_data.VBIName == "DynContextMenu") {
			if (!this.mVBIContext.m_Menus) {
				this.mVBIContext.m_Menus = new window.VBI.Menus();
			}
			// add additional menu items
			for (var nI = 0; nI < this.mAddMenuItems.length; ++nI) {
				oMenu.addItem(this.mAddMenuItems[nI]);
			}
			this.mVBIContext.m_Menus.m_menus.push(oMenu);
			this._loadHtml({
				"SAPVB": {
					"version": "2.0",
					"Automation": {
						"Call": {
							"earliest": "0",
							"handler": "CONTEXTMENUHANDLER",
							"instance": oInst.sId,
							"name": "SHOW",
							"object": sTyp,
							"refID": "CTM",
							"Param": [
								{
									"name": "x",
									"#": oInst.mClickPos[0]
								}, {
									"name": "y",
									"#": oInst.mClickPos[1]
								}, {
									"name": "scene",
									"#": "MainScene"
								}
							]
						}
					}
				}
			});
		}
		this.mAddMenuItems = [];
	};

	Overlay.prototype._update = function() {
		// set the frame
		// application..............................................//
		var oApp = {
			SAPVB: {}
		};

		// update the scene
		// data.....................................................//
		if (this.bSceneDirty) {
			this._updateScene(oApp);
		}
		this._updateWindows(oApp);

		// add non VO related actions
		if (oApp.SAPVB.Actions) {
			Array.prototype.push.apply(oApp.SAPVB.Actions.Set.Action, this._getActionArray());
		}

		// remove unnecessary sections and return application
		// JSON...................//
		return this._minimizeApp(oApp);
	};

	Overlay.prototype._minimizeApp = function(oApp) {
		// todo: calculate a hash instead of caching the json string..............//

		// remove windows section when not necessary..............................//
		var t, s;
		s = null;
		if (!this.bWindowsDirty) {
			(t = oApp) && (t = t.SAPVB) && (t = t.Windows) && (s = JSON.stringify(t)) && (s == this.mCurWindows) && (delete oApp.SAPVB.Windows) || (this.mCurWindows = s ? s : this.mCurWindows);
		} else {
			this.bWindowsDirty = false;
		}

		// remove unmodified scenes...............................................//
		s = null;
		(t = oApp) && (t = t.SAPVB) && (t = t.Scenes) && (s = JSON.stringify(t)) && (s == this.mCurScenes) && (delete oApp.SAPVB.Scenes) || (this.mCurScenes = s ? s : this.mCurScenes);

		// remove unmodified actions..............................................//
		s = null;
		(t = oApp) && (t = t.SAPVB) && (t = t.Actions) && (s = JSON.stringify(t)) && (s == this.mCurActions) && (delete oApp.SAPVB.Actions) || (this.mCurActions = s ? s : this.mCurActions);

		// remove unmodified datatypes............................................//
		s = null;
		(t = oApp) && (t = t.SAPVB) && (t = t.DataTypes) && (s = JSON.stringify(t)) && (s == this.mCurDataTypes) && (delete oApp.SAPVB.DataTypes) || (this.mCurDataTypes = s ? s : this.mCurDataTypes);

		// remove unmodified data.................................................//
		if (!this.bForceDataUpdate) {
			s = null;
			(t = oApp) && (t = t.SAPVB) && (t = t.Data) && (s = JSON.stringify(t)) && (s == this.mCurData) && (delete oApp.SAPVB.Data) || (this.mCurData = s ? s : this.mCurData);
		} else {
			this.bForceDataUpdate = false; // reset
		}

		return oApp;
	};

	Overlay.prototype._updateWindows = function(oApp) {
		// Main window -> needs always to be defined
		oApp.SAPVB.Windows = {
			"Set": [
				{
					"name": "Main",
					"Window": {
						"id": "Main",
						"caption": "MainWindow",
						"type": "geo",
						"refParent": "",
						"refScene": "MainScene",
						"modal": "true"
					}
				}
			]
		};
	};

	Overlay.prototype._updateScene = function(oApp) {
		var saVO = []; // visual object array in the scene..................//
		var saData = []; // data array in the data section....................//
		var saType = []; // type array in the type section ...................//
		var saAction = []; // actions...........................................//

		this._updateVOData(saVO, saData, saType, saAction);

		// check if an update of the scene is
		// necessary...........................//
		// failsafe but data has to be created
		// first..............................//
		var _saVO = JSON.stringify(saVO);
		var bMetaUpdate = true; // might be reset in else part
		if (!this.saVO) { // no prior VO data -> initial scene definition
			((((oApp.SAPVB.Scenes = {}).Set = {}).SceneGeo = {
				id: "MainScene",
				scaleVisible: "false",
				navControlVisible: "false",
				VisualFrame: {
					minLOD: 6,
					maxLOD: 14
// minX: "-1",
// maxX: "2",
// minY: "-1",
// maxY: "2"
				},
				NavigationDisablement: {
					move: "true",
					zoom: "true"
				},
				initialZoom: "10",
				initialStartPosition: "0.5;0.5;0"
			}).VO = saVO);
		} else if (this.bRefMapLayerStackDirty || !(this.saVO === _saVO)) {
			// prior VO data exists -> calculate delta and preserve scene
			(oApp.SAPVB.Scenes = this._getSceneVOdelta(JSON.parse(this.m_saVO), saVO));
		} else {
			bMetaUpdate = false;
		}
		this.saVO = _saVO;

		// now we should have data, data types and instance
		// information...........//
		// merge it into the
		// app..................................................//
		if (this.bDataDeltaUpdate) {
			oApp.SAPVB.Data = [];
			for (var nI = 0; nI < saData.length; ++nI) {
				oApp.SAPVB.Data.push({
					Set: {
						name: saData[nI].name,
						type: "N",
						N: saData[nI]
					}
				});
			}
		} else {
			((oApp.SAPVB.Data = {}).Set = {}).N = saData;
		}
		if (bMetaUpdate) {
			(((oApp.SAPVB.DataTypes = {}).Set = {}).N = saType);
		}
		if (bMetaUpdate) {
			(((oApp.SAPVB.Actions = {}).Set = {}).Action = saAction);
		}

		// reset dirty states
		this.bSceneDirty = this.bVosDirty = this.bDataDeltaUpdate = false;
	};

	Overlay.prototype._isEventRegistered = function(sAggregation, sEvent) {
		var aAggregation = this.getAggregation(sAggregation);
		if (!aAggregation) {
			return false;
		}

		for (var nJ = 0; nJ < aAggregation.length; ++nJ) {
			// get the element.....................................................//
			var oInstance = aAggregation[nJ];

			// if one registers for an event we can return........................//
			if (oInstance.hasListeners(sEvent)) {
				return true;
			}
		}
		return false;
	};

	Overlay.prototype._getTemplateBindingInfo = function(sAggregation) {
		// read binding info to check what is bound and what is static
		var oBindingInfo = this.getBindingInfo(sAggregation);
		if (oBindingInfo && oBindingInfo.template) {
			return oBindingInfo.template.mBindingInfos;
		}
	};

	Overlay.prototype._getBindInfo = function(sAggregation) {
		var oBindInfo = {};
		var oTemplateBindingInfo = this._getTemplateBindingInfo(sAggregation);

		// Note: Without Template no static properties -> all bound in the sense of VB JSON!
		oBindInfo.C = (oTemplateBindingInfo) ? oTemplateBindingInfo.hasOwnProperty("color") : true;
		oBindInfo.CB = (oTemplateBindingInfo) ? oTemplateBindingInfo.hasOwnProperty("colorBorder") : true;
		oBindInfo.DCH = (oTemplateBindingInfo) ? oTemplateBindingInfo.hasOwnProperty("deltaColorHot") : true;
		oBindInfo.CS = (oTemplateBindingInfo) ? oTemplateBindingInfo.hasOwnProperty("colorSelect") : true;
		oBindInfo.CNS = (oTemplateBindingInfo) ? oTemplateBindingInfo.hasOwnProperty("colorNonSelect") : true;
		oBindInfo.TT = (oTemplateBindingInfo) ? oTemplateBindingInfo.hasOwnProperty("tooltip") : true;
		oBindInfo.M = (oTemplateBindingInfo) ? oTemplateBindingInfo.hasOwnProperty("changeable") : true;

		oBindInfo.hasTemplate = (oTemplateBindingInfo) ? true : false;

		return oBindInfo;
	};

	Overlay.prototype._updateVOData = function(saVO, saData, saType, saAction) {
		var oBindInfo, oVoTemplate;

		// Overlay Area
		this.AreaBindInfo = oBindInfo = (this.AreaBindInfo) ? this.AreaBindInfo : this._getBindInfo("areas");
		oVoTemplate = (oBindInfo.hasTemplate) ? this.getBindingInfo("areas").template : null;

		// VO Def
		var oOverlayAreaDef = {
			id: "OverlayArea",
			datasource: "OverlayArea",
			type: "{00100000-2012-0004-B001-F311DE491C77}"
		};
		oOverlayAreaDef['posarray.bind'] = oOverlayAreaDef.id + ".P";
		if (oBindInfo.C) {
			oOverlayAreaDef['color.bind'] = oOverlayAreaDef.id + ".C";
		} else {
			oOverlayAreaDef.color = oVoTemplate.getColor();
		}
		if (oBindInfo.CB) {
			oOverlayAreaDef['colorBorder.bind'] = oOverlayAreaDef.id + ".C";
		} else {
			oOverlayAreaDef.colorBorder = oVoTemplate.getColorBorder();
		}
		if (oBindInfo.DCH) {
			oOverlayAreaDef['hotDeltaColor.bind'] = oOverlayAreaDef.id + ".DCH";
		} else {
			oOverlayAreaDef.hotDeltaColor = oVoTemplate.getDeltaColorHot();
		}
		if (oBindInfo.CS) {
			oOverlayAreaDef['colorSelect.bind'] = oOverlayAreaDef.id + ".C";
		} else {
			oOverlayAreaDef.colorSelect = oVoTemplate.getColorSelect();
		}
		if (oBindInfo.CNS) {
			oOverlayAreaDef['colorNonSelect.bind'] = oOverlayAreaDef.id + ".C";
		} else {
			oOverlayAreaDef.colorNonSelect = oVoTemplate.getColorNonSelect();
		}
		if (!oBindInfo.M) {
			oOverlayAreaDef['VB:c'] = oVoTemplate.getChangeable();
		}
		saVO.push(oOverlayAreaDef);

		// Overlay Area Data Type
		var oOverlayAreaType = {
			name: oOverlayAreaDef.id,
			key: 'K'
		};
		// extend the object type.................................................//
		oOverlayAreaType.A = [
			{
				"name": "K", // key
				"alias": "K",
				"type": "string"
			}, {
				"name": "VB:s", // selection flag
				"alias": "VB:s",
				"type": "boolean"
			}, {
				"name": "P", // position array
				"alias": "P",
				"type": "vectorarray",
				"changeable": "true"
			}
		];
		if (oBindInfo.C) {
			oOverlayAreaType.A.push({
				"name": "C", // color
				"alias": "C",
				"type": "color"
			});
		}
		if (oBindInfo.CB) {
			oOverlayAreaType.A.push({
				"name": "CB", // color border
				"alias": "CB",
				"type": "string"
			});
		}
		if (oBindInfo.DCH) {
			oOverlayAreaType.A.push({
				"name": "DCH", // delta color hot
				"alias": "DCH",
				"type": "string"
			});
		}
		if (oBindInfo.CS) {
			oOverlayAreaType.A.push({
				"name": "CS", // color select
				"alias": "CS",
				"type": "string"
			});
		}
		if (oBindInfo.CNS) {
			oOverlayAreaType.A.push({
				"name": "CNS", // Color non select
				"alias": "CNS",
				"type": "string"
			});
		}
		if (oBindInfo.TT) {
			oOverlayAreaType.A.push({
				"name": "TT", // tooltip
				"alias": "TT",
				"type": "string"
			});
		}
		saType.push(oOverlayAreaType);

		// Overlay Area Actions
		// check if the different vo events are registered..............................//
		var id = oOverlayAreaDef.id;

		if (this._isEventRegistered("areas", "click")) {
			saAction.push({
				"id": id + "1",
				"name": "click",
				"refScene": "MainScene",
				"refVO": id,
				"refEvent": "Click",
				"AddActionProperty": [
					{
						"name": "pos"
					}
				]
			});
		}
		if (this._isEventRegistered("areas", "contextMenu")) {
			saAction.push({
				"id": id + "2",
				"name": "contextMenu",
				"refScene": "MainScene",
				"refVO": id,
				"refEvent": "ContextMenu"
			});
		}
		if (this._isEventRegistered("areas", "edgeClick")) {
			saAction.push({
				"id": id + "7",
				"name": "edgeClick",
				"refScene": "MainScene",
				"refVO": id,
				"refEvent": "EdgeClick"
			});
		}
		// register handleMoved in any case for two way binding
		saAction.push({
			"id": id + "4",
			"name": "handleMoved",
			"refScene": "MainScene",
			"refVO": id,
			"refEvent": "HandleMoved"
		});
		// register edge and handle context menu in any case for build in functions
		saAction.push({
			"id": id + "5",
			"name": "handleContextMenu",
			"refScene": "MainScene",
			"refVO": id,
			"refEvent": "HandleContextMenu"
		});
		saAction.push({
			"id": id + "8",
			"name": "edgeContextMenu",
			"refScene": "MainScene",
			"refVO": id,
			"refEvent": "EdgeContextMenu"
		});
		if (this._isEventRegistered("areas", "handleClick")) {
			saAction.push({
				"id": id + "6",
				"name": "handleClick",
				"refScene": "MainScene",
				"refVO": id,
				"refEvent": "HandleClick"
			});
		}

		// Overlay Area Data
		var oOverlayAreaData = {
			name: oOverlayAreaDef.id,
			E: []
		};
		var aOverlayAreas = this.getAreas();
		for (var nK = 0; nK < aOverlayAreas.length; ++nK) {
			oOverlayAreaData.E.push(aOverlayAreas[nK].getDataElement());
		}
		saData.push(oOverlayAreaData);
	};

	Overlay.prototype._getSceneVOdelta = function(oCurrent, oNew) {
		var aVO = [];
		var aRemove = [];
		// build map of current VOs
		var oVOMap = {};
		for (var nI = 0, len = oCurrent.length; nI < len; ++nI) {
			oVOMap[oCurrent[nI].id] = oCurrent[nI];
		}
		for (var nJ = 0; nJ < oNew.length; ++nJ) {
			if (oVOMap[oNew[nJ].id]) { // VO already exists ...
				if (JSON.stringify(oNew[nJ]) != JSON.stringify(oVOMap[oNew[nJ].id])) { // ...
					// but
					// is
					// different
					aRemove.push({
						"id": oNew[nJ].id,
						"type": "VO"
					}); // remove old VO version from scene and
					aVO.push(oNew[nJ]); // add new VO version
				} // else {} // nothing to do

			} else { // new VO -> add it
				aVO.push(oNew[nJ]);
			}
			delete oVOMap[oNew[nJ].id]; // remove processed VOs from map
		}
		// remove VOs remaining on map
		for ( var id in oVOMap) {
			aRemove.push({
				"id": id,
				"type": "VO"
			});
		}
		var retVal = {
			"Merge": {
				"name": "MainScene",
				"type": "SceneGeo",
				"SceneGeo": {
					"id": "MainScene"
				}
			}
		};
		if (aRemove.length) {
			retVal.Merge.SceneGeo.Remove = aRemove;
		}
		if (aVO.length) {
			retVal.Merge.SceneGeo.VO = aVO;
		}

		return retVal;
	};

	Overlay.prototype._getActionArray = function() {
		var aActions = [];
		// subscribe for map event
		// Note: We register Action only if event are subscribed..............................//
		if (this.mEventRegistry["click"]) {
			aActions.push({
				"id": "Overlay1",
				"name": "click",
				"refScene": "MainScene",
				"refVO": "Map",
				"refEvent": "Click",
				"AddActionProperty": [
					{
						"name": "pos"
					}
				]
			});
		}
		if (this.mEventRegistry["contextMenu"]) {
			aActions.push({
				"id": "Overlay2",
				"name": "contextMenu",
				"refScene": "MainScene",
				"refVO": "Map",
				"refEvent": "ContextMenu",
				"AddActionProperty": [
					{
						"name": "pos"
					}
				]
			});
		}
		aActions.push({
			"id": "Overlay3",
			"name": "GetPosComplete",
			"refScene": "MainScene",
			"refVO": "General",
			"refEvent": "CreateComplete"
		});

		return aActions;
	};

	Overlay.prototype._handleChangedData = function(aNodes) {
		try {
			this.bHandleDataChangeActive = true;
			if (aNodes && aNodes.length) {
				for (var nI = 0, oNode; nI < aNodes.length; ++nI) {
					oNode = aNodes[nI];
					if (oNode.E && oNode.E.length) {
						for (var nJ = 0, oElement, oInst; nJ < oNode.E.length; ++nJ) {
							oElement = oNode.E[nJ];
							oInst = this._findInstance(oElement.K);
							if (oInst) {
								oInst.handleChangedData(oElement);
							}
						}
					}

				}
			}
			this.bHandleDataChangeActive = false;
		} catch (exc) {
			this.bHandleDataChangeActive = false;
			throw exc;
		}
	};

	Overlay.prototype._findInstance = function(sId) {
		var Id = (sId.indexOf(".") !== -1) ? sId.split(".")[1] : sId;
		var aAreas = this.getAreas();
		for (var nI = 0; nI < aAreas.length; ++nI) {
			var oElem = aAreas[nI];
			if (oElem.getId() === Id) {
				return oElem;
			}
		}
		return null;
	};

	Overlay.prototype._handleAggregationEvent = function(event) {
		var oElem;
		if ((oElem = this._findInstance(event.Action.instance))) {
			try {
				oElem.handleEvent(event);
			} catch (exc) {
				jQuery.sap.log.error("Event handler failed: " + exc.message);
			}
		}

	};

	// ...........................................................................//
	// diagnostics...............................................................//

	Overlay.prototype.isRendered = function() {
		return this.getDomRef() ? true : false;
	};

	// ..........................................................................//
	// Compatibility functions, needed by VBI context

	Overlay.prototype.fireSubmit = function(e) {
		// handle VBI submit data
		// analyze the event......................................................//
		var datEvent = JSON.parse(e.data);

		// write changed data back to aggregated elements
		if (datEvent.Data && datEvent.Data.Merge) {
			this._handleChangedData(datEvent.Data.Merge.N);
		}

		// handle actual event
		if (datEvent.Action.object === "OverlayArea") {
			// Event belongs to an aggregated object -> delegate
			this._handleAggregationEvent(datEvent);
		} else {
			// own event -> handle it
			var sActionName = datEvent.Action.name, clickPos;
			if (sActionName === "click" || sActionName === "contextMenu") {
				clickPos = [
					datEvent.Action.Params.Param[0]['#'], datEvent.Action.Params.Param[1]['#']
				];
			}
			switch (sActionName) {
				case "GetPosComplete":
					// Interactive Position gathering finished
					if (this.mIACreateCB) {
						try {
							this.mIACreateCB(datEvent.Action.Params.Param[0]['#']);
							this.mIACreateCB = null;
						} catch (exc) {
							// clear callback function in any case
							this.mIACreateCB = null;
							throw exc;
						}
					}
					break;
				case "click":
					// fire the click..................................................//
					this.fireClick({
						clientX: clickPos[0],
						clientY: clickPos[1],
						pos: datEvent.Action.AddActionProperties.AddActionProperty[0]['#']
					});
					break;
				case "contextMenu":
					// create an empty menu
					jQuery.sap.require("sap.ui.unified.Menu");

					if (this.mVBIContext.m_Menus) {
						this.mVBIContext.m_Menus.deleteMenu("DynContextMenu");
					}

					var oMenuObject = new sap.ui.unified.Menu();
					oMenuObject.vbi_data = {};
					oMenuObject.vbi_data.menuRef = "CTM";
					oMenuObject.vbi_data.VBIName = "DynContextMenu";
					// store the click pos
					this.mClickPos = clickPos;
					// fire the contextMenu..................................................//
					this.fireContextMenu({
						pos: datEvent.Action.AddActionProperties.AddActionProperty[0]['#'],
						menu: oMenuObject
					});
					break;
				default:
					break;

			}
		}
	};

	Overlay.prototype.fireRender = function(data) {
	};
	Overlay.prototype.fireMove = function(data) {
	};
	Overlay.prototype.fireZoom = function(data) {
	};
	Overlay.prototype.fireOpenWindow = function(data) {
	};
	Overlay.prototype.fireCloseWindow = function(data) {
	};

	return Overlay;

});

}; // end of sap/ui/vk/Overlay.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.OverlayArea') ) {
/*
 * ! SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.OverlayArea.
jQuery.sap.declare('sap.ui.vk.OverlayArea'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/OverlayArea",[
	'./library', 'sap/ui/core/Element'
], function(library, Element) {
	"use strict";

	/**
	 * Constructor for a new OverlayArea.
	 * 
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 * @class Aggregation element for the Overlay Control
	 * @extends sap.ui.core.Element
	 * @constructor
	 * @public
	 * @alias sap.ui.vk.OverlayArea
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var OverlayArea = Element.extend("sap.ui.vk.OverlayArea", /** @lends sap.ui.vk.OverlayArea.prototype */
	{
		metadata: {

			library: "sap.ui.vk",
			properties: {
				/**
				 * Unique identifier for the object. This is optional. If not provided the default identifier sId is used. However, sId is generated
				 * if template binding is used and thus it is not stable. Provide the key if the object really needs a unique and stable identifier.
				 */
				key: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * The position array for the OverlayArea. The format is "x0;y0;0;...;xN,yN,0".
				 */
				position: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * The fill color of the OverlayArea.
				 */
				color: {
					type: "sap.ui.core.CSSColor",
					group: "Misc",
					defaultValue: "rgba(200, 50, 50, 0.3)"
				},

				/**
				 * The border color of the OverlayArea.
				 */
				colorBorder: {
					type: "sap.ui.core.CSSColor",
					group: "Misc",
					defaultValue: "rgba(200, 50, 50, 1.0)"
				},

				/**
				 * The select color of the OverlayArea in case selection highligthing is desired.
				 */
				colorSelect: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * The non-select color of the OverlayArea in case non-selection de-highligthing is desired.
				 */
				colorNonSelect: {
					type: "string",
					group: "Misc",
					defaultValue: null
				},

				/**
				 * Color or color delta when object is hovered. Color deltas can be declared in the format RHLSA(<hue shift in degree>;<lightness
				 * multiplier>;<saturation multiplier>;<opacity multiplier>)
				 */
				deltaColorHot: {
					type: "string",
					group: "Misc",
					defaultValue: 'RHLSA(0;1.3;1.0;1.0)'
				},

				/**
				 * set to true if the element is selected
				 */
				select: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				},

				/**
				 * Set to true if OverlayArea is changeable.
				 */
				changeable: {
					type: "boolean",
					group: "Misc",
					defaultValue: false
				}
			},
			events: {

				/**
				 * The event is raised when there is a click action on an OverlayArea.
				 */
				click: {
					/**
					 * Client coordinate X
					 */
					clientX: {
						type: "int"
					},

					/**
					 * Client coordinate Y
					 */
					clientY: {
						type: "int"
					}
				},

				/**
				 * The event is raised when there is a right click or a tap and hold action on an OverlayArea.
				 */
				contextMenu: {
					parameters: {

						/**
						 * Menu to open
						 */
						menu: {
							type: "sap.ui.unified.Menu"
						}
					}
				},

				/**
				 * This event is raised when the edge of an OverlayArea is clicked.
				 */
				edgeClick: {
					parameters: {
						/**
						 * Index of the clicked edge. The numbering is zero based and the first edge with index 0 starts at the first position in the
						 * position array and end at the second.
						 */
						index: {
							type: "int"
						}
					}
				},

				/**
				 * This event is raised when the edge of an OverlayArea is right clicked.
				 */
				edgeContextMenu: {
					parameters: {
						/**
						 * Index of the clicked edge. The numbering is zero based and the first edge with index 0 starts at the first position in the
						 * position array and end at the second.
						 */
						index: {
							type: "int"
						},

						/**
						 * Menu to open
						 */
						menu: {
							type: "sap.ui.unified.Menu"
						}
					}
				},

				/**
				 * This event is raised when the design handle of a changable OverlayArea is moved.
				 */
				handleMoved: {},

				/**
				 * This event is raised when the design handle of a changable OverlayArea is right clicked.
				 */
				handleContextMenu: {
					parameters: {
						/**
						 * Index of the clicked handle. The numbering is zero based.
						 */
						index: {
							type: "int"
						},

						/**
						 * Menu to open
						 */
						menu: {
							type: "sap.ui.unified.Menu"
						}
					}
				},

				/**
				 * This event is raised when the design handle of a changable OverlayArea is clicked.
				 */
				handleClick: {
					/**
					 * Index of the clicked handle. The numbering is zero based.
					 */
					index: {
						type: "int"
					}
				}

			}
		}
	});

	// /**
	// * This file defines behavior for the control,
	// */
	// sap.ui.vbm.OverlayArea.prototype.init = function(){
	// // do something for initialization...
	// };

	/**
	 * open the context menu
	 * 
	 * @param {object} oMenu the context menu to be opened
	 * @returns {void}
	 * @public
	 * @ui5-metamodel This method also will be described in the UI5 (legacy) designtime metamodel
	 */
	OverlayArea.prototype.openContextMenu = function(oMenu) {
		this.getParent().openContextMenu("OverlayArea", this, oMenu);
	};

	OverlayArea.prototype.getDataElement = function() {
		var oElement = {};
		var oBindInfo = this.getParent().AreaBindInfo;
		oElement.K = this.getId(); // Use the Id as key here, since the Event dispatching relies on the structure of the Id!

		// add the VO specific properties..................................//
		if (oBindInfo.C) {
			oElement.C = this.getColor();
		}
		if (oBindInfo.CB) {
			oElement.CB = this.getColorBorder();
		}
		if (oBindInfo.DCH) {
			oElement.DCH = this.getDeltaColorHot();
		}
		if (oBindInfo.CS) {
			oElement.CS = this.getColorSelect();
		}
		if (oBindInfo.CNS) {
			oElement.CNS = this.getColorNonSelect();
		}
		if (oBindInfo.TT) {
			oElement.TT = this.getTooltip();
		}
		oElement['VB:s'] = this.getSelect();
		oElement.P = this.getPosition();
		if (oBindInfo.M) {
			oElement['VB:c'] = this.getChangeable();
		}
		return oElement;
	};

	OverlayArea.prototype.handleChangedData = function(oElement) {
		if (oElement.P) {
			this.setPosition(oElement.P);
		}
	};

	OverlayArea.prototype.handleEvent = function(event) {
		// construct function name from action name
		var sActionName = event.Action.name;
		var funcname = "fire" + sActionName[0].toUpperCase() + sActionName.slice(1);

		if (sActionName === "contextMenu" || sActionName === "edgeContextMenu" || sActionName === "handleContextMenu") {
			var oParent = this.getParent();
			this.mClickPos = [
				event.Action.Params.Param[0]['#'], event.Action.Params.Param[1]['#']
			];
			// create an empty menu
			jQuery.sap.require("sap.ui.unified.Menu");

			if (oParent.mVBIContext.m_Menus) {
				oParent.mVBIContext.m_Menus.deleteMenu("DynContextMenu");
			}

			var oMenuObject = new sap.ui.unified.Menu();
			oMenuObject.vbi_data = {};
			oMenuObject.vbi_data.menuRef = "CTM";
			oMenuObject.vbi_data.VBIName = "DynContextMenu";

			// prepare own menu items for certian events
			var oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.vk.i18n");
			if (this.getChangeable()) {
				if (sActionName === "edgeContextMenu") {
					var sEdge = event.Action.Params.Param[2]['#'];
					oParent.mAddMenuItems.push(new sap.ui.unified.MenuItem({
						text: oResourceBundle.getText("OVL_AREA_EDGE_SPLIT"),
						select: this._handleCtxFunction.bind(this, "SPLIT", sEdge)
					}));
				} else if (sActionName === "handleContextMenu") {
					var sHandle = event.Action.Params.Param[2]['#'];
					oParent.mAddMenuItems.push(new sap.ui.unified.MenuItem({
						text: oResourceBundle.getText("OVL_AREA_HANDLE_REMOVE"),
						select: this._handleCtxFunction.bind(this, "REMOVE", sHandle)
					}));
				}
			}

			if (this.hasListeners(sActionName)) {
				// fire the event..................................................//
				if (sActionName === "contextMenu") {
					this.firecontextMenu({
						menu: oMenuObject
					});
				} else {
					this[funcname]({
						index: event.Action.Params.Param[2]['#'],
						menu: oMenuObject
					});
				}
			} else {
				oParent._openContextMenu(event.Action.object, this, oMenuObject);
			}

		} else {
			if (sActionName == "click") {
				this.mClickPos = event.Action.AddActionProperties.AddActionProperty[0]['#'];
				this.fireClick({
					clientX: event.Action.Params.Param[0]['#'],
					clientY: event.Action.Params.Param[1]['#']
				});
			} else if (sActionName.indexOf("Click") > -1) {
				// edgeClick or handleClick
				this[funcname]({
					index: event.Action.Params.Param[2]['#']
				});
			} else {
				this[funcname]();
			}
		}
	};

	OverlayArea.prototype.getKey = function() {
		var sKey = this.getProperty("key");
		if (!sKey) {
			// Key not given -> return Id instead
			sKey = this.getId();
		}
		return sKey;
	};

	OverlayArea.prototype._handleCtxFunction = function(sFunc, sContext) {
		var aPos = this.getPosition().split(";");
		var offset = sContext * 3;
		if (sFunc === "REMOVE") {
			// delete handle
			aPos.splice(offset, 3);
		} else if (sFunc === "SPLIT") {
			// split edge at midpoint
			var startPos = [
				aPos[offset], aPos[offset + 1]
			];
			var endPos = (offset + 3 < aPos.length) ? [
				aPos[offset + 3], aPos[offset + 4]
			] : [
				aPos[0], aPos[1]
			];
			var midPoint = [
				parseFloat(startPos[0]) + (endPos[0] - startPos[0]) / 2, parseFloat(startPos[1]) + (endPos[1] - startPos[1]) / 2
			];
			aPos.splice(offset + 3, 0, midPoint[0].toString(), midPoint[1].toString(), "0");
		}
		this.setPosition(aPos.toString().replace(/,/g, ';'));
	};

	return OverlayArea;

});

}; // end of sap/ui/vk/OverlayArea.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.SceneTree') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.SceneTree.
jQuery.sap.declare('sap.ui.vk.SceneTree'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.TreeTable'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Column'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.Title'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/SceneTree",[
	"jquery.sap.global", "./library", "sap/ui/core/Control", "sap/ui/table/TreeTable", "sap/ui/table/Column", "sap/ui/model/json/JSONModel", "sap/m/Title", "./CheckEye"
], function(jQuery, library, Control, TreeTable, Column, JSONModel, Title, CheckEye) {
	"use strict";

	/**
	 * Constructor for a new SceneTree control.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Some class description goes here.
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.32.3
	 *
	 * @constructor
	 * @public
	 * @alias sap.ui.vk.SceneTree
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var SceneTree = Control.extend("sap.ui.vk.SceneTree", /** @lends sap.ui.vk.SceneTree.prototype */ {
		metadata: {
			library: "sap.ui.vk",
			properties: {
			},
			events: {
			},
			associations: {
				/*viewState: { type: "sap.ui.vk.ViewState", multiple: false }*/
			},
			aggregations: {
				_tree: {
					type: "sap.ui.table.TreeTable",
					multiple: false,
					visibility: "visible"
				}
			}
		},

		setScene: function (scene, viewStateManager) {
			this._scene = scene;
			this._viewStateManager = viewStateManager;

			if (this._viewStateManager) {
				this._viewStateManager.attachSelectionChanged(null, this._nodeSelectionChanged.bind(this));
				this._viewStateManager.attachVisibilityChanged(null, this._nodeVisibilityChanged.bind(this));				
			}
			
			this.refresh();
		},

		init: function() {
			if (Control.prototype.init) {
				Control.prototype.init.apply(this);
			}
			
			this.oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.vk.i18n");
			
			var _title = new Title({
				text: this.oResourceBundle.getText("SCENETREE_TITLE"),
				tooltip: this.oResourceBundle.getText("SCENETREE_TITLE")
			});
			
			_title.onAfterRendering = function() {
				var $this = this.$();
				$this.addClass('sapUiVkTitle');
			};
			
			this._tree = new TreeTable({
				title: _title,
				columns: [
				new Column({
					label: this.oResourceBundle.getText("SCENETREE_NAME"),
					tooltip: this.oResourceBundle.getText("SCENETREE_NAME"),
					template: "name"
				}),
				new Column({
					label: this.oResourceBundle.getText("SCENETREE_VISIBLE"),
					tooltip: this.oResourceBundle.getText("SCENETREE_VISIBLE"),
					template: new CheckEye().bindProperty("checked", "visible"), //new to bind the tooltip to SCENETREE_VISIBILITYSTATEVISIBLE SCENETREE_VISIBILITYSTATEHIDDEN depending on state
					width: "2.8em",
					resizable: false,
					hAlign: "Center"
				})
				],
				selectionMode: "Multi",
				selectionBehavior: "Row",
				visibleRowCountMode: "Auto",
				expandFirstLevel: false,
				collapseRecursive: true,
				enableSelectAll: false,
				rowHeight: 32
			});

			this.setAggregation("_tree", this._tree, true);

			this._model = new JSONModel();
			this._tree.setModel(this._model);
			this._tree.bindRows({
				path: '/root'
			});
			this._tree.attachToggleOpenState(this._nodeOpenToggle.bind(this));
			this._tree.attachRowSelectionChange(this._nodeSelection.bind(this));
			this._tree.getBinding("rows").attachChange(this._dataChange.bind(this));

			this._viewStateManager = null;
			this._scene = null;
			
			this._syncing = false;
			this._selected = {};
			this._toggled = {};
			this._vsmSelected = {};
			
			this._forwardTimer = 0;
			this._reverseTimer = 0;
			this._toExpand = null;
			
			this._vSyncing = false;
			this._lastChangeIsExpand = false;
			this._forwardVTimer = 0;
			this._reverseVTimer = 0;
			this._scrollTimer = 0;
		},

		exit: function() {

		},

		onBeforeRendering: function() {
			this._tree.setVisible(true);
		},

		_pathToNode: function(path, data, toReplace) {
			path = path.substr(1);
			if (data == undefined) {
				data = this._model.getData();
			}

			var node = data;
			var prev = node;
			var level = "";

			while (path.length > 0) {
				var pos = path.indexOf('/');

				if (pos >= 0) {
					level = path.substr(0, pos);
					path = path.substr(pos + 1);
				} else {
					level = path;
					path = "";
				}

				prev = node;
				node = prev[level];
			}

			if (toReplace != undefined) {
				prev[level] = toReplace;
			}

			return node;
		},

		_indexToNodeId: function(index) {
			var context = this._tree.getContextByIndex(index);
			if (context) {
				var node = this._pathToNode(context.sPath, context.oModel.oData);
				return node.id;
			} else {
				return null;
			}
		},
		
		_deselectHidden: function() {
			var vsm = this._vsmSelected;
			var vs = this._viewStateManager;
			var desel = [];
			var undodesel = {};

			for (var i = 0; ; i++) {
				var id = this._indexToNodeId(i);
				if (id == null) {
					break;
				}
				
				if (vsm.hasOwnProperty(id)) {
					undodesel[id] = true;
				}
			}
			
			for (var key in vsm) {
				if (vsm.hasOwnProperty(key) && vsm[key] == true && !undodesel.hasOwnProperty(key) && key != "") {
					desel.push(key);
					vsm[key] = false;
				}
			}

			if (desel.length > 0) {
				this._syncing = true;
				vs.setSelectionState(desel, false);
				this._syncing = false;
			}
		},

		_nodeSelection: function(event) {
			if (this._tree.getBinding("rows")._aSelectedContexts != undefined) {
				// If we hit this, it means TreeTable is trying to restore selection, ignore it.
				return;
			}
			if (!this._syncing) {
				if (this._forwardTimer > 0) {
					clearTimeout(this._forwardTimer);
				}

				var param = event.mParameters;
				var indices = param.rowIndices;
				var curr = this._tree.getSelectedIndices();

				if (indices.length >= 1 && curr.length == 1) {
					if (indices.indexOf(curr[0]) != -1) {
						this._deselectHidden();
					}
				}

				for (var i = 0; i < indices.length; i++) {
					var id = indices[i];

					if (this._toggled.hasOwnProperty(id)) {
						this._toggled[id] = !this._toggled[id];
					} else {
						this._toggled[id] = true;
					}
					
					if (!this._selected.hasOwnProperty(id)) {
						this._selected[id] = false;
					}
				}

				this._forwardTimer = setTimeout(this._resyncSelectionForward.bind(this), 100);
			}
		},

		_nodeSelectionChanged: function(event) {
			if (!this._syncing) {
				if (this._reverseTimer > 0) {
					clearTimeout(this._reverseTimer);
				}

				var sel = event.mParameters.selected;
				var desel = event.mParameters.unselected;

				for (var i = 0; i < desel.length; i++) {
					if (this._vsmSelected[desel[i]] != undefined) {
						delete this._vsmSelected[desel[i]];
					}
				}
				for (var i = 0; i < sel.length; i++) {
					this._vsmSelected[sel[i]] = true;
				}
				
				if (sel.length == 1) {
					this._toExpand = sel[0];
				}
				
				this._reverseTimer = setTimeout(this._resyncSelectionReverse.bind(this), 100, true);
			}
		},

		_resyncSelectionForward: function () {
			this._forwardTimer = 0;
			if (this._syncing) {
				return false;
			}

			this._syncing = true;
			var vs = this._viewStateManager;
			var vsm = this._vsmSelected;
			var sel = this._selected;

			for (var i in sel) {
				if (sel.hasOwnProperty(i)) {
					var id = this._indexToNodeId(i);
					if (id == null || id == "") {
						continue;
					}

					var issel = sel[i];// tree.isIndexSelected(i);

					if (this._toggled[i]) {
						issel = !issel;
					}

					vs.setSelectionState(id, issel);
					sel[i] = issel;
					vsm[id] = issel;
				}
			}
			
			this._toggled = {};

			this._syncing = false;
		},

		_resyncSelectionReverse: function(bScrollToSelection) {
			this._reverseTimer = 0;
			if (this._syncing) {
				return;
			}
			
			if (this._toExpand) {
				this._expandToNode(this._toExpand);
				this._toExpand = null;
			}

			this._syncing = true;
			// Slow: Tree table de-selects everything after node expand or collapse, so have to resync the selection state.
			var vs = this._viewStateManager;
			var tree = this._tree;
			var selCount = 0;
			var lastSel = -1;
			
			this._selected = {};

			for (var i = 0; ; i++) {
				var id = this._indexToNodeId(i);
				if (id == null || id == "") {
					break;
				}

				var sel = vs.getSelectionState(id);

				if (sel) {
					this._selected[i] = true;
					selCount++;
					lastSel = i;
				}

				if (sel != tree.isIndexSelected(i)) {
					if (sel) {
						tree.addSelectionInterval(i, i);
					} else {
						tree.removeSelectionInterval(i, i);
					}
				}
			}
			
			// Scroll to single selection
			if (bScrollToSelection && selCount == 1) {
				if (this._scrollTimer > 0) {
					clearTimeout(this._scrollTimer);
				}
				this._scrollTimer = setTimeout(this._scrollToSelection.bind(this), 300, lastSel);
			}
			this._syncing = false;
		},
		
		_scrollToSelection: function(sel) {
			this._scrollTimer = 0;
			var tree = this._tree;
			var top = tree._getScrollTop();
			
			var rc = tree.getRowHeight();
			var rh = tree._getScrollHeight();
			var numRows = rh / rc;
			
			while (top + numRows <= sel || top > sel) {
				
				if (top + numRows <= sel) {
					tree._scrollPageDown();
				} else {
					tree._scrollPageUp();
				}
				
				var ntop = tree._getScrollTop();
				if (ntop == top) {
					break;
				}
				
				top = ntop;
			}
		},

		_expandToNode: function(nodeId) {
			if (nodeId.constructor === Array) {
				if (nodeId.length > 0) {
					nodeId = nodeId[0];
				} else {
					return;
				}
			}
			
			var nodeInfo = this._scene.getDefaultNodeHierarchy();
			var parents = [];
			
			nodeInfo.enumerateAncestors(nodeId, function(pnode) {
				parents.push(pnode.getNodeId());
			});
			
			if (parents.length < 1) {
				return;
			}
			
			var pindex = 0;			
			for (var i = 0; pindex < parents.length; i++) {
				var id = this._indexToNodeId(i);
				if (id == null) {
					break;
				}
				
				if (id == parents[pindex]) {
					if (!this._tree.isExpanded(i)) {
						var context = this._tree.getContextByIndex(i);
						if (context) {
							var node = this._pathToNode(context.sPath, context.oModel.oData);
							this._restoreChildren(node, context.sPath);
						}
						this._tree.expand(i);
					}
					pindex++;
				}
			}
		},

		_restoreChildren: function(node, path) {
			var nodeInfo = this._scene.getDefaultNodeHierarchy();
			var binding = this._tree.getBinding("rows");
			var vsm = this._viewStateManager;
			var i = 0;
			nodeInfo.enumerateChildren(node.id, function(pnode) {
				var nodeId = pnode.getNodeId();
				var tnode = { name: pnode.getName(), id: nodeId, visible: vsm.getVisibilityState(nodeId) };

				if (pnode.getHasChildren()) {
					var cpath = path + '/' + i;
					if (binding.mContextInfo && binding.mContextInfo[cpath] != undefined && binding.mContextInfo[cpath].bExpanded) {
						this._restoreChildren(tnode, cpath);
					} else {
						tnode[0] = {};
					}
				}

				node[i] = tnode;
				i += 1;
			}.bind(this));
		},

		_restoreChildrenCollapsed: function(node, path) {
			var nodeInfo = this._scene.getDefaultNodeHierarchy();
			var binding = this._tree.getBinding("rows");
			var vsm = this._viewStateManager;
			var i = 0;
			nodeInfo.enumerateChildren(node.id, function(pnode) {
				var nodeId = pnode.getNodeId();
				var tnode = { name: pnode.getName(), id: nodeId, visible: vsm.getVisibilityState(nodeId) };

				if (pnode.getHasChildren()) {
					tnode[0] = {};
					// Prevent children from expanded in default because no data has been filled for them
					var cpath = path + '/' + i;
					if (binding.mContextInfo[cpath] != undefined) {
						binding.mContextInfo[cpath].bExpanded = false;
					}
				}

				node[i] = tnode;
				i += 1;
			});
		},

		_nodeOpenToggle: function(event) {
			if (this._reverseTimer > 0) {
				clearTimeout(this._reverseTimer);
			}
			
			var param = event.mParameters;
			var data = param.rowContext.oModel.oData;
			var path = param.rowContext.sPath;
			var node = this._pathToNode(path, data);

			if (param.expanded) {
				this._restoreChildren(node, path);
			} else if (node[0] != undefined) {
				var dummy = { name: node.name, id: node.id, visible: this._viewStateManager.getVisibilityState(node.id), 0: {} };
				this._pathToNode(path, data, dummy);
			}
			
			this._lastChangeIsExpand = true;
			
			this._reverseTimer = setTimeout(this._resyncSelectionReverse.bind(this), 100, false);
		},
		
		_dataChange: function(event) {
			if (this._viewStateManager == null || this._scene == null || this._vSyncing) {
				return;
			}
			
			if (this._lastChangeIsExpand) {
				this._lastChangeIsExpand = false;
				return;
			}
			
			if (this._forwardVTimer > 0) {
				clearTimeout(this._forwardVTimer);
			}
			
			this._forwardVTimer = setTimeout(this._resyncVisibilityForward.bind(this), 100);
		},
		
		_resyncVisibilityForward: function() {
			if (!this._vSyncing) {
				this._vSyncing = true;
				this._forwardVTimer = 0;
				this._setNodeVisibility_r(this._model.getData().root, this._viewStateManager);
				this._vSyncing = false;
			}
		},
		
		_setNodeVisibility_r: function(node, vsm) {
			if (node.id != null && vsm.getVisibilityState(node.id) != node.visible) {
				vsm.setVisibilityState(node.id, node.visible);
			}
			
			for (var i = 0; node[i] != null; i++) {
				this._setNodeVisibility_r(node[i], vsm);
			}
		},
		
		_nodeVisibilityChanged: function(event) {
			if (!this._vSyncing) {
				if (this._reverseVTimer > 0) {
					clearTimeout(this._reverseVTimer);
				}
				
				this._reverseVTimer = setTimeout(this._resyncVisibilityReverse.bind(this), 100);
			}
		},
		
		_resyncVisibilityReverse: function() {
			if (!this._vSyncing) {
				this._vSyncing = true;
				this._forwardVTimer = 0;
				this._getNodeVisibility_r(this._model.getData().root, this._viewStateManager);
				this._tree.getBinding("rows").refresh();
				this._vSyncing = false;
			}
		},
		
		_getNodeVisibility_r: function(node, vsm) {
			if (node.id != null) {	
				node.visible = vsm.getVisibilityState(node.id);
			}
			
			for (var i = 0; node[i] != null; i++) {
				this._getNodeVisibility_r(node[i], vsm);
			}
		},

		refresh: function () {
			if (this._scene == null) {
				this._model.setData([]);
				return;
			}

			var nodeInfo = this._scene.getDefaultNodeHierarchy();
			var vsm = this._viewStateManager;
			var oData = { root: { name: "root", visible: true, 0: {} } };
			var i = 0;
			nodeInfo.enumerateChildren(null, function(pnode) {
				var nodeId = pnode.getNodeId();
				var tnode = { name: pnode.getName(), id: nodeId, visible: vsm.getVisibilityState(nodeId) };

				if (pnode.getHasChildren()) {
					tnode[0] = {};
				}

				oData.root[i] = tnode;
				i += 1;
			});

			this._model.setData(oData);
		},

		onAfterRendering: function() {
		}
	});

	return SceneTree;

}, /* bExport= */ true);

}; // end of sap/ui/vk/SceneTree.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.StepNavigation') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

//Provides control sap.ui.vk.StepNavigation.
jQuery.sap.declare('sap.ui.vk.StepNavigation'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/StepNavigation",[ "jquery.sap.global", "./library", "sap/ui/core/Control","sap/ui/core/ResizeHandler", "./Loco","./ViewportHandler", "sap/ui/core/Popup", "sap/ui/core/IconPool"],
		function(jQuery, library, Control, ResizeHandler, Loco, ViewportHandler, Popup,IconPool) {
	"use strict";

	/**
	 *  Creates a new StepNavigation object.
	 * 
	 * @class
	 * This control enables navigation and activation of procedures and steps contained in a single 3D scene.
	 * 
	 * @param {string} [sId] ID for the new control. This ID is generated automatically if no ID is provided.
	 * @param {object} [mSettings] Initial settings for the new Step Navigation control.
	 * @public
	 * @author SAP SE
	 * @version 1.32.3
	 * @extends sap.ui.core.Control
	 * @alias sap.ui.vk.StepNavigation
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var StepNavigation = Control.extend("sap.ui.vk.StepNavigation",/** @lends sap.ui.vk.StepNavigation.prototype */{
		metadata: {
			library: "sap.ui.vk",
			properties: {
				/**
				 * Managed settings and properties for Step Navigation events.
				 */
				settings: "sap.ui.core.object",

				/**
				 * Width of the Step Navigation control.
				 */
				width: {
					type:  "sap.ui.core.CSSSize",
					defaultValue: "100%"
				},

				/**
				 * Height of the Step Navigation control.
				 */
				height: {
					type: "sap.ui.core.CSSSize",
					defaultValue: "100%"
				},

				/**
				 * Indicates that the Step Navigation control should display thumbnails. 
				 * If set to <code>true</code>, then thumbnails are rendered. If set to <code>false</code>, then thumbnails are hidden.
				 */
				showThumbnails: {
					type: "boolean",
					group: "Appearance",
					defaultValue: true
				},

				/**
				 * Indicates that the Step Navigation control should display a toolbar. 
				 * If set to <code>true</code>, then the toolbar is rendered. If set to <code>false</code>, then the toolbar is hidden.
				 */
				showToolbar: {
					type: "boolean",
					group: "Appearance",
					defaultValue: true
				},

				/**
				 * Indicates that the Step Navigation control should display a popup containing information around the step that is playing. 
				 * If set to <code>true</code>, then the popup is rendered. If set to <code>false</code>, the popup is hidden.
				 */
				showStepInfo: {
					type: "boolean",
					group: "Appearance",
					defaultValue: false
				}
			},

			publicMethods: [
				"setGraphicsCore",
				"setScene",
				"playStep",
				"pauseStep", 
				"playAllSteps", 
				"getStep", 
				"getNextStep", 
				"getPreviousStep",  
				"getProceduresAndSteps",
				"refresh",
				"clear"],
				associations: {
				},

				aggregations: {
					/**
					 * Template control for Procedure items.
					 */
					procedureItemTemplate: {
						type: "sap.ui.core.Item",
						multiple: false
					},

					/**
					 * sap.ui.core.Popup used to render step information in a popup.
					 */
					stepInfoPopup: {
						type: "sap.ui.core.Control",
						multiple: false
					},

					/**
					 * sap.m.Panel used to render the entire Step Navigation control's content. 
					 */
					layout: {
						type: "sap.m.Panel",
						multiple: false
					}
				},

				events: {
					"resize": {
						parameters: {
							oldSize: "object",
							size: "object"
						}
					},

					/**
					 * Raised each time a step starts, changes, or finishes. 
					 */
					"stepChanged": {
						parameters: {
							/**
							 * The ID of the rendering client that raised the event.
							 */
							clientId: "object",

							/**
							 * The type of DvlEnums.DVLSTEPEVENT that has been raised; for example, DVLSTEPEVENT_FINISHED, DVLSTEPEVENT_SWITCHED, DVLSTEPEVENT_STARTED.
							 */
							type: "object",

							/**
							 * The ID of the step affected by this stepId event.
							 */
							stepId: "object"
						}
					}
				}
		},

		/**
		 * Attaches or detaches the Step Navigation control to the {@link sap.ui.vk.GraphicsCore GraphicsCore} object.
		 *
		 * If the parameter <code>graphicsCore</code> is not <code>null</code>, a rendering object corresponding to the Viewport is created.
		 * If the parameter <code>graphicsCore</code> is <code>null</code>, the rendering object corresponding to the Viewport is destroyed.
		 * @param {sap.ui.vk.GraphicsCore} graphicsCore The {@link sap.ui.vk.GraphicsCore GraphicsCore} object, or <code>null</code>.
		 * @returns {sap.ui.vk.StepNavigation} <code>this</code> to allow method chaining.
		 * @public
		 */
		setGraphicsCore: function(graphicsCore) {
			if (graphicsCore != this._graphicsCore) {
				this._graphicsCore = graphicsCore;
			}

			this.instanceSettings = {}; 

			this.oDvl = this._graphicsCore.getApi(sap.ui.vk.GraphicsCoreApi.LegacyDvl);
			this.oDvl.Client.OnStepEvent = function(clientId, type, stepId) {
				var oSettings = this.getSettings();
				this.instanceSettings.currentStepId = stepId;
				switch (type) {
				case DvlEnums.DVLSTEPEVENT.DVLSTEPEVENT_FINISHED:
					oSettings.currentStepFinished = true;
					oSettings.currentStepPaused = false;
					oSettings.playAllActive = false;
					oSettings.isPlaying = false; 
					this._togglePlayPause(true);
					break;
				case DvlEnums.DVLSTEPEVENT.DVLSTEPEVENT_SWITCHED: //WARNING
				case DvlEnums.DVLSTEPEVENT.DVLSTEPEVENT_STARTED:
					oSettings.currentStepId = stepId;
					oSettings.currentStepFinished = false;
					this._highlightStep(stepId);
					//The user may have attempted to pause the step as it changed. 
					//The following attempts to honor the intent by pausing the current step 
					if (oSettings.currentStepPaused) {
						this.pauseStep();
					}
					break;
				}

				this.fireStepChanged({
					clientId: clientId,
					type: type,
					stepId: stepId
				});
			}.bind(this);

			return this;
		},

		/**
		 * This method is used to check if the Graphics Core object has been set on this Step Navigation control. 
		 *
		 * @returns {boolean} 
		 * @private
		 */
		hasGraphicsCore: function() {
			if (this._graphicsCore) {
				return true;
			}
			return false;
		},

		/** 
		 * Attaches a Scene object to the Step Navigation control so that it can access the Scene’s procedures and steps.
		 * 
		 * @param {object} scene The Scene object to attach to the Step Navigation control.
		 * @public
		 */
		setScene: function (scene) {
			this._scene = scene;
			if (this["_getStepThumbnails"]) {
				if (!this._graphicsCore) {
					this.setGraphicsCore(this._scene.getGraphicsCore());
				}

				delete this._procedures;
				var oProcedureList = this.getProcedureList();
				var oSettings = this.getSettings();
				oSettings.reset();
				oProcedureList.unbindItems(); 
				oProcedureList.setSelectedItem(oProcedureList.getFirstItem()); //oProcedureList.setSelectedItem(null);

				//Destroy the step info popup if it exists
				if (oSettings.stepInfo.stepMessagePopup) {
					if (!oSettings.stepInfo.stepMessagePopup.isOpen()) {
						oSettings.stepInfo.stepMessagePopup.close();
					}
					oSettings.stepInfo.stepMessagePopup.destroy();
					oSettings.stepInfo.stepMessagePopup = null;
					this.getShowStepInfoButton().setText(this.oResourceBundle.getText("STEP_NAV_STEPDESCRIPTIONHEADING"));
				}

				//Get Steps and decide whether to enable/disable controls
				var data = this._getStepThumbnails();
				this.oModel.setData(data);
				sap.ui.getCore().setModel(this.oModel);
				this._togglePlayPause(true);
				this._refreshControl();
			}
			this.refresh();
		},

		init : function() {
			if (Control.prototype.init) {
				Control.prototype.init(this);
			}

			if (this.getSettings() == undefined) {
				this.setSettings(new this._settings());
			}	
			this.oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.vk.i18n");
			this._graphicsCore = null;

			// Create JSON data model
			this.oModel = new sap.ui.model.json.JSONModel();
			// Create layout panel
			this._layout =  new sap.m.Panel({
				expandable: false
			});

			this._layoutToolbar = new sap.m.Toolbar({
				design: sap.m.ToolbarDesign.Solid
			}); 

			this._layout.addContent(new sap.m.ScrollContainer(this.getId() + "-scroller", {
				width:"100%", 
				horizontal:true, 
				vertical:false, 
				focusable:true
			}));
			this.setAggregation("layout", this._layout);

			//Create the play previous button
			this.playPreviousButton = new sap.m.Button(this.getId() + "-playPreviousButton", {
				type: sap.m.ButtonType.Transparent,
				icon : "sap-icon://slim-arrow-left",
				tooltip: this.oResourceBundle.getText("STEP_NAV_PREVIOUSSTEPBUTTON"),
				visible: true,
				press:  function(e) {
					var oSettings = this.getSettings();
					var prevStep = this.getPreviousStep(oSettings.currentProcedureIndex);
					if (prevStep) {
						oSettings.currentStepPaused = false;
						this.playStep(prevStep.id,true,oSettings.playAllActive);
						this._togglePlayPause(false);
					}
				}.bind(this)
			});

			// Create the play next button
			this.playNextButton	= new sap.m.Button(this.getId() + "-playNextButton", {
				type: sap.m.ButtonType.Transparent,
				icon: "sap-icon://slim-arrow-right",
				tooltip: this.oResourceBundle.getText("STEP_NAV_NEXTSTEPBUTTON"),
				visible: true,
				press:  function(e) {
					var oSettings = this.getSettings();
					var nextStep = this.getNextStep(oSettings.currentProcedureIndex);
					if (nextStep) {
						oSettings.currentStepPaused = false;
						this.playStep(nextStep.id,true,oSettings.playAllActive);
						this._togglePlayPause(false);
					}
				}.bind(this)
			});

			// Create the play next button
			this.playOptionButton	= new sap.m.Button(this.getId() + "-playOptionButton", {
				type: sap.m.ButtonType.Transparent,
				icon: "sap-icon://media-play",
				tooltip: this.oResourceBundle.getText("STEP_NAV_PLAYBUTTON_PLAY"),
				visible: true,
				press:  function(e) {
					var key = this.getPlayMenuButton().getSelectedKey(); //e.oSource.getSelectedKey();
					var oSettings = this.getSettings();
					var firstStep = null;
					switch (key) {
					case "0":
						// Play
						if (!oSettings.currentStepId) {
							firstStep = this.getNextStep(oSettings.currentProcedureIndex);
							if (firstStep) {
								oSettings.currentStepId = firstStep.id;
							} else {
								return; // If there is no first step then do nothing
							}

						}
						oSettings.playAllActive = false;
						this.playStep(oSettings.currentStepId,!oSettings.currentStepPaused,oSettings.playAllActive);
						oSettings.isPlaying = true;
						oSettings.currentStepPaused = false;
						this._togglePlayPause(false);
						break;
					case "1":
						oSettings.playAllActive = true;
						oSettings.currentStepPaused = false;
						this.playAllSteps(oSettings.currentProcedureId);
						oSettings.isPlaying = true;
						this._togglePlayPause(false);
						break;
					case "2":
						if (!oSettings.currentStepId) {
							firstStep = this.getNextStep(oSettings.currentProcedureIndex);
							if (firstStep) {
								oSettings.currentStepId = firstStep.id;
							} else {
								return; // If there is no first step then do nothing
							}
						}
						oSettings.playAllActive = true;
						var playFromBeginning = !oSettings.currentStepPaused;
						oSettings.currentStepPaused = false;
						this.playStep(oSettings.currentStepId, playFromBeginning, oSettings.playAllActive);
						oSettings.isPlaying = true;
						this._togglePlayPause(false);
						break;
					default:
						break;
					}
				}.bind(this)
			});


			// Create the procedures dropdown list
			this.procedureList = new sap.m.Select(this.getId() + "-procedureList", {
				tooltip: this.oResourceBundle.getText("STEP_NAV_PROCEDURESLISTHEADING"),
				selectedKey: "0",
				type: sap.m.SelectType.Default,
				enabled: true,
				width: "30%",
				autoAdjustWidth: true,
				change: function(oControlEvent) {
					// Reset the control info when they change the selected procedure
					var oProcedureList = this.getProcedureList();
					var oSettings = this.getSettings();
					oSettings.currentProcedureIndex = 0; // Set the default to the first procedure
					oSettings.currentProcedureId = this.instanceSettings.currentProcedureId = oProcedureList.getSelectedKey();
					oSettings.currentStepId = this.instanceSettings.currentStepId = null;
					for (var ip = 0; ip < this.oModel.oData.procedures.length; ip++) {
						if (this.oModel.oData.procedures[ip].id == oSettings.currentProcedureId) {
							oSettings.currentProcedureIndex = ip;
							oSettings.currentProcedure = this.oModel.oData.procedures[ip];
							break;
						}
					}

					// Destroy the step info popup if it exists
					if (oSettings.stepInfo.stepMessagePopup) {
						if (!oSettings.stepInfo.stepMessagePopup.isOpen()) {
							oSettings.stepInfo.stepMessagePopup.close();
						}
						oSettings.stepInfo.stepMessagePopup.destroy();
						oSettings.stepInfo.stepMessagePopup = null;
					}

					this._refreshItems();
				}.bind(this)
			});
			
			this.procedureList.addStyleClass("sapVizKitStepNavigationProcedureList");

			// Create the item template for the procedure drop down list
			this.setAggregation("procedureItemTemplate", (
					new sap.ui.core.ListItem()
					.bindProperty("text","name")
					.bindProperty("key", "id")
					.bindProperty("tooltip","name")));

			// Create the play menu
			this.playMenuButton = (new sap.m.Select(this.getId() + "-playMenuButtonIcon", {
				selectedKey: "0",
				type: sap.m.SelectType.Default,
				tooltip: this.oResourceBundle.getText("STEP_NAV_PLAYMENU_PLAYOPTIONS"),
				enabled: true,
				autoAdjustWidth : false,
				items: [
					new sap.ui.core.ListItem({
						key: "0",
						icon: "sap-icon://media-play",
						text: this.oResourceBundle.getText("STEP_NAV_PLAYMENU_PLAY"),
						tooltip: this.oResourceBundle.getText("STEP_NAV_PLAYMENU_PLAY")
					}),
					new sap.ui.core.ListItem({
						key: "1",
						icon: "sap-icon://media-play",
						text: this.oResourceBundle.getText("STEP_NAV_PLAYMENU_PLAYALL"),
						tooltip: this.oResourceBundle.getText("STEP_NAV_PLAYMENU_PLAYALL")
					}),
					new sap.ui.core.ListItem({
						key: "2",
						icon: "sap-icon://media-play",
						text: this.oResourceBundle.getText("STEP_NAV_PLAYMENU_PLAYALLREMAINING"),
						tooltip: this.oResourceBundle.getText("STEP_NAV_PLAYMENU_PLAYALLREMAINING")
					}) ]
			}));

			this.playMenuButton.addStyleClass("sapVizKitStepNavigationPlayOptionsSelect");


			// Create the pause button
			this.pauseButton = new sap.m.Button(this.getId() + "-pauseButton", {
				type: sap.m.ButtonType.Transparent,
				icon: "sap-icon://media-pause",
				visible: false,
				tooltip: this.oResourceBundle.getText("STEP_NAV_PLAYMENU_PAUSE"),
				press:  function(e) {
					var oSettings = this.getSettings();
					this.pauseStep();
					oSettings.currentStepPaused = true;
					oSettings.isPlaying = false;
					this._togglePlayPause(true);
				}.bind(this)
			});

			this.showStepInfoButton = new sap.m.ToggleButton(this.getId() + "-showStepInfoButton",{
				icon: "sap-icon://hide",
				type: sap.m.ButtonType.Transparent,
				pressed: false,
				text: this.oResourceBundle.getText("STEP_NAV_STEPDESCRIPTIONHEADING"),
				tooltip: this.oResourceBundle.getText("STEP_NAV_STEPDESCRIPTIONHEADING"),
				press: function(oEvent){
					var target = oEvent.getSource();
					if (target.getPressed()) {
						this.setShowStepInfo(true);
						target.setIcon("sap-icon://show");
						target.setTooltip(this.oResourceBundle.getText("STEP_NAV_SHOWSTEPDESCRIPTIONBUTTON"));
					} else {
						this.setShowStepInfo(false);
						target.setIcon("sap-icon://hide");
						target.setTooltip(this.oResourceBundle.getText("STEP_NAV_HIDESTEPDESCRIPTIONBUTTON"));
					}
				}.bind(this)
			}); 


			this._layoutToolbar.addContent(this.playPreviousButton);
			this._layoutToolbar.addContent(this.playOptionButton);
			this._layoutToolbar.addContent(this.pauseButton);
			this._layoutToolbar.addContent(this.playMenuButton);
			this._layoutToolbar.addContent(this.procedureList);
			this._layoutToolbar.addContent(this.showStepInfoButton);
			this._layoutToolbar.addContent(new sap.m.ToolbarSpacer());
			this._layoutToolbar.addContent(this.playNextButton);

			this._layout.setHeaderToolbar(this._layoutToolbar);
		},

		getScroller: function(){
			var id = this.getId() + "-scroller";
			var cnt = sap.ui.getCore().byId(id);
			var lo = this.getLayout();
			return lo.getContent()[lo.indexOfContent(cnt)];
		},

		getProcedureList: function(){
			var id = this.getId() + "-procedureList";
			var ht = this.getLayout().getHeaderToolbar();
			var cnt = sap.ui.getCore().byId(id);
			return ht.getContent()[ht.indexOfContent(cnt)];
		},

		getPlayMenuButton: function(){
			var id = this.getId() + "-playMenuButtonIcon";
			var ht = this.getLayout().getHeaderToolbar();
			var cnt = sap.ui.getCore().byId(id);
			return ht.getContent()[ht.indexOfContent(cnt)];
		}, 

		getPlayOptionButton: function(){
			var id = this.getId() + "-playOptionButton";
			var ht = this.getLayout().getHeaderToolbar();
			var cnt = sap.ui.getCore().byId(id);
			return ht.getContent()[ht.indexOfContent(cnt)];
		}, 

		getPauseButton: function(){
			var id = this.getId() + "-pauseButton";
			var ht = this.getLayout().getHeaderToolbar();
			var cnt = sap.ui.getCore().byId(id);
			return ht.getContent()[ht.indexOfContent(cnt)];
		},

		getPlayNextButton: function(){
			var id = this.getId() + "-playNextButton";
			var ht = this.getLayout().getHeaderToolbar();
			var cnt = sap.ui.getCore().byId(id);
			return ht.getContent()[ht.indexOfContent(cnt)];
		},

		getPlayPreviousButton: function(){
			var id = this.getId() + "-playPreviousButton";
			var ht = this.getLayout().getHeaderToolbar();
			var cnt = sap.ui.getCore().byId(id);
			return ht.getContent()[ht.indexOfContent(cnt)];
		},

		getShowStepInfoButton: function(){
			var id = this.getId() + "-showStepInfoButton";
			var ht = this.getLayout().getHeaderToolbar();
			var cnt = sap.ui.getCore().byId(id);
			return ht.getContent()[ht.indexOfContent(cnt)];
		},

		exit : function() {
			if (this._resizeListenerId) {
				ResizeHandler.deregister(this._resizeListenerId);
				this._resizeListenerId = null;
			}
			if (Control.prototype.exit) {
				Control.prototype.exit.apply(this);
			}
		},

		/**
		 * Control runtime settings (intended as internal/read-only).
		 * 
		 * @private
		 */
		_settings: function(){
			return {
				enabled: false,
				toggle: {
					addCss: function(key, property,onValue, offValue) {
						if (!this.targets[key]) {
							this.targets[key] = {
									"type" : "css",
									"property" : property,
									"onValue": onValue,
									"offValue": offValue
							};
						}
					},

					addMethod: function (target, method, onValue, offValue, useJQuery) {
						var key = target.getId();
						if (!this.targets[key]) {
							this.targets[key] = {
									"type": "method",
									"target": target,
									"method": method,
									"onValue": onValue,
									"offValue": offValue,
									"useJQuery": useJQuery
							};
						}
					},

					targets: {}
				},

				currentProcedureIndex: 0,
				currentProcedureId: "",
				currentProcedure: null, //Managed and used by popup step info
				currentStepId: null,
				currentStep: null, //Managed and used by popup step info
				currentStepPaused: false,
				isPlaying: false,
				currentStepFinished: true,
				playAllActive: false,
				showToolbar: true,
				showThumbnails: true,
				portfolioMode: false,
				reset: function() {
					this.currentStep = null;
					this.currentProcedure = null;
					this.currentProcedureIndex = 0;
					this.currentProcedureId = "";
					this.currentStepId = null;
					this.currentStepPaused = false;
					this.currentStepFinished = true;
					this.playAllActive = false;
					this.portfolioMode = false;
				},

				stepInfo: {
					lastTop: null,
					lastLeft: null,
					stepMessagePopup: null,
					openPopup: function (popupTitle, popupContent, target) {
						if (!this.stepMessagePopup) {
							this.stepMessagePopup = new sap.m.ResponsivePopover({
								placement: "Top",
								showCloseButton: true,
								verticalScrolling: true, 
								contentHeight: "10%",
								contentWidth: "30%"
							});	
							this.stepMessagePopup.addStyleClass("sapVizKitStepNavigationPopoverStepInfo");
						}
						this.stepMessagePopup.setTitle(popupTitle);
						this.stepMessagePopup.removeAllContent();
						this.stepMessagePopup.addContent(popupContent);
						this.stepMessagePopup.openBy(target);
					}
				}
			};
		},

		/**
		 * Rebuilds the content of the Step Navigation control from the current Scene.
		 * 
		 * @return {boolean} Returns <code>true</code> if the content of the Step Navigation control was rebuilt successfully.
		 * @public
		 */
		refresh: function(oScene){
			jQuery.sap.log.info("StepNavigation refresh() called.");
			if (this.getVisible() && (this["_getStepThumbnails"] && this._scene != null)) {
				var oProcedureList = this.getProcedureList();
				var oSettings = this.getSettings();
				oSettings.reset();
				oProcedureList.setSelectedItem(oProcedureList.getFirstItem());

				//Get Steps and decide whether to enable/disable controls
				var data = this._getStepThumbnails();

				//Destroy the step info popup if it exists
				if (oSettings.stepInfo.stepMessagePopup) {
					if (!oSettings.stepInfo.stepMessagePopup.isOpen()) {
						oSettings.stepInfo.stepMessagePopup.close();
					}
					oSettings.stepInfo.stepMessagePopup.destroy();
					oSettings.stepInfo.stepMessagePopup = null;
				}

				//
				this.oModel.setData(data);
				sap.ui.getCore().setModel(this.oModel);
				this._togglePlayPause(true);
				this._refreshControl();
			} else {
				if (this.getVisible()) {
					this._refreshControl();
				}
			}
			return true; 
		},

		/**
		 * Clears the content of the Step Navigation control.
		 * 
		 * @return {boolean} Returns <code>true</code> if the method was called successfully.
		 * @public
		 */
		clear : function(){
			jQuery.sap.log.info("StepNavigation clear() called.");
			return true;
		},

		onBeforeRendering : function() {
			if (this._resizeListenerId) {
				ResizeHandler.deregister(this._resizeListenerId);
				this._resizeListenerId = null;
			}

			//**********************************************************************
			//**** CONFIGURE THE DROP DOWN LIST OF PROCEDURES					****
			//**********************************************************************
			if (this.getShowToolbar()) {
				var oProcedureList = this.getProcedureList();
				oProcedureList.setModel(this.oModel);
				var oProcedureItemTemplate = this.getProcedureItemTemplate();
				oProcedureList.bindItems("/procedures", oProcedureItemTemplate);
			}
		},

		onAfterRendering : function() {
			if (this._canvas) {
				var domRef = this.getDomRef();
				domRef
				.appendChild(this._canvas);
				this._resizeListenerId = ResizeHandler
				.register(
						this,
						this._handleResize
						.bind(this));
				this._bestFit();
				this
				.fireResize({
					size: {
						width : domRef.clientWidth,
						height : domRef.clientHeight
					}
				});
			}

			//Events like the Toggle Step Info button are causing a re-render. The following workaround 
			//ensures that the play/pause button do not get reset to incorrect defaults. This should be handled differently and will be updated in the future.
			var oSettings = this.getSettings(); 
			this._togglePlayPause(!oSettings.isPlaying);
			if (oSettings.currentStepId){
				this._highlightStep(oSettings.currentStepId);
			}
		},

		/**
		 * @private
		 */
		_handleResize: function(event) {
			this.fireResize({
				oldSize: event.oldSize,
				size: event.size
			});
			this._update();
		},

		/**
		 * @private
		 */
		_reset: function() {
			this._x = 0;
			this._y = 0;
			this._s = 1.0;
			this._r = 0;
		},

		/**
		 * @private
		 */
		_update: function() {
			var x = this._x
			- (this._imageW - this._canvas.clientWidth)
			/ 2;
			var y = this._y
			- (this._imageH - this._canvas.clientHeight)
			/ 2;
			var transform = "matrix(" + this._s
			+ ",0,0," + this._s + ","
			+ x + "," + y + ")";

			this._img.style.transform = transform;
			this._img.style.webkitTransform = transform;
			this._img.style.msTransform = transform;
			this._img.style.MozTransform = transform;
			this._img.style.OTransform = transform;
		},

		_bestFit: function() {
			this._reset();
			var sx = this._canvas.clientWidth
			/ this._img.width;
			var sy = this._canvas.clientHeight
			/ this._img.height;
			this._s = sx < sy ? sx : sy;
			if (this._s == 0) {
				this._s = 1.0;
			}
			this._x = 0;
			this._y = 0;
			this._update();
		},

		/**
		 * Toggle Play/Pause button visibility.
		 * @private
		 */
		_togglePlayPause: function (pauseActive) {
			//var oSettings = this.getSettings();
			this.togglePlayPauseActive = true; 
			if (this.getSettings().showToolbar) {
				if (pauseActive) {
					this.getPauseButton().setVisible(false);
					this.getPlayOptionButton().setVisible(true);
				} else {
					this.getPauseButton().setVisible(true);
					this.getPlayOptionButton().setVisible(false);
				}
			}
		},

		/**
		 * Used internally to refresh and update the controls and their data. 
		 * 
		 * @private
		 */
		_refreshControl: function () {
			//var that = this;
			var oProcedureList = this.getProcedureList();
			var oProcedureItemTemplate = this.getProcedureItemTemplate(); 
			var oScroller = this.getScroller();
			var oSettings = this.getSettings();

			//Destroy the step info popup if it exists
			if (oSettings.stepInfo.stepMessagePopup) {
				if (!oSettings.stepInfo.stepMessagePopup.isOpen()) {
					oSettings.stepInfo.stepMessagePopup.close();
				}
				oSettings.stepInfo.stepMessagePopup.destroy();
				oSettings.stepInfo.stepMessagePopup = null;
				this.getShowStepInfoButton().setText(this.oResourceBundle.getText("STEP_NAV_STEPDESCRIPTIONHEADING"));
			}

			oProcedureList.unbindItems();  
			if (this.oModel.oData.procedures.length > 0) {
				var first = this.oModel.oData.procedures[0];
				if (this.getShowToolbar()) {
					oProcedureList.bindItems("/procedures", oProcedureItemTemplate);
					oProcedureList.selectedKey = first.id;
					oProcedureList.enabled = true;
				}
				this._refreshItems();
			} else {
				if (this.getShowToolbar()) {
					oProcedureList.bindItems("/procedures", oProcedureItemTemplate);
					oProcedureList.enabled = false;
				}

				if (this.getShowThumbnails()) {
					oScroller.destroyContent();
				}
			}
		},

		/**
		 * Refreshes the step thumbnail list items. 
		 * 
		 * @private
		 */
		_refreshItems: function () {
			var that = this;
			var steps = [];
			var oProcedureList = this.getProcedureList();
			var oSettings = that.getSettings();
			var oScroller = that.getScroller();
			var itemLayout = new sap.m.HBox();

			if (that.getShowThumbnails()) {
				//Clear the current controller layout
				oScroller.removeAllContent(); 
			}

			//Get the procedure info
			if (!oSettings.currentProcedure) {
				oSettings.currentProcedure = that.oModel.oData.procedures[oSettings.currentProcedureIndex];
				oProcedureList.setSelectedItem(oProcedureList.getFirstItem());
			}

			if (oSettings.currentProcedureId != '' || that.oModel.oData.procedures.length > 0) {
				if (that.getShowThumbnails()) {
					steps = that.oModel.oData.procedures[oSettings.currentProcedureIndex].steps;
					var imagePress = function(ev) {
						oSettings.currentStepPaused = false;
						var cnt = sap.ui.getCore().byId(ev.getSource().getId());
						that.playStep(cnt.getCustomData()[0].getValue("stepId"));
						oSettings.playAllActive = false;
						that._togglePlayPause(false);
					};

					for (var i = 0; i < steps.length; i++) {
						var img = new sap.m.Image({
							alt: steps[i].name,
							src: "data:image/" + steps[i].thumbnailType + ";base64," + steps[i].thumbnailData,
							densityAware: false,
							tooltip: steps[i].name, 
							press: imagePress.bind(that)
						});

						img.data("stepId", steps[i].id); //Use for jQuery to change style - possibly refactor to iterate through sap.m.Image objects instead
						img.addCustomData(new sap.ui.core.CustomData({key:"stepId", value:steps[i].id}));
						img.addStyleClass("sapVizKitStepNavigationStepItem");
						itemLayout.addItem(img);
					}
					oScroller.addContent(itemLayout);
				}
			}
		},

		/**
		 * Highlights a step - used to indicate that a step has recently played or is playing. 
		 * 
		 * @private
		 */
		_highlightStep: function (stepId) {
			var that = this;
			if (that.getVisible()) {
				var oScroller = that.getScroller(); 
				var oSettings = that.getSettings();

				//Logic for connecting popup to step changed event
				var stepInfo = that.getStep(0, oSettings.currentProcedureIndex, stepId);
				if (!oSettings.currentProcedure) {
					oSettings.currentProcedure = that.oModel.oData.procedures[that.oSettings.currentProcedureIndex];
				}

				//Content for the popup
				//var popupProcedure = oSettings.currentProcedure.name;
				var title = stepInfo.name;
				var content = new sap.m.VBox({
					items: [new sap.m.Text({text:stepInfo.description})]
				});
				content.addStyleClass("sapVizKitStepNavigationPopoverContent");

				var oShowStepInfoButton = that.getShowStepInfoButton();
				//oShowStepInfoButton.setText(title); 
				if (that.getShowStepInfo()) {
					oSettings.stepInfo.openPopup(title, content, oShowStepInfoButton);		
				} else if (oSettings.stepInfo.stepMessagePopup && oSettings.stepInfo.stepMessagePopup.isOpen()) {
					oSettings.stepInfo.stepMessagePopup.close();
				}

				//Highlight the selected thumbnail
				if (that.getShowThumbnails()) {
					var oThumbnailItems = oScroller.getContent()[0].getItems(); 
					for (var i = 0; i < oThumbnailItems.length; i++) {
						if (oThumbnailItems[i].getCustomData()[0].getValue("stepId") == stepId) {
							oThumbnailItems[i].addStyleClass("selected");
							oThumbnailItems[i].$()[0].scrollIntoView();
						} else {
							oThumbnailItems[i].removeStyleClass("selected");
						}

					}

				}
			}
		},

		/**
		 * Returns the procedures list with steps for the current scene, and appends base64 data as thumbnailData and an
		 * image type as thumbnailType.
		 * 
		 * @return {JSON} <this> For example:
		 * <code>{sceneId : string, hasThumbnails : boolean, "procedures" : [id:string, name: string, steps: [{id: string, name: string, thumnailData: string, thumbnailType: string}], "portfolios": [] }</code>
		 * @public
		 */
		getProceduresAndSteps: function() {
			return this._getStepThumbnails();
		},

		/**
		 * Obtains the procedures and portfolios list for the current scene and appends base64 data as thumbnailData and an
		 * image type as thumbnailType.
		 * 
		 * @return {JSON} procs
		 * @private
		 */
		_getStepThumbnails: function() {
			var that = this;
			var procs = that._retrieveProcedures();
			if (procs.sceneId != null) {
				var thumbDataRaw;
				var ending;
				var imgType;
				var step;

				//Get thumbnails for procedures
				for (var prockey in procs.procedures) {
					var oProc = procs.procedures[prockey];
					for (var stepKey in oProc.steps) {
						step = oProc.steps[stepKey];
						thumbDataRaw = that.oDvl.Scene.RetrieveThumbnail(procs.sceneId, step.id);
						ending = thumbDataRaw.substring(thumbDataRaw.length - 2);

						//Check the prefix to detect whether this is a PNG or something else 
						var prefix = thumbDataRaw.substring(0, 3);
						if (prefix == "iVB") {
							imgType = "png";
						} else if (prefix != "eff" && prefix != "err") { //eff is the jDVL prefix for an error code returned by the core - not valid base64
							imgType = "jpg";
						} else if (prefix == "eff" || prefix == "err") {
							// Error retrieving
							imgType = null;
							thumbDataRaw = null;
						}

						//Check the ending for padding and trim if found
						if (/,$/.test(ending) || /,,$/.test(ending)) {
							thumbDataRaw = thumbDataRaw.substring(0, thumbDataRaw.length - 4);
							ending = thumbDataRaw.substring(thumbDataRaw.length - 2);
						}

						procs.procedures[prockey].steps[stepKey].thumbnailData = thumbDataRaw;
						procs.procedures[prockey].steps[stepKey].thumbnailType = imgType;
					}
				}

				//Get thumbnails for portfolios
				for ( var portkey in procs.portfolios) {
					var oPort = procs.portfolios[portkey];
					for (var portStepKey in oPort.steps) {
						step = oPort.steps[portStepKey];
						thumbDataRaw = that.oDvl.Scene.RetrieveThumbnail(procs.sceneId, step.id);
						ending = thumbDataRaw.substring(thumbDataRaw.length - 2);

						//Check the prefix to detect whether this is a PNG or something else 
						var prefix = thumbDataRaw.substring(0, 3);
						if (prefix == "iVB") {
							imgType = "png";
						} else if (prefix != "eff") { //eff is the jDVL prefix for an error code returned by the core - not valid base64
							imgType = "jpg";
						} else if (prefix == "eff") {
							// Error retrieving
							imgType = null;
						}

						procs.portfolios[portkey].steps[portStepKey].thumbnailData = thumbDataRaw;
						procs.portfolios[portkey].steps[portStepKey].thumbnailType = imgType;
					}
				}
				procs.hasThumbnails = true;
			}
			that._procedures = procs;
			return procs;
		},

		/**
		 * Returns or retrieves the list of procedures and portfolios for the current scene.
		 * 
		 * @param {string} sceneId ID of the scene from which to retrieve procedures and portfolios.
		 * @return {JSON} procs
		 * @private
		 */
		_retrieveProcedures: function(sceneId) {
			var that = this;
			var procs = {};
			if (!that._procedures) {
				procs = {
						sceneId : null,
						hasThumbnails : false,
						"procedures" : [],
						"portfolios" : []
				};
			} else {
				procs = that._procedures;
			}

			if (that._scene && (procs.sceneId != (sceneId || that._scene._dvlSceneId))) {
				var s = sceneId || that._scene._dvlSceneId;
				if (s != null) {
					var ps = that.oDvl.Scene.RetrieveProcedures(s);
					if (ps != null) {
						procs.hasThumbnails = false;
						procs.sceneId = that._scene._dvlSceneId;
						procs.procedures = ps.procedures;
						procs.portfolios = ps.portfolios;
					} else {
						procs = {
								sceneId : null,
								hasThumbnails : false,
								"procedures" : [],
								"portfolios" : []
						};
					}
				}
			}

			return procs;
		},

		/**
		 * Gets a step based on a positive or negative integer, which is used as an index relative to the index of the current step. 
		 * An index value of <code>0</code> can be used to retrieve the details of the current step.
		 * 
		 * @param {number}
		 *          relIndex Positive or negative integer representing the number to add or subtract from the index of the
		 *          current step to return the desired step; for example, //next 1, current 0, previous -1
		 * @param {number} [procedureIndex] Optional integer representing the index of the target procedure in the procedures list.
		 * @param {string} specificStepId 
		 * @return {JSON} step 
		 * @public
		 */
		getStep: function(relIndex, procedureIndex, specificStepId) {
			var that = this;
			var sc = that.oDvl.Settings.LastLoadedSceneId;
			if (sc != null) {
				procedureIndex = procedureIndex != null ? procedureIndex : 0;
				var curs = specificStepId ? specificStepId : that.instanceSettings.currentStepId;
				var step = null;
				var p = that._retrieveProcedures(sc);
				var curProc = p.procedures[procedureIndex];

				// If current or next step requested with no current step requested then return first
				if (curProc && curProc.steps.length > 0) {
					step = curProc.steps[0];
				}

				if (curs != "") {
					// Look for the current step in the specified procedure return the requested relative step
					for (var si = 0; si < curProc.steps.length; si++) {
						var _s = curProc.steps[si];
						if (_s.id == curs) {
							var x = si + relIndex;
							if (x < curProc.steps.length && x >= 0) {
								step = curProc.steps[x];
							} else {
								step = null;
							}
							break;
						}
					}
				}
			}
			return step;
		},

		/**
		 * Pauses the step that is currently playing.
		 * 
		 * @return {void}
		 * @public
		 */
		pauseStep: function() {
			var that = this;
			var s = that.oDvl.Settings.LastLoadedSceneId;
			if (s != null) {
				that.oDvl.Scene.PauseCurrentStep(s);
			}
		},

		/**
		 * Gets the total number of steps for a specified procedure, or for all procedures.
		 * 
		 * @param {string} [procedureId] An optional ID for a procedure for which to retrieve a count. 
		 * If a value for <code>procedureId</code> is specified, then get a count of the steps for the specified procedure. 
		 * Otherwise, get the total number of steps in all of the procedures for the Scene.
		 * @return {number}
		 * @private
		 */
		_stepCount: function(procedureId) {
			var that = this;
			var sc = that.oDvl.Settings.LastLoadedSceneId;
			var stepCount = 0;
			if (sc != null) {
				var p = that._retrieveProcedures(sc);
				for (var pi = 0; pi < p.procedures.length; pi++) {
					if (p.procedures[pi].id == procedureId) {
						stepCount = p.procedures[pi].steps.length;
						break;
					} else if (procedureId == null) {
						stepCount += p.procedures[pi].steps.length;
					}
				}
			}
			return stepCount;
		},

		/**
		 * Cycles through steps and procedures for the last loaded scene (<code>lastLoadedScene</code>), and returns the step preceding the current step (currentStepId.
		 * 
		 * @param {number} [procedureIndex] Optional integer representing the index of the target procedure in the procedures list.
		 * @return {JSON} 
		 * @public
		 */
		getPreviousStep: function(procedureIndex) {
			var that = this;
			return that.getStep(-1, procedureIndex);
		},

		/**
		 * Cycles through steps and procedures for the lastLoadedScene and returns the step that follows after the currentStepId.
		 * 
		 * @param {number} [procedureIndex] Optional integer representing the index of the target procedure in the procedures list.
		 * @return {JSON}
		 * @public
		 */
		getNextStep: function(procedureIndex) {
			var that = this;
			return that.getStep(1, procedureIndex);
		},

		/**
		 * Plays the specified procedure step.
		 * 
		 * @param {string} stepId The ID of the procedure step to play.
		 * @param {boolean} fromTheBeginning Default: true If <code>true</code>, tells the Viewer to play the step from the first frame.
		 * @param {boolean} continueToTheNext Default: false If <code>true</code>, tells the Viewer to play the next step in sequence.
		 * @return {void}
		 * @public
		 */
		playStep: function(stepId, fromTheBeginning, continueToTheNext) {
			var that = this;
			var s = that.oDvl.Settings.LastLoadedSceneId;
			if (s != null) {
				that.instanceSettings.currentStepId = stepId;

				// call ActivateStep(sceneId, dvlid, fromTheBeginning, continueToTheNext)
				that.oDvl.Scene.ActivateStep(s, stepId, fromTheBeginning != null ? fromTheBeginning : true,
						continueToTheNext != null ? continueToTheNext : false); 
			}
		},

		/**
		 * Plays all the steps in the specified procedure.
		 * 
		 * @param {string} [procedureId] The ID of the procedure for which to play all steps. If <code>procedureId == null</code>, then only the first step is played.
		 * @return {void}
		 * @public
		 */
		playAllSteps: function(procedureId) {
			var that = this;
			var sc = that.oDvl.Settings.LastLoadedSceneId;
			if (sc != null) {
				var ps = that._retrieveProcedures(sc);
				var procedureIndex = 0;
				if (procedureId != null && ps.procedures.length > 1){
					for (var ip = 0; ip < ps.procedures.length; ip++) {
						if (ps.procedures[ip].id == procedureId) {
							procedureIndex = ip;
							break;
						}
					}	
				}

				if (ps.procedures.length > 0) {
					var s = ps.procedures[procedureIndex].steps[0];
					if (s) {
						that.instanceSettings.currentStepId = s.id;
						that.oDvl.Scene.ActivateStep(sc, s.id, true, true);
					}
				}
			}
		}
	});

	return StepNavigation;

});

}; // end of sap/ui/vk/StepNavigation.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.Toolbar') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.SceneTree.
jQuery.sap.declare('sap.ui.vk.Toolbar'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/Toolbar",[
	"jquery.sap.global", "./library", "sap/ui/core/Control", "sap/ui/model/json/JSONModel"
], function(jQuery, library, Control, JSONModel) {
	"use strict";

	/**
	 * Constructor for a new Toolbar control.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * Some class description goes here.
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.32.3
	 *
	 * @constructor   
	 * @public
	 * @alias sap.ui.vk.Toolbar
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var Toolbar = Control.extend("sap.ui.vk.Toolbar", /** @lends sap.ui.vk.Toolbar.prototype */ {
		metadata: {
			library: "sap.ui.vk",
			properties: {
				/**
				 * Used to set the title of the Toolbar
				 * @private
				 */
				title: {
					type: "string",
					group: "Appearance",
					defaultValue: ""
				}
			},
			events: {
			},
			associations: {
				/**
				 * A toolbar instance is associated with an instance of the Viewer
				 * 
				 * @private
				 */
				viewer: { 
					type: "sap.ui.vk.Viewer",
					cardinality: "0..1"
						}
			},
			aggregations: {
				_toolbar: {
					type: "sap.m.Toolbar",
					multiple: false,
					visibility: "visible"
				}, 
				_helpButton: {
					type: "sap.m.Button",
					multiple: false,
					visibility: "visible"
				}, 
				_stepNavigationButton: {
					type: "sap.m.ToggleButton",
					multiple: false,
					visibility: "visible"
				},
				_sceneTreeButton: {
					type: "sap.m.ToggleButton",
					multiple: false,
					visibility: "visible"
				},
				_enterFullScreenButton: {
					type: "sap.m.ToggleButton",
					multiple: false,
					visibility: "visible"
				},
				_exitFullScreenButton: {
					type: "sap.m.Button",
					multiple: false,
					visibility: "visible"
				},
				_toolbarTitle: {
					type: "sap.m.Title",
					multiple: false,
					visibility: "visible"
				} 
			}
		},
		
		/*
		 * Toggles the step navigation control visibility and updates its button
		 */
		_onSceneTree: function() {
			this.oViewer = sap.ui.getCore().byId(this.getViewer());
			if (this.oViewer != null){
				var newStateSceneTreeButton = this._sceneTreeButton.getPressed();
				this.oViewer.setShowSceneTree(newStateSceneTreeButton);
				
			}
		},
		
		_onStepNavigation: function() {
			this.oViewer = sap.ui.getCore().byId(this.getViewer());
			if (this.oViewer != null){
				var newStateStepNavigationButton = this._stepNavigationButton.getPressed();
				this.oViewer.setShowStepNavigation(newStateStepNavigationButton);
				
			}
		},
		
		_onFullScreen: function() {
			this.oViewer = sap.ui.getCore().byId(this.getViewer());
			if (this.oViewer != null){
				var newStateFullScreenButton = this._enterFullScreenButton.getPressed();
				this.oViewer.setEnableFullScreen(newStateFullScreenButton);
			}
		},
		
		_fullScreenHandler: function(event) {
			var bFull = event.mParameters.isFullScreen;
			this._enterFullScreenButton.setPressed(bFull);
			
			if (bFull) {
				this._enterFullScreenButton.setIcon("sap-icon://exit-full-screen");
			} else {
				this._enterFullScreenButton.setIcon("sap-icon://full-screen");
			}
		},
		
		init: function() {
			if (Control.prototype.init) {
				Control.prototype.init.apply(this);
			}
			this.oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.vk.i18n");
			var _toolbarSpacer = new sap.m.ToolbarSpacer();

			var _helpButton = new sap.m.Button({
				icon: "sap-icon://sys-help",
				type: sap.m.ButtonType.Transparent,
				tooltip : this.oResourceBundle.getText("VIEWER_HELPBUTTONTOOLTIP")
			}); 
			this.setAggregation("_helpButton", _helpButton); 
			
			this._stepNavigationButton = new sap.m.ToggleButton({
				icon: "sap-icon://step",
				type: sap.m.ButtonType.Transparent,
				enabled: false,
				tooltip : this.oResourceBundle.getText("STEP_NAV_MENUBUTTONTOOLTIP"),
				press: this._onStepNavigation.bind(this)
			}); 
			this.setAggregation("_stepNavigationButton", this._stepNavigationButton); 
			
			this._sceneTreeButton = new sap.m.ToggleButton({
				icon: "sap-icon://tree",
				type: sap.m.ButtonType.Transparent,
				tooltip : this.oResourceBundle.getText("SCENETREE_MENUBUTTONTOOLTIP"),
				press: this._onSceneTree.bind(this)
			}); 
			this.setAggregation("_sceneTreeButton", this._sceneTreeButton); 
			
			this._enterFullScreenButton = new sap.m.ToggleButton({
				icon: "sap-icon://full-screen",
				type: sap.m.ButtonType.Transparent,
				tooltip : this.oResourceBundle.getText("VIEWER_FULLSCREENBUTTONTOOLTIP"),
				press: this._onFullScreen.bind(this)
			}); 
			this.setAggregation("_enterFullScreenButton", this._enterFullScreenButton); 
			
			var _exitFullScreenButton = new sap.m.Button({
				icon: "sap-icon://exit-full-screen",
				type: sap.m.ButtonType.Transparent,
				tooltip : this.oResourceBundle.getText("VIEWER_FULLSCREENBUTTONTOOLTIP")
			}); 
			this.setAggregation("_exitFullScreenButton", _exitFullScreenButton); 
			
			
			this._toolbarTitle = new sap.m.Title();
			this.setAggregation("_toolbarTitle", this._toolbarTitle);
			
			this._toolbar = new sap.m.Toolbar({
				design: sap.m.ToolbarDesign.Solid, 
				content: [this._toolbarTitle,
				          _toolbarSpacer, 
				          new sap.m.ToolbarSeparator(), 
				          this._sceneTreeButton, 
				          new sap.m.ToolbarSeparator(),
				          this._stepNavigationButton,
				          new sap.m.ToolbarSeparator(),
				          this._enterFullScreenButton
				          ] 
			});

			this.setAggregation("_toolbar", this._toolbar, true);
		},
		
		exit: function() {
			this.oViewer = sap.ui.getCore().byId(this.getViewer()); 
			if (this.oViewer) {
				this.oViewer.detachFullScreen(this._fullScreenHandler.bind(this));
			}
		},
		
		onBeforeRendering: function() {
			this._toolbar.setVisible(true);
			this._toolbarTitle.setText(this.getTitle());
		},
		
		refresh: function () {
			this.oViewer = sap.ui.getCore().byId(this.getViewer()); 
			this._stepNavigationButton.setPressed(this.oViewer.getShowStepNavigation());
			this._stepNavigationButton.setEnabled(this.oViewer.getEnableStepNavigation());
			this._sceneTreeButton.setPressed(this.oViewer.getShowSceneTree());
			this._sceneTreeButton.setEnabled(this.oViewer.getEnableSceneTree());
			
			this.oViewer.attachFullScreen(this._fullScreenHandler.bind(this));
			return true; 
		},
		
		onAfterRendering: function() {
			this.refresh();
		}
	});

	return Toolbar;

}, /* bExport= */ true);

}; // end of sap/ui/vk/Toolbar.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.ViewStateManager') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides the ViewStateManager class.
jQuery.sap.declare('sap.ui.vk.ViewStateManager'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/ViewStateManager",[
	"jquery.sap.global", "./library", "sap/ui/base/ManagedObject"
], function(jQuery, library, ManagedObject) {
	"use strict";

	var NodeSet;
	var log = jQuery.sap.log;

	// NB: Implementation details:
	// ViewStateManager should have its own set of visible and selected nodes.
	// At the moment only one viewport per scene is supported and hence we can delegate
	// visibility and selection handling to the scene.

	/**
	 * Creates a new ViewStateManager object.
	 *
	 * @class
	 * The ViewStateManager class manages visibility and selection states of nodes in the scene.
	 *
	 * The objects of this class should not be created directly.
	 * They should be created with the {@link sap.ui.vk.GraphicsCore#createViewStateManager sap.ui.vk.GraphicsCore.createViewStateManager} method,
	 * and destroyed with the {@link sap.ui.vk.GraphicsCore#destroyViewStateManager sap.ui.vk.GraphicsCore.destroyViewStateManager} method.
	 *
	 * @param {sap.ui.vk.NodeHierarchy} nodeHierarchy The NodeHierarchy object.
	 * @public
	 * @author SAP SE
	 * @version 1.32.3
	 * @extends sap.ui.base.ManagedObject
	 * @alias sap.ui.vk.ViewStateManager
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var ViewStateManager = ManagedObject.extend("sap.ui.vk.ViewStateManager", /** @lends sap.ui.vk.ViewStateManager.prototype */ {
		metadata: {
			publicMethods: [
				"enumerateSelection",
				"getNodeHierarchy",
				"getSelectionState",
				"getVisibilityState",
				"setSelectionState",
				"setVisibilityState"
			],

			events: {
				/**
				 * This event is fired when the visibility of the node changes.
				 */
				visibilityChanged: {
					parameters: {
						/**
						 * IDs of newly shown nodes.
						 */
						visible: { type: "string[]" },
						/**
						 * IDs of newly hidden nodes.
						 */
						hidden: { type: "string[]" }
					},
					enableEventBubbling: true
				},

				/**
				 * This event is fired when the nodes are selected/unselected.
				 */
				selectionChanged: {
					parameters: {
						/**
						 * IDs of newly selected nodes.
						 */
						selected: { type: "string[]" },
						/**
						 * IDs of newly unselected nodes.
						 */
						unselected: { type: "string[]" }
					},
					enableEventBubbling: true
				}
			}
		},

		constructor: function(nodeHierarchy) {
			log.debug("sap.ui.vk.ViewStateManager.constructor() called.");

			ManagedObject.apply(this);

			var scene = nodeHierarchy.getScene();
			this._nodeHierarchy = nodeHierarchy;
			this._dvlSceneId = scene._getDvlSceneId();
			this._dvl = scene.getGraphicsCore()._getDvl();
			this._dvlClientId = scene.getGraphicsCore()._getDvlClientId();
			this._dvl.Client.attachNodeVisibilityChanged(this._handleNodeVisibilityChanged, this);
			this._dvl.Client.attachNodeSelectionChanged(this._handleNodeSelectionChanged, this);
			this._selectedNodes = new NodeSet();
			this._newlyVisibleNodes = [];
			this._newlyHiddenNodes = [];
			this._visibilityTimerId = null;
			this._selectionTimerId = null;
		},

		destroy: function() {
			log.debug("sap.ui.vk.ViewStateManager.destroy() called.");

			if (this._selectionTimerId) {
				jQuery.sap.clearDelayedCall(this._selectionTimerId);
				this._selectionTimerId = null;
			}
			if (this._visibilityTimerId) {
				jQuery.sap.clearDelayedCall(this._visibilityTimerId);
				this._visibilityTimerId = null;
			}
			this._newlyHiddenNodes = null;
			this._newlyVisibleNodes = null;
			this._selectedNodes = null;
			if (this._dvl) {
				this._dvl.Client.detachNodeSelectionChanged(this._handleNodeSelectionChanged, this);
				this._dvl.Client.detachNodeVisibilityChanged(this._handleNodeVisibilityChanged, this);
			}
			this._dvlClientId = null;
			this._dvlSceneId = null;
			this._dvl = null;
			this._scene = null;

			ManagedObject.prototype.destroy.apply(this);
		},

		/**
		 * Gets the NodeHierarchy object associated with this ViewStateManager object.
		 * @returns {sap.ui.vk.NodeHierarchy} The node hierarchy associated with this ViewStateManager object.
		 * @public
		 */
		getNodeHierarchy: function() {
			return this._nodeHierarchy;
		},

		/**
		 * Gets the visibility state of nodes.
		 *
		 * If a single node ID is passed to the method then a single visibility state is returned.<br/>
		 * If an array of node IDs is passed to the method then an array of visibility states is returned.
		 *
		 * @param {string|string[]} nodeIds The node ID or the array of node IDs.
		 * @return {boolean|boolean[]} A single value or an array of values where the value is <code>true</code> if the node is visible, <code>false</code> otherwise.
		 * @public
		 */
		getVisibilityState: function(nodeIds) {
			if (Array.isArray(nodeIds)) {
				return nodeIds.map(function(nodeId) {
					return (this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, nodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_FLAGS).Flags & sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_VISIBLE) !== 0;
				}.bind(this));
			} else {
				var nodeId = nodeIds; // The nodeIds argument is a single nodeId.
				return (this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, nodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_FLAGS).Flags & sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_VISIBLE) !== 0;
			}
		},

		/**
		 * Sets the visibility state of the nodes.
		 * @param {string|string[]} nodeIds The node ID or the array of node IDs.
		 * @param {boolean} visible The new visibility state of the nodes.
		 * @param {boolean} recursive The flags indicates if the change needs to propagate recursively to child nodes.
		 * @return {sap.ui.vk.ViewStateManager} <code>this</code> to allow method chaining.
		 * @public
		 */
		setVisibilityState: function(nodeIds, visible, recursive) {
			if (!Array.isArray(nodeIds)) {
				nodeIds = [nodeIds];
			}

			var changed = jQuery.sap.unique((recursive ? this._collectNodesRecursively(nodeIds) : nodeIds)).filter(function(nodeId) {
				var isCurrentlyVisible = (sap.ui.vk.dvl.getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, nodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_FLAGS)).Flags & sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_VISIBLE) !== 0;
				return isCurrentlyVisible !== visible;
			}.bind(this));

			if (changed.length > 0) {
				changed.forEach(function(nodeId){
					this._dvl.Scene.ChangeNodeFlags(this._dvlSceneId, nodeId, sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_VISIBLE,
						visible ? sap.ve.dvl.DVLFLAGOPERATION.DVLFLAGOP_SET : sap.ve.dvl.DVLFLAGOPERATION.DVLFLAGOP_CLEAR);
				}.bind(this));

				this.fireVisibilityChanged({ visible: visible ? changed : [], hidden: visible ? [] : changed });
			}

			return this;
		},

		_handleNodeVisibilityChanged: function(parameters) {
			if (parameters.clientId === this._dvlClientId && parameters.sceneId === this._dvlSceneId) {
				this[parameters.visible ? "_newlyVisibleNodes" : "_newlyHiddenNodes"].push(parameters.nodeId);
				if (!this._visibilityTimerId) {
					this._visibilityTimerId = jQuery.sap.delayedCall(0, this, function() {
						this._visibilityTimerId = null;
						this.fireVisibilityChanged({
							visible: this._newlyVisibleNodes.splice(0, this._newlyVisibleNodes.length),
							hidden: this._newlyHiddenNodes.splice(0, this._newlyHiddenNodes.length)
						});
					}.bind(this));
				}
			}
		},

		/**
		 * Enumerates IDs of the selected nodes.
		 *
		 * @param {function} callback A function to call when the selected nodes are enumerated. The function takes one parameter of type <code>string</code>.
		 * @returns {sap.ui.vk.ViewStateManager} <code>this</code> to allow method chaining.
		 * @public
		 */
		enumerateSelection: function(callback) {
			this._selectedNodes.forEach(callback);
			return this;
		},

		/**
		 * Gets the selection state of the node.
		 *
		 * If a single node ID is passed to the method then a single selection state is returned.<br/>
		 * If an array of node IDs is passed to the method then an array of selection states is returned.
		 *
		 * @param {string|string[]} nodeIds The node ID or the array of node IDs.
		 * @return {boolean|boolean[]} A single value or an array of values where the value is <code>true</code> if the node is selected, <code>false</code> otherwise.
		 * @public
		 */
		getSelectionState: function(nodeIds) {
			if (Array.isArray(nodeIds)) {
				return nodeIds.map(function(nodeId) {
					return (this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, nodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_FLAGS).Flags & sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_SELECTED) !== 0;
				}.bind(this));
			} else {
				var nodeId = nodeIds;  // The nodeIds argument is a single nodeId.
				return (this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, nodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_FLAGS).Flags & sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_SELECTED) !== 0;
			}
		},

		/**
		 * Sets the selection state of the nodes.
		 * @param {string|string[]} nodeIds The node ID or the array of node IDs.
		 * @param {boolean} selected The new selection state of the nodes.
		 * @param {boolean} recursive The flags indicates if the change needs to propagate recursively to child nodes.
		 * @return {sap.ui.vk.ViewStateManager} <code>this</code> to allow method chaining.
		 * @public
		 */
		setSelectionState: function(nodeIds, selected, recursive) {
			if (!Array.isArray(nodeIds)) {
				nodeIds = [nodeIds];
			}

			var changed = jQuery.sap.unique((recursive ? this._collectNodesRecursively(nodeIds) : nodeIds)).filter(function(nodeId) {
				var isCurrentlySelected = (sap.ui.vk.dvl.getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, nodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_FLAGS)).Flags & sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_SELECTED) !== 0;
				return isCurrentlySelected !== selected;
			}.bind(this));

			if (changed.length > 0) {
				var change = this._selectedNodes[selected ? "add" : "delete"].bind(this._selectedNodes);
				changed.forEach(function(nodeId){
					this._dvl.Scene.ChangeNodeFlags(this._dvlSceneId, nodeId, sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_SELECTED,
						selected ? sap.ve.dvl.DVLFLAGOPERATION.DVLFLAGOP_SET : sap.ve.dvl.DVLFLAGOPERATION.DVLFLAGOP_CLEAR);
					change(nodeId);
				}.bind(this));

				this.fireSelectionChanged({ selected: selected ? changed : [], unselected: selected ? [] : changed });
			}

			return this;
		},

		_handleNodeSelectionChanged: function(parameters) {
			if (parameters.clientId === this._dvlClientId && parameters.sceneId === this._dvlSceneId) {
				if (!this._selectionTimerId) {
					this._selectionTimerId = jQuery.sap.delayedCall(0, this, function() {
						this._selectionTimerId = null;
						var currentlySelectedNodes = new NodeSet(this._dvl.Scene.RetrieveSceneInfo(this._dvlSceneId, sap.ve.dvl.DVLSCENEINFO.DVLSCENEINFO_SELECTED).SelectedNodes);
						var newlyUnselectedNodes = [];
						this._selectedNodes.forEach(function(nodeId) {
							if (!currentlySelectedNodes.has(nodeId)) {
								newlyUnselectedNodes.push(nodeId);
							}
						});
						var newlySelectedNodes = [];
						currentlySelectedNodes.forEach(function(nodeId) {
							if (!this._selectedNodes.has(nodeId)) {
								newlySelectedNodes.push(nodeId);
							}
						}.bind(this));

						this._selectedNodes = currentlySelectedNodes;

						this.fireSelectionChanged({ selected: newlySelectedNodes, unselected: newlyUnselectedNodes });
					});
				}
			}
		},

		_collectNodesRecursively: function(nodeIds) {
			var result = [];
			var collectChildNodes = function(node) {
				var nodeId = typeof node === "string" ? node : node.getNodeId();
				result.push(nodeId);
				if ((sap.ui.vk.dvl.getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, nodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_FLAGS)).Flags & sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_CLOSED) === 0) {
					this._nodeHierarchy.enumerateChildren(nodeId, collectChildNodes);
				}
			}.bind(this);
			nodeIds.forEach(collectChildNodes);
			return result;
		}
	});

	NodeSet = function(array) {
		array = array || [];
		if (this._builtin) {
			if (sap.ui.Device.browser.msie) {
				this._set = new Set();
				array.forEach(this._set.add.bind(this._set));
			} else {
				this._set = new Set(array);
			}
		} else {
			this._set = array.slice();
		}
	};

	NodeSet.prototype = {
		constructor: NodeSet,

		_builtin: !!Set,

		add: function(value) {
			if (this._builtin) {
				this._set.add(value);
			} else {
				if (this._set.indexOf() < 0) {
					this._set.push(value);
				}
			}
			return this;
		},

		delete: function(value) {
			if (this._builtin) {
				return this._set.delete(value);
			} else {
				var index = this._set.indexOf(value);
				if (index >= 0) {
					this.splice(index, 1);
					return true;
				} else {
					return false;
				}
			}
		},

		clear: function() {
			if (this._builtin) {
				this._set.clear();
			} else {
				this._set.splice(0, this._set.length);
			}
		},

		has: function(value) {
			if (this._builtin) {
				return this._set.has(value);
			} else {
				return this._set.indexOf(value) >= 0;
			}
		},

		forEach: function(callback, thisArg) {
			this._set.forEach(callback, thisArg);
		}
	};

	return ViewStateManager;
});

}; // end of sap/ui/vk/ViewStateManager.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.Viewport') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.Viewport.
jQuery.sap.declare('sap.ui.vk.Viewport'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/Viewport",[
	"jquery.sap.global", "./library", "sap/ui/core/Control", "sap/ui/core/ResizeHandler", "./Loco", "./ViewportHandler"
], function(jQuery, library, Control, ResizeHandler, Loco, ViewportHandler) {
	"use strict";

	/**
	 * Creates a new Viewport control.
	 *
	 * @class
	 * This control provides a rendering canvas for the 3D elements of a loaded scene.
	 *
	 * @param {string} [sId] ID for the new Viewport control. Generated automatically if no ID is given.
	 * @param {object} [mSettings] Initial settings for the new Viewport control.
	 * @public
	 * @author SAP SE
	 * @version 1.32.3
	 * @extends sap.ui.core.Control
	 * @alias sap.ui.vk.Viewport
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var Viewport = Control.extend("sap.ui.vk.Viewport", /** @lends sap.ui.vk.Viewport.prototype */ {
		metadata: {
			library: "sap.ui.vk",
			publicMethods: [
				"setGraphicsCore",
				"getGraphicsCore",
				"setScene",
				"setViewStateManager",
				"beginGesture",
				"endGesture",
				"pan",
				"rotate",
				"zoom",
				"tap",
				"queueCommand"
			]
		},

		init: function() {
			if (Control.prototype.init) {
				Control.prototype.init(this);
			}

			this._graphicsCore = null;
			this._dvl = null;
			this._dvlRendererId = null;
			this._canvas = null;
			this._resizeListenerId = null;

			this._viewportHandler = new ViewportHandler(this);
			this._loco = new Loco();
			this._loco.addHandler(this._viewportHandler);
		},

		exit: function() {
			this._loco.removeHandler(this._viewportHandler);
			this._viewportHandler.destroy();

			if (this._resizeListenerId) {
				ResizeHandler.deregister(this._resizeListenerId);
				this._resizeListenerId = null;
			}

			this.setViewStateManager(null);
			this.setScene(null);
			this.setGraphicsCore(null);

			if (Control.prototype.exit) {
				Control.prototype.exit.apply(this);
			}
		},

		/**
		 * Attaches or detaches the Viewport to the {@link sap.ui.vk.GraphicsCore GraphicsCore} object.
		 *
		 * @param {sap.ui.vk.GraphicsCore} graphicsCore The {@link sap.ui.vk.GraphicsCore GraphicsCore} object or <code>null</code>.
		 * If the <code>graphicsCore</code> parameter is not <code>null</code>, a rendering object corresponding to the Viewport is created.
		 * If the <code>graphicsCore</code> parameter is <code>null</code>, the rendering object corresponding to the Viewport is destroyed.
		 * @returns {sap.ui.vk.Viewport} <code>this</code> to allow method chaining.
		 * @public
		 */
		setGraphicsCore: function(graphicsCore) {
			if (graphicsCore != this._graphicsCore) {
				if (graphicsCore && this._graphicsCore && this._graphicsCore._getViewportCount() > 0) {
					throw new Error("Only one viewport instance is supported in the current implementation. This will change in future releases.");
				}

				if (this._graphicsCore) {
					if (this._graphicsCore._unregisterViewport(this)) {
						if (this._graphicsCore._getViewportCount() === 0) {
							this._dvl.Core.StopRenderLoop();
						}
					}
				}

				if (this._dvlRendererId) {
					this._dvl.Core.DoneRenderer();
					this._dvlRendererId = null;
				}

				this._dvl = null;

				this._graphicsCore = graphicsCore;

				if (this._graphicsCore) {
					var shouldStartRenderLoop = this._graphicsCore._getViewportCount() === 0;
					this._dvl = this._graphicsCore._getDvl();
					this._dvl.Core.InitRenderer();
					this._dvlRendererId = this._dvl.Core.GetRendererPtr();
					this._dvl.Renderer.SetBackgroundColor(0, 0, 0, 0, 0, 0, 0, 0);
					this._setCanvas(this._graphicsCore._getCanvas());
					this._graphicsCore._registerViewport(this);
					if (shouldStartRenderLoop) {
						this._dvl.Core.StartRenderLoop();
					}
				}
			}
			return this;
		},

		/**
		 * Gets the {@link sap.ui.vk.GraphicsCore GraphicsCore} object the Viewport is attached to.
		 * @returns {sap.ui.vk.GraphicsCore} The {@link sap.ui.vk.GraphicsCore GraphicsCore} object the Viewport is attached to, or <code>null</code>.
		 * @public
		 */
		getGraphicsCore: function() {
			return this._graphicsCore;
		},

		/**
		 * Sets the {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement HTMLCanvasElement} element for rendering 3D content.
		 * @param {HTMLCanvasElement} canvas The {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement HTMLCanvasElement} element.
		 * @returns {sap.ui.vk.Viewport} <code>this</code> to allow method chaining.
		 * @private
		 */
		_setCanvas: function(canvas) {
			// Invalidate the viewport only when it is already rendered.
			var shouldInvalidate = this.getDomRef() && this._canvas !== canvas;
			this._canvas = canvas;
			if (shouldInvalidate) {
				this.invalidate();
			}
			return this;
		},

		/**
		 * Attaches the scene to the Viewport for rendering.
		 * @param {sap.ui.vk.Scene} scene The scene to attach to the Viewport.
		 * @returns {sap.ui.vk.Viewport} <code>this</code> to allow method chaining.
		 * @public
		 */
		setScene: function(scene) {
			if (this._dvlRendererId) {
				this._dvl.Renderer.AttachScene(scene && scene._getDvlSceneId() || null);
			}
			return this;
		},

		onBeforeRendering: function() {
			if (this._resizeListenerId) {
				ResizeHandler.deregister(this._resizeListenerId);
				this._resizeListenerId = null;
			}
		},

		onAfterRendering: function() {
			if (this._canvas) {
				var domRef = this.getDomRef();
				domRef.appendChild(this._canvas);
				this._resizeListenerId = ResizeHandler.register(this, this._handleResize.bind(this));
				this._handleResize({ size: { width: domRef.clientWidth, height: domRef.clientHeight } } );
			}
		},

		/**
		 * Handles the resize events from the {@link sap.ui.core.ResizeHandler ResizeHandler} object.
		 * @param {jQuery.Event} event The event object.
		 * @private
		 */
		_handleResize: function(event) {
			if (this._dvlRendererId && this._canvas) {
				var devicePixelRatio    = window.devicePixelRatio || 1;
				var drawingBufferWidth  = event.size.width  * devicePixelRatio;
				var drawingBufferHeight = event.size.height * devicePixelRatio;

				this._dvl.Renderer.SetDimensions(drawingBufferWidth, drawingBufferHeight);
				this._dvl.Renderer.SetOptionF(sap.ve.dvl.DVLRENDEROPTIONF.DVLRENDEROPTIONF_DPI, 96 * devicePixelRatio);
				this._canvas.width = drawingBufferWidth;
				this._canvas.height = drawingBufferHeight;
				this._canvas.style.width = event.size.width + "px";
				this._canvas.style.height = event.size.height + "px";
				
				return true;
			}
		},

		/**
		 * @param viewStateManager
		 * @returns {sap.ui.vk.Viewport} this
		 * @public
		 */
		setViewStateManager: function(viewStateManager) {
			this._viewStateManager = viewStateManager;
			return this;
		},

		////////////////////////////////////////////////////////////////////////
		// 3D Rendering handling begins.

		/**
		 * @experimental
		 */
		shouldRenderFrame: function() {
			return this._dvlRendererId && this._dvl.Renderer.ShouldRenderFrame();
		},

		/**
		 * @experimental
		 */
		renderFrame: function() {
			if (this._dvlRendererId) {
				this._dvl.Renderer.RenderFrame(this._dvlRendererId);
			}
			return this;
		},

		/**
		 * @experimental
		 */
		renderFrameEx: function(viewMatrix, projectionMatrix) {
			if (this._dvlRendererId) {
				this._dvl.Renderer.RenderFrameEx.apply(this, [].concat(viewMatrix, projectionMatrix), this._dvlRendererId);
			}
			return this;
		},

		/**
		 * @experimental
		 */
		setOption: function(option, enable) {
			if (this._dvlRendererId) {
				this._dvl.Renderer.SetOption(option, enable, this._dvlRendererId);
			}
			return this;
		},

		/**
		 * @experimental
		 */
		getOption: function(option) {
			return this._dvlRendererId && this._dvl.Renderer.GetOption(option, this._dvlRendererId);
		},

		/**
		 * @experimental
		 */
		setOptionF: function(option, value) {
			if (this._dvlRendererId) {
				this._dvl.Renderer.SetOptionF(option, value, this._dvlRendererId);
			}
			return this;
		},

		/**
		 * @experimental
		 */
		getOptionF: function(option) {
			if (this._dvlRendererId) {
				return this._dvl.Renderer.GetOptionF(option, this._dvlRendererId);
			} else {
				return 0;
			}
		},

		/**
		 * @experimental
		 */
		resetView: function() {
			if (this._dvlRendererId) {
				this._dvl.Renderer.ResetView(this._dvlRendererId);
			}
			return this;
		},

		/**
		 * @experimental
		 */
		canIsolateNode: function(nodeId) {
			if (this._dvlRendererId) {
				return this._dvl.Renderer.CanIsolateNode(nodeId, this._dvlRendererId);
			} else {
				return false;
			}
		},

		/**
		 * @experimental
		 */
		setIsolatedNode: function(nodeId) {
			if (this._dvlRendererId) {
				this._dvl.Renderer.SetIsolatedNode(nodeId, this._dvlRendererId);
			}
			return this;
		},

		/**
		 * @experimental
		 */
		getIsolatedNode: function() {
			if (this._dvlRendererId) {
				return this._dvl.Renderer.GetIsolatedNode(this._dvlRendererId);
			} else {
				return "i0000000000000000";
			}
		},

		/**
		 * @experimental
		 */
		zoomTo: function(what, nodeId, crossFadeInSeconds) {
			if (this._dvlRendererId) {
				this._dvl.Renderer.ZoomTo(what, nodeId, crossFadeInSeconds, this._dvlRendererId);
			}
		},

		// 3D Rendering handling ends.
		////////////////////////////////////////////////////////////////////////

		////////////////////////////////////////////////////////////////////////
		// Gesture handling ends.

		/**
		 * Marks the start of the current gesture operation.
		 * 
		 * @param {int} x The x-coordinate of the gesture.
		 * @param {int} y The y-coordinate of the gesture.
		 * @returns {sap.ui.vk.Viewport} this
		 * @public
		 */
		beginGesture: function(x, y) {
			if (this._dvlRendererId) {
				var pixelRatio = window.devicePixelRatio || 1;
				this._dvl.Renderer.BeginGesture(x * pixelRatio, y * pixelRatio, this._dvlRendererId);
			}
			return this;
		},

		/**
		 * Marks the end of the current gesture operation.
		 * 
		 * @returns {sap.ui.vk.Viewport} this
		 * @public
		 */
		endGesture: function() {
			if (this._dvlRendererId) {
				this._dvl.Renderer.EndGesture(this._dvlRendererId);
			}
			return this;
		},

		/**
		 * Performs a <code>pan</code> gesture to pan across the Viewport.
		 * 
		 * @param {int} dx The change in distance along the x-coordinate.
		 * @param {int} dy The change in distance along the y-coordinate.
		 * @returns {sap.ui.vk.Viewport} this
		 * @public
		 */
		pan: function(dx, dy) {
			if (this._dvlRendererId) {
				var pixelRatio = window.devicePixelRatio || 1;
				this._dvl.Renderer.Pan(dx * pixelRatio, dy * pixelRatio, this._dvlRendererId);
			}
			return this;
		},

		/**
		 * Rotates the content resource displayed on the Viewport.
		 * 
		 * @param {int} dx The change in x-coordinate used to define the desired rotation.
		 * @param {int} dy The change in y-coordinate used to define the desired rotation.
		 * @returns {sap.ui.vk.Viewport} this
		 * @public
		 */
		rotate: function(dx, dy) {
			if (this._dvlRendererId) {
				var pixelRatio = window.devicePixelRatio || 1;
				this._dvl.Renderer.Rotate(dx * pixelRatio, dy * pixelRatio, this._dvlRendererId);
			}
			return this;
		},

		/**
		 * Performs a <code>zoom</code> gesture to zoom in or out on the beginGesture coordinate.
		 * @param {double} dy Zoom factor. A scale factor that specifies how much to zoom in or out by.
		 * @returns {sap.ui.vk.Viewport} this
		 * @public
		 */
		zoom: function(dy) {
			if (this._dvlRendererId) {
				this._dvl.Renderer.Zoom(dy, this._dvlRendererId);
			}
			return this;
		},

		/**
		 * Executes a click or tap gesture.
		 * 
		 * @param {int} x The tap gesture's x-coordinate.
		 * @param {int} y The tap gesture's y-coordinate.
		 * @param {boolean} isDoubleClick Indicates whether the tap gesture should be interpreted as a double-click. A value of <code>true</code> indicates a double-click gesture, and <code>false</code> indicates a single click gesture.
		 * @returns {sap.ui.vk.Viewport} this
		 * @public
		 */
		tap: function(x, y, isDoubleClick) {
			if (this._dvlRendererId) {
				var pixelRatio = window.devicePixelRatio || 1;
				this._dvl.Renderer.Tap(x * pixelRatio, y * pixelRatio, isDoubleClick, this._dvlRendererId);
			}
			return this;
		},

		/**
		 * Queues a command for execution during the rendering cycle. All gesture operations should be called using this method.
		 * 
		 * @param {function} command The command to be executed.
		 * @returns {sap.ui.vk.Viewport} this
		 * @public
		 */
		queueCommand: function(command) {
			if (this._dvlRendererId) {
				this._dvl.Renderer._queueCommand(command, this._dvlRendererId);
			}
			return this;
		}

		// Gesture handling ends.
		////////////////////////////////////////////////////////////////////////
	});

	return Viewport;
});

}; // end of sap/ui/vk/Viewport.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.NodeHierarchy') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides the NodeHierarchy class.
jQuery.sap.declare('sap.ui.vk.NodeHierarchy'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.ObjectPool'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/NodeHierarchy",[
	"jquery.sap.global", "./library", "sap/ui/base/EventProvider", "sap/ui/base/ObjectPool", "./BaseNodeProxy", "./NodeProxy"
], function(jQuery, library, EventProvider, ObjectPool, BaseNodeProxy, NodeProxy) {
	"use strict";

	var getJSONObject = sap.ui.vk.dvl.getJSONObject;

	/**
	 * Creates a new NodeHierarchy object.
	 *
	 * @class
	 * Provides the ability to explore a Scene object's node structure.
	 *
	 * The objects of this class should not be created directly, and should only be created via a call to {@link sap.ui.vk.Scene#getDefaultNodeHierarchy sap.ui.vk.Scene#getDefaultNodeHierarchy}.
	 *
	 * @param {sap.ui.vk.Scene} scene The Scene object the node hierarchy belongs to.
	 * @public
	 * @author SAP SE
	 * @version 1.32.3
	 * @extends sap.ui.base.EventProvider
	 * @alias sap.ui.vk.NodeHierarchy
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var NodeHierarchy = EventProvider.extend("sap.ui.vk.NodeHierarchy", /** @lends sap.ui.vk.NodeHierarchy.prototype */ {
		metadata: {
			publicMethods: [
				"createNodeProxy",
				"destroyNodeProxy",
				"enumerateAncestors",
				"enumerateChildren",
				"getGraphicsCore",
				"getScene"
			]
		},

		_baseNodeProxyPool: new ObjectPool(BaseNodeProxy),

		constructor: function(scene) {
			EventProvider.apply(this);

			this._graphicsCore = scene.getGraphicsCore();
			this._scene = scene;
			this._dvlSceneId = this._scene._getDvlSceneId();
			this._dvl = this._graphicsCore._getDvl();
			this._nodeProxies = [];
		},

		destroy: function() {
			this._nodeProxies.slice().forEach(this.destroyNodeProxy.bind(this));
			this._dvl = null;
			this._dvlSceneId = null;
			this._scene = null;
			this._graphicsCore = null;

			EventProvider.prototype.destroy.apply(this);
		},

		/**
		 * Gets the GraphicsCore object this Scene object belongs to.
		 * @returns {sap.ui.vk.GraphicsCore} The GraphicsCore object this Scene object belongs to.
		 * @public
		 */
		getGraphicsCore: function() {
			return this._graphicsCore;
		},

		/**
		 * Gets the Scene object the node hierarchy belongs to.
		 * @returns {sap.ui.vk.Scene} The Scene object the node hierarchy belongs to.
		 * @public
		 */
		getScene: function() {
			return this._scene;
		},

		/**
		 * Gets the DVL scene ID.
		 * @returns {string} The DVL scene ID.
		 * @private
		 */
		_getDvlSceneId: function() {
			return this._dvlSceneId;
		},

		/**
		 * Enumerates the child nodes in the node hierarchy of the Scene object.
		 *
		 * The method enumerates the child nodes and calls <code>callback</code> passing the child nodes one by one.<br/>
		 * The BaseNodeProxy objects passed to <code>callback</code> are temporary objects, which are reset after each call to <code>callback</code>.<br/>
		 *
		 * @param {string} [nodeId] The ID of a node.<br/>
		 * When <code>nodeId</code> is specified, the child nodes of this node are enumerated.<br/>
		 * When no <code>nodeId</code> is specified, only the top level nodes are enumerated.<br/>
		 * @param {function} callback A function to call when the child nodes are enumerated. The function takes one parameter of type {@link sap.ui.vk.BaseNodeProxy}.
		 * @param {boolean} [stepIntoClosedNode=false] Indicates whether to enumerate child nodes of a <i>closed</i> node.
		 * @returns {sap.ui.vk.NodeHierarchy} <code>this</code> to allow method chaining.
		 * @public
		 */
		enumerateChildren: function(nodeId, callback, stepIntoClosedNode) {
			if (typeof nodeId === "function") {
				// The 'nodeId' parameter is omitted, let's shift the parameters to right.
				stepIntoClosedNode = callback;
				callback = nodeId;
				nodeId = undefined;
			}

			// NB: At the moment DVL scenes support only one hierarchy, so we just enumerate top level nodes of the scene if nodeId is omitted.
			var nodeIds;
			if (nodeId) {
				// Child nodes of the node.
				if (stepIntoClosedNode || (getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, nodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_FLAGS)).Flags & sap.ve.dvl.DVLNODEFLAG.DVLNODEFLAG_CLOSED) === 0) {
					nodeIds = getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, nodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_CHILDREN)).ChildNodes;
				} else {
					// Do not step into closed nodes.
					nodeIds = [];
				}
			} else {
				// Top level nodes.
				nodeIds = getJSONObject(this._dvl.Scene.RetrieveSceneInfo(this._dvlSceneId, sap.ve.dvl.DVLSCENEINFO.DVLSCENEINFO_CHILDREN)).ChildNodes;
			}

			var nodeProxy = this._baseNodeProxyPool.borrowObject();
			try {
				nodeIds.forEach(function(nodeId) {
					nodeProxy.init(this, nodeId);
					callback(nodeProxy);
					nodeProxy.reset();
				}.bind(this));
			} finally {
				this._baseNodeProxyPool.returnObject(nodeProxy);
			}

			return this;
		},

		/**
		 * Enumerates ancestors of the node.
		 *
		 * The method enumerates the ancestor nodes and calls <code>callback</code> passing the ancestor nodes one by one.<br/>
		 * The BaseNodeProxy objects passed to <code>callback</code> are temporary objects, they are reset after each call to <code>callback</code>.<br/>
		 * The ancestor nodes are enumerated from the top level node down the node hierarchy.
		 *
		 * @param {string} nodeId The ID of the node.
		 * @param {function} callback A function to call when the ancestor nodes are enumerated. The function takes one parameter of type {@link sap.ui.vk.BaseNodeProxy}.
		 * @returns {sap.ui.vk.NodeHierarchy} <code>this</code> to allow method chaining.
		 * @public
		 */
		enumerateAncestors: function(nodeId, callback) {
			var nodeIds = getJSONObject(this._dvl.Scene.RetrieveNodeInfo(this._dvlSceneId, nodeId, sap.ve.dvl.DVLNODEINFO.DVLNODEINFO_PARENTS)).ParentNodes;

			var nodeProxy = this._baseNodeProxyPool.borrowObject();
			try {
				nodeIds.forEach(function(nodeId) {
					nodeProxy.init(this, nodeId);
					callback(nodeProxy);
					nodeProxy.reset();
				}.bind(this));
			} finally {
				this._baseNodeProxyPool.returnObject(nodeProxy);
			}

			return this;
		},

		/**
		 * Creates a node proxy object.
		 *
		 * The node proxy object must be destroyed with the {@link #destroyNodeProxy destroyNodeProxy} method.
		 *
		 * @param {string} nodeId The node ID for which to create a proxy object.
		 * @returns {sap.ui.vk.NodeProxy} The proxy object.
		 * @public
		 */
		createNodeProxy: function(nodeId) {
			var nodeProxy = new NodeProxy(this, nodeId);
			this._nodeProxies.push(nodeProxy);
			return nodeProxy;
		},

		/**
		 * Destroys the node proxy object.
		 *
		 * @param {sap.ui.vk.NodeProxy} nodeProxy The node proxy object.
		 * @returns {sap.ui.vk.NodeHierarchy} <code>this</code> to allow method chaining.
		 * @public
		 */
		destroyNodeProxy: function(nodeProxy) {
			var index = this._nodeProxies.indexOf(nodeProxy);
			if (index >= 0) {
				this._nodeProxies.splice(index, 1)[0].destroy();
			}
			return this;
		}
	});

	return NodeHierarchy;
});

}; // end of sap/ui/vk/NodeHierarchy.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.Scene') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides the Scene class.
jQuery.sap.declare('sap.ui.vk.Scene'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/Scene",[
	"jquery.sap.global", "./library", "sap/ui/base/EventProvider", "./NodeHierarchy"
], function(jQuery, library, EventProvider, NodeHierarchy) {
	"use strict";

	var log = jQuery.sap.log;

	/**
	 * Creates a new Scene object.
	 *
	 * @class Scene class.
	 * Provides the interface for the 3D model.
	 *
	 * The objects of this class should not be created directly. They should be created via call to {@link sap.ui.vk.GraphicsCore#buildSceneTree sap.ui.vk.GraphicsCore.buildSceneTree}.
	 *
	 * @param {sap.ui.vk.GraphicsCore} graphicsCore The GraphicsCore object the scene belongs to.
	 * @param {string} dvlSceneId The identifier of the DVL scene object.
	 * @public
	 * @author SAP SE
	 * @version 1.32.3
	 * @extends sap.ui.base.EventProvider
	 * @alias sap.ui.vk.Scene
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var Scene = EventProvider.extend("sap.ui.vk.Scene", /** @lends sap.ui.vk.Scene.prototype */ {
		metadata: {
			publicMethods: [
				"getId",
				"getGraphicsCore",
				"getDefaultNodeHierarchy"
			]
		},

		constructor: function(graphicsCore, dvlSceneId) {
			log.debug("sap.ui.vk.Scene.constructor() called.");

			EventProvider.apply(this);

			this._id = jQuery.sap.uid();
			this._graphicsCore = graphicsCore;
			this._dvlSceneId = dvlSceneId;
			this._defaultNodeHierarchy = null;
		},

		destroy: function() {
			log.debug("sap.ui.vk.Scene.destroy() called.");

			if (this._defaultNodeHierarchy) {
				this._defaultNodeHierarchy.destroy();
				this._defaultNodeHierarchy = null;
			}
			this._dvlSceneId = null;
			this._graphicsCore = null;

			EventProvider.prototype.destroy.apply(this);
		},

		/**
		 * Gets the unique ID of the Scene object.
		 * @returns {string} The unique ID of the Scene object.
		 * @public
		 */
		getId: function() {
			return this._id;
		},

		/**
		 * Gets the GraphicsCore object this Scene object belongs to.
		 * @returns {sap.ui.vk.GraphicsCore} The GraphicsCore object this Scene object belongs to.
		 * @public
		 */
		getGraphicsCore: function() {
			return this._graphicsCore;
		},

		/**
		 * Gets the default node hierarchy in the Scene object.
		 * @returns {sap.ui.vk.NodeHierarchy} The default node hierarchy in the Scene object.
		 * @public
		 */
		getDefaultNodeHierarchy: function() {
			if (!this._defaultNodeHierarchy) {
				this._defaultNodeHierarchy = new NodeHierarchy(this);
			}
			return this._defaultNodeHierarchy;
		},

		/**
		 * Gets the DVL scene ID.
		 * @returns {string} The DVL scene ID.
		 * @private
		 */
		_getDvlSceneId: function() {
			return this._dvlSceneId;
		}
	});

	return Scene;
});

}; // end of sap/ui/vk/Scene.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.Viewer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */

// Provides control sap.ui.vk.Viewer.
jQuery.sap.declare('sap.ui.vk.Viewer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.Splitter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.SplitterLayoutData'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/Viewer",[
	"jquery.sap.global", "./library", "sap/ui/core/Control", "./Scene", "./Viewport", "./ContentResource", "./NativeViewport",
	"./Overlay", "./SceneTree", "sap/ui/layout/Splitter", "sap/ui/layout/SplitterLayoutData", "./FlexibleControl", "./FlexibleControlLayoutData", "./StepNavigation", "./Toolbar", "sap/ui/core/ResizeHandler"
], function(jQuery, library, Control, Scene, Viewport, ContentResource, NativeViewport, Overlay, SceneTree, Splitter, SplitterLayoutData, FlexibleControl, FlexibleControlLayoutData, StepNavigation, VkToolbar, ResizeHandler) {
	"use strict";

	var log = jQuery.sap.log;

	/**
	 * Creates a new instance of the Viewer control.
	 *
	 * Besides the settings documented below, Viewer itself supports the following special settings:
	 * <ul>
	 *   <li>
	 *     <code>runtimeSettings</code>: <i><code>object</code></i> Optional Emscripten runtime module settings. A JSON object with the following properties:
	 *     <ul>
	 *       <li><code>totalMemory</code>: <i><code>int</code></i> (default: 128 * 1024 * 1024) size of Emscripten module memory in bytes.</li>
	 *       <li><code>logElementId</code>: <i><code>string</code></i> ID of a textarea DOM element to write the log to.</li>
	 *       <li><code>statusElementId</code>: <i><code>string</code></i> ID of a DOM element to write the status messages to.</li>
	 *     </ul>
	 *   </li>
	 *   <li>
	 *     <code>webGLContextAttributes</code>: <i><code>object</code></i> Optional WebGL context attributes. A JSON object with the following boolean properties:
	 *     <ul>
	 *       <li><code>antialias</code>: <i><code>boolean</code></i> (default: <code>true</code>) If set to <code>true</code>, the context will attempt to perform antialiased rendering if possible.</li>
	 *       <li><code>alpha</code>: <i><code>boolean</code></i> (default: <code>true</code>) If set to <code>true</code>, the context will have an alpha (transparency) channel.</li>
	 *       <li><code>premultipliedAlpha</code>: <i><code>boolean</code></i> (default: <code>false</code>) If set to <code>true</code>, the color channels in the framebuffer will be stored premultiplied by the alpha channel to improve performance.</li>
	 *     </ul>
	 *     Other {@link https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.2 WebGL context attributes} are also supported.
	 *   </li>
	 * </ul>
	 *
	 * @class
	 * This control is intended to help application developers include simple 3D visualization capability in their application by connecting,
	 * configuring and presenting the essential Visualization Toolkit controls a single composite control.
	 *
	 * @param {string} [sId] ID for the new Viewer control, generated automatically if no ID is given
	 * @param {object} [mSettings] initial settings for the new Viewer control
	 * @public
	 * @author SAP SE
	 * @version 1.32.3
	 * @extends sap.ui.core.Control
	 * @alias sap.ui.vk.Viewer
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var Viewer = Control.extend("sap.ui.vk.Viewer", /** @lends sap.ui.vk.Viewer.prototype */ {
		metadata: {
			library: "sap.ui.vk",

			properties: {
				/**
				 * Enables or disables the Overlay control
				 */
				enableOverlay : {
					type:  "boolean",
					defaultValue: false
				},
				/**
				 * Disables the scene tree control Button on the menu
				 */
				enableSceneTree : {
					type:  "boolean",
					defaultValue: false
				},
				/**
				 * Shows or hides the scene tree control
				 */				
				showSceneTree: {
					type: "boolean",
					defaultValue: false
				},
				/**
				 * Disables the Step Navigation Control Button on the menu
				 */
				enableStepNavigation : {
					type:  "boolean",
					defaultValue: false
				},
				/**
				 * Shows or hides the Step Navigation Control
				 */
				showStepNavigation : {
					type:  "boolean",
					defaultValue: false
				},
				/**
				 * Shows or hides Toolbar control
				 */
				enableToolbar : {
					type:  "boolean",
					defaultValue: true
				},
				/**
				 * Enable / disable full screen mode
				 */
				enableFullScreen : {
					type:  "boolean",
					defaultValue: false
				},
				/**
				 * Shows or hides Toolbar control
				 */
				width : {
					type:  "sap.ui.core.CSSSize",
					defaultValue: "auto"
				},
				/**
				 * Shows or hides Toolbar control
				 */
				height : {
					type:  "sap.ui.core.CSSSize",
					defaultValue: "auto"
				},
				/**
				 * Sets the title of the toolbar
				 */
				toolbarTitle : {
					type:  "string",
					defaultValue: ""
				}
			},

			publicMethods: [
				"getGraphicsCore",
				"getNativeViewport",
				"getScene",
				"getViewport",
				"getViewStateManager"
			],

			aggregations: {
				/**
				 * Content resources to load and display in the Viewer control.
				 */
				contentResources: {
					type: "sap.ui.vk.ContentResource"
				},

				toolbar: {
					type: "sap.ui.vk.Toolbar",
					multiple: false,
					visibility: "hidden"
				},

				viewport: {
					type: "sap.ui.vk.Viewport",
					multiple: false,
					visibility: "hidden"
				},

				nativeViewport: {
					type: "sap.ui.vk.NativeViewport",
					multiple: false,
					visibility: "hidden"
				},

				stepNavigation: {
					type: "sap.ui.vk.StepNavigation",
					multiple: false,
					visibility: "hidden"
				},

				hotspotOverlay: {
					type: "sap.ui.vk.Overlay",
					multiple: false,
					visibility: "hidden"
				},

				sceneTree: {
					type: "sap.ui.vk.SceneTree",
					multiple: false,
					visibility: "visible"
				},

				_layout: {
					type: "sap.ui.vk.FlexibleControl",
					multiple: false,
					visibility: "true"
				},

				viewStateManager: {
					type: "sap.ui.vk.ViewStateManager",
					multiple: false,
					visibility: "hidden"
				}
			},

			events: {
				/**
				 * This event will be fired when a Scene has been loaded into the Viewer.
				 */
				sceneLoadingSucceeded: {
					parameters: {
						/**
						 * Returns a reference to the loaded Scene.
						 */
						scene: { type: "sap.ui.vk.Scene" }
					}
				},

				/**
				 * This event will be fired when a critical error occurs during scene loading.
				 */
				sceneLoadingFailed: {},

				/**
				 * This event will be fired when Scene loaded in Viewer is about to be destroyed.
				 */
				sceneDestroying: {
					parameters: {
						/**
						 * Returns a reference to the scene to be destroyed.
						 */
						scene: { type: "sap.ui.vk.Scene" }
					}
				},

				/**
				 * This event will be fired when the Viewer successfully loads a image.
				 */
				imageLoadingSucceeded: {},

				/**
				 * This event will be fired when a critical error occurs while loading an image into the Viewer.
				 */
				imageLoadingFailed: {},

				/**
				 * This event is fired when the nodes are selected/unselected.
				 */
				selectionChanged: {
					parameters: {
						/**
						 * IDs of newly selected nodes.
						 */
						selected: { type: "string[]" },
						/**
						 * IDs of newly unselected nodes.
						 */
						unselected: { type: "string[]" }
					}
				},
				
				/**
				 * This event is fired when viewer enters/exits full screen mode.
				 */
				fullScreen: {
					parameters: {
						/**
						 * true: entered full screen;
						 * false: exited full screen.
						 */
						isFullScreen: { type: "boolean" }
					}
				}
			},

			specialSettings: {
				/**
				 * Optional Emscripten runtime module settings. A JSON object with the following properties:
				 * <ul>
				 *   <li>totalMemory {int} size of Emscripten module memory in bytes, default value: 128 MB.</li>
				 *   <li>logElementId {string} ID of a textarea DOM element to write the log to.</li>
				 *   <li>statusElementId {string} ID of a DOM element to write the status messages to.</li>
				 * </ul>
				 * Emscripten runtime module settings cannot be changed after the control is fully initialized.
				 */
				runtimeSettings: {
					type: "object"
				},

				/**
				 * Optional WebGL context attributes. A JSON object with the following boolean properties:
				 * <ul>
				 *   <li>antialias {boolean} default value <code>true</code>. If set to <code>true</code>, the context will attempt to perform antialiased rendering if possible.</li>
				 *   <li>alpha {boolean} default value <code>true</code>. If set to <code>true</code>, the context will have an alpha (transparency) channel.</li>
				 *   <li>premultipliedAlpha {boolean} default value <code>false</code>. If set to <code>true</code>, the color channels in the framebuffer will be stored premultiplied by the alpha channel to improve performance.</li>
				 * </ul>
				 * Other {@link https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.2 WebGL context attributes} are also supported.
				 * WebGL context attributes cannot be changed after the control is fully initialized.
				 */
				webGLContextAttributes: {
					type: "object"
				}
			}
		},

		applySettings: function(settings) {
			if (settings) {
				this._runtimeSettings = settings.runtimeSettings;
				this._webGLContextAttributes = settings.webGLContextAttributes;
				delete settings.runtimeSettings;
				delete settings.webGLContextAttributes;
			}
			return Control.prototype.applySettings.apply(this, arguments);
		},

		init: function() {
			log.debug("sap.ui.vk.Viewer.init() called.");

			if (Control.prototype.init) {
				Control.prototype.init.apply(this);
			}

			this.oResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.ui.vk.i18n");

			this.setTooltip(this.oResourceBundle.getText("VIEWER_TITLE"));
			this._resizeListenerId = null;
			this._shouldLoadContentResources = true;
			this._busyIndicatorCounter = 0;
			this._toolbar = null;
			this._viewport = null;
			this._nativeViewport = null;
			this._stepNavigation = null;
			this._hotspotOverlay = null;
			this._mainScene = null;
			this._sceneTree = null;

			this._updateSizeTimer = 0;
			this._fullScreenToggle = false;
			
			this._oldWidth = '100%';
			this._oldHeight = '100%';

			this._content = new Splitter(this.getId() + "-splitter", {
				orientation: "Horizontal"
			});

			this._stackedViewport = new FlexibleControl({
				width: "100%",
				height: "100%",
				layout: "Stacked"
			});

			this._layout = new FlexibleControl(this.getId() + "-flexibleControl", {
				width: "100%",
				height: "100%",
				layout: "Vertical"
			});
			
			this._stackedViewport.setLayoutData(new SplitterLayoutData({
				size: "100%",
				minSize: 160,
				resizable:true
			}));

			this._content.addContentArea(this._stackedViewport);
			this.setAggregation("_layout", this._layout);
		},

		/**
		 * Destroys the Viewer control. All scenes will be destroyed and all Viewports will be unregistered by the Graphics Core.
		 * @private
		 */
		exit: function() {
			log.debug("sap.ui.vk.Viewer.exit() called.");

			// All scenes will be destroyed and all viewports will be unregistered by GraphicsCore.destroy.
			if (this._sceneTree) {
				this._sceneTree.setScene(null);
			}

			if (this._stepNavigation) {
				this._stepNavigation.setScene(null);
			}

			this._toolbar = null;
			this._sceneTree = null;
			this._mainScene = null;
			this._nativeViewport = null;
			this._stepNavigation = null;
			this._viewport = null;

			this._setViewStateManager(null);

			if (this._graphicsCore) {
				this._graphicsCore.destroy();
				this._graphicsCore = null;
			}

			if (this._resizeListenerId) {
				ResizeHandler.deregister(this._resizeListenerId);
				this._resizeListenerId = null;
			}

			if (Control.prototype.exit) {
				Control.prototype.exit.apply(this);
			}
		},

		_destroyMainScene: function() {
			if (this._mainScene) {
				this.fireSceneDestroying({ scene: this._mainScene });

				if (this._sceneTree) {
					this._sceneTree.setScene(null, null);
				}

				if (this._stepNavigation) {
					this._stepNavigation.setScene(null);
				}

				this._toolbar = null;
				this._viewport.setViewStateManager(null);
				this._setViewStateManager(null);
				if (this._viewport) {
					this._viewport.setScene(null);
				}
				this._graphicsCore.destroyScene(this._mainScene);
				this._mainScene = null;
			}
		},

		/**
		 * Gets the GraphicsCore object.
		 * @returns {sap.ui.vk.GraphicsCore} The GraphicsCore object.
		 * @public
		 */
		getGraphicsCore: function() {
			return this._graphicsCore;
		},

		/**
		 * Gets the Scene currently loaded in the Viewer control.
		 * @returns {sap.ui.vk.Scene} The scene loaded in the control.
		 * @public
		 */
		getScene: function() {
			return this._mainScene;
		},

		/**
		 * Gets the view state manager object used for handling visibility and selection of nodes.
		 * @returns {sap.ui.vk.ViewStateManager} The view state manager object.
		 * @public
		 */
		getViewStateManager: function() {
			return this.getAggregation("viewStateManager");
		},

		/**
		 * Sets the view state manager object used for handling visibility and selection of nodes.
		 * @param {sap.ui.vk.ViewStateManager} viewStateManager The ViewStateManager object.
		 * @returns {sap.ui.vk.Viewer} <code>this</code> to allow method chaining.
		 * @private
		 */
		_setViewStateManager: function(viewStateManager) {
			if (!this._graphicsCore) {
				return this;
			}
			if (viewStateManager === this.getViewStateManager()) {
				return this;
			}
			if (this.getViewStateManager()) {
				this._graphicsCore.destroyViewStateManager(this.getViewStateManager());
			}
			this.setAggregation("viewStateManager", viewStateManager, true);
			return this;
		},

		/**
		 * Gets the 3D viewport.
		 * @returns {sap.ui.vk.Viewport} The 3D viewport.
		 * @public
		 */
		getViewport: function() {
			return this._viewport;
		},

		/**
		 * Gets the 2D viewport used for displaying format natively supported by the browser - 2D images etc.
		 * @returns {sap.ui.vk.NativeViewport} The 2D viewport.
		 * @public
		 */
		getNativeViewport: function() {
			return this._nativeViewport;
		},

		/**
		 * @return {object} The Emscripten runtime settings.
		 * @private
		 */
		_getRuntimeSettings: function() {
			return this._runtimeSettings;
		},

		/**
		 * @returns {object} The webGLContextAttributes property.
		 * @private
		 */
		_getWebGLContextAttributes: function() {
			return this._webGLContextAttributes;
		},

		setEnableOverlay: function(oProperty) {
			if (oProperty == this.getProperty("enableOverlay")) {
				return;
			}

			this._activateOverlay(oProperty);
			this.setProperty("enableOverlay", oProperty, true);
			return this;
		},

		setEnableSceneTree: function(oProperty) {
			this.setProperty("enableSceneTree", oProperty, true);
			if (!oProperty) {
				this.setProperty("showSceneTree", false);
			}
			this._updateLayout();
			return this;
		},

		setShowSceneTree: function(oProperty) {
			this.setProperty("showSceneTree", oProperty, true);
			this._updateLayout();
			return this;
		},

		setEnableStepNavigation: function(oProperty) {
			this.setProperty("enableStepNavigation", oProperty, true);
			if (!oProperty) {
				this.setProperty("showStepNavigation", false);
			}
			this._updateLayout();
			return this;
		},
		
		setShowStepNavigation: function(oProperty) {
			this.setProperty("showStepNavigation", oProperty, true);
			this._updateLayout();
			return this;
		},


		setEnableToolbar: function(oProperty) {
			this.setProperty("enableToolbar", oProperty, true);
			this._updateLayout();
			return this;
		},


		setEnableFullScreen: function(oProperty) {
			this.setProperty("enableFullScreen", oProperty, true);
			this._fullScreenToggle = true;
			
			// Fullscreen toggle
			var viewer = document.getElementById(this.getId());
			var bFull = this.getProperty("enableFullScreen");
			var bChanged = false;
			
			if (bFull) {
				if (!(document.fullScreen || document.webkitIsFullScreen || document.mozFullScreen || document.msFullscreenElement)) {
					this._oldWidth = this.getWidth();
					this._oldHeight = this.getHeight();
					
					var viewer = document.getElementById(this.getId());
					
					if (!this._fullScreenHandler) {
						this._fullScreenHandler = function (event) {
							if (!(document.fullscreen || document.mozFullScreen || document.webkitIsFullScreen || document.msFullscreenElement)) {
								document.removeEventListener("fullscreenchange", this._fullScreenHandler.bind(this));
								document.removeEventListener("mozfullscreenchange", this._fullScreenHandler.bind(this));
								document.removeEventListener("webkitfullscreenchange", this._fullScreenHandler.bind(this));
								document.removeEventListener("msfullscreenchange", this._fullScreenHandler.bind(this));
								
								viewer.style.width = this._oldWidth;
								viewer.style.height = this._oldHeight;	
								this._updateSize();	
								this.fireFullScreen({isFullScreen: false});
							}
						};
						
						document.addEventListener("fullscreenchange", this._fullScreenHandler.bind(this));
						document.addEventListener("mozfullscreenchange", this._fullScreenHandler.bind(this));
						document.addEventListener("webkitfullscreenchange", this._fullScreenHandler.bind(this));
						document.addEventListener("msfullscreenchange", this._fullScreenHandler.bind(this));
					}
					
					bChanged = true;

					if (viewer.requestFullScreen) {
						viewer.requestFullScreen();
					} else if (viewer.webkitRequestFullScreen) {
						viewer.webkitRequestFullScreen();
					} else if (viewer.mozRequestFullScreen) {
						viewer.mozRequestFullScreen();
					} else if (viewer.msRequestFullscreen) {
						viewer.msRequestFullscreen();
					} else {
						bChanged = false;
					}
					
					if (bChanged) {
						viewer.style.width = '100%';
						viewer.style.height = '100%';
					}
				}
			} else {
				if (document.fullScreen || document.webkitIsFullScreen || document.mozFullScreen || document.msFullscreenElement) {
					bChanged = true;
					
					if (document.cancelFullScreen) {
						document.cancelFullScreen();
					} else if (document.webkitCancelFullScreen) {
						document.webkitCancelFullScreen();
					} else if (document.mozCancelFullScreen) {
						document.mozCancelFullScreen();
					} else if (document.msExitFullscreen) {
						document.msExitFullscreen();
					} else {
						bChanged = false;
					}
					
					if (bChanged) {
						viewer.style.width = this._oldWidth;
						viewer.style.height = this._oldHeight;
					}
				}
			}
			
			if (bChanged) {
				this._updateSize();
				this.fireFullScreen({isFullScreen: bFull});
			}
			
			return this;
		},

		/**
		 * Destroys all the content resources in the aggregation named contentResources.
		 * @private
		 */
		destroyContentResources: function(suppressInvalidate) {
			this._shouldLoadContentResources = true;
			this._destroyMainScene();
			return this.destroyAggregation("contentResources", suppressInvalidate);
		},

		invalidate: function(origin) {
			jQuery.sap.log.debug("invalidate " + (origin instanceof sap.ui.base.ManagedObject ? origin.getId() : origin));
			if (origin instanceof ContentResource) {
				this._shouldLoadContentResources = true;
			}
			return Control.prototype.invalidate.apply(this, arguments);
		},

		onBeforeRendering: function() {
			if (this._fullScreenToggle) {
				this._fullScreenToggle = false;
			} else {
				this._showToolbar();
				this._showSceneTree();
				this._showStepNavigation();
				if (this._shouldLoadContentResources) {
					this._destroyMainScene();
					this._loadAllContentResources();
				}
			}

			if (this._resizeListenerId) {
				ResizeHandler.deregister(this._resizeListenerId);
				this._resizeListenerId = null;
			}
		},

		onAfterRendering: function() {
			var domRef = this.getDomRef();
			this._resizeListenerId = ResizeHandler.register(this, this._handleResize.bind(this));
			this._handleResize({ size: { width: domRef.clientWidth, height: domRef.clientHeight } } );
		},

		/**
		 * Handles the resize events from the {@link sap.ui.core.ResizeHandler ResizeHandler} object.
		 * @param {jQuery.Event} event The event object.
		 * @private
		 */
		_handleResize: function(event) {
			this._updateSize();
		},

		_updateSize: function() {
			if (this._updateSizeTimer) {
				clearTimeout(this._updateSizeTimer);
			}
			this._updateSizeTimer = setTimeout(this._doUpdateSize.bind(this), 100);
		},
		
		_doUpdateSize: function() {
			var flexId = this.getId() + "-flexibleControl";
			var layout = document.getElementById(flexId);
			layout.style.width = '100%';
			layout.style.height = '100%';
			
			var height = layout.clientHeight;
			
			var header = document.getElementById(flexId + "Content_0");
			var middle = document.getElementById(flexId + "Content_1");
			var footer = document.getElementById(flexId + "Content_2");
			
			height -= header.clientHeight;
			
			if (footer != null && footer.style.visibility != 'hidden') {
				height -= footer.clientHeight;
			}
			
			middle.style.height = height + "px";	
		},

		isTreeBinding: function(name) {
			return name === "contentResources";
		},

		setBusy: function(busy) {
			if (busy) {
				if (this._busyIndicatorCounter === 0) {
					this.setBusyIndicatorDelay(0);
					Control.prototype.setBusy.call(this, true);
				}
				this._busyIndicatorCounter += 1;
			} else {
				this._busyIndicatorCounter -= 1;
				if (this._busyIndicatorCounter == 0) {
					Control.prototype.setBusy.call(this, false);
				}
			}
		},

		_loadAllContentResources: function() {
			var log = jQuery.sap.log;
			var resources = this.getContentResources();
			if (resources.length === 0) {
				return this;
			}
			var categories = collectContentResourceCategories(resources);
			if (categories.length === 1) {
				var category = categories[0];
				if (category === sap.ui.vk.ContentResourceSourceCategory["3D"]) {
					this.setBusy(true);
					this._showSceneTree();
					this._showViewport();
					this._showStepNavigation();
					this._destroyMainScene();
					this._graphicsCore.loadContentResourcesAsync(resources, function(sourcesFailedToLoad) {
						if (sourcesFailedToLoad) {
							log.error("Some of content resources cannot be loaded.");
							this.fireSceneLoadingFailed();
						} else {
							var scene = this._graphicsCore.buildSceneTree(resources);
							if (scene) {
								this._mainScene = scene;
								this._viewport.setScene(this._mainScene);
								this._setViewStateManager(this._graphicsCore.createViewStateManager(this._mainScene.getDefaultNodeHierarchy()));
								this._viewport.setViewStateManager(this.getViewStateManager());
								this.fireSceneLoadingSucceeded({ scene: this._mainScene });
								this._sceneTree.setScene(this._mainScene, this.getViewStateManager());
								this.setEnableSceneTree(true);
								this.setShowSceneTree(true);

								this._stepNavigation.setScene(this._mainScene);
								this.setEnableStepNavigation(true);
								
								// Step Navigation must be properly initialized by those...
								// otherwise it will kick viewer out of full screen mode when shown for the first time.
								this.setShowStepNavigation(true);
								this.setShowStepNavigation(false);
							} else {
								this.fireSceneLoadingFailed();
							}
						}
						this.setBusy(false);
						this._shouldLoadContentResources = false;
					}.bind(this));
				} else if (category === sap.ui.vk.ContentResourceSourceCategory["2D"]) {
					this.setEnableSceneTree(false);
					this.setEnableStepNavigation(false);

					if (resources.length === 1) {
						var onImageLoadingSucceeded = function() {
							this._shouldLoadContentResources = false;
							this.setBusy(false);
							if (this.getEnableOverlay()) {
								this._activateOverlay(true);
							}
							this.fireImageLoadingSucceeded();
						}.bind(this);
						var onImageLoadingFailed = function() {
							this._shouldLoadContentResources = false;
							this.setBusy(false);
							this.fireImageLoadingFailed();
						}.bind(this);
						this._showNativeViewport();
						this.setBusy(true);
						var resource = resources[0];
						if (resource.getFile()) {
							var fileReader = new FileReader();
							fileReader.onload = function(event) {
								this._nativeViewport.loadUrl(fileReader.result, onImageLoadingSucceeded, onImageLoadingFailed, null, resource.getSourceType());
							}.bind(this);
							fileReader.readAsDataURL(resource.getFile());
						} else {
							this._nativeViewport.loadUrl(resource.getSource(), onImageLoadingSucceeded, onImageLoadingFailed, null, resource.getSourceType());
						}
					} else {
						log.error("Loading multiple 2D files is not supported yet");
					}
				}
			} else if (categories.length > 1) {
				throw new Error("All content resources must have same category - either 3D or 2D.");
			} /*else { // categories.length === 0
				// TODO: handle this case
			}*/
			return this;
		},

		_showToolbar: function () {
			if (!this._toolbar) {
				this._toolbar = new VkToolbar({title:this.getToolbarTitle()});
				this._toolbar.setViewer(this);
				this.setAggregation("toolbar", this._toolbar);
			}
			this._toolbar.setVisible(this.getEnableToolbar());
			this._updateLayout();
			return this;
		},

		_updateLayout: function(){
			this._layout.setWidth(this.getWidth());
			this._layout.removeAllContent();
			this._layout.setHeight(this.getHeight());

			var height = this.getHeight();
			var contentHeight = [0, 0, 0];

			if (height == "auto") {
				height = 400;
			} else if (height.substr(height.length - 1) == '%') {
				height = 400;
			} else {
				height = parseInt(height, 10);
			}

			if (this._toolbar != null && this.getEnableToolbar()) {
				contentHeight[0] = 48;
			}
			if (this._stepNavigation != null && this.getShowStepNavigation()) {
				contentHeight[2] = 0;
			}

			contentHeight[1] = height - contentHeight[0] - contentHeight[2];

			if (this._toolbar != null && this.getEnableToolbar()) {
				this._toolbar.setVisible(true);
				this._toolbar.setLayoutData(new FlexibleControlLayoutData({
					size: contentHeight[0] + "px"
				}));
				this._layout.insertContent(this._toolbar,0);
			} else if (this._toolbar != null) {
				this._toolbar.setVisible(false);
			}

			if (this._sceneTree != null && this.getShowSceneTree()){
				this._sceneTree.setVisible(true);
				this._sceneTree.setLayoutData(new SplitterLayoutData({
					size: "320px",
					minSize: 10,
					resizable:true
				}));
				this._content.insertContentArea(this._sceneTree, 0);
			} else if (this._sceneTree != null) {
				this._content.removeContentArea(this._sceneTree);
				this._sceneTree.setVisible(false);
			}
			this._content.setLayoutData(new FlexibleControlLayoutData({
				size: contentHeight[1] + "px"
			}));
			this._layout.addContent(this._content);

			if (this._stepNavigation != null && this.getShowStepNavigation()) {
				if (this._graphicsCore != null && !this._stepNavigation.hasGraphicsCore()) {
					this._stepNavigation.setGraphicsCore(this._graphicsCore);
				}
				this._stepNavigation.setVisible(true);
				this._layout.addContent(this._stepNavigation);
			} else if (this._stepNavigation != null){
				this._stepNavigation.setVisible(false);
			}

			this._toolbar.refresh();
			this._updateSize();
		},

		_showSceneTree: function () {
			if (!this._sceneTree) {
				this._sceneTree = new SceneTree();
				this.setAggregation("sceneTree", this._sceneTree);
			}
			this._sceneTree.setVisible(this.getShowSceneTree());
			this._updateLayout();
			return this;
		},

		_showStepNavigation: function () {
			if (!this._stepNavigation) {
				this._stepNavigation = new StepNavigation(this.getId() + "-stepNavigation",{visible: this.getShowStepNavigation()});
				this.setAggregation("stepNavigation", this._stepNavigation);
			}
			this._stepNavigation.setVisible(this.getShowStepNavigation());
			this._updateLayout();
			return this;
		},

		_showViewport: function() {
			if (!this._viewport) {
				this._viewport = new Viewport(this.getId() + "-viewport");
				this.setAggregation("viewport", this._viewport);
			}
			if (!this._graphicsCore) {
				jQuery.sap.require("sap.ui.vk.GraphicsCore");
				this._graphicsCore = new sap.ui.vk.GraphicsCore(
					this._getRuntimeSettings(),
					jQuery.extend(
						{
							antialias: true,
							alpha: true,
							premultipliedAlpha: false
						},
						this._getWebGLContextAttributes()
					)
				);
				this._viewport.setGraphicsCore(this._graphicsCore);
			}

			if (this._nativeViewport) {
				this._nativeViewport.setVisible(false);
			}
			this._stackedViewport.removeAllContent();
			this._stackedViewport.addContent(this._viewport);
			this._viewport.setVisible(true);

			return this;
		},

		_showNativeViewport: function() {
			if (!this._nativeViewport) {
				this._nativeViewport = new NativeViewport(this.getId() + "-nativeViewport");
				this.setAggregation("nativeViewport", this._nativeViewport);
			}

			if (this._viewport) {
				this._viewport.setVisible(false);
			}
			this._stackedViewport.removeAllContent();
			this._stackedViewport.addContent(this._nativeViewport);
			this._nativeViewport.setVisible(true);

			return this;
		},

		_activateOverlay: function(bEnable) {
			if (bEnable) {
				var oOverlay = new sap.ui.vk.Overlay();
				this.setAggregation("hotspotOverlay", oOverlay);

				oOverlay.setTarget(this._nativeViewport);
				this._fillMockData();
				this._stackedViewport.addContent(oOverlay);
			} else {
				var oOverlay = this.getAggregation("hotspotOverlay");
				this._stackedViewport.removeContent(1);
				this.removeAllAggregation("hotspotOverlay");
			}
		},

		_fillMockData : function() {
			var oOverlay = this.getAggregation("hotspotOverlay");
			oOverlay.addArea(new sap.ui.vk.OverlayArea({
				position: '0.4;0.6;0;0.6;0.6;0;0.6;0.4;0;0.4;0.4;0', tooltip: 'Area 1', changeable: false
			}));
		}
	});

	/**
	 * Collects content resource categories. The result is tested if the content resource hierarchy has the same category - 2D or 3D.
	 * @param {sap.ui.vk.ContentResource[]} resources The array of content resources.
	 * @returns {sap.ui.vk.ContentResourceSourceCategory[]} The array of distinct content resource categories.
	 * @private
	 */
	function collectContentResourceCategories(resources) {
		var categories = [];
		var map = {};

		function getResourceCategory(resource) {
			var sourceType = resource.getSourceType();
			if (sourceType) {
				var category = sap.ui.vk.ContentResourceSourceTypeToCategoryMap[sourceType] || "unknown";
				if (!map.hasOwnProperty(category)) {
					map[category] = true;
					categories.push(category);
				}
			}
			resource.getContentResources().forEach(getResourceCategory);
		}

		resources.forEach(getResourceCategory);

		return categories;
	}

	return Viewer;
});

}; // end of sap/ui/vk/Viewer.js
if ( !jQuery.sap.isDeclared('sap.ui.vk.GraphicsCore') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

        (c) Copyright 2009-2015 SAP SE. All rights reserved
    
 */
/* global File */
// Provides the GraphicsCore class.
jQuery.sap.declare('sap.ui.vk.GraphicsCore'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.base.EventProvider'); // unlisted dependency retained
jQuery.sap.require('sap.ve.dvl'); // unlisted dependency retained
sap.ui.define("sap/ui/vk/GraphicsCore",[
	"jquery.sap.global", "./library", "sap/ui/base/EventProvider", "sap/ve/dvl", "./Scene", "./NodeHierarchy",
	"./ContentResource", "./DownloadManager", "./ViewStateManager", "./DvlException"
], function(jQuery, library, EventProvider, Dvl, Scene, NodeHierarchy,
	ContentResource, DownloadManager, ViewStateManager, DvlException) {
	"use strict";

	var DvlSceneOrigin = {
		Empty:  "Empty", // dvl scene is create as an empty scene
		Local:  "Local", // dvl scene is loaded from a local file.
		Remote: "Remote" // dvl scene is loaded from a URL.
	};

	var SceneResource = function(dvlSceneId, source) {
		var origin;
		if (typeof source === "string") {
			origin = DvlSceneOrigin.Remote;
		} else if (source === undefined) {
			origin = DvlSceneOrigin.Empty;
		} else if (source instanceof File) {
			origin = DvlSceneOrigin.Local;
		} else {
			throw new Error("Unsupported type of parameter 'source'.");
		}
		Object.defineProperties(this, {
			"dvlSceneId": { value: dvlSceneId, writable: false, enumerable: true },
			"source":     { value: source,     writable: false, enumerable: true },
			"origin":     { value: origin,     writable: false, enumerable: true },
			"modified":   { value: false,      writable: true,  enumerable: true }
		});
	};

	/**
	 * Creates a new GraphicsCore object.
	 *
	 * @class
	 * This class loads the Dvl library, wraps it and makes the wrapper available for the Application.
	 *
	 * Example:<br/>
	 * <pre>   var oGraphicsCore = new GraphicsCore();</pre><br/>
	 *
	 * @param {object} runtimeSettings The Emscripten runtime settings.
	 * @param {int}    runtimeSettings.totalMemory The size of Emscripten module memory in bytes.
	 * @param {string} runtimeSettings.logElementId The ID of a textarea DOM element to write the log to.
	 * @param {string} runtimeSettings.statusElementId The ID of a DOM element to write the status messages to.
	 * @param {object} webGLContextAttributes The WebGL context attributes. See {@link https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.2 WebGL context attributes}.
	 * @public
	 * @author SAP SE
	 * @version 1.32.3
	 * @extends sap.ui.base.EventProvider
	 * @alias sap.ui.vk.GraphicsCore
	 * @experimental Since 1.32.0 This class is experimental and might be modified or removed in future versions.
	 */
	var GraphicsCore = EventProvider.extend("sap.ui.vk.GraphicsCore", /** @lends sap.ui.vk.GraphicsCore.prototype */ {
		metadata: {
			publicMethods: [
				"buildSceneTree",
				"createViewStateManager",
				"destroyScene",
				"destroyViewStateManager",
				"getApi",
				"loadContentResourcesAsync",
				"showDebugInfo"
			]
		},

		// NB: Change these numbers when start using features from new versions of DVL.
		_DVLMajorVersion: 5,
		_DVLMinorVersion: 0,

		constructor: function(runtimeSettings, webGLContextAttributes) {
			EventProvider.apply(this);

			var settings = jQuery.extend({}, runtimeSettings, { filePackagePrefixURL: jQuery.sap.getResourcePath("sap/ve") + "/" });
			this._dvlClientId = jQuery.sap.uid();
			this._dvl = sap.ve.dvl.createRuntime(settings);
			this._dvl.CreateCoreInstance(this._dvlClientId);
			this._dvl.Core.Init(this._DVLMajorVersion, this._DVLMinorVersion);
			this._canvas = this._createRenderingCanvasAndContext(webGLContextAttributes);

			// The list of resources the scenes are created from.
			this._sceneResources = [];

			// The map vkScene -> SceneResource[]
			//   key - vkScene.getId()
			//   value - an array of SceneResources
			this._vkScenesToSceneResourcesMap = {};

			// The list of scenes (sap.ui.vk.Scene).
			this._vkScenes = [];

			// The list of viewports (sap.ui.vk.Viewport).
			this._viewports = [];

			// The list of view state managers.
			this._viewStateManagers = [];
		},

		destroy: function() {
			// GraphicsCore does not own Viewport objects, it should not destroy them, it can only reset their association with GraphicsCore.
			this._viewports.slice().forEach(function(viewport) {
				viewport.setGraphicsCore(null);
			});
			this._viewports = null;

			this._vkScenes.forEach(this.destroyScene.bind(this));
			this._vkScenes = null;

			this._viewStateManagers.slice().forEach(this.destroyViewStateManager.bind(this));
			this._viewStateManagers = null;

			jQuery.sap.assert(this._sceneResources.length === 0, "Not all scene resources are destroyed when sap.ui.vk.Scene objects are destroyed.");

			this._sceneResources.slice().forEach(this._destroySceneResource.bind(this));
			this._sceneResources = null;

			this._webGLContext = null;
			this._canvas = null;

			this._dvl.Core.Release();
			this._dvl = null;

			EventProvider.prototype.destroy.apply(this);
		},

		/**
		 * Creates a canvas element for the 3D viewport and initializes the WebGL context.
		 * @param {object} webGLContextAttributes WebGL context attributes. A JSON object with the following boolean properties:
		 * <ul>
		 *   <li>antialias {boolean} default value <code>true</code>.</li>
		 *   <li>alpha {boolean} default value <code>true</code>.</li>
		 *   <li>premultipliedAlpha {boolean} default value <code>false</code>.</li>
		 * </ul>
		 * Other {@link https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.2 WebGL context attributes} are also supported.
		 * @returns {HTMLCanvasElement} The canvas element for the 3D viewport.
		 * @private
		 */
		_createRenderingCanvasAndContext: function(webGLContextAttributes) {
			// _canvas is a private DOMElement used for WebGL rendering.
			// At the moment there can be only one canvas element and one viewport,
			// and the viewport uses the canvas.
			var canvas = document.createElement("canvas");
			canvas.id = jQuery.sap.uid();
			this._webGLContext = this._dvl.Core.CreateWebGLContext(canvas, webGLContextAttributes);
			return canvas;
		},

		/**
		 * Gets the canvas element used for 3D rendering.
		 * @returns {HTMLCanvasElement} The canvas element used for 3D rendering.
		 * @private
		 */
		_getCanvas: function() {
			return this._canvas;
		},

		/**
		 * Gets the WebGL context used for 3D rendering.
		 * @returns {WebGLRenderingContext} The WebGL rendering context.
		 * @private
		 */
		_getWebGLContext: function() {
			return this._webGLContext;
		},

		/**
		 * Gets the DVL object.
		 * @returns {DVL} The DVL object.
		 * @private
		 */
		_getDvl: function() {
			return this._dvl;
		},

		/**
		 * Gets the DVL client ID used in processing notifications from DVL module.
		 * @returns {string} The DVL client ID.
		 * @private
		 */
		_getDvlClientId: function() {
			return this._dvlClientId;
		},

		////////////////////////////////////////////////////////////////////////
		// BEGIN: Scene Resource related methods.

		_destroySceneResource: function(resource) {
			this._dvl.Scene.Release(resource.dvlSceneId);
			switch (resource.origin) {
				case DvlSceneOrigin.Local:
					this._dvl.Core.DeleteFileByUrl(resource.source.name, "local");
					break;
				case DvlSceneOrigin.Remote:
					this._dvl.Core.DeleteFileByUrl(resource.source, "remote");
					break;
				default: // To satisfy ESLint.
					break;
			}
			this._sceneResources.splice(this._sceneResources.indexOf(resource), 1);
			return this;
		},

		/**
		 * Returns an array of items from this._sceneResources that match the search criteria.
		 * @param {object} properties A JSON like object with one or several properties { dvlScene, source, origin, modified }.
		 * @return {object[]} An array of items from this._dvlScenes that match the search criteria.
		 * @private
		 */
		_findSceneResources: function(properties) {
			var propNames = Object.getOwnPropertyNames(properties);
			return this._sceneResources.filter(function(item) {
				return propNames.every(function(propName) {
					return properties[propName] === item[propName];
				});
			});
		},

		// END: Scene Resource related methods.
		////////////////////////////////////////////////////////////////////////

		////////////////////////////////////////////////////////////////////////
		// BEGIN: Content Resource related methods.

		/**
		 * Loads content resources.
		 *
		 * Content resources can be downloaded from a URL or loaded from a local file.
		 *
		 * @param {sap.ui.vk.ContentResource[]} contentResources The content resources to build the scene from.
		 * @param {function} onComplete The callback function to call when all content resources are processed.
		 *                              The callback takes one parameter - an array of the 'source' attribute values that to be loaded failed.
		 * @returns {sap.ui.vk.GraphicsCore} <code>this</code> to allow method chaining.
		 * @public
		 */
		loadContentResourcesAsync: function(contentResources, onComplete) {
			// Convert the tree of ContentResources into a flat array of ContentResources.
			function flattenContentResourceTree(resources) {
				var result = [];
				function enumerate(resources) {
					result = result.concat(resources);
					resources.forEach(function(resource) {
						enumerate(resource.getContentResources());
					});
				}
				enumerate(resources);
				return result;
			}

			var allContentResources = flattenContentResourceTree(contentResources);

			// Multiple content resources can be downloaded from the same URL/file (e.g. in case of instancing).
			// In order not to download them multiple times find only distinct URLs/files.
			var sources = jQuery.sap.unique(
				allContentResources.map(function(contentResource) {
					return contentResource.getFile() || contentResource.getSource();
				}).filter(function(urlOrFile) {
					// Content resource with non empty getSource() or getFile().
					return urlOrFile;
				}).filter(function(urlOrFile) {
					// Content resource that is not loaded yet.
					return this._findSceneResources({ source: urlOrFile, modified: false }).length === 0;
				}.bind(this))
			);

			// Asynchronously download all content resources with URLs or local files.
			if (sources.length > 0) {
				var sourcesFailedToLoad;
				new DownloadManager(sources)
					.attachItemSucceeded(function(event) {
						var source = event.getParameter("source");
						var isFile = source instanceof File;
						var name = isFile ? source.name : source;
						var response = event.getParameter("response");
						try {
							var dvlSceneId = sap.ui.vk.dvl.getPointer(this._dvl.Core.LoadFileFromArrayBuffer(response, name, null, isFile ? "local" : "remote"));
							this._sceneResources.push(new SceneResource(dvlSceneId, source));
						} catch (ex) {
							if (ex instanceof DvlException) {
								sourcesFailedToLoad = sourcesFailedToLoad || [];
								sourcesFailedToLoad.push({
									source: event.getParameter("source"),
									status: ex.code,
									statusText: ex.message
								});
							} else {
								throw ex;
							}
						}
					}, this)
					.attachAllItemsCompleted(function(event) {
						allContentResources.forEach(function(resource) {
							resource.setLoaded();
						});
						if (onComplete) {
							onComplete(sourcesFailedToLoad);
						}
					}, this)
					.attachItemFailed(function(event) {
						sourcesFailedToLoad = sourcesFailedToLoad || [];
						sourcesFailedToLoad.push({
							source: event.getParameter("source"),
							status: event.getParameter("status"),
							statusText: event.getParameter("statusText")
						});
					}, this)
					.start();
			} else if (onComplete) {
				// Nothing to download or everything is already downloaded.
				onComplete();
			}

			return this;
		},

		/**
		 * Builds a scene tree from the hierarchy of content resources. The content resources must be already loaded.
		 * @param {sap.ui.vk.ContentResource[]} contentResources The array of content resources to build the scene from.
		 * @returns {sap.ui.vk.Scene} The scene built from the content resources.
		 * @public
		 */
		buildSceneTree: function(contentResources) {
			// At this point all content contentResources must be downloaded.

			var vkScene, dvlRootSceneId, resourcesToStartWith, rootSceneResource;

			// Process top level content contentResources in a special way. Then process next level content contentResources recursively.
			if (contentResources.length === 1 && (contentResources[0].getSource() || contentResources[0].getFile())) {
				// Load the resource without creating a grouping node and merging.
				rootSceneResource = this._findSceneResources({ source: contentResources[0].getFile() || contentResources[0].getSource(), modified: false })[0];
				if (rootSceneResource) {
					resourcesToStartWith = contentResources[0].getContentResources();
				} else {
					throw new Error("Content resource " + contentResources[0].getSource() + " is not downloaded");
				}
			} else {
				// Always create a new empty scene for the root node.
				rootSceneResource = new SceneResource(this._dvl.Core.CreateEmptyScene());
				this._sceneResources.push(rootSceneResource);
				resourcesToStartWith = contentResources;
			}
			rootSceneResource.modified = true;
			dvlRootSceneId = rootSceneResource.dvlSceneId;
			vkScene = new Scene(this, dvlRootSceneId);
			this._vkScenes.push(vkScene);
			var vkScenesToSceneResourcesMap = this._vkScenesToSceneResourcesMap[vkScene.getId()] = [rootSceneResource];
			var nodeHierarchy = vkScene.getDefaultNodeHierarchy();

			var getSceneTopNodes = function(sceneId) {
				return this._dvl.Scene.RetrieveSceneInfo(sceneId, sap.ve.dvl.DVLSCENEINFO.DVLSCENEINFO_CHILDREN).ChildNodes;
			}.bind(this);

			var mergeContentResource = function(dvlParentNodeId, contentResource) {
				var dvlGroupingNodeId = this._dvl.Scene.CreateNode(dvlRootSceneId, dvlParentNodeId, contentResource.getName());
				var nodeProxy = nodeHierarchy.createNodeProxy(dvlGroupingNodeId);
				contentResource._setNodeProxy(nodeProxy);
				var matrix = contentResource.getLocalMatrix();
				if (matrix) {
					nodeProxy.setLocalMatrix(matrix);
				}
				var source = contentResource.getFile() || contentResource.getSource();
				if (source) {
					var resourceInfo = this._findSceneResources({ source: source, modified: false })[0];
					getSceneTopNodes(resourceInfo.dvlSceneId).forEach(function(nodeId) {
						this._dvl.Scene.CreateNodeCopy(dvlRootSceneId, nodeId, dvlGroupingNodeId, sap.ve.dvl.DVLCREATENODECOPYFLAG.COPY_CHILDREN);
					}.bind(this));
					if (vkScenesToSceneResourcesMap.indexOf(resourceInfo) < 0) {
						vkScenesToSceneResourcesMap.push(resourceInfo);
					}
				}
				contentResource.getContentResources().forEach(mergeContentResource.bind(this, dvlGroupingNodeId));
			}.bind(this);

			resourcesToStartWith.forEach(mergeContentResource.bind(this, /* dvlParentNodeId = */ null));

			return vkScene;
		},

		// END: Content Resource related methods.
		////////////////////////////////////////////////////////////////////////

		////////////////////////////////////////////////////////////////////////
		// BEGIN: Scene related methods.

		/**
		 * Destroys the scene object.
		 * @param {sap.ui.vk.Scene} vkScene The scene to destroy.
		 * @returns {sap.ui.vk.GraphicsCore} <code>this</code> to allow method chaining.
		 * @public
		 */
		destroyScene: function(vkScene) {
			var vkSceneId = vkScene.getId();
			var vkSceneIndex = this._vkScenes.indexOf(vkScene);
			if (vkSceneIndex < 0) {
				jQuery.sap.log.warning("Scene with id '" + vkSceneId + "' is not create by this GraphicsCore.");
				return this;
			}

			var vkSceneResources = this._vkScenesToSceneResourcesMap[vkSceneId];

			this._vkScenes.splice(vkSceneIndex, 1);
			delete this._vkScenesToSceneResourcesMap[vkSceneId];

			var vkSceneIds = Object.getOwnPropertyNames(this._vkScenesToSceneResourcesMap);
			vkSceneResources
				.filter(function(sceneResource) {
					// Can unload a scene resource if no vkScenes reference it.
					return !vkSceneIds.some(function(vkSceneId) {
						return this._vkScenesToSceneResourcesMap[vkSceneId].indexOf(sceneResource);
					});
				})
				.forEach(this._destroySceneResource.bind(this));

			vkScene.destroy();

			return this;
		},

		// END: Scene related methods.
		////////////////////////////////////////////////////////////////////////

		////////////////////////////////////////////////////////////////////////
		// BEGIN: Viewport related methods.

		/**
		 * Registers the viewport in GraphicsCore.
		 * Viewports are registered when corresponding DVLRenderers are created.
		 * @param {sap.ui.vk.Viewport} viewport The viewport to register.
		 * @returns {boolean} <code>true</code> if <code>viewport</code> gets registered, <code>false</code> if <code>viewport</code> was already registered.
		 * @private
		 */
		_registerViewport: function(viewport) {
			if (this._viewports.indexOf(viewport) >= 0) {
				return false;
			}
			this._viewports.push(viewport);
			return true;
		},

		/**
		 * Unregisters the viewport in GraphicsCore.
		 * Viewports are unregistered when corresponding DVLRenderers are destroyed.
		 * @param {sap.ui.vk.Viewport} viewport The viewport to unregister.
		 * @returns {boolean} <code>true</code> if <code>viewport</code> gets unregistered, <code>false</code> if <code>viewport</code> was already unregistered.
		 * @private
		 */
		_unregisterViewport: function(viewport) {
			var index = this._viewports.indexOf(viewport);
			if (index < 0) {
				return false;
			}
			this._viewports.splice(index, 1);
			return true;
		},

		/**
		 * Gets the Viewport object count.
		 * @returns {int} The number of Viewport objects registered in GraphicsCore.
		 * @private
		 */
		_getViewportCount: function() {
			return this._viewports.length;
		},

		// END: Viewport related methods.
		////////////////////////////////////////////////////////////////////////

		////////////////////////////////////////////////////////////////////////
		// BEGIN: View State Manager related methods.

		/**
		 * Creates a new ViewStateManager object.
		 *
		 * GraphicsCore owns the new ViewStateManager object. The object must be destroyed with the {@link #destroyViewStateManager destroyViewStateManager} method;
		 *
		 * @param {sap.ui.vk.NodeHierarchy} nodeHierarchy The NodeHierarchy object the view state manager is created for.
		 * @returns {sap.ui.vk.ViewStateManager} The newly created ViewStateManager object.
		 * @public
		 */
		createViewStateManager: function(nodeHierarchy) {
			var viewStateManager = new ViewStateManager(nodeHierarchy);
			this._viewStateManagers.push(viewStateManager);
			return viewStateManager;
		},

		/**
		 * Destroys the ViewStateManager object created with the {@link #createViewStateManager createViewStateManager} method.
		 *
		 * @param {sap.ui.vk.ViewStateManager} viewStateManager The ViewStateManagerObject to destroy.
		 * @returns {sap.ui.vk.GraphicsCore} <code>this</code> to allow method chaining.
		 * @public
		 */
		destroyViewStateManager: function(viewStateManager) {
			var index = this._viewStateManagers.indexOf(viewStateManager);
			if (index >= 0) {
				this._viewStateManagers.splice(index, 1)[0].destroy();
			}
			return this;
		},

		// END: View State Manager related methods.
		////////////////////////////////////////////////////////////////////////

		////////////////////////////////////////////////////////////////////////
		// BEGIN: Utility methods.

		/**
		 * Shows or hides debug information in the viewports.
		 *
		 * @param {boolean} enable <code>true</code> to show debug information, <code>false</code> to hide debug information.
		 * @returns {sap.ui.vk.GraphicsCore} <code>this</code> to allow method chaining.
		 * @public
		 * @experimental since version 1.32.0. The behavior might change in the next version.
		 */
		showDebugInfo: function(enable) {
			this._viewports.forEach(function(viewport) {
				viewport.setOption(sap.ve.dvl.DVLRENDEROPTION.DVLRENDEROPTION_SHOW_DEBUG_INFO, enable);
			});
			return this;
		},

		/**
		 * Gets one of APIs supported by the DVL library.
		 *
		 * @param {sap.ui.vk.GraphicsCoreApi} apiId The API identifier.
		 * @returns {object} The object that implements the requested API or null if the API is not supported.
		 * @public
		 * @experimental since version 1.32.0. The behavior might change in the next version.
		 */
		getApi: function(apiId) {
			switch (apiId) {
				case sap.ui.vk.GraphicsCoreApi.LegacyDvl:
					return this._dvl;
				default:
					return null;
			}
		}

		// END: Utility methods.
		////////////////////////////////////////////////////////////////////////
	});

	return GraphicsCore;
});

}; // end of sap/ui/vk/GraphicsCore.js
