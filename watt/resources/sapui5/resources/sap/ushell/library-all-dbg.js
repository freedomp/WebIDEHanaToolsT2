// This file has been generated by the SAPUI5 'AllInOne' Builder
sap.ui.controller("sap.ushell.components.factsheet.views.ThingViewer", {

    setService : function(sUri) {
        this.getView().setModel(new sap.ui.model.odata.ODataModel(sUri));
    }

});
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, $, sap, window */
    /*jslint nomen: true */

    sap.ui.controller("sap.ushell.components.flp.launchpad.catalog.Catalog", {
        oPopover: null,
        onInit: function () {
            sap.ui.getCore().getEventBus().subscribe("showCatalogEvent", this.onShow, this);
            sap.ui.getCore().byId("catalogSelect").addEventDelegate({
                onBeforeRendering : this.onBeforeSelectRendering
            }, this);
            var oRouter = this.getView().parentComponent.getRouter();
            oRouter.attachRoutePatternMatched(this.onShow.bind(this));
        },

        onExit: function () {
            sap.ui.getCore().getEventBus().unsubscribe("showCatalogEvent", this.onShow);
            /*this.getView().aDanglingControls.forEach(function (oControl) {
                oControl.destroy();
            });*/
        },

        onBeforeRendering: function () {
            //Invoking loading of all catalogs here instead of 'onBeforeShow' as it improves the perceived performance.
            //Fix of incident#:1570469901
            sap.ui.getCore().getEventBus().publish("showCatalog");
            //set initial focus
            setTimeout(function () {
                jQuery('#catalogSelect').focus();
            }, 0);
        },

        onAfterRendering: function () {
            // disable swipe gestures -> never show master in Portait mode
            var oModel = this.getView().getModel(),
                aCurrentCatalogs = oModel.getProperty('/catalogs'),
                that = this;
            //check if the catalogs were already loaded, if so, we don't need the loading message
            if (!aCurrentCatalogs.length) {

                //add the loading message right after the catalog is rendered
                oModel.setProperty('/catalogs', [{
                    title: sap.ushell.resources.i18n.getText('catalogsLoading'),
                    "static": true,
                    tiles: [],
                    numIntentSupportedTiles : -1//only in order to present this option in the Catalog.view (dropdown menu)since there is a filter there on this property
                }]);
                oModel.setProperty('/catalogsNoDataText', sap.ushell.resources.i18n.getText('loadingTiles'));

            } else if (aCurrentCatalogs[0].title != sap.ushell.resources.i18n.getText('catalogsLoading')) {
                oModel.setProperty('/catalogsNoDataText', sap.ushell.resources.i18n.getText('noFilteredItems'));
            }

            if (!this.PagingManager) {
                this.lastCatalogId = 0;
                jQuery.sap.require("sap.ushell.components.flp.launchpad.PagingManager");
                this.PagingManager = new sap.ushell.components.flp.launchpad.PagingManager('catalogPaging', {
                    elementClassName: 'sapUshellTile',
                    containerHeight: window.innerHeight,
                    containerWidth: window.innerWidth
                });
            }

            //just the first time
            if (this.PagingManager.currentPageIndex === 0) {
                that.allocateNextPage();
            }

            jQuery("#catalogTilesPage-cont").scroll(function () {
                var oPage = sap.ui.getCore().byId('catalogTilesPage'),
                    scroll = oPage.getScrollDelegate(),
                    currentPos = scroll.getScrollTop(),
                    max = scroll.getMaxScrollTop();

                if (max - currentPos <= 30 + that.PagingManager.getTileHeight()) {
                    that.allocateNextPage();
                }
            });
            jQuery(window).resize(function () {
                var windowWidth = $(window).width(),
                    windowHeight = $(window).height();

                that.PagingManager.setContainerSize(windowWidth, windowHeight);
                that.resetPageFilter();
                that.applyTileFilters();
            });
        },

        onShow: function (oEvent) {
            //if the user goes to the catalog directly (not via the dashboard)
            //we must close the loading dialog
            var hashTag,
                oModel = this.getView().getModel(),
                aCatalogTiles = oModel.getProperty("/catalogTiles") || [],
                sDataParam = oEvent.getParameter('arguments').filters,
                oDataParam = sDataParam ? JSON.parse(sDataParam) : sDataParam,
                sPath = (oDataParam && decodeURIComponent(oDataParam.targetGroup)) || "",
                i;
            $.extend(this.getView().getViewData(), oEvent);
            if (this.PagingManager) {
                this.resetPageFilter();
            }

            this.categoryFilter = (oDataParam && oDataParam.catalogSelector && oDataParam.catalogSelector) || null;
            this.searchFilter = (oDataParam && oDataParam.tileFilter && oDataParam.tileFilter) || null;
            hashTag = (oDataParam && oDataParam.tagFilter && oDataParam.tagFilter) || "";

            sPath = sPath === 'undefined' ? undefined : sPath;
            this._updateModelWithGroupContext(sPath);

            if (hashTag) {
                try {
                    this.tagFilter = JSON.parse(hashTag);
                } catch (e) {
                    this.tagFilter = [];
                }
            } else {
                this.tagFilter = [];
            }
            if (this.tagFilter) {
                oModel.setProperty("/selectedTags", this.tagFilter);
            }
            oModel.setProperty("/showCatalogHeaders", true);
            oModel.setProperty("/catalogSearchFilter", this.searchFilter);

            for (i = 0; i < aCatalogTiles.length; i = i + 1) {
                aCatalogTiles[i].active = false;
            }

            if (this.categoryFilter || this.searchFilter) {
                // selected category does not work with data binding
                // we need to rerender it manually and then set the selection
                // see function onBeforeSelectRendering
                sap.ui.getCore().byId("catalogSelect").rerender();
            } else {
                //display all
                sap.ui.getCore().byId("catalogSelect").setSelectedItemId("");
            }

            this.oRenderingFilter = new sap.ui.model.Filter('', 'EQ', 'a');
            this.oRenderingFilter.fnTest = function (val) {
                if (val.catalogIndex <= this.lastCatalogId) {
                    return true;
                }

                if (this.allocateTiles > 0) {
                    this.lastCatalogId = val.catalogIndex;
                    this.allocateTiles--;
                    return true;
                }

                return false;
            }.bind(this);

            if (this.PagingManager) {
                this.applyTileFilters();
            }
        },
        resetPageFilter : function () {
            this.lastCatalogId = 0;
            this.allocateTiles = this.PagingManager.getNumberOfAllocatedElements();
        },
        allocateNextPage : function () {
            if (!this.allocateTiles || this.allocateTiles === 0) {
                //calculate the number of tiles in the page.
                this.PagingManager.moveToNextPage();
                this.allocateTiles = this.PagingManager._calcElementsPerPage();
                this.applyTileFilters();
            }
        },

        onBeforeSelectRendering : function () {
            var oSelect = sap.ui.getCore().byId("catalogSelect"),
                aItems = jQuery.grep(oSelect.getItems(), jQuery.proxy(function (oItem) {
                    return oItem.getBindingContext().getObject().title === this.categoryFilter;
                }, this));

            if (!aItems.length) {
                aItems.push(oSelect.getItemAt(0));
            }

            if (aItems[0] && oSelect.getSelectedItemId() !== aItems[0].getId()) {
                window.setTimeout($.proxy(oSelect.setSelectedItem, oSelect, aItems[0].getId()), 500);
            }
        },

        setTagsFilter : function (aFilter) {
            var oParameterObject = {
                catalogSelector : this.categoryFilter,
                tileFilter : this.searchFilter,
                tagFilter : aFilter,
                targetGroup : encodeURIComponent(this.getGroupContext())
            };
            this.getView().parentComponent.getRouter().navTo('catalog', {filters: JSON.stringify(oParameterObject)}, true);
        },

        setCategoryFilter : function (aFilter) {
            var oParameterObject = {
                catalogSelector : aFilter,
                tileFilter : this.searchFilter,
                tagFilter: JSON.stringify(this.tagFilter),
                targetGroup : encodeURIComponent(this.getGroupContext())
            };
            this.getView().parentComponent.getRouter().navTo('catalog', {filters : JSON.stringify(oParameterObject)}, true);
        },

        setSearchFilter : function (aFilter) {
            var oParameterObject = {
                catalogSelector : this.categoryFilter,
                tileFilter : aFilter,
                tagFilter: JSON.stringify(this.tagFilter),
                targetGroup : encodeURIComponent(this.getGroupContext())
            };
            this.getView().parentComponent.getRouter().navTo('catalog', {'filters' : JSON.stringify(oParameterObject)});
        },

       /**
        * Returns the group context path string as kept in the model
        *
        * @returns {string} Group context
        */
        getGroupContext :  function () {
            var oModel = this.getView().getModel(),
                sGroupContext = oModel.getProperty("/groupContext/path");

            return sGroupContext ? sGroupContext : "";
        },

        applyTileFilters : function () {
            var aFilters = [],
                otagFilter,
                oSearchFilter,
                oCategoryFilter,
                sCatalogTitle;
            if (this.tagFilter) {
                otagFilter = new sap.ui.model.Filter('tags', 'EQ', 'v');
                otagFilter.fnTest = function (oTags) {
                    var ind, filterByTag;
                    if (this.tagFilter.length === 0) {
                        return true;
                    }

                    for (ind = 0; ind < this.tagFilter.length; ind++) {
                        filterByTag = this.tagFilter[ind];
                        if (oTags.indexOf(filterByTag) === -1) {
                            return false;
                        }
                    }
                    return true;
                }.bind(this);

                aFilters.push(otagFilter);
            }

            if (this.searchFilter) {
                oSearchFilter = new sap.ui.model.Filter($.map(this.searchFilter.split(/[\s,]+/), function (v) {
                    return (v && new sap.ui.model.Filter("keywords", sap.ui.model.FilterOperator.Contains, v)) ||
                        (v && new sap.ui.model.Filter("title", sap.ui.model.FilterOperator.Contains, v)) || undefined;
                }), true);
                aFilters.push(oSearchFilter);
            }
            if (this.categoryFilter) {
                sCatalogTitle = this.categoryFilter;

                // Filtering the catalog tiles  according to catalog title (and not catalog ID)  
                oCategoryFilter = new sap.ui.model.Filter("catalog", sap.ui.model.FilterOperator.EQ, sCatalogTitle);
                aFilters.push(oCategoryFilter);
            }
            //Anyway we would like to filter out tiles which are not supported on current device
            aFilters.push(new sap.ui.model.Filter("isTileIntentSupported", sap.ui.model.FilterOperator.EQ, true));

            //Adding the page filter.
            if (this.oRenderingFilter) {
                aFilters.push(this.oRenderingFilter);
            }

            sap.ui.getCore().byId("catalogTiles").getBinding("tiles").filter(aFilters);
        },

        onLiveFilter : function (oEvent) {
            var sQuery = oEvent.getParameter("newValue");
            if (sQuery) {
                this.setSearchFilter(sQuery);
            } else {
                this.setSearchFilter();
            }
        },

        onTagsFilter : function (oEvent) {
            var selectedItem = oEvent.getParameters("selectedItem").changedItem,
                selected = oEvent.getParameter("selected"),
                selectedTagsList = [],
                selectedTag = selectedItem.getText();

            if (this.tagFilter) {
                selectedTagsList = this.tagFilter;
            }

            if (selected) {
                selectedTagsList.push(selectedTag);
            } else {
                selectedTagsList = selectedTagsList.filter(function (entry) {
                    return entry !== selectedTag;
                });
            }
            this.setTagsFilter(selectedTagsList.length > 0 ? JSON.stringify(selectedTagsList) : "");
        },

        onCategoryFilter : function (oEvent) {
            var oSource = oEvent.getParameter("selectedItem"),
                oSourceContext = oSource.getBindingContext(),
                oModel = oSourceContext.getModel();
            if (oModel.getProperty("static", oSourceContext)) { // show all categories
                oModel.setProperty("/showCatalogHeaders", true);
                this.setCategoryFilter();
                this.selectedCategory = undefined;
            } else { // filter to category
                oModel.setProperty("/showCatalogHeaders", false);
                this.setCategoryFilter(oSource.getBindingContext().getObject().title);
                this.selectedCategory = oSource.getId();
            }
        },

        onTileAfterRendering : function (oEvent) {
            var footItem = oEvent.getSource().getFootItems()[0];
            if (footItem !== undefined) {
                footItem.addStyleClass("sapUshellCatalogPlusIcon");
            }
        },

        catalogTilePress : function (oController) {
            sap.ui.getCore().getEventBus().publish("launchpad", "catalogTileClick");
        },

        /**
         * Event handler triggered if tile should be added to the default group.
         *
         * @param {sap.ui.base.Event} oEvent
         *     the event object. It is expected that the binding context of the event source points to the tile to add.
         */
        onTileFooterClick : function (oEvent) {
            var oSource = oEvent.getSource(),
                oSourceContext = oSource.getBindingContext(),
                that = this,
                oModel = this.getView().getModel(),
                oOkBtn,
                oCancelBtn,
                placement,
                clickedObject = oEvent.oSource,
                clickedObjectDomRef = clickedObject.getDomRef(),
                oPopoverData = this.createPopoverData(oEvent),
                oPopoverModel = new sap.ui.model.json.JSONModel(oPopoverData.userGroupList),
                iPopoverDataSectionHeight = 192,
                sGroupModelPath = oModel.getProperty("/groupContext/path"),
                oList,
                oPopoverContainer,
                oNewGroupParts;

            // Check if the catalog was opened in the context of a group, according to the groupContext ("/groupContext/path") in the model
            if (sGroupModelPath) {
                this._handleTileFooterClickInGroupContext(oSourceContext, sGroupModelPath);

            // If the catalog wasn't opened in the context of a group - the action of clicking a catalog tile should open the groups popover
            } else {
                oList = this._createPopoverGroupList(oPopoverData);

                oPopoverContainer = this._setPopoverContainer(iPopoverDataSectionHeight);
                oNewGroupParts = this._createNewGroupUiElements(oPopoverContainer, iPopoverDataSectionHeight);

                oPopoverContainer.addContent(oNewGroupParts.newGroupItemList);
                oPopoverContainer.addContent(oList);

                if (document.body.clientHeight - clickedObjectDomRef.getBoundingClientRect().bottom >= 310) {
                    placement = "Bottom";
                } else {
                    placement = "Auto";
                }

                this.oPopover = new sap.m.ResponsivePopover({
                    id : "groupsPopover",
                    placement : placement,
                    content : [oPopoverContainer],
                    enableScrolling : true,
                    title: sap.ushell.resources.i18n.getText("addTileToGroups_popoverTitle"),
                    contentWidth: '20rem',
                    afterClose: function () {
                        oNewGroupParts.newGroupItemList.destroy();
                        oNewGroupParts.newGroupNameInput.destroy();
                        oOkBtn.destroy();
                        oCancelBtn.destroy();
                        oPopoverContainer.destroy();
                        that.oPopover.destroy();
                        that.oPopover = null;
                    }
                });

                if (!sap.ui.Device.system.phone) {
                    this.oPopover.setContentHeight(iPopoverDataSectionHeight + "px");
                } else {
                    this.oPopover.setContentHeight("100%");
                }

                oOkBtn = this._createOkButton(oSourceContext, oPopoverModel, oPopoverData, that, that.oPopover, oNewGroupParts.newGroupNameInput);
                oCancelBtn = this._createCancelButton(that.oPopover);

                this.oPopover.setBeginButton(oOkBtn);
                this.oPopover.setEndButton(oCancelBtn);
                this.oPopover.setInitialFocus('newGroupItem');
                this.oPopover.openBy(clickedObject);
            }
        },

        _getCatalogTileIndexInModel : function (oSourceContext) {
            var tilePath = oSourceContext.sPath,
                tilePathPartsArray = tilePath.split("/"),
                tileIndex = tilePathPartsArray[tilePathPartsArray.length - 1];

            return tileIndex;
        },

        _handleTileFooterClickInGroupContext : function (oSourceContext, sGroupModelPath) {
            var oLaunchPageService = sap.ushell.Container.getService("LaunchPage"),
                oModel = this.getView().getModel(),
                catalogTile = this.getCatalogTileDataFromModel(oSourceContext),
                aAssociatedGroups = catalogTile.tileData.associatedGroups,
                oGroupModel = oModel.getProperty(sGroupModelPath), // Get the model of the group according to the group's model path (e.g. "groups/4") 
                sGroupId = oLaunchPageService.getGroupId(oGroupModel.object),
                iCatalogTileInGroup = $.inArray(sGroupId, aAssociatedGroups),
                tileIndex = this._getCatalogTileIndexInModel(oSourceContext),
                oGroupContext,
                oAddTilePromise,
                oRemoveTilePromise,
                sTileCataogId,
                groupIndex,
                that = this;

            if (catalogTile.isBeingProcessed) {
                return;
            }
            oModel.setProperty('/catalogTiles/' + tileIndex + '/isBeingProcessed', true);
            // Check if this catalog tile already exist in the relevant group 
            if (iCatalogTileInGroup == -1) {
                oGroupContext = new sap.ui.model.Context(oSourceContext.getModel(), sGroupModelPath);
                oAddTilePromise = this._addTile(oSourceContext, oGroupContext);

                // Function createTile of Dashboard manager always calls defferred.resolve, 
                // and the success/failure indicator is the returned data.status
                oAddTilePromise.done(function (data) {
                    if (data.status == 1) {
                        that._groupContextOperationSucceeded(oSourceContext, catalogTile, oGroupModel, true);
                    } else {
                        that._groupContextOperationFailed(catalogTile, oGroupModel, true);
                    }
                });
                oAddTilePromise.always(function () {
                    oModel.setProperty('/catalogTiles/' + tileIndex + '/isBeingProcessed', false);
                });

            } else {
                sTileCataogId = oSourceContext.getModel().getProperty(oSourceContext.getPath()).id;
                groupIndex = sGroupModelPath.split('/')[2];
                oRemoveTilePromise = this._removeTile(sTileCataogId, groupIndex);

                // Function deleteCatalogTileFromGroup of Dashboard manager always calls defferred.resolve, 
                // and the success/failure indicator is the returned data.status
                oRemoveTilePromise.done(function (data) {
                    if (data.status == 1) {
                        that._groupContextOperationSucceeded(oSourceContext, catalogTile, oGroupModel, false);
                    } else {
                        that._groupContextOperationFailed(catalogTile, oGroupModel, false);
                    }
                });
                oRemoveTilePromise.always(function () {
                    oModel.setProperty('/catalogTiles/' + tileIndex + '/isBeingProcessed', false);
                });
            }
        },

        _createPopoverGroupList : function (oPopoverData) {
            var aUserGroupsFilters = [],
                oPopoverModel,
                oList = new sap.m.List({
                    mode : sap.m.ListMode.MultiSelect,
                    includeItemInSelection: true
                }),
                oListItemTemplate = new sap.m.DisplayListItem({
                    label : "{title}",
                    selected : "{selected}",
                    tooltip: "{title}",
                    type: sap.m.ListType.Active
                }),
                that = this;

            oList.addEventDelegate({
                onsapup: function (oEvent) {
                    try {
                        oEvent.preventDefault();

                        if (that.getView().getModel().getProperty("/groups/length")) {
                            var jqNewGroupItem,
                                currentFocusGroup = jQuery(":focus");
                            if (currentFocusGroup.index() == 0) {   //first group in the list
                                jqNewGroupItem = jQuery("#newGroupItem");
                                jqNewGroupItem.focus();
                                oEvent._bIsStopHandlers = true;
                            }
                        }
                    } catch (e) {
                    }
                }
            });

            // In case the list item (representing a group) is clicked by the user - change the checkbox's state
            oList.attachItemPress(function (oEvent) {
                var clickedListItem = oEvent.getParameter('listItem'),
                    srcControl = oEvent.getParameter('srcControl'),
                    bSelected;

                if (srcControl.getMetadata().getName() === 'sap.m.CheckBox') {
                    bSelected = clickedListItem.isSelected();
                    srcControl.setSelected(!bSelected);
                    clickedListItem.setSelected(!bSelected);
                }
            });

            aUserGroupsFilters.push(new sap.ui.model.Filter("isGroupLocked", sap.ui.model.FilterOperator.EQ, false));
            if (this.getView().getModel().getProperty('/enableHideGroups')) {
                aUserGroupsFilters.push(new sap.ui.model.Filter("isGroupVisible", sap.ui.model.FilterOperator.EQ, true));
            }
            oList.bindItems("/", oListItemTemplate, null, aUserGroupsFilters);
            oPopoverModel = new sap.ui.model.json.JSONModel(oPopoverData.userGroupList);
            oList.setModel(oPopoverModel);

            return oList;
        },

        _setPopoverContainer : function (popoverDataSectionHeight) {
            var popoverContainerId = "popoverContainer",
                popoverContainer = new sap.m.ScrollContainer({
                    id: popoverContainerId,
                    horizontal : false,
                    vertical : true
                });

            if (!sap.ui.Device.system.phone) {
                popoverContainer.setHeight((popoverDataSectionHeight - 2) + "px");
            } else {
                popoverContainer.setHeight("100%");
            }

            return popoverContainer;
        },

        _createNewGroupUiElements : function (oPopoverContainer, iPopoverDataSectionHeight) {
            var oModel = this.getView().getModel(),
                oNewGroupNameInput,
                oBackButton,
                oNewGroupLabel,
                oHeadBar,
                oNewGroupItem,
                oNewGroupItemList,
                that = this;

            oNewGroupNameInput = new sap.m.Input({
                id : "newGroupNameInput",
                type : "Text",
                placeholder : sap.ushell.resources.i18n.getText("new_group_name")
            });

            // new group panel - back button
            oBackButton = new sap.m.Button({
                icon: sap.ui.core.IconPool.getIconURI("nav-back"),
                press : function (oEvent) {
                    that.oPopover.removeAllContent();

                    if (!sap.ui.Device.system.phone) {
                        that.oPopover.setContentHeight(iPopoverDataSectionHeight + "px");
                    } else {
                        that.oPopover.setContentHeight("100%");
                    }

                    that.oPopover.setVerticalScrolling(true);
                    that.oPopover.addContent(oPopoverContainer);
                    that.oPopover.setTitle(sap.ushell.resources.i18n.getText("addTileToGroups_popoverTitle"));
                    that.oPopover.setCustomHeader();

                    oNewGroupNameInput.enabled = false;
                    oNewGroupNameInput.setValue('');
                },
                tooltip : sap.ushell.resources.i18n.getText("newGroupGoBackBtn_tooltip")
            });
            oBackButton.addStyleClass("sapUshellCatalogNewGroupBackButton");

            // new group panel's label
            oNewGroupLabel = new sap.m.Label({
                text : sap.ushell.resources.i18n.getText("newGroup_popoverTitle")
            });

            // new group panel's header
            oHeadBar = new sap.m.Bar({
                contentLeft : [oBackButton],
                contentMiddle : [oNewGroupLabel]
            });

            // popover container Item - "New Group"
            oNewGroupItem = new sap.m.StandardListItem({
                id : "newGroupItem",
                title : sap.ushell.resources.i18n.getText("newGroup_listItemText"),
                type : "Navigation",
                press : function () {
                    that._navigateToCreateNewGroupPanel(that.oPopover, oNewGroupNameInput, oHeadBar);
                }
            });

            oNewGroupItemList = new sap.m.List({});

            // if xRay is enabled
            if (oModel.getProperty("/enableHelp")) {
                oNewGroupItem.addStyleClass('help-id-newGroupItem');// xRay help ID
            }
            oNewGroupItemList.addItem(oNewGroupItem);
            oNewGroupItemList.addEventDelegate({
                onsapdown: function (oEvent) {
                    try {
                        oEvent.preventDefault();
                        oEvent._bIsStopHandlers = true;
                        if (that.getView().getModel().getProperty("/groups/length")) {
                            var jqFirstGroupListItem = jQuery("#popoverContainer .sapMListModeMultiSelect li").first();
                            jqFirstGroupListItem.focus();
                        }
                    } catch (e) {
                    }
                },
                onsaptabnext: function (oEvent) {
                    try {
                        oEvent.preventDefault();
                        oEvent._bIsStopHandlers = true;
                        var jqOkButton = jQuery("#okButton");
                        jqOkButton.focus();
                    } catch (e) {
                    }
                }
            });

            return {
                newGroupItemList : oNewGroupItemList,
                newGroupNameInput : oNewGroupNameInput
            };
        },

        _createOkButton : function (oSourceContext, oPopoverModel, popoverData, oGeneralScope, oPopover, oNewGroupNameInput, oHeadBar) {
            var oOkBtn = new sap.m.Button({
                id : "okButton",
                press : function (oEvent) {

                    oEvent.preventDefault();
                    oEvent._bIsStopHandlers = true;
                    /*eslint-disable consistent-this*/
                    var oUserSelection,
                        tileCatalogId = oSourceContext.getModel().getProperty(oSourceContext.getPath()).id,
                        sGroupNameFromInput = oNewGroupNameInput.getValue().trim(),
                        aPromises = [],
                        oPressHandlerScope = this;
                    /*eslint-enable consistent-this*/
                    // Analyze user selection
                    oUserSelection = oGeneralScope._handlePopoverGroupsSelection(oPopoverModel, tileCatalogId, oSourceContext, popoverData, aPromises, oGeneralScope);

                    // In case the user chose to create a new group and opened the new group creation panel
                    if (oNewGroupNameInput.enabled) {
                        oUserSelection = oGeneralScope._handleNewGroupCreationPanel(oGeneralScope, oSourceContext, sGroupNameFromInput, aPromises, oUserSelection);
                    }

                    // After the promise objects of all the actions (i.e. add/remove tile from group) were gathered into an array - 
                    // they should be processed
                    jQuery.when.apply(jQuery, aPromises).then(
                        function () {
                            oGeneralScope._handlePopoverGroupsActionPromises(oGeneralScope, oPressHandlerScope, oSourceContext, popoverData, oUserSelection, arguments);
                        }
                    );

                    oPopover.close();

                }.bind(oPopoverModel),
                text : sap.ushell.resources.i18n.getText("okBtn")
            });

            oOkBtn.addEventDelegate({
                onsaptabprevious: function(oEvent) {
                    try {
                        oEvent.preventDefault();
                        oEvent._bIsStopHandlers = true;
                        var jqNewGroupItem = jQuery("#newGroupItem");
                        if (!jqNewGroupItem.length) {
                            jqNewGroupItem = jQuery("#newGroupNameInput input");
                        }
                        jqNewGroupItem.focus();
                    } catch (e) {
                    }
                }
            });

            return oOkBtn;
        },

        _createCancelButton : function (oPopover) {
            return new sap.m.Button({
                id : "cancelButton",
                press : function (oEvent) {
                    oEvent.preventDefault();
                    oEvent._bIsStopHandlers = true;
                    oPopover.close();
                },
                text : sap.ushell.resources.i18n.getText("cancelBtn")
            });
        },

        _handlePopoverGroupsSelection : function (oPopoverModel, tileCataogId, oSourceContext, popoverData, promises, oGeneralScope) {
            var oLaunchPageService = sap.ushell.Container.getService("LaunchPage"),
                groupsIdTitleMap = {},
                oGroupContext,
                tempGroup,
                realGroupID,
                index,
                oUserSelection = {
                    selectedGroupsIDsArray : [],
                    numberOfAddedGroups : 0,
                    numberOfRemovedGroups : 0,
                    firstAddedGroupTitle : "",
                    firstRemovedGroupTitle : ""
                };

            for (index = 0; index < popoverData.userGroupList.length; index = index + 1) {
                tempGroup = oPopoverModel.oData[index];
                realGroupID = oLaunchPageService.getGroupId(tempGroup.object);
                // Add the real group Id and title to the map
                //  in order to support the detailed message that follows the user group selection
                groupsIdTitleMap[realGroupID] = tempGroup.title;

                if (tempGroup.selected) {
                    oUserSelection.selectedGroupsIDsArray.push(realGroupID);
                    oGroupContext = new sap.ui.model.Context(oSourceContext.getModel(), "/groups/" + index);
                    if (!oPopoverModel.oData[index].initiallySelected) {
                        promises.push(oGeneralScope._addTile(oSourceContext, oGroupContext));
                        oPopoverModel.oData[index].initiallySelected = true;
                        oUserSelection.numberOfAddedGroups = oUserSelection.numberOfAddedGroups + 1;
                        if (oUserSelection.numberOfAddedGroups == 1) {
                            oUserSelection.firstAddedGroupTitle = tempGroup.title;
                        }
                    }
                } else if ((!tempGroup.selected) && (oPopoverModel.oData[index].initiallySelected)) {
                    promises.push(oGeneralScope._removeTile(tileCataogId, index));
                    oPopoverModel.oData[index].initiallySelected = false;
                    oUserSelection.numberOfRemovedGroups = oUserSelection.numberOfRemovedGroups + 1;
                    if (oUserSelection.numberOfRemovedGroups == 1) {
                        oUserSelection.firstRemovedGroupTitle = tempGroup.title;
                    }
                }
            }
            return oUserSelection;
        },

        _handlePopoverGroupsActionPromises : function (oGeneralScope, oPressHandlerScope, oSourceContext, popoverData, oUserSelection, aPromiseArguments) {

            if (!(oUserSelection.numberOfAddedGroups == 0 && oUserSelection.numberOfRemovedGroups == 0)) {
                var oLaunchPageService = sap.ushell.Container.getService("LaunchPage"),
                    isOperationFailed = false,
                    isNewGroupAdded = false,
                    aErrorIndexes = [],
                    index,
                    sDetailedMessage;

                for (index = 0; index < aPromiseArguments.length && (!isOperationFailed || !isNewGroupAdded); index++) {
                    // check if tile was added to the new group successfully
                    if (aPromiseArguments[index].action == "addTileToNewGroup" && aPromiseArguments[index].status == 1) {
                        var tempGroup = oPressHandlerScope.oData[oPressHandlerScope.oData.length - 1],
                            realGroupID = oLaunchPageService.getGroupId(tempGroup.object);
                        oUserSelection.selectedGroupsIDsArray.push(realGroupID);
                        isNewGroupAdded = true;
                    }
                    // Check if the operation failed
                    //  The Data (i.e. aPromiseArguments[index]) for each operation includes:
                    //   - group: The relevant group object
                    //   - status: A boolean value stating if the operation succeeded of failed
                    //   - action: A String with the value 'add' or 'remove' or 'createNewGroup'
                    if (!aPromiseArguments[index].status) {
                        isOperationFailed = true;
                        aErrorIndexes.push(aPromiseArguments[index]);
                    }
                }
                if (isOperationFailed) {
                    var oErrorMessageObj = oGeneralScope.prepareErrorMessage(aErrorIndexes, popoverData.tileTitle),
                        dashboardMgr = sap.ushell.components.flp.launchpad.DashboardManager();

                    dashboardMgr.resetGroupsOnFailure(oErrorMessageObj.messageId, oErrorMessageObj.parameters);

                } else {
                    // Update the model with the changes
                    oSourceContext.getModel().setProperty("/catalogTiles/" + popoverData.tileIndex + "/associatedGroups", oUserSelection.selectedGroupsIDsArray);

                    // Get the detailed message
                    sDetailedMessage = oGeneralScope.prepareDetailedMessage(popoverData.tileTitle, oUserSelection.numberOfAddedGroups, oUserSelection.numberOfRemovedGroups, oUserSelection.firstAddedGroupTitle, oUserSelection.firstRemovedGroupTitle);

                    sap.m.MessageToast.show( sDetailedMessage, {
                        duration: 3000,// default
                        width: "15em",
                        my: "center bottom",
                        at: "center bottom",
                        of: window,
                        offset: "0 -50",
                        collision: "fit fit"
                    });
                }
            }
        },

        /**
         * Handles success of add/remove tile action in group context.
         * Updates the model and shows an appropriate message to the user.
         *  
         * @param {object} oSourceContext
         * @param {object} oCatalogTileModel - The catalog tile model from /catalogTiles array 
         * @param {object} oGroupModel - The model of the relevant group  
         * @param {boolean} bTileAdded - Whether the performed action is adding or removing the tile to/from the group
         */
        _groupContextOperationSucceeded : function (oSourceContext, oCatalogTileModel, oGroupModel, bTileAdded) {
            var oLaunchPageService = sap.ushell.Container.getService("LaunchPage"),
                sGroupId = oLaunchPageService.getGroupId(oGroupModel.object),
                aAssociatedGroups = oCatalogTileModel.tileData.associatedGroups,
                detailedMessage,
                i;

            // Check if this is an "add tile to group" action
            if (bTileAdded) {
                // Update the associatedGroups array of the catalog tile
                aAssociatedGroups.push(sGroupId);

                // Update the model of the catalog tile with the updated associatedGroups
                oSourceContext.getModel().setProperty("/catalogTiles/" + oCatalogTileModel.tileIndex + "/associatedGroups", aAssociatedGroups);

                detailedMessage = this.prepareDetailedMessage(oCatalogTileModel.tileData.title, 1, 0, oGroupModel.title, "");

            } else {
                // If this is a "remove tile from group" action

                // Update the associatedGroups array of the catalog tile
                for (i in aAssociatedGroups) {
                    if (aAssociatedGroups[i] == sGroupId) {
                        aAssociatedGroups.splice(i, 1);
                        break;
                    }
                }

                // Update the model of the catalog tile with the updated associatedGroups
                oSourceContext.getModel().setProperty("/catalogTiles/" + oCatalogTileModel.tileIndex + "/associatedGroups", aAssociatedGroups);
                detailedMessage = this.prepareDetailedMessage(oCatalogTileModel.tileData.title, 0, 1, "", oGroupModel.title);
            }

            sap.m.MessageToast.show(detailedMessage, {
                duration: 3000,// default
                width: "15em",
                my: "center bottom",
                at: "center bottom",
                of: window,
                offset: "0 -50",
                collision: "fit fit"
            });
        },

        /**
         * Handles failure of add/remove tile action in group context.
         * Shows an appropriate message to the user and reloads the groups.
         *
         * @param {object} oCatalogTileModel - The catalog tile model from /catalogTiles array
         * @param {object} oGroupModel - The model of the relevant group
         * @param {boolean} bTileAdded - Whether the performed action is adding or removing the tile to/from the group
         */
        _groupContextOperationFailed : function (oCatalogTileModel, oGroupModel, bTileAdded) {
            var dashboardMgr = sap.ushell.components.flp.launchpad.getDashboardManager(),
                oErrorMessage;

            if (bTileAdded) {
                oErrorMessage = sap.ushell.resources.i18n.getText({messageId: "fail_tile_operation_add_to_group", parameters: [oCatalogTileModel.tileData.title, oGroupModel.title]});
            } else {
                oErrorMessage = sap.ushell.resources.i18n.getText({messageId: "fail_tile_operation_remove_from_group", parameters: [oCatalogTileModel.tileData.title, oGroupModel.title]});
            }

            dashboardMgr.resetGroupsOnFailure(oErrorMessage.messageId, oErrorMessage.parameters);
        },

        _handleNewGroupCreationPanel : function (oGeneralScope, oSourceContext, sGroupNameFromInput, aPromises, oUserSelection) {
            var sNewGroupName,
                sEmptyGroupName = sap.ushell.resources.i18n.getText("new_group_name");

            if (sGroupNameFromInput.length > 0) {
                sNewGroupName = sGroupNameFromInput;
            } else {
                sNewGroupName = sEmptyGroupName;
            }

            aPromises.push(oGeneralScope._createGroupAndSaveTile(oSourceContext, sNewGroupName));
            oUserSelection.numberOfAddedGroups++;
            oUserSelection.firstAddedGroupTitle = sNewGroupName;

            return oUserSelection;
        },

        _navigateToCreateNewGroupPanel : function (oPopover, oNewGroupNameInput, oHeadBar) {

            oPopover.removeAllContent();
            oPopover.addContent(oNewGroupNameInput.addStyleClass("sapUshellCatalogNewGroupInput"));
            oPopover.setCustomHeader(oHeadBar);
            oPopover.setContentHeight("");
            oNewGroupNameInput.setValueState(sap.ui.core.ValueState.None);
            oNewGroupNameInput.setPlaceholder(sap.ushell.resources.i18n.getText("new_group_name"));
            oNewGroupNameInput.enabled = true;
            setTimeout(function () {
                oNewGroupNameInput.focus();
            }, 0);
        },

        prepareErrorMessage : function (aErroneousActions, sTileTitle) {
            var oGroup,
                sAction,
                sFirstErroneousAddGroup,
                sFirstErroneousRemoveGroup,
                iNumberOfFailAddActions = 0,
                iNumberOfFailDeleteActions = 0,
                bCreateNewGroupFailed = false,
                message;

            for (var index in aErroneousActions) {

                // Get the data of the error (i.e. action name and group object)

                oGroup = aErroneousActions[index].group;
                sAction = aErroneousActions[index].action;

                if (sAction == 'add') {
                    iNumberOfFailAddActions++;
                    if (iNumberOfFailAddActions == 1) {
                        sFirstErroneousAddGroup = oGroup.title;
                    }
                } else if (sAction == 'remove') {
                    iNumberOfFailDeleteActions++;
                    if (iNumberOfFailDeleteActions == 1) {
                        sFirstErroneousRemoveGroup = oGroup.title;
                    }
                } else if (sAction == 'addTileToNewGroup') {
                    iNumberOfFailAddActions++;
                    if (iNumberOfFailAddActions == 1) {
                        sFirstErroneousAddGroup = oGroup.title;
                    }
                } else {
                    bCreateNewGroupFailed = true;
                }
            }
            // First - Handle bCreateNewGroupFailed
            if (bCreateNewGroupFailed) {
                if (aErroneousActions.length == 1) {
                    message = sap.ushell.resources.i18n.getText({messageId: "fail_tile_operation_create_new_group"});
                } else {
                    message = sap.ushell.resources.i18n.getText({messageId: "fail_tile_operation_some_actions"});
                }
                // Single error - it can be either one add action or one remove action
            } else if (aErroneousActions.length == 1) {
                if (iNumberOfFailAddActions) {
                    message = sap.ushell.resources.i18n.getText({messageId: "fail_tile_operation_add_to_group", parameters: [sTileTitle, sFirstErroneousAddGroup]});
                } else {
                    message = sap.ushell.resources.i18n.getText({messageId: "fail_tile_operation_remove_from_group", parameters: [sTileTitle, sFirstErroneousRemoveGroup]});
                }
                // 	Many errors (iErrorCount > 1) - it can be several remove actions, or several add actions, or a mix of both
            } else {
                if (iNumberOfFailDeleteActions == 0) {
                    message = sap.ushell.resources.i18n.getText({messageId: "fail_tile_operation_add_to_several_groups", parameters: [sTileTitle]});
                } else if (iNumberOfFailAddActions == 0) {
                    message = sap.ushell.resources.i18n.getText({messageId: "fail_tile_operation_remove_from_several_groups", parameters: [sTileTitle]});
                } else {
                    message = sap.ushell.resources.i18n.getText({messageId: "fail_tile_operation_some_actions"});
                }
            }
            return message;
        },

        prepareDetailedMessage : function (tileTitle, numberOfAddedGroups, numberOfRemovedGroups, firstAddedGroupTitle, firstRemovedGroupTitle) {
            var message;

            if (numberOfAddedGroups == 0) {
                if (numberOfRemovedGroups == 1) {
                    message = sap.ushell.resources.i18n.getText("tileRemovedFromSingleGroup", [tileTitle, firstRemovedGroupTitle]);
                } else if (numberOfRemovedGroups > 1) {
                    message = sap.ushell.resources.i18n.getText("tileRemovedFromSeveralGroups", [tileTitle, numberOfRemovedGroups]);
                }
            } else if (numberOfAddedGroups == 1) {
                if (numberOfRemovedGroups == 0) {
                    message = sap.ushell.resources.i18n.getText("tileAddedToSingleGroup", [tileTitle, firstAddedGroupTitle]);
                } else if (numberOfRemovedGroups == 1) {
                    message = sap.ushell.resources.i18n.getText("tileAddedToSingleGroupAndRemovedFromSingleGroup", [tileTitle, firstAddedGroupTitle, firstRemovedGroupTitle]);
                } else if (numberOfRemovedGroups > 1) {
                    message = sap.ushell.resources.i18n.getText("tileAddedToSingleGroupAndRemovedFromSeveralGroups", [tileTitle, firstAddedGroupTitle, numberOfRemovedGroups]);
                }
            } else if (numberOfAddedGroups > 1) {
                if (numberOfRemovedGroups == 0) {
                    message = sap.ushell.resources.i18n.getText("tileAddedToSeveralGroups", [tileTitle, numberOfAddedGroups]);
                } else if (numberOfRemovedGroups == 1) {
                    message = sap.ushell.resources.i18n.getText("tileAddedToSeveralGroupsAndRemovedFromSingleGroup", [tileTitle, numberOfAddedGroups, firstRemovedGroupTitle]);
                } else if (numberOfRemovedGroups > 1) {
                    message = sap.ushell.resources.i18n.getText("tileAddedToSeveralGroupsAndRemovedFromSeveralGroups", [tileTitle, numberOfAddedGroups, numberOfRemovedGroups]);
                }
            }
            return message;
        },

        /**
         * Returns an object that contains:
         *  - An array of user groups, each one contains a "selected" property
         *  - An array ID's of the groups that contain the relevant Tile
         *
         * @param {sap.ui.base.Event} oEvent
         */
        createPopoverData : function (oEvent) {
            var oSource = oEvent.getSource(),
                oSourceContext = oSource.getBindingContext(),
                srvc = sap.ushell.Container.getService("LaunchPage"),
                index,
                model,
                path,
                tileTitle,
                realGroupID,

            // The popover basically contains an entry for each user group
                userGroupList = oSourceContext.getModel().getProperty("/groups"),

            // the relevant Catalog Tile form the model: e.g. /catalogTiles/5
                catalogTile = this.getCatalogTileDataFromModel(oSourceContext),

            // e.g. /catalogTiles/5/associatedGroups
                tileGroups = catalogTile.tileData.associatedGroups,

            // g.e. 5
                tileIndex = catalogTile.tileIndex;

            // In order to decide which groups (in the popover) will be initially selected:
            for (index = 0; index < userGroupList.length; index = index + 1) {

                // Get the group's real ID
                realGroupID = srvc.getGroupId(userGroupList[index].object);

                // Check if the group (i.e. real group ID) exists in the array of groups that contain the relevant Tile
                // if so - the check box that re[resents this group should be initially selected
                userGroupList[index].selected = !($.inArray(realGroupID, tileGroups) == -1);

                // In order to know if the group was selected before user action
                userGroupList[index].initiallySelected = userGroupList[index].selected;
            }
            path = oSourceContext.getPath(0);
            model = oSourceContext.getModel();
            tileTitle = model.getProperty(path).title;

            return {userGroupList : userGroupList, catalogTile : catalogTile, tileTitle : tileTitle, tileIndex : tileIndex};
        },

        /**
         * Returns the part of the model that contains the IDs of the groups that contain the relevant Tile
         *
         * @param {} oSourceContext
         *     model context
         */
        getCatalogTileDataFromModel : function (oSourceContext) {
            var tileIndex = this._getCatalogTileIndexInModel(oSourceContext),
                oModel = oSourceContext.getModel(),
                oTileData = oModel.getProperty("/catalogTiles/" + tileIndex);

            // Return an object containing the Tile in the CatalogTiles Array (in the model) ,its index and whether it's in the middle of add/removal proccess.
            return {
                tileData: oTileData,
                tileIndex: tileIndex,
                isBeingProcessed: oTileData.isBeingProcessed ? true : false
            };
        },

        /**
         * Event handler triggered if tile should be added to a specified group.
         *
         * @param {sap.ui.base.Event} oEvent
         *     the event object. It is expected that the binding context of the event source points to the group. Also,
         *     the event must contain a "control" parameter whose binding context points to the tile.
         */
        onAddTile : function (oEvent) {
            var oSourceContext = oEvent.getParameter("control").getBindingContext();
            if (!oSourceContext.getProperty("active")) {
                this._addTile(oSourceContext, oEvent.getSource().getBindingContext());
            }
        },

        onNavButtonPress : function (oEvent) {
            this.getView().parentComponent.getRouter().navTo('home');
        },

        /**
         * Update the groupContext part of the model with the path and ID of the context group, if exists
         *
         * @param {string} sPath - the path in the model of the context group, or empty string if no context exists
         */
        _updateModelWithGroupContext : function (sPath) {
            var oLaunchPageService = sap.ushell.Container.getService("LaunchPage"),
                oModel  = this.getView().getModel(),
                oGroupModel,
                oGroupContext = {
                    path : sPath,
                    id : "",
                    title : ""
                };

            // If sPath is defined and is different than empty string - set the group context id.
            // The recursive call is needed in order to wait until groups data is inserted to the model
            if (sPath && sPath !== "") {
                var timeoutGetGroupDataFromModel = function () {
                    var aModelGroups = oModel.getProperty("/groups");
                    if (aModelGroups.length) {
                        oGroupModel = oModel.getProperty(sPath);
                        oGroupContext.id = oLaunchPageService.getGroupId(oGroupModel.object);
                        oGroupContext.title = oGroupModel.title || oLaunchPageService.getGroupTitle(oGroupModel.object);
                        return;
                    }
                    setTimeout(timeoutGetGroupDataFromModel, 100);
                };
                timeoutGetGroupDataFromModel();
            }
            oModel.setProperty("/groupContext", oGroupContext);
        },
        
        /**
         * Send request to add a tile to a group. Request is triggered asynchronously, so UI is not blocked.
         *
         * @param {sap.ui.model.Context} oTileContext
         *     the catalog tile to add
         * @param {sap.ui.model.Context} oGroupContext
         *     the group where the tile should be added
         * @private
         */
        _addTile : function (oTileContext, oGroupContext) {
            var oDashboardManager = sap.ushell.components.flp.launchpad.getDashboardManager(),
                deferred = jQuery.Deferred(),
                promise = oDashboardManager.createTile({
                    catalogTileContext : oTileContext,
                    groupContext: oGroupContext
                });

            promise.done(function(data){
                deferred.resolve(data);
            });

            return deferred;
        },

        /**
         * Send request to delete a tile from a group. Request is triggered asynchronously, so UI is not blocked.
         *
         * @param tileCatalogId
         *     the id of the tile
         * @param index
         *     the index of the group in the model
         * @private
         */
        _removeTile : function (tileCatalogId, index) {
            var oDashboardManager = sap.ushell.components.flp.launchpad.getDashboardManager(),
                deferred = jQuery.Deferred(),
                promise = oDashboardManager.deleteCatalogTileFromGroup({
                    tileId : tileCatalogId,
                    groupIndex : index
                });

            // The function deleteCatalogTileFromGroup always results in deferred.resolve
            // and the actual result of the action (success/failure) is contained in the data object
            promise.done(function(data){
                deferred.resolve(data);
            });

            return deferred;
        },

        /**
         * Send request to create a new group and add a tile to this group. Request is triggered asynchronously, so UI is not blocked.
         *
         * @param {sap.ui.model.Context} oTileContext
         *     the catalog tile to add
         * @param newGroupName
         *     the name of the new group where the tile should be added
         * @private
         */
        _createGroupAndSaveTile : function (oTileContext, newGroupName) {
            var oDashboardManager = sap.ushell.components.flp.launchpad.getDashboardManager(),
                deferred = jQuery.Deferred(),
                promise = oDashboardManager.createGroupAndSaveTile({
                    catalogTileContext : oTileContext,
                    newGroupName: newGroupName
                });

            promise.done(function(data){
                deferred.resolve(data);
            });

            return deferred;
        }
    });
}());
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, console, window, $ */
    /*jslint plusplus: true, nomen: true*/

    sap.ui.controller("sap.ushell.components.flp.launchpad.group_list.GroupList", {
        onInit : function () {
            this.sViewId = "#" + this.getView().getId();
            this.sGroupListId = "#" + this.getView().oGroupList.getId();
            this.handleScroll = this._fHandleScroll.bind(this);
        },
        onAfterRendering : function () {
            this.jqView = jQuery(this.sViewId);
            this.jgGroupList = jQuery(this.sGroupListId);

            var oEventBus = sap.ui.getCore().getEventBus();
            oEventBus.unsubscribe("grouplist", "ScrollAnimationEnd", this._handleScrollAnimationEnd, this);
            oEventBus.subscribe("grouplist", "ScrollAnimationEnd", this._handleScrollAnimationEnd, this);
            oEventBus.unsubscribe("grouplist", "DashboardRerender", this._addScroll, this);
            oEventBus.subscribe("grouplist", "DashboardRerender", this._addScroll, this);
            oEventBus.unsubscribe("launchpad", "dashboardScroll", this.handleScroll, this);
            oEventBus.subscribe("launchpad", "dashboardScroll", this.handleScroll, this);

            this._addScroll();
        },

        _addScroll : function () {
            var that = this;

            //setTimeout is required because for some reason the event handler is not called when 'scroll' event is fired
            setTimeout(function () {
                this.dashboardElement = document.querySelector(".sapUshellDashboardView section");
                if (this.dashboardElement) {
                    this.dashboardElement.removeEventListener('scroll', that.handleScroll);
                    this.dashboardElement.addEventListener('scroll', that.handleScroll);
                }
            }.bind(this), 0);
        },

        _fHandleScroll : function () {
            var oModel = this.getView().getModel(),
                iTopViewPortGroupIndex = oModel.getProperty("/topGroupInViewPortIndex");

            // If scroll handler was called while performing a scroll-to-group action -
            // then nothing should be done except for tiles visibility calculation
            if (!oModel.getProperty("/scrollingToGroup")) {
                if (!oModel.getProperty("/groupList-skipScrollToGroup")) {
                    var groupItems = jQuery('#groupList li.sapUshellGroupLI');
                    var selectedGroupListItem = groupItems.removeClass('sapUshellSelected').eq(iTopViewPortGroupIndex);
                    selectedGroupListItem.addClass('sapUshellSelected');
                    var groupListScrollElement = document.getElementById('groupListPage-cont');
                    var groupListScrollTop = groupListScrollElement.scrollTop;
                    var groupListScrollBottom = groupListScrollTop + groupListScrollElement.offsetHeight;
                    var groupOffsetTop = selectedGroupListItem[0] ? selectedGroupListItem[0].offsetTop : undefined;
                    if (groupOffsetTop < groupListScrollTop) {
                        jQuery('#groupListPage section').animate({scrollTop: groupItems[iTopViewPortGroupIndex].offsetTop}, 0);
                    } else if (groupOffsetTop + selectedGroupListItem[0].offsetHeight > groupListScrollBottom) {
                        jQuery('#groupListPage section').animate({scrollTop: groupListScrollTop + groupItems[iTopViewPortGroupIndex].offsetHeight}, 0);
                    }
                }
                sap.ushell.utils.handleTilesVisibility();
            }
        },

        _handleGroupListItemPress : function (oEvent) {
            var oSource = oEvent.getSource(),
                focus;

            //to support accessibility tab order we set focus in press in case edit mode is off
            focus = oEvent.getParameter("action") === "sapenter";
            this._handleScrollToGroup(oSource, false, focus);
        },

        _handleScrollToGroup : function (oGroupItem, groupChanged, focus) {
            if (!oGroupItem) {
                return;
            }
            var that = this;
            document.querySelector(".sapUshellDashboardView").removeEventListener('scroll', that.handleScroll);

            this._publishAsync("launchpad", "scrollToGroup", {
                group : oGroupItem,
                groupChanged : groupChanged,
                focus : focus
            });
        },

        _handleScrollAnimationEnd : function () {
            var that = this;
            document.querySelector(".sapUshellDashboardView").addEventListener('scroll', that.handleScroll);
            this.getView().getModel().setProperty("/scrollingToGroup", false);
        },

        _publishAsync : function (sChannelId, sEventId, oData) {
            var oBus = sap.ui.getCore().getEventBus();
            window.setTimeout($.proxy(oBus.publish, oBus, sChannelId, sEventId, oData), 1);
        }
    });
}());
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap */
    /*jslint nomen: true */

    sap.ui.jsview("sap.ushell.components.tiles.applauncher.StaticTile", {
        getControllerName: function () {
            return "sap.ushell.components.tiles.applauncher.StaticTile";
        },
        createContent: function (oController) {
            this.setHeight('100%');
            this.setWidth('100%');
        },
        getTileControl: function() {
            jQuery.sap.require('sap.ushell.ui.tile.StaticTile');
            var oController = this.getController();
            return new sap.ushell.ui.tile.StaticTile(
                {
                    title: "{/config/display_title_text}",
                    subtitle: "{/config/display_subtitle_text}",
                    info: "{/config/display_info_text}",
                    infoState: "Neutral",
                    icon: "{/config/display_icon_url}",
                    targetURL: "{/nav/navigation_target_url}",
                    highlightTerms: "{/search/display_highlight_terms}",
                    press: [ oController.onPress, oController ]
                }
            );
        },
        getLinkControl: function() {
            jQuery.sap.require('sap.m.Link');
            return new sap.m.Link({
                text: "{/config/display_title_text}",
                href: "{/nav/navigation_target_url}"
            });
        }
    });
}());
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap */
    /*jslint nomen: true */

    sap.ui.jsview("sap.ushell.components.tiles.applauncherdynamic.DynamicTile", {
        getControllerName: function () {
            return "sap.ushell.components.tiles.applauncherdynamic.DynamicTile";
        },
        createContent: function (oController) {
            this.setHeight('100%');
            this.setWidth('100%');
        },
        getTileControl: function() {
            jQuery.sap.require('sap.ushell.ui.tile.DynamicTile');
            var oController = this.getController();
            return new sap.ushell.ui.tile.DynamicTile(
                {
                    title: "{/data/display_title_text}",
                    subtitle: "{/data/display_subtitle_text}",
                    info: "{/data/display_info_text}",
                    infoState: "{/data/display_info_state}",
                    icon: "{/data/display_icon_url}",
                    numberUnit: "{/data/display_number_unit}",
                    numberValue: "{/data/display_number_value}",
                    numberDigits: "{/data/display_number_digits}",
                    numberState: "{/data/display_number_state}",
                    numberFactor: "{/data/display_number_factor}",
                    stateArrow: "{/data/display_state_arrow}",
                    targetURL: "{/nav/navigation_target_url}",
                    highlightTerms: "{/search/display_highlight_terms}",
                    press : [ oController.onPress, oController ]
                }
            );
        },
        getLinkControl: function() {
            jQuery.sap.require('sap.m.Link');
            return new sap.m.Link({
                text: "{/config/display_title_text}",
                href: "{/nav/navigation_target_url}"
            });
        }
    });
}());
//jQuery.sap.require("sap.ushell.components.tiles.generic");


(function () {
    /* global $ */
    "use strict";
    sap.ui.controller("tiles.indicatorDual.DualTile", {

        onAfterRendering : function(){

            var that = this;
            this.oKpiTileView = this.getView();
            this.oResourceBundle = sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle();
            this.viewData = {};
            that.viewData = this.oKpiTileView.getViewData();

            this.deferred_left = new jQuery.Deferred();
            this.deferred_right = new jQuery.Deferred();

            $.when(this.deferred_left,this.deferred_right).done(function(){
                that.setTextInTile();
                that.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);
                var navTarget = sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oKpiTileView.oConfig,that.system);
                that.oKpiTileView.oGenericTile.$().wrap("<a href ='" + navTarget + "'/>");

            }).fail(function(){

                that.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Failed);

            });

            that.tileType = that.oKpiTileView.oConfig.TILE_PROPERTIES.tileType;
            this.oTileApi = that.viewData.chip; // instance specific CHIP API
            if (this.oTileApi.preview.isEnabled()){
                this.doDummyProcess();
            } else {
                this.doProcess();
            }
        },
        setNoData : function(){
            try {
                this._updateTileModel({
                    value : "",
                    scale : "",
                    unit : "",
                    footerNum : this.oResourceBundle.getText("sb.noDataAvailable"),
                    footerComp : this.oResourceBundle.getText("sb.noDataAvailable") // in case of comparison( and mm) tiles
                });
                this.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);
            }catch(e){
                //do nothing
            }
        },
        doProcess : function(){

            var that = this;
            var oStaticArea = sap.ui.getCore().getUIArea(sap.ui.getCore().getStaticAreaRef());
            var leftView,rightView;

            this.system = this.oTileApi.url.getApplicationSystem();
            this.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loading);
            var tileType = that.tileType.split("-")[1];
            try {
                var viewName;

                viewName = "tiles.indicatornumeric.NumericTile";
                leftView = that._getView(viewName,this.deferred_left);
                oStaticArea.addContent(leftView);

                switch (tileType){
                case "CM":
                    viewName = "tiles.indicatorcomparison.ComparisonTile";
                    rightView = that._getView(viewName,this.deferred_right);
                    oStaticArea.addContent(rightView);
                    break;

                case "CT":
                    viewName = "tiles.indicatorcontribution.ContributionTile";
                    rightView = that._getView(viewName,this.deferred_right);
                    oStaticArea.addContent(rightView);
                    break;

                case "AT":
                    viewName = "tiles.indicatordeviation.DeviationTile";
                    rightView = that._getView(viewName,this.deferred_right);
                    oStaticArea.addContent(rightView);
                    break;

                case "TT":
                    viewName = "tiles.indicatorArea.AreaChartTile";
                    rightView = that._getView(viewName,this.deferred_right);
                    oStaticArea.addContent(rightView);
                    break;

                }
            } catch(e) {
                this.logError(e);
            }
        },

        setTextInTile : function(){

            var that = this;
            var titleObj = sap.ushell.components.tiles.indicatorTileUtils.util.getTileTitleSubtitle(this.oTileApi);
            this._updateTileModel({

                header : titleObj.title || sap.ushell.components.tiles.indicatorTileUtils.util.getChipTitle(that.oConfig ),
                subheader : titleObj.subTitle || sap.ushell.components.tiles.indicatorTileUtils.util.getChipSubTitle(that.oConfig )
            });
        },

        _updateTileModel : function(newData) {
            var modelData  = this.getTile().getModel().getData();
            jQuery.extend(modelData,newData);
            this.getTile().getModel().setData(modelData);
        },
        getTile : function() {
            return this.oKpiTileView.oGenericTile;
        },

        _getView : function(viewName,deferredObj){
            var viewData = this.oKpiTileView.getViewData();
            var view = sap.ui.view({
                type: sap.ui.core.mvc.ViewType.JS,
                viewName: viewName,
                viewData: jQuery.extend(true, {}, viewData, {parentController : this}, {deferredObj : deferredObj})
            });
            return view;
        },

        logError : function(err){
            this._updateTileModel({
                value : "",
                scale : "",
                unit: ""
            });
            if (this.getView().getViewData().deferredObj) {
                this.getView().getViewData().deferredObj.reject();
            }
        },

        doDummyProcess : function(){

            var that = this;
            try {
                that.setTextInTile();

                switch (that.tileType){
                case "DT-CM":
                    that._updateTileModel({
                        value: 1,
                        size: sap.suite.ui.commons.InfoTileSize.Auto,
                        frameType: sap.suite.ui.commons.FrameType.TwoByOne,
                        state: sap.suite.ui.commons.LoadState.Loading,
                        valueColor:sap.suite.ui.commons.InfoTileValueColor.Good,
                        indicator: sap.suite.ui.commons.DeviationIndicator.None,
                        title : "Liquidity Structure",
                        footer : "Current Quarter",
                        description: "Apr 1st 2013 (B$)",
                        data: [
                               { title: "Measure 1", value: 1, color: "Good"},
                               { title: "Measure 2", value: 2, color: "Good" },
                               { title: "Measure 3", value: 3, color: "Good" }
                               ]
                    });

                    break;

                case "DT-AT":
                    that._updateTileModel({
                        valueColor: "Good",
                        value : 100,
                        frameType: sap.suite.ui.commons.FrameType.TwoByOne,
                        unit: "USD",
                        actual: { value: 120, color: sap.suite.ui.commons.InfoTileValueColor.Good},
                        targetValue: 100,
                        thresholds: [
                                     { value: 0, color: sap.suite.ui.commons.InfoTileValueColor.Error },
                                     { value: 50, color: sap.suite.ui.commons.InfoTileValueColor.Critical },
                                     { value: 150, color: sap.suite.ui.commons.InfoTileValueColor.Critical },
                                     { value: 200, color: sap.suite.ui.commons.InfoTileValueColor.Error }
                                     ],
                                     showActualValue: true,
                                     showTargetValue: true
                    });

                    break;

                case "DT-CT":
                    that._updateTileModel({
                        value: 8888,
                        size: sap.suite.ui.commons.InfoTileSize.Auto,
                        frameType:sap.suite.ui.commons.FrameType.TwoByOne,
                        state: sap.suite.ui.commons.LoadState.Loading,
                        valueColor:sap.suite.ui.commons.InfoTileValueColor.Error,
                        indicator: sap.suite.ui.commons.DeviationIndicator.None,
                        title : "US Profit Margin",
                        footer : "Current Quarter",
                        description: "Maximum deviation",
                        data: [
                               { title: "Americas", value: 10, color: "Neutral",displayValue:"" },
                               { title: "EMEA", value: 50, color: "Neutral" ,displayValue:""},
                               { title: "APAC", value: -20, color: "Neutral" ,displayValue:""}
                               ]
                    });
                    break;

                case "DT-TT":
                    this._updateTileModel({

                        value: 8888,
                        size: sap.suite.ui.commons.InfoTileSize.Auto,
                        frameType:sap.suite.ui.commons.FrameType.TwoByOne,
                        state: sap.suite.ui.commons.LoadState.Loading,
                        valueColor:sap.suite.ui.commons.InfoTileValueColor.Error,
                        indicator: sap.suite.ui.commons.DeviationIndicator.None,
                        title : "Liquidity Structure",
                        footer : "Current Quarter",
                        description: "Apr 1st 2013 (B$)",

                        width: "100%",
                        height: "100%",
                        chart: {
                            color:"Good",
                            data: [
                                   {day: 0, balance: 0},
                                   {day: 30, balance: 20},
                                   {day: 60, balance: 20},
                                   {day: 100, balance: 80}
                                   ]
                        },
                        target: {
                            color:"Error",
                            data: [
                                   {day: 0, balance: 0},
                                   {day: 30, balance: 30},
                                   {day: 60, balance: 40},
                                   {day: 100, balance: 90}
                                   ]
                        },
                        maxThreshold: {
                            color: "Good",
                            data: [
                                   {day: 0, balance: 0},
                                   {day: 30, balance: 40},
                                   {day: 60, balance: 50},
                                   {day: 100, balance: 100}
                                   ]
                        },
                        innerMaxThreshold: {
                            color: "Error",
                            data: [
                                   ]
                        },
                        innerMinThreshold: {
                            color: "Neutral",
                            data: [
                                   ]
                        },
                        minThreshold: {
                            color: "Error",
                            data: [
                                   {day: 0, balance: 0},
                                   {day: 30, balance: 20},
                                   {day: 60, balance: 30},
                                   {day: 100, balance: 70}
                                   ]
                        },
                        minXValue: 0,
                        maxXValue: 100,
                        minYValue: 0,
                        maxYValue: 100,
                        firstXLabel: { label: "June 123", color: "Error"   },
                        lastXLabel: { label: "June 30", color: "Error" },
                        firstYLabel: { label: "0M", color: "Good" },
                        lastYLabel: { label: "80M", color: "Critical" },
                        minLabel: { },
                        maxLabel: { }
                    });
                    break;

                }
                //that.oKpiTileView.getViewData().deferredObj.resolve();

            } catch(e) {
                //that.oKpiTileView.getViewData().deferredObj.reject();

            }

        }

    });
}());
sap.ui.controller("tiles.indicatorDualComparison.DualComparison", {

    /* TODO: remove the comments and fix the bugs */
    /*eslint-disable no-undef*/
    /*eslint-disable no-unused-vars*/
    /*eslint-disable block-scoped-vars*/


    onInit:function(){

        var that = this;
        this.firstTimeVisible = false;
        this.oDualComparisonView = this.getView();
        this.oChip = this.oDualComparisonView.getViewData().chip;
        if (this.oChip.visible) {
            this.oChip.visible.attachVisible(this.visibleHandler.bind(this));
        }
        this.system = this.oChip.url.getApplicationSystem();
        this.oDualComparisonView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loading);
        try {
            sap.ushell.components.tiles.indicatorTileUtils.util.getParsedChip(
                    this.oChip.configuration.getParameterValueAsString("tileConfiguration"), function(config){
                        that.oConfig = config;
                        if (that.oChip.preview) {
                            that.oChip.preview.setTargetUrl(sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system));
                        }
                        if (that.oChip.preview.isEnabled()){
                            that.setTitle();
                            that._updateTileModel({
                                value: 1,
                                size: sap.suite.ui.commons.InfoTileSize.Auto,
                                frameType:"TwoByOne",
                                state: sap.suite.ui.commons.LoadState.Loading,
                                valueColor:sap.suite.ui.commons.InfoTileValueColor.Good,
                                indicator: sap.suite.ui.commons.DeviationIndicator.None,
                                title : "Liquidity Structure",
                                footer : "Current Quarter",
                                description: "Apr 1st 2013 (B$)",
                                data: [
                                    { title: "Measure 1", value: 1, color: "Good"},
                                    { title: "Measure 2", value: 2, color: "Good" },
                                    { title: "Measure 3", value: 3, color: "Good" }
                                ]
                            });
                            that.oDualComparisonView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);
                        } else {

                            that.oConfig.TILE_PROPERTIES.FINALVALUE;
                            that.setTitle();
                            that.oDualComparisonView.oGenericTile.attachPress(function(){
                                sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(that.comparisionChartODataRef);
                                sap.ushell.components.tiles.indicatorTileUtils.cache.setKpivalueById(that.oConfig.TILE_PROPERTIES.id, null);
                                window.location.hash = sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system);
                            });
                            if (Number(that.oChip.configuration.getParameterValueAsString("isSufficient"))){
                                sap.ushell.components.tiles.indicatorTileUtils.cache.setEvaluationById(that.oConfig.TILE_PROPERTIES.id,that.oConfig);
                                that.flowWithoutDesignTimeCall();
                            } else {
                                that.flowWithDesignTimeCall();
                            }
                        }
                    }
            );
        } catch(e) {
            this.logError(e);
        }
    },

    getTile : function() {
        return this.oDualComparisonView.oGenericTile;
    },

    setTitle : function(){
        var that = this;
        var titleObj = sap.ushell.components.tiles.indicatorTileUtils.util.getTileTitleSubtitle(this.oChip);
        this._updateTileModel({
            header : titleObj.title || sap.ushell.components.tiles.indicatorTileUtils.util.getChipTitle(that.oConfig ),
            subheader : titleObj.subTitle || sap.ushell.components.tiles.indicatorTileUtils.util.getChipSubTitle(that.oConfig )
        });
    },

    _updateTileModel : function(newData) {
        var modelData  = this.getTile().getModel().getData();
        jQuery.extend(modelData,newData);
        this.getTile().getModel().setData(modelData);
    },

    flowWithoutDesignTimeCall: function(){
        var that = this;
        this.DEFINITION_DATA = this.oConfig;
        this._updateTileModel(this.DEFINITION_DATA);
        if (this.oChip.visible.isVisible() && !this.firstTimeVisible){
            this.firstTimeVisible = true;
            this.fetchKpiValue(function(kpiValue){
                this.CALCULATED_KPI_VALUE = kpiValue;
                that.oDualComparisonView.oGenericTile.setFrameType("TwoByOne");
                that.oDualComparisonView.oGenericTile.removeAllTileContent();
                that.oDualComparisonView.oGenericTile.addTileContent(that.oDualComparisonView.oNumericTile);
                that.oDualComparisonView.oGenericTile.addTileContent(that.oDualComparisonView.oComparisonTile);

                var calculatedKpiValue = this.CALCULATED_KPI_VALUE;
                var applyColor,calculatedValueForScaling;
                for (var i = 0; i < calculatedKpiValue.length; i++){
                    if (calculatedKpiValue[i].title == that.DEFINITION_DATA.EVALUATION.COLUMN_NAME){
                        calculatedValueForScaling = calculatedKpiValue[i].value;
                        applyColor = calculatedKpiValue[i].color || "Neutral";
                        that._updateTileModel({
                            value : sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(Number(calculatedValueForScaling),that.oConfig.EVALUATION.SCALING,that.oConfig.EVALUATION.DECIMAL_PRECISION).toString(),
                            valueColor : applyColor
                        });
                        break;
                    }

                }
                if (!applyColor && !calculatedValueForScaling) {

                    applyColor = that.DEFINITION_DATA.valueColor;
                    calculatedValueForScaling = that.DEFINITION_DATA.value;

                }
                this._updateTileModel({
                    value : sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(Number(calculatedValueForScaling),that.oConfig.EVALUATION.SCALING,that.oConfig.EVALUATION.DECIMAL_PRECISION).toString(),
                    data : this.CALCULATED_KPI_VALUE
                });
                var navTarget = sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system);
                that.oDualComparisonView.oGenericTile.$().wrap("<a href ='" + navTarget + "'/>");
                this.oDualComparisonView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);

                var status = "";
                if (applyColor == "Error") {
                    status = "sb.error";
                }
                if (applyColor == "Neutral") {
                    status = "sb.neutral";
                }
                if (applyColor == "Critical") {
                    status = "sb.critical";
                }
                if (applyColor == "Good") {
                    status = "sb.good";
                }
                var sThresholdObj = that.setThresholdValues();

                var m1,m2,m3,v1,v2,v3,c1,c2,c3;
                if (this.CALCULATED_KPI_VALUE && this.CALCULATED_KPI_VALUE[0]){
                    m1 = this.CALCULATED_KPI_VALUE[0].title;
                    v1 = this.CALCULATED_KPI_VALUE[0].value;
                    c1 = sap.ushell.components.tiles.indicatorTileUtils.util.getSemanticColorName(this.CALCULATED_KPI_VALUE[0].color);
                }
                if (this.CALCULATED_KPI_VALUE && this.CALCULATED_KPI_VALUE[1]){
                    m2 = this.CALCULATED_KPI_VALUE[1].title;
                    v2 = this.CALCULATED_KPI_VALUE[1].value;
                    c2 = sap.ushell.components.tiles.indicatorTileUtils.util.getSemanticColorName(this.CALCULATED_KPI_VALUE[1].color);
                }
                if (this.CALCULATED_KPI_VALUE && this.CALCULATED_KPI_VALUE[2]){
                    m3 = this.CALCULATED_KPI_VALUE[2].title;
                    v3 = this.CALCULATED_KPI_VALUE[2].value;
                    c3 = sap.ushell.components.tiles.indicatorTileUtils.util.getSemanticColorName(this.CALCULATED_KPI_VALUE[2].color);
                }

                var valueObjNumeric = {
                        status : status,
                        actual : calculatedValueForScaling,
                        target : sThresholdObj.targetValue,
                        cH : sThresholdObj.criticalHighValue,
                        wH : sThresholdObj.warningHighValue,
                        wL : sThresholdObj.warningLowValue,
                        cL : sThresholdObj.criticalLowValue
                };
                var valueObjComparison = {
                        m1 : m1,
                        v1 : v1,
                        c1 : c1,
                        m2 : m2,
                        v2 : v2,
                        c2 : c2,
                        m3 : m3,
                        v3 : v3,
                        c3 : c3

                };

                var oControlNumeric = that.oDualComparisonView.oGenericTile.getTileContent()[0].getContent();
                var oControlComparison =  that.oDualComparisonView.oGenericTile.getTileContent()[1].getContent();
                sap.ushell.components.tiles.indicatorTileUtils.util.setTooltipInTile(oControlNumeric,"NT",valueObjNumeric);
                sap.ushell.components.tiles.indicatorTileUtils.util.setTooltipInTile(oControlComparison,"COMP",valueObjComparison);


            }, this.logError);
        }
    },

    flowWithDesignTimeCall: function() {
        var that = this;
        try {
            var evaluationData = sap.ushell.components.tiles.indicatorTileUtils.cache.getEvaluationById(this.oConfig.EVALUATION.ID);
            if (evaluationData){
                that.oConfig.EVALUATION_FILTERS = evaluationData.EVALUATION_FILTERS;
                that.flowWithoutDesignTimeCall();
            } else {
                sap.ushell.components.tiles.indicatorTileUtils.util.getFilterFromRunTimeService(this.oConfig,function(filter){
                    that.oConfig.EVALUATION_FILTERS = filter;
                    sap.ushell.components.tiles.indicatorTileUtils.cache.setEvaluationById(that.oConfig.TILE_PROPERTIES.id,that.oConfig);
                    that.flowWithoutDesignTimeCall();
                });
            }
        } catch(e) {
            this.logError(e);
        }
    },

    fetchKpiValue: function(fnSuccess, fnError){

        var that = this;

        try {
            /* Preparing arguments for the prepareQueryServiceUri function */
            var sUri = this.oConfig.EVALUATION.ODATA_URL;
            var entitySet = this.oConfig.EVALUATION.ODATA_ENTITYSET;
            if (this.oConfig.TILE_PROPERTIES.semanticMeasure){
                /*
                 * Semantic Measure Inclusion (for Future use)
                 * var measure = [];
                 * measure.push(this.oConfig.EVALUATION.COLUMN_NAME);
                 * measure.push(this.oConfig.TILE_PROPERTIES.semanticMeasure);
                 * */
                var measure = this.oConfig.EVALUATION.COLUMN_NAME + "," + this.oConfig.TILE_PROPERTIES.semanticMeasure;
            } else {

                var measure = this.oConfig.EVALUATION.COLUMN_NAME;
                var measures = measure;
                if (this.oConfig.TILE_PROPERTIES.COLUMN_NAMES){
                    for (var j = 0; j < this.oConfig.TILE_PROPERTIES.COLUMN_NAMES.length; j++){
                        if (this.oConfig.TILE_PROPERTIES.COLUMN_NAMES[j].COLUMN_NAME != this.oConfig.EVALUATION.COLUMN_NAME) {
                            measures = measures + "," + this.oConfig.TILE_PROPERTIES.COLUMN_NAMES[j].COLUMN_NAME;
                        }

                    }

                }

            }

            var data = this.oConfig.EVALUATION_VALUES;
            var cachedValue = sap.ushell.components.tiles.indicatorTileUtils.cache.getKpivalueById(that.oConfig.TILE_PROPERTIES.id);
            if (!cachedValue){
                var variants = sap.ushell.components.tiles.indicatorTileUtils.util.prepareFilterStructure(this.oConfig.EVALUATION_FILTERS,this.oConfig.ADDITIONAL_FILTERS);

                var orderByObject = {};
                orderByObject["0"] = measure + ",asc";
                orderByObject["1"] = measure + ",desc";

                var orderByElement = orderByObject[this.oConfig.TILE_PROPERTIES.sortOrder || "0"].split(",");
                var finalQuery = sap.ushell.components.tiles.indicatorTileUtils.util.prepareQueryServiceUri(that.oChip.url.addSystemToServiceUrl(sUri), entitySet, measures,null, variants, 3);
                if (this.oConfig.TILE_PROPERTIES.semanticMeasure) {
                    finalQuery.uri += "&$orderby=" + orderByElement[0] + " " + orderByElement[2];
                } else {
                    finalQuery.uri += "&$orderby=" + orderByElement[0] + " " + orderByElement[1];
                }

                this.writeData = {};
                this.comparisionChartODataRef = finalQuery.model.read(finalQuery.uri, null, null, true, function(data) {
                    if (data && data.results && data.results.length) {
                        if (finalQuery.unit){

                            that.writeData.unit = finalQuery.unit;

                        }

                        that.oConfig.TILE_PROPERTIES.FINALVALUE = data;
                        that.oConfig.TILE_PROPERTIES.FINALVALUE = that._processDataForComparisonChart(that.oConfig.TILE_PROPERTIES.FINALVALUE,measures.split(",")[0],finalQuery.unit);
                        that.writeData.data = data;
                        var trendIndicator, calculatedValueForScaling;


                        for (var i = 0; i < that.oConfig.TILE_PROPERTIES.FINALVALUE.length; i++){
                            if (that.oConfig.TILE_PROPERTIES.FINALVALUE[i].title == that.DEFINITION_DATA.EVALUATION.COLUMN_NAME){
                                that.writeData.numericData = that.oConfig.TILE_PROPERTIES.FINALVALUE[i];
                                calculatedValueforScaling = that.oConfig.TILE_PROPERTIES.FINALVALUE[i].value;
                                /* trendIndicator =*/ that.getTrendIndicator(that.setThresholdValues().trendValue, calculatedValueforScaling);

                                that._updateTileModel({
                                    valueColor : that.oConfig.TILE_PROPERTIES.FINALVALUE[i].color,
                                    value : sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(Number(calculatedValueForScaling),that.oConfig.EVALUATION.SCALING,that.oConfig.EVALUATION.DECIMAL_PRECISION).toString()

                                });
                                break;
                            }
                        }


                        sap.ushell.components.tiles.indicatorTileUtils.cache.setKpivalueById(that.oConfig.TILE_PROPERTIES.id, that.writeData);
                        fnSuccess.call(that,that.oConfig.TILE_PROPERTIES.FINALVALUE);
                    } else if (data.results.length == 0){
                        that.oConfig.TILE_PROPERTIES.FINALVALUE = data;
                        that.writeData.data = data;
                        sap.ushell.components.tiles.indicatorTileUtils.cache.setKpivalueById(that.oConfig.TILE_PROPERTIES.id, that.writeData);
                        fnSuccess.call(that,that.oConfig.TILE_PROPERTIES.FINALVALUE);
                    } else {
                        fnError.call(that,"no Response from QueryServiceUri");
                    }
                },function(eObject) {
                    if (eObject && eObject.response) {
                        jQuery.sap.log.error(eObject.message + " : " + eObject.request.requestUri);
                        fnError.call(that,eObject);
                    }
                });

                if (!that.writeData.numericData){

                    var variantData = sap.ushell.components.tiles.indicatorTileUtils.util.prepareFilterStructure(
                            that.DEFINITION_DATA.EVALUATION_FILTERS,that.DEFINITION_DATA.ADDITIONAL_FILTERS);

                    var oQuery = sap.ushell.components.tiles.indicatorTileUtils.util.prepareQueryServiceUri(
                            that.oChip.url.addSystemToServiceUrl(sUri), entitySet, measure, null, variantData);
                    if (oQuery) {
                        that.QUERY_SERVICE_MODEL = oQuery.model;
                        that.queryUriForKpiValue = oQuery.uri;

                        that.numericODataReadRef = that.QUERY_SERVICE_MODEL.read(oQuery.uri, null, null, true, function(data) {
                            if (data && data.results && data.results.length) {

                                if (oQuery.unit){
                                    that._updateTileModel({
                                        unitNumeric : data.results[0][oQuery.unit.name]
                                    });

                                    that.writeData.unitNumeric = oQuery.unit;
                                    that.writeData.unitNumeric.name = oQuery.unit.name;
                                }
                                that.writeData.numericData = data.results[0];
                                that.DEFINITION_DATA.value = that.writeData.numericData[that.DEFINITION_DATA.EVALUATION.COLUMN_NAME];
                                that.writeData.numericData.color = that.getTrendColor(that.setThresholdValues());
                                that.DEFINITION_DATA.valueColor = that.writeData.numericData.color;

                                var oScaledValue = "";
                                var calculatedValueForScaling = data.results[0][that.DEFINITION_DATA.EVALUATION.COLUMN_NAME];
                                var trendIndicator = that.getTrendIndicator(that.setThresholdValues().trendValue,calculatedValueForScaling);
                                if (that.oConfig.EVALUATION.SCALING == -2){
                                    calculatedValueForScaling *= 100;
                                    that.getView().oNumericContent.setFormatterValue(false);
                                }
                                oScaledValue = sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(Number(calculatedValueForScaling),that.oConfig.EVALUATION.SCALING,that.oConfig.EVALUATION.DECIMAL_PRECISION);
                                if (that.oConfig.EVALUATION.SCALING == -2) {
                                    that._updateTileModel({
                                        scale : "%"
                                    });
                                }

                                that._updateTileModel({
                                    value : oScaledValue.toString(),
                                    valueColor : that.writeData.numericData.color,
                                    indicator : trendIndicator

                                });
                            } else {
                                fnError.call(that,"no Response from QueryServiceUri");
                            }
                        });
                    }

                }

            } else {
                if (cachedValue.unit){
                    that._updateTileModel({
                        unit : cachedValue.data.results[0][cachedValue.unit.name]
                    });
                }
                if (cachedValue.data && cachedValue.data.results && cachedValue.data.results.length) {
                    //dimension = cachedValue.dimension;
                    that.oConfig.TILE_PROPERTIES.FINALVALUE = cachedValue.data;
                    that._updateTileModel({
                        value : cachedValue.data.results[0][that.DEFINITION_DATA.EVALUATION.COLUMN_NAME]
                    });
                    that.oConfig.TILE_PROPERTIES.FINALVALUE = that._processDataForComparisonChart(that.oConfig.TILE_PROPERTIES.FINALVALUE,measures,that.writeData.unit);
                    fnSuccess.call(that,that.oConfig.TILE_PROPERTIES.FINALVALUE);
                } else if (data.results.length == 0){
                    that.oConfig.TILE_PROPERTIES.FINALVALUE = cachedValue.data;
                    fnSuccess.call(that,that.oConfig.TILE_PROPERTIES.FINALVALUE);
                } else {
                    fnError.call(that,"no Response from QueryServiceUri");
                }
            }
        } catch(e) {
            fnError.call(that,e);
        }
    },

    formSelectStatement : function(object) {
        var tmpArray = Object.keys(object);
        var sFormedMeasure = "";
        for (var i = 0; i < tmpArray.length; i++) {
            if ((object[tmpArray[i]] !== undefined) && (object.fullyFormedMeasure)) {
                sFormedMeasure += "," + object[tmpArray[i]];
            }
        }
        return sFormedMeasure;
    },

    getTrendIndicator : function(trendValue,value) {
        var that = this;
        trendValue = Number(trendValue);
        try {
            var trendIndicator = sap.suite.ui.commons.DeviationIndicator.None;
            if (trendValue > value){
                trendIndicator = sap.suite.ui.commons.DeviationIndicator.Down;
            } else if (trendValue < value) {
                trendIndicator = sap.suite.ui.commons.DeviationIndicator.Up;
            }
            return trendIndicator;
        } catch(e) {
            that.logError(e);
        }
    },

    getTrendColor : function(oThresholdObj){
        var that = this;
        var criticalHighValue,
            warningHighValue,
            criticalLowValue,
            warningLowValue;
        try {
            var improvementDirection = this.DEFINITION_DATA.EVALUATION.GOAL_TYPE;
            //var evalValue = this.DEFINITION_DATA.EVALUATION_VALUES;
            var returnColor = sap.suite.ui.commons.InfoTileValueColor.Neutral;
            if (improvementDirection === "MI") {
                if (oThresholdObj.criticalHighValue && oThresholdObj.warningHighValue) {
                    criticalHighValue = Number(oThresholdObj.criticalHighValue);
                    warningHighValue = Number(oThresholdObj.warningHighValue);
                    if (this.CALCULATED_KPI_VALUE < warningHighValue) {
                        returnColor = sap.suite.ui.commons.InfoTileValueColor.Good;
                    } else if (this.CALCULATED_KPI_VALUE <= criticalHighValue) {
                        returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
                    } else {
                        returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
                    }
                }
            } else if (improvementDirection === "MA") {
                if (oThresholdObj.criticalLowValue && oThresholdObj.warningLowValue) {
                    criticalLowValue = Number(oThresholdObj.criticalLowValue);
                    warningLowValue = Number(oThresholdObj.warningLowValue);
                    if (this.CALCULATED_KPI_VALUE < criticalLowValue) {
                        returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
                    } else if (this.CALCULATED_KPI_VALUE <= warningLowValue) {
                        returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
                    } else {
                        returnColor = sap.suite.ui.commons.InfoTileValueColor.Good;
                    }
                }
            } else {
                if (oThresholdObj.warningLowValue && oThresholdObj.warningHighValue && oThresholdObj.criticalLowValue && oThresholdObj.criticalHighValue) {
                    criticalHighValue = Number(oThresholdObj.criticalHighValue);
                    warningHighValue = Number(oThresholdObj.warningHighValue);
                    warningLowValue = Number(oThresholdObj.warningLowValue);
                    criticalLowValue = Number(oThresholdObj.criticalLowValue);
                    if (this.CALCULATED_KPI_VALUE < criticalLowValue || this.CALCULATED_KPI_VALUE > criticalHighValue) {
                        returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
                    } else if ((this.CALCULATED_KPI_VALUE >= criticalLowValue && this.CALCULATED_KPI_VALUE <= warningLowValue) ||
                            (this.CALCULATED_KPI_VALUE >= warningHighValue && this.CALCULATED_KPI_VALUE <= criticalHighValue)
                    ) {
                        returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
                    } else {
                        returnColor = sap.suite.ui.commons.InfoTileValueColor.Good;
                    }
                }
            }
            return returnColor;
        } catch(e) {
            that.logError(e);
        }
    },


    _processDataForComparisonChart: function(data,measure,unit){
        //var semanticMeasure = this.oConfig.TILE_PROPERTIES.semanticObject;
        var finalOutput = [], LABEL_MAPPING = {}, i, tempObject, l;
        var tempVar;
        var aTitles = [];
        var that = this;

        for (i = 0; i < data.results.length; i++) {
            var eachData = data.results[i];
        }
        aTitles = sap.ushell.components.tiles.indicatorTileUtils.util.getAllMeasuresWithLabelText(this.oConfig.EVALUATION.ODATA_URL, this.oConfig.EVALUATION.ODATA_ENTITYSET);
        for (i = 0, l = aTitles.length; i < l; i++) {
            tempObject = aTitles[i];
            LABEL_MAPPING[tempObject.key] = tempObject.value;
        }
        var columnName = that.oConfig.TILE_PROPERTIES.COLUMN_NAMES || that.oConfig.EVALUATION.COLUMN_NAMES;
        for (i = 0; i < columnName.length; i++){
            var temp = {};
            var columnObject = columnName[i];
            temp.value = Number(eachData[columnObject.COLUMN_NAME]);
            var calculatedValueForScaling = Number(eachData[columnObject.COLUMN_NAME]);
            if (that.oConfig.EVALUATION.SCALING == -2) {
                calculatedValueForScaling *= 100;
            }
            tempVar = sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(calculatedValueForScaling, that.oConfig.EVALUATION.SCALING,that.oConfig.EVALUATION.DECIMAL_PRECISION);
            if (that.oConfig.EVALUATION.SCALING == -2) {
                tempVar += " %";
            }
            temp.displayValue = tempVar.toString();
            if (unit[i] && eachData[unit[i].name]){
                temp.displayValue += " " + eachData[unit[i].name];
            }
            temp.color = columnObject.semanticColor;
            temp.title = LABEL_MAPPING[columnObject.COLUMN_NAME] || columnObject.COLUMN_NAME;

            finalOutput.push(temp);

        }

        return finalOutput;
    },
    setThresholdValues : function(){
        var that = this;
        try {
            var oThresholdObject = {};
            oThresholdObject.fullyFormedMeasure = this.DEFINITION_DATA.EVALUATION.COLUMN_NAME;
            if (this.DEFINITION_DATA.EVALUATION.VALUES_SOURCE == "MEASURE"){
                switch (this.DEFINITION_DATA.EVALUATION.GOAL_TYPE){
                case "MI" :
                    oThresholdObject.sWarningHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WH", "MEASURE");
                    oThresholdObject.sCriticalHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CH", "MEASURE");
                    oThresholdObject.sTarget =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
                    oThresholdObject.sTrend =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
                    oThresholdObject.fullyFormedMeasure += that.formSelectStatement(oThresholdObject);
                    break;
                case "MA" :
                    oThresholdObject.sWarningLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WL", "MEASURE");
                    oThresholdObject.sCriticalLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CL", "MEASURE");
                    oThresholdObject.sTarget =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
                    oThresholdObject.sTrend =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
                    oThresholdObject.fullyFormedMeasure += that.formSelectStatement(oThresholdObject);
                    break;
                case "RA" :
                    oThresholdObject.sWarningHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WH", "MEASURE");
                    oThresholdObject.sCriticalHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CH", "MEASURE");
                    oThresholdObject.sTarget =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
                    oThresholdObject.sTrend =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
                    oThresholdObject.sWarningLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WL", "MEASURE");
                    oThresholdObject.sCriticalLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CL", "MEASURE");
                    oThresholdObject.fullyFormedMeasure += that.formSelectStatement(oThresholdObject);
                    break;
                }
            } else {
                oThresholdObject.criticalHighValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CH", "FIXED");
                oThresholdObject.criticalLowValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CL", "FIXED");
                oThresholdObject.warningHighValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WH", "FIXED");
                oThresholdObject.warningLowValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WL", "FIXED");
                oThresholdObject.targetValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "FIXED");
                oThresholdObject.trendValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "FIXED");
            }
            return oThresholdObject;
        } catch(e) {
            that.logError(e);
        }
    },

    logError: function(err){
        this.oDualComparisonView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Failed);
        this.oDualComparisonView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Failed);
        sap.ushell.components.tiles.indicatorTileUtils.util.logError(err);
    },
    refreshHandler: function (oController) {
        if (!oController.firstTimeVisible){
            if (Number(this.oChip.configuration.getParameterValueAsString("isSufficient"))) {
                oController.flowWithoutDesignTimeCall();
            } else {
                oController.flowWithDesignTimeCall();
            }
        }

    },
    visibleHandler: function (isVisible) {
        if (!isVisible) {
            this.firstTimeVisible = false;
            sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(this.comparisionChartODataRef);
        }
        if (isVisible) {
            this.refreshHandler(this);
        }
    },
    onExit : function(){
        sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(this.comparisionChartODataRef);
    }
});
sap.ui.controller("tiles.indicatorDualContribution.DualContribution", {

    onInit:function(){

        var that = this;
        that.writeData = {};
        this.firstTimeVisible = false;
        this.oDualContributionView = this.getView();
        this.oChip = this.oDualContributionView.getViewData().chip;
        if (this.oChip.visible) {
            this.oChip.visible.attachVisible(this.visibleHandler.bind(this));
        }
        this.system = this.oChip.url.getApplicationSystem();
        this.oDualContributionView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loading);
        try {
            sap.ushell.components.tiles.indicatorTileUtils.util.getParsedChip(
                    this.oChip.configuration.getParameterValueAsString("tileConfiguration"), function(config){
                        that.oConfig = config;
                        if (that.oChip.preview) {
                            that.oChip.preview.setTargetUrl(sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system));
                        }
                        if (that.oChip.preview.isEnabled()){
                            that.setTitle();
                            that._updateTileModel({
                                value: 8888,
                                size: sap.suite.ui.commons.InfoTileSize.Auto,
                                frameType:"TwoByOne",
                                state: sap.suite.ui.commons.LoadState.Loading,
                                valueColor:sap.suite.ui.commons.InfoTileValueColor.Error,
                                indicator: sap.suite.ui.commons.DeviationIndicator.None,
                                title : "US Profit Margin",
                                footer : "Current Quarter",
                                description: "Maximum deviation",
                                data: [
                                   { title: "Americas", value: 10, color: "Neutral",displayValue:"" },
                                   { title: "EMEA", value: 50, color: "Neutral" ,displayValue:""},
                                   { title: "APAC", value: -20, color: "Neutral" ,displayValue:""}
                                ]
                            });

                            that.oDualContributionView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);
                        } else {
                            that.oConfig.TILE_PROPERTIES.FINALVALUE;
                            that.setTitle();
                            that.oDualContributionView.oGenericTile.attachPress(function(){
                                sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(that.comparisionChartODataRef);
                                sap.ushell.components.tiles.indicatorTileUtils.cache.setKpivalueById(that.oConfig.TILE_PROPERTIES.id, null);
                                window.location.hash = sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system);
                            });
                            if (Number(that.oChip.configuration.getParameterValueAsString("isSufficient"))){
                                sap.ushell.components.tiles.indicatorTileUtils.cache.setEvaluationById(that.oConfig.TILE_PROPERTIES.id,that.oConfig);
                                that.flowWithoutDesignTimeCall();
                            } else {
                                that.flowWithDesignTimeCall();
                            }
                        }
                    }
            );
        } catch(e) {
            this.logError(e);
        }
    },
    getTile : function() {
        return this.oDualContributionView.oGenericTile;
    },

    setTitle : function(){
        var that = this;
        var titleObj = sap.ushell.components.tiles.indicatorTileUtils.util.getTileTitleSubtitle(this.oChip);
        this._updateTileModel({
            header : titleObj.title || sap.ushell.components.tiles.indicatorTileUtils.util.getChipTitle(that.oConfig ),
            subheader : titleObj.subTitle || sap.ushell.components.tiles.indicatorTileUtils.util.getChipSubTitle(that.oConfig )
        });
    },

    _updateTileModel : function(newData) {
        var modelData  = this.getTile().getModel().getData();
        jQuery.extend(modelData,newData);
        this.getTile().getModel().setData(modelData);
        this.getTile().getModel().updateBindings();
    },

    flowWithoutDesignTimeCall: function(){
        var that = this;
        this.DEFINITION_DATA = this.oConfig;
        this._updateTileModel(this.DEFINITION_DATA);
        if (this.oChip.visible.isVisible() && !this.firstTimeVisible) {
            this.firstTimeVisible = true;
            this.fetchKpiValue(function(kpiValue,calculatedValueForScaling){
                this.CALCULATED_KPI_VALUE = kpiValue;
                if (that.oConfig.TILE_PROPERTIES.frameType == "TwoByOne"){
                    that.oDualContributionView.oGenericTile.setFrameType("TwoByOne");
                    that.oDualContributionView.oGenericTile.removeAllTileContent();
                    that.oDualContributionView.oGenericTile.addTileContent(that.oDualContributionView.oNumericTile);
                    that.oDualContributionView.oGenericTile.addTileContent(that.oDualContributionView.oComparisonTile);
                } else {
                    that.oDualContributionView.oGenericTile.setFrameType("OneByOne");
                    that.oDualContributionView.oGenericTile.removeAllTileContent();
                    that.oDualContributionView.oGenericTile.addTileContent(that.oDualContributionView.oComparisonTile);
                }
                var data = this.CALCULATED_KPI_VALUE;
                var applyColor = this.DEFINITION_DATA.TILE_PROPERTIES.semanticColorContribution;
                for (var i = 0; i < this.CALCULATED_KPI_VALUE.length; i++){
                    data[i].color = applyColor;
                }

                this._updateTileModel({
                    data : data

                });
                var sThresholdObj = that.setThresholdValues();
                var navTarget = sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system);
                that.oDualContributionView.oGenericTile.$().wrap("<a href ='" + navTarget + "'/>");
                this.oDualContributionView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);
                var status = "";
                if (applyColor == "Error") {
                    status = "sb.error";
                }
                if (applyColor == "Neutral") {
                    status = "sb.neutral";
                }
                if (applyColor == "Critical") {
                    status = "sb.critical";
                }
                if (applyColor == "Good") {
                    status = "sb.good";
                }
                var sThresholdObj = that.setThresholdValues();

                var m1,m2,m3,v1,v2,v3,c1,c2,c3;
                if (this.CALCULATED_KPI_VALUE && this.CALCULATED_KPI_VALUE[0]){
                    m1 = this.CALCULATED_KPI_VALUE[0].title;
                    v1 = this.CALCULATED_KPI_VALUE[0].value;
                    c1 = sap.ushell.components.tiles.indicatorTileUtils.util.getSemanticColorName(this.CALCULATED_KPI_VALUE[0].color);
                }
                if (this.CALCULATED_KPI_VALUE && this.CALCULATED_KPI_VALUE[1]){
                    m2 = this.CALCULATED_KPI_VALUE[1].title;
                    v2 = this.CALCULATED_KPI_VALUE[1].value;
                    c2 = sap.ushell.components.tiles.indicatorTileUtils.util.getSemanticColorName(this.CALCULATED_KPI_VALUE[1].color);
                }
                if (this.CALCULATED_KPI_VALUE && this.CALCULATED_KPI_VALUE[2]){
                    m3 = this.CALCULATED_KPI_VALUE[2].title;
                    v3 = this.CALCULATED_KPI_VALUE[2].value;
                    c3 = sap.ushell.components.tiles.indicatorTileUtils.util.getSemanticColorName(this.CALCULATED_KPI_VALUE[2].color);
                }

                var valueObjNumeric = {
                        status : status,
                        actual : calculatedValueForScaling,
                        target : sThresholdObj.targetValue,
                        cH : sThresholdObj.criticalHighValue,
                        wH : sThresholdObj.warningHighValue,
                        wL : sThresholdObj.warningLowValue,
                        cL : sThresholdObj.criticalLowValue
                };
                var valueObjContribution = {
                        m1 : m1,
                        v1 : v1,
                        c1 : c1,
                        m2 : m2,
                        v2 : v2,
                        c2 : c2,
                        m3 : m3,
                        v3 : v3,
                        c3 : c3

                };

                var oControlNumeric = that.oDualContributionView.oGenericTile.getTileContent()[0].getContent();
                var oControlContribution =  that.oDualContributionView.oGenericTile.getTileContent()[1].getContent();
                sap.ushell.components.tiles.indicatorTileUtils.util.setTooltipInTile(oControlNumeric,"NT",valueObjNumeric);
                sap.ushell.components.tiles.indicatorTileUtils.util.setTooltipInTile(oControlContribution,"CONT",valueObjContribution);


            }, this.logError);
        }
    },

    flowWithDesignTimeCall: function() {
        var that = this;
        try {
            var evaluationData = sap.ushell.components.tiles.indicatorTileUtils.cache.getEvaluationById(this.oConfig.EVALUATION.ID);
            if (evaluationData){
                that.oConfig.EVALUATION_FILTERS = evaluationData.EVALUATION_FILTERS;
                that.flowWithoutDesignTimeCall();
            } else {
                sap.ushell.components.tiles.indicatorTileUtils.util.getFilterFromRunTimeService(this.oConfig,function(filter){
                    that.oConfig.EVALUATION_FILTERS = filter;
                    sap.ushell.components.tiles.indicatorTileUtils.cache.setEvaluationById(that.oConfig.TILE_PROPERTIES.id,that.oConfig);
                    that.flowWithoutDesignTimeCall();
                });
            }
        } catch(e) {
            this.logError(e);
        }
    },

    fetchKpiValue: function(fnSuccess, fnError){

        var that = this;

        try {
            /* Preparing arguments for the prepareQueryServiceUri function */
            var sUri = this.oConfig.EVALUATION.ODATA_URL;
            var entitySet = this.oConfig.EVALUATION.ODATA_ENTITYSET;
            if (this.oConfig.TILE_PROPERTIES.semanticMeasure){
                /*
                 * Semantic Measure Inclusion (for Future use)
                 * var measure = [];
                 * measure.push(this.oConfig.EVALUATION.COLUMN_NAME);
                 * measure.push(this.oConfig.TILE_PROPERTIES.semanticMeasure);
                 * */
                var measure = this.oConfig.EVALUATION.COLUMN_NAME + "," + this.oConfig.TILE_PROPERTIES.semanticMeasure;
            } else {
                var measure = this.oConfig.EVALUATION.COLUMN_NAME;
            }
            var dimension = this.oConfig.TILE_PROPERTIES.dimension;
            var data = this.oConfig.EVALUATION_VALUES;
            var cachedValue = sap.ushell.components.tiles.indicatorTileUtils.cache.getKpivalueById(that.oConfig.TILE_PROPERTIES.id);
            if (!cachedValue){
                var variants = sap.ushell.components.tiles.indicatorTileUtils.util.prepareFilterStructure(this.oConfig.EVALUATION_FILTERS, this.oConfig.ADDITIONAL_FILTERS);
                var orderByObject = {};
                orderByObject["0"] = measure + ",asc";
                orderByObject["1"] = measure + ",desc";
                orderByObject["2"] = dimension + ",asc";
                orderByObject["3"] = dimension + ",desc";
                var orderByElement = orderByObject[this.oConfig.TILE_PROPERTIES.sortOrder || "0"].split(",");
                var finalQuery = sap.ushell.components.tiles.indicatorTileUtils.util.prepareQueryServiceUri(that.oChip.url.addSystemToServiceUrl(sUri), entitySet, measure, dimension, variants, 3);
                if (this.oConfig.TILE_PROPERTIES.semanticMeasure) {
                    finalQuery.uri += "&$top=3&$orderby=" + orderByElement[0] + " " + orderByElement[2];
                } else {
                    finalQuery.uri += "&$top=3&$orderby=" + orderByElement[0] + " " + orderByElement[1];
                }

                this.comparisionChartODataRef = finalQuery.model.read(finalQuery.uri, null, null, true, function(data) {

                    if (finalQuery.unit[0]) {
                        that._updateTileModel({
                            unitContribution : data.results[0][finalQuery.unit[0].name]
                        });
                        that.writeData.unitContribution = finalQuery.unit[0];
                        that.writeData.unitContribution.name = finalQuery.unit[0].name;
                    }



                    if (data && data.results && data.results.length) {
                        dimension = sap.ushell.components.tiles.indicatorTileUtils.util.findTextPropertyForDimension(that.oChip.url.addSystemToServiceUrl(sUri), entitySet, dimension);
                        that.writeData.dimension = dimension;
                        that.oConfig.TILE_PROPERTIES.FINALVALUE = data;
                        that.oConfig.TILE_PROPERTIES.FINALVALUE = that._processDataForComparisonChart(that.oConfig.TILE_PROPERTIES.FINALVALUE,measure.split(",")[0],dimension);
                        that.writeData.data = data;
                        sap.ushell.components.tiles.indicatorTileUtils.cache.setKpivalueById(that.oConfig.TILE_PROPERTIES.id, that.writeData);
                        fnSuccess.call(that,that.oConfig.TILE_PROPERTIES.FINALVALUE);
                    } else if (data.results.length == 0){
                        that.oConfig.TILE_PROPERTIES.FINALVALUE = data;
                        that.writeData.data = data;
                        sap.ushell.components.tiles.indicatorTileUtils.cache.setKpivalueById(that.oConfig.TILE_PROPERTIES.id, that.writeData);
//                        fnSuccess.call(that,that.oConfig.TILE_PROPERTIES.FINALVALUE);
                    } else {
                        fnError.call(that,"no Response from QueryServiceUri");
                    }


                },function(eObject) {
                    if (eObject && eObject.response) {
                        jQuery.sap.log.error(eObject.message + " : " + eObject.request.requestUri);
                        fnError.call(that,eObject);
                    }
                });
                var variantData = sap.ushell.components.tiles.indicatorTileUtils.util.prepareFilterStructure(
                        that.DEFINITION_DATA.EVALUATION_FILTERS,that.DEFINITION_DATA.ADDITIONAL_FILTERS);

                var oQuery = sap.ushell.components.tiles.indicatorTileUtils.util.prepareQueryServiceUri(
                        that.oChip.url.addSystemToServiceUrl(sUri), entitySet, measure, null, variantData);
                if (oQuery) {
                    that.QUERY_SERVICE_MODEL = oQuery.model;
                    that.queryUriForKpiValue = oQuery.uri;

                    that.numericODataReadRef = that.QUERY_SERVICE_MODEL.read(oQuery.uri, null, null, true, function(data) {
                        if (data && data.results && data.results.length) {

                            if (oQuery.unit){
                                that._updateTileModel({
                                    unitNumeric : data.results[0][oQuery.unit.name]
                                });

                                that.writeData.unitNumeric = oQuery.unit;
                                that.writeData.unitNumeric.name = oQuery.unit.name;
                            }
                            that.writeData.numericData = data;
                            var oScaledValue = "";
                            var calculatedValueForScaling = data.results[0][that.DEFINITION_DATA.EVALUATION.COLUMN_NAME];

                            var trendIndicator = that.getTrendIndicator(that.setThresholdValues().trendValue,calculatedValueForScaling);
                            if (that.oConfig.EVALUATION.SCALING == -2){
                                calculatedValueForScaling *= 100;
                                that.getView().oNumericContent.setFormatterValue(false);
                            }
                            that.DEFINITION_DATA.value = calculatedValueForScaling;
                            oScaledValue = sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(Number(calculatedValueForScaling),that.oConfig.EVALUATION.SCALING,that.oConfig.EVALUATION.DECIMAL_PRECISION);
                            if (that.oConfig.EVALUATION.SCALING == -2) {
                                that._updateTileModel({
                                    scale : "%"
                                });
                            }

                            that._updateTileModel({
                                value : oScaledValue.toString(),
                                valueColor : that.DEFINITION_DATA.TILE_PROPERTIES.semanticColorContribution,
                                indicator : trendIndicator

                            });
                            fnSuccess.call(that,that.oConfig.TILE_PROPERTIES.FINALVALUE,calculatedValueForScaling);
                        } else {
                            fnError.call(that,"no Response from QueryServiceUri");
                        }
                    });
                }

            } else {

                var sThresholdObj = that.setThresholdValues();
                var calculatedValueForScaling;

                if (cachedValue.unitContribution){
                    that._updateTileModel({
                        unitContribution : cachedValue.data.results[0][cachedValue.unitContribution.name]
                    });
                }
                if (cachedValue.unitNumeric){
                    that._updateTileModel({
                        unitNumeric : cachedValue.numericData.results[0][cachedValue.unitNumeric.name]
                    });
                }
                if (cachedValue.data && cachedValue.data.results && cachedValue.data.results.length) {
                    dimension = cachedValue.dimension;
                    that.oConfig.TILE_PROPERTIES.FINALVALUE = cachedValue.data;
                    that.oConfig.TILE_PROPERTIES.FINALVALUE = that._processDataForComparisonChart(that.oConfig.TILE_PROPERTIES.FINALVALUE,measure.split(",")[0],dimension);
                    fnSuccess.call(that,that.oConfig.TILE_PROPERTIES.FINALVALUE);
                } else if (data.results.length == 0){
                    that.oConfig.TILE_PROPERTIES.FINALVALUE = cachedValue.data;

                } else {
                    fnError.call(that,"no Response from QueryServiceUri");
                }

                if (cachedValue.numericData && cachedValue.numericData.results && cachedValue.numericData.results.length){

                    calculatedValueForScaling = cachedValue.numericData.results[0][that.DEFINITION_DATA.EVALUATION.COLUMN_NAME];
                    if (that.oConfig.EVALUATION.SCALING == -2){
                        calculatedValueForScaling *= 100;
                        that.getView().oNumericContent.setFormatterValue(false);
                    }
                    var oScaledValue = sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(Number(calculatedValueForScaling),that.oConfig.EVALUATION.SCALING,that.oConfig.EVALUATION.DECIMAL_PRECISION);
                    if (that.oConfig.EVALUATION.SCALING == -2) {
                        that._updateTileModel({
                            scale : "%"
                        });
                    }

                    var trendIndicator = that.getTrendIndicator(sThresholdObj.trendValue,calculatedValueForScaling);

                    that._updateTileModel({
                        value : oScaledValue.toString(),
                        indicator : trendIndicator,
                        valueColor : that.DEFINITION_DATA.TILE_PROPERTIES.semanticColorContribution

                    });
                    fnSuccess.call(that,that.oConfig.TILE_PROPERTIES.FINALVALUE,calculatedValueForScaling);
                } else {
                    fnError.call(that,"no Response from QueryServiceUri");
                }

            }
        } catch(e) {
            fnError.call(that,e);
        }
    },

    setThresholdValues : function(){
        var that = this;
        try {
            var oThresholdObject = {};
            oThresholdObject.fullyFormedMeasure = this.DEFINITION_DATA.EVALUATION.COLUMN_NAME;
            if (this.DEFINITION_DATA.EVALUATION.VALUES_SOURCE == "MEASURE"){
                switch (this.DEFINITION_DATA.EVALUATION.GOAL_TYPE){
                case "MI" :
                    oThresholdObject.sWarningHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WH", "MEASURE");
                    oThresholdObject.sCriticalHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CH", "MEASURE");
                    oThresholdObject.sTarget =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
                    oThresholdObject.sTrend =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
                    oThresholdObject.fullyFormedMeasure += that.formSelectStatement(oThresholdObject);
                    break;
                case "MA" :
                    oThresholdObject.sWarningLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WL", "MEASURE");
                    oThresholdObject.sCriticalLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CL", "MEASURE");
                    oThresholdObject.sTarget =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
                    oThresholdObject.sTrend =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
                    oThresholdObject.fullyFormedMeasure += that.formSelectStatement(oThresholdObject);
                    break;
                case "RA" :
                    oThresholdObject.sWarningHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WH", "MEASURE");
                    oThresholdObject.sCriticalHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CH", "MEASURE");
                    oThresholdObject.sTarget =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
                    oThresholdObject.sTrend =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
                    oThresholdObject.sWarningLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WL", "MEASURE");
                    oThresholdObject.sCriticalLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CL", "MEASURE");
                    oThresholdObject.fullyFormedMeasure += that.formSelectStatement(oThresholdObject);
                    break;
                }
            } else {
                oThresholdObject.criticalHighValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CH", "FIXED");
                oThresholdObject.criticalLowValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CL", "FIXED");
                oThresholdObject.warningHighValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WH", "FIXED");
                oThresholdObject.warningLowValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WL", "FIXED");
                oThresholdObject.targetValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "FIXED");
                oThresholdObject.trendValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "FIXED");
            }
            return oThresholdObject;
        } catch(e) {
            that.logError(e);
        }
    },

    formSelectStatement : function(object) {
        var tmpArray = Object.keys(object);
        var sFormedMeasure = "";
        for (var i = 0; i < tmpArray.length; i++) {
            if ((object[tmpArray[i]] !== undefined) && (object.fullyFormedMeasure)) {
                sFormedMeasure += "," + object[tmpArray[i]];
            }
        }
        return sFormedMeasure;
    },

    getTrendIndicator : function(trendValue,value) {
        var that = this;
        trendValue = Number(trendValue);
        try {
            var trendIndicator = sap.suite.ui.commons.DeviationIndicator.None;
            if (trendValue > value){
                trendIndicator = sap.suite.ui.commons.DeviationIndicator.Down;
            } else if (trendValue < value){
                trendIndicator = sap.suite.ui.commons.DeviationIndicator.Up;
            }
            return trendIndicator;
        } catch(e) {
            that.logError(e);
        }
    },

    _processDataForComparisonChart: function(data,measure,dimension){
        var semanticMeasure = this.oConfig.TILE_PROPERTIES.semanticMeasure;
        var finalOutput = [];
        var tempVar;
        for (var i = 0; i < data.results.length; i++) {
            var eachData = data.results[i];
            var temp = {};
            try {
                temp.title = eachData[dimension].toString();
            } catch(e) {
                temp.title = "";
            }
            temp.value = Number(eachData[measure]);
            var calculatedValueForScaling = Number(eachData[measure]);
            if (this.oConfig.EVALUATION.SCALING == -2) {
                calculatedValueForScaling *= 100;
            }
            tempVar = sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(calculatedValueForScaling,this.oConfig.EVALUATION.SCALING,this.oConfig.EVALUATION.DECIMAL_PRECISION);
            temp.displayValue = tempVar.toString();
            if (typeof semanticMeasure === 'undefined'){
                temp.color = "Neutral";
            } else {
                if (this.oConfig.EVALUATION.GOAL_TYPE === "MA") {
                    if (temp.value > eachData[semanticMeasure]){
                        temp.color = "Good";
                    } else {
                        temp.color = "Error";
                    }
                } else if (this.oConfig.EVALUATION.GOAL_TYPE === "MI"){
                    if (temp.value < eachData[semanticMeasure]){
                        temp.color = "Good";
                    } else {
                        temp.color = "Error";
                    }
                } else {
                    temp.color = "Neutral";
                }
            }
            finalOutput.push(temp);
        }
        return finalOutput;
    },

    logError: function(err){
        this.oDualContributionView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Failed);
        this.oDualContributionView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Failed);
        sap.ushell.components.tiles.indicatorTileUtils.util.logError(err);
    },
    refreshHandler: function (oController) {
        if (!oController.firstTimeVisible){
            if (Number(this.oChip.configuration.getParameterValueAsString("isSufficient"))) {
                oController.flowWithoutDesignTimeCall();
            } else {
                oController.flowWithDesignTimeCall();
            }
        }

    },
    visibleHandler: function (isVisible) {
        if (!isVisible) {
            this.firstTimeVisible =  false;
            sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(this.comparisionChartODataRef);
        }
        if (isVisible) {
            this.refreshHandler(this);
        }
    },
    onExit : function(){
        sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(this.comparisionChartODataRef);
    }
});
(function () {
    "use strict";
    sap.ui.controller("tiles.indicatorDualDeviation.DualDeviation", {
        onInit : function () {
            var that = this;

            this.firstTimeVisible = false;
            this.oDualDeviationView = this.getView();
            this.oViewData = this.oDualDeviationView.getViewData();
            this.oTileApi = this.oViewData.chip; // instance specific CHIP API
            if (this.oTileApi.visible) {
                this.oTileApi.visible.attachVisible(this.visibleHandler.bind(this));
            }
            this.system = this.oTileApi.url.getApplicationSystem();
            this.oDualDeviationView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loading);
            try {
                sap.ushell.components.tiles.indicatorTileUtils.util.getParsedChip(
                        that.oTileApi.configuration.getParameterValueAsString("tileConfiguration"),function(config){
                            that.oConfig = config;
                            that.setTextInTile();
                            if (that.oTileApi.preview) {
                                that.oTileApi.preview.setTargetUrl(sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system));
                            }
                            if (that.oTileApi.preview.isEnabled()){
                                that._updateTileModel({
                                    valueColor: "Good",
                                    value : 100,
                                    frameType: "TwoByOne",
                                    unit: "USD",
                                    actual: { value: 120, color: sap.suite.ui.commons.InfoTileValueColor.Good},
                                    targetValue: 100,
                                    thresholds: [
                                                 { value: 0, color: sap.suite.ui.commons.InfoTileValueColor.Error },
                                                 { value: 50, color: sap.suite.ui.commons.InfoTileValueColor.Critical },
                                                 { value: 150, color: sap.suite.ui.commons.InfoTileValueColor.Critical },
                                                 { value: 200, color: sap.suite.ui.commons.InfoTileValueColor.Error }
                                                 ],
                                                 showActualValue: true,
                                                 showTargetValue: true
                                });
                                that.oDualDeviationView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);
                            } else {
                                that.oDualDeviationView.oGenericTile.attachPress(function(){
                                    sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(that.queryServiceUriODataReadRef);
                                    sap.ushell.components.tiles.indicatorTileUtils.cache.setKpivalueById(that.oConfig.TILE_PROPERTIES.id, null);
                                    window.location.hash = sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system);
                                });
                                if (Number(that.oTileApi.configuration.getParameterValueAsString("isSufficient"))){
                                    sap.ushell.components.tiles.indicatorTileUtils.cache.setEvaluationById(that.oConfig.TILE_PROPERTIES.id,that.oConfig);
                                    that.flowWithoutDesignTimeCall();
                                } else {
                                    that.flowWithDesignTimeCall();
                                }
                            }
                        });
            } catch(e) {
                this.logError(e);
            }
        },

        _setLocalModelToTile : function() {
            if (!this.getTile().getModel()) {
                this.getTile().setModel(new sap.ui.model.json.JSONModel({}));
            }
        },

        getTile : function() {
            return this.oDualDeviationView.oGenericTile;
        },

        _updateTileModel : function(newData) {
            var modelData  = this.getTile().getModel().getData();
            jQuery.extend(modelData,newData);
            this.getTile().getModel().setData(modelData);
        },

        fetchKpiValue : function(fnSuccess, fnError) {
            var that = this;
            var kpiValue = 0;
            try {
                var sUri = this.DEFINITION_DATA.EVALUATION.ODATA_URL;
                var sEntitySet = this.DEFINITION_DATA.EVALUATION.ODATA_ENTITYSET;
                var sThresholdObject = this.setThresholdValues();
                var sMeasure = sThresholdObject.fullyFormedMeasure;
                var cachedValue = sap.ushell.components.tiles.indicatorTileUtils.cache.getKpivalueById(that.oConfig.TILE_PROPERTIES.id);
                if (!cachedValue){
                    var variantData = sap.ushell.components.tiles.indicatorTileUtils.util.prepareFilterStructure(
                            this.DEFINITION_DATA.EVALUATION_FILTERS,this.DEFINITION_DATA.ADDITIONAL_FILTERS);
                    var oQuery = sap.ushell.components.tiles.indicatorTileUtils.util.prepareQueryServiceUri(
                            that.oTileApi.url.addSystemToServiceUrl(sUri), sEntitySet, sMeasure, null, variantData);
                    if (oQuery) {
                        this.QUERY_SERVICE_MODEL = oQuery.model;
                        this.queryUriForKpiValue = oQuery.uri;
                        try {
                            this.queryServiceUriODataReadRef = this.QUERY_SERVICE_MODEL.read(oQuery.uri, null, null, true, function(data) {
                                that.writeData = {};
                                if (data && data.results && data.results.length) {
                                    kpiValue = data.results[0][that.DEFINITION_DATA.EVALUATION.COLUMN_NAME];
                                    if (oQuery.unit[0]){
                                        that._updateTileModel({
                                            unit : data.results[0][oQuery.unit[0].name]
                                        });
                                        that.writeData.unit = oQuery.unit[0];
                                        that.writeData.unit.name = oQuery.unit[0].name;
                                    }
                                    that.writeData.numericData = data;

                                    var oScaledValue = "",trendIndicator;
                                    var calculatedValueForScaling = kpiValue;
                                    if (that.oConfig.EVALUATION.SCALING == -2){
                                        calculatedValueForScaling *= 100;
                                        that.getView().oNumericContent.setFormatterValue(false);
                                    }

                                    oScaledValue = sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(Number(calculatedValueForScaling),that.oConfig.EVALUATION.SCALING,that.oConfig.EVALUATION.DECIMAL_PRECISION);
                                    trendIndicator = that.getTrendIndicator(sThresholdObject.trendValue,calculatedValueForScaling);
                                    if (that.oConfig.EVALUATION.SCALING == -2) {
                                        that._updateTileModel({
                                            scale : "%"
                                        });
                                    }
                                    that._updateTileModel({
                                        value : oScaledValue.toString(),
                                        indicator : trendIndicator,
                                        valueColor : that.getThresholdsObjAndColor(sThresholdObject).returnColor
                                    });
                                    that.writeData.data = data;
                                    sap.ushell.components.tiles.indicatorTileUtils.cache.setKpivalueById(that.oConfig.TILE_PROPERTIES.id, that.writeData);
                                    if (that.DEFINITION_DATA.EVALUATION.VALUES_SOURCE == "MEASURE"){
                                        sThresholdObject.criticalHighValue = data.results[0][sThresholdObject.sCriticalHigh];
                                        sThresholdObject.criticalLowValue = data.results[0][sThresholdObject.sCriticalLow];
                                        sThresholdObject.warningHighValue = data.results[0][sThresholdObject.sWarningHigh];
                                        sThresholdObject.warningLowValue = data.results[0][sThresholdObject.sWarningLow];
                                        sThresholdObject.targetValue = data.results[0][sThresholdObject.sTarget];
                                        sThresholdObject.trendValue = data.results[0][sThresholdObject.sTrend];
                                    }
                                    fnSuccess.call(that, kpiValue, sThresholdObject);
                                } else {
                                    fnError.call(that,"no Response from QueryServiceUri");
                                }
                            },function(eObject) {
                                if (eObject && eObject.response) {
                                    fnError.call(that,eObject.message);
                                }
                            });
                        } catch(e){
                            that.logError("Error in Query Service URI");
                        }
                    }
                } else {
                    if (cachedValue.data && cachedValue.data.results && cachedValue.data.results.length) {

                        var calculatedValueForScaling,oScaledValue,trendIndicator,sThresholdObject;
                        sThresholdObject = that.setThresholdValues();
                        calculatedValueForScaling = cachedValue.data.results[0][that.DEFINITION_DATA.EVALUATION.COLUMN_NAME];
                        if (that.oConfig.EVALUATION.SCALING == -2){
                            calculatedValueForScaling *= 100;
                            that.getView().oNumericContent.setFormatterValue(true);
                        }

                        if (that.oConfig.EVALUATION.SCALING == -2) {
                            that._updateTileModel({
                                scale : "%"
                            });
                        }
                        oScaledValue = sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(Number(calculatedValueForScaling),that.oConfig.EVALUATION.SCALING,that.oConfig.EVALUATION.DECIMAL_PRECISION);
                        trendIndicator = that.getTrendIndicator(sThresholdObject.trendValue,calculatedValueForScaling);

                        if (cachedValue.unit){
                            that._updateTileModel({
                                unit : cachedValue.data.results[0][cachedValue.unit.name]
                            });
                        }
                        that._updateTileModel({
                            indicator : trendIndicator,
                            value : oScaledValue.toString()
                        });
                        if (that.DEFINITION_DATA.EVALUATION.VALUES_SOURCE == "MEASURE"){
                            sThresholdObject.criticalHighValue = cachedValue.data.results[0][sThresholdObject.sCriticalHigh];
                            sThresholdObject.criticalLowValue = cachedValue.data.results[0][sThresholdObject.sCriticalLow];
                            sThresholdObject.warningHighValue = cachedValue.data.results[0][sThresholdObject.sWarningHigh];
                            sThresholdObject.warningLowValue = cachedValue.data.results[0][sThresholdObject.sWarningLow];
                            sThresholdObject.targetValue = cachedValue.data.results[0][sThresholdObject.sTarget];
                            sThresholdObject.trendValue = cachedValue.data.results[0][sThresholdObject.sTrend];
                        }
                        fnSuccess.call(that, cachedValue.data.results[0][that.DEFINITION_DATA.EVALUATION.COLUMN_NAME], sThresholdObject);
                    } else {
                        fnError.call(that,"no Response from QueryServiceUri");
                    }
                }
            }catch(e) {
                fnError.call(that,e);
            }
        },

        getTrendIndicator : function(trendValue,value) {
            var that = this;
            trendValue = Number(trendValue);
            try {
                var trendIndicator = sap.suite.ui.commons.DeviationIndicator.None;
                if (trendValue > value){
                    trendIndicator = sap.suite.ui.commons.DeviationIndicator.Down;
                } else if (trendValue < value){
                    trendIndicator = sap.suite.ui.commons.DeviationIndicator.Up;
                }
                return trendIndicator;
            } catch(e) {
                that.logError(e);
            }
        },

        getThresholdsObjAndColor : function(thresholdObject) {
            try {
                var oThresholdObjAndColor = {};
                oThresholdObjAndColor.arrObj = [];
                oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Neutral;
                var improvementDirection = this.DEFINITION_DATA.EVALUATION.GOAL_TYPE;
                //var evalValue = this.DEFINITION_DATA.EVALUATION_VALUES;
                var wL,cL,cH,wH;
                if (improvementDirection === "MI") {
                    cH = Number(thresholdObject.criticalHighValue) || 0;
                    wH = Number(thresholdObject.warningHighValue) || 0;
                    if (cH && wH) {
                        cH = window.parseFloat(cH);
                        wH = window.parseFloat(wH);
                        oThresholdObjAndColor.arrObj.push({value:cH,color:sap.suite.ui.commons.InfoTileValueColor.Error});
                        oThresholdObjAndColor.arrObj.push({value:wH,color:sap.suite.ui.commons.InfoTileValueColor.Critical});
                        if (this.CALCULATED_KPI_VALUE < wH) {
                            oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Good;
                        } else if (this.CALCULATED_KPI_VALUE <= cH) {
                            oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
                        } else {
                            oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
                        }
                    }

                } else if (improvementDirection === "MA") {
                    cL = Number(thresholdObject.criticalLowValue) || 0;
                    wL = Number(thresholdObject.warningLowValue) || 0;
                    if (cL && wL) {
                        cL = window.parseFloat(cL);
                        wL = window.parseFloat(wL);
                        oThresholdObjAndColor.arrObj.push({value:cL,color:sap.suite.ui.commons.InfoTileValueColor.Error});
                        oThresholdObjAndColor.arrObj.push({value:wL,color:sap.suite.ui.commons.InfoTileValueColor.Critical});
                        if (this.CALCULATED_KPI_VALUE < cL) {
                            oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
                        } else if (this.CALCULATED_KPI_VALUE <= wL) {
                            oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
                        } else {
                            oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Good;
                        }
                    }
                } else {
                    cH = Number(thresholdObject.criticalHighValue) || 0;
                    wH = Number(thresholdObject.warningHighValue) || 0;
                    cL = Number(thresholdObject.criticalLowValue) || 0;
                    wL = Number(thresholdObject.warningLowValue) || 0;
                    if (wL && wH && cL && cL) {
                        cH = window.parseFloat(cH);
                        wH = window.parseFloat(wH);
                        wL = window.parseFloat(wL);
                        cL = window.parseFloat(cL);
                        oThresholdObjAndColor.arrObj.push({value:cH,color:sap.suite.ui.commons.InfoTileValueColor.Error});
                        oThresholdObjAndColor.arrObj.push({value:wH,color:sap.suite.ui.commons.InfoTileValueColor.Critical});
                        oThresholdObjAndColor.arrObj.push({value:wL,color:sap.suite.ui.commons.InfoTileValueColor.Critical});
                        oThresholdObjAndColor.arrObj.push({value:cL,color:sap.suite.ui.commons.InfoTileValueColor.Error});
                        if (this.CALCULATED_KPI_VALUE < cL || this.CALCULATED_KPI_VALUE > cH) {
                            oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
                        } else if ((this.CALCULATED_KPI_VALUE >= cL && this.CALCULATED_KPI_VALUE <= wL) ||
                                (this.CALCULATED_KPI_VALUE >= wH && this.CALCULATED_KPI_VALUE <= cH)
                        ) {
                            oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
                        } else {
                            oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Good;
                        }
                    }
                }
                return oThresholdObjAndColor;

            } catch(e) {
                this.logError(e);
            }

        },

        flowWithoutDesignTimeCall : function() {
            var that = this;

            var formattedValue, formattedTargetvalue;
            this.DEFINITION_DATA = this.oConfig;
            this._updateTileModel(this.DEFINITION_DATA);
            if (this.oTileApi.visible.isVisible() && !this.firstTimeVisible){

                this.firstTimeVisible = true;
                this.fetchKpiValue(function(kpiValue, thresholdObject){
                    var calculatedValueForScaling = Number(kpiValue);
                    if (this.oConfig.EVALUATION.SCALING == -2) {
                        calculatedValueForScaling *= 100;
                    }
                    formattedValue = sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(Number(calculatedValueForScaling), this.oConfig.EVALUATION.SCALING,that.oConfig.EVALUATION.DECIMAL_PRECISION);
                    this.CALCULATED_KPI_VALUE = Number(kpiValue);
                    var deviationTileObj = {};
                    var thresholdsArrayObjAndColor = this.getThresholdsObjAndColor(thresholdObject);
                    var actualKpiObj = {value:Number(kpiValue),color:thresholdsArrayObjAndColor.returnColor};
                    deviationTileObj.valueColor = actualKpiObj.color;
                    deviationTileObj.actualValueLabel = formattedValue.toString();
                    deviationTileObj.actual = actualKpiObj;

                    var evalValue = this.DEFINITION_DATA.EVALUATION_VALUES;
                    if (this.DEFINITION_DATA.EVALUATION.VALUES_SOURCE == "MEASURE"){
                        var calculatedTargetValue = Number(thresholdObject.targetValue);
                        if (this.oConfig.EVALUATION.SCALING == -2) {
                            calculatedTargetValue *= 100;
                        }
                        formattedTargetvalue = sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(calculatedTargetValue, this.oConfig.EVALUATION.SCALING,this.oConfig.EVALUATION.DECIMAL_PRECISION);
                        deviationTileObj.targetValue = Number(thresholdObject.targetValue);
                        deviationTileObj.targetValueLabel = formattedTargetvalue.toString();
                    } else {
                        for (var itr = 0; itr < evalValue.length; itr++){
                            if (evalValue[itr].TYPE === "TA") {
                                var calculatedTargetValue = Number(evalValue[itr].FIXED);
                                if (this.oConfig.EVALUATION.SCALING == -2) {
                                    calculatedTargetValue *= 100;
                                }
                                formattedTargetvalue = sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(calculatedTargetValue);
                                deviationTileObj.targetValue =  Number(evalValue[itr].FIXED);
                                deviationTileObj.targetValueLabel = formattedTargetvalue.toString();
                            }
                        }
                    }

                    this._updateTileModel(deviationTileObj);
                    var navTarget = sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system);
                    that.oDualDeviationView.oGenericTile.$().wrap("<a href ='" + navTarget + "'/>");
                    this.oDualDeviationView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);

                    var status = "";
                    if (deviationTileObj.valueColor == "Error") {
                        status = "sb.error";
                    }
                    if (deviationTileObj.valueColor == "Neutral") {
                        status = "sb.neutral";
                    }
                    if (deviationTileObj.valueColor == "Critical") {
                        status = "sb.critical";
                    }
                    if (deviationTileObj.valueColor == "Good") {
                        status = "sb.good";
                    }


                    var valueObjNumeric = {
                            status : status,
                            actual : calculatedValueForScaling,
                            target : thresholdObject.targetValue,
                            cH : thresholdObject.criticalHighValue,
                            wH : thresholdObject.warningHighValue,
                            wL : thresholdObject.warningLowValue,
                            cL : thresholdObject.criticalLowValue
                    };
                    var valueObjDeviation = valueObjNumeric;

                    var oControlNumeric = that.oDualDeviationView.oGenericTile.getTileContent()[0].getContent();
                    var oControlDeviation =  that.oDualDeviationView.oGenericTile.getTileContent()[1].getContent();
                    sap.ushell.components.tiles.indicatorTileUtils.util.setTooltipInTile(oControlNumeric,"NT",valueObjNumeric);
                    sap.ushell.components.tiles.indicatorTileUtils.util.setTooltipInTile(oControlDeviation,"DT",valueObjDeviation);



                }, this.logError);
            }
        },

        flowWithDesignTimeCall: function() {
            var that = this;
            try {
                var evaluationData = sap.ushell.components.tiles.indicatorTileUtils.cache.getEvaluationById(this.oConfig.EVALUATION.ID);
                if (evaluationData){
                    that.oConfig.EVALUATION_FILTERS = evaluationData.EVALUATION_FILTERS;
                    that.flowWithoutDesignTimeCall();
                } else {
                    sap.ushell.components.tiles.indicatorTileUtils.util.getFilterFromRunTimeService(this.oConfig,function(filter){
                        that.oConfig.EVALUATION_FILTERS = filter;
                        sap.ushell.components.tiles.indicatorTileUtils.cache.setEvaluationById(that.oConfig.TILE_PROPERTIES.id,that.oConfig);
                        that.flowWithoutDesignTimeCall();
                    });
                }
            } catch(e) {
                this.logError(e);
            }
        },

        setTextInTile : function(){
            var that = this;
            var titleObj = sap.ushell.components.tiles.indicatorTileUtils.util.getTileTitleSubtitle(this.oTileApi);
            this._updateTileModel({
                header : titleObj.title || sap.ushell.components.tiles.indicatorTileUtils.util.getChipTitle(that.oConfig ),
                subheader : titleObj.subTitle || sap.ushell.components.tiles.indicatorTileUtils.util.getChipSubTitle(that.oConfig )
            });
        },

        logError: function(err){
            this.oDualDeviationView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Failed);
            this.oDualDeviationView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Failed);
            sap.ushell.components.tiles.indicatorTileUtils.util.logError(err);
        },

        setThresholdValues : function(){
            var that = this;
            var oThresholdObject = {};
            oThresholdObject.fullyFormedMeasure = this.DEFINITION_DATA.EVALUATION.COLUMN_NAME;
            if (this.DEFINITION_DATA.EVALUATION.VALUES_SOURCE == "MEASURE"){
                switch (this.DEFINITION_DATA.EVALUATION.GOAL_TYPE){
                case "MI" :
                    oThresholdObject.sWarningHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WH", "MEASURE");
                    oThresholdObject.sCriticalHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CH", "MEASURE");
                    oThresholdObject.sTarget =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
                    oThresholdObject.sTrend =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
                    oThresholdObject.fullyFormedMeasure += that.formSelectStatement(oThresholdObject);
                    break;
                case "MA" :
                    oThresholdObject.sWarningLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WL", "MEASURE");
                    oThresholdObject.sCriticalLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CL", "MEASURE");
                    oThresholdObject.sTarget =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
                    oThresholdObject.sTrend =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
                    oThresholdObject.fullyFormedMeasure += that.formSelectStatement(oThresholdObject);
                    break;
                case "RA" :
                    oThresholdObject.sWarningHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WH", "MEASURE");
                    oThresholdObject.sCriticalHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CH", "MEASURE");
                    oThresholdObject.sTarget =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
                    oThresholdObject.sTrend =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
                    oThresholdObject.sWarningLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WL", "MEASURE");
                    oThresholdObject.sCriticalLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CL", "MEASURE");
                    oThresholdObject.fullyFormedMeasure += that.formSelectStatement(oThresholdObject);
                    break;
                }
            } else {
                oThresholdObject.criticalHighValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CH", "FIXED");
                oThresholdObject.criticalLowValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CL", "FIXED");
                oThresholdObject.warningHighValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WH", "FIXED");
                oThresholdObject.warningLowValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WL", "FIXED");
                oThresholdObject.targetValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "FIXED");
                oThresholdObject.trendValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "FIXED");
            }
            return oThresholdObject;
        },

        formSelectStatement : function(object) {
            var tmpArray = Object.keys(object);
            var sFormedMeasure = "";
            for (var i = 0; i < tmpArray.length; i++) {
                if ((object[tmpArray[i]] !== undefined) && (object.fullyFormedMeasure)) {
                   sFormedMeasure += "," + object[tmpArray[i]];
                }
            }
            return sFormedMeasure;
        },
        refreshHandler: function (oController) {
            if (!oController.firstTimeVisible){
                if (Number(this.oTileApi.configuration.getParameterValueAsString("isSufficient"))) {
                    oController.flowWithoutDesignTimeCall();
                } else {
                    oController.flowWithDesignTimeCall();
                }
            }

        },
        visibleHandler: function (isVisible) {
            if (!isVisible) {
                this.firstTimeVisible = false;
                sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(this.queryServiceUriODataReadRef);
            }
            if (isVisible) {
                this.refreshHandler(this);
            }
        },
        onExit : function(){
            sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(this.queryServiceUriODataReadRef);
        }

    });
}());
(function () {
    "use strict";
    /*eslint-disable no-nested-ternary*/
    /*global fnError*/
    sap.ui.controller("tiles.indicatorDualTrend.DualTrend", {
        onInit: function () {
            var that = this;
            this.firstTimeVisible = false;
            this.oDualTrendView = this.getView();
            this.oViewData = this.oDualTrendView.getViewData();
            this.oTileApi = this.oViewData.chip; // instance specific CHIP API
            if (this.oTileApi.visible) {
                this.oTileApi.visible.attachVisible(this.visibleHandler.bind(this));
            }
            this.system = this.oTileApi.url.getApplicationSystem();
            this.oDualTrendView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loading);
            if (this.oTileApi.preview.isEnabled()) {
                this.setTextInTile();
                this._updateTileModel({

                    value: 8888,
                    size: sap.suite.ui.commons.InfoTileSize.Auto,
                    frameType:"TwoByOne",
                    state: sap.suite.ui.commons.LoadState.Loading,
                    valueColor:sap.suite.ui.commons.InfoTileValueColor.Error,
                    indicator: sap.suite.ui.commons.DeviationIndicator.None,
                    title : "Liquidity Structure",
                    footer : "Current Quarter",
                    description: "Apr 1st 2013 (B$)",

                    width: "100%",
                    height: "100%",
                    chart: {
                        color:"Good",
                        data: [
                               {day: 0, balance: 0},
                               {day: 30, balance: 20},
                               {day: 60, balance: 20},
                               {day: 100, balance: 80}
                               ]
                    },
                    target: {
                        color:"Error",
                        data: [
                               {day: 0, balance: 0},
                               {day: 30, balance: 30},
                               {day: 60, balance: 40},
                               {day: 100, balance: 90}
                               ]
                    },
                    maxThreshold: {
                        color: "Good",
                        data: [
                               {day: 0, balance: 0},
                               {day: 30, balance: 40},
                               {day: 60, balance: 50},
                               {day: 100, balance: 100}
                               ]
                    },
                    innerMaxThreshold: {
                        color: "Error",
                        data: [
                               ]
                    },
                    innerMinThreshold: {
                        color: "Neutral",
                        data: [
                               ]
                    },
                    minThreshold: {
                        color: "Error",
                        data: [
                               {day: 0, balance: 0},
                               {day: 30, balance: 20},
                               {day: 60, balance: 30},
                               {day: 100, balance: 70}
                               ]
                    },
                    minXValue: 0,
                    maxXValue: 100,
                    minYValue: 0,
                    maxYValue: 100,
                    firstXLabel: { label: "June 123", color: "Error"   },
                    lastXLabel: { label: "June 30", color: "Error" },
                    firstYLabel: { label: "0M", color: "Good" },
                    lastYLabel: { label: "80M", color: "Critical" },
                    minLabel: { },
                    maxLabel: { }
                });
                this.oDualTrendView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);
            } else {
                try {
                    sap.ushell.components.tiles.indicatorTileUtils.util.getParsedChip(
                            this.oTileApi.configuration.getParameterValueAsString("tileConfiguration"),function(config){
                                that.oConfig = config;
                                that.setTextInTile();
                                that.oDualTrendView.oGenericTile.attachPress(function(){
                                    sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(that.trendChartODataReadRef);
                                    sap.ushell.components.tiles.indicatorTileUtils.cache.setKpivalueById(that.oConfig.TILE_PROPERTIES.id, null);
                                    window.location.hash = sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system);
                                });
                                if (Number(that.oTileApi.configuration.getParameterValueAsString("isSufficient"))){
                                    sap.ushell.components.tiles.indicatorTileUtils.cache.setEvaluationById(that.oConfig.TILE_PROPERTIES.id,that.oConfig);
                                    that.flowWithoutDesignTimeCall();
                                } else {
                                    that.flowWithDesignTimeCall();
                                }
                            }
                    );
                } catch (e) {
                    this.logError(e);
                }
            }
        },
        getTile: function () {
            return this.oDualTrendView.oGenericTile;
        },

        _setLocalModelToTile: function () {
            if (!this.getTile().getModel()) {
                this.getTile().setModel(new sap.ui.model.json.JSONModel({}));
            }
        },



        _updateTileModel: function (newData) {
            var modelData = this.getTile().getModel().getData();
            jQuery.extend(modelData, newData);
            this.getTile().getModel().setData(modelData);
        },

        setThresholdValues : function(){
            var that = this;
            try {
                var oThresholdObject = {};
                oThresholdObject.fullyFormedMeasure = this.DEFINITION_DATA.EVALUATION.COLUMN_NAME;
                if (this.DEFINITION_DATA.EVALUATION.VALUES_SOURCE == "MEASURE"){
                    switch (this.DEFINITION_DATA.EVALUATION.GOAL_TYPE){
                    case "MI" :
                        oThresholdObject.sWarningHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WH", "MEASURE");
                        oThresholdObject.sCriticalHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CH", "MEASURE");
                        oThresholdObject.sTarget =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
                        oThresholdObject.sTrend =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
                        oThresholdObject.fullyFormedMeasure += that.formSelectStatement(oThresholdObject);
                        break;
                    case "MA" :
                        oThresholdObject.sWarningLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WL", "MEASURE");
                        oThresholdObject.sCriticalLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CL", "MEASURE");
                        oThresholdObject.sTarget =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
                        oThresholdObject.sTrend =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
                        oThresholdObject.fullyFormedMeasure += that.formSelectStatement(oThresholdObject);
                        break;
                    case "RA" :
                        oThresholdObject.sWarningHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WH", "MEASURE");
                        oThresholdObject.sCriticalHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CH", "MEASURE");
                        oThresholdObject.sTarget =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
                        oThresholdObject.sTrend =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
                        oThresholdObject.sWarningLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WL", "MEASURE");
                        oThresholdObject.sCriticalLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CL", "MEASURE");
                        oThresholdObject.fullyFormedMeasure += that.formSelectStatement(oThresholdObject);
                        break;
                    }
                } else {
                    oThresholdObject.criticalHighValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CH", "FIXED");
                    oThresholdObject.criticalLowValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CL", "FIXED");
                    oThresholdObject.warningHighValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WH", "FIXED");
                    oThresholdObject.warningLowValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WL", "FIXED");
                    oThresholdObject.targetValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "FIXED");
                    oThresholdObject.trendValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "FIXED");
                }
                return oThresholdObject;
            } catch(e) {
                that.logError(e);
            }
        },

        getTrendIndicator : function(trendValue,value) {
            var that = this;
            trendValue = Number(trendValue);
            try {
                var trendIndicator = sap.suite.ui.commons.DeviationIndicator.None;
                if (trendValue > value) {
                    trendIndicator = sap.suite.ui.commons.DeviationIndicator.Down;
                } else if (trendValue < value) {
                    trendIndicator = sap.suite.ui.commons.DeviationIndicator.Up;
                }
                return trendIndicator;
            } catch(e) {
                that.logError(e);
            }
        },
        formSelectStatement : function(object) {
            var tmpArray = Object.keys(object);
            var sFormedMeasure = "";
            for (var i = 0; i < tmpArray.length; i++) {
                if ((object[tmpArray[i]] !== undefined) && (object.fullyFormedMeasure)) {
                    sFormedMeasure += "," + object[tmpArray[i]];
                }
            }
            return sFormedMeasure;
        },

        getTrendColor : function(thresholdObj){
            var that = this;
            try {
                var improvementDirection = this.DEFINITION_DATA.EVALUATION.GOAL_TYPE;
                // var evalValue = this.DEFINITION_DATA.EVALUATION_VALUES;
                var returnColor = sap.suite.ui.commons.InfoTileValueColor.Neutral;
                if (improvementDirection === "MI") {
                    if (thresholdObj.criticalHighValue && thresholdObj.warningHighValue) {
                        thresholdObj.criticalHighValue = Number(thresholdObj.criticalHighValue);
                        thresholdObj.warningHighValue = Number(thresholdObj.warningHighValue);
                        if (this.CALCULATED_KPI_VALUE < thresholdObj.warningHighValue) {
                            returnColor = sap.suite.ui.commons.InfoTileValueColor.Good;
                        } else if (this.CALCULATED_KPI_VALUE <= thresholdObj.criticalHighValue) {
                            returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
                        } else {
                            returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
                        }
                    }
                } else if (improvementDirection === "MA") {
                    if (thresholdObj.criticalLowValue && thresholdObj.warningLowValue) {
                        thresholdObj.criticalLowValue = Number(thresholdObj.criticalLowValue);
                        thresholdObj.warningLowValue = Number(thresholdObj.warningLowValue);
                        if (this.CALCULATED_KPI_VALUE < thresholdObj.criticalLowValue) {
                            returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
                        } else if (this.CALCULATED_KPI_VALUE <= thresholdObj.warningLowValue) {
                            returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
                        } else {
                            returnColor = sap.suite.ui.commons.InfoTileValueColor.Good;
                        }
                    }
                } else {
                    if (thresholdObj.warningLowValue && thresholdObj.warningHighValue && thresholdObj.criticalLowValue && thresholdObj.criticalHighValue) {
                        thresholdObj.criticalHighValue = Number(thresholdObj.criticalHighValue);
                        thresholdObj.warningHighValue = Number(thresholdObj.warningHighValue);
                        thresholdObj.warningLowValue = Number(thresholdObj.warningLowValue);
                        thresholdObj.criticalLowValue = Number(thresholdObj.criticalLowValue);
                        if (this.CALCULATED_KPI_VALUE < thresholdObj.criticalLowValue || this.CALCULATED_KPI_VALUE > thresholdObj.criticalHighValue) {
                            returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
                        } else if ((this.CALCULATED_KPI_VALUE >= thresholdObj.criticalLowValue && this.CALCULATED_KPI_VALUE <= thresholdObj.warningLowValue) ||
                                (this.CALCULATED_KPI_VALUE >= thresholdObj.warningHighValue && this.CALCULATED_KPI_VALUE <= thresholdObj.criticalHighValue)
                        ) {
                            returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
                        } else {
                            returnColor = sap.suite.ui.commons.InfoTileValueColor.Good;
                        }
                    }
                }
                return returnColor;
            } catch(e) {
                that.logError(e);
            }
        },


        onAfterFinalEvaluation: function () {
            var that = this;
            var sUri = this.DEFINITION_DATA.EVALUATION.ODATA_URL;
            var sEntitySet = this.DEFINITION_DATA.EVALUATION.ODATA_ENTITYSET;
            var sMeasure = this.DEFINITION_DATA.EVALUATION.COLUMN_NAME;
            var variantData = sap.ushell.components.tiles.indicatorTileUtils.util.prepareFilterStructure(this.DEFINITION_DATA.EVALUATION_FILTERS,this.DEFINITION_DATA.ADDITIONAL_FILTERS);
            var dimensionName = this.DEFINITION_DATA.TILE_PROPERTIES.dimension;
            if (dimensionName == undefined){
                this.logError();
                return;
            }
            // var scaleFactor = this.DEFINITION_DATA.EVALUATION.SCALING;
            var goaltype = this.DEFINITION_DATA.EVALUATION.GOAL_TYPE;
            var evaluationValues = this.DEFINITION_DATA.EVALUATION_VALUES;
            if (this.DEFINITION_DATA.EVALUATION.VALUES_SOURCE == "MEASURE"){
                var fullyFormedMeasure = sMeasure;
                switch (goaltype){
                case "MI" :
                    that.sWarningHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WH", "MEASURE");
                    that.sCriticalHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CH", "MEASURE");
                    that.sTarget =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
                    that.sTrend =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
                    if (that.sWarningHigh && that.sCriticalHigh && that.sTarget) {
                        fullyFormedMeasure += "," + that.sWarningHigh + "," + that.sCriticalHigh + "," + that.sTarget;
                    }
                    break;
                case "MA" :
                    that.sWarningLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WL", "MEASURE");
                    that.sCriticalLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CL", "MEASURE");
                    that.sTarget =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
                    that.sTrend =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
                    if (that.sWarningLow && that.sCriticalLow && that.sTarget) {
                        fullyFormedMeasure += "," + that.sWarningLow + "," + that.sCriticalLow + "," + that.sTarget;
                    }
                    break;
                case "RA" :
                    that.sWarningHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WH", "MEASURE");
                    that.sCriticalHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CH", "MEASURE");
                    that.sTarget =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
                    that.sTrend =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
                    that.sWarningLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WL", "MEASURE");
                    that.sCriticalLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CL", "MEASURE");
                    if (that.sWarningLow && that.sCriticalLow && that.sTarget && that.sWarningHigh && that.sCriticalHigh) {
                        fullyFormedMeasure += "," + that.sWarningLow + "," + that.sCriticalLow + "," + that.sTarget + "," + that.sWarningHigh + "," + that.sCriticalHigh;
                    }
                    break;
                }
                var oQuery = sap.ushell.components.tiles.indicatorTileUtils.util.prepareQueryServiceUri(that.oTileApi.url.addSystemToServiceUrl(sUri), sEntitySet, fullyFormedMeasure, dimensionName, variantData);
            } else {
                var oQuery = sap.ushell.components.tiles.indicatorTileUtils.util.prepareQueryServiceUri(that.oTileApi.url.addSystemToServiceUrl(sUri), sEntitySet, sMeasure, dimensionName, variantData);
            }
            var cachedValue = sap.ushell.components.tiles.indicatorTileUtils.cache.getKpivalueById(that.oConfig.TILE_PROPERTIES.id);
            if (!cachedValue){
                if (oQuery) {
                    this.queryUriForTrendChart = oQuery.uri;
                    that.writeData = {};
                    try {

                        this.trendChartODataReadRef = oQuery.model.read(oQuery.uri, null, null, true, function (data) {
                            if (data && data.results && data.results.length){
                                if (oQuery.unit[0]){
                                    that.unit = data.results[0][oQuery.unit[0].name];
                                    that.writeData.unit = oQuery.unit[0];
                                    that.writeData.unit.name = oQuery.unit[0].name;
                                }


                                that.queryUriResponseForTrendChart = data;
                                dimensionName = sap.ushell.components.tiles.indicatorTileUtils.util.findTextPropertyForDimension(that.oTileApi.url.addSystemToServiceUrl(sUri), sEntitySet, dimensionName);
                                data.firstXlabel = data.results[0][dimensionName];
                                data.lastXlabel = data.results[data.results.length - 1][dimensionName];
                                that.writeData.data = data;
                                that.writeData.dimensionName = dimensionName;
                                sap.ushell.components.tiles.indicatorTileUtils.cache.setKpivalueById(that.oConfig.TILE_PROPERTIES.id, that.writeData);
                                var navTarget = sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system);
                                that.oDualTrendView.oGenericTile.$().wrap("<a href ='" + navTarget + "'/>");
                                that.oDualTrendView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);
                                _applyData(data,that.DEFINITION_DATA.EVALUATION.VALUES_SOURCE);

                            } else {
                                that.logError("no Response from QueryServiceUri");
                            }
                        },function(eObject) {
                            if (eObject && eObject.response) {
                                that.logError("Data call failed");
                            }
                        });
                    } catch(e) {
                        that.logError(e);
                    }
                } else {
                    that.logError();
                }

                var variantData = sap.ushell.components.tiles.indicatorTileUtils.util.prepareFilterStructure(
                        that.DEFINITION_DATA.EVALUATION_FILTERS,that.DEFINITION_DATA.ADDITIONAL_FILTERS);

                var oQuery = sap.ushell.components.tiles.indicatorTileUtils.util.prepareQueryServiceUri(
                        that.oTileApi.url.addSystemToServiceUrl(sUri), sEntitySet, sMeasure, null, variantData);
                if (oQuery) {
                    that.QUERY_SERVICE_MODEL = oQuery.model;
                    that.queryUriForKpiValue = oQuery.uri;
                    that.numericODataReadRef = that.QUERY_SERVICE_MODEL.read(oQuery.uri, null, null, true, function(data) {

                        if (data && data.results && data.results.length) {
                            var oScaledValue = "";
                            var calculatedValueForScaling = data.results[0][that.DEFINITION_DATA.EVALUATION.COLUMN_NAME];
                            that.writeData.numericData = data;
                            if (that.oConfig.EVALUATION.SCALING == -2){
                                calculatedValueForScaling *= 100;
                                //that.getView().oNumericContent.setFormatterValue(false);
                            }
                            oScaledValue = sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(Number(calculatedValueForScaling),that.oConfig.EVALUATION.SCALING,that.oConfig.EVALUATION.DECIMAL_PRECISION);
                            if (that.oConfig.EVALUATION.SCALING == -2) {
                                that._updateTileModel({
                                    scale : "%"
                                });
                            }
                            var trendIndicator = that.getTrendIndicator(that.setThresholdValues().trendValue,calculatedValueForScaling);

                            that._updateTileModel({
                                value : oScaledValue.toString(),
                                valueColor : that.getTrendColor(that.setThresholdValues()),
                                indicator : trendIndicator


                            });
                        } else {
                            fnError.call(that,"no Response from QueryServiceUri");
                        }
                    });
                }
            } else {
                try {

                    if (cachedValue.unit !== undefined){
                        that.unit = cachedValue.data.results[0][cachedValue.unit.name];
                    }
                    that.queryUriResponseForTrendChart = cachedValue.data;
                    dimensionName = cachedValue.dimensionName;
                    var calculatedValueForScaling = cachedValue.numericData.results[0][that.DEFINITION_DATA.EVALUATION.COLUMN_NAME];
                    var trendIndicator = that.getTrendIndicator(that.setThresholdValues().trendValue,cachedValue.data.results[0][that.DEFINITION_DATA.EVALUATION.COLUMN_NAME]);
                    var oScaledValue = sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(Number(calculatedValueForScaling),that.oConfig.EVALUATION.SCALING,that.oConfig.EVALUATION.DECIMAL_PRECISION);
                    that.oDualTrendView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);
                    _applyData(cachedValue.data,that.DEFINITION_DATA.EVALUATION.VALUES_SOURCE);
                    that._updateTileModel({
                        value : oScaledValue.toString(),
                        valueColor : that.getTrendColor(that.setThresholdValues()),
                        indicator : trendIndicator
                    });
                } catch(e) {
                    that.logError(e);
                }
            }
            function _applyData(data,type) {
                var dimensionArray = [];
                var measureArray = [];
                var wHArray = [];
                var cHArray = [];
                var cLArray = [];
                var wLArray = [];
                var firstXlabel = data.firstXlabel;
                var minThresholdMeasure, maxThresholdMeasure, innerMinThresholdMeasure, innerMaxThresholdMeasure, targetMeasure;
                var lastXlabel = data.lastXlabel;
                var firstYLabelValue = Number(data.results[0][sMeasure]);
                var lastYLabelValue = Number(data.results[data.results.length - 1][sMeasure]);
                var i;

                for (i in data.results) {
                    data.results[i][dimensionName] = Number(i);
                    data.results[i][sMeasure] = Number(data.results[i][sMeasure]);
                    that.sWarningHigh ? data.results[i][that.sWarningHigh] = Number(data.results[i][that.sWarningHigh]) : "";
                    that.sCriticalHigh ? data.results[i][that.sCriticalHigh] = Number(data.results[i][that.sCriticalHigh]) : "";
                    that.sCriticalLow ? data.results[i][that.sCriticalLow] = Number(data.results[i][that.sCriticalLow]) : "";
                    that.sWarningLow ? data.results[i][that.sWarningLow] = Number(data.results[i][that.sWarningLow]) : "";
                    that.sTarget ? data.results[i][that.sTarget] = Number(data.results[i][that.sTarget]) : "";
                    that.sWarningHigh ? wHArray.push(data.results[i][that.sWarningHigh]) : "";
                    that.sCriticalHigh ? cHArray.push(data.results[i][that.sCriticalHigh]) : "";
                    that.sCriticalLow ? cLArray.push(data.results[i][that.sCriticalLow]) : "";
                    that.sWarningLow ?  wLArray.push(data.results[i][that.sWarningLow]) : "";
                    dimensionArray.push(data.results[i][dimensionName]);
                    measureArray.push(data.results[i][sMeasure]);
                }
                try {
                    firstXlabel = sap.ushell.components.tiles.indicatorTileUtils.util.formatOdataObjectToString(firstXlabel);
                    lastXlabel = sap.ushell.components.tiles.indicatorTileUtils.util.formatOdataObjectToString(lastXlabel);
                } catch (e) {
                    that.logError(e);
                }
                var firstCalculatedValueForScaling = Number(firstYLabelValue);
                if (that.oConfig.EVALUATION.SCALING == -2) {
                    firstCalculatedValueForScaling *= 100;
                }
                var minMeasure = Math.min.apply(Math, measureArray); //to obtain the starting value
                var formattedFirstYLabel = sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(firstCalculatedValueForScaling, that.oConfig.EVALUATION.SCALING,that.oConfig.EVALUATION.DECIMAL_PRECISION);
                if (that.oConfig.EVALUATION.SCALING == -2) {
                    formattedFirstYLabel += " %";
                }
                var firstYLabel = formattedFirstYLabel.toString();

                var lastCalculatedValueForScaling = Number(lastYLabelValue);
                if (that.oConfig.EVALUATION.SCALING == -2) {
                    lastCalculatedValueForScaling *= 100;
                }
                var maxMeasure = Math.max.apply(Math, measureArray); //to obtain the last value
                var formattedLastYLabel = sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(lastCalculatedValueForScaling, that.oConfig.EVALUATION.SCALING,that.oConfig.EVALUATION.DECIMAL_PRECISION);
                if (that.oConfig.EVALUATION.SCALING == -2) {
                    formattedLastYLabel += " %";
                }
                var lastYLabel = formattedLastYLabel.toString();

                try {
                    var minDimension = sap.ushell.components.tiles.indicatorTileUtils.util.formatOdataObjectToString(Math.min.apply(Math, dimensionArray)); //to obtain the starting value
                    var maxDimension = sap.ushell.components.tiles.indicatorTileUtils.util.formatOdataObjectToString(Math.max.apply(Math, dimensionArray)); //to obtain the last value
                } catch (e) {
                    that.logError(e);
                }
                if (type == "MEASURE"){
                    (wHArray.length != 0) ? (that.firstwH = wHArray[minDimension]) &&  (that.lastwH = wHArray[maxDimension]) : "";
                    (cHArray.length != 0) ? (that.firstcH = cHArray[minDimension]) && (that.lastcH = cHArray[maxDimension]) : "";
                    (cLArray.length != 0) ? (that.firstcL = cLArray[minDimension]) && (that.lastcL = cLArray[maxDimension]) : "";
                    (wLArray.length != 0) ? (that.firstwL = wLArray[minDimension]) && (that.lastwL = wLArray[maxDimension]) : "";
                }
                var updatedModel = {
                        width: "100%",
                        height: "100%",
                        unit: that.unit || "",
                        chart: {
                            color: "Neutral",
                            data: data.results
                        },
                        size: "Auto",
                        minXValue: minDimension,
                        maxXValue: maxDimension,
                        minYValue: minMeasure,
                        maxYValue: maxMeasure,
                        firstXLabel: {
                            label: firstXlabel + "",
                            color: "Neutral"
                        },
                        lastXLabel: {
                            label: lastXlabel + "",
                            color: "Neutral"
                        },
                        firstYLabel: {
                            label: firstYLabel + "",
                            color: "Neutral"
                        },
                        lastYLabel: {
                            label: lastYLabel + "",
                            color: "Neutral"
                        },
                        minLabel: {},
                        maxLabel: {}
                };

                switch (goaltype) {
                case "MA":
                    for (i in evaluationValues) {
                        if (evaluationValues[i].TYPE == "CL") {
                            updatedModel.minThreshold = {
                                color: "Error"
                            };
                            var newObj = {};
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            that.cl = Number(evaluationValues[i].FIXED);
                            updatedModel.minThreshold.data = (type  == "MEASURE") ? data.results : [newObj];
                            minThresholdMeasure = (type  == "MEASURE") ? that.sCriticalLow : sMeasure;

                        } else if (evaluationValues[i].TYPE == "WL") {
                            updatedModel.maxThreshold = {
                                    color: "Good"
                            };
                            var newObj = {};
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            updatedModel.maxThreshold.data = (type  == "MEASURE") ? data.results : [newObj];
                            maxThresholdMeasure = (type  == "MEASURE") ?  that.sWarningLow : sMeasure;
                            that.wl = Number(evaluationValues[i].FIXED);

                        } else if (evaluationValues[i].TYPE == "TA") {
                            var newObj = {};
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            updatedModel.target = {
                                color: "Neutral"
                            };
                            updatedModel.target.data = (type  == "MEASURE") ? data.results : [newObj];
                            targetMeasure = (type  == "MEASURE") ? that.sTarget : sMeasure;
                        }
                    }
                    updatedModel.innerMinThreshold = {
                            data: [

                                   ]
                    };
                    updatedModel.innerMaxThreshold = {
                            data: [

                                   ]
                    };
                    if (type  == "FIXED"){
                        updatedModel.firstYLabel.color = firstYLabelValue < that.cl ? "Error" : ((that.cl <= firstYLabelValue) && (firstYLabelValue <= that.wl)) ? "Critical" : (firstYLabelValue > that.wl) ? "Good" : "Neutral";
                        updatedModel.lastYLabel.color = lastYLabelValue < that.cl ? "Error" : ((that.cl <= lastYLabelValue) && (lastYLabelValue <= that.wl)) ? "Critical" : (lastYLabelValue > that.wl) ? "Good" : "Neutral";
                    } else if (type == "MEASURE" && that.firstwL && that.lastwL && that.firstcL && that.lastcL){
                        updatedModel.firstYLabel.color = firstYLabelValue < that.firstcL ? "Error" : ((that.firstcL <= firstYLabelValue) && (firstYLabelValue <= that.firstwL)) ? "Critical" : (firstYLabelValue > that.firstwL) ? "Good" : "Neutral";
                        updatedModel.lastYLabel.color = lastYLabelValue < that.lastcL ? "Error" : ((that.lastcL <= lastYLabelValue) && (lastYLabelValue <= that.lastwL)) ? "Critical" : (lastYLabelValue > that.lastwL) ? "Good" : "Neutral";
                    }
                    break;
                case "MI":
                    for (i in evaluationValues) {

                        if (evaluationValues[i].TYPE == "CH") {
                            var newObj = {};
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            that.ch =  Number(evaluationValues[i].FIXED);
                            updatedModel.maxThreshold = {
                                color: "Error"
                            };
                            updatedModel.maxThreshold.data = (type  == "MEASURE") ? data.results : [newObj];
                            maxThresholdMeasure = (type  == "MEASURE") ? that.sCriticalHigh : sMeasure;
                        } else if (evaluationValues[i].TYPE == "WH") {
                            var newObj = {};
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            that.wh = Number(evaluationValues[i].FIXED);
                            updatedModel.minThreshold = {
                                color: "Good"
                            };
                            updatedModel.minThreshold.data = (type  == "MEASURE") ? data.results : [newObj];
                            minThresholdMeasure = (type  == "MEASURE") ? that.sWarningHigh : sMeasure;

                        } else if (evaluationValues[i].TYPE == "TA") {
                            var newObj = {};
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            updatedModel.target = {
                                color: "Neutral"
                            };
                            updatedModel.target.data = (type  == "MEASURE") ? data.results : [newObj];
                            targetMeasure = (type  == "MEASURE") ? that.sTarget : sMeasure;
                        }


                    }
                    if (type  == "FIXED"){
                        updatedModel.firstYLabel.color = firstYLabelValue > that.ch ? "Error" : ((that.wh <= firstYLabelValue) && (firstYLabelValue <= that.ch)) ? "Critical" : (firstYLabelValue < that.wh) ? "Good" : "Neutral";
                        updatedModel.lastYLabel.color = lastYLabelValue > that.ch ? "Error" : ((that.wh <= lastYLabelValue) && (lastYLabelValue <= that.ch)) ? "Critical" : (lastYLabelValue < that.wh) ? "Good" : "Neutral";
                    } else if (type == "MEASURE" && that.firstwH && that.lastwH && that.firstcH && that.lastcH){
                        updatedModel.firstYLabel.color = firstYLabelValue > that.firstcH ? "Error" : ((that.firstwH <= firstYLabelValue) && (firstYLabelValue <= that.firstcH)) ? "Critical" : (firstYLabelValue < that.firstwH) ? "Good" : "Neutral";
                        updatedModel.lastYLabel.color = lastYLabelValue > that.lastcH ? "Error" : ((that.lastwH <= lastYLabelValue) && (lastYLabelValue <= that.lastcH)) ? "Critical" : (lastYLabelValue < that.lastwH) ? "Good" : "Neutral";

                    }
                    updatedModel.innerMaxThreshold = {
                            data: [

                                   ]
                    };
                    updatedModel.innerMinThreshold = {
                            data: [

                                   ]
                    };
                    break;
                case "RA":
                    for (i in evaluationValues) {

                        if (evaluationValues[i].TYPE == "CH") {
                            var newObj = {};
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            that.ch = Number(evaluationValues[i].FIXED);
                            updatedModel.maxThreshold = {
                                color: "Error"
                            };
                            updatedModel.maxThreshold.data = (type  == "MEASURE") ?  data.results : [newObj];
                            maxThresholdMeasure = (type  == "MEASURE") ? that.sCriticalHigh : sMeasure;
                        } else if (evaluationValues[i].TYPE == "WH") {
                            var newObj = {};
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            that.wh = Number(evaluationValues[i].FIXED);
                            updatedModel.innerMaxThreshold = {
                                    color: "Good"
                            };
                            updatedModel.innerMaxThreshold.data = (type  == "MEASURE") ? data.results : [newObj];
                            innerMaxThresholdMeasure = (type  == "MEASURE") ? that.sWarningHigh : sMeasure;
                        } else if (evaluationValues[i].TYPE == "WL") {
                            var newObj = {};
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            that.wl = Number(evaluationValues[i].FIXED);
                            updatedModel.innerMinThreshold = {
                                    color: "Good"
                            };
                            updatedModel.innerMinThreshold.data = (type  == "MEASURE") ?  data.results : [newObj];
                            innerMinThresholdMeasure = (type  == "MEASURE") ? that.sWarningLow : sMeasure;
                        } else if (evaluationValues[i].TYPE == "CL") {
                            var newObj = {};
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            that.cl = Number(evaluationValues[i].FIXED);
                            updatedModel.minThreshold = {
                                color: "Error"
                            };
                            updatedModel.minThreshold.data = (type  == "MEASURE") ? data.results : [newObj];
                            minThresholdMeasure = (type  == "MEASURE") ? that.sCriticalLow : sMeasure;
                        } else if (evaluationValues[i].TYPE == "TA") {
                            var newObj = {};
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            updatedModel.target = {
                                color: "Neutral"
                            };
                            updatedModel.target.data = (type  == "MEASURE") ? data.results : [newObj];
                            targetMeasure = (type  == "MEASURE") ? that.sTarget : sMeasure;
                        }
                    }
                    if (type == "FIXED"){
                        updatedModel.firstYLabel.color = (firstYLabelValue > that.ch || firstYLabelValue < that.cl ) ? "Error" : ((that.wh <= firstYLabelValue) && (firstYLabelValue <= that.ch)) || ((that.cl <= firstYLabelValue) && (firstYLabelValue <= that.wl))  ? "Critical" : ((firstYLabelValue >= that.wl) && (firstYLabelValue <= that.wh)) ? "Good" : "Neutral";
                        updatedModel.lastYLabel.color = (lastYLabelValue > that.ch || lastYLabelValue < that.cl ) ? "Error" : ((that.wh <= lastYLabelValue) && (lastYLabelValue <= that.ch)) || ((that.cl <= lastYLabelValue) && (lastYLabelValue <= that.wl))  ? "Critical" : ((lastYLabelValue >= that.wl) && (lastYLabelValue <= that.wh)) ? "Good"  : "Neutral";
                    } else if (type == "MEASURE" && that.firstwL && that.lastwL && that.firstcL && that.lastcL && that.firstwH && that.lastwH && that.firstcH && that.lastcH) {
                        updatedModel.firstYLabel.color = (firstYLabelValue > that.firstcH || firstYLabelValue < that.firstcL ) ? "Error" : ((that.firstwH <= firstYLabelValue) && (firstYLabelValue <= that.firstcH)) || ((that.firstcL <= firstYLabelValue) && (firstYLabelValue <= that.firstwL))  ? "Critical" : ((firstYLabelValue >= that.firstwL) && (firstYLabelValue <= that.firstwH)) ? "Good" : "Neutral";
                        updatedModel.lastYLabel.color = (lastYLabelValue > that.lastcH || lastYLabelValue < that.lastcL ) ? "Error" : ((that.lastwH <= lastYLabelValue) && (lastYLabelValue <= that.lastcH)) || ((that.lastcL <= lastYLabelValue) && (lastYLabelValue <= that.lastwL))  ? "Critical" : ((lastYLabelValue >= that.lastwL) && (lastYLabelValue <= that.lastwH)) ? "Good" : "Neutral";
                    }
                    break;

                }




                var buildChartItem = function (sName, a, b, type) {
                    return new sap.suite.ui.commons.MicroAreaChartItem({
                        color: "{/" + sName + "/color}",
                        points: {
                            path: "/" + sName + "/data",
                            template: new sap.suite.ui.commons.MicroAreaChartPoint({
                                x: "{" + a + "}",
                                y: "{" + b + "}"

                            })
                        }
                    });
                };
                that.getTile().getTileContent()[1].getContent().setTarget(buildChartItem("target", dimensionName, targetMeasure));
                that.getTile().getTileContent()[1].getContent().setInnerMinThreshold(buildChartItem("innerMinThreshold", dimensionName, innerMinThresholdMeasure));
                that.getTile().getTileContent()[1].getContent().setInnerMaxThreshold(buildChartItem("innerMaxThreshold", dimensionName, innerMaxThresholdMeasure));
                that.getTile().getTileContent()[1].getContent().setMinThreshold(buildChartItem("minThreshold", dimensionName, minThresholdMeasure));
                that.getTile().getTileContent()[1].getContent().setMaxThreshold(buildChartItem("maxThreshold", dimensionName, maxThresholdMeasure));
                that.getTile().getTileContent()[1].getContent().setChart(buildChartItem("chart", dimensionName, sMeasure));



                that._updateTileModel(updatedModel);
            }
        },

        flowWithoutDesignTimeCall: function () {
            this.DEFINITION_DATA = this.oConfig;
            this._updateTileModel(this.DEFINITION_DATA);
            if (this.oTileApi.visible.isVisible() && !this.firstTimeVisible) {
                this.firstTimeVisible = true;
            }

            this.onAfterFinalEvaluation();


        },

        flowWithDesignTimeCall: function () {
            var that = this;
            try {
                var evaluationData = sap.ushell.components.tiles.indicatorTileUtils.cache.getEvaluationById(this.oConfig.EVALUATION.ID);
                if (evaluationData) {
                    that.oConfig.EVALUATION_FILTERS = evaluationData.EVALUATION_FILTERS;
                    that.flowWithoutDesignTimeCall();
                } else {
                    sap.ushell.components.tiles.indicatorTileUtils.util.getFilterFromRunTimeService(this.oConfig, function (filter) {
                        that.oConfig.EVALUATION_FILTERS = filter;
                        sap.ushell.components.tiles.indicatorTileUtils.cache.setEvaluationById(that.oConfig.TILE_PROPERTIES.id, that.oConfig);
                        that.flowWithoutDesignTimeCall();
                    });
                }
            } catch (e) {
                this.logError(e);
            }
        },

        setTextInTile: function () {
            var that = this;
            this._updateTileModel({
                header: that.oTileApi.preview.getTitle() || sap.ushell.components.tiles.indicatorTileUtils.util.getChipTitle(that.oConfig),
                subheader: that.oTileApi.preview.getDescription() || sap.ushell.components.tiles.indicatorTileUtils.util.getChipSubTitle(that.oConfig)
            });
        },
        logError: function (err) {
            this.oDualTrendView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Failed);
            this.oDualTrendView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Failed);
            sap.ushell.components.tiles.indicatorTileUtils.util.logError(err);
        },
        refreshHandler: function (oController) {
            if (!oController.firstTimeVisible){
                if (Number(this.oTileApi.configuration.getParameterValueAsString("isSufficient"))) {
                    oController.flowWithoutDesignTimeCall();
                } else {
                    oController.flowWithDesignTimeCall();
                }
            }

        },
        visibleHandler: function (isVisible) {
            if (!isVisible) {
                this.firstTimeVisible = false;
                sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(this.trendChartODataReadRef);
            }
            if (isVisible) {
                this.refreshHandler(this);
            }
        },
        onExit : function(){
            sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(this.trendChartODataReadRef);
        }

    });
}());
(function () {
    "use strict";
    sap.ui.controller("tiles.indicatorHarveyBall.HarveyBallTile", {
        onInit : function(){
            this.getView().setModel(new sap.ui.model.json.JSONModel());
            this.initializeVariables();
            this.attachHandlers();
            this.getVariable("tile").setState(sap.suite.ui.commons.LoadState.Loading);
            this.readChipConfiguration();
        },
        attachHandlers:function(){
            var that = this;
            var oChip = this.getVariable("chip");
            if (oChip.visible) {
                oChip.visible.attachVisible(function(bVisible){
                    if (bVisible){
                        that.onVisible();
                    } else {
                        that.abortAllOpenODataRequests();
                    }
                });
            }
            this.getVariable("tile").attachPress(function(){
                that.abortAllOpenODataRequests();
                var indicatorUtils = that.getVariable("indicatorUtils");
                that.getVariable("cache").setKpivalueById(that.getVariable("chipId"), null);
                window.location.hash = indicatorUtils.getNavigationTarget(that.getVariable("evalData"),that.getVariable("system"));
            });

        },
        initializeVariables:function(){
            this._variables = {};
            this._oDataRequests = {};
            var oView = this.getView();
            var oViewData = oView.getViewData();
            var oTile = oView.oTile;
            var oChip = oViewData.chip;
            this.setVariable("indicatorUtils",sap.ushell.components.tiles.indicatorTileUtils.util);
            this.setVariable("cache",sap.ushell.components.tiles.indicatorTileUtils.cache);
            this.setVariable("hasAppeared",false);
            this.setVariable("chip",oChip);
            this.setVariable("tile",oTile);
            this.setVariable("tileControl",oTile.getTileContent()[0].getContent());
            this.setVariable("configurationString",oChip.configuration.getParameterValueAsString("tileConfiguration"));
            this.setVariable("system",oChip.url.getApplicationSystem());
        },
        getVariable:function(sKey){
            return this._variables[sKey];
        },
        setVariable:function(sKey,oVal){
            this._variables[sKey] = oVal;
        },
        readChipConfiguration:function(){
            var that = this;
            var oChip = this.getVariable("chip");
            var utils = this.getVariable("indicatorUtils");
            utils.getParsedChip(this.getVariable("configurationString"),function(evalData){
                that.setVariable("evalData",evalData);
                that.setVariable("chipId",evalData.TILE_PROPERTIES.id);
                that.setVariable("tileProperties",evalData.TILE_PROPERTIES);
                if (oChip.preview){
                    oChip.preview.setTargetUrl(utils.getNavigationTarget(evalData,that.getVariable("system")));
                    that.loadPreviewData();
                    if (oChip.preview.isEnabled()){
                        that.getVariable("tile").setState(sap.suite.ui.commons.LoadState.Loaded);
                    } else {
                        that.loadActualData();
                    }
                }
            }
            );
        },
        loadPreviewData:function(){
            var oTitle = this.getVariable("indicatorUtils").getTileTitleSubtitle(this.getVariable("chip"));
            this.getView().getModel().setData({
                fractionValue: 34,
                value:100,
                size: sap.suite.ui.commons.InfoTileSize.Auto,
                frameType:"OneByOne",
                color: "Good",
                state: sap.suite.ui.commons.LoadState.Loading,
                header: oTitle.title || this.getVariable("indicatorUtils").getChipTitle(this.getVariable("evalData")),
                subheader :oTitle.subTitle || this.getVariable("indicatorUtils").getChipSubTitle(this.getVariable("evalData"))
            });
        },
        loadActualData:function(){
            if (Number(this.getVariable("chip").configuration.getParameterValueAsString("isSufficient"))){
                this.getVariable("cache").setEvaluationById(this.getVariable("chipId"),this.getVariable("evalData"));
                this.onEvalFiltersFetched();
            } else {
                this.fetchEvalFilters(this.onEvalFiltersFetched);
            }

        },
        registerOpenODataRequest:function(sKey,oRequest){
            this._oDataRequests[sKey] = oRequest;
        },
        deregisterOpenODataRequest:function(sKey){
            delete this._oDataRequests[sKey];
        },
        abortAllOpenODataRequests:function(){
            for (var each in this._oDataRequests){
                try {
                    this.getVariable("indicatorUtils").abortPendingODataCalls(this._oDataRequests[each]);
                    delete this._oDataRequests[each];
                } catch(e) {
                    //do nothing on exception
                }
            }
        },
        fetchKpiValue : function(oParam) {
            function makeODataRequest(oModel,sUri,oConfig,fnS,fnE){
                var oDataRef = oModel.read(sUri, null, null, true, function(data) {
                    that.deregisterOpenODataRequest(oConfig.type);
                    if (data && data.results && data.results.length) {
                        try {
                            if (oConfig.thresholds && oConfig.thresholds.length){
                                that._setThresholdValues(data.results[0]);
                            }
                            kpiData[oConfig.type] = data.results[0][oConfig.measure];
                            kpiData.unit = kpiData.unit || data.results[0][oConfig.unit] || "";
                            if (--semaphore == 0){// when both the requests are successfully served
                                that.getVariable("cache").setKpivalueById(that.getVariable("chipId"), kpiData);
                                fnS.call(that, kpiData);
                            }
                        }catch(e){
                            that.logError(e);
                        }
                    } else {
                        fnE.call(that,"no data");
                    }
                },function(e){
                    that.deregisterOpenODataRequest(oConfig.type);
                    if (e && e.response) {
                        fnE.call(that,e.message);
                    }
                });
                that.registerOpenODataRequest(oConfig.type,oDataRef);
            }

            var that = this;
            var indicatorUtils = this.getVariable("indicatorUtils");
            var cachedValue = this.getVariable("cache").getKpivalueById(this.getVariable("chipId"));
            if (cachedValue){
                oParam.fnS.call(that, cachedValue);
            } else {
                var sMeasure1 = oParam.measure1, sMeasure2 = oParam.measure2;
                var sUri = oParam.url,sEntitySet = oParam.entitySet;
                var variantFilters = oParam.filters;
                var fractionValueFilters = oParam.fractionFilters.concat(variantFilters);
                var oQuery1, oQuery2;
                var unitColumn1,unitColumn2,kpiData;
                var semaphore = 2;//to keep track of race around condition
                fractionValueFilters.forEach(function(cur){// this code written only for now. to handler the exception thrown by prepareQueryServiceUri
                    cur.value = cur.value + ""; // it assumes everyting is string and tries to call split
                    cur.valueTo = cur.valueTo + "";
                });
                if (oParam.thresholds && oParam.thresholds.length) {
                    oQuery1 = indicatorUtils.prepareQueryServiceUri(this.getVariable("chip").url.addSystemToServiceUrl(sUri), sEntitySet, sMeasure1 + "," + oParam.thresholds, null, variantFilters);
                } else {
                    oQuery1 = indicatorUtils.prepareQueryServiceUri(this.getVariable("chip").url.addSystemToServiceUrl(sUri), sEntitySet, sMeasure1, null, variantFilters);
                }
                oQuery2 = indicatorUtils.prepareQueryServiceUri(this.getVariable("chip").url.addSystemToServiceUrl(sUri), sEntitySet, sMeasure2, null, fractionValueFilters);
                unitColumn1 = oQuery1.unit[0];
                unitColumn2 = oQuery2.unit[0];
                kpiData = {
                    kpiValue:null,
                    fractionValue:null,
                    unit:""
                };
                if (oQuery1) {
                    makeODataRequest(oQuery1.model,oQuery1.uri,{
                        measure: sMeasure1,
                        type: "kpiValue",
                        unit: unitColumn1,
                        thresholds : oParam.thresholds
                    },oParam.fnS,oParam.fnE);
                }
                if (oQuery2){
                    makeODataRequest(oQuery2.model,oQuery2.uri,{
                        measure: sMeasure2,
                        type: "fractionValue",
                        unit: unitColumn2
                    },oParam.fnS,oParam.fnE);
                }
                if (!(oQuery1 && oQuery2)){
                    oParam.fnE.call(that,"Error Preparing Query Service URI");
                }
            }
        },
        _setThresholdValues : function(data){
            var oThreshold = this.getVariable("oThreshold");
            //var isRelativeThreshold;
            if (oThreshold){
                if (this.getVariable("evalData").EVALUATION.VALUES_SOURCE == "RELATIVE"){
                    if (oThreshold["TA"].COLUMN_NAME){ // only if target threshold is a measure column
                        oThreshold["TA"].VALUE = parseFloat(data[oThreshold["TA"].COLUMN_NAME]);
                        for (var each in oThreshold){
                            if (!oThreshold[each].COLUMN_NAME){
                                oThreshold[each].VALUE = oThreshold["TA"].VALUE * oThreshold[each].VALUE / 100;
                            }
                        }
                    }
                } else {
                    for (var each in oThreshold){
                        if (oThreshold[each].COLUMN_NAME){
                            oThreshold[each].VALUE = parseFloat(data[oThreshold[each].COLUMN_NAME]);
                        }
                    }
                }
            }
            this.setVariable("oThreshold",oThreshold);
        },
        getThresholdObject : function(){
            var oThreshold = this.getVariable("oThreshold");
            if (!oThreshold){
                var aThresholds = this.getVariable("evalData").EVALUATION_VALUES;
                var oThreshold = {};
                for (var i = 0, l = aThresholds.length; i < l; i++){
                    oThreshold[aThresholds[i].TYPE] = {
                            VALUE : parseFloat(aThresholds[i].FIXED),
                            COLUMN_NAME : aThresholds[i].COLUMN_NAME
                    };
                }
                this.setVariable("oThreshold",oThreshold);
            }
            return oThreshold;
        },
        hasSomeValue : function() {
            var flag = true;
            if (arguments.length) {
                for (var i = 0, l = arguments.length; i < l; i++) {
                    if (!(arguments[i] || arguments[i] == "0")) {
                        flag = false;
                        break;
                    }
                }
            } else {
                flag = false;
            }
            return flag;
        },
        getTrendColor : function(kpiValue) {
            var color = "Neutral";
            var oThreshold, goalType,WL,WH,CL,CH;
            if (this.getVariable("tileProperties").isFractionMeasure){
                oThreshold = this.getThresholdObject();
                goalType = this.getVariable("evalData").EVALUATION.GOAL_TYPE;

                if (goalType == "MA"){
                    WL = oThreshold.WL;
                    CL = oThreshold.CL;
                    if (this.hasSomeValue(WL,CL)){
                        color = "Good";
                        if (kpiValue < CL.VALUE) {
                            color = "Error";
                        } else if (kpiValue <= WL.VALUE) {
                            color = "Critical";
                        }
                    }

                } else if (goalType == 'MI'){
                    WH = oThreshold.WH;
                    CH = oThreshold.CH;
                    if (this.hasSomeValue(WH,CH)){
                        color = "Error";
                        if (kpiValue < WH.VALUE) {
                            color = "Good";
                        } else if (kpiValue <= CH.VALUE) {
                            color = "Critical";
                        }
                    }
                } else {
                    WL = oThreshold.WL;
                    CL = oThreshold.CL;
                    WH = oThreshold.WH;
                    CH = oThreshold.CH;
                    if (this.hasSomeValue(WH,CH,CL,WL)){
                        if (kpiValue <= CL.VALUE || kpiValue >= WH.VALUE){
                            color = "Error";
                        } else if ((WL.VALUE >= kpiValue && kpiValue >= CL.VALUE) || (CH.VALUE >= kpiValue && kpiValue >= WH.VALUE)){
                            color = "Critical";
                        } else {
                            color = "Good";
                        }
                    }
                }
            }
            return sap.suite.ui.commons.InfoTileValueColor[color];
        },
        _getThresholdMeasures : function(){
            var aThresholds = [];
            var oThreshold = this.getThresholdObject();
            for (var each in oThreshold){
                if (oThreshold[each].COLUMN_NAME){
                    aThresholds.push(oThreshold[each].COLUMN_NAME);
                }
            }
            return aThresholds;
        },
        onEvalFiltersFetched : function() {
            var that = this;
            if (this.getVariable("chip").visible.isVisible() && !this.getVariable("hasAppeared")){
                try {
                    var kpiDefinition = this.getVariable("evalData");
                    var sUri = kpiDefinition.EVALUATION.ODATA_URL;
                    var sEntitySet = kpiDefinition.EVALUATION.ODATA_ENTITYSET;
                    var tileProperties = this.getVariable("tileProperties");
                    var harveyFilters = [];
                    var variantFilters = this.getVariable("indicatorUtils").prepareFilterStructure(kpiDefinition.EVALUATION_FILTERS,kpiDefinition.ADDITIONAL_FILTERS);
                    var fractionMeasure = kpiDefinition.EVALUATION.COLUMN_NAME;
                    var totalMeasure = fractionMeasure;
                    var thresholdMeasures = [];
                    if (tileProperties.isFractionMeasure){
                        totalMeasure = tileProperties.harveyTotalMeasure;
                        thresholdMeasures = this._getThresholdMeasures();
                    } else {
                        harveyFilters = this.getVariable("indicatorUtils").prepareFilterStructure(tileProperties.harveyFilters || harveyFilters);
                    }
                    this.setVariable("totalMeasure", totalMeasure);
                    this.setVariable("fractionMeasure", fractionMeasure);
                    this.fetchKpiValue({
                        measure1:totalMeasure,
                        measure2:fractionMeasure,
                        entitySet:sEntitySet,
                        thresholds : thresholdMeasures,
                        url:sUri,
                        filters:variantFilters,
                        fractionFilters:harveyFilters,
                        fnS:function(kpiData){
                            kpiData.kpiValue = Number(kpiData.kpiValue);
                            kpiData.fractionValue = Number(kpiData.fractionValue);
                            that.setVariable("kpiValue",kpiData.kpiValue);
                            that.setVariable("fractionValue",kpiData.fractionValue);
                            that.onKpiValueFetched(kpiData.kpiValue,kpiData.unit,kpiData.fractionValue);
                        },
                        fnE:this.logError
                    });
                    that.setVariable("hasAppeared",true);
                }catch(e) {
                    this.logError(e);
                }
            }
        },
        fetchEvalFilters: function(fnS) {
            var that = this;
            try {
                var evaluationData = this.getVariable("cache").getEvaluationById(this.getVariable("chipId"));
                if (evaluationData){
                    this.getVariable("evalData").EVALUATION_FILTERS = evaluationData.EVALUATION_FILTERS;
                    fnS();
                } else {
                    var oDataRef = this.getVariable("indicatorUtils").getFilterFromRunTimeService(this.getVariable("evalData"),function(filter){
                        that.deregisterOpenODataRequest("kpiFilterRequest");
                        that.getVariable("evalData").EVALUATION_FILTERS = filter;
                        that.getVariable("cache").setEvaluationById(that.getVariable("chipId"),that.getVariable("evalData"));
                        fnS.call(that);
                    },function(e){
                        this.logError(e);
                        that.deregisterOpenODataRequest("kpiFilterRequest");
                    });

                    this.registerOpenODataRequest("kpiFilterRequest",oDataRef);
                }
            } catch(e) {
                this.logError(e);
            }
        },
        onKpiValueFetched:function(kpiValue,kpiValueUnit,fractionValue,fractionValueUnit){
            var indicatorUtil = this.getVariable("indicatorUtils");
            var scaledKpiValue = kpiValue;
            var scaledFractionValue = fractionValue;
            var evalData = this.getVariable("evalData");
            var scalingFactor = evalData.EVALUATION.SCALING;
            if (scalingFactor == -2){
                scaledKpiValue *= 100;
                scaledFractionValue *= 100;
            }
            var c = this.isACurrencyMeasure(this.getVariable("totalMeasure"));
            scaledKpiValue = indicatorUtil.getLocaleFormattedValue(Number(scaledKpiValue),scalingFactor, null, c, kpiValueUnit);
            c = this.isACurrencyMeasure(this.getVariable("fractionMeasure"));
            scaledFractionValue = indicatorUtil.getLocaleFormattedValue(Number(scaledFractionValue),scalingFactor, null, c, kpiValueUnit);

            this.getView().getModel().setProperty("/totalLabel", scaledKpiValue + " " + kpiValueUnit);
            this.getView().getModel().setProperty("/fractionLabel", scaledFractionValue + " " + fractionValueUnit);
            this.getView().getModel().setProperty("/color",this.getTrendColor(fractionValue));
            this.getView().getModel().setProperty("/value",kpiValue);
            this.getView().getModel().setProperty("/fractionValue",fractionValue);

            var navTarget = indicatorUtil.getNavigationTarget(this.getVariable("evalData"),this.getVariable("system"));
            this.getVariable("tile").$().wrap("<a href ='" + navTarget + "'/>");
            this.getVariable("tile").setState(sap.suite.ui.commons.LoadState.Loaded);
        },
        logError: function(err){
            this.getVariable("tile").setState(sap.suite.ui.commons.LoadState.Failed);
            this.getVariable("indicatorUtils").logError(err,this.getVariable("tile"));
        },
        onVisible: function (isVisible) {
            if (!this.getVariable("hasAppeared")){
                if (Number(this.getVariable("chip").configuration.getParameterValueAsString("isSufficient"))){
                    this.onEvalFiltersFetched();
                } else {
                    this.fetchEvalFilters(this.onEvalFiltersFetched);
                }
            }
        },
        onExit : function(){
            this.abortAllOpenODataRequests();
        }

    });
}());
(function () {
    "use strict";
    /*global jQuery, sap, console, window*/
    /*jslint plusplus: true, nomen: true*/

    sap.ui.controller("sap.ushell.components.treeview.NavTree", {
        onInit : function () {
            var oViewData = this.getView().getViewData(),
                root = oViewData.data.items,
                serviceURL = oViewData.data.serviceURL || '',
                treeModel = {items: [], entryObject: {}};

            var oModel = new sap.ui.model.json.JSONModel(treeModel);
            this.getView().setModel(oModel);

            //make the request.
            jQuery.getJSON(serviceURL)
                .done(function (root) {
                    this.buidModelData(root);
                }.bind(this))
                .fail(function (jqxhr, textStatus, error) {
                    var err = textStatus + ", " + error;
                    jQuery.sap.log.error("Request Failed: " + err);
                    this.buidModelData(root);
                }.bind(this));
        },
        buidModelData: function (root) {
            //Implement the flattening algorithm.
            var itemKey, elemKey, groupIndex = 0, treeModel = {items: [], entryObject: {}};
            for (itemKey in root.nodes) {
                var item = root.nodes[itemKey];

                if (item.type === 'SUBMENU') {
                    var groupName = item.title;
                    for (elemKey in item.nodes) {
                        var elem = item.nodes[elemKey];
                        elem.groupIndex = groupIndex.toString();
                        elem.groupName = groupName;
                        treeModel.items.push(elem);
                        treeModel.entryObject[groupIndex.toString()] = {title: item.title, type: item.type};
                    }
                } else if (item.type === 'URL' || item.type === 'APP') {
                    item.groupIndex = groupIndex.toString();
                    item.groupName = "";
                    treeModel.items.push(item);
                    treeModel.entryObject[groupIndex.toString()] = {title: item.title, type: item.type, href: item.target};
                }

                groupIndex++;
            }

            var oModel = new sap.ui.model.json.JSONModel(treeModel);
            this.getView().setModel(oModel);
        },
        getGroupHeader: function (oGroup) {
            var entryItem = this.getView().getModel().getData().entryObject[oGroup.key];
            jQuery.sap.require('sap.m.GroupHeaderListItem');

            if (entryItem.type === "SUBMENU") {
                var icon = new sap.ui.core.Icon({
                    src : 'slim-arrow-right',
                    tooltip : entryItem.title
                }).addStyleClass('sapUshellGroupListItemIcon');

                var lnk = new sap.m.Label({
                        text: entryItem.title
                    }).addStyleClass('sapUshellNavTreeLink');

                return new sap.m.CustomListItem({
                    press: [this.handleClickOnSubMenu, this],
                    type: sap.m.ListType.Active,
                    content: [icon, lnk]
                }).addStyleClass('sapUshellNavTreeListItem sapUshellNavTreeParent');

            } else {
                return new sap.m.CustomListItem({
                    content: new sap.m.Link({
                        text: entryItem.title,
                        href : entryItem.href
                    }).addStyleClass('sapUshellNavTreeLink')
                }).addEventDelegate({
                        onclick: this.onNavTreeTitleChange.bind(this)
                }).addStyleClass('sapUshellNavTreeListItem sapUshellNavTreeSingle');
            }
        },
        onNavTreeTitleChange : function (oEvent) {
            if (this._prevSelect) {
                this._prevSelect.removeStyleClass('sapUshellNavTreeItemSelected');
            }
            var item = oEvent.srcControl;


            if (oEvent.srcControl.getContent) {
                window.location.href = oEvent.srcControl.getContent()[0].getHref();
                item.addStyleClass('sapUshellNavTreeItemSelected');
                this._prevSelect = item;
            } else {
                item.getParent().addStyleClass('sapUshellNavTreeItemSelected');
                this._prevSelect = item.getParent();
            }
        },

        handleClickOnSubMenu: function (oEvent) {
            var icon = oEvent.getSource().getContent()[0];

            if (icon.getSrc() === 'slim-arrow-down') {
                icon.setSrc('slim-arrow-right');
                this.toggleSubItemsState(oEvent, true);
            } else {
                icon.setSrc('slim-arrow-down');
                this.toggleSubItemsState(oEvent, false);
            }
        },
        toggleSubItemsState: function (oEvent, isExpanded) {
            if (oEvent) {
                var jqThis = jQuery(oEvent.getSource().getDomRef());

                if (isExpanded) {
                    jqThis.nextUntil('.sapUshellNavTreeSingle, .sapUshellNavTreeParent').addClass("sapUshellNavTreeChildHide");
                } else  {
                    jqThis.nextUntil('.sapUshellNavTreeSingle, .sapUshellNavTreeParent').removeClass("sapUshellNavTreeChildHide");
                }
            }
        }
    });
}());
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, document */
    /*jslint plusplus: true, nomen: true */

    sap.ui.jsview("sap.ushell.components.treeview.NavTree", {
        createContent: function (oController) {
            jQuery.sap.require('sap.m.List');
            jQuery.sap.require('sap.m.CustomListItem');
            var listEntryTemplate = new sap.m.CustomListItem({
                content: new sap.m.Link({
                    text: "{title}",
                    href : "{target}"
                }).addStyleClass('sapUshellNavTreeLink')
            }).addEventDelegate({
                onclick: oController.onNavTreeTitleChange.bind(oController)
            }).addStyleClass('sapUshellNavTreeListItem sapUshellNavTreeChild sapUshellNavTreeChildHide sapUshellNavTree_visual_transition');

            var oList = new sap.m.List({
                items: {
                    path: '/items',
                    groupHeaderFactory : jQuery.proxy(oController.getGroupHeader, oController),
                    sorter: new sap.ui.model.Sorter("groupIndex", false, true),
                    template: listEntryTemplate
                }
            });
            var orig = oList.onAfterRendering;
            oList.onAfterRendering = function () {
                orig.apply(this, arguments);
                if (this.getItems().length > 0) {
                    var oFirstItem = this.getItems()[0];
                    if (oFirstItem.getMetadata().getName() === "sap.m.GroupHeaderListItem" && oFirstItem.getTitle && !oFirstItem.getTitle()) {
                        oFirstItem.destroy();
                    }
                    var aOpenedGroups = jQuery('.sapUshellNavTreeParent');
                    aOpenedGroups.each(function () {
                        var jQThis = jQuery(this);
                        var oItem = sap.ui.getCore().byId(jQThis.attr('id'));
                        var sIcon = oItem.getContent().length && oItem.getContent()[0] && oItem.getContent()[0].getSrc()  || '';
                        if (sIcon === 'slim-arrow-down') {
                            jQThis.nextUntil('.sapUshellNavTreeSingle, .sapUshellNavTreeParent').removeClass("sapUshellNavTreeChildHide");
                        }
                    });
                }

            };
            return oList;
        },

        getControllerName: function () {
            return "sap.ushell.components.treeview.NavTree";
        }
    });
}());
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, setTimeout, clearTimeout */
    /*jslint plusplus: true, nomen: true */
    sap.ui.controller("sap.ushell.renderers.fiori2.compactCozy_selector.CompactCozySelector", {

        onInit: function () {
            try {
               this.userInfoService = sap.ushell.Container.getService("UserInfo");
               this.oUser = this.userInfoService.getUser();
            } catch (e) {
                jQuery.sap.log.error("Getting UserInfo service failed.");
                this.oUser = sap.ushell.Container.getUser();
            }
            this.translationBundle = sap.ushell.resources.i18n;
            //TODO modify this to ork with last value
            this.oModel = new sap.ui.model.json.JSONModel({options: [{id: "cozy", name: this.translationBundle.getText("cozy"), isSelected: true}, {id: "compact",name: this.translationBundle.getText("compact"), isSelected: false}]});
            this.getView().setModel(this.oModel);

            this.currentContentDensity = this.oUser.getContentDensity();
            this.origContentDensity = this.currentContentDensity;
            this.isContentLoaded = false;
        },

        getContent: function () {
            //set density selection
            var aOptions = this.oModel.getProperty("/options");
            for (var i = 0; i < aOptions.length; i++) {
                if (aOptions[i].id == this.currentContentDensity) {
                    aOptions[i].isSelected = true;
                } else {
                    aOptions[i].isSelected = false;
                }
            }

            this.oModel.setProperty("/options", aOptions);

            return jQuery.Deferred().resolve(this.getView());
        },

        getValue: function () {
            return jQuery.Deferred().resolve(this._getModeNameById(this.currentContentDensity));
        },

        onCancel: function () {
            this.currentContentDensity = this.oUser.getContentDensity();
        },

        onSave: function () {
            var deferred = jQuery.Deferred();
            var oUserPreferencesPromise;

            if (this.oUser.getContentDensity() != this.currentContentDensity) {//only if there was a change we would like to save it
                // Apply the selected mode
                if (this.currentContentDensity) {
                    this.oUser.setContentDensity(this.currentContentDensity);
                    oUserPreferencesPromise = this.userInfoService.updateUserPreferences(this.oUser);
                    oUserPreferencesPromise.done(function () {
                        this.oUser.resetChangedProperties();
                        this.origContentDensity = this.currentContentDensity;
                        sap.ui.getCore().getEventBus().publish("launchpad","toggleContentDensity", { contentDensity : this.currentContentDensity});
                        deferred.resolve();
                    }.bind(this));

                    oUserPreferencesPromise.fail(function (sErrorMessage) {
                        // Apply the previous display density to the user
                        this.oUser.setContentDensity(this.origContentDensity);
                        this.oUser.resetChangedProperties();
                        this.currentContentDensity = this.origContentDensity;
                        jQuery.sap.log.error(sErrorMessage);

                        deferred.reject(sErrorMessage);
                    }.bind(this));
                } else {
                    deferred.reject("Could not find mode: " + this.currentContentDensity);
                }
            } else {
                deferred.resolve();//No mode change, do nothing
            }

            return deferred.promise();
        },

        getCurrentContentDensity: function () {
            return this.currentContentDensity;
        },

        setCurrentContentDensity: function (newContentDensityId) {
            this.currentContentDensity = newContentDensityId;

        },

        _getModeNameById: function (contentDensityId) {
            var aDensitiesList = this.getModel().getProperty('/options');

            for (var i = 0; i < aDensitiesList.length; i++) {
                if (aDensitiesList[i].id == contentDensityId) {
                    return aDensitiesList[i].name;
                }
            }

            //fallback in case relevant content density not found
            return contentDensityId;
        },

        getModel: function () {
            return this.oModel;
        }
    });
}());
/**
 * Created by I074932 on 05/08/2015.
 */
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, setTimeout, clearTimeout */
    /*jslint plusplus: true, nomen: true */
    sap.ui.controller("sap.ushell.renderers.fiori2.defaultParameters_selector.DefaultParameters", {

        onInit: function () {

            this.oModelRecords = {}; // a map of models
            this.oChangedParameters = {}; // a Map of all parameters changed by the control
            this.oBlockedParameters = {}; // parmeters of odata models which are not yet filled with "our" value
            this.aDisplayedUserDefaults = []; // array of displayed parameters, in order

            var that = this;
            this.DefaultParametersService = sap.ushell.Container.getService("UserDefaultParameters");

            this.DefaultParametersService.editorGetParameters().done(function (oParameters) {
                // a json model for the "conventional" ( = non odata parameters)
                that.oMdlParameter = new sap.ui.model.json.JSONModel(oParameters);
                that.oMdlParameter.setDefaultBindingMode("TwoWay");
                that.getView().setModel(that.oMdlParameter, "MdlParameter");
                // take a deep copy of the original parameters
                that.oOriginalParameters = jQuery.extend(true, {}, oParameters);
                // this deep copy maintains the currently (within the editor) altered properties
                that.oCurrentParameters = jQuery.extend(true, {}, oParameters);
                that.constructControlSet(oParameters);
            });
        },
        overrideOdataModelValue: function (oEvent) {
            var sUrl = oEvent.getParameter('url'),
                oModel = oEvent.getSource(),
                sFullPath,
                sFullOdataUrl,
                that = this;
            this.aDisplayedUserDefaults.forEach(function (oRecord) {
                if (oRecord.editorMetadata && oRecord.editorMetadata.editorInfo) {
                    sFullOdataUrl = oRecord.editorMetadata.editorInfo.odataURL + oRecord.editorMetadata.editorInfo.bindingPath;
                    //check if there is a parameter with the same oData URL as the completed request
                    if (sFullOdataUrl === sUrl) {
                        sFullPath = oRecord.editorMetadata.editorInfo.bindingPath + "/" + oRecord.editorMetadata.editorInfo.propertyName;
                        //if the property value in the model is not the same as the one we got from
                        //the service, change the property value accordingly
                        if (oModel.getProperty(sFullPath) !== oRecord.valueObject.value) {
                            oModel.setProperty(sFullPath, oRecord.valueObject.value);
                        }
                        that.oBlockedParameters[oRecord.parameterName] = false;
                    }
                }
            });

        },
        getOrCreateModelForODataService : function (sUrl) {
            if (!this.oModelRecords[sUrl]) {
                var oModel = new sap.ui.model.odata.ODataModel(sUrl, true);
                oModel.setCountSupported(false);
                oModel.setDefaultBindingMode("TwoWay");
                oModel.attachRequestCompleted(this.overrideOdataModelValue.bind(this));
                this.oModelRecords[sUrl] = oModel;
            }
            return this.oModelRecords[sUrl];
        },

        constructControlSet : function (oParameters) {
            // sort parameters and remove noneditable ones
            var oUserDefTmp = []; // use an empty array to be able to delete parameters
            //for each property name -> push all array elements into aUserDef
            for (var sParameter in oParameters) {
                //loop oUserDefTmp and search for an already existing parameter name
                for (var n = 0; n < oUserDefTmp.length; n++) {
                    if (oUserDefTmp[n].parameterName === sParameter) {
                        oUserDefTmp.splice(n, 1);
                    }
                }
                //copy the parameter name because we want to show it in the UI later
                oParameters[sParameter].parameterName = sParameter;
                oUserDefTmp.push(oParameters[sParameter]);
            }
            this.sortParametersByGroupIdParameterIndex(oUserDefTmp);

            this.aDisplayedUserDefaults = oUserDefTmp;
            //
            this.sForm = new sap.ui.comp.smartform.SmartForm( {
                editable: true
            });

            this.getView().addContent(this.sForm);
        },

        getValue: function () {
            var deferred = jQuery.Deferred();

            var defaultParameters = sap.ushell.Container.getService("UserDefaultParameters").editorGetParameters();
            defaultParameters.done(function (oParameters) {
                deferred.resolve({
                    value: Object.keys(oParameters).length,
                    displayText: ""
                });
            });

            defaultParameters.fail(function (sErrorMessage) {
                deferred.reject(sErrorMessage);
            });

            return deferred.promise();
        },

        createPlainModel : function(grpel, oRecord) {
            oRecord.modelBind.model = this.oMdlParameter;
            grpel.setModel(oRecord.modelBind.model);
            var oModelPath = "/sUserDef_" + oRecord.nr + "_";
            oRecord.modelBind.sFullPropertyPath = oModelPath;
            oRecord.modelBind.sPropertyName =  "{" + oModelPath + "}";
            oRecord.modelBind.model.setProperty(oRecord.modelBind.sFullPropertyPath, oRecord.valueObject.value);
        },

        revertToPlainModelControls : function(grpel, oRecord) {
            jQuery.sap.log.error("Metadata loading for parameter " + oRecord.parameterName + " failed" + JSON.stringify(oRecord.editorMetadata));// metadata loading for the model intended for this control failed
            // -> instead display as plain
            // switch model binding: 
            oRecord.modelBind.isOdata = false;
            this.createPlainModel(grpel, oRecord);
            // switch to create other controls
            this.createAppropriateControl(grpel,oRecord);
            // currently the blocking is timer based, so it will always happen
            // if this is changed to an odata model event, we must remove the block here
        },

        getContent: function () {
            jQuery.sap.require('sap.ui.model.odata.v2.ODataModel');
            var deferred = new jQuery.Deferred();
            var lastGroup = "nevermore";
            var grp; // the current group;
            this.aChangedParameters = [];

            this.setPropValue = function (oRecord) {
                oRecord.modelBind.model.setProperty(oRecord.modelBind.sFullPropertyPath, oRecord.valueObject.value);
                this.oBlockedParameters[oRecord.parameterName] = false;
            };
            this.oMdlParameter.setProperty("/sUser");
            for (var i = 0; i < this.aDisplayedUserDefaults.length; ++i) {
                var oRecord = this.aDisplayedUserDefaults[i];
                oRecord.nr = i;
                oRecord.editorMetadata = oRecord.editorMetadata || {};
                oRecord.valueObject = oRecord.valueObject || {value: ""};
                var grpel = new sap.ui.comp.smartform.GroupElement({});

                if (lastGroup != oRecord.editorMetadata.groupId) {
                    // generate a group on group change
                    grp = new sap.ui.comp.smartform.Group({ label : oRecord.editorMetadata.groupTitle || "no Title", "editable" : true});
                    lastGroup = oRecord.editorMetadata.groupId;
                    this.sForm.addGroup(grp);
                }
                grp.addGroupElement(grpel);
                oRecord.modelBind = {
                        model : undefined, // the model
                        sModelPath : undefined, // path into the model to the property value         "/sUserDef_<i>_/" or  "/UserDefaults('FIN')/CostCenter
                        sPropertyName : undefined, // the property binding statement , e.g. {xxxx} to attach to the control
                        sFullPropertyPath : undefined // path into the model to the property value
                    };

                // normalize the value, in the editor, undefined is represented as "" for now, 
                // (check if we can make this better!
                oRecord.valueObject.value = oRecord.valueObject.value || "";

                if (oRecord.editorMetadata.editorInfo && oRecord.editorMetadata.editorInfo.propertyName) {
                    oRecord.modelBind.isOdata = true;
                    var sUrl = oRecord.editorMetadata.editorInfo.odataURL;
                    oRecord.modelBind.model = this.getOrCreateModelForODataService(sUrl);
                    grpel.setModel(oRecord.modelBind.model);
                    //oModelPath = oRecord.editorMetadata.editorInfo.bindingPath;
                    grpel.bindElement(oRecord.editorMetadata.editorInfo.bindingPath);
                    // oDataModel.read(oModelPath);
                    oRecord.modelBind.sPropertyName = "{" + oRecord.editorMetadata.editorInfo.propertyName + "}";
                    oRecord.modelBind.sFullPropertyPath = oRecord.editorMetadata.editorInfo.bindingPath + "/" + oRecord.editorMetadata.editorInfo.propertyName;
                } else {
                    this.createPlainModel(grpel, oRecord);
                }

                oRecord.valueObject.value = oRecord.valueObject.value || "";
                oRecord.modelBind.model.setProperty(oRecord.modelBind.sFullPropertyPath,oRecord.valueObject.value);
                // before we have set "our" value, we do not want to listen/react on values
                // within the control, thus we "block" the update
                if (oRecord.modelBind.isOdata) {
                    this.oBlockedParameters[oRecord.parameterName] = true;
                    oRecord.modelBind.model.attachMetadataLoaded(this.createAppropriateControl.bind(this,grpel,oRecord));
                    oRecord.modelBind.model.attachMetadataFailed(this.revertToPlainModelControls.bind(this,grpel,oRecord));
                } else {
                    this.createAppropriateControl(grpel, oRecord);
                }
                //oRecord.modelBind.model.setProperty(oRecord.modelBind.sFullPropertyPath,oRecord.valueObject.value);
                oRecord.modelBind.model.bindTree(oRecord.modelBind.sFullPropertyPath).attachChange(this.storeChangedData.bind(this));
            }
            this.oMdlParameter.bindTree("/").attachChange(this.storeChangedData.bind(this));
            deferred.resolve(this.getView());

            return deferred.promise();
        },

        createAppropriateControl : function(grpel, oRecord) {
            var sf, lbl;
            // grpel
            jQuery.sap.log.debug("Creating controls for parameter" + oRecord.parameterName + " type " + oRecord.modelBind.isOdata);
            var aElements = grpel.getElements().slice();
            aElements.forEach(function(oElement) {
                // at time or writing, the removeElement call was flawed
               grpel.removeElement(oElement);
            });
            var aFields = grpel.getFields().slice();
            aFields.forEach(function(oElement) {
               grpel.removeField(oElement);
            });
            if (oRecord.modelBind.isOdata && oRecord.editorMetadata.editorInfo) {
                sf = new sap.ui.comp.smartfield.SmartField({
                    value: oRecord.modelBind.sPropertyName,
                    name: oRecord.parameterName
                });
            } else {
                sf = new sap.m.Input({ name: oRecord.parameterName, value : oRecord.modelBind.sPropertyName , type : "Text"});
                lbl = new sap.ui.comp.smartfield.SmartLabel({
                    text: oRecord.editorMetadata.displayText || oRecord.parameterName,
                    tooltip: oRecord.editorMetadata.description || oRecord.parameterName
                });
                lbl.setLabelFor(sf);
                grpel.addElement(lbl);
                this.setPropValue(oRecord);
            }
            sf.attachChange(this.storeChangedData.bind(this));
            grpel.addElement(sf);
        },

        /**
         * Sorts the array parameter aUserDefTmp in situ
         * by respective criteria to achieve a display order
         * @param {array} aUserDefTmp list or parameters
         */
        sortParametersByGroupIdParameterIndex : function(aUserDefTmp) {
            // compare by groupId
            function compareByGroupId(oDefault1, oDefault2) {
                // handle default without metadata
                if (!(oDefault2.editorMetadata && oDefault2.editorMetadata.groupId)) {
                    return -1; // keep order
                }
                if (!(oDefault1.editorMetadata && oDefault1.editorMetadata.groupId)) {
                    return 1; // move oDefault1 to the end
                }

                if (oDefault1.editorMetadata.groupId < oDefault2.editorMetadata.groupId) { return -1; }
                if (oDefault1.editorMetadata.groupId > oDefault2.editorMetadata.groupId) { return 1; }

                return 0;
            }
            // compare by parameterIndex
            function compareByParameterIndex(oDefault1, oDefault2) {
                // handle default without metadata
                if (!(oDefault2.editorMetadata && oDefault2.editorMetadata.parameterIndex)) {
                    return -1; // keep order
                }
                if (!(oDefault1.editorMetadata && oDefault1.editorMetadata.parameterIndex)) {
                    return 1; // move oDefault1 to the end
                }
                return oDefault1.editorMetadata.parameterIndex - oDefault2.editorMetadata.parameterIndex;
            }

            // sort by groupid, parameterindex
            aUserDefTmp.sort(function(oDefault1, oDefault2) {
                //first by groupId
                var returnValueOfCompareByGroupId = compareByGroupId(oDefault1, oDefault2);
                if (returnValueOfCompareByGroupId === 0) {
                    //then by parameterIdx
                    return compareByParameterIndex(oDefault1, oDefault2);
                }
                return returnValueOfCompareByGroupId;
            });
        },

        // this funciton is invoked on any model data change
        // ( be it in an odata model or in the plain JSON fallback model
        // we always run over all parameters and record the ones with a delta
        // we change *relevant* deltas compared to the data when calling up the dialogue
        // note that the valueObject may contain other relevant metadata!
        // (which is *not* altered by the Editor Control),
        // thus it is important not to overwrite or recreate the valueObject, but only set the
        // value property
        storeChangedData: function() {
            var i = 0,
                that = this,
                arr = that.aDisplayedUserDefaults,
                aCheckList = this.sForm.check(),
                oSaveBtn = sap.ui.getCore().byId("saveButton");

            oSaveBtn.setEnabled(!aCheckList.length);

            // check for all changed parameters...
            for (i = 0; i < arr.length; ++i) {
                var pn = arr[i].parameterName;
                if (!that.oBlockedParameters[pn]) {
                    var oldValue = that.oCurrentParameters[pn].valueObject && that.oCurrentParameters[pn].valueObject.value;
                    if (arr[i].modelBind && arr[i].modelBind.model) {
                        var oDataMdl = arr[i].modelBind.model;
                        var oPropPath = arr[i].modelBind.sFullPropertyPath;
                        var pActValue = oDataMdl.getProperty(oPropPath);
                        if (this.isValueDifferent({ value: pActValue}, { value: oldValue})) {
                            that.oCurrentParameters[pn].valueObject.value = pActValue;
                            that.oChangedParameters[pn] = true;
                        }
                    }
                }
            }
        },


        onCancel: function () {
            sap.ui.getCore().byId("saveButton").setEnabled(true);
        },

        isValueDifferent : function(oValueObject1, oValueObject2) {
            if (oValueObject1 === oValueObject2) {
                return false;
            }
            if (oValueObject1 === undefined ) {
                return false;
            }
            if (oValueObject2 === undefined ) {
                return false;
            }
            // for the editor, "" and undefined are the same!
            if (oValueObject1.value === "" && oValueObject2.value === undefined) {
                return false;
            }
            if (oValueObject2.value === "" && oValueObject1.value === undefined) {
                return false;
            }
            return (oValueObject1.value !== oValueObject2.value);
        },

        onSave: function () {
            var deferred = new jQuery.Deferred(),
                i,
                aChangedParameterNames = Object.keys(this.oChangedParameters).sort(),
                oSetValuePromise,
                pn;
            // we change the effectively changed parameters, once, in alphabetic order
            for (i = 0; i < aChangedParameterNames.length; i++) {
                pn = aChangedParameterNames[i];
                //only if effectively changed:
                if ( this.isValueDifferent(this.oOriginalParameters[pn].valueObject, this.oCurrentParameters[pn].valueObject)) {
                    // as the editor does not distinguish empty string from deletion, and has no "reset" button
                    // we drop functionality to allow to set a value to an empty string (!in the editor!)
                    // and map an empty string to an effective delection!
                    // TODO: make sure all controls allow to enter an empty string as an "valid" value
                    if (this.oCurrentParameters[pn].valueObject === "" ||
                        (this.oCurrentParameters[pn].valueObject && this.oCurrentParameters[pn].valueObject.value === "")) {
                        oSetValuePromise = sap.ushell.Container.getService("UserDefaultParameters").editorSetValue(pn, undefined);
                    } else {
                        oSetValuePromise = sap.ushell.Container.getService("UserDefaultParameters").editorSetValue(pn, this.oCurrentParameters[pn].valueObject);
                    }
                    oSetValuePromise.done(deferred.resolve);
                    oSetValuePromise.fail(deferred.reject);
                }
            }
            return deferred.promise();
        }

    });
}());
/* global sap */
(function() {
    "use strict";

    sap.ui.core.Control.extend("sap.ushell.renderers.fiori2.search.controls.DivContainer", {

        metadata: {
            properties: {
                "cssClass": "string"
            },
            aggregations: {
                "content": {
                    singularName: "content",
                    multiple: true
                }
            }
        },

        renderer: function(oRm, oControl) {
            oRm.write('<div');
            oRm.writeControlData(oControl);
            oRm.addClass(oControl.getCssClass());
            oRm.writeClasses();
            oRm.write('>');
            var aChildren = oControl.getContent();
            for (var i = 0; i < aChildren.length; i++) {
                oRm.renderControl(aChildren[i]);
            }
            oRm.write('</div>');
        }

    });

})();
(function() {

    "use strict";

    sap.ui.layout.FixFlex.extend("sap.ushell.renderers.fiori2.search.controls.SearchLayout", {

        metadata: {
            properties: {
                isBusy: {
                    type: "boolean",
                    defaultValue: false
                },
                showFacets: {
                    type: "boolean",
                    defaultValue: false
                }
            },
            aggregations: {
                "resultListContainer": {
                    type: "sap.ui.core.Control",
                    multiple: false
                },
                "facets": {
                    type: "sap.ui.core.Control",
                    multiple: false
                },
                "busyIndicator": {
                    type: "sap.ui.core.Control",
                    multiple: false
                }
            }
        },

        constructor: function(options, sId) {
            var that = this;
            sap.ui.layout.FixFlex.prototype.constructor.apply(this, [options], sId);

            this.addEventDelegate({
                onBeforeRendering: function() {
                    if (that.getShowFacets() && !sap.ui.Device.system.phone) {
                        that.setFixContentSize('18rem');
                    } else {
                        that.setFixContentSize('0rem');
                    }
                }
            });
        },

        getFacets: function() {
            return this.getFixContent();
        },

        setFacets: function(oControl) {
            this.addFixContent(oControl);
        },

        getResultListContainer: function() {
            return this.getFlexContent();
        },

        setResultListContainer: function(oControl) {
            this.setFlexContent(oControl);
        },

        setIsBusy: function(isBusy) {
            if (isBusy) {
                this.getBusyIndicator().open();
            } else {
                this.getBusyIndicator().close();
            }
            this.setProperty("isBusy", isBusy, true);
        },

        setShowFacets: function(areFacetsShown) {
            var $searchFacets = jQuery(".sapUiFixFlexFixed");

            var sWidth;
            var sOpacity;
            var sPaddingLeft;

            // inverted the pressed value since this function is only called
            // after pressed value is already changed.
            if (!areFacetsShown) {
                sWidth = "0";
                sOpacity = "0";
                sPaddingLeft = "2rem";
            } else {
                sWidth = "18rem";
                sOpacity = "1";
                sPaddingLeft = "1rem";
            }

            $searchFacets.animate({
                width: sWidth,
                opacity: sOpacity
            }, {
                complete: function() {
                    sap.ui.getCore().getEventBus().publish("searchLayoutChanged");
                },
                duration: 400
            });

            var oPadding = {};
            var sPaddingPropName;
            if (jQuery("html").attr("dir") === 'rtl') {
                sPaddingPropName = "padding-right";
            } else {
                sPaddingPropName = "padding-left";
            }
            oPadding[sPaddingPropName] = sPaddingLeft;
            if (sap.ui.Device.system.desktop) {
                jQuery(".searchResultListsContainer")
                    .animate(oPadding, {
                        duration: 400
                    });
            }

            // the 3. parameter supress rerendering
            this.setProperty("showFacets", areFacetsShown, true); // this validates and stores the new value

            return this; // return "this" to allow method chaining
        },

        renderer: "sap.ui.layout.FixFlexRenderer"

    });

})();
// iteration 0 : Holger
/* global sap,window,$,jQuery */

(function() {
    "use strict";

    sap.ui.core.Control.extend("sap.ushell.renderers.fiori2.search.controls.SearchRelatedObjectsToolbar", {
        metadata: {
            properties: {
                relatedObjects: "object"
            }
        },

        init: function(properties) {
            this.oCrossAppNav = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService("CrossApplicationNavigation");
        },

        renderer: function(oRm, oControl) {
            oRm.write("<div");
            oRm.writeControlData(oControl); // writes the Control ID
            oRm.addClass("sapUshellSearchResultListItem-RelatedObjectsToolbar");
            oRm.writeClasses();
            oRm.write(">");

            oControl._renderToolbar(oRm);

            oRm.write("</div>");
        },

        _renderToolbar: function(oRm) {
            var that = this;
            var i;

            var createPressHandler = function(link) {
                return function() {
                    var model = sap.ushell.renderers.fiori2.search.getModelSingleton();
                    model.analytics.logCustomEvent('FLP: Search', 'Launch Related Object', [link]);
                };
            };

            var relatedObjects = that.getRelatedObjects();

            if (relatedObjects.length > 0) {

                var relatedObjectsLinks = [];
                for (i = 0; i < relatedObjects.length; i++) {
                    var relatedObject = relatedObjects[i];
                    var link = new sap.m.Link({
                        text: relatedObject.label,
                        href: relatedObject.href,
                        layoutData: new sap.m.ToolbarLayoutData({
                            shrinkable: false
                        }),
                        press: createPressHandler(relatedObject.href)
                    });
                    link.addStyleClass("sapUshellSearchResultListItem-RelatedObjectsToolbar-Element");
                    relatedObjectsLinks.push(link);
                }

                var toolbarContent = [];

                var toolbarSpacer = new sap.m.ToolbarSpacer();
                toolbarContent.push(toolbarSpacer);

                for (i = 0; i < relatedObjectsLinks.length; i++) {
                    toolbarContent.push(relatedObjectsLinks[i]);
                }

                that.overFlowButton = new sap.m.Button({
                    icon: sap.ui.core.IconPool.getIconURI("overflow")
                });
                that.overFlowButton.addStyleClass("sapUshellSearchResultListItem-RelatedObjectsToolbar-OverFlowButton");
                toolbarContent.push(that.overFlowButton);

                that.overFlowSheet = new sap.m.ActionSheet({
                    placement: sap.m.PlacementType.Top
                });

                that.overFlowButton.attachPress(function() {
                    that.overFlowSheet.openBy(that.overFlowButton);
                });

                that.relatedObjectActionsToolbar = new sap.m.Toolbar({
                    design: sap.m.ToolbarDesign.Solid,
                    content: toolbarContent
                });

                that.relatedObjectActionsToolbar.addStyleClass("sapUshellSearchResultListItem-RelatedObjectsToolbar-Toolbar");

                oRm.renderControl(that.relatedObjectActionsToolbar);
            }
        },





        // after rendering
        // ===================================================================
        onAfterRendering: function() {
            var that = this;

            var $overFlowButton = $(that.overFlowButton.getDomRef());
            $overFlowButton.css("display", "none");

            $(window).on("resize", function() {
                that._layoutToolbarElements();
            });
            that._layoutToolbarElements();
        },




        _layoutToolbarElements: function() {
            var that = this;

            if (!(that.getDomRef() && that.relatedObjectActionsToolbar.getDomRef())) {
                return;
            }

            var $toolbar = $(that.relatedObjectActionsToolbar.getDomRef());
            var toolbarWidth = $toolbar.innerWidth();

            if (toolbarWidth === 0 || (that.toolbarWidth && that.toolbarWidth === toolbarWidth)) {
                return;
            }

            if ($(that.getDomRef()).css("display") === "none" || $toolbar.css("display") === "none") {
                return;
            }

            that.toolbarWidth = toolbarWidth;

            var $overFlowButton = $(that.overFlowButton.getDomRef());
            $overFlowButton.css("display", "none");

            var toolbarElementsWidth = 0;

            var pressButton = function(event, externalTarget) {
                that.oCrossAppNav.toExternal(externalTarget);
            };

            var $toolbarElements = $toolbar.find(".sapUshellSearchResultListItem-RelatedObjectsToolbar-Element");
            for (var i = 0; i < $toolbarElements.length; i++) {
                var $element = $($toolbarElements[i]);
                $element.css("display", "");
                var _toolbarElementsWidth = toolbarElementsWidth + $element.outerWidth(true);

                if (_toolbarElementsWidth > toolbarWidth) {
                    if (i < $toolbarElements.length) {
                        $overFlowButton.css("display", "");
                        var overFlowButtonWidth = $overFlowButton.outerWidth(true);

                        for (; i >= 0; i--) {
                            $element = $($toolbarElements[i]);
                            _toolbarElementsWidth -= $element.outerWidth(true);
                            if (_toolbarElementsWidth + overFlowButtonWidth <= toolbarWidth) {
                                break;
                            }
                        }
                    }

                    var relatedObjects = that.getRelatedObjects();
                    that.overFlowSheet.destroyButtons();

                    for (; i < $toolbarElements.length; i++) {
                        $element = $($toolbarElements[i]);
                        $element.css("display", "none");

                        var relatedObject = relatedObjects[i];

                        var button = new sap.m.Button({
                            text: relatedObject.label
                        });
                        button.attachPress(relatedObject, pressButton);
                        that.overFlowSheet.addButton(button);
                    }
                    break;
                }
                toolbarElementsWidth = _toolbarElementsWidth;
            }
        }
    });

})();
/* global $, jQuery, sap, window */
(function() {
    "use strict";

    sap.m.List.extend('sap.ushell.renderers.fiori2.search.controls.SearchResultList', {

        renderer: 'sap.m.ListRenderer',

        onAfterRenderingParent: sap.m.List.prototype.onAfterRendering,
        onAfterRendering: function() {
            var that = this;

            // First let the original sap.m.List do its work
            that.onAfterRenderingParent();

            that._prepareResizeHandler();

            that.collectListItemsForNavigation();
        },

        collectListItemsForNavigation: function() {
            var that = this;

            var aMyListItems = that.getItems();

            if (aMyListItems.length === 0) {
                return;
            }

            var doCollectListItemsForNavigationCallback = function() {
                that._doCollectListItemsForNavigation();
            };

            // We need to be aware of any re-rendering happening inside the app tile
            // container. Thus let's listen for any re-rendering going on inside.
            for (var i = 0; i < aMyListItems.length; i++) {
                var oMyItem = aMyListItems[i];
                if (oMyItem.hasStyleClass("sapUshellSearchResultListItemApps")) {
                    var oContent = oMyItem.getContent();
                    if (oContent.length > 0) { // && oContent[0].hasStyleClass("sapUshellSearchTileContainer")) {
                        oContent[0].addEventDelegate({
                            onAfterRendering: doCollectListItemsForNavigationCallback
                        });
                    }
                }
            }

            that._doCollectListItemsForNavigation();
        },

        _doCollectListItemsForNavigation: function() {
            var that = this;

            var oFocusRef = that.getDomRef();
            if (!oFocusRef) {
                return;
            }

            var oItemNavigation = that.getItemNavigation();
            if (!oItemNavigation) {
                that._startItemNavigation();
                oItemNavigation = that.getItemNavigation();
            }

            if (!oItemNavigation) {
                return; // apparently this is a Tap-Device, e.g. an iPad
            }

            that._bItemNavigationInvalidated = false;

            // fix the item navigation to our needs:

            //Collect the dom references of the items
            var aRows = oFocusRef.getElementsByTagName("li");
            var aDomRefs = [];
            for (var i = 0; i < aRows.length; i++) {
                var oRow = aRows[i];
                if ($(oRow).hasClass("sapUshellSearchResultListItemApps")) { // Handle Tiles (including the ShowMore-Tile)

                    var aTiles = oRow.getElementsByClassName("sapUshellSearchTileWrapper");
                    for (var j = 0; j < aTiles.length; j++) {
                        if ($(aTiles[j]).hasClass("sapUshellSearchShowMoreTile")) {
                            continue;
                        }
                        aDomRefs.push(aTiles[j]);
                    }

                    // ShowMore-Tile
                    var aShowMoreButton = $(oRow).find(".sapUshellSearchShowMoreTile button");
                    if (aShowMoreButton.length > 0) {
                        aDomRefs.push(aShowMoreButton[0]);
                    }

                } else if ($(oRow).hasClass("sapUshellSearchResultListFooter")) { // Handle ShowMore-Button

                    var aShowMoreLink = oRow.getElementsByClassName("sapUshellResultListMoreFooter");
                    for (var k = 0; k < aShowMoreLink.length; k++) {
                        aDomRefs.push(aShowMoreLink[k]);
                    }

                } else if ($(oRow).hasClass("sapUshellSearchResultListItem")) { // Normal List Items
                    aDomRefs.push(oRow);
                }
            }

            //set the root dom node that surrounds the items
            //oItemNavigation.setRootDomRef(oFocusRef.children.item(0));
            if (aDomRefs.length > 0) {
                oItemNavigation.setRootDomRef(aDomRefs[0].parentElement);
            }

            //set the array of dom nodes representing the items.
            oItemNavigation.setItemDomRefs(aDomRefs);

            //turn of the cycling
            oItemNavigation.setCycling(false);
        },


        _prepareResizeHandler: function() {
            var that = this;
            that._previousWindowWidth = $(window).width();
            $(window).on("resize", function() {
                that._resizeHandler();
            });
        },

        _resizeHandler: function() {
            var that = this;

            if (that.resizeTimeoutID) {
                window.clearTimeout(that.resizeTimeoutID);
            }

            that.resizeTimeoutID = window.setTimeout(function() {
                var phoneSize = 767;
                var tabletSize = 1150;
                var windowWidth = $(window).width();
                if (windowWidth <= phoneSize && that._previousWindowWidth > phoneSize || windowWidth <= tabletSize && (that._previousWindowWidth <= phoneSize || that._previousWindowWidth > tabletSize) || windowWidth > tabletSize && that._previousWindowWidth <= tabletSize) {
                    that.rerender();
                }
                that._previousWindowWidth = windowWidth;
            }, 250);
        }


        // Since oItemNavigation is created by the parent (sap.m.List), it should
        // also be destroyed by the parent.
        //         destroy: function() {
        //             if (this.oItemNavigation) {
        //                 this.removeDelegate(this.oItemNavigation);
        //                 this.oItemNavigation.destroy();
        //             }
        //         }
    });

})();
(function() {
    "use strict";

    sap.ui.core.Control.extend("sap.ushell.renderers.fiori2.search.controls.SearchResultListContainer", {


        metadata: {
            aggregations: {
                "topList": {
                    type: "sap.ui.core.Control",
                    multiple: false
                },
                "bottomList": {
                    type: "sap.ui.core.Control",
                    multiple: false
                },
                "tabStrips": {
                    type: "sap.ui.core.Control",
                    multiple: false
                },
                "filterBar": {
                    type: "sap.ui.core.Control",
                    multiple: false
                },
                "noResultScreen": {
                    type: "sap.ui.core.Control",
                    multiple: false
                }
            }
        },

        renderer: function(oRm, oControl) {
            // inner div for results
            oRm.write("<div");
            oRm.writeControlData(oControl);
            oRm.addClass("sapUshellSearchResultListsContainer");
            oRm.writeClasses();
            if (sap.ui.Device.system.desktop) {
                if (oControl.getModel() && oControl.getModel().getFacetVisibility() === true) {
                    oRm.write('style="padding-left:1rem;"');
                } else {
                    oRm.write('style="padding-left:2rem;"');
                }
            }
            oRm.write('>');

            // render filter bar
            oRm.renderControl(oControl.getFilterBar());

            // render main header
            oRm.renderControl(oControl.getNoResultScreen());

            // render tabstrips
            oRm.renderControl(oControl.getTabStrips());

            //render top list
            oRm.renderControl(oControl.getTopList());

            // render bottom list
            oRm.renderControl(oControl.getBottomList());

            /// close inner div for results
            oRm.write("</div>");

        }
    });
})();
// iteration 0: ok
/* global sap,$ */

(function() {
    "use strict";

    sap.ui.core.Control.extend("sap.ushell.renderers.fiori2.search.controls.SearchResultListItemFooter", {

        metadata: {
            properties: {
                showSpinner: {
                    type: "boolean",
                    defaultValue: false
                },
                text: "string"
            },
            aggregations: {
                content: {
                    singularName: "content"
                }
            },
            events: {
                showMore: {}
            }
        },


        renderer: function(oRm, oControl) {

            var footertext = new sap.m.Link({
                text: oControl.getText(),
                tooltip: oControl.getText()
            });
            footertext.addStyleClass('sapUshellResultListMoreFooter');

            var dotted = new sap.ui.core.Icon({
                src: sap.ui.core.IconPool.getIconURI("sys-overflow")
            });

            this.busy = new sap.m.BusyIndicator({
                size: "22px"
            });
            this.busy.addStyleClass('sapUshellResultListBusyFooter');
            if (oControl.getShowSpinner() === false) {
                this.busy.addStyleClass('hidden');
            }

            oRm.write("<div");
            oRm.writeAttribute("tabindex", "-1");
            oRm.writeControlData(oControl);
            oRm.addClass("sapUshellSearchResultListFooterContainer");
            oRm.writeClasses();
            oRm.write(">");

            oRm.write("<div class='sapUshellResultListFooterContent'>");
            oRm.renderControl(dotted);
            oRm.renderControl(footertext);
            oRm.renderControl(this.busy);
            oRm.write("</div>");

            oRm.write("</div>");
        },

        onAfterRendering: function(oRm, oControl) {
            var that = this;
            var $item = $(this.getDomRef());
            $item.click(function() {
                //that.setShowSpinner(true);
                that.fireShowMore();
                //$item.off('click'); // Prevent multiple more clicks
            });
        }

    });

})();
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, setTimeout, clearTimeout */
    /*jslint plusplus: true, nomen: true */
    sap.ui.controller("sap.ushell.renderers.fiori2.theme_selector.ThemeSelector", {

        onInit: function () {
            try {
                this.userInfoService = sap.ushell.Container.getService("UserInfo");
                this.oUser = this.userInfoService.getUser();
            } catch (e) {
                jQuery.sap.log.error("Getting UserInfo service failed.");
                this.oUser = sap.ushell.Container.getUser();
            }
            this.oModel = new sap.ui.model.json.JSONModel({options: []});
            this.getView().setModel(this.oModel);
            this.translationBundle = sap.ushell.resources.i18n;
            this.currentThemeId = this.oUser.getTheme();
            this.origThemeId = this.currentThemeId;
            this.aThemeList = null;
            this.isContentLoaded = false;
        },

        _getIsChangeThemePermitted: function () {
            return this.oUser.isSetThemePermitted();
        },

        getContent: function () {
            var that = this;
            var deferred = jQuery.Deferred();
            if (this.isContentLoaded === true) {
                deferred.resolve(this.getView());
            } else {
                var dfdThemeList = this._getThemeList();
                dfdThemeList.done(function (aThemeList) {
                    if (aThemeList.length > 0) {
                        // Sort the array of themes according to theme name
                        aThemeList.sort(function (theme1, theme2) {
                            var theme1Name = theme1.name,
                                theme2Name = theme2.name;
                            if (theme1Name < theme2Name) { //sort string ascending
                                return -1;
                            }
                            if (theme1Name > theme2Name) {
                                return 1;
                            }
                            return 0; //default return value (no sorting)
                        });
                        //set theme selection
                        for (var i = 0; i < aThemeList.length; i++) {
                            if (aThemeList[i].id == that.currentThemeId) {
                                aThemeList[i].isSelected = true;
                            } else {
                                aThemeList[i].isSelected = false;
                            }
                        }

                        that.getView().getModel().setProperty("/options", aThemeList);
                        deferred.resolve(that.getView());
                    } else {
                        deferred.reject();
                    }
                });

                dfdThemeList.fail(function () {
                    deferred.reject();
                });
            }

            return deferred.promise();
        },

        getValue: function () {
            var deferred = jQuery.Deferred();
            var themeListPromise = this._getThemeList();
            var that = this;
            var themeName;

            themeListPromise.done(function (aThemeList) {
                that.aThemeList = aThemeList;
                themeName = that._getThemeNameById(that.currentThemeId);
                deferred.resolve(themeName);
            });

            themeListPromise.fail(function (sErrorMessage) {
                deferred.reject(sErrorMessage);
            });

            return deferred.promise();
        },

        onCancel: function () {
            this.currentThemeId = this.oUser.getTheme();
        },

        onSave: function () {
            var deferred = jQuery.Deferred();
            var oUserPreferencesPromise;

            if (this.oUser.getTheme() != this.currentThemeId) {//only if there was a change we would like to save it
                // Apply the selected theme
                if (this.currentThemeId) {
                    this.oUser.setTheme(this.currentThemeId);

                    oUserPreferencesPromise = this.userInfoService.updateUserPreferences(this.oUser);

                    oUserPreferencesPromise.done(function () {
                        this.origThemeId = this.currentThemeId;
                        this.oUser.resetChangedProperties();
                        deferred.resolve();
                    }.bind(this));

                    oUserPreferencesPromise.fail(function (sErrorMessage) {
                        // Apply the previous theme to the user
                        this.oUser.setTheme(this.origThemeId);
                        this.oUser.resetChangedProperties();
                        this.currentThemeId = this.origThemeId;

                        jQuery.sap.log.error(sErrorMessage);
                        deferred.reject(sErrorMessage);
                    }.bind(this));
                } else {
                    deferred.reject("Could not find theme: " + this.currentThemeId);
                }
            } else {
                deferred.resolve();//No theme change, do nothing
            }

            return deferred.promise();
        },

        _getThemeList: function () {
            var deferred = jQuery.Deferred();

            if (this.aThemeList == null) {
                if (this._getIsChangeThemePermitted() == true) {
                    var getThemesPromise = this.userInfoService.getThemeList();

                    getThemesPromise.done(function (oData) {
                        deferred.resolve(oData.options);
                    });

                    getThemesPromise.fail(function () {
                        deferred.reject("Failed to load theme list.");
                    });
                } else {
                    deferred.resolve([this.currentThemeId]);
                }
            } else {
                deferred.resolve(this.aThemeList);
            }

            return deferred.promise();
        },

        getCurrentThemeId: function () {
            return this.currentThemeId;
        },

        setCurrentThemeId: function (newThemeId) {
            this.currentThemeId = newThemeId;
        },

        _getThemeNameById: function (themeId) {
            if (this.aThemeList) {
                for (var i = 0; i < this.aThemeList.length; i++) {
                    if (this.aThemeList[i].id == themeId) {
                        return this.aThemeList[i].name;
                    }
                }
            }
            //fallback in case relevant theme not found
            return themeId;
        }
    });
}());
sap.ui.controller("sap.ushell.ui.footerbar.SaveAsTile", {
    onExit: function() {
        var oView = this.getView();
        var oTileView = oView.getTileView();
        oTileView.destroy();
    },

    onInit: function () {
        var appMetaData = sap.ushell.services.AppConfiguration.getMetadata();
        this.oPageBuilderService = sap.ushell.Container.getService("LaunchPage");
        this.oView = this.getView();
        this.appData = this.oView.viewData.appData || {};
        //For backwards compatibility.
        if (!jQuery.isEmptyObject(this.appData)) {
            this.oModel = new sap.ui.model.json.JSONModel({
                showGroupSelection: this.appData.showGroupSelection === false ? false : true,
                title : this.appData.title || '',
                subtitle: this.appData.subtitle || '',
                numberValue : '',
                info: this.appData.info || '',
                icon: this.appData.icon || appMetaData.icon,
                numberUnit : this.appData.numberUnit,
                keywords: this.appData.keywords || '',
                groups: []
            });
            this.oView.setModel(this.oModel);
        }
    },
    calcTileDataFromServiceUrl: function (serviceUrl) {
        var that = this;
        /* global OData */
        OData.read({requestUri: serviceUrl},
            // sucess handler
            function (oResult) {
                if (typeof oResult === "string") {
                    oResult = {number: oResult};
                }
                that.oModel.setProperty('/numberValue', oResult.number);
                var aKeys = ["infoState", "stateArrow", "numberState", "numberDigits", "numberFactor", "numberUnit"];
                for (var i = 0; i < aKeys.length; i++) {
                    var key = aKeys[i];
                    if (oResult[key]) {
                        that.oModel.setProperty('/' + key, oResult[key]);
                    }
                }
            }, function (err) {
                    window.console.log(err);
            }, {
                    read: function (response) {
                        response.data = JSON.parse(response.body).d;
                    }
            }
        );
    },
    loadPersonalizedGroups: function () {
        var oGroupsPromise = this.oPageBuilderService.getGroups(),
            that = this,
            deferred = jQuery.Deferred();

        oGroupsPromise.done(function (aGroups) {
            var promise = that.loadGroupsFromArray(aGroups);

            promise.done(function (data) {
                deferred.resolve(data);
            });
        });

        return deferred;
    },
    loadGroupsFromArray : function (aGroups) {
        var that = this,
            deferred = jQuery.Deferred(),
            oModel = that.oView.getModel();

        this.oPageBuilderService.getDefaultGroup().done(function (oDefaultGroup) {
            //filter out hidden and locked groups
            aGroups = aGroups.filter(function (group) {
                return (!that.oPageBuilderService.isGroupLocked(group) && that.oPageBuilderService.isGroupVisible(group));
            })
                //create the model structure
                .map(function (group) {
                return {
                    title: (group === oDefaultGroup && that.getLocalizedText("my_group")) || that.oPageBuilderService.getGroupTitle(group),
                    object: group
                };
            });

            oModel.setProperty('/groups', aGroups);
            //set new length in case there are less new groups
            oModel.setProperty("/groups/length", aGroups.length);
            deferred.resolve();
        });

        return deferred;
    },
    getLocalizedText: function (sMsgId, aParams) {
        return aParams ? sap.ushell.resources.i18n.getText(sMsgId, aParams) : sap.ushell.resources.i18n.getText(sMsgId);
    }
});
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, hasher, document */
    /*jslint plusplus: true, nomen: true */

    sap.ui.jsview("sap.ushell.ui.footerbar.SaveAsTile", {
        getControllerName : function () {
            return "sap.ushell.ui.footerbar.SaveAsTile";
        },
        createContent: function (oController) {
            this.oResourceBundle = sap.ushell.resources.i18n;
            this.viewData = this.getViewData() || {};
            this.appData = this.viewData.appData || {};
            this.oTitleInput = new sap.m.Input('bookmarkTitleInput', {
                tooltip: this.oResourceBundle.getText("bookmarkDialogoTitle_tooltip"),
                value: {
                    path: "/title",
                    mode: sap.ui.model.BindingMode.TwoWay
                }
            }).addStyleClass("sapUshellInputField");
            this.oTitleInput.addAriaLabelledBy("titleLbl");
            this.oSubTitleInput = new sap.m.Input('bookmarkSubTitleInput', {
                tooltip: this.oResourceBundle.getText("bookmarkDialogoSubTitle_tooltip"),
                value: {
                    path: "/subtitle",
                    mode: sap.ui.model.BindingMode.TwoWay
                }
            }).addStyleClass("sapUshellInputField");
            this.oSubTitleInput.addAriaLabelledBy("subtitleLbl");
            this.oInfoInput = new sap.m.Input('bookmarkInfoInput', {
                tooltip: this.oResourceBundle.getText("bookmarkDialogoInfo_tooltip"),
                value: {
                    path: "/info",
                    mode: sap.ui.model.BindingMode.TwoWay
                }
            }).addStyleClass("sapUshellInputField");
            this.oInfoInput.addAriaLabelledBy("infoLbl");

            var tileInitSettings = {
                numberValue: "{/numberValue}",
                title : "{/title}",
                subtitle: "{/subtitle}",
                info: "{/info}",
                icon: "{/icon}",
                infoState: "{/infoState}",
                numberFactor: "{/numberFactor}",
                numberUnit: "{/numberUnit}",
                numberDigits: "{/numberDigits}",
                numberState: "{/numberState}",
                stateArrow: "{/stateArrow}",
                targetURL: "{/targetURL}",
                keywords: "{/keywords}"
            };

            var oTile, serviceUrl;
            if (this.viewData.serviceUrl) {
                oTile = new sap.ushell.ui.tile.DynamicTile("previewTile", tileInitSettings);
                serviceUrl = (typeof (this.viewData.serviceUrl) === "function") ? this.viewData.serviceUrl() : this.viewData.serviceUrl;
                oController.calcTileDataFromServiceUrl(serviceUrl);
            } else {
                oTile = new sap.ushell.ui.tile.StaticTile("previewTile", tileInitSettings);
            }
            this.setTileView(oTile);

            var tileWrapper = new sap.ushell.ui.launchpad.Tile({
                "long" : false,
                "tall" : false,
                tileViews : [oTile]
            }).addStyleClass("sapUshellBookmarkFormPreviewTileMargin");

            var oPreview = new sap.m.Label("previewLbl", {text: " " +  this.oResourceBundle.getText('previewFld')}),
                oTitle = new sap.m.Label("titleLbl", {required: true, text: " " +  this.oResourceBundle.getText('titleFld')}),
                oSubTitle = new sap.m.Label("subtitleLbl", {text: this.oResourceBundle.getText('subtitleFld')}),
                oInfo = new sap.m.Label("infoLbl", {text: this.oResourceBundle.getText('infoMsg')}),
                hbox = new sap.m.HBox("saveAsTileHBox", {
                items: [tileWrapper],
                alignItems : sap.m.FlexAlignItems.Center,
                justifyContent: sap.m.FlexJustifyContent.Center
            }).addStyleClass("sapUiStrongBackgroundColor").addStyleClass("sapUshellBookmarkFormPreviewBoxBottomMargin");


            var oGroupsLabel = new sap.m.Label("groupLbl", {
                text: this.oResourceBundle.getText('GroupListItem_label'),
                visible: "{/showGroupSelection}"
            });
            this.oGroupsSelect = new sap.m.Select("groupsSelect", {
                tooltip: "{i18n>bookmarkDialogoGroup_tooltip}",
                items : {
                    path : "/groups",
                    template : new sap.ui.core.ListItem({
                        text : "{title}"
                    })
                },
                width: "100%",
                visible: {
                    path: "/showGroupSelection",
                    formatter: function (bShowGroupSelection) {
                        if (bShowGroupSelection) {
                            this.oController.loadPersonalizedGroups();
                        }
                        return bShowGroupSelection;
                    }.bind(this)
                }
            });
            this.oGroupsSelect.addAriaLabelledBy("groupLbl");



            return [
                oPreview,
                hbox,
                oTitle,
                this.oTitleInput,
                oSubTitle,
                this.oSubTitleInput,
                oInfo,
                this.oInfoInput,
                oGroupsLabel,
                this.oGroupsSelect
            ];
        },
        getTitleInput: function () {
            return this.oTitleInput;
        },
        getTileView: function () {
            return this.tileView;
        },
        setTileView: function (oTileView) {
            this.tileView = oTileView;
        },
        getBookmarkTileData: function () {
            var selectedGroupData;
            if (this.oGroupsSelect && this.oGroupsSelect.getSelectedItem()) {
                selectedGroupData = this.oGroupsSelect.getSelectedItem().getBindingContext().getObject();
            }

            // customUrl - Will be used to navigate from the new tile.
            var sURL;
            // in case customUrl is supplied
            if (this.viewData.customUrl) {
                // check if a function was passed as customUrl
                if (typeof (this.viewData.customUrl) === "function") {
                        // resolve the function to get the value for the customUrl
                        sURL = this.viewData.customUrl();
                } else {
                    // Provided as a string
                    // In case customURL will be provided (as a string) containing an hash part, it must be supplied non-encoded,
                    // or it will be resolved with duplicate encoding and can cause nav errors.
                    sURL = this.viewData.customUrl;
                }
            } else {
                // In case an hash exists, hasher.setHash() is used for navigation. It also adds encoding.
                // Otherwise use window.location.href
                sURL = hasher.getHash() ? ('#' + hasher.getHash()) : window.location.href;
            }

            return {
                title : this.oTitleInput.getValue().trim(),
                subtitle : this.oSubTitleInput.getValue().trim(),
                url : sURL,
                icon : this.getModel().getProperty('/icon'),
                info : this.oInfoInput.getValue().trim(),
                numberUnit : this.viewData.numberUnit,
                serviceUrl : typeof (this.viewData.serviceUrl) === "function" ? this.viewData.serviceUrl() : this.viewData.serviceUrl,
                serviceRefreshInterval : this.viewData.serviceRefreshInterval,
                group : selectedGroupData,
                keywords :  this.viewData.keywords
            };
        }
    });
}());
jQuery.sap.declare('sap.ushell.library-all');
jQuery.sap.declare('sap.ushell.components.factsheet.views.ThingViewer.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.components.flp.launchpad.catalog.Catalog.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.components.flp.launchpad.group_list.GroupList.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.components.tiles.applauncher.StaticTile.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.components.tiles.applauncherdynamic.DynamicTile.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.components.tiles.indicatorDual.DualTile.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.components.tiles.indicatorDualComparison.DualComparison.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.components.tiles.indicatorDualContribution.DualContribution.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.components.tiles.indicatorDualDeviation.DualDeviation.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.components.tiles.indicatorDualTrend.DualTrend.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.components.tiles.indicatorHarveyBall.HarveyBallTile.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.components.treeview.NavTree.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.components.treeview.NavTree.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.compactCozy_selector.CompactCozySelector.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.defaultParameters_selector.DefaultParameters.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.search.controls.DivContainer'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.search.controls.SearchLayout'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.search.controls.SearchRelatedObjectsToolbar'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.search.controls.SearchResultList'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.search.controls.SearchResultListContainer'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.search.controls.SearchResultListItemFooter'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.renderers.fiori2.theme_selector.ThemeSelector.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.ui.footerbar.SaveAsTile.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ushell.ui.footerbar.SaveAsTile.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
if ( !jQuery.sap.isDeclared('sap.ushell.Layout') ) {
/**
 * Created with JetBrains WebStorm.
 * User: I056927
 * Date: 19/10/14
 * Time: 07:41
 * To change this template use File | Settings | File Templates.
 */


//Required init with {getGroups: functions}
/*global jQuery, sap, window */
(function () {
    "use strict";

    jQuery.sap.declare("sap.ushell.Layout");

    var CollisionModule = function(settings) {
        this.init(settings);
    };
    CollisionModule.prototype = {
        settings: null, tileWidth: 0, tileHeight: 0, tileMargin: 0, curTouchMatrixCords: null, tilesInRow: null, groupsList: null,
        item: null, matrix: null, tiles: null, collisionLeft: false, startGroup: null, currentGroup: null, endGroup: null,
        init: function (settings) {
            this.curTouchMatrixCords = {column: null, row: null};
            this.endGroup = null;
            this.item = null;
            this.matrix = null;
            this.tiles = null;
            this.collisionLeft = false;
            this.startGroup = null;
            this.currentGroup = null;
            this.groupsList = null;
            this.settings = this.settings || settings;
            jQuery.extend(this, this.settings);
            this.tileWidth = this.thisLayout.styleInfo.tileWidth;
            this.tileHeight = this.thisLayout.styleInfo.tileHeight;
            this.tileMargin = this.thisLayout.styleInfo.tileMarginWidth;
            this.aExcludedControlClass = this.aExcludedControlClass || [];
            this.reorderElementsCallback = this.reorderElementsCallback || function () {};
        },

        moveDraggable: function (moveX, moveY) {
            var isCollision = this.detectCollision(moveX, moveY);
            if (isCollision) {
                this.changePlaceholder();
            }
        },

        layoutStartCallback: function (element) {
            this.init();
            this.item = sap.ui.getCore().byId(element.id);
            this.tilesInRow = this.thisLayout.getTilesInRow();
            this.groupsList = this.thisLayout.getGroups();
            this.startGroup = this.currentGroup = this.item.getParent();

        },

        layoutEndCallback: function () {
            if (!this.tiles) {
                return {tile: this.item};
            }
            var response = {srcGroup: this.startGroup, dstGroup: this.endGroup, tile: this.item, dstTileIndex: this.tiles.indexOf(this.item), tileMovedFlag: true};
            return response;
        },

        compareArrays: function (a1, a2) {
            if ( a1.length !== a2.length) {return false;}
            for (var i = 0; i < a1.length; i++) {
                if (a1[i] !== a2[i]) {
                    return false;
                }
            }
            return true;
        },

        reorderTilesView: function (tiles, group) {
            this.tiles = tiles;
            this.matrix = this.thisLayout.organizeGroup(tiles);
            this.thisLayout.applyTilesPositions(group, this.matrix);
        },


        /**
         *
         * @param item
         * @param replacedTile
         * @param tiles
         * @returns {*}
         */
        changeTilesOrder: function (item, replacedTile, tiles, matrix) {
            var newTiles = tiles.slice(0);
            var deletedItemIndex = newTiles.indexOf(item);
            if (deletedItemIndex > -1) {
                newTiles.splice(deletedItemIndex,1);
            }
            if (replacedTile) {
                newTiles.splice(newTiles.indexOf(replacedTile), 0, this.item);
            } else {
                newTiles.push(item);
            }
            if (this.currentGroup == this.endGroup) {
                if (this.compareArrays(tiles, newTiles)) {
                    return false;
                }
                var newMatrix = this.thisLayout.organizeGroup(newTiles);
                var cords = this.thisLayout.getTilePositionInMatrix(item, matrix);
                var newCords = this.thisLayout.getTilePositionInMatrix(item, newMatrix);
                if ((cords.row == newCords.row) && (cords.col == newCords.col)) {
                    return false;
                }
            }

            this.tiles = newTiles;
            this.currentGroup = this.endGroup;
            return newTiles;

        },

        setMatrix : function (newMatrix) {
            this.matrix = newMatrix;
        },

        /**
         *
         */
        changePlaceholder: function () {
            var currentGroup = this.currentGroup;
            // Check if tile moved to different group
            var tileChangedGroup = (this.endGroup !== this.currentGroup);
            // If tile moved to different group
            if (tileChangedGroup) {
                var currentHostTiles = this.thisLayout.getGroupTiles(this.currentGroup);
                if (this.currentGroup === this.startGroup) {
                    currentHostTiles = currentHostTiles.slice(0);
                    currentHostTiles.splice(currentHostTiles.indexOf(this.item),1);
                }
                var currentHostMatrix = this.thisLayout.organizeGroup(currentHostTiles);
                this.thisLayout.applyTilesPositions( this.currentGroup, currentHostMatrix);

                this.tiles = this.thisLayout.getGroupTiles(this.endGroup).slice(0);
                if (this.startGroup === this.endGroup) {
                    this.tiles.splice(this.tiles.indexOf(this.item),1);
                }
                this.matrix = this.thisLayout.organizeGroup(this.tiles);
                this.endGroup.getInnerContainerDomRef().appendChild(this.item.getDomRef());
                this.currentGroup = this.endGroup;
            }

            //remove excluded controls which define in this.aExcludedControlClass from the matrix in order to exclude
            // those controls from reordering
            this.removeExcludedElementsFromMatrix(this.aExcludedControlClass);
            var tiles = this.tiles || this.thisLayout.getGroupTiles(this.endGroup).slice(0);
            var newTilesOrder;

            if (this.matrix[this.curTouchMatrixCords.row] && typeof this.matrix[this.curTouchMatrixCords.row][this.curTouchMatrixCords.column] == "object" ) {
                var replacedTile = this.matrix[this.curTouchMatrixCords.row][this.curTouchMatrixCords.column];
                var replacedTileIndex = tiles.indexOf(replacedTile);

                if (this.rightToLeft){this.collisionLeft = !this.collisionLeft;}
                if (this.collisionLeft) {
                    replacedTile = tiles[replacedTileIndex + 1];
                }
                if (replacedTile === this.item) {
                    if (tileChangedGroup) {
                        this.reorderElementsCallback({currentGroup: currentGroup, endGroup: this.endGroup, tiles: this.tiles, item: this.item});
                        this.reorderTilesView(tiles, this.endGroup);
                    }
                    return;
                }
                newTilesOrder = this.changeTilesOrder(this.item, replacedTile, tiles, this.matrix);
                if (newTilesOrder) {
                    this.reorderElementsCallback({currentGroup: currentGroup, endGroup: this.endGroup, tiles: this.tiles, item: this.item});
                    this.reorderTilesView(newTilesOrder, this.endGroup);
                }
                return;
            }

            var maxTile = this.findTileToPlaceAfter(this.matrix, tiles);
            if (tiles[maxTile + 1] == this.item) {
                return;
            }

            if (tiles[maxTile + 1]) {
                replacedTile = tiles[maxTile + 1];
            } else if (this.currentGroup.getShowPlaceholder()) {
                replacedTile = tiles[0];
            }
            newTilesOrder = this.changeTilesOrder(this.item, replacedTile, tiles, this.matrix);
            if (newTilesOrder) {
                this.reorderElementsCallback({currentGroup: currentGroup, endGroup: this.endGroup, tiles: this.tiles, item: this.item});
                this.reorderTilesView(newTilesOrder, this.endGroup);
            }
        },

        findTileToPlaceAfter: function (curMatrix,tiles){
            var x = (this.thisLayout.rightToLeft) ? 0 : this.curTouchMatrixCords.column,
                iIncrease = (this.thisLayout.rightToLeft) ? 1 : -1,
                maxTile = 0,
                rowLength = curMatrix[0].length;

            for (var i = this.curTouchMatrixCords.row; i >= 0; i--) {
                for (var j = x; j >= 0 && j < rowLength ; j += iIncrease) {
                    if (!curMatrix[i] || typeof curMatrix[i][j] != "object") {
                        continue;
                    }
                    var tileIndex = tiles.indexOf(curMatrix[i][j]);
                    maxTile = tileIndex > maxTile ? tileIndex : maxTile;
                }
                x = curMatrix[0].length - 1;
            }

            return maxTile;
        },
        //function return detected collision
        /*
         *
         * @param moveX
         * @param moveY
         * @returns
         */
        detectCollision: function (moveX, moveY) {
            var rect, isHorizontalIntersection, isVerticalIntersection, collidedGroup = false;
            //var style;
            for (var i = 0; i < this.groupsList.length; i++) {
                var innerContainerElement = this.groupsList[i].getInnerContainerDomRef();
                rect = innerContainerElement.getBoundingClientRect();
                //style = window.getComputedStyle(innerContainerElement);
                isHorizontalIntersection = !(rect.right < moveX || rect.left > moveX);
                isVerticalIntersection = !(rect.bottom < moveY || rect.top > moveY);
                if (isHorizontalIntersection && isVerticalIntersection) {
                    collidedGroup =  this.groupsList[i];
                    break;
                }
            }

            var curTouchMatrixCords = jQuery.extend({}, this.curTouchMatrixCords );
            if (!collidedGroup || collidedGroup.getIsGroupLocked()) {
                return false;
            }
            if (collidedGroup) {
                this.matrix = this.matrix || this.thisLayout.organizeGroup(this.thisLayout.getGroupTiles(collidedGroup));
                var matrixTouchY = (rect.top * (-1) + moveY) / (this.tileHeight + this.tileMargin);
                var matrixTouchX = (rect.left * (-1) + moveX) / (this.tileWidth + this.tileMargin);
                curTouchMatrixCords = { row: Math.floor(matrixTouchY),
                    column: Math.floor(matrixTouchX)};
            }
            // if place of the tile is the same place as it was
            // nothing need to be done
            if ((collidedGroup === this.endGroup) &&
                (curTouchMatrixCords.column === this.curTouchMatrixCords.column) &&
                (curTouchMatrixCords.row === this.curTouchMatrixCords.row)) {
                return false;
            }

            this.collisionLeft = (curTouchMatrixCords.column - this.curTouchMatrixCords.column) > 0;
            if (curTouchMatrixCords.column === this.curTouchMatrixCords.column) {
                this.collisionLeft = false;
            }

            jQuery.extend(this.curTouchMatrixCords, curTouchMatrixCords);
            this.endGroup = collidedGroup;
            return true;
        },

        /*
         * Warning!
         */

        removeExcludedElementsFromMatrix: function (aExcludedControlClass) {
            if (!aExcludedControlClass.length) {
                return;
            }
            var newMatrix = this.matrix.map(function (row) {
                return row.map(function (item) {
                    var isRemoveRequired = aExcludedControlClass.some(function (controlClass) {
                        return item instanceof controlClass;
                    });
                    return (isRemoveRequired) ? undefined : item;
                });
            });

            this.setMatrix(newMatrix);
        },

        setExcludedControl : function (controlClass) {
            if (controlClass) {
                this.aExcludedControlClass.push(controlClass);
            }
        },

        /*
        Callback to be executed before change views after collision detection
         */
        setReorderTilesCallback : function (func) {
            if (typeof func === "function") {
                this.reorderElementsCallback = func;
            }
        }
    };


    var LayoutConstructor = function (){};
    LayoutConstructor.prototype = {
        init: function (cfg) {
            var deferred = jQuery.Deferred();
            //in some devices this code runs before css filed were loaded and we don't get the correct styleInfo object
            var timeoutLayoutInfo = function () {
                var styleInfo = this.getStyleInfo(this.container);
                if (styleInfo.tileWidth > 0) {
                    this.isInited = true;
                    this.reRenderGroupsLayout();
                    this.layoutEngine = new CollisionModule({thisLayout: this});
                    deferred.resolve();
                    return;
                }
                setTimeout(timeoutLayoutInfo, 100);
            }.bind(this);


            this.cfg = cfg || this.cfg;
            this.minTilesinRow = 2;
            this.maxTilesInRow = 8;
            this.rightToLeft = sap.ui.getCore().getConfiguration().getRTL();
            this.container = this.cfg.container || document.getElementById('dashboardGroups');
            timeoutLayoutInfo();

            return deferred.promise();
        },
        getLayoutEngine: function () {
            return this.layoutEngine;
        },
        getStyleInfo: function (container) {
            var tile = document.createElement('div'),
                containerId = container.getAttribute('id');
            container = containerId ? document.getElementById(containerId) : container;
            tile.className = "sapUshellTile";
            tile.setAttribute('style', 'position: absolute; visibility: hidden;');
            container.appendChild(tile);
            var tileStyle = window.getComputedStyle(tile);
            var info = {"tileMarginHeight" : parseInt(tileStyle.marginBottom, 10) + parseInt(tileStyle.marginTop, 10),
                "tileMarginWidth" : parseInt(tileStyle.marginLeft, 10) + parseInt(tileStyle.marginRight, 10),
                "tileWidth": tile.offsetWidth,
                "tileHeight": tile.offsetHeight,
                "containerWidth": container.offsetWidth
            };
            tile.parentNode.removeChild(tile);

            return info;
        },
        getGroups: function () {
            return this.cfg.getGroups();
        },
        getTilesInRow: function (bIslink) {
            return this.tilesInRow;
        },
        setTilesInRow: function (tilesInRow) {
            this.tilesInRow = tilesInRow;
        },
        checkPlaceForTile: function (tile, matrix, place, lastRow, bIsLinkTiles) {
            if (typeof matrix[place.y] === "undefined") {
                matrix.push(new Array(matrix[0].length));
            }
            if (typeof matrix[place.y + 1] === "undefined") {
                matrix.push(new Array(matrix[0].length));
            }
            if (typeof matrix[place.y][place.x] !== "undefined") {
                return false;
            }
            var p = jQuery.extend({}, place);
            if (bIsLinkTiles || (!tile.getLong() && !tile.getTall())) {
                return [p];
            }
            var cords = [p];
            if (tile.getTall()) {
                if ((p.y + 1) > lastRow || typeof matrix[p.y + 1][p.x] !== "undefined") {
                    return false;
                }
                cords.push({y: p.y + 1, x: p.x});
            }
            if (tile.getLong()) {
                if ((place.x + 1) >= matrix[0].length || (typeof matrix[p.y][p.x + 1] !== "undefined") ) {
                    return false;
                }
                cords.push({y: p.y, x: p.x + 1});
            }
            if (tile.getTall() && tile.getLong()) {
                if (typeof matrix[p.y + 1][p.x + 1] !== "undefined") {
                    return false;
                }
                cords.push({y: p.y + 1, x: p.x + 1});
            }
            return cords;
        },

        /**
         *
         * @param tile
         * @param matrix
         * @param cords
         */
        placeTile: function (tile, matrix, cords) {
            for (var i = 0; i < cords.length; i++) {
                matrix[cords[i].y][cords[i].x] = tile;
            }
        },

        getTilePositionInMatrix: function (tile, matrix) {
            for (var row = 0; row < matrix.length; row++) {
                for ( var col = 0; col < matrix[0].length; col++) {
                    if (matrix[row][col] == tile) {
                        return {row: row, col: col};
                    }
                }
            }
            return false;
        },
        /**
         *
         * @param matrix
         * @param tiles
         * @param startRow
         * @param endRow
         * @returns {number}
         */
        fillRowsInLine: function (matrix, tiles, startRow, endRow, bIsLinkTiles) {
            if (!tiles.length) {return 0;}

            var placedTiles = [], cords, i;
            var toRow = endRow || startRow;
            for ( i = startRow; i <= toRow && tiles.length; i++) {
                for (var j = 0; j < matrix[0].length && tiles.length; j++) {
                    cords = this.checkPlaceForTile(tiles[0], matrix, {x: j, y: i}, endRow, bIsLinkTiles);
                    if (cords) {
                        this.placeTile(tiles[0], matrix, cords);
                        placedTiles.push(tiles.shift());
                    }
                }
            }
            var maxHeight = 1, height;
            for (i = 0; i < placedTiles.length; i++) {
                height = !bIsLinkTiles && placedTiles[i].getTall() ? 2 : 1;
                maxHeight = height > maxHeight ?  height : maxHeight;
            }

            return maxHeight;
        },

        /**
         *
         * @param tiles
         * @param containerInfo
         * @returns {Array}
         */
        organizeGroup: function (tiles, bIsLinkTiles) {
            //copy of tilesCopy array
            var tilesCopy = tiles.slice(0);
            var tilesMatrix = [];
            var currentRow = 0;
            tilesMatrix.push(new Array(bIsLinkTiles ? Math.round(this.tilesInRow / 2) : this.tilesInRow));

            while (tilesCopy.length) {
                //lineHeight will be changed if tile that higher that 1 will appear in the row
                var lineHeight = this.fillRowsInLine(tilesMatrix, tilesCopy, currentRow, undefined, bIsLinkTiles); //to do: get the declaration outside
                currentRow++;
                if (lineHeight <= 1) {
                    continue;
                }
                //If line is higher than 1
                this.fillRowsInLine(tilesMatrix, tilesCopy, currentRow, currentRow + lineHeight - 2);
                currentRow += (lineHeight - 1) || 1;
            }
            if (this.rightToLeft){
                for (var i = 0; i < tilesMatrix.length ; i++){
                    tilesMatrix[i].reverse();
                }
            }
            tilesMatrix = this.cleanRows(tilesMatrix);
            return tilesMatrix;
        },

        cleanRows:function(tilesMatrix){

            var doneChecking = false;

            for (var row = tilesMatrix.length - 1 ; row > 0 && !doneChecking ; row--){
                for (var col = 0; col < tilesMatrix[row].length && !doneChecking; col++ ){
                    if (typeof tilesMatrix[row][col] === "object"){
                        doneChecking = true;
                    }
                }
                if (!doneChecking){
                    tilesMatrix.pop();
                }
            }
            return tilesMatrix;
        },
        /**
         *
         * @param $tilesContainer
         * @param matrix
         */
        applyTilesPositions: function (group, matrix) {
            var positionedTiles = [];
            var standardizationSupport = 0;
            var i;
            for (i = 0; i < matrix.length; i++) {
                var emptyString = true;
                for (var j = 0;  j < matrix[0].length; j++) {
                    if (typeof matrix[i][j] == "object" && positionedTiles.indexOf(matrix[i][j]) < 0){
                        var tile = matrix[i][j];

                        if (this.rightToLeft){
                            standardizationSupport = this.tilesInRow - 1;
                            if (tile.getLong()){
                                standardizationSupport--;
                            }
                        }
                        var translateX = (j - standardizationSupport) * this.styleInfo.tileWidth + (j - standardizationSupport) * this.styleInfo.tileMarginWidth;
                        var translateY = (i * this.styleInfo.tileHeight) + (i * this.styleInfo.tileMarginHeight);

                        var translate3D =  "translate3d(" + translateX + "px," + translateY + "px,0px)";
                        //IE9 contains only 2-D transform
                        var translate2D =  "translate(" + translateX + "px," + translateY + "px)";
                        var tileDom = tile.getDomRef();
                        if (tileDom) {
                            var tileStylePointer = tileDom.style;
                            tileStylePointer.webkitTransform = translate3D;
                            tileStylePointer.transform = translate3D;
                            //IE9 contains only 2-D transform
                            tileStylePointer.msTransform = translate2D;
                        }
                        tile.data('layoutPosition', {translate3D : translate3D, translate2D : translate2D});
                        positionedTiles.push(tile);
                    }
                    if (typeof matrix[i][j] !== "undefined") {
                        emptyString = false;
                    }
                }
                if (emptyString) {
                    matrix.splice(i,1);
                    i--;
                }

            }
            var heightByTiles = matrix.length;
            var containerHeight = (heightByTiles * (this.styleInfo.tileHeight + this.styleInfo.tileMarginHeight)) + 'px';
            group.data('containerHeight', containerHeight);
            var innerContainer = group.getInnerContainerDomRef();
            if (innerContainer) {
                innerContainer.style.height = containerHeight;
            }
            if (this.cfg.isLockedGroupsCompactLayoutEnabled && group.getIsGroupLocked() && matrix.length > 0){
                var parentContainer = group.getDomRef().parentElement;
                if (this.cfg.isLockedGroupsCompactLayoutEnabled()){
                    var tileCount = matrix[0].length;
                    for (i = 0; i < matrix[0].length; i++){
                        if (!matrix[0][i]){
                            tileCount = i;
                            break;
                        }
                    }
                    var containerWidth = tileCount * (this.styleInfo.tileWidth + this.styleInfo.tileMarginWidth);
                    group.getDomRef().style.width = "auto";
                    parentContainer.style.width = containerWidth + "px";
                    parentContainer.style.display = "inline-block";
                } else {
                    group.getDomRef().style.width = "";
                    parentContainer.style.width = "";
                    parentContainer.style.display = "";
                }
            }

        },

        /**
         *
         * @param containerWidth
         * @param tileWidth
         * @param tileMargin
         * @returns {number}
         */

        calcTilesInRow: function (containerWidth, tileWidth, tileMargin) {
            var tilesInRow = Math.floor(containerWidth / (tileWidth + tileMargin));

            //Max/Min number of tile in row that was predefined by UI
            if (tilesInRow <= this.maxTilesInRow){
                tilesInRow = (tilesInRow < this.minTilesinRow ? this.minTilesinRow : tilesInRow );
            } else {
                tilesInRow = this.maxTilesInRow;
            }

            return tilesInRow;
        },

        reRenderGroupLayout: function (group, tiles) {
            tiles = tiles || this.getGroupTiles(group);
            var groupLayoutMatrix = this.organizeGroup(tiles);
            this.applyTilesPositions(group, groupLayoutMatrix);
        },

        getGroupTiles : function (oGroup) {
            var aTiles = oGroup.getTiles();
            //insert plus tile only in non empty groups
            if (oGroup.getShowPlaceholder()) {
                aTiles.push(oGroup.oPlusTile);
            }
            return aTiles;
        },

        //groups are optional, onlyIfViewPortChanged are optional
        reRenderGroupsLayout: function (groups, onlyIfViewPortChanged) {
            if (!this.isInited) {
                return;
            }
            var styleInfo = this.getStyleInfo(this.container);
            if (!styleInfo.tileWidth) {
                return;
            }
            if (onlyIfViewPortChanged && JSON.stringify(styleInfo) == JSON.stringify(this.styleInfo)) {
                return;
            }
            this.styleInfo = styleInfo;
            this.tilesInRow =  this.calcTilesInRow(styleInfo.containerWidth, styleInfo.tileWidth, styleInfo.tileMarginWidth);
            groups = groups || this.getGroups();

            for (var i = 0; i < groups.length; i++) {
                this.reRenderGroupLayout(groups[i]);
            }
        }
    };

    sap.ushell.Layout = new LayoutConstructor();
})();

}; // end of sap/ushell/Layout.js
if ( !jQuery.sap.isDeclared('sap.ushell.System') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview The <code>sap.ushell.System</code> object with related functions.
 */

(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.System");

    // "private" methods (static) without need to access properties -------------


    // "public class" -----------------------------------------------------------

    /**
     * Constructs a new system object representing a system used in the Unified Shell.
     *
     * @param {object} oData
     *     An object containing the system data
     * @param {string} oData.alias
     *     The unique system alias such as <code>'ENTERPRISE_SEARCH'</code>.
     * @param {string} oData.baseUrl
     *     The server relative base URL of this system such as <code>'/ENTERPRISE_SEARCH'</code>.
     *     <b>Note:</b> This has to correspond to an SAP Web Dispatcher routing rule.
     * @param {string} oData.platform
     *         The system platform such as <code>'abap'</code> or <code>'hana'</code>.
     *
     * @class A representation of a system
     * @constructor
     * @since 1.15.0
     * @public
     */
    sap.ushell.System = function (oData) {

        // BEWARE: constructor code below!

        // "private" or hidden methods --------------------------------------------

        // "public" methods -------------------------------------------------------

        /**
         * Returns this system's alias.
         *
         * @returns {string}
         *   this system's alias
         * @since 1.15.0
         */
        this.getAlias = function () {
            return oData.alias;
        };

        /**
         * Returns this system's base URL.
         *
         * @returns {string}
         *   this system's base URL
         * @since 1.15.0
         */
        this.getBaseUrl = function () {
            return oData.baseUrl;
        };

        /**
         * Returns this system's client.
         *
         * @returns {string}
         *   this system's client
         * @since 1.15.0
         */
        this.getClient = function () {
            return oData.client;
        };

        /**
         * Returns this system's name.
         *
         * @returns {string}
         *   this system's name
         * @since 1.15.0
         */
        this.getName = function () {
            return oData.system;
        };

        /**
         * Returns this system's platform.
         *
         * @returns {string}
         *   this system's platform ("abap", "hana" etc.)
         * @since 1.15.0
         */
        this.getPlatform = function () {
            return oData.platform;
        };

        /**
         * Adjusts the given URL so that it will be passed to this system.
         *
         * @param {string} sUrl
         *      the URL (which must be server-absolute)
         * @returns {string}
         *      the adjusted URL
         * @since 1.15.0
         */
        this.adjustUrl = function (sUrl) {
            /*jslint regexp:true */
            if (sUrl.indexOf('/') !== 0 || sUrl === '/') {
                throw new Error("Invalid URL: " + sUrl);
            }
            if (oData.baseUrl === ";o=") {
                if (oData.alias) {
                    sUrl = sUrl + ";o=" + oData.alias;
                }
            } else if (oData.baseUrl) {
                sUrl = oData.baseUrl.replace(/\/$/, "") + sUrl;
            }
            if (oData.client) {
                sUrl += (sUrl.indexOf("?") >= 0 ? "&" : "?") + "sap-client=" + oData.client;
            }
            return sUrl;
        };

        this.toString = function () {
            return JSON.stringify(oData);
        };

        // constructor code -------------------------------------------------------

        // "public" methods (static) ------------------------------------------------

    };

}());

}; // end of sap/ushell/System.js
if ( !jQuery.sap.isDeclared('sap.ushell.UIActions') ) {
/*global jQuery, sap, clearTimeout, console, window */
/*global jQuery, sap, clearTimeout, console, window */
(function () {
    "use strict";

    jQuery.sap.declare("sap.ushell.UIActions");

    sap.ushell.UIActions = function(cfg) {

        if (!cfg || !cfg.rootSelector || !cfg.containerSelector || !cfg.draggableSelector) {
            throw new Error("No configuration object to initialize User Interaction module.");
        }

        /* PRIVATE MEMBERS */
        //TO DO: write optional and mandatory parameters.
        this.animationDuration = null;         // {Number} animation duration in ms
        this.captureStart = null;              // {Function} capture start event X and Y position
        this.captureMove = null;               // {Function} capture move event X and Y position
        this.captureEnd = null;                // {Function} capture end event X and Y position
        this.clickCallback = null;             //{Function} Callback function execute after capture `click` event
        this.clickEvent = null;                // {String} `click` event
        this.clickHandler = null;              // {Function} capture click event and prevent the default behaviour on IOS
        this.clone = null;                     // {Element} cloned draggable element
        this.cloneClass = null;                // {String} clone CSS Class
        this.container = null;                 // {Element} content container to be scrolled
        this.contextMenuEvent = null;          // {String} `contextmenu` event for Windows 8 Chrome
        this.debug = null;                     // {Boolean} for debug mode
        this.defaultDragStartEvent = null;     // {String} `dragStart` event which we need to prevent its default behavior
        this.disabledDraggableSelector = null; //{String} name of css class to avoid drag (e.g. locked tiles class identifier)
        this.dragAndScrollCallback = null;     // {Function} Callback function executes while drag mode is active
        this.dragAndScrollDuration = null;     // {Number} Scroll timer duration in ms
        this.dragAndScrollTimer = null;        // {Number} timer ID. Used in drag & scroll animation
        this.draggable = null;                 // {Array<Element>|NodeList<Element>} list of draggable elements
        this.placeHolderClass = null;          // {String} placeholder CSS Class
        this.draggableSelector = null;         // {String} CSS Selector String which specifies the draggable elements
        this.draggableSelectorExclude = null;  // {String} CSS Selector String which specifies the elements that can not be draggable but can be droppable
        this.doubleTapCallback = null;         // {Function} Callback function execute when double tap
        this.doubleTapDelay = null;            // {Number} number of milliseconds to recognize double tap
        this.element = null;                   // {Element} draggable element
        this.endX = null;                      // {Number} X coordinate of end event
        this.endY = null;                      // {Number} Y coordinate of end event
        this.isLayoutEngine = null;            // {Boolean} is layout engine available
        this.isTouch = null;                   // {Boolean} does browser supports touch events
        this.lastElement = null;               // {Element} last tapped element
        this.lastTapTime = null;               // {Number} number of milliseconds elapsed since last touchstart or mousedown
        this.lockMode = null;                  // {Boolean} if the value is true, preventing change element mode
        this.log = null;                       // {Function} logs to console in debug mode
        this.mode = null;                      // {String} current feature mode `normal`, `scroll`, `drag`, `move`
        this.mouseDownEvent = null;            // {String} 'mousedown'
        this.mouseMoveEvent = null;            // {String} 'mousemove'
        this.mouseUpEvent = null;              // {String} 'mouseup'
        this.moveTolerance = null;             // {Number} tolerance in pixels between touchStart/mousedwon and touchMove/mousemove
        this.moveX = null;                     // {Number} X coordinate of move event
        this.moveY = null;                     // {Number} Y coordinate of move event
        this.noop = null;                      // {Function} empty function
        this.onDragStartUIHandler = null;      // {Function} Handler that will be called when drag starts in order to add visual effects. it will be called also for items that are belong to the disabledDraggableSelector, although the drag will be prevented immediately.
        this.onDragEndUIHandler = null;        // {Function} Handler that will be called when drag ends. to revert the drag visual effects.
        this.preventClickFlag;                 // {Boolean} flag indicates if prevent default click behaviour
        this.preventClickTimeoutId;            // {Number}  timer ID. Used to clear click preventing
        this.scrollContainer = null;           // {Element} the element we would like to transition while drag and scroll
        this.scrollContainerSelector = null;   // {String} CSS Selector String which specifies the element we would like to transition while drag and scroll
        this.scrollEvent = null;               // {String} `scroll` event
        this.scrollTimer = null;               // {Number} number of milliseconds elapsed since the last scroll event
        this.startX = null;                    // {Number} X coordinate of start event
        this.startY = null;                    // {Number} Y coordinate of start event
        this.switchModeDelay = null;           // {Number} switch mode delay in ms
        this.tapsNumber = null;                // {Number} the number of taps. could be 0 / 1 / 2
        this.timer = null;                     // {Number} timer ID. Used to decide mode
        this.scrollHandler = null;             // {Function} scroll event handler
        this.touchCancelEvent = null;          // {String} `touchcanel` event
        this.dragCallback = null;              // {Function} Callback function execute when drag mode is active
        this.endCallback = null;               // {Function} Callback function execute after capture `touchend` or `mouseup` event
        this.touchEndEvent = null;             // {String} `touchend`
        this.touchMoveEvent = null;            // {String} `touchmove`
        this.startCallback = null;             // {Function} Callback function execute after capture `touchstart` or `mousedown` event
        this.touchStartEvent = null;           // {String} `touchstart`
        this.wrapper = null;                   // {Element} content container parent
        this.wrapperRect = null;               // {Object} wrapper Bounding Rect
        this.scrollCallback = null;            // {Function} Callback function when scroll was performed


        /**
         * Initialize state using configuration
         *
         * @private
         */
        this.init = function (cfg) {
            this.startX = -1;
            this.startY = -1;
            this.moveX = -1;
            this.moveY = -1;
            this.endX = -1;
            this.endY = -1;

            this.noop = function() {};

            this.isLayoutEngine = cfg.isLayoutEngine || false;
            if (this.isLayoutEngine) {
                this.moveDraggable = this.noop;
            }

            this.isTouch = cfg.isTouch  ? !!cfg.isTouch : false;
            this.container = document.querySelector(cfg.containerSelector);
            this.scrollContainerSelector = cfg.scrollContainerSelector || cfg.containerSelector;
            this.switchModeDelay = cfg.switchModeDelay || 1500;
            this.dragAndScrollDuration = cfg.dragAndScrollDuration || 230;
            this.moveTolerance = cfg.moveTolerance === 0 ? 0 : cfg.moveTolerance || 10;
            this.draggableSelector = cfg.draggableSelector;
            this.draggableSelectorBlocker = cfg.draggableSelectorBlocker || cfg.rootSelector;
            this.draggableSelectorExclude = cfg.draggableSelectorExclude;
            this.mode = 'normal';
            this.debug = cfg.debug || false;
            this.root = document.querySelector(cfg.rootSelector);
            this.animationDuration = cfg.animationDuration || 330;
            this.tapsNumber = 0;
            this.lastTapTime = 0;
            this.log = this.debug ? this.logToConsole : this.noop;
            this.lockMode = false;
            this.placeHolderClass = cfg.placeHolderClass || "";
            this.cloneClass = cfg.cloneClass || "";
            this.wrapper = cfg.wrapperSelector ? document.querySelector(cfg.wrapperSelector) : this.container.parentNode;
            this.clickCallback = typeof cfg.clickCallback === 'function' ? cfg.clickCallback : this.noop;
            this.startCallback = typeof cfg.startCallback === 'function' ? cfg.startCallback : this.noop;
            this.doubleTapCallback = typeof cfg.doubleTapCallback === 'function' ? cfg.doubleTapCallback : this.noop;
            this.endCallback = typeof cfg.endCallback === 'function' ? cfg.endCallback : this.noop;
            this.dragCallback = typeof cfg.dragCallback === 'function' ? cfg.dragCallback : this.noop;
            this.dragAndScrollCallback = typeof cfg.dragAndScrollCallback === 'function' ? cfg.dragAndScrollCallback : this.noop;
            this.scrollCallback = typeof cfg.scrollCallback === 'function' ? cfg.scrollCallback : this.noop;
            this.doubleTapDelay = cfg.doubleTapDelay || 500;
            this.wrapperRect = this.wrapper.getBoundingClientRect();
            this.scrollEvent = 'scroll';
            this.touchStartEvent = 'touchstart';
            this.touchMoveEvent = 'touchmove';
            this.touchEndEvent = 'touchend';
            this.mouseDownEvent = 'mousedown';
            this.mouseMoveEvent = 'mousemove';
            this.mouseUpEvent = 'mouseup';
            this.contextMenuEvent = 'contextmenu';
            this.touchCancelEvent = 'touchcancel';
            this.defaultDragStartEvent = 'dragstart';
            this.clickEvent = 'click';
            this.isVerticalDragOnly = cfg.isVerticalDragOnly || false;

            // Apply specific ui effects upon drag and drop.
            // (currently ONLY locked groups feature uses. See DashboardContent.view.js method _getDashboardGroupsBox)
            this.disabledDraggableSelector = cfg.disabledDraggableSelector;
            this.onDragStartUIHandler = typeof cfg.onDragStartUIHandler === 'function' ? cfg.onDragStartUIHandler : this.noop;
            this.onDragEndUIHandler = typeof cfg.onDragEndUIHandler === 'function' ? cfg.onDragEndUIHandler : this.noop;
        };

        /* PRIVATE METHODS */

        /**
         * Iterates over array-like object and calls callback function
         * for each item
         *
         * @param {Array|NodeList|Arguments} scope - array-like object
         * @param {Function} callback - function to be called for each element in scope
         * @returns {Array|NodeList|Arguments} scope
         */
        this.forEach = function (scope, callback) {
            /*
             * NodeList and Arguments don't have forEach,
             * therefore borrow it from Array.prototype
             */
            return Array.prototype.forEach.call(scope, callback);
        };

        /**
         * Returns index of item in array-like object
         *
         * @param {Array|NodeList|Arguments} scope - array-like object
         * @param {*} item - item which index to be found
         * @returns {Number} index of item in the array-like object
         */
        this.indexOf = function (scope, item) {
            /*
             * NodeList and Arguments don't have indexOf,
             * therefore borrow it from Array.prototype
             */
            return Array.prototype.indexOf.call(scope, item);
        };

        /**
         * Cuts item from array-like object and pastes before reference item
         *
         * @param {Array|NodeList|Arguments} scope
         * @param {*} item
         * @param {*} referenceItem
         */
        this.insertBefore = function (scope, item, referenceItem) {
            var itemIndex,
                referenceItemIndex,
                splice;

            splice = Array.prototype.splice;
            itemIndex = this.indexOf(scope, item);
            referenceItemIndex = this.indexOf(scope, referenceItem);

            splice.call(
                scope,
                referenceItemIndex - (itemIndex < referenceItemIndex ? 1 : 0),
                0,
                splice.call(scope, itemIndex, 1)[0]
            );
        };

        /**
         * Log to console
         *
         * @private
         */
        this.logToConsole = function () {
            window.console.log.apply(console, arguments);
        };


        this.getDraggableElement = function (currentElement) {
            var element;

            this.draggable = jQuery(this.draggableSelector, this.container);
            //Since we are listening on the root element,
            //we would like to identify when a draggable element is being touched.
            //The target element of the event is the lowest element in the DOM hierarchy
            //where the user touched the screen.
            //We need to climb in the DOM tree from the target element until we identify the draggable element,
            //or getting out of container scope.
            while (typeof element === 'undefined' && currentElement !== this.root && !jQuery(currentElement).is(this.draggableSelectorBlocker)) {
                //Only draggable tiles
                if (this.indexOf(this.draggable, currentElement) >= 0 && jQuery(currentElement).not(this.draggableSelectorExclude).length > 0) {
                    element = currentElement;
                }
                currentElement = currentElement.parentNode;
            }

            return element;
        };

        /**
         * Capture X and Y coordinates of touchstart or mousedown event
         *
         * @param {Event} evt - touchstart or mousedowm event
         * @private
         */
        this.captureStart = function (evt) {
            var eventObj;

            if (evt.type === 'touchstart' && evt.touches.length === 1) {
                eventObj = evt.touches[0];
            } else if (evt.type === 'mousedown') {
                eventObj = evt;
                if (evt.which != 1) {//Only LEFT click operation is enabled. Otherwise do nothing.
                    return;
                }
            }

            if (eventObj) {
                this.element = this.getDraggableElement(eventObj.target);
                this.startX = eventObj.pageX;
                this.startY = eventObj.pageY;
                this.lastMoveX = 0;
                this.lastMoveY = 0;
                //Check if it is a doubletap flow or single tap
                if (this.lastTapTime && this.lastElement && this.element && (this.lastElement === this.element)
                    && Math.abs(Date.now() - this.lastTapTime) < this.doubleTapDelay) {
                    this.lastTapTime = 0;
                    this.tapsNumber = 2;
                } else {
                    this.lastTapTime = Date.now();
                    this.tapsNumber = 1;
                    this.lastElement = this.element;
                }

                this.log('captureStart(' + this.startX + ', ' + this.startY + ')');
            }
        };

        /**
         * Handler for `mousedown` or `touchstart`
         *
         * @private
         */
        this.startHandler = function (evt) {
            this.log('startHandler');
            clearTimeout(this.timer);
            delete this.timer;
            this.captureStart(evt);
            if (this.element) {
                this.startCallback(evt, this.element);
                if (this.lockMode === false) {
                    if (this.tapsNumber === 2) {
                        this.mode = 'double-tap';
                        return;
                    }
                    if (this.isTouch) {
                        this.timer = setTimeout(function () {
                            //In Mobile prevent drag of locked tile
                            if (!jQuery(this.element).hasClass(this.disabledDraggableSelector)) {
                                this.log('mode switched to drag');
                                this.mode = 'drag';
                                this.createClone();
                                this.dragCallback(evt, this.element);
                            } else {
                                this.onDragStartUIHandler();
                            }
                        }.bind(this), this.switchModeDelay);
                    }
                }
            }
        }.bind(this);

        /**
         * Capture X and Y coordinates of touchmove or mousemove event
         *
         * @param {Event} evt - touchmove or mousemove event
         * @private
         */
        this.captureMove = function (evt) {
            var eventObj;

            if (evt.type === 'touchmove' && evt.touches.length === 1) {
                eventObj = evt.touches[0];
            } else if (evt.type === 'mousemove') {
                eventObj = evt;
            }
            if (eventObj) {
                this.moveX = eventObj.pageX;
                this.moveY = eventObj.pageY;

                this.log('captureMove(' + this.moveX + ', ' + this.moveY + ')');
            }
        };

        /**
         * Handler for `mousemove` or `touchmove`
         *
         * @private
         */
        this.moveHandler = function(evt) {
            var isScrolling;
            this.log('moveHandler');
            this.captureMove(evt);
            switch (this.mode) {
            case 'normal':
                if ((Math.abs(this.startX - this.moveX) > this.moveTolerance || Math.abs(this.startY - this.moveY) > this.moveTolerance)) {
                    if (this.isTouch) {
                        this.log('-> normal');
                        clearTimeout(this.timer);
                        delete this.timer;
                    } else if (this.element) { //In desktop start dragging immediately
                        this.onDragStartUIHandler();
                        if (!jQuery(this.element).hasClass(this.disabledDraggableSelector)) {
                            this.log('mode switched to drag');
                            this.mode = 'drag';
                            this.createClone();
                        } else {
                            //In case the element has the disable draggable selector, we prevent the drag action and in addition make sure to prevent the click from being executed.
                            this.preventClick();
                            this.element = null;
                        }
                    }
                }
                break;
            case 'drag':
                evt.preventDefault();
                this.onDragStartUIHandler();
                this.log('-> drag');
                if (this.isVerticalDragOnly) {
                    this.mode = 'vertical-drag';
                } else {
                    this.mode = 'drag-and-scroll';
                }
                window.addEventListener(this.mouseUpEvent, this.endHandler, true);
                this.translateClone();
                this.scrollContainer = document.querySelector(this.scrollContainerSelector);
                this.dragAndScroll();

                if (!this.isTouch) {
                    this.dragCallback(evt, this.element);
                }
                break;
            case 'drag-and-scroll':
                evt.stopPropagation();
                evt.preventDefault();
                this.log('-> drag-and-scroll');
                isScrolling = this.dragAndScroll();
                this.translateClone();
                if (!isScrolling) {
                    this.moveDraggable();
                }
                this.dragAndScrollCallback({evt : evt, clone : this.clone, isScrolling: isScrolling, moveX : this.moveX, moveY : this.moveY});
                break;
            case 'vertical-drag':
                evt.stopPropagation();
                evt.preventDefault();
                isScrolling = this.dragAndScroll();
                this.translateClone();
                if (!isScrolling) {
                    this.moveDraggableVerticalOnly(this.moveX, this.moveY);
                }
                this.dragAndScrollCallback({evt : evt, clone : this.clone, isScrolling: isScrolling, moveX : this.moveX, moveY : this.moveY});
                break;
            default:
                break;
            }
        }.bind(this);

        /**
         * Capture X and Y coordinates of touchend or mouseup event
         *
         * @param {Event} evt - touchmove or mouseup event
         * @private
         */
        this.captureEnd = function (evt) {
            var eventObj;

            if ((evt.type === 'touchend' || evt.type ===  'touchcancel') && (evt.changedTouches.length === 1)) {
                eventObj = evt.changedTouches[0];
            } else if (evt.type === 'mouseup') {
                eventObj = evt;
            }
            if (eventObj) {
                this.endX = eventObj.pageX;
                this.endY = eventObj.pageY;

                this.log('captureEnd(' + this.endX + ', ' + this.endY + ')');
            }
        };

        /**
         * Handler for `contextmenu` event. Disable right click on Chrome
         *
         * @private
         */
        this.contextMenuHandler = function (evt) {
            if (this.isTouch) {
                evt.preventDefault();
            }

        }.bind(this);

        /**
         *
         * @param event
         */
        this.clickHandler = function (event) {

            if (this.preventClickFlag) {
                this.preventClickFlag = false;
                event.preventDefault();
                event.stopPropagation();
                event.stopImmediatePropagation();
                clearTimeout(this.preventClickTimeoutId);
            }
            this.clickCallback();

        }.bind(this);

        /**
         * This function solves a bug which causes the tile to be launched after D&D.
         */
        this.preventClick = function () {
            this.preventClickFlag = true;
            this.preventClickTimeoutId = setTimeout(function () {
                this.preventClickFlag = false;
            }.bind(this), 100);
        };

        /**
         * Handler for `mouseup` or `touchend`
         *
         * @private
         */
        this.endHandler = function (evt) {
            this.log('endHandler');
            this.captureEnd(evt);
            this.onDragEndUIHandler();
            switch (this.mode) {
            case 'normal':
                this.log('-> normal');
                break;
            case 'drag':
                this.log('-> drag');
                this.removeClone();
                this.endCallback(evt, this.element);
                this.preventClick();
                break;
            case 'drag-and-scroll':
                this.log('-> drag-and-scroll');
                window.removeEventListener(this.mouseUpEvent, this.endHandler, true);
                this.removeClone();
                this.endCallback(evt, this.element);
                this.preventClick();
                evt.stopPropagation();
                evt.preventDefault();
                break;
            case 'vertical-drag':
                this.log('-> vertical-drag');
                window.removeEventListener(this.mouseUpEvent, this.endHandler, true);
                this.removeClone();
                this.endCallback(evt, this.element);
                this.preventClick();
                evt.stopPropagation();
                evt.preventDefault();
                break;
            case 'double-tap':
                this.log('-> double-tap');
                this.doubleTapCallback(evt, this.element);
                break;
            default:
                break;
            }
            clearTimeout(this.timer);
            delete this.timer;
            this.lastMoveX = 0;
            this.lastMoveY = 0;
            this.element = null;
            this.mode = 'normal';
        }.bind(this);

        this.defaultDragStartHandler = function (evt) {
            //prevent the Native Drag behavior of the browser
            evt.preventDefault();
        };

        this.scrollHandler = function() {
            clearTimeout(this.scrollTimer);
            this.lockMode = true;
            //release the scroll lock after 100 ms
            this.scrollTimer = setTimeout(function(){
                this.lockMode = false;
            }.bind(this), 500);
        }.bind(this);

        /**
         * Create clone of draggable element
         *
         * @private
         */
        this.createClone = function () {
            var style,
                rect;

            rect = this.element.getBoundingClientRect();
            this.clone = this.element.cloneNode(true);
            this.clone.className += (' ' + this.cloneClass);
            this.element.className += (' ' + this.placeHolderClass);
            style = this.clone.style;
            style.position = 'fixed';
            style.display = 'block';
            style.top = rect.top + 'px';
            style.left = rect.left + 'px';
            style.width = rect.width + 'px';
            style.zIndex = '100';
            style.webkitTransition = '-webkit-transform 0ms cubic-bezier(0.33, 0.66, 0.66, 1)';
            style.mozTransition = '-moz-transform 0ms cubic-bezier(0.33, 0.66, 0.66, 1)';
            style.msTransition = '-ms-transform 0ms cubic-bezier(0.33, 0.66, 0.66, 1)';
            style.transition = 'transform 0ms cubic-bezier(0.33, 0.66, 0.66, 1)';
            style.webkitTransform = 'translate3d(0px, 0px, 0px) ';
            style.mozTransform = 'translate3d(0px, 0px, 0px) ';
            style.msTransform = 'translate3d(0px, 0px, 0px) ';
            style.transform = 'translate3d(0px, 0px, 0px) ';
            this.root.appendChild(this.clone);
            this.log('createClone');
        };

        /**
         * Remove clone of draggable element
         *
         * @private
         */
        this.removeClone = function () {
            this.element.className = this.element.className.split(' ' + this.placeHolderClass).join('');
            this.clone.parentElement.removeChild(this.clone);
            // unset reference to DOM element of the clone, otherwise it will remain DOM fragment
            this.clone = null;
            this.log('removeClone');
        };

        /**
         * Translate clone of draggable element
         *
         * @private
         */
        this.translateClone = function () {
            var deltaX,
                deltaY;

            deltaX = this.moveX - this.startX;
            deltaY = this.moveY - this.startY;
            this.clone.style.webkitTransform = 'translate3d(' + deltaX + 'px, ' + deltaY + 'px, 0px)';
            this.clone.style.mozTransform = 'translate3d(' + deltaX + 'px, ' + deltaY + 'px, 0px)';
            //IE9 contains only 2-D transform
            this.clone.style.msTransform = 'translate(' + deltaX + 'px, ' + deltaY + 'px)';
            this.clone.style.transform = 'translate3d(' + deltaX + 'px, ' + deltaY + 'px, 0px)';

            this.log('translateClone (' + deltaX + ', ' + deltaY + ')');
        };

        /**
         * Scroll while dragging if needed
         *
         * @private
         */
        this.dragAndScroll = function () {
            var
            /*
             * Indicates how much pixels of draggable element are overflowing in a vertical axis.
             * When deltaY is negative - content should be scrolled down,
             * when deltaY is positive - content should be scrolled up,
             * when deltaY is zero - content should not be scrolled
             */
                deltaY,
            /*
             * Duration of scrolling animation in milliseconds.
             * Greater value makes scroll faster, lower values - smoother
             */
                duration,
                style,
                that = this;

            function startAnimation() {
                style.webkitTransition = '-webkit-transform ' + duration + 'ms linear';
                style.transition = 'transform ' + duration + 'ms linear';
                style.mozTransition = '-moz-transform ' + duration + 'ms linear';
                style.msTransition = '-ms-transform ' + duration + 'ms linear';
                style.webkitTransform = 'translate(0px, ' + deltaY + 'px) scale(1) translateZ(0px)';
                style.mozTransform = 'translate(0px, ' + deltaY + 'px) scale(1) translateZ(0px)';
                style.msTransform = 'translate(0px, ' + deltaY + 'px) scale(1) translateZ(0px)';
                style.transform = 'translate(0px, ' + deltaY + 'px) scale(1) translateZ(0px)';
            }

            function clearAnimation() {
                style.webkitTransition = '';
                style.mozTransition = '';
                style.msTransition = '';
                style.transition = '';
                style.webkitTransform = '';
                style.mozTransform = '';
                style.msTransform = '';
                style.transform = '';
                that.wrapper.scrollTop -= deltaY;
            }

            function getDeltaY() {
                var rect,
                    delta;

                if (that.clone) {
                    rect = that.clone.getBoundingClientRect();

                    // Up
                    delta = that.wrapperRect.top - rect.top;
                    if (delta > 0) {
                        return delta;
                    }

                    // Down
                    delta = that.wrapper.offsetTop + that.wrapper.offsetHeight - (rect.top + that.clone.offsetHeight);
                    if (delta < 0) {
                        return delta;
                    }
                }
                return 0;
            }

            function isScrollPossible() {
                //Down
                if (deltaY < 0) {
                    //Calculate the difference between (document - wrapper) and (difference between : document - wrapper + container height + wrapper height )
                    return that.wrapper.getBoundingClientRect().top - (that.container.getBoundingClientRect().top + that.container.offsetHeight) + that.wrapper.offsetHeight < 0;
                }
                //Up
                //Calculate the difference between (document - wrapper) and (document - container + container.top)
                return that.container.getBoundingClientRect().top - (that.wrapper.getBoundingClientRect().top + that.container.offsetTop) < 0;
            }

            function start() {
                startAnimation();
                that.dragAndScrollTimer = setTimeout(function() {
                    clearAnimation();
                    that.dragAndScrollTimer = undefined;
                    if ((deltaY = getDeltaY()) !== 0 && isScrollPossible()) {
                        start();
                    }
                    that.scrollCallback();
                }, duration);
            }

            deltaY = getDeltaY();
            if (deltaY !== 0 && !this.dragAndScrollTimer && isScrollPossible()) {
                duration = this.dragAndScrollDuration;
                //in IE when reaching the drag and scroll we lose the ref to this.scrollContainer
                this.scrollContainer = this.scrollContainer || document.querySelector(this.scrollContainerSelector);
                style = this.scrollContainer.style;
                start();
            }

            this.log('dragAndScroll (' + deltaY + ')');

            return (deltaY != 0) && isScrollPossible();
        };

        this.moveDraggableVerticalOnly = function() {
            var hoverElement,
                isVerticalIntersection,
                rect,
                movedElementPositionAboveMiddle = true;

            this.forEach(this.draggable, function(item, index) {
                /*
                 * There is no way to break native forEach,
                 * so just speed it up using fast check
                 * before executing expensive DOM manipulations
                 */
                if (!hoverElement) {
                    rect = item.getBoundingClientRect();
                    isVerticalIntersection = !(rect.bottom < this.moveY || rect.top > this.moveY);
                    if (isVerticalIntersection) {
                        hoverElement = item;

                        // Check if the moved object is currently above of below the middle of the hover element
                        // (rect.top + rect.height/2) => is the middle point of the hover element
                        if (rect.top + rect.height / 2 < this.moveY){
                            movedElementPositionAboveMiddle = false;
                        }
                    }
                }
            }.bind(this));
            if (hoverElement && this.element !== hoverElement) {

                /*
                 * Reorder draggable elements
                 */
                if (movedElementPositionAboveMiddle) {
                    this.insertBefore(this.draggable, this.element, hoverElement);
                    hoverElement.parentNode.insertBefore(this.element, hoverElement);

                }else {
                    this.insertBefore(this.draggable, this.element, hoverElement.nextSibling);
                    hoverElement.parentNode.insertBefore(this.element, hoverElement.nextSibling);
                }

                this.lastMoveX = this.moveX;
                this.lastMoveY = this.moveY;

            }

            this.log('moveDraggableVerticalonly');
        };

        /**
         * Move draggable element forward and backward
         * across another draggable elements
         *
         * @private
         */
        this.moveDraggable = function(moveX, moveY) {
            var elementIndex,
                hoverElement,
                hoverElementIndex,
                isHorizontalIntersection,
                isVerticalIntersection,
                rect;

            this.forEach(this.draggable, function(item, index) {
                /*
                 * There is no way to break native forEach,
                 * so just speed it up using fast check
                 * before executing expensive DOM manipulations
                 */
                if (!hoverElement) {
                    rect = item.getBoundingClientRect();
                    //style = window.getComputedStyle(item);
                    isHorizontalIntersection = !(rect.right < this.moveX || rect.left > this.moveX);
                    isVerticalIntersection = !(rect.bottom < this.moveY || rect.top > this.moveY);
                    if (isHorizontalIntersection && isVerticalIntersection) {
                        hoverElement = item;
                        hoverElementIndex = index;
                    }
                }
            }.bind(this));

            if (hoverElement && this.element !== hoverElement) {

                /*
                 * Reorder draggable elements
                 */
                elementIndex = this.indexOf(this.draggable, this.element);
                //Check if there was enough movement in order to mover the element
                if (Math.abs(this.lastMoveX - this.moveX) >= this.moveTolerance || Math.abs(this.lastMoveY - this.moveY) >= this.moveTolerance) {
                    if (hoverElementIndex <= elementIndex) {
                        hoverElement.parentNode.insertBefore(this.element, hoverElement);
                        this.insertBefore(this.draggable, this.element, hoverElement);
                    } else if (hoverElementIndex  > elementIndex) {
                        hoverElement.parentNode.insertBefore(this.element, hoverElement.nextSibling);
                        this.insertBefore(this.draggable, this.element, this.draggable[hoverElementIndex + 1]);
                    }
                    this.lastMoveX = this.moveX;
                    this.lastMoveY = this.moveY;
                }
            }

            this.log('moveDraggable');
        };

        /* PUBLIC METHODS */

        /**
         * Enable feature
         *
         * @public
         */
        this.enable = function () {
            this.log('enable');
            //Touch Events
            this.root.addEventListener(this.touchStartEvent, this.startHandler, false);
            this.root.addEventListener(this.touchMoveEvent, this.moveHandler, true);
            this.root.addEventListener(this.touchEndEvent, this.endHandler, false);
            this.root.addEventListener(this.touchCancelEvent, this.endHandler, false);
            //Mouse Events
            this.root.addEventListener(this.mouseMoveEvent, this.moveHandler, true);
            this.root.addEventListener(this.mouseDownEvent, this.startHandler, false);
            this.root.addEventListener(this.mouseUpEvent, this.endHandler, false);
            //Additional Events
            this.root.addEventListener(this.contextMenuEvent, this.contextMenuHandler, false);
            this.root.addEventListener(this.clickEvent, this.clickHandler, true);
            this.root.addEventListener(this.defaultDragStartEvent, this.defaultDragStartHandler, true);
            this.wrapper.addEventListener(this.scrollEvent, this.scrollHandler, false);

            return this;
        };

        /**
         * Disable feature
         *
         * @public
         */
        this.disable = function () {
            this.log('disable');
            this.root.removeEventListener(this.touchStartEvent, this.startHandler, false);
            this.root.removeEventListener(this.touchMoveEvent, this.moveHandler, true);
            this.root.removeEventListener(this.touchEndEvent, this.endHandler, false);
            this.root.removeEventListener(this.mouseDownEvent, this.startHandler, false);
            this.root.removeEventListener(this.mouseMoveEvent, this.moveHandler, true);
            this.root.removeEventListener(this.mouseUpEvent, this.endHandler, false);
            this.root.removeEventListener(this.contextMenuEvent, this.contextMenuHandler, false);
            this.root.removeEventListener(this.clickEvent, this.clickHandler, true);
            this.root.removeEventListener(this.touchCancelEvent, this.endHandler, false);
            this.wrapper.removeEventListener(this.scrollEvent, this.scrollHandler, false);

            return this;
        };
        /*
         * Initialize dynamic feature state
         * and behaviour using configuration
         */
        this.init(cfg);

        /**
         * @public
         * @returns {{x: moveX, y: moveY}}
         */
        this.getMove = function () {
            return {x: this.moveX, y: this.moveY};
        };
    };
})();

}; // end of sap/ushell/UIActions.js
if ( !jQuery.sap.isDeclared('sap.ushell.UIActionsWin8') ) {
/*global jQuery*/
(function () {
    "use strict";
    function noop() {}

    var UIActionsWin8 = function () {
    };
    UIActionsWin8.prototype = {
        init: function (cfg) {
            this.cfg = cfg;
            this.forGroups = this.cfg.forGroups ||  false;
            this.wrapper = jQuery(cfg.wrapperSelector).get(0);
            this.container = jQuery(cfg.containerSelector).get(0);
            this.dragAndScrollCallback = cfg.dragAndScrollCallback || noop;
            this.dragAndScrollDuration = 100;
            this.dragCallback = cfg.dragCallback || noop;
            this.draggableSelector = cfg.draggableSelector;
            this.endCallback = typeof cfg.endCallback === 'function' ? cfg.endCallback : noop;
            this.placeHolderClass = cfg.placeHolderClass || "";
            this.$root = jQuery(cfg.rootSelector);
            this.startCallback = typeof cfg.startCallback === 'function' ? cfg.startCallback : noop;
            this.onDragStartUIHandler = typeof cfg.onDragStartUIHandler === 'function' ? cfg.onDragStartUIHandler : noop;
            this.onDragEndUIHandler = typeof cfg.onDragEndUIHandler === 'function' ? cfg.onDragEndUIHandler : noop;
            this._publishAsync = typeof cfg._publishAsync === 'function' ? cfg._publishAsync : noop;
        },
        enable: function () {
            if (this.enabled) {
                return this;
            }
            this.enabled = true;
            this.$root.
                on('dragstart', this.draggableSelector, this, this.dragStartHandler).
                on('dragend', this.draggableSelector, this, this.dragEndHandler);
            return this;
        },
        disable: function disable () {
            this.enabled = false;
            this.$root.
                off('dragstart', this.draggableSelector).
                off('dragend', this.draggableSelector);
            return this;
        },
        dragLeaveHandler: function (e) {
            var containerTransform = window.getComputedStyle(e.data.container).transform;
            e.data.container.style.transform = containerTransform;
            e.data.container.style.transition = '';

            var transformY;
            var transformParamsArr = containerTransform.split(",");
            if (containerTransform.substr(0, 8) == "matrix3d") {
                transformY = parseInt(transformParamsArr[13], 10);
            } else if (containerTransform.substr(0, 6) == "matrix") {
                transformY = parseInt(transformParamsArr[5], 10);
            }
            if (isNaN(transformY)) {
                return;
            }
            e.data.container.style.transform = "none";
            e.data.wrapper.scrollTop += ~transformY + 1;

        },
        dragEnterHandler: function dragEnterHandler(evt) {
            if (evt.target == evt.data.$bottomScroller.get(0)) {
                evt.data.startScroll("down");
            }
            if (evt.target == evt.data.$topScroller.get(0)) {
                evt.data.startScroll("up");
            }
        },
        startScroll: function(direction) {
            var leftToScroll;
            if (direction == "up") {
                leftToScroll = this.wrapper.scrollTop;
                if (leftToScroll <= 0) {
                    return;
                }

            } else {
                leftToScroll = this.wrapper.scrollHeight - this.wrapper.offsetHeight - this.wrapper.scrollTop;
                if (leftToScroll <= 0) {
                    return;
                }
            }
            var scrollTime = leftToScroll * 3;
            var translateY = (direction == "up") ? leftToScroll : ~leftToScroll + 1;
            this.container.style.transition = 'transform ' + scrollTime + 'ms linear';
            this.container.style.transform = 'translate(0px, ' + translateY + 'px) scale(1) translateZ(0px)';
        },
        initScrollRegions: function () {
            this.$topScroller = jQuery("<div class='UiActionsTopScroller' style='position:absolute; top: 0; height: 70px; left:0; right:0;'></div>");
            this.$bottomScroller = jQuery("<div class='UiActionsBottomScroller' style='position:absolute; bottom: 0; height: 70px; left:0; right:0;'></div>");
            jQuery(document.body).append(this.$topScroller).append(this.$bottomScroller);
            this.$topScroller.add(this.$bottomScroller).on('dragenter', this, this.dragEnterHandler).on('dragleave', this, this.dragLeaveHandler);
        },
        removeScrollRegions: function () {
            jQuery('.UiActionsTopScroller, .UiActionsBottomScroller').remove();
        }
    };


    function GroupsDragAndDrop (cfg) {
        this.init(cfg);
    }
    GroupsDragAndDrop.prototype = new UIActionsWin8();
    jQuery.extend(GroupsDragAndDrop.prototype, {
        dragOverTimeout: null,
        dragStartHandler: function (evt) {
            var _that = evt.data;

            if (sap.ui.Device.system.phone) {
                _that.$root.find(".sapUshellTilesContainer-sortable").addClass("sapUshellTileContainerRemoveContent");
                _that.$root.find(".sapUshellTileContainerBeforeContent").addClass("sapUshellTileContainerRemoveContent");
                _that.$root.find(".sapUshellContainerHeaderActions").addClass("sapUshellTileContainerHidden");
            } else {
                _that.$root.find(".sapUshellTileContainerBeforeContent").addClass("sapUshellTileContainerHidden");
            }

            _that.$originalElement = jQuery(evt.target).closest(".sapUshellDashboardGroupsContainerItem");
            _that.originalIndex = _that.$originalElement.index();
            _that.$element = _that.$originalElement.clone().css("display", "none").addClass('sapUshellDashboardGroupsContainerItem-placeholder');
            _that.$element.insertAfter(_that.$originalElement);
            _that.$originalElement.addClass("sapUshellDashboardGroupsContainerItem-orignal");
            _that.$root.find('.sapUshellTileContainerAfterContent').last().addClass("sapUshellTileContainerRemoveContent");

            _that.initScrollRegions();

            setTimeout(function () {
                _that.$originalElement.css("display", "none");
                _that.$element.css("display", "block");
            }, 0);
            _that.$root.on('dragover', ".sapUshellDashboardGroupsContainerItem:not(.sapUshellDisableDragAndDrop)", _that, _that.dragOverHandler);
        },
        dragEndHandler: function (evt) {
            var _that = evt.data;
            _that.removeScrollRegions();
            _that.$root.off('dragover', ".sapUshellDashboardGroupsContainerItem:not(.sapUshellDisableDragAndDrop)");

            _that.$root.find(".sapUshellTilesContainer-sortable").removeClass("sapUshellTileContainerRemoveContent");
            _that.$root.find(".sapUshellTileContainerBeforeContent").removeClass("sapUshellTileContainerRemoveContent");
            _that.$root.find(".sapUshellContainerHeaderActions").removeClass("sapUshellTileContainerHidden");
            _that.$root.find(".sapUshellTileContainerBeforeContent").removeClass("sapUshellTileContainerHidden");


            _that.$element.replaceWith(_that.$originalElement);
            var nNewIndex = _that.$originalElement.index();
            _that.$originalElement.css('display', 'block').removeClass("sapUshellDashboardGroupsContainerItem-orignal");
            var oBus = sap.ui.getCore().getEventBus(),
                firstChildId = _that.$originalElement.children().eq(0).attr("id"),
                oGroup = sap.ui.getCore().byId(firstChildId),
                oDashboardGroups = sap.ui.getCore().byId("dashboardGroups"),
                oData = {group : oGroup, groupChanged : false, focus : false};

            oDashboardGroups.removeAggregation('groups', oGroup, true);
            oDashboardGroups.insertAggregation('groups', oGroup, nNewIndex, true);

            _that._publishAsync("launchpad", "moveGroup", {
                fromIndex  : _that.originalIndex,
                toIndex    : nNewIndex
            });

            window.setTimeout(jQuery.proxy(oBus.publish, oBus, "launchpad", "scrollToGroup", oData), 1);

        },
        dragOverHandler: function dragOverHandler(evt) {
            if (evt.data.dragOverTimeout) {
                return;
            }
            evt.data.dragOverTimeout = setTimeout(function () {
                evt.data.dragOverTimeout = null;
                var overElement = evt.currentTarget;
                if (evt.data.$element.get(0) === overElement) {
                    return;
                }
                var overAboveMiddle = evt.data.isOverAboveMiddle(overElement, evt.originalEvent.pageY);
                if (overElement === evt.data.overElement && overAboveMiddle === evt.data.overAboveMiddle) {
                    return;
                }
                evt.data.overElement = overElement;
                evt.data.overAboveMiddle = overAboveMiddle;
                evt.data.movePlaceholder(evt.data.$element, overElement, overAboveMiddle);
            },50);
        },
        isOverAboveMiddle: function (element, posY) {
            var movedElementPositionAboveMiddle = true;
            var rect = element.getBoundingClientRect();
            if (rect.top + rect.height / 2 < posY){
                movedElementPositionAboveMiddle = false;
            }
            return movedElementPositionAboveMiddle;
        },
        movePlaceholder: function (placeholder, element, insertBefore) {
            if (insertBefore) {
                jQuery(placeholder).insertBefore(jQuery(element));
            } else {
                jQuery(placeholder).insertAfter(jQuery(element));
            }
        }
    });



    function TilesDragAndDrop (cfg) {
        this.init(cfg);
    }
    TilesDragAndDrop.prototype = new UIActionsWin8();
    jQuery.extend(TilesDragAndDrop.prototype, {
        dragOverTimeout: null,
        dragStartHandler: function dragStartHandler(evt) {
            var _that = evt.data;

            _that.element = evt.target;

            _that.$root.
                on('dragover', _that.draggableSelector + ", .sapUshellTileContainer", _that, _that.dragOverHandler);

            var id = evt.target.getAttribute("id");
            _that.oTile = sap.ui.getCore().byId(id);

            if (_that.oTile.getParent().getIsGroupLocked() && _that.oTile.getParent().getDefaultGroup()) {
                _that.onDragStartUIHandler();
                evt.preventDefault();
                var mouseUpHandler = function mouseUpHandler() {
                    _that.onDragEndUIHandler();
                    document.removeEventListener("mouseup", mouseUpHandler);
                };
                document.addEventListener("mouseup", mouseUpHandler);
                return false;
            }

            _that.initScrollRegions();


            var $cloned = jQuery(evt.target).clone();
            $cloned.addClass(_that.placeHolderClass).css('z-index', "-1");
            var cloned = $cloned.get(0);
            _that.$cloned = $cloned;
            jQuery(evt.target).after($cloned);
            _that.getDomRefOriginal = _that.oTile.getDomRef;
            _that.oTile.getDomRef = function () {
                return cloned;
            };

            _that.startCallback(evt, _that.element);
            _that.onDragStartUIHandler();
            _that.dragCallback(evt, _that.element);
            setTimeout(function () {
                // add class with delay, otherwise it affects clone as well
                jQuery(evt.target).css("visibility", "hidden");
            }, 0);
        },
        dragEndHandler: function dragEndHandler(evt) {
            var _that = evt.data;
            _that.$root.off('dragover', _that.draggableSelector + ", .sapUshellTileContainer", _that.dragOverHandler);

            _that.removeScrollRegions();
            _that.oTile.getDomRef = _that.getDomRefOriginal;

            jQuery(_that.element).css('visibility', 'visible');
            _that.$cloned.remove();

            _that.endCallback(evt, _that.element);
            _that.onDragEndUIHandler();
            _that.element = null;
        },
        dragOverHandler: function dragOverHandler(evt) {
            if (evt.data.dragOverTimeout) {
                return;
            }
            evt.data.dragOverTimeout = setTimeout(function () {
                evt.data.dragOverTimeout = null;
                evt.data.overElement = this;
                evt.data.dragAndScrollCallback({
                    moveX: evt.originalEvent.pageX,
                    moveY: evt.originalEvent.pageY
                });
            },50);
        }
    });



    var UIActionsWin8Factory = {
        getInstance: function (cfg) {
            return cfg.forGroups ? new GroupsDragAndDrop(cfg) : new TilesDragAndDrop(cfg);
        }
    };



    // Export
    jQuery.sap.declare("sap.ushell.UIActionsWin8");
    sap.ushell.UIActionsWin8 = UIActionsWin8Factory;
}());
}; // end of sap/ushell/UIActionsWin8.js
if ( !jQuery.sap.isDeclared('sap.ushell.adapters.local.ClientSideTargetResolutionAdapter') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview The Unified Shell's ClientSideTargetResolutionAdapter for the local
 *               platform.
 *
 * @version
 * 1.32.6
 */
(function () {
    "use strict";
    /*jslint nomen: true*/
    /*global jQuery, sap, setTimeout */
    jQuery.sap.declare("sap.ushell.adapters.local.ClientSideTargetResolutionAdapter");

    /**
     * Constructs a new instance of the ClientSideTargetResolutionAdapter for the local
     * platform
     *
     * @param {object} oSystem
     *   The system served by the adapter
     * @param {string} sParameters
     *   Parameter string, not in use
     * @param {object} oConfig
     *   A potential adapter configuration
     *
     * @constructor
     * @since 1.32.0
     * @private
     */
    sap.ushell.adapters.local.ClientSideTargetResolutionAdapter = function (oSystem, sParameters, oConfig) {
        this._oConfig = oConfig && oConfig.config;
    };

    /**
     * Getter for the canonic Target Mapping responses
     *
     * @returns {object}
     *   A jQuery promise, whose done function receives the canonic Target Mappings as fist
     *   parameter
     *
     * @since 1.32.0
     * @private
     */
    sap.ushell.adapters.local.ClientSideTargetResolutionAdapter.prototype.getInbounds = function () {
        var oDeferred = new jQuery.Deferred();
//            oSrvc = sap.ushell.Container.getService("LaunchPage");
// TODO         oSrvc._getAdapter().readTargetMappingsCanonic().done(function(oCanonic) {
        oDeferred.resolve([]);
//        }).fail(oDeferred.reject.bind(oDeferred));
        return oDeferred.promise();
    };

}());

}; // end of sap/ushell/adapters/local/ClientSideTargetResolutionAdapter.js
if ( !jQuery.sap.isDeclared('sap.ushell.adapters.local.EndUserFeedbackAdapter') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview The EndUserFeedback adapter for the local platform.
 *
 * @version 1.32.6
 */
(function () {
    "use strict";
    /*global jQuery, sap, window, setTimeout*/
    jQuery.sap.declare("sap.ushell.adapters.local.EndUserFeedbackAdapter");
    jQuery.sap.require('jquery.sap.storage'); // unlisted dependency retained


    var bEnabledFromConfig;

    sap.ushell.adapters.local.EndUserFeedbackAdapter = function (oSystem, sParameter, oAdapterConfiguration) {
        var sSESSION_STORAGE_KEY = "com.sap.ushell.adapters.local.EndUserFeedback";

        // constructor below

        /**
         * Create a feedback and store in Session Storage
         *
         * @param {JSON} oFeedbackObject
         * JSON object containing the input fields required for the support ticket
         */
        this.sendFeedback = function (oFeedbackObject) {
            var oDeferred,
                oSessionStorage,
                iNrOfFeedbacks;

            iNrOfFeedbacks = 333;
            oDeferred = new jQuery.Deferred();

            setTimeout(function () {
                oSessionStorage = jQuery.sap.storage(jQuery.sap.storage.Type.session, sSESSION_STORAGE_KEY);
                if (oSessionStorage.put(iNrOfFeedbacks, JSON.stringify(oFeedbackObject)) === true) {
                    jQuery.sap.log.info("User Feedback " + JSON.stringify(oFeedbackObject) + " has been sent.");
                    oDeferred.resolve(iNrOfFeedbacks);
                } else {
                    oDeferred.reject("Failed to save end user feedback");
                }
            }, 0);

            return oDeferred.promise();
        };

        this.getLegalText = function () {
            var oDeferred, sLegalText;

            sLegalText = "This is the legal text \n in the users language.\n with multiple line breaks.";
            oDeferred = new jQuery.Deferred();

            setTimeout(function () {
                jQuery.sap.log.info("Legal text " + sLegalText + " for user feedback dialog has been sent.");
                oDeferred.resolve(sLegalText);

            }, 0);

            return oDeferred.promise();
        };

        /**
         * Checks if the service is enabled.
         * <p>
         * The service is only enabled if getLegalText can be invoked and returns a valid response
         *
         * @return {object} promise, for the local adapter always resolved
         *
         * @public
         * @since 1.25.1
         */
        this.isEnabled = function () {
            var oDeferred = new jQuery.Deferred();
            setTimeout(function () {
                if (bEnabledFromConfig) {
                    oDeferred.resolve();
                } else {
                    oDeferred.reject();
                }
            }, 0);
            return oDeferred.promise();
        };

        // Constructor
        bEnabledFromConfig = jQuery.sap.getObject("config.enabled", undefined, oAdapterConfiguration);
        if (bEnabledFromConfig === undefined) {
            bEnabledFromConfig = true; // default is true
        }
    };
}());

}; // end of sap/ushell/adapters/local/EndUserFeedbackAdapter.js
if ( !jQuery.sap.isDeclared('sap.ushell.adapters.local.LaunchPageAdapter') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview The Unified Shell's page builder adapter for the 'demo' platform.
 *
 * @version 1.32.6
 */
(function () {
    "use strict";
    /*global jQuery, sap, window, OData, hasher */
    jQuery.sap.declare("sap.ushell.adapters.local.LaunchPageAdapter");

    jQuery.sap.require('sap.m.Text'); // unlisted dependency retained


    /**
     * This method MUST be called by the Unified Shell's container only.
     * Constructs a new instance of the page builder adapter for the 'demo' platform.
     *
     * @param {object} oSystem
     *     the system served by the adapter
     *
     * @class The Unified Shell's page builder adapter for the 'demo' platform.
     *
     * @constructor
     * @see sap.ushell.services.LaunchPage
     * @since 1.15.0
     */
    sap.ushell.adapters.local.LaunchPageAdapter = function (oUnused, sParameter, oAdapterConfiguration) {
        var aConfigGroups = jQuery.extend(true, [], oAdapterConfiguration.config.groups),
            aConfigCatalogs = oAdapterConfiguration.config.catalogs || [],
            //possibility to fail in percent
            iFailRate = 0,
            //getTileView async rate
            iGetTileViewAsyncRate = 10,
            //artificial minimal time needed for request in ms
            iMinRequestTime = 10,
            //artificial maximum of additional time for request in ms (random)
            iMaxRequestTime = 10,
            i18nModel,
            i18n,
            defaultGroup = aConfigGroups[0];

        this.TileType = {
            Tile : "tile",
            Link: "link"
        };

        if (!i18nModel && oAdapterConfiguration.config.pathToLocalizedContentResources) {
            jQuery.sap.require("sap.ui.model.resource.ResourceModel");

            i18nModel = new sap.ui.model.resource.ResourceModel({
                bundleUrl : oAdapterConfiguration.config.pathToLocalizedContentResources,
                bundleLocale : sap.ui.getCore().getConfiguration().getLanguage()
            });

            i18n = i18nModel.getResourceBundle();
        }

        function _getTextLocalized(sKey) {
            if (i18n) {
                return i18n.getText(sKey);
            }

            return sKey;
        }

        jQuery.each(aConfigCatalogs, function (index, oCatTiles) {
            if (i18n) {
                oCatTiles.title = _getTextLocalized(oCatTiles.title);
            }
            jQuery.each(oCatTiles.tiles, function (index, oTile) {
                oTile.getTitle = function () {
                    return oTile.title;
                };
            });
        });

        jQuery.each(aConfigGroups, function (index, oGroup) {
            if (i18n) {
                oGroup.title =  _getTextLocalized(oGroup.title);
            }

            jQuery.each(oGroup.tiles, function (index, oTile) {
                handleTileServiceCall(oTile, true);
            });
        });

        function getSimulateFail() {
            return (100 * Math.random()) < iFailRate;
        }

        function getTileViewAsync() {
            return (100 * Math.random()) < iGetTileViewAsyncRate;
        }

        function getRequestTime() {
            return iMinRequestTime + iMaxRequestTime * Math.random();
        }

        function indexOfTile(oGroup, oTile) {
            var index;
            for (index = 0; index < oGroup.tiles.length; index = index + 1) {
                if (oTile.id === oGroup.tiles[index].id) {
                    return index;
                }
            }
            return -1;
        }

        function indexOfGroup(aGroups, oGroup) {
            var index;
            for (index = 0; index < aGroups.length; index = index + 1) {
                if (oGroup.id === aGroups[index].id) {
                    return index;
                }
            }
            return -1;
        }

        /**
         * Reloads an existing group in order to get its existing state in the backend
         *
         * @param {object} the group that should be reloaded
         * @return {jQuery.promise}
         */
        function reloadGroup(oGroup) {
            var oDfd = jQuery.Deferred();

            //Simulate an async function
            window.setTimeout(function () {
                // Simulates a success call (the done function of the promise will be called).
                //Return the given group
                oDfd.resolve(oGroup);

                // TODO: simulate a failure (which will trigger the fail function of the promise)
                //oDfd.reject();
            }, getRequestTime());

            return oDfd.promise();
        }

        function handleTileServiceCall(oTile, bNewVisible){
            if (oTile.tileType !== 'sap.ushell.ui.tile.DynamicTile'
                || !oTile.properties || !oTile.properties.serviceUrl){
                return;
            }

            if (oTile.intervalTimer){
                clearInterval(oTile.intervalTimer);
                oTile.intervalTimer = undefined;
            }

            if (bNewVisible){
                var serviceRefreshInterval = oTile.properties.serviceRefreshInterval;
                if (serviceRefreshInterval){
                    //interval is configured in seconds, therefore we need to convert it to milliseconds
                    serviceRefreshInterval = serviceRefreshInterval * 1000;
                } else {
                    //default interval is 10 seconds
                    serviceRefreshInterval = 10000;
                }
                oTile.intervalTimer = setInterval(function(){
                    OData.read(
                        oTile.properties.serviceUrl + '?id=' + oTile.id + '&t=' + new Date().getTime(),
                        function (oResult) {
                            jQuery.sap.log.debug('Dynamic tile service call succeed for tile ' + oTile.id);
                        },
                        function (sMessage) {
                            jQuery.sap.log.debug('Dynamic tile service call failed for tile ' + oTile.id + ', error message:' + sMessage);
                        });
                }, serviceRefreshInterval);
            }
        }

        this.getGroups = function () {
            var oDfd = jQuery.Deferred();

            //Simulate an async function
            window.setTimeout(function () {
                // Simulates a success call (the done function of the promise will be called)
                //do not pass a reference to the local array of groups
                oDfd.resolve(aConfigGroups.slice(0));

                // TODO: simulate a failure (which will trigger the fail function of the promise)
                //oDfd.reject();
            }, getRequestTime());

            return oDfd.promise();
        };

        /**
         * Returns the default group. This is an asynchronous function using a jQuery.Promise.
         * In case of success its <code>done</code> function is called and gets the
         * <code>sap.ui2.srvc.Page</code> object representing the default group.
         *
         * In case of error the promise's <code>fail</code> function is called.
         *
         * @returns {object}
         *  jQuery.Promise object.
         * @since 1.11.0
         * @public
         */
        this.getDefaultGroup = function () {
            var oDeferred = new jQuery.Deferred();

            oDeferred.resolve(defaultGroup);
            return oDeferred.promise();
        };

        this.addGroup = function (sTitle) {
            var oDfd = jQuery.Deferred(),
                bFail = getSimulateFail(),
                that = this;

            //Simulate an async function
            window.setTimeout(function () {
                if (!bFail) {
                    var newGroup = {
                        id: "group_" + aConfigGroups.length,
                        title: sTitle,
                        tiles: []
                    };
                    aConfigGroups.push(newGroup);
                    // Simulates a success call (the done function of the promise will be called)
                    oDfd.resolve(newGroup);
                } else {
                    //In case adding a new group fails, load the existing groups from the server
                    that.getGroups()
                        .done(function (oExistingGroups) {
                            //Use the reject function in order to specify that an error has occurred.
                            //Pass the existing groups that we got from the server to the reject function
                            oDfd.reject(oExistingGroups);
                        })
                        .fail(function () {
                            //In case loading the existing groups also fails, call the reject function with no parameters.
                            //TODO: what should the UI do in that case? leave the groups as is or delete all groups from page?
                            oDfd.reject();
                        });
                }
            }, getRequestTime());

            return oDfd.promise();
        };

        this.getGroupTitle = function (oGroup) {
            return oGroup.title;
        };

        this.setGroupTitle = function (oGroup, sNewTitle) {
            var oDfd = jQuery.Deferred(),
                bFail = getSimulateFail();

            //Simulate an async function
            window.setTimeout(function () {
                if (!bFail) {
                    // Simulates a success call (the done function of the promise will be called)
                    oGroup.title = sNewTitle;
                    oDfd.resolve();
                } else {
                    //In case setting group's title fails, reload the existing groups from the server
                    reloadGroup(oGroup)
                        .done(function (oExistingGroup) {
                            //Use the reject function in order to specify that an error has occurred.
                            //Pass the existing group's title that we got from the server to the reject function
                            oDfd.reject(oExistingGroup.title);
                        })
                        .fail(function () {
                            //In case loading the existing group also fails, call the reject function with no parameters.
                            //TODO: what should the UI do in that case? leave the group as is or pass the title that we have from the oGroup parameter?
                            oDfd.reject();
                        });
                }
            }, getRequestTime());
            return oDfd.promise();
        };

        this.getGroupId = function (oGroup) {
            return oGroup.id;
        };

        this.hideGroups = function(aHiddenGroupsIDs){
            if (aHiddenGroupsIDs && aConfigGroups){
                for (var i = 0; i < aConfigGroups.length; i++){
                    if (aHiddenGroupsIDs.indexOf(aConfigGroups[i].id) != -1){
                        aConfigGroups[i].isVisible = false;
                    } else {
                        aConfigGroups[i].isVisible = true;
                    }
                }
            }
            return jQuery.Deferred().resolve();
        };

        this.isGroupVisible = function (oGroup){
            return oGroup && (oGroup.isVisible === undefined ? true : oGroup.isVisible); //Add default value for newly created group, otherwise it will be hidden by default.
        };

        this.moveGroup = function (oGroup, newIndex) {
            var oDfd = jQuery.Deferred(),
                bFail = getSimulateFail(),
                that = this;

            //Simulate an async function
            window.setTimeout(function () {
                if (!bFail) {
                    // Simulates a success call (the done function of the promise will be called)
                    aConfigGroups.splice(newIndex, 0, aConfigGroups.splice(indexOfGroup(aConfigGroups, oGroup), 1)[0]);
                    oDfd.resolve();
                } else {
                    // TODO: simulate a failure (which will trigger the fail function of the promise)
                    //In case moving a group fails, load the existing groups from the server
                    that.getGroups()
                        .done(function (oExistingGroups) {
                            //Use the reject function in order to specify that an error has occurred.
                            //Pass the existing groups that we got from the server to the reject function
                            oDfd.reject(oExistingGroups);
                        })
                        .fail(function () {
                            //In case loading the existing groups also fails, call the reject function with no parameters.
                            //TODO: what should the UI do in that case? leave the groups as is or delete all groups from page?
                            oDfd.reject();
                        });
                }
            }, getRequestTime());

            return oDfd.promise();
        };

        this.removeGroup = function (oGroup) {
            var oDfd = jQuery.Deferred(),
                bFail = getSimulateFail(),
                that = this;

            //Simulate an async function
            window.setTimeout(function () {
                if (!bFail) {
                    // Simulates a success call (the done function of the promise will be called)
                    aConfigGroups.splice(indexOfGroup(aConfigGroups, oGroup), 1);
                    jQuery.each(oGroup.tiles, function (index, oTile) {
                        handleTileServiceCall(oTile, false);
                    });
                    oDfd.resolve();
                } else {
                    //In case removing a group fails, load the existing groups from the server
                    that.getGroups()
                        .done(function (oExistingGroups) {
                            //Use the reject function in order to specify that an error has occurred.
                            //Pass the existing groups that we got from the server to the reject function
                            oDfd.reject(oExistingGroups);
                        })
                        .fail(function () {
                            //In case loading the existing groups also fails, call the reject function with no parameters.
                            //TODO: what should the UI do in that case? leave the groups as is or delete all groups from page?
                            oDfd.reject();
                        });
                }
            }, getRequestTime());

            return oDfd.promise();
        };

        this.resetGroup = function (oGroup) {
            var oDfd = jQuery.Deferred(),
                bFail = getSimulateFail(),
                that = this;

            //Simulate an async function
            window.setTimeout(function () {
                if (!bFail) {
                    jQuery.each(oGroup.tiles, function (index, oTile) {
                        handleTileServiceCall(oTile, false);
                    });
                    //Simulates a success call (the done function of the promise will be called)
                    //get the preset definition of the group
                    oGroup = jQuery.extend(true, {}, oAdapterConfiguration.config.groups[indexOfGroup(oAdapterConfiguration.config.groups, oGroup)]);
                    //replace the old group => indexOfGroup compares IDs, so use of original oGroup is valid
                    aConfigGroups.splice(indexOfGroup(aConfigGroups, oGroup), 1, oGroup);

                    jQuery.each(oGroup.tiles, function (index, oTile) {
                        handleTileServiceCall(oTile, true);
                    });
                    oDfd.resolve(oGroup);
                } else {
                    //In case removing a group fails, load the existing groups from the server
                    that.getGroups()
                        .done(function (oExistingGroups) {
                            //Use the reject function in order to specify that an error has occurred.
                            //Pass the existing groups that we got from the server to the reject function
                            oDfd.reject(oExistingGroups);
                        })
                        .fail(function () {
                            //In case loading the existing groups also fails, call the reject function with no parameters.
                            //TODO: what should the UI do in that case? leave the groups as is or delete all groups from page?
                            oDfd.reject();
                        });
                }
            }, getRequestTime());

            return oDfd.promise();
        };

        this.isGroupRemovable = function (oGroup) {
            return oGroup && !oGroup.isPreset;
        };

        this.isGroupLocked = function(oGroup) {
            return oGroup.isGroupLocked;
        };

        this.getGroupTiles = function (oGroup) {
            return oGroup.tiles;
        };

        this.getLinkTiles = function (oGroup) {
            return oGroup.links;
        };

        this.getTileTitle = function (oTile) {
            return oTile.title;
        };

        this.getTileType = function (oTile) {
            if (oTile.isLink) {
                return this.TileType.Link;
            }

            return this.TileType.Tile;
        };

        this.getTileId = function (oTile) {
            return oTile.id;
        };

        this.getTileSize = function (oTile) {
            return oTile.size;
        };

        this.getTileTarget = function (oTile) {
            return oTile.target_url || "";
        };

        this.isTileIntentSupported = function(oTile) {
            if (oTile && oTile.properties && oTile.properties.formFactor) {
                var formFactor = oTile.properties.formFactor;

                var oSystem = sap.ui.Device.system;

                var currentDevice;
                if (oSystem.desktop) {
                    currentDevice = "Desktop";
                } else if (oSystem.tablet) {
                    currentDevice = "Tablet";
                } else if (oSystem.phone) {
                    currentDevice = "Phone";
                }

                if (formFactor.indexOf(currentDevice) === -1) {
                    return false;
                }
            }

            return true;
        };

        this.getTileView = function (oTile) {
            var oDfd = jQuery.Deferred(),
                bFail = getSimulateFail(),
                that = this;

            if (getTileViewAsync()){
                //Simulate an async function
                window.setTimeout(function () {
                    if (!bFail) {
                        oDfd.resolve(that._getTileView(oTile));
                    } else {
                        oDfd.reject();
                    }
                }, getRequestTime());
            } else {
                if (!bFail) {
                    oDfd.resolve(that._getTileView(oTile));
                } else {
                    oDfd.reject();
                }
            }

            return oDfd.promise();
        };

        this._getTileView = function (oTileData) {
            var sError = 'unknown error',
                ViewPrototype, oTileUI,
                bIsLink = this.getTileType(oTileData) === "link";

            this._translateTileProperties(oTileData);
            if (oTileData.namespace && oTileData.path && oTileData.moduleType) {
                jQuery.sap.registerModulePath(oTileData.namespace, oTileData.path);
                if (oTileData.moduleType === "UIComponent") {
                    oTileUI = new sap.ui.core.ComponentContainer({
                        component: sap.ui.getCore().createComponent({
                            componentData: {
                                properties: oTileData.properties
                            },
                            name: oTileData.moduleName
                        })
                    });
                } else {
                    //XML, JSON, JS, HTML view
                    oTileUI = sap.ui.view({
                        viewName: oTileData.moduleName,
                        type: sap.ui.core.mvc.ViewType[oTileData.moduleType],
                        viewData: {
                            properties: oTileData.properties
                        }
                    });
                }
                return oTileUI;
            } else if (oTileData.tileType) {
                // SAPUI5 MVC for the standard Static or dynamic tiles
                jQuery.sap.require(bIsLink ? "sap.m.Link" : oTileData.tileType);
                ViewPrototype = jQuery.sap.getObject(bIsLink ? "sap.m.Link" : oTileData.tileType);
                var url = oTileData.properties.targetURL || oTileData.properties.href;

                if (ViewPrototype) {
                    try {
                        if (url){
                            // url may contain binding chars such as '{' and '}' for example in search result app
                            // to avoid unwanted property binding we are setting the url as explicitly
                            // fix csn ticket: 1570026529
                            delete oTileData.properties.targetURL;
                            delete oTileData.properties.href;
                            oTileUI = new ViewPrototype(oTileData.properties || {});
                            if (bIsLink) {
                                oTileUI.setHref(url);
                                oTileData.properties.href = url;
                            } else {
                                oTileUI.setTargetURL(url);
                                oTileData.properties.targetURL = url;
                            }
                        } else {
                            oTileUI = new ViewPrototype(oTileData.properties || {});
                        }
                        this._handleTilePress(oTileUI);
                        return oTileUI;
                    } catch (e) {
                        return new sap.m.Text({
                            width : "100%",
                            text : (e && (e.name + ": " + e.message)) || "Unknown error while loading Catalog Tile view."
                        });
                    }
                } else {
                    sError = 'TileType: ' + oTileData.tileType + ' not found!';
                }
            } else {
                sError = 'No TileType defined!';
            }
            return new sap.m.Text({
                width : "100%",
                text: sError
            });
        };

        this._handleTilePress = function (oTileControl) {
            if (typeof oTileControl.attachPress === 'function'){
                oTileControl.attachPress(function(){
                    if (typeof oTileControl.getTargetURL === 'function'){
                        var sTargetURL = oTileControl.getTargetURL();
                        if (sTargetURL){
                            if (sTargetURL[0] === '#'){
                                hasher.setHash(sTargetURL);
                            } else {
                                window.open(sTargetURL, '_blank');
                            }
                        }
                    }
                });
            }
        };

        this._translateTileProperties = function(oTileData) {
            //translation.
            if (i18n) {
                if (!oTileData.properties.isTranslated) {
                    oTileData.properties.title = _getTextLocalized(oTileData.properties.title);
                    oTileData.properties.subtitle = _getTextLocalized(oTileData.properties.subtitle);
                    oTileData.properties.info = _getTextLocalized(oTileData.properties.info);

                    if (oTileData.properties.keywords) {
                        for (var keyIdex = 0; keyIdex < oTileData.properties.keywords.length; keyIdex++) {
                            oTileData.properties.keywords[keyIdex] = _getTextLocalized(oTileData.properties.keywords[keyIdex]);
                        }
                    }
                    oTileData.properties.isTranslated = true;
                }
            }
        };

        this.refreshTile = function (oTile) {
            //nothing to do here for the moment as we don't have dynamic data
        };

        this.setTileVisible = function (oTile, bNewVisible) {
            handleTileServiceCall(oTile, bNewVisible);
        };

        this.addTile = function (oCatalogTile, oGroup) {
            if (!oGroup) {
                oGroup = defaultGroup;
            }

            var oDfd = jQuery.Deferred(),
                bFail = getSimulateFail(),
                that = this;

            //Simulate an async function
            window.setTimeout(function () {
                if (!bFail) {
                    var newTile = jQuery.extend(true, {
                        title: "A new tile was added",
                        size: "1x1"
                    }, oCatalogTile, {
                        id: "tile_0" + oCatalogTile.chipId
                    });

                    oGroup.tiles.push(newTile);
                    handleTileServiceCall(newTile, true);
                    // Simulates a success call (the done function of the promise will be called)
                    oDfd.resolve(newTile);
                } else {
                    //In case adding a tile fails, load the existing groups from the server
                    that.getGroups()
                        .done(function (oExistingGroups) {
                            //Use the reject function in order to specify that an error has occurred.
                            //Pass the existing groups that we got from the server to the reject function
                            oDfd.reject(oExistingGroups);
                        })
                        .fail(function () {
                            //In case loading the existing group also fails, call the reject function with no parameters.
                            //TODO: what should the UI do in that case?
                            oDfd.reject();
                        });
                }
            }, getRequestTime());

            return oDfd.promise();
        };

        this.removeTile = function (oGroup, oTile) {
            var oDfd = jQuery.Deferred(),
                bFail = getSimulateFail(),
                that = this;

            //Simulate an async function
            window.setTimeout(function () {
                if (!bFail) {
                    // Simulates a success call (the done function of the promise will be called)
                    oGroup.tiles.splice(indexOfTile(oGroup, oTile), 1);
                    handleTileServiceCall(oTile, false);
                    oDfd.resolve();
                } else {
                    //In case removing a tile fails, load the existing groups from the server
                    that.getGroups()
                        .done(function (oExistingGroups) {
                            //Use the reject function in order to specify that an error has occurred.
                            //Pass the existing groups that we got from the server to the reject function
                            oDfd.reject(oExistingGroups);
                        })
                        .fail(function () {
                            //In case loading the existing group also fails, call the reject function with no parameters.
                            //TODO: what should the UI do in that case?
                            oDfd.reject();
                        });
                }
            }, getRequestTime());

            return oDfd.promise();
        };

        this.moveTile = function (oTile, sourceIndex, targetIndex, oSourceGroup, oTargetGroup) {
            var oDfd = jQuery.Deferred(),
                bFail = getSimulateFail(),
                that = this;

            //Simulate an async function
            window.setTimeout(function () {
                if (!bFail) {
                    if (oTargetGroup === undefined) {
                        //Move a tile in the same group
                        oTargetGroup = oSourceGroup;
                    }

                    oSourceGroup.tiles.splice(sourceIndex, 1);
                    oTargetGroup.tiles.splice(targetIndex, 0, oTile);

                    // Simulates a success call (the done function of the promise will be called)
                    oDfd.resolve(oTile);
                } else {
                    //In case moving a tile fails, reload the groups from the server
                    that.getGroups()
                        .done(function (oExistingGroups) {
                            //Use the reject function in order to specify that an error has occurred.
                            //Pass the existing groups that we got from the server to the reject function
                            oDfd.reject(oExistingGroups);
                        })
                        .fail(function () {
                            //In case loading the existing group also fails, call the reject function with no parameters.
                            //TODO: what should the UI do in that case?
                            oDfd.reject();
                        });
                }
            }, getRequestTime());

            return oDfd.promise();
        };

        this.getTile = function (sSemanticObject, sAction) {
            var oDfd = jQuery.Deferred();
            // TODO: return a oTile async
            return oDfd.promise();
        };

        this.getCatalogs = function () {
            var oDfd = jQuery.Deferred();

            //Simulate an async function with a loading delay of up to 5 sec
                // Simulates a progress call (the progress function of the promise will be called)
            aConfigCatalogs.forEach(function (oCatalog) {
                window.setTimeout(function () {
                    oDfd.notify(oCatalog);
                }, 300);
            });
                // TODO: simulate a failure (which will trigger the fail function of the promise)
                //oDfd.reject();

            window.setTimeout(function () {
                oDfd.resolve(aConfigCatalogs);
            }, 1500);

            return oDfd.promise();
        };

        this.isCatalogsValid = function () {
            // TODO
            return true;
        };

        this.getCatalogError = function (oCatalog) {
            return;
        };

        this.getCatalogId = function (oCatalog) {
            return oCatalog.id;
        };

        this.getCatalogTitle = function (oCatalog) {
            return oCatalog.title;
        };

        this.getCatalogTiles = function (oCatalog) {
            var oDfd = jQuery.Deferred();

            //Simulate an async function with a loading delay of up to 5 sec
            window.setTimeout(function () {
                // Simulates a success call (the done function of the promise will be called)
                oDfd.resolve(oCatalog.tiles);

                // TODO: simulate a failure (which will trigger the fail function of the promise)
                //oDfd.reject();
            }, getRequestTime());

            return oDfd.promise();
        };

        this.getCatalogTileId = function (oCatalogTile) {
            if (oCatalogTile.chipId) {
                return oCatalogTile.chipId;
            } else if (oCatalogTile.properties){
                return oCatalogTile.properties.chipId;
            } else {
                return "UnknownCatalogTileId";
            }
        };

        this.getCatalogTileTitle = function (oCatalogTile) {
            return oCatalogTile.title;
        };

        this.getCatalogTileSize = function (oCatalogTile) {
            return oCatalogTile.size;
        };

        this.getCatalogTileView = function (oCatalogTile) {
            return this._getTileView(oCatalogTile);
        };

        this.getCatalogTileTargetURL = function (oCatalogTile) {
            return (oCatalogTile.properties && oCatalogTile.properties.targetURL) || null;
        };

        this.getCatalogTilePreviewTitle = function (oCatalogTile) {
            return (oCatalogTile.properties && oCatalogTile.properties.title) || null;
        };

        this.getCatalogTilePreviewIcon = function (oCatalogTile) {
            return (oCatalogTile.properties && oCatalogTile.properties.icon) || null;
        };

        this.getCatalogTileKeywords = function (oCatalogTile) {
            return jQuery.merge([], jQuery.grep(jQuery.merge([
                oCatalogTile.title,
                oCatalogTile.properties && oCatalogTile.properties.subtitle,
                oCatalogTile.properties && oCatalogTile.properties.info
            ],
                (oCatalogTile.properties && oCatalogTile.properties.keywords) || []),
                function (n, i) { return n !== "" && n; }));
        };

        this.getCatalogTileTags = function (oCatalogTile) {
            return (oCatalogTile.properties && oCatalogTile.properties.tags) || [];
        };

        /**
         * Adds a bookmark to the user's home page.
         *
         * @param {object} oParameters
         *   bookmark parameters. In addition to title and URL, a bookmark might allow additional
         *   settings, such as an icon or a subtitle. Which settings are supported depends
         *   on the environment in which the application is running. Unsupported parameters will be
         *   ignored.
         * @param {string} oParameters.title
         *   The title of the bookmark.
         * @param {string} oParameters.url
         *   The URL of the bookmark. If the target application shall run in the Shell the URL has
         *   to be in the format <code>"#SO-Action~Context?P1=a&P2=x&/route?RPV=1"</code>
         * @param {string} [oParameters.icon]
         *   The optional icon URL of the bookmark (e.g. <code>"sap-icon://home"</code>).
         * @param {string} [oParameters.info]
         *   The optional information text of the bookmark.
         * @param {string} [oParameters.subtitle]
         *   The optional subtitle of the bookmark.
         * @param {string} [oParameters.serviceUrl]
         *   The URL to a REST or OData service that provides some dynamic information for the
         *   bookmark.
         * @param {string} [oParameters.serviceRefreshInterval]
         *   The refresh interval for the <code>serviceUrl</code> in seconds.
         * @param {string} [oParameters.numberUnit]
         *   The unit for the number retrieved from <code>serviceUrl</code>.
         * @returns {object}
         *   a jQuery promise.
         *
         * @see sap.ushell.services.URLParsing#getShellHash
         * @since 1.11.0
         * @public
         */
        this.addBookmark = function (oParameters, oGroup) {
            var oGroup = oGroup ? oGroup : defaultGroup,
                oDfd = jQuery.Deferred(),
                bFail = getSimulateFail(),
                that = this,
                title = oParameters.title,
                subtitle = oParameters.subtitle,
                info = oParameters.info,
                url = oParameters.url;

            //Simulate an async function
            window.setTimeout(function () {
                if (!bFail) {
                    var newTile = {
                        title: title,
                        size: "1x1",
                        chipId: "tile_0" + oGroup.tiles.length,
                        tileType: "sap.ushell.ui.tile.StaticTile",
                        id: "tile_0" + oGroup.tiles.length,
                        properties: {
                            icon: "sap-icon://time-entry-request",
                            keywords: [],
                            info: info,
                            subtitle: subtitle,
                            title: title,
                            targetURL: url
                        }
                    };

                    oGroup.tiles.push(newTile);
                    handleTileServiceCall(newTile, true);
                    // Simulates a success call (the done function of the promise will be called)
                    oDfd.resolve(newTile);
                } else {
                    //In case adding a tile fails, load the existing groups from the server
                    that.getGroups()
                        .done(function (oExistingGroups) {
                            //Use the reject function in order to specify that an error has occurred.
                            //Pass the existing groups that we got from the server to the reject function
                            oDfd.reject(oExistingGroups);
                        })
                        .fail(function () {
                            //In case loading the existing group also fails, call the reject function with no parameters.
                            //TODO: what should the UI do in that case?
                            oDfd.reject();
                        });
                }
            }, getRequestTime());
            return oDfd.promise();
        };

        this.updateBookmarks = function (sUrl, oParameters) {
            var oDeferred = new jQuery.Deferred(),
                oGetGroupsPromise = this.getGroups();

            oGetGroupsPromise.done(function(aRetreivedGroups) {
                aRetreivedGroups.forEach(function(oGroup){
                    oGroup.tiles.forEach(function(oTileData){
                        if (oTileData.properties && oTileData.properties.targetURL === sUrl) {
                            for (var property in oParameters) {
                                if (oParameters.hasOwnProperty(property)) {
                                    oTileData.properties[property] = oParameters[property];
                                }
                            }
                        }
                    });
                });
                oDeferred.resolve();
            });
            oGetGroupsPromise.fail(function(){
                oDeferred.reject();
            });

            return oDeferred.promise();
        };

        /**
         * Counts <b>all</b> bookmarks pointing to the given URL from all of the user's pages. You
         * can use this method to check if a bookmark already exists.
         * <p>
         * This is a potentially asynchronous operation in case the user's pages have not yet been
         * loaded completely!
         *
         * @param {string} sUrl
         *   The URL of the bookmarks to be counted, exactly as specified to {@link #addBookmark}.
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which informs about success or failure
         *   of this asynchronous operation. In case of success, the count of existing bookmarks
         *   is provided (which might be zero). In case of failure, an error message is passed.
         *
         * @see #addBookmark
         * @private
         */
        this.countBookmarks = function (sUrl) {
            var oDfd = jQuery.Deferred();

            var iCount = 0;
            var oGroup, oTile, iGroupIndex, iTileIndex;
            for (iGroupIndex = 0; iGroupIndex < aConfigGroups.length; iGroupIndex++) {
                oGroup = aConfigGroups[iGroupIndex];
                for (iTileIndex = 0; iTileIndex < oGroup.tiles.length; iTileIndex++) {
                    oTile = oGroup.tiles[iTileIndex];
                    if (oTile.properties.targetURL === sUrl){
                        iCount++;
                    }
                }
            }
            oDfd.resolve(iCount);

            return oDfd.promise();
        };

        /**
         * This method is called to notify that the given tile has been added to some remote
         * catalog which is not specified further.
         *
         * @param {string} sTileId
         *   the ID of the tile that has been added to the catalog (as returned by that OData POST
         *   operation)
         * @private
         * @since 1.16.4
         */
        this.onCatalogTileAdded = function (sTileId) {
            // TODO
        };
        this.getTileActions = function (oTile) {
            return (oTile.properties && oTile.properties.actions) || null;
        };
    };
}());

}; // end of sap/ushell/adapters/local/LaunchPageAdapter.js
if ( !jQuery.sap.isDeclared('sap.ushell.adapters.local.NavTargetResolutionAdapter') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview The NavTargetResolution adapter for the demo platform.
 *
 * @version 1.32.6
 */
(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.adapters.local.NavTargetResolutionAdapter");

    jQuery.sap.require('sap.ui.thirdparty.datajs'); // unlisted dependency retained


    /**
     * This adapter reads its configuration from the demo config, where the target applications are defined.
     * Note that only a constructed tuple is returned, which returns the platform neutral
     * expected result (cf. adjustResult in the ABAP Platform adapter)
     * It does not perform parameter matching of form factor selection like other implementations on 
     * real systems
     * @param {object} oUnused unused
     * @param {string} sParameter parameters
     * @param {object} oAdapterConfiguration configuration, typically contains the statically defined applications
     * @private
     */
    sap.ushell.adapters.local.NavTargetResolutionAdapter = function (oUnused, sParameter, oAdapterConfiguration) {

        var oApplications = jQuery.sap.getObject("config.applications", 0, oAdapterConfiguration);

        this.resolveHashFragment = function (sHashFragment) {
            var oDeferred = new jQuery.Deferred(),
                iIndex,
                oResult,
                oReturnedResult,
                sParameters;

            if (sHashFragment && sHashFragment.charAt(0) !== "#") {
                throw new sap.ushell.utils.Error("Hash fragment expected",
                        "sap.ushell.renderers.minimal.Shell");
            }

            sHashFragment = sHashFragment.substring(1);

            if (!sHashFragment && !oApplications[sHashFragment]) {
                oDeferred.resolve(undefined);
            } else {
                jQuery.sap.log.info("Hash Fragment: " + sHashFragment);

                iIndex = sHashFragment.indexOf("?");
                if (iIndex >= 0) {
                    sParameters = sHashFragment.slice(iIndex + 1);
                    sHashFragment = sHashFragment.slice(0, iIndex);
                }

                oResult = oApplications[sHashFragment];
                // we need a copy (!), as we cannot modify the original data configured
                //
                if (oResult) {
                    oReturnedResult = {
                        additionalInformation : oResult.additionalInformation,
                        applicationType : oResult.applicationType,
                        url : oResult.url,
                        text: oResult.text,
                        fullWidth: oResult.fullWidth
                    };
                    // add sParameter to URL
                    if (sParameters) {
                        oReturnedResult.url += (oReturnedResult.url.indexOf("?") < 0) ? "?" : "&";
                        oReturnedResult.url += sParameters;
                    }
                    if (oResult.navigationMode !== undefined) {
                        oReturnedResult.navigationMode = oResult.navigationMode;
                    }
                    oDeferred.resolve(oReturnedResult);
                } else {
                    oDeferred.reject("Could not resolve link '" + sHashFragment + "'");
                }
            }

            return oDeferred.promise();
        };


        this.getSemanticObjectLinks = function (sSemanticObject) {
            var sIntent,
                aResult = [],
                i = 0,
                oDeferred = new jQuery.Deferred();

            if (!sSemanticObject) {
                setTimeout(function () {
                    oDeferred.resolve([]);
                }, 0);
            } else {
                jQuery.sap.log.info("getSemanticObjectLinks: " + sSemanticObject);
                for (sIntent in oApplications) {
                    if (oApplications.hasOwnProperty(sIntent) && sIntent.substring(0, sIntent.indexOf('-')) === sSemanticObject) {
                        // result must have at least .text and .sIntent
                        // see documentation of getSemanticObjectLinks in NavTargetResolution.js
                        aResult[i] = oApplications[sIntent];
                        aResult[i].id = sIntent;
                        aResult[i].text = aResult[i].text || aResult[i].description || "no text";
                        aResult[i].intent = "#" + sIntent;
                        i += 1;
                    }
                }
                if (aResult) {
                    setTimeout(function () {
                        oDeferred.resolve(aResult);
                    }, 0);
                } else {
                    setTimeout(function () {
                        oDeferred.reject("Could not get links for  '" + sSemanticObject + "'");
                    }, 0);
                }
            }
            return oDeferred.promise();
        };

        /**
         * Indicates whether the given intent(s) are supported,
         * "Supported" means that navigation to the intent is possible.
         * Note that the local adapter does not perform complex parameter matching!
         *
         * @param {string[]} aIntents
         *   the intents (such as <code>"#AnObject-Action?A=B&C=e&C=j"</code>) to be checked
         *
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which is resolved with a map
         *   containing the intents from <code>aIntents</code> as keys. The map values are
         *   objects with a property <code>supported</code> of type <code>boolean</code>.<br/>
         *   Example:
         * <pre>
         * {
         *   "#AnObject-Action?A=B&C=e&C=j": { supported: false },
         *   "#AnotherObject-Action2": { supported: true }
         * }
         * </pre>
         */
        this.isIntentSupported = function (aIntents) {
            var oDeferred = new jQuery.Deferred(),
                mSupportedByIntent = {},
                aDeferreds = [],
                that = this;

            /*
             * Sets the result for the given intent as indicated.
             * @params {string} sIntent
             * @params {boolean} bSupported
             */
            function setResult(sIntent, bSupported) {
                mSupportedByIntent[sIntent] = {supported: bSupported};
            }
            aIntents.forEach(function (sIntent, i) {
                // we have to use separate promises that we always resolve
                // because jQuery.when immediately rejects if the first promise is rejected
                var oDeferredWrapper = new jQuery.Deferred();
                aDeferreds.push(oDeferredWrapper.promise());
                that.resolveHashFragment(sIntent)
                    .fail(function (sErrorMessage) {
                        setResult(sIntent, false);
                        oDeferredWrapper.resolve();
                    })
                    .done(function (oApplication) {
                        setResult(sIntent, true);
                        oDeferredWrapper.resolve();
                    });
            });
            if (aIntents.length > 0) {
                jQuery.when.apply(jQuery, aDeferreds).always(function () {
                    oDeferred.resolve(mSupportedByIntent);
                });
            } else {
                oDeferred.resolve(mSupportedByIntent);
            }
            return oDeferred.promise();
        };
    };
}());

}; // end of sap/ushell/adapters/local/NavTargetResolutionAdapter.js
if ( !jQuery.sap.isDeclared('sap.ushell.adapters.local.PersonalizationAdapter') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview The Personalization adapter for the local platform.
 *
 *
 * The local personalization adapter can be configured to store data either in
 * the local storage (default) or in memory.
 * @version 1.32.6
 */

(function () {
    "use strict";
    /*jslint nomen: true*/
    /*global jQuery, sap, setTimeout */

    jQuery.sap.declare("sap.ushell.adapters.local.PersonalizationAdapter");

    var oMemoryPersData;

    /*
     * This method MUST be called by the Unified Shell's container only.
     * Constructs a new instance of the personalization adapter for the
     * "Local" platform.
     *
     * @param {object}
     *            oSystem the system served by the adapter
     * @returns {sap.ushell.adapters.local.PersonalizationAdapter}
     *
     * @class The Unified Shell's personalization adapter for the "local"
     *        platform.
     *
     * @constructor
     * @since 1.15.0
     */
    sap.ushell.adapters.local.PersonalizationAdapter = function (oUnused, sParameter, oAdapterConfiguration) {
        this._sStorageType = jQuery.sap.getObject("config.storageType", undefined, oAdapterConfiguration) ||
                sap.ushell.adapters.local.PersonalizationAdapter.prototype.constants.storage.LOCAL_STORAGE; // default = local storage
        switch (this._sStorageType) {
        case sap.ushell.adapters.local.PersonalizationAdapter.prototype.constants.storage.LOCAL_STORAGE:
            jQuery.sap.require("jquery.sap.storage");
            break;
        case sap.ushell.adapters.local.PersonalizationAdapter.prototype.constants.storage.MEMORY:
            oMemoryPersData = jQuery.sap.getObject("config.personalizationData", undefined, oAdapterConfiguration) || {};
                // initialization data is only supported for MEMORY storage
            break;
        default:
            throw new sap.ushell.utils.Error("Personalization Adapter Local Platform: unsupported storage type '" + this._sStorageType + "'");
        }
    };

    sap.ushell.adapters.local.PersonalizationAdapter.prototype.constants = {
        "storage": {
            "MEMORY": "MEMORY",
            "LOCAL_STORAGE": "LOCAL_STORAGE"
        }
    };

    /**
     * Factory methods for obtaining AdapterContainer objects
     * Note that deletion does not invalidate handed out containers
     */

    sap.ushell.adapters.local.PersonalizationAdapter.prototype.getAdapterContainer = function (sContainerKey) {
        return new sap.ushell.adapters.local.AdapterContainer(sContainerKey, this._sStorageType);
    };


    /**
     * Remove the content of the given container key from the storage
     *
     * Note: a previously obtained AdaterContainer for the instance is not invalidated
     * @returns a promise (though technically this is a synchronous op)
     */
    sap.ushell.adapters.local.PersonalizationAdapter.prototype.delAdapterContainer = function (sContainerKey) {
        return this.getAdapterContainer(sContainerKey).del();
    };

    // --- Adapter Container ---
    sap.ushell.adapters.local.AdapterContainer = function (sContainerKey, sStorageType) {
        this._sContainerKey = sContainerKey;
        this._sStorageType = sStorageType;
        this._oItemMap = new sap.ushell.utils.Map();
    };

    function getLocalStorage() {
        return jQuery.sap.storage(jQuery.sap.storage.Type.local, "com.sap.ushell.adapters.sandbox.Personalization");
    }

    function parse(sJson) {
        try {
            return JSON.parse(sJson);
        } catch (e) {
            return undefined;
        }
    }

    function stringify(oJson) {
        return JSON.stringify(oJson);
    }

    function clone(oJson) {
        if (oJson === undefined) {
            return undefined;
        }
        try {
            return JSON.parse(JSON.stringify(oJson));
        } catch (e) {
            return undefined;
        }
    }

    sap.ushell.adapters.local.AdapterContainer.prototype.load = function () {
        var oDeferred = new jQuery.Deferred(),
            oLocalStorage,
            sItems,
            that = this;

        switch (this._sStorageType) {
        case sap.ushell.adapters.local.PersonalizationAdapter.prototype.constants.storage.LOCAL_STORAGE:
            oLocalStorage = getLocalStorage();
            setTimeout(function () {
                sItems = oLocalStorage.get(that._sContainerKey);
                that._oItemMap.entries = parse(sItems) || {};
                oDeferred.resolve(that);
            }, 0);
            break;
        case sap.ushell.adapters.local.PersonalizationAdapter.prototype.constants.storage.MEMORY:
            setTimeout(function () {
                that._oItemMap.entries = clone(oMemoryPersData[that._sContainerKey]) || {};
                oDeferred.resolve(that);
            }, 0);
            break;
        default:
            setTimeout(function () {
                oDeferred.reject("unknown storage type");
            }, 0);
        }
        return oDeferred.promise();
    };

    sap.ushell.adapters.local.AdapterContainer.prototype.save = function () {
        var oDeferred = new jQuery.Deferred(),
            oLocalStorage,
            sItems,
            that = this;

        switch (this._sStorageType) {
        case sap.ushell.adapters.local.PersonalizationAdapter.prototype.constants.storage.LOCAL_STORAGE:
            oLocalStorage = getLocalStorage();
            setTimeout(function () {
                sItems = stringify(that._oItemMap.entries);
                oLocalStorage.put(that._sContainerKey, sItems);
                oDeferred.resolve();
            }, 0);
            break;
        case sap.ushell.adapters.local.PersonalizationAdapter.prototype.constants.storage.MEMORY:
            setTimeout(function () {
                oMemoryPersData[that._sContainerKey] = clone(that._oItemMap.entries);
                oDeferred.resolve();
            }, 0);
            break;
        default:
            setTimeout(function () {
                oDeferred.reject("unknown storage type");
            }, 0);
        }
        return oDeferred.promise();
    };

    sap.ushell.adapters.local.AdapterContainer.prototype.del = function () {
        var oDeferred = new jQuery.Deferred(),
            oLocalStorage,
            that = this;

        switch (this._sStorageType) {
        case sap.ushell.adapters.local.PersonalizationAdapter.prototype.constants.storage.LOCAL_STORAGE:
            oLocalStorage = getLocalStorage();
            setTimeout(function () {
                oLocalStorage.remove(that._sContainerKey); // delete in storage
                that._oItemMap.entries = {}; // delete container local data
                oDeferred.resolve();
            }, 0);
            break;
        case sap.ushell.adapters.local.PersonalizationAdapter.prototype.constants.storage.MEMORY:
            setTimeout(function () {
                if (oMemoryPersData && oMemoryPersData[that._sContainerKey]) {
                    delete oMemoryPersData[that._sContainerKey]; // delete in storage
                }
                that._oItemMap.entries = {}; // delete container local data
                oDeferred.resolve();
            }, 0);
            break;
        default:
            setTimeout(function () {
                oDeferred.reject("unknown storage type");
            }, 0);
        }
        return oDeferred.promise();
    };

    sap.ushell.adapters.local.AdapterContainer.prototype.getItemKeys = function () {
        return this._oItemMap.keys();
    };

    sap.ushell.adapters.local.AdapterContainer.prototype.containsItem = function (sItemKey) {
        return this._oItemMap.containsKey(sItemKey);
    };

    sap.ushell.adapters.local.AdapterContainer.prototype.getItemValue = function (sItemKey) {
        return this._oItemMap.get(sItemKey);
    };

    sap.ushell.adapters.local.AdapterContainer.prototype.setItemValue = function (sItemKey, oItemValue) {
        this._oItemMap.put(sItemKey, oItemValue);
    };

    sap.ushell.adapters.local.AdapterContainer.prototype.delItem = function (sItemKey) {
        this._oItemMap.remove(sItemKey);
    };

}());


}; // end of sap/ushell/adapters/local/PersonalizationAdapter.js
if ( !jQuery.sap.isDeclared('sap.ushell.adapters.local.SearchAdapter') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview The Search adapter for the demo platform.
 *
 * @version 1.32.6
 */
(function () {
    "use strict";
    /*global jQuery, sap, window */
    jQuery.sap.declare("sap.ushell.adapters.local.SearchAdapter");

    window.sap.bc = window.sap.bc || {};
    window.sap.bc = {ina : {api: {sina: {properties: {systemType: "ABAP", startWithSearch : "false" , noSapClientFromUrl: true}}}}};
    jQuery.sap.require('sap.ushell.renderers.fiori2.search.esh.api.release.sina'); // unlisted dependency retained


    /**
     *
     * @param oSystem
     * @returns {sap.ushell.adapters.abap.SearchAdapter}
     */
    sap.ushell.adapters.local.SearchAdapter = function (oSystem, sParameter, oAdapterConfiguration) {

        this.isSearchAvailable = function () {
            var oDeferred = jQuery.Deferred();
            oDeferred.resolve(true);
            return oDeferred.promise();
        };

        this.getSina = function(){
            return sap.bc.ina.api.sina;
        };

    };
}());

}; // end of sap/ushell/adapters/local/SearchAdapter.js
if ( !jQuery.sap.isDeclared('sap.ushell.adapters.local.SupportTicketAdapter') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview The SupportTicket adapter for the local platform.
 *
 * @version 1.32.6
 */
(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.adapters.local.SupportTicketAdapter");

    sap.ushell.adapters.local.SupportTicketAdapter = function (oSystem, sParameter, oAdapterConfiguration) {

        this.createTicket = function (oSupportObject) {
            var oDeferred = new jQuery.Deferred(),
                sTicketId = "1234567";

            oDeferred.resolve(sTicketId);
            return oDeferred.promise();
        };

    };
}());

}; // end of sap/ushell/adapters/local/SupportTicketAdapter.js
if ( !jQuery.sap.isDeclared('sap.ushell.adapters.local.UserInfoAdapter') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview The UserInfo adapter for the demo platform.
 *
 * @version 1.32.6
 */
(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.adapters.local.UserInfoAdapter");

    jQuery.sap.require('sap.ui.thirdparty.datajs'); // unlisted dependency retained

    //jQuery.sap.require("sap.ushell.shells.demo.fioriDemoConfig");

    /**
     * This demo adapter reads its configuration from the demo config, where the target applications are defined.
     *
     * @param oSystem
     * @returns {sap.ushell.adapters.abap.UserInfoAdapter}
     */
    sap.ushell.adapters.local.UserInfoAdapter = function (oUnused, sParameter, oAdapterConfiguration) {

        var oUserThemeConfiguration;

        /**
         * Generates the theme configuration for the user based on the external configuration
         * provided in window['sap-ushell-config'].
         *
         * @param {object}
         *     the configuration specified by the user externally
         *
         * @returns {object}
         *     the theme configuration array for getThemeList method
         *
         * @private
         */
        function generateThemeConfiguration(oAdapterThemesConfiguration) {
            var defaultConfig = [
                    { id: "sap_bluecrystal", name: "sap_bluecrystal" }
                ],
                externalConfig = jQuery.sap.getObject(
                    "config.themes",
                    undefined,
                    oAdapterThemesConfiguration
                );

            return externalConfig === undefined ? defaultConfig : externalConfig;
        }

        this.updateUserPreferences = function (oUSer) {
            var oDeferred = new jQuery.Deferred();

            jQuery.sap.log.info("updateUserPreferences: " + oUSer);
            // var curUser = sap.ushell.Container.getUser();
            // var originTheme = curUser.getSelectedTheme();
            // curUser.setSelectedTheme(selectedTheme);

            oDeferred.resolve({
                status: 200
            });
            // oDeferred.reject("Could not resolve link '" + sHashFragment + "'");
            //   curUser.setUserSelectedTheme(originTheme);

            return oDeferred.promise();
        };

        this.getThemeList = function () {
            var oDeferred = new jQuery.Deferred();

            jQuery.sap.log.info("getThemeList");

            // make sure a configuration is available
            if (oUserThemeConfiguration === undefined) {
                oUserThemeConfiguration = generateThemeConfiguration(oAdapterConfiguration);
            }

            // we need to have at least one theme
            if (oUserThemeConfiguration.length === 0) {
                oDeferred.reject("no themes were configured");
            } else {
                oDeferred.resolve({
                    options: oUserThemeConfiguration
                });
            }


            return oDeferred.promise();
        };

    };
}());

}; // end of sap/ushell/adapters/local/UserInfoAdapter.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.factsheet.Component') ) {
//define a root UIComponent which exposes the main view
jQuery.sap.declare("sap.ushell.components.factsheet.Component");
jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained


sap.ui.core.UIComponent.extend("sap.ushell.components.factsheet.Component", {

    oMainView : null,

    // use inline declaration instead of component.json to save 1 round trip
    metadata : {
        version : "1.32.6",
        library : "sap.ushell.components.factsheet",
        includes : [ "css/custom.css" ],
        dependencies : {
            libs : [ "sap.m", "sap.ui.vbm", "sap.suite.ui.commons", "sap.ui.layout", "sap.viz" ],
            components : []
        }
    },

    createContent : function () {
        var oComponentData = this.getComponentData();
        // startup parameters are passed as a property bag as componentData.startupParameters
        var oStartupParameters = ( oComponentData && oComponentData.startupParameters) || {};
        // factsheet component needs 100% height otherwise it does not work
        this.oMainView = sap.ui.view({
            type: sap.ui.core.mvc.ViewType.JS,
            viewName:  "sap.ushell.components.factsheet.views.ThingViewer",
            viewData: oStartupParameters,
            height: "100%"
        }).addStyleClass("ThingViewer");

        return this.oMainView;
    },

    exit : function () {
        window.console.log("On Exit of factsheet Component.js called : this.getView().getId()" + this.getId());
    },

    // this event does not exist !?
    onExit : function () {
        window.console.log("On Exit of factsheet Component.js called : this.getView().getId()" + this.getId());
    }
});

jQuery.sap.setObject("factsheet.Component", sap.ushell.components.factsheet.Component);
}; // end of sap/ushell/components/factsheet/Component.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.factsheet.annotation.Mapping') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview This file contains an annotation parser for factsheets.
 */

(function () {
    "use strict";
    /*global sap, jQuery, window, XMLHttpRequest, ActiveXObject, XPathResult */

    jQuery.sap.declare("sap.ushell.components.factsheet.annotation.Mapping");

    sap.ushell.components.factsheet.annotation.Mapping = {};
    sap.ushell.components.factsheet.annotation.Mapping.initialized = [];

    sap.ushell.components.factsheet.annotation.Mapping.parse = function (oMetadata, sAnnotationUri) {
        var xPath = {}, getHttpResponseXML, getAllPropertiesMetadata, setEdmTypes, getEdmType, getPropertyValueAttributes,
            replaceWithAlias, getSimpleNodeValue, getPropertyValue, getPropertyValues, getApplyFunctions, isNavProperty,
            sAlias, mappingList = {}, xmlDoc, schemaNodes, oSchema = {}, i, schemaNode, oAlias = {},
            oAnnotations = {}, sAnnoNameSpace = "", refNodes, refNode, aliasNodes, aliasNode, annoNodes, annoNode,
            termNodes, oTerms, nodeIndex, termNode, sTermType, oMetadataProperties, annotationNodes, j, annotationNode,
            annotationTarget, annotationNamespace, annotation, propertyAnnotation, propertyAnnotationNodes,
            propertyAnnotationNode, nodeIndexValue, sTermValue, nodeIndexAnnotation, targetAnnotation, annotationQualifier,
            annotationTerm, valueAnnotation, expandNodes, expandNode, path, pathValues, expandNodesApplFunc;
        if (sap.ui.Device.browser.internet_explorer) {
            xPath = {
                setNameSpace: function (outNode) {
                    outNode.setProperty("SelectionNamespaces", 'xmlns:edmx="http://docs.oasis-open.org/odata/ns/edmx" xmlns:d="http://docs.oasis-open.org/odata/ns/edm"');
                    outNode.setProperty("SelectionLanguage", "XPath");
                    return outNode;
                },
                selectNodes: function (outNode, xPath, inNode) {
                    return inNode.selectNodes(xPath);
                },
                nextNode: function (node) {
                    return node.nextNode();
                },
                getNodeText: function (node) {
                    return node.text;
                }
            };
        } else {//Chrome, Firefox, Opera, etc.
            xPath = {
                setNameSpace: function (outNode) { return outNode; },
                nsResolver: function (prefix) {
                    var ns = {"edmx": "http://docs.oasis-open.org/odata/ns/edmx", "d": "http://docs.oasis-open.org/odata/ns/edm"};
                    return ns[prefix] || null;
                },
                selectNodes: function (outNode, sPath, inNode) {
                    var xmlNodes = outNode.evaluate(sPath, inNode, this.nsResolver, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);
                    xmlNodes.length = xmlNodes.snapshotLength;
                    return xmlNodes;
                },
                nextNode: function (node, item) { return node.snapshotItem(item); },
                getNodeText: function (node) { return node.textContent; }
            };
        }
        getHttpResponseXML = function (uri) {
            var oXHRResponse;
            if (sap.ui.Device.browser.internet_explorer) {
                oXHRResponse = new ActiveXObject("Microsoft.XMLHTTP");
                oXHRResponse.open("GET", uri, false);
                oXHRResponse.send(null);
                return oXHRResponse.responseXML;
            } else {
                oXHRResponse = jQuery.sap.sjax({url: uri, dataType: "xml"});
                if (oXHRResponse.success) {
                    return oXHRResponse.data;
                }
            }
        };
        getAllPropertiesMetadata = function (oMetadata) {
            var oMetadataSchema = {}, oPropertyTypes = {}, oPropertyExtensions = {}, bPropertyExtensions = false,
                i, sNamespace, aEntityTypes, aComplexTypes, oEntityType = {}, j, oProperties = {}, oExtensions = {},
                bExtensions = false, oProperty, l, k, oComplexTypeProp, sPropertyName, sType, oPropExtension, p,
                oReturn;
            for (i = oMetadata.dataServices.schema.length - 1; i >= 0; i -= 1) {
                oMetadataSchema = oMetadata.dataServices.schema[i];
                if (oMetadataSchema.entityType) {
                    sNamespace = oMetadataSchema.namespace;
                    aEntityTypes = oMetadataSchema.entityType;
                    aComplexTypes = oMetadataSchema.complexType;
                    for (j in aEntityTypes) {
                        if (aEntityTypes.hasOwnProperty(j)) {
                            oEntityType = aEntityTypes[j];
                            oExtensions = {};
                            if (oEntityType.hasStream && oEntityType.hasStream === "true") {
                                continue;
                            }
                            oProperties = {};
                            for (k in oEntityType.property) {
                                oProperty = oEntityType.property[k];
                                if (oProperty.type.substring(0, sNamespace.length) === sNamespace) {
                                    for (l in aComplexTypes) {
                                        if (aComplexTypes[l].name === oProperty.type.substring(sNamespace.length + 1)) {
                                            for (k in aComplexTypes[l].property) {
                                                oComplexTypeProp = aComplexTypes[l].property[k];
                                                oProperties[aComplexTypes[l].name + "/" + oComplexTypeProp.name] = oComplexTypeProp.type;
                                            }
                                        }
                                    }
                                } else {
                                    sPropertyName = oProperty.name;
                                    sType = oProperty.type;
                                    for (p in oProperty.extensions) {
                                        oPropExtension = oProperty.extensions[p];
                                        if ((oPropExtension.name === "display-format") && (oPropExtension.value === "Date")) {
                                            sType = "Edm.Date";
                                        } else {
                                            bExtensions = true;
                                            if (!oExtensions[sPropertyName]) {
                                                oExtensions[sPropertyName] = {};
                                            }
                                            if (oPropExtension.namespace && !oExtensions[sPropertyName][oPropExtension.namespace]) {
                                                oExtensions[sPropertyName][oPropExtension.namespace] = {};
                                            }
                                            oExtensions[sPropertyName][oPropExtension.namespace][oPropExtension.name] = oPropExtension.value;
                                        }
                                    }
                                    oProperties[sPropertyName] = sType;
                                }
                            }
                            if (!oPropertyTypes[sNamespace + "." + oEntityType.name]) {
                                oPropertyTypes[sNamespace + "." + oEntityType.name] = {};
                            }
                            oPropertyTypes[sNamespace + "." + oEntityType.name] = oProperties;
                            if (bExtensions) {
                                if (!oPropertyExtensions[sNamespace + "." + oEntityType.name]) {
                                    bPropertyExtensions = true;
                                }
                                oPropertyExtensions[sNamespace + "." + oEntityType.name] = {};
                                oPropertyExtensions[sNamespace + "." + oEntityType.name] = oExtensions;
                            }
                        }
                    }
                }
            }
            if (bPropertyExtensions) {
                oReturn = { types: oPropertyTypes, extensions: oPropertyExtensions };
            } else {
                oReturn = { types: oPropertyTypes };
            }
            return oReturn;
        };
        setEdmTypes = function (aPropertyValues, oProperties, sTarget, oSchema) {
            var pValueIndex, oPropertyValue, sEdmType = '';
            for (pValueIndex in aPropertyValues) {
                if (aPropertyValues.hasOwnProperty(pValueIndex)) {
                    if (aPropertyValues[pValueIndex]) {
                        oPropertyValue = aPropertyValues[pValueIndex];
                        if (oPropertyValue.Value && oPropertyValue.Value.Path) {
                            sEdmType = getEdmType(oPropertyValue.Value.Path, oProperties, sTarget, oSchema);
                            if (sEdmType) {
                                aPropertyValues[pValueIndex].EdmType = sEdmType;
                            }
                            continue;
                        }
                        if (oPropertyValue.Path) {
                            sEdmType = getEdmType(oPropertyValue.Path, oProperties, sTarget, oSchema);
                            if (sEdmType) {
                                aPropertyValues[pValueIndex].EdmType = sEdmType;
                            }
                            continue;
                        }
                        if (oPropertyValue.Facets) {
                            aPropertyValues[pValueIndex].Facets = setEdmTypes(oPropertyValue.Facets, oProperties, sTarget, oSchema);
                            continue;
                        }
                        if (oPropertyValue.Data) {
                            aPropertyValues[pValueIndex].Data = setEdmTypes(oPropertyValue.Data, oProperties, sTarget, oSchema);
                            continue;
                        }
                        if (pValueIndex === "Data") {
                            aPropertyValues.Data = setEdmTypes(oPropertyValue, oProperties, sTarget, oSchema);
                            continue;
                        }
                        if (oPropertyValue.Value && oPropertyValue.Value.Apply) {
                            aPropertyValues[pValueIndex].Value.Apply.Parameters = setEdmTypes(oPropertyValue.Value.Apply.Parameters, oProperties, sTarget, oSchema);
                            continue;
                        }
                        if (oPropertyValue.Value && oPropertyValue.Type && (oPropertyValue.Type === "Path")) {
                            sEdmType = getEdmType(oPropertyValue.Value, oProperties, sTarget, oSchema);
                            if (sEdmType) {
                                aPropertyValues[pValueIndex].EdmType = sEdmType;
                            }
                        }
                    }
                }
            }
            return aPropertyValues;
        };
        getEdmType = function (sPath, oProperties, sTarget, oSchema) {
            var pIndex;
            if ((sPath.charAt(0) === "@") && (sPath.indexOf(oSchema.Alias) === 1)) {
                sPath = sPath.slice(oSchema.Alias.length + 2);
            }
            if (sPath.indexOf("/") >= 0) {
                if (oProperties[sPath.slice(0, sPath.indexOf("/"))]) {
                    sTarget = sPath.slice(0, sPath.indexOf("/"));
                    sPath = sPath.slice(sPath.indexOf("/") + 1);
                }
            }
            for (pIndex in oProperties[sTarget]) {
                if (oProperties[sTarget].hasOwnProperty(pIndex)) {
                    if (sPath === pIndex) {
                        return oProperties[sTarget][pIndex];
                    }
                }
            }
        };
        getPropertyValueAttributes = function (documentNode) {
            var attrName = "", attrValue = "", i, propertyValueAttributes = {};
            for (i = 0; i < documentNode.attributes.length; i += 1) {
                if ((documentNode.attributes[i].name !== "Property") && (documentNode.attributes[i].name !== "Term")) {
                    attrName = documentNode.attributes[i].name;
                    attrValue = documentNode.attributes[i].value;
                }
            }
            if (attrName.length > 0) {
                propertyValueAttributes[attrName] = replaceWithAlias(attrValue);
            }
            return propertyValueAttributes;
        };
        getSimpleNodeValue = function (xmlDoc, documentNode) {
            var oValue = {}, stringValueNodes, stringValueNode, pathValueNodes, pathValueNode, applyValueNodes, applyValueNode;
            if (documentNode.hasChildNodes()) {
                stringValueNodes = xPath.selectNodes(xmlDoc, "./d:String", documentNode);
                if (stringValueNodes.length > 0) {
                    stringValueNode = xPath.nextNode(stringValueNodes, 0);
                    oValue["String"] = xPath.getNodeText(stringValueNode);
                } else {
                    pathValueNodes = xPath.selectNodes(xmlDoc, "./d:Path", documentNode);
                    if (pathValueNodes.length > 0) {
                        pathValueNode = xPath.nextNode(pathValueNodes, 0);
                        oValue["Path"] = xPath.getNodeText(pathValueNode);
                    } else {
                        applyValueNodes = xPath.selectNodes(xmlDoc, "./d:Apply", documentNode);
                        if (applyValueNodes.length > 0) {
                            applyValueNode = xPath.nextNode(applyValueNodes, 0);
                            oValue["Apply"] = getApplyFunctions(xmlDoc, applyValueNode);
                        }
                    }
                }
            }
            return oValue;
        };
        getPropertyValue = function (xmlDoc, documentNode, target) {
            var propertyValue = {}, recordNodes, recordNodeCnt, nodeIndex, recordNode, propertyValues, urlValueNodes, urlValueNode,
                pathNode, oPath = {}, annotationNodes, annotationNode, nodeIndexValue, termValue, collectionNodes;
            if (documentNode.hasChildNodes()) {
                recordNodes = xPath.selectNodes(xmlDoc, "./d:Record | ./d:Collection/d:Record | ./d:Collection/d:If/d:Record", documentNode);
                if (recordNodes.length) {
                    recordNodeCnt = 0;
                    for (nodeIndex = 0; nodeIndex < recordNodes.length; nodeIndex += 1) {
                        recordNode = xPath.nextNode(recordNodes, nodeIndex);
                        propertyValues = getPropertyValues(xmlDoc, recordNode, target);
                        if (recordNode.getAttribute("Type")) {
                            propertyValues["RecordType"] = replaceWithAlias(recordNode.getAttribute("Type"));
                        }
                        if (recordNodeCnt === 0) {
                            if (recordNode.nextElementSibling || (recordNode.parentNode.nodeName === "Collection") || (recordNode.parentNode.nodeName === "If")) {
                                propertyValue = [];
                                propertyValue.push(propertyValues);
                            } else {
                                propertyValue = propertyValues;
                            }
                        } else {
                            propertyValue.push(propertyValues);
                        }
                        recordNodeCnt += 1;
                    }
                } else {
                    urlValueNodes = xPath.selectNodes(xmlDoc, "./d:UrlRef", documentNode);
                    if (urlValueNodes.length > 0) {
                        for (nodeIndex = 0; nodeIndex < urlValueNodes.length; nodeIndex += 1) {
                            urlValueNode = xPath.nextNode(urlValueNodes, nodeIndex);
                            propertyValue["UrlRef"] = getSimpleNodeValue(xmlDoc, urlValueNode);              		
                        }
                    } else {
                        urlValueNodes = xPath.selectNodes(xmlDoc, "./d:Url", documentNode);
                        if (urlValueNodes.length > 0) {
                            for (nodeIndex = 0; nodeIndex < urlValueNodes.length; nodeIndex += 1) {
                                urlValueNode = xPath.nextNode(urlValueNodes, nodeIndex);
                                propertyValue["Url"] = getSimpleNodeValue(xmlDoc, urlValueNode);
                            }
                        } else {
                            collectionNodes = xPath.selectNodes(xmlDoc, "./d:Collection/d:AnnotationPath | ./d:Collection/d:PropertyPath", documentNode);
                            if (collectionNodes.length > 0) {
                                propertyValue = [];
                                for (nodeIndex = 0; nodeIndex < collectionNodes.length; nodeIndex += 1) {
                                    pathNode = xPath.nextNode(collectionNodes, nodeIndex);
                                    oPath = {};
                                    oPath[pathNode.nodeName] = xPath.getNodeText(pathNode);
                                    propertyValue.push(oPath);
                                }
                            } else {
                                propertyValue = getPropertyValueAttributes(documentNode);
                                annotationNodes = xPath.selectNodes(xmlDoc, "./d:Annotation", documentNode);
                                annotationNode = {};
                                for (nodeIndexValue = 0; nodeIndexValue < annotationNodes.length; nodeIndexValue += 1) {
                                    annotationNode = xPath.nextNode(annotationNodes, nodeIndexValue);
                                    if (annotationNode.hasChildNodes() === false) {
                                        termValue = replaceWithAlias(annotationNode.getAttribute("Term"));
                                        propertyValue[termValue] = getPropertyValueAttributes(annotationNode);
                                    }
                                }
                            }
                        }
                    }
                }
            } else {
                propertyValue = getPropertyValueAttributes(documentNode);
            }
            return propertyValue;
        };
        getPropertyValues = function (xmlDoc, documentNode, target) {
            var properties = {}, annotationNode = {}, annotationNodes, nodeIndexValue, termValue, propertyValueNodes, nodeIndex,
                propertyValueNode, propertyName, applyNodes, applyNode, applyNodeIndex;
            annotationNodes = xPath.selectNodes(xmlDoc, "./d:Annotation", documentNode);
            for (nodeIndexValue = 0; nodeIndexValue < annotationNodes.length; nodeIndexValue += 1) {
                annotationNode = xPath.nextNode(annotationNodes, nodeIndexValue);
                if (annotationNode.hasChildNodes() === false) {
                    termValue = replaceWithAlias(annotationNode.getAttribute("Term"));
                    properties[termValue] = getPropertyValueAttributes(annotationNode);
                }
            }
            propertyValueNodes = xPath.selectNodes(xmlDoc, "./d:PropertyValue", documentNode);
            if (propertyValueNodes.length > 0) {
                for (nodeIndex = 0; nodeIndex < propertyValueNodes.length; nodeIndex += 1) {
                    propertyValueNode = xPath.nextNode(propertyValueNodes, nodeIndex);
                    propertyName = propertyValueNode.getAttribute("Property");
                    properties[propertyName] = getPropertyValue(xmlDoc, propertyValueNode, target);
                    applyNodes = xPath.selectNodes(xmlDoc, "./d:Apply", propertyValueNode);
                    applyNode = null;
                    for (applyNodeIndex = 0; applyNodeIndex < applyNodes.length; applyNodeIndex += 1) {
                        applyNode = xPath.nextNode(applyNodes, applyNodeIndex);
                        if (applyNode) {
                            properties[propertyName] = {};
                            properties[propertyName]['Apply'] = getApplyFunctions(xmlDoc, applyNode);
                        }
                    }
                }
            } else {
                properties = getPropertyValue(xmlDoc, documentNode, target);

            }
            return properties;
        };
        getApplyFunctions = function (xmlDoc, applyNode) {
            var apply = {}, parameterNodes, paraNode = null, parameters = [], i;
            parameterNodes = xPath.selectNodes(xmlDoc, "./d:*", applyNode);
            for (i = 0; i < parameterNodes.length; i += 1) {
                paraNode = xPath.nextNode(parameterNodes, i);
                switch (paraNode.nodeName) {
                case "Apply":
                    parameters.push({"Type": "Apply", "Value": getApplyFunctions(xmlDoc, paraNode)});
                    break;
                case "LabeledElement":
                    parameters.push({"Name": paraNode.getAttribute("Name"), "Value": getSimpleNodeValue(xmlDoc, paraNode)});
                    break;
                default:
                    parameters.push({"Type": paraNode.nodeName, "Value": xPath.getNodeText(paraNode)});
                    break;
                }
            }
            apply['Name'] = applyNode.getAttribute('Function');
            apply['Parameters'] = parameters;
            return apply;
        };
        isNavProperty = function (sEntityType, sPathValue, metadata) {
            var oMetadataSchema, i, namespace, aEntityTypes, j, k;
            for (i = oMetadata.dataServices.schema.length - 1; i >= 0; i -= 1) {
                oMetadataSchema = oMetadata.dataServices.schema[i];
                if (oMetadataSchema.entityType) {
                    namespace = oMetadataSchema.namespace + ".";
                    aEntityTypes = oMetadataSchema.entityType;
                    for (k = aEntityTypes.length - 1; k >= 0; k -= 1) {
                        if (namespace + aEntityTypes[k].name === sEntityType && aEntityTypes[k].navigationProperty) {
                            for (j = 0; j < aEntityTypes[k].navigationProperty.length; j += 1) {
                                if (aEntityTypes[k].navigationProperty[j].name === sPathValue) {
                                    return true;
                                }
                            }
                        }
                    }
                }
            }
            return false;
        };

        replaceWithAlias = function (sValue) {
            for (sAlias in oAlias) {
                if (oAlias.hasOwnProperty(sAlias)) {
                    if (sValue.indexOf(sAlias + ".") >= 0) {
                        sValue = sValue.replace(sAlias + ".", oAlias[sAlias] + ".");
                        return sValue;
                    }
                }
            }
            return sValue;
        };
        if (this.initialized[sAnnotationUri]) {
            return this.initialized[sAnnotationUri];
        }
        // Read Annotation File
        xmlDoc = getHttpResponseXML(sAnnotationUri);
        //Set XPath namespace
        xmlDoc = xPath.setNameSpace(xmlDoc);
        //Schema Alias
        schemaNodes = xPath.selectNodes(xmlDoc, "//d:Schema", xmlDoc);
        for (i = 0; i < schemaNodes.length; i += 1) {
            schemaNode = xPath.nextNode(schemaNodes, i);
            oSchema.Alias = schemaNode.getAttribute("Alias");
            oSchema.Namespace = schemaNode.getAttribute("Namespace");
        }
        //Alias nodes
        refNodes = xPath.selectNodes(xmlDoc, "//edmx:Reference", xmlDoc);
        for (i = 0; i < refNodes.length; i += 1) {
            refNode = xPath.nextNode(refNodes, i);
            aliasNodes = xPath.selectNodes(xmlDoc, "./edmx:Include", refNode);
            if (aliasNodes && aliasNodes.length > 0) {
                aliasNode = xPath.nextNode(aliasNodes, 0);
                if (aliasNode.getAttribute("Alias")) {
                    oAlias[aliasNode.getAttribute("Alias")] = aliasNode.getAttribute("Namespace");
                } else {
                    oAlias[aliasNode.getAttribute("Namespace")] = aliasNode.getAttribute("Namespace");
                }
            }
            annoNodes = xPath.selectNodes(xmlDoc, "./edmx:IncludeAnnotations", refNode);
            if (annoNodes.length > 0) {
                for (j = 0; j < annoNodes.length; j += 1) {
                    annoNode = xPath.nextNode(annoNodes, j);
                    if (annoNode.getAttribute("TargetNamespace")) {
                        sAnnoNameSpace = annoNode.getAttribute("TargetNamespace");
                        if (!oAnnotations[sAnnoNameSpace]) {
                            oAnnotations[sAnnoNameSpace] = {};
                        }
                        oAnnotations[sAnnoNameSpace][annoNode.getAttribute("TermNamespace")] = refNode.getAttribute("Uri");
                    } else {
                        oAnnotations[annoNode.getAttribute("TermNamespace")] = refNode.getAttribute("Uri");
                    }
                }
            }
        }
        if (oAnnotations) {
            mappingList.annotationReferences = oAnnotations;
        }
        mappingList.aliasDefinitions = oAlias;
        //Term nodes
        termNodes = xPath.selectNodes(xmlDoc, "//d:Term", xmlDoc);
        if (termNodes.length > 0) {
            oTerms = {};
            for (nodeIndex = 0; nodeIndex < termNodes.length; nodeIndex += 1) {
                termNode = xPath.nextNode(termNodes, nodeIndex);
                sTermType = replaceWithAlias(termNode.getAttribute("Type"));
                oTerms["@" + oSchema.Alias + "." + termNode.getAttribute("Name")] = sTermType;
            }
            mappingList.termDefinitions = oTerms;
        }
        //Metadata information of all properties
        oMetadataProperties = getAllPropertiesMetadata(oMetadata);
        if (oMetadataProperties.extensions) {
            mappingList.propertyExtensions = oMetadataProperties.extensions;
        }
        //Annotations
        annotationNodes = xPath.selectNodes(xmlDoc, "//d:Annotations ", xmlDoc);
        for (nodeIndex = 0; nodeIndex < annotationNodes.length; nodeIndex += 1) {
            annotationNode = xPath.nextNode(annotationNodes, nodeIndex);
            if (annotationNode.hasChildNodes() === false) {
                continue;
            }
            annotationTarget = annotationNode.getAttribute("Target");
            annotationNamespace = annotationTarget.split(".")[0];
            if (annotationNamespace && oAlias[annotationNamespace]) {
                annotationTarget = annotationTarget.replace(new RegExp(annotationNamespace, ""), oAlias[annotationNamespace]);
            }
            annotation = annotationTarget;
            propertyAnnotation = null;
            if (annotationTarget.indexOf("/") > 0) {
                annotation = annotationTarget.split("/")[0];
                propertyAnnotation = annotationTarget.replace(annotation + "/", "");
            }
            if (!mappingList[annotation]) {
                mappingList[annotation] = {};
            }
            // --- Value annotation of complex types. ---
            if (propertyAnnotation) {
                if (!mappingList.propertyAnnotations) {
                    mappingList.propertyAnnotations = {};
                }
                if (!mappingList.propertyAnnotations[annotation]) {
                    mappingList.propertyAnnotations[annotation] = {};
                }
                mappingList.propertyAnnotations[annotation][propertyAnnotation] = {};
                propertyAnnotationNodes = xPath.selectNodes(xmlDoc, "./d:Annotation", annotationNode);
                for (nodeIndexValue = 0; nodeIndexValue < propertyAnnotationNodes.length; nodeIndexValue += 1) {
                    propertyAnnotationNode = xPath.nextNode(propertyAnnotationNodes, nodeIndexValue);
                    if (propertyAnnotationNode.hasChildNodes() === false) {
                        sTermValue = replaceWithAlias(propertyAnnotationNode.getAttribute("Term"));
                        mappingList.propertyAnnotations[annotation][propertyAnnotation][sTermValue] = getPropertyValueAttributes(propertyAnnotationNode);
                    }
                }
                // --- Annotations ---
            } else {
                targetAnnotation = annotation.replace(oAlias[annotationNamespace], annotationNamespace);
                propertyAnnotationNodes = xPath.selectNodes(xmlDoc, "./d:Annotation", annotationNode);
                for (nodeIndexAnnotation = 0; nodeIndexAnnotation < propertyAnnotationNodes.length; nodeIndexAnnotation += 1) {
                    propertyAnnotationNode = xPath.nextNode(propertyAnnotationNodes, nodeIndexAnnotation);
                    annotationQualifier = propertyAnnotationNode.getAttribute("Qualifier");
                    annotationTerm = replaceWithAlias(propertyAnnotationNode.getAttribute("Term"));
                    if (annotationQualifier) {
                        annotationTerm += "#" + annotationQualifier;
                    }
                    valueAnnotation = getPropertyValue(xmlDoc, propertyAnnotationNode, targetAnnotation);
                    valueAnnotation = setEdmTypes(valueAnnotation, oMetadataProperties.types, annotation, oSchema);
                    mappingList[annotation][annotationTerm] = valueAnnotation;
                }
                // --- Setup of Expand nodes. ---                         
                expandNodes = xPath.selectNodes(xmlDoc, "//d:Annotations[contains(@Target, '" + targetAnnotation + "')]//d:PropertyValue[contains(@Path, '/')]//@Path", xmlDoc);
                for (i = 0; i < expandNodes.length; i += 1) {
                    expandNode = xPath.nextNode(expandNodes, i);
                    path = expandNode.value;
                    if (mappingList.propertyAnnotations) {
                        if (mappingList.propertyAnnotations[annotation]) {
                            if (mappingList.propertyAnnotations[annotation][path]) {
                                continue;
                            }
                        }
                    }
                    pathValues = path.split('/');
                    if (isNavProperty(annotation, pathValues[0], oMetadata)) {
                        if (!mappingList.expand) {
                            mappingList.expand = {};
                        }
                        if (!mappingList.expand[annotation]) {
                            mappingList.expand[annotation] = {};
                        }
                        mappingList.expand[annotation][pathValues[0]] = pathValues[0];
                    }
                }
                expandNodesApplFunc = xPath.selectNodes(xmlDoc, "//d:Annotations[contains(@Target, '" + targetAnnotation + "')]//d:Path[contains(., '/')]", xmlDoc);
                for (i = 0; i < expandNodesApplFunc.length; i += 1) {
                    expandNode = xPath.nextNode(expandNodesApplFunc, i);
                    path = xPath.getNodeText(expandNode);
                    if (mappingList.propertyAnnotations[annotation]) {
                        if (mappingList.propertyAnnotations[annotation][path]) {
                            continue;
                        }
                    }
                    if (!mappingList.expand) {
                        mappingList.expand = {};
                    }
                    if (!mappingList.expand[annotation]) {
                        mappingList.expand[annotation] = {};
                    }
                    pathValues = path.split('/');
                    if (isNavProperty(annotation, pathValues[0], oMetadata)) {
                        if (!mappingList.expand) {
                            mappingList.expand = {};
                        }
                        if (!mappingList.expand[annotation]) {
                            mappingList.expand[annotation] = {};
                        }
                        mappingList.expand[annotation][pathValues[0]] = pathValues[0];
                    }
                }
            }
            this.initialized[sAnnotationUri] = mappingList;
        }
        return mappingList;
    };
}());

}; // end of sap/ushell/components/factsheet/annotation/Mapping.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.factsheet.controls.PictureTileRenderer') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
*/

jQuery.sap.declare("sap.ushell.components.factsheet.controls.PictureTileRenderer");
jQuery.sap.require('sap.m.CustomTileRenderer'); // unlisted dependency retained


/**
 * @class PictureTile renderer. 
 * @static
 */

sap.ushell.components.factsheet.controls.PictureTileRenderer = sap.ui.core.Renderer.extend(sap.m.CustomTileRenderer);

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */

 sap.ushell.components.factsheet.controls.PictureTileRenderer.render = function(oRm, oControl) {

	jQuery.sap.log.debug("PictureTileRenderer :: begin rendering");
	
	oRm.write("<div ");
	oRm.writeControlData(oControl);

	oRm.addClass("sapCaUiPictureTile");
	oRm.writeClasses();

	oRm.write(">");
	
	
	oRm.write("<div");
	oRm.addClass("sapCaUiPictureTileContent");
	oRm.writeClasses();
	oRm.write(">");

	oRm.write("<div id='" + oControl.getId() + "-wrapper'>");
	
	oRm.renderControl(oControl._oDeletePictureButton);
	
	this._renderContent(oRm, oControl);
	oRm.write("</div>");
	
	oRm.write("</div></div>");
};

sap.ushell.components.factsheet.controls.PictureTileRenderer._renderContent = function(rm, oTile) {
	rm.renderControl(oTile.getContent());
};

}; // end of sap/ushell/components/factsheet/controls/PictureTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.factsheet.controls.PictureViewerRenderer') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
*/

jQuery.sap.declare("sap.ushell.components.factsheet.controls.PictureViewerRenderer");

jQuery.sap.require('sap.m.TileContainerRenderer'); // unlisted dependency retained



/**
 * @class PictureViewer renderer.
 * @static
 */
sap.ushell.components.factsheet.controls.PictureViewerRenderer = {};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 *
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ushell.components.factsheet.controls.PictureViewerRenderer.render = function(oRm, oControl) {
	// write the HTML into the render manager	
	jQuery.sap.log.debug("PictureViewerRenderer :: begin rendering");

	sap.m.TileContainerRenderer.render(oRm, oControl);

    jQuery.sap.log.debug("PictureViewerRenderer :: end rendering");
};

}; // end of sap/ushell/components/factsheet/controls/PictureViewerRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.factsheet.factory.ThingInspector') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview This file contains an annotation parser for fact sheets.
 */

(function () {
    "use strict";
    /*global sap, jQuery, $, setTimeout, window, console, history */

    jQuery.sap.declare("sap.ushell.components.factsheet.factory.ThingInspector");

    sap.ushell.components.factsheet.factory = (function () {

        jQuery.sap.require("sap.suite.ui.commons.UnifiedThingInspector");
        jQuery.sap.require("sap.ushell.components.factsheet.annotation.Mapping");
        jQuery.sap.require("sap.ui.vbm.library");

        var oTI, oMapping = {}, aAllFacets = [], oLinkAuthorised = {}, checkLinks, callInteropService, getSemObjectsFromAnnotation,
            getServiceFromUri, getEntitySetFromUri, getEntitySetFromType, getEntityType, getAssociation,
            getNavEntitySet, getAssociationMultiplicity, getExpand, propertyPartsWithStrings, newJSONModels = {}, newModelValue,
            dataField, labelBinding, getEntityKeyFromUri, getKeyProperty, navigationBinding, columnHAlign, showHTML,
            thingInspectorFactory, searchObj, fieldBinding, formLayoutFactory, facetFactory, itemListFactory, oLocale,
            chartControlFactory, getTeaserTileHeight, getFieldSumsByPriority, kpiTileFactory, getTIDescription, getImportanceOfRecord,
            getNavTypeForNavPath, FACTSHEET = "displayFactSheet";

        // Until a formatter is available to short numbers for the KPIs the following workaround does this
        // Begin workaround
        jQuery.sap.require("sap.ui.base.Object");
        jQuery.sap.require("sap.ui.core.format.NumberFormat");

        oLocale = sap.ui.getCore().getConfiguration().getFormatSettings().getFormatLocale();
        if (sap.ui.getCore().getConfiguration().getLanguage() === "ZH") {
            oLocale = new sap.ui.core.Locale("zh_CN");
        }

        function isNegativeValue(value) {
            return value < 0 ? true : false;
        }

        function toPositiveNumberWithoutDecimals(value) {
            var result = Number(value).toFixed(0);
            if (isNegativeValue(value)) {
                result = Number(result) * -1;
            }
            return result;
        }

        function kpiValueFormatter(value, fractionDigits) {
            var result, oRegExp, sDigits, oNumberFormatter;
            if (!value) {
                return "";
            }
            oRegExp = new RegExp(sap.ui.core.format.NumberFormat.oDefaultFloatFormat.groupingSeparator, "g");
            if (fractionDigits >= 0) {
                fractionDigits = parseInt(fractionDigits, 10);
                oNumberFormatter = sap.ui.core.format.NumberFormat.getFloatInstance({minFractionDigits: fractionDigits, maxFractionDigits: fractionDigits}, oLocale);
            } else {
                oNumberFormatter = sap.ui.core.format.NumberFormat.getFloatInstance({minFractionDigits: 0, maxFractionDigits: 99}, oLocale);
            }
            result = oNumberFormatter.format(value);
            sDigits = result.replace(/[\D]/g, "");
            if (sDigits && sDigits.length > 6) {
                value = value.replace(oRegExp, "");
                if (toPositiveNumberWithoutDecimals(value) < 1000) {
                    //show integer part only without a fraction part
                    return sap.ui.core.format.NumberFormat.getIntegerInstance().format(value);
                }
                oNumberFormatter = sap.ui.core.format.NumberFormat.getFloatInstance({minFractionDigits: 1, maxFractionDigits: 1, style: "short"}, oLocale);
                return oNumberFormatter.format(value);
            } else {
                return result;
            }
        }
        //End workaround
        // HANA Live
        function fnChange() {
            var sProperty, sPropertyValue, oUrl = "", sPath, oModel, aUrl, aParameters, i, j, sNewValue, sPropertyName, sValueFormat;
            sPath = this.getElementBinding().sPath.split("/")[1];
            oModel = this.getModel();
            aUrl = this.mBindingInfos.value.parameters;
            aParameters = this.mBindingInfos.value.parts;
            for (i = 0; i < aUrl.length; i += 1) {
                oUrl = oUrl + aUrl[i].string;
            }
            for (j = 0; j < aParameters.length; j += 1) {
                sProperty = aParameters[j].path;
                sPropertyName = "{" + sProperty + "}";
                sPropertyValue = oModel.oData[sPath][sProperty];
                oUrl = oUrl.replace(sPropertyName, sPropertyValue);
            }
            sNewValue = newModelValue(oUrl);
            if ($.isNumeric(sNewValue)) {
                sValueFormat = this.mBindingInfos.value.parts.filter(function (obj) {
                    return (obj.path === sProperty);
                });
                sNewValue = kpiValueFormatter(sNewValue, sValueFormat[0].type.oFormatOptions.maxFractionDigits);
                this.setDoubleFontSize(true);
            }
            this.setValue(sNewValue);
            this.getElementBinding().detachChange(fnChange);
        }

        getTIDescription = function () {
            var sTIDescription = "";
            if (oTI.getName() && oTI.getDescription()) {
                sTIDescription = oTI.getName() + ", " + oTI.getDescription();
            } else if (oTI.getName() && !oTI.getDescription()) {
                sTIDescription = oTI.getName();
            } else if (!oTI.getName() && oTI.getDescription()) {
                sTIDescription = oTI.getDescription();
            }
            return sTIDescription;
        };

        getServiceFromUri = function (sUri) {
            var aUriParts, sService, i;
            aUriParts = sUri.slice(1).split("/");
            sService = "/";
            for (i = 0; i < aUriParts.length; i += 1) {
                if ((aUriParts[i].indexOf("(") > 0) && (aUriParts[i].indexOf("sid(") < 0)) {
                    break;
                } else {
                    sService += aUriParts[i] + "/";
                }
            }
            return sService;
        };

        getEntitySetFromUri = function (sUri, oModel) {
            var sEntitySet, sEntityUri, aServiceParts, sNavProperty;
            sEntityUri = sUri.slice(oModel.sServiceUrl.length + 1);
            if (sEntityUri.indexOf("/") >= 0) {
                aServiceParts = sEntityUri.split("/");
                sNavProperty = aServiceParts[aServiceParts.length];
                sEntitySet = aServiceParts[aServiceParts.length - 1];
                if (sEntitySet.indexOf("(") >= 0) {
                    sEntitySet = sEntitySet.slice(sEntitySet.indexOf("("));
                }
                sEntitySet = this.getNavEntitySet(sEntitySet, sNavProperty, oModel.getMetadata());
            } else {
                if (sEntityUri.indexOf("(") >= 0) {
                    sEntitySet = sEntityUri.slice(0, sEntityUri.indexOf("("));
                } else {
                    if (sEntityUri.indexOf("?") >= 0) {
                        sEntitySet = sEntityUri.slice(0, sEntityUri.indexOf("?"));
                    } else {
                        sEntitySet = sEntityUri;
                    }
                }
            }
            return sEntitySet;
        };

        getEntityKeyFromUri = function (sUri, oModel) {
            var sEntityUri, sKey = "", oMetadata, sEntityType;
            sEntityUri = sUri.slice(oModel.sServiceUrl.length + 1);
            if (sEntityUri.indexOf("(") >= 0) {
                sKey = sEntityUri.slice(sEntityUri.indexOf("(") + 1, sEntityUri.indexOf(")"));
                if (sKey.indexOf("=") <= 0) {
                    // There is just one key property and the shortened notation was used, get name of the key property
                    oMetadata = oModel.getServiceMetadata();
                    sEntityType = getEntityType(getEntitySetFromUri(sUri, oModel), oMetadata);
                    sKey = getKeyProperty(sEntityType, oMetadata) + "=" + sKey;
                }
            }
            return sKey;
        };

        getKeyProperty = function (sEntityType, oMetadata) {
            var i, metadataSchema, j;
            for (i = oMetadata.dataServices.schema.length - 1; i >= 0; i -= 1) {
                metadataSchema = oMetadata.dataServices.schema[i];
                if (metadataSchema.namespace === sEntityType.slice(0, sEntityType.lastIndexOf("."))) {
                    for (j = 0; j < metadataSchema.entityType.length; j += 1) {
                        if (metadataSchema.entityType[j].name === sEntityType.slice(sEntityType.lastIndexOf(".") + 1)) {
                            return metadataSchema.entityType[j].key.propertyRef[0].name;
                        }
                    }
                }
            }
        };

        getEntitySetFromType = function (sEntityType, oMetadata) {
            var i, metadataSchema, aEntitySets, j;
            for (i = oMetadata.dataServices.schema.length - 1; i >= 0; i -= 1) {
                metadataSchema = oMetadata.dataServices.schema[i];
                if (metadataSchema.entityContainer) {
                    aEntitySets = metadataSchema.entityContainer[0].entitySet;
                    for (j = aEntitySets.length - 1; j >= 0; j -= 1) {
                        if (aEntitySets[j].entityType === sEntityType) {
                            return aEntitySets[j].name;
                        }
                    }
                }
            }
        };

        getEntityType = function (sEntitySet, oMetadata, bWithoutNamespace) {
            var i, metadataSchema, aEntitySets, j, sReturn;
            for (i = oMetadata.dataServices.schema.length - 1; i >= 0; i -= 1) {
                metadataSchema = oMetadata.dataServices.schema[i];
                if (metadataSchema.entityContainer) {
                    aEntitySets = metadataSchema.entityContainer[0].entitySet;
                    for (j = aEntitySets.length - 1; j >= 0; j -= 1) {
                        if (aEntitySets[j].name === sEntitySet) {
                            if (bWithoutNamespace) {
                                sReturn = aEntitySets[j].entityType.slice(metadataSchema.namespace.length + 1);
                            } else {
                                sReturn = aEntitySets[j].entityType;
                            }
                            return sReturn;
                        }
                    }
                }
            }
        };

        getAssociation = function (sEntityType, sNavProperty, oMetadata) {
            var aNsEntityType, i, metadataSchema, sNameSpace, k, j, oNavProperty;
            aNsEntityType = sEntityType.split(".");
            for (i = oMetadata.dataServices.schema.length - 1; i >= 0; i -= 1) {
                metadataSchema = oMetadata.dataServices.schema[i];
                sNameSpace = aNsEntityType[0];
                if (aNsEntityType.length > 2) {
                    for (k = 1; k < aNsEntityType.length - 1; k += 1) {
                        sNameSpace += "." + aNsEntityType[k];
                    }
                }
                if (metadataSchema.namespace === sNameSpace) {
                    for (j = 0; j < metadataSchema.entityType.length; j += 1) {
                        if (metadataSchema.entityType[j].name === aNsEntityType[aNsEntityType.length - 1]) {
                            if (metadataSchema.entityType[j].navigationProperty) {
                                for (k = 0; k < metadataSchema.entityType[j].navigationProperty.length; k += 1) {
                                    if (metadataSchema.entityType[j].navigationProperty[k].name === sNavProperty) {
                                        oNavProperty = metadataSchema.entityType[j].navigationProperty[k];
                                        return {name: oNavProperty.relationship, toRole: oNavProperty.toRole};
                                    }
                                }
                            }
                        }
                    }
                }
            }
        };

        getNavEntitySet = function (sEntitySet, sNavProperty, oMetadata) {
            var sEntityType, termTargetType, oAssociation, i, metadataSchema, j, sAssociationSet, k;
            sEntityType = getEntityType(sEntitySet, oMetadata);
            if (sNavProperty.charAt(0) === "@") {
                if (oMapping.termDefinitions && oMapping.termDefinitions[sNavProperty]) {
                    termTargetType = oMapping.termDefinitions[sNavProperty];
                    if (termTargetType.indexOf("Collection") >= 0) {
                        termTargetType = termTargetType.slice(termTargetType.indexOf("(") + 1, termTargetType.indexOf(")"));
                    }
                    return getEntitySetFromType(termTargetType, oMetadata);
                }
            } else {
                oAssociation = getAssociation(sEntityType, sNavProperty, oMetadata);
                if (oAssociation) {
                    for (i = oMetadata.dataServices.schema.length - 1; i >= 0; i -= 1) {
                        metadataSchema = oMetadata.dataServices.schema[i];
                        if (metadataSchema.entityContainer && metadataSchema.entityContainer[0].associationSet) {
                            for (j = metadataSchema.entityContainer[0].associationSet.length - 1; j >= 0; j -= 1) {
                                sAssociationSet = metadataSchema.entityContainer[0].associationSet[j];
                                if (sAssociationSet.association === oAssociation.name) {
                                    for (k = 0; k <  sAssociationSet.end.length; k += 1) {
                                        if (sAssociationSet.end[k].role === oAssociation.toRole) {
                                            return sAssociationSet.end[k].entitySet;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        };

        getAssociationMultiplicity = function (sEntitySet, sNavProperty, oMetadata) {
            var sEntityType, oAssociation, i, metadataSchema, j, sAssociation, k, sEntityTypeName, sToRoleName;
            sEntityType = getEntityType(sEntitySet, oMetadata);
            sEntityTypeName = sEntityType.split(".")[sEntityType.split(".").length - 1];
            oAssociation = getAssociation(sEntityType, sNavProperty, oMetadata);
            if (oAssociation) {
                for (i = oMetadata.dataServices.schema.length - 1; i >= 0; i -= 1) {
                    metadataSchema = oMetadata.dataServices.schema[i];
                    for (j = 0; j < metadataSchema.entityType.length && !sToRoleName; j += 1) {
                        if (metadataSchema.entityType[j].name === sEntityTypeName) {
                            for (k = 0; k < metadataSchema.entityType[j].navigationProperty.length; k += 1) {
                                if (metadataSchema.entityType[j].navigationProperty[k].name === sNavProperty) {
                                    sToRoleName = metadataSchema.entityType[j].navigationProperty[k].toRole;
                                    break;
                                }
                            }
                        }
                    }
                    for (j = metadataSchema.association.length - 1; j >= 0; j -= 1) {
                        sAssociation = metadataSchema.association[j];
                        if (metadataSchema.namespace + "." + sAssociation.name === oAssociation.name) {
                            for (k = 0; k <  sAssociation.end.length; k += 1) {
                                if (sAssociation.end[k].role === sToRoleName) {
                                    return sAssociation.end[k].multiplicity;
                                }
                            }
                        }
                    }
                }
            } else {
                jQuery.sap.log.error("\"" + sNavProperty + "\" wasn't found in the metadata document. Check whether the corresponding search connector is active.");
                return 0;
            }
        };

        getExpand = function (sEntitySet, oMetadata) {
            var oExpand, oExpandEntities, aExpand, elem;
            oExpand = {};
            if (oMapping.expand) {
                if (oMapping.expand[getEntityType(sEntitySet, oMetadata)]) {
                    oExpandEntities = oMapping.expand[getEntityType(sEntitySet, oMetadata)];
                    aExpand = [];
                    for (elem in oExpandEntities) {
                        if (oExpandEntities.hasOwnProperty(elem)) {
                            aExpand.push(oExpandEntities[elem]);
                        }
                    }
                    oExpand.expand = aExpand.join(", ");
                }
            }
            return oExpand;
        };

        getNavTypeForNavPath = function (sNavPath, sEntityType, oMetadata) {
            var m, metadataSchema, j, k, l, n;
            for (m = oMetadata.dataServices.schema.length - 1; m >= 0; m -= 1) {
                metadataSchema = oMetadata.dataServices.schema[m];
                for (j = 0; j < metadataSchema.entityType.length; j += 1) {
                    if (metadataSchema.entityType[j].name === sEntityType.split(".")[sEntityType.split(".").length - 1]) {
                        for (k = 0; k < metadataSchema.entityType[j].navigationProperty.length; k += 1) {
                            if (metadataSchema.entityType[j].navigationProperty[k].name === sNavPath) {
                                for (l = 0; l < metadataSchema.association.length; l += 1) {
                                    for (n = metadataSchema.association[l].end.length - 1; n >= 0; n -= 1) {
                                        if (metadataSchema.association[l].end[n].role === metadataSchema.entityType[j].navigationProperty[k].toRole) {
                                            return (metadataSchema.association[l].end[n].type);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        };

        /* UI Renderer */

        propertyPartsWithStrings = function (aParts, oFormatter) {
            var oBinding = {}, j;
            oBinding.parts = [];
            oBinding.parameters = [];
            for (j = aParts.length - 1; j >= 0; j -= 1) {
                if (aParts[j].Type === "Path") {
                    if (aParts[j].EdmType) {
                        switch (aParts[j].EdmType) {
                        case "Edm.DateTimeOffset":
                        case "Edm.DateTime":
                            oBinding.parts.push({path: aParts[j].Value, type: new sap.ui.model.type.DateTime()});
                            break;
                        case "Edm.Time":
                            oBinding.parts.push({path: aParts[j].Value + "/ms", type: new sap.ui.model.type.Time({
                                source: {
                                    pattern: "timestamp"
                                }
                            })});
                            break;
                        case "Edm.Date":
                            oBinding.parts.push({path: aParts[j].Value, type: new sap.ui.model.type.Date({"UTC": true})});
                            break;
                        case "Edm.Decimal":
                        case "Edm.Double":
                        case "Edm.Single":
                            oBinding.parts.push({path: aParts[j].Value, type: new sap.ui.model.type.Float()});
                            break;
                        case "Edm.Int16":
                        case "Edm.Int32":
                        case "Edm.Int64":
                            oBinding.parts.push({path: aParts[j].Value, type: new sap.ui.model.type.Integer()});
                            break;
                        default:
                            oBinding.parts.push({path: aParts[j].Value});
                            break;
                        }
                    } else {
                        oBinding.parts.push({path: aParts[j].Value});
                    }
                } else if (aParts[j].Type === "String") {
                    // HANA Live: set strings as parameter
                    oBinding.parameters.unshift({string: aParts[j].Value});
                }
            }
            oBinding.formatter = function () {
                var sValue = "", sPathIndex, k, sLastValue, aValueLastLen, sLastSeparator = "", bEncodeUriComponent = false,
                    aHasValueCount = 0, aBracketSeparatorCount = 0;
                if (arguments && arguments.length >= 1) {
                    sPathIndex = arguments.length - 1;
                    sLastValue = "";
                    aValueLastLen = 0;
                    if (aParts && aParts[0] && (aParts[0].Type === "String") && (aParts[0].Value.substr(0, 1) === "#")) {
                        bEncodeUriComponent = true;
                    }
                    for (k = 0; k < aParts.length; k += 1) {
                        if (aParts[k].Type === "Path") {
                            sLastValue = arguments[sPathIndex];
                            if (!sLastValue || (sLastValue.length === 0)) {
                                if (sValue.length > aValueLastLen) {
                                    // Remove last separator if argument is empty
                                    if (sValue.indexOf("(") > aValueLastLen) {
                                        sValue = sValue.substr(0, aValueLastLen);
                                    } else {
                                        sValue = sValue.substr(0, aValueLastLen);
                                        sLastValue = sValue;
                                    }
                                }
                            } else {
                                if (bEncodeUriComponent) {
                                    sLastValue = encodeURIComponent(sLastValue);
                                }
                                sValue += sLastValue;
                                aHasValueCount += 1;
                            }
                            sPathIndex -= 1;
                            aValueLastLen = sValue.length;
                        } else {
                            aValueLastLen = sValue.length;
                            sLastSeparator = aParts[k].Value;
                            if (sLastSeparator.indexOf("(") !== -1) {
                                aBracketSeparatorCount += 1;
                            }
                            if ((sLastValue && sLastValue.length > 0) || (sLastSeparator.indexOf("(") !== -1) ||
                                    (sLastSeparator && (sLastSeparator.substr(0, 1) === "#"))) {
                                // only add separator if last argument was not empty
                                sValue += aParts[k].Value;
                            } else {
                                sLastSeparator = "";
                            }
                        }
                    }
                    if (oFormatter) {
                        sValue = oFormatter(sValue);
                    }
                    sValue = sValue.trim();
                    if ((aHasValueCount === 1) && (aBracketSeparatorCount > 0) && (sValue.substr(0, 1) === "(") && (sValue.substr(-1) === ")")) {
                        // Remove brackets if it's the only non-empty value in brackets
                        sValue = sValue.substr(1, sValue.length - 2);
                    }
                    return sValue.trim();
                }
            };
            return oBinding;
        };

        searchObj = function (obj, property) {
            var key;
            for (key in obj) {
                if (obj.hasOwnProperty(key)) {
                    if (key === "__metadata") {
                        continue;
                    } else if (key === property) {
                        return obj[key];
                    } else if (typeof obj[key] === "object") {
                        return searchObj(obj[key], property);
                    }
                }
            }
        };

        newModelValue = function (sUrl) {
            var iLastSlash, newUrl, newProp, newJSONModel = {}, returnValue;
            iLastSlash = sUrl.lastIndexOf("/");
            newUrl = sUrl.slice(0, iLastSlash);
            newProp = sUrl.slice(iLastSlash + 1);
            if (!newJSONModels[sUrl]) {
                newJSONModel = new sap.ui.model.json.JSONModel();
                newJSONModel.loadData(newUrl, null, false);
                newJSONModels[sUrl] = newJSONModel.getData();
            } else {
                newJSONModel = newJSONModels[sUrl];
            }
            if (newJSONModels[sUrl] && newJSONModels[sUrl].d) {
                if (!newJSONModels[sUrl].d[newProp]) {
                    returnValue = searchObj(newJSONModels[sUrl].d, newProp);
                } else {
                    returnValue = newJSONModels[sUrl].d[newProp];
                }
            }
            return returnValue;
        };

        dataField = function (oField, sEntityType, oMetadata, oFacet) {
            var oControl, oBinding, sNavProperty, oUrl, oText, oVL, SemanticObject, sIntend;
            oControl = new sap.ui.core.Control();
            oBinding = fieldBinding(oField.Value, oField.EdmType, sEntityType);
            if (oField.Value && oField.Value["com.sap.vocabularies.UI.v1.IsImageURL"]) {
                oControl = new sap.m.Image({height: "50px"});
                if (oBinding.BindingInfo) {
                    oControl.bindProperty("src", oBinding.BindingInfo);
                } else {
                    oControl.setProperty("src", oBinding.String);
                }
            } else {
                if (oField.UrlRef || oField.Url || (oField.Target && oField.Target.Path)) {
                    oControl = new sap.m.Link({ wrapping: true });
                } else {
                    oControl = new sap.m.Text();
                    if (oField.EdmType === "Edm.Decimal" || oField.EdmType === "Edm.Double" || oField.EdmType === "Edm.Single" ||
                            oField.EdmType === "Edm.Int16" || oField.EdmType === "Edm.Int32" || oField.EdmType === "Edm.Int64") {
                        oControl.setTextAlign(sap.ui.core.TextAlign.End);
                    }
                }
                oControl.addStyleClass("sapFactsheetUtiDataField");
                if (oBinding.BindingInfo) {
                    oControl.bindProperty("text", oBinding.BindingInfo);
                } else {
                    oControl.setProperty("text", oBinding.String);
                }
            }
            if ((oField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldWithNavigation") && oMetadata) {
                sNavProperty = oField.Target.Path;
                if (oMapping[sEntityType][sNavProperty.slice(1)]) {
                    if (sNavProperty.charAt(0) === "@") {
                        if (sNavProperty.indexOf("/") < 0) {
                            oUrl = oMapping[sEntityType][sNavProperty.slice(1)].UrlRef;
                        } else {
                            oUrl = oMapping[sEntityType][sNavProperty.slice(1, sNavProperty.indexOf("/"))].UrlRef;
                        }
                        oControl.bindProperty("href", navigationBinding(oUrl));
                    }
                }
                oControl.attachPress(function (oEvent) {
                    return false;
                });
            }
            if (oField.RecordType === "com.sap.vocabularies.UI.v1.DataFieldWithUrl") {
                if (oField.Url.String) {
                    oControl.setHref(oField.Url.String);
                } else {
                    oControl.bindProperty("href", navigationBinding(oField.Url));
                    //Workaround: no Link if no authority
                    oText = new sap.m.Text({
                        wrapping: true
                    });
                    if (oBinding.BindingInfo) {
                        oText.bindProperty("text", oBinding.BindingInfo);
                    } else {
                        oText.setProperty("text", oBinding.String);
                    }
                    oControl.setVisible(false);
                    oVL = new sap.ui.layout.VerticalLayout();
                    oVL.addContent(oControl);
                    oVL.addContent(oText);
                    if (!aAllFacets[aAllFacets.indexOf(oFacet)].Links) {
                        aAllFacets[aAllFacets.indexOf(oFacet)].Links = [];
                    }
                    if (oField.Url.Apply) {
                        SemanticObject = oField.Url.Apply.Parameters[0].Value.slice(oField.Url.Apply.Parameters[0].Value.indexOf("#") + 1, oField.Url.Apply.Parameters[0].Value.indexOf("-"));
                        sIntend = oField.Url.Apply.Parameters[0].Value.slice(oField.Url.Apply.Parameters[0].Value.indexOf("#") + 1, oField.Url.Apply.Parameters[0].Value.indexOf("?"));
                    }
                    aAllFacets[aAllFacets.indexOf(oFacet)].Links.push({
                        sSemanticObject: SemanticObject,
                        sIntend: sIntend,
                        oVL: oVL
                    });
                    //Workaround: no Link if no authority
                }
            }
            //Workaround: no Link if no authority
            if (oVL) {
                return oVL;
            } else {
                return oControl;
            }
            //Workaround: no Link if no authority
        };

        labelBinding = function (oField, oLabelProperties, aPropExtensions, bWithColon) {
            var oLabel, sColon = "", sLabel = "", oPropertyExt, j, k, oParameter;
            oLabel = new sap.m.Label(oLabelProperties);
            oLabel.addStyleClass("sapFactsheetUtiLabel");
            if (bWithColon) {
                sColon = ":";
            }
            if (oField.Label) {
                if (oField.Label.String) {
                    oLabel.setText(oField.Label.String.trim() + sColon);
                    oLabel.setTooltip(oField.Label.String.trim());
                } else {
                    if (oField.Label.Path) {
                        oLabel.bindProperty("text", oField.Label.Path);
                        oLabel.bindProperty("tooltip", oField.Label.Path);
                    }
                }
            } else {
                if (oField.Value) {
                    if (oField.Value.Path && aPropExtensions) {
                        oPropertyExt = aPropExtensions[oField.Value.Path];
                        for (j in oPropertyExt) {
                            if (oPropertyExt.hasOwnProperty(j)) {
                                if (j === "http://www.sap.com/Protocols/SAPData") {
                                    if (oPropertyExt[j].label) {
                                        sLabel = oPropertyExt[j].label;
                                        break;
                                    }
                                }
                            }
                        }
                    } else if (oField.Value.Apply && (oField.Value.Apply.Name === "odata.concat")) {
                        for (k in oField.Value.Apply.Parameters) {
                            if (oField.Value.Apply.Parameters.hasOwnProperty(k)) {
                                oParameter = oField.Value.Apply.Parameters[k];
                                if (oParameter.Type === "Path") {
                                    oPropertyExt = aPropExtensions[oParameter.Value];
                                    for (j in oPropertyExt) {
                                        if (oPropertyExt.hasOwnProperty(j)) {
                                            if (j === "http://www.sap.com/Protocols/SAPData") {
                                                if (oPropertyExt[j].label) {
                                                    sLabel = oPropertyExt[j].label;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                    break;
                                }
                            }
                        }
                    }
                    oLabel.setText(sLabel + sColon);
                    oLabel.setTooltip(sLabel);
                }
            }
            return oLabel;
        };

        fieldBinding = function (oFieldValue, sEdmType, sEntityType) {
            var oBinding = {}, oPropAnnotations, aParts, aPartsWithPropAnnotations = [], j, oUrl, sUrlProperties, aParameters = [],
                aParams, aTemplProperties, i, aUrlPathProperties, oParaValue, oParam, fnType, aTextParts = [], getPropAnnotations;
            getPropAnnotations = function (sEntityType, attribute1, attribute2) {
                var oPropAnnotations, result = {};
                oPropAnnotations = oMapping.propertyAnnotations[sEntityType];
                if (oPropAnnotations && oPropAnnotations[attribute1] && oPropAnnotations[attribute1][attribute2]) {
                    if (oPropAnnotations[attribute1][attribute2].Path) {
                        result.Type = "Path";
                        result.Value = oPropAnnotations[attribute1][attribute2].Path;
                    } else {
                        result.Type = "String";
                        result.Value = oPropAnnotations[attribute1][attribute2].String;
                    }
                }
                return result;
            };
            if (!oFieldValue) {
                return false;
            }
            if (oFieldValue.Apply) {  //apply function
                if (oFieldValue.Apply.Name === "odata.concat") {
                    if (sEntityType && oMapping.propertyAnnotations && oMapping.propertyAnnotations[sEntityType]) {
                        aParts = oFieldValue.Apply.Parameters;
                        for (j = 0; j < aParts.length; j += 1) {
                            aPartsWithPropAnnotations.push(aParts[j]);
                            if (aParts[j].Type === "Path") {
                                oPropAnnotations = getPropAnnotations(sEntityType, aParts[j].Value, "Org.OData.Measures.V1.ISOCurrency");
                                if (!$.isEmptyObject(oPropAnnotations)) {
                                    aPartsWithPropAnnotations.push({Type: "String", Value: " "});
                                    aPartsWithPropAnnotations.push({Type: oPropAnnotations.Type, Value: oPropAnnotations.Value});
                                }
                                oPropAnnotations = getPropAnnotations(sEntityType, aParts[j].Value, "Org.OData.Measures.V1.Unit");
                                if (!$.isEmptyObject(oPropAnnotations)) {
                                    aPartsWithPropAnnotations.push({Type: "String", Value: " "});
                                    aPartsWithPropAnnotations.push({Type: oPropAnnotations.Type, Value: oPropAnnotations.Value});
                                }
                            }
                        }
                        oBinding.BindingInfo = propertyPartsWithStrings(aPartsWithPropAnnotations);
                    } else {
                        oBinding.BindingInfo = propertyPartsWithStrings(oFieldValue.Apply.Parameters);
                    }
                }
            } else {  //property path 
                if (oFieldValue.Path) {
                    if (oFieldValue.Path.charAt(0) === "@") {  //property path with navigation defined in annotation
                        oUrl = oMapping[sEntityType][oFieldValue.Path.slice(1, oFieldValue.Path.indexOf("/"))].UrlRef;
                        sUrlProperties = oFieldValue.Path.slice(oFieldValue.Path.indexOf("/") + 1);
                        if (oUrl && oUrl.Apply) {
                            aParams = oUrl.Apply.Parameters;
                            switch (oUrl.Apply.Name) {
                            case "odata.concat":
                                aParameters = aParams;
                                aParameters.push({Type: "String", Value: "/" + sUrlProperties});
                                break;
                            case "odata.fillUriTemplate":
                                aTemplProperties = aParams[0].Value.split("{");
                                for (i in aTemplProperties) {
                                    if (aTemplProperties.hasOwnProperty(i)) {
                                        if (aTemplProperties[i].indexOf("}") < 0) {
                                            aParameters.push({Type: "String", Value: aTemplProperties[i]});
                                        } else {
                                            aUrlPathProperties = aTemplProperties[i].split("}");
                                            for (j = 1; j < aParams.length; j += 1) {
                                                if (aParams[j].Name === aUrlPathProperties[0]) {
                                                    oParaValue = aParams[j].Value;
                                                    if (oParaValue.Path) {
                                                        aParameters.push({Type: "Path", Value: oParaValue.Path});
                                                    } else {
                                                        if (oParaValue.Apply && oParaValue.Apply.Name && (oParaValue.Apply.Name.toLowerCase() === "odata.uriencode")) {
                                                            oParam = oParaValue.Apply.Parameters[0];
                                                            aParameters.push({Type: oParam.Type, Value: encodeURIComponent(oParam.Value)});
                                                            // HANA Live - put property as string to parameters (later needed for constructing URL)
                                                            aParameters.push({Type: "String", Value: "{" + encodeURIComponent(oParam.Value) + "}"});
                                                        }
                                                    }
                                                }
                                            }
                                            aParameters.push({Type: "String", Value: aUrlPathProperties[1]});
                                        }
                                    }
                                }
                                aParameters.push({Type: "String", Value: "/" + sUrlProperties});
                                //HANA Live
                                oBinding.fnChange = fnChange;
                                break;
                            default:
                                break;
                            }
                            oBinding.BindingInfo = propertyPartsWithStrings(aParameters, newModelValue);
                        } else {
                            if (oUrl && oUrl.Path) {
                                aParameters.push({Type: "Path", Value: oUrl.Path}, {Type: "String", Value: "/" + sUrlProperties});
                                oBinding.BindingInfo = propertyPartsWithStrings(aParameters, newModelValue);
                            } else {
                                if (oUrl && oUrl.String) {
                                    oBinding.String = newModelValue(oUrl.String + "/" + sUrlProperties);
                                }
                            }
                        }
                    } else {   //property path defined in the model
                        oBinding.BindingInfo = {};
                        switch (sEdmType) {
                        case "Edm.DateTimeOffset":
                        case "Edm.DateTime":
                            oBinding.BindingInfo = {path: oFieldValue.Path, type: new sap.ui.model.type.DateTime()};
                            break;
                        case "Edm.Time":
                            oBinding.BindingInfo = {path: oFieldValue.Path + "/ms", type: new sap.ui.model.type.Time({
                                source: {
                                    pattern: "timestamp"
                                }
                            })};
                            break;
                        case "Edm.Date":
                            oBinding.BindingInfo = {path: oFieldValue.Path, type: new sap.ui.model.type.Date({"UTC": true})};
                            break;
                        case "Edm.Decimal":
                        case "Edm.Double":
                        case "Edm.Single":
                        case "Edm.Int16":
                        case "Edm.Int32":
                        case "Edm.Int64":
                            if ((sEdmType === "Edm.Decimal") || (sEdmType === "Edm.Double") || (sEdmType === "Edm.Single")) {
                                fnType = new sap.ui.model.type.Float();
                            } else if ((sEdmType === "Edm.Int16") || (sEdmType === "Edm.Int32") || (sEdmType === "Edm.Int64")) {
                                fnType = new sap.ui.model.type.Integer();
                            }
                            if (oMapping.propertyAnnotations) {
                                aTextParts.push({Type: "Path", Value: oFieldValue.Path, EdmType: sEdmType}, {Type: "String", Value: " "});
                                oPropAnnotations = getPropAnnotations(sEntityType, oFieldValue.Path, "Org.OData.Measures.V1.ISOCurrency");
                                if (!$.isEmptyObject(oPropAnnotations)) {
                                    aTextParts.push({Type: oPropAnnotations.Type, Value: oPropAnnotations.Value});
                                }
                                oPropAnnotations = getPropAnnotations(sEntityType, oFieldValue.Path, "Org.OData.Measures.V1.Unit");
                                if (!$.isEmptyObject(oPropAnnotations)) {
                                    aTextParts.push({Type: oPropAnnotations.Type, Value: oPropAnnotations.Value});
                                }
                                oBinding.BindingInfo = propertyPartsWithStrings(aTextParts);
                            } else {
                                oBinding.BindingInfo = {path: oFieldValue.Path, type: fnType};
                            }
                            break;
                        default:
                            oBinding.BindingInfo = {path: oFieldValue.Path};
                            break;
                        }
                    }
                } else {  //hard coded string in annotation
                    if (oFieldValue.String) {
                        oBinding.String = oFieldValue.String;
                    }
                }
            }
            return oBinding;
        };

        navigationBinding = function (oUrl) {
            var aUrlParts = [], aParams, aTemplateParts, j, aTemplValueParts, oUrlParts = {}, oParaValue, oResolution, sSystem;
            if (oUrl && oUrl.Apply) {
                aParams = oUrl.Apply.Parameters;
                switch (oUrl.Apply.Name) {
                case "odata.fillUriTemplate":
                    aParams[0].Value = aParams[0].Value.trim();
                    aTemplateParts = aParams[0].Value.split("{");
                    for (j = 0; j < aTemplateParts.length; j += 1) {
                        if (aTemplateParts[j].indexOf("}") < 0) {
                            aUrlParts.push({"Value" : aTemplateParts[j], "Type" : "String"});
                        } else {
                            aTemplValueParts = aTemplateParts[j].split("}");
                            oUrlParts = {};
                            oUrlParts.Value = aTemplValueParts[0];
                            oUrlParts.Type = "Path";
                            for (j = 1; j < aParams.length; j += 1) {
                                if (aParams[j].Name === oUrlParts.Value) {
                                    oParaValue = aParams[j].Value;
                                    if (oParaValue.Path) {
                                        oUrlParts.Value = oParaValue.Path;
                                    } else {
                                        if (oParaValue.Apply && oParaValue.Apply.Name && oParaValue.Apply.Name.toLowerCase() === "odata.uriencode") {
                                            oUrlParts.Value = oParaValue.Apply.Parameters[0].Value;
                                        }
                                    }
                                    break;
                                }
                            }
                            aUrlParts.push(oUrlParts);
                            aUrlParts.push({"Value" : aTemplValueParts[1], "Type" : "String"});
                        }
                    }
                    oResolution = sap.ushell.Container.getService("NavTargetResolution").getCurrentResolution();
                    if (oResolution && oResolution.url) {
                        sSystem = jQuery.sap.getUriParameters(oResolution.url).get("sap-system");
                        if (sSystem) {
                            aUrlParts.push({Type: "String", Value: "&sap-system=" + sSystem});
                        }
                    }
                    break;
                default:
                    break;
                }
            }
            return propertyPartsWithStrings(aUrlParts);
        };

        columnHAlign = function (oField) {
            var hAlign = sap.ui.core.TextAlign.Begin;
            if (oField.EdmType === "Edm.Decimal" || oField.EdmType === "Edm.Double" || oField.EdmType === "Edm.Single" ||
                    oField.EdmType === "Edm.Int16" || oField.EdmType === "Edm.Int32" || oField.EdmType === "Edm.Int64") {
                hAlign = sap.ui.core.TextAlign.End;
            }
            return hAlign;
        };

        formLayoutFactory = function (oModel, sEntitySet, aFormData, oMaxItems, oMetadata, oFacet) {
            var sEntityType, aPropertyExtensions, j = 0, iSumPrioHigh = 0, iSumPrioMedium = 0, iSumPrioLow = 0,
                oImportance, i, oControl, oLabel, oSimpleForm;
            if (!oMetadata) {
                oMetadata = oModel.getServiceMetadata();
            }
            if (!aFormData) {
                aFormData = [];
            }
            sEntityType = getEntityType(sEntitySet, oMetadata);
            oSimpleForm = new sap.ui.layout.form.SimpleForm({
                labelMinWidth: 150,
                maxContainerCols: 2
            });
            aPropertyExtensions = (oMapping.propertyExtensions) ? oMapping.propertyExtensions[sEntityType] : [];
            if (oMaxItems && oMaxItems.High) {
                iSumPrioHigh = oMaxItems.High;
            }
            if (oMaxItems && oMaxItems.Medium) {
                iSumPrioMedium = oMaxItems.Medium;
            }
            if (oMaxItems && oMaxItems.Low) {
                iSumPrioLow = oMaxItems.Low;
            }
            for (i = 0; i < aFormData.length; i += 1) {
                oImportance = getImportanceOfRecord(aFormData[i]);
                if (oMaxItems && (oImportance === "High")) {
                    if (iSumPrioHigh) {
                        iSumPrioHigh -= 1;
                    } else {
                        continue;
                    }
                } else if (oMaxItems && (oImportance === "Medium")) {
                    if (iSumPrioMedium) {
                        iSumPrioMedium -= 1;
                    } else {
                        continue;
                    }
                } else if (oMaxItems && (oImportance === "Low")) {
                    if (iSumPrioLow) {
                        iSumPrioLow -= 1;
                    } else {
                        continue;
                    }
                }
                if (oMaxItems && oMaxItems.Total && (j >= oMaxItems.Total)) {
                    break;
                }
                j += 1;
                oControl = new sap.ui.core.Control().setModel(oModel);
                oLabel = labelBinding(aFormData[i], {textAlign: sap.ui.core.TextAlign.End}, aPropertyExtensions, false);
                oLabel.addStyleClass("sapFactsheetUtiFormPadding");
                oControl = dataField(aFormData[i], sEntityType, oMetadata, oFacet);
                oControl.addStyleClass("sapFactsheetUtiFormPadding");
                if (oControl.setTextAlign) {
                    oControl.setTextAlign(sap.ui.core.TextAlign.Begin);
                }
                oSimpleForm.addContent(oLabel);
                oSimpleForm.addContent(oControl);
            }
            oSimpleForm.addStyleClass("sapFactsheetUtiFormLayout");
            return oSimpleForm;
        };

        facetFactory = function (oModel, sEntitySet, oSelectedFacet, sBindingPath, oFacet) {
            var oMetadata, sAssociationMultiplicity = "", oTG, sNavPath, sAnnoPath, aAnnoPath, sNavEntitySet, oList, aIdentification,
                oVL, aStatusInfo, oFG, aTG = [], i, sEntityType, aColumns, oPropertyExtensions;
            oMetadata = oModel.getServiceMetadata();
            switch (oSelectedFacet.RecordType) {
            case "com.sap.vocabularies.UI.v1.ReferenceFacet":
                oTG = new sap.suite.ui.commons.UnifiedThingGroup();
                if (oSelectedFacet.Label && oSelectedFacet.Label.String) {
                    oTG.setTitle(oSelectedFacet.Label.String);
                }
                sNavPath = oSelectedFacet.Target.AnnotationPath;
                sAnnoPath = sNavPath.substring(sNavPath.lastIndexOf("@") + 1);
                sNavPath = sNavPath.substring(0, sNavPath.lastIndexOf("@") - 1);
                if (sNavPath) {
                    sAssociationMultiplicity = getAssociationMultiplicity(sEntitySet, sNavPath, oMetadata);
                }
                aAnnoPath = sAnnoPath.split("#");
                switch (aAnnoPath[0]) {
                case "com.sap.vocabularies.UI.v1.LineItem":
                case "com.sap.vocabularies.UI.v1.Chart":
                case "com.sap.vocabularies.UI.v1.Badge":
                case "com.sap.vocabularies.UI.v1.Identification":
                    if (sNavPath) {
                        sNavEntitySet = getNavEntitySet(sEntitySet, sNavPath, oMetadata);
                        sEntityType = getEntityType(sNavEntitySet, oMetadata);
                    } else {
                        sEntityType = getEntityType(sEntitySet, oMetadata);
                    }
                    // In case of a chart we need to have the definition of the line items
                    if (aAnnoPath[0] === "com.sap.vocabularies.UI.v1.Chart") {
                        sAnnoPath = "com.sap.vocabularies.UI.v1.LineItem";
                    }
                    aColumns = oMapping[sEntityType][sAnnoPath];
                    if (oMapping.propertyExtensions) {
                        oPropertyExtensions = oMapping.propertyExtensions[sEntityType];
                    }
                    if (sAssociationMultiplicity === "*" && aAnnoPath[0] !== "com.sap.vocabularies.UI.v1.Identification") {
                        oList = itemListFactory(oModel, aColumns, sEntityType, oMetadata, sBindingPath + "/" + sNavPath, oSelectedFacet, oPropertyExtensions, oFacet);
                        oTG.setContent(oList);
                    }
                    if (aAnnoPath[0] === "com.sap.vocabularies.UI.v1.Identification") {
                        aIdentification = oMapping[sEntityType]["com.sap.vocabularies.UI.v1.Identification"];
                        oVL = new sap.ui.layout.VerticalLayout({width: "100%"}).setModel(oModel);
                        if (sNavPath) {
                            oVL.addContent(formLayoutFactory(oModel, sNavEntitySet, aIdentification, null, null, oFacet)).addStyleClass("sapFactsheetUtiPanel");
                            oVL.bindElement(sBindingPath + "/" + sNavPath);
                        } else {
                            oVL.addContent(formLayoutFactory(oModel, sEntitySet, aIdentification, null, null, oFacet).addStyleClass("sapFactsheetUtiPanel"));
                        }
                        oTG.setContent(oVL);
                    }
                    break;
                case "com.sap.vocabularies.UI.v1.StatusInfo":
                    if (sNavPath) {
                        sNavEntitySet = getNavEntitySet(sEntitySet, sNavPath, oMetadata);
                        aStatusInfo = oMapping[getEntityType(sNavEntitySet, oMetadata)]["com.sap.vocabularies.UI.v1.StatusInfo"];
                        oTG.setContent(formLayoutFactory(oModel, sNavEntitySet, aStatusInfo, null, null, oFacet).addStyleClass("sapFactsheetUtiPanel").bindElement(sBindingPath + "/" + sNavPath));
                    } else {
                        aStatusInfo = oMapping[getEntityType(sEntitySet, oMetadata)]["com.sap.vocabularies.UI.v1.StatusInfo"];
                        oTG.setContent(formLayoutFactory(oModel, sEntitySet, aStatusInfo, null, null, oFacet).addStyleClass("sapFactsheetUtiPanel"));
                    }
                    break;
                case "com.sap.vocabularies.UI.v1.FieldGroup":
                    oFG = oMapping[getEntityType(sEntitySet, oMetadata)][sAnnoPath];
                    if (oFG) {
                        if (!oTG.getTitle() || (oTG.getTitle() === "")) {
                            if (oFG.Label) {
                                if (oFG.Label.String) {
                                    oTG.setTitle(oFG.Label.String);
                                } else {
                                    if (oFG.Label.Path) {
                                        oTG.bindProperty("title", oFG.Label.Path);
                                    }
                                }
                            }
                        }
                        if (sNavPath) {
                            sNavEntitySet = getNavEntitySet(sEntitySet, sNavPath, oMetadata);
                            oTG.setContent(formLayoutFactory(oModel, sNavEntitySet, oFG.Data, null, null, oFacet).addStyleClass("sapFactsheetUtiPanel").bindElement(sBindingPath + "/" + sNavPath));
                        } else {
                            oTG.setContent(formLayoutFactory(oModel, sEntitySet, oFG.Data, null, null, oFacet).addStyleClass("sapFactsheetUtiPanel"));
                        }
                    }
                    break;
                default:
                    break;
                }
                return oTG;
            case "com.sap.vocabularies.UI.v1.ReferenceURLFacet":
                oTG = new sap.ui.ux3.ThingGroup({title: oSelectedFacet.Label.String});
                oTG.setContent(showHTML(oSelectedFacet));
                return oTG;
            case "com.sap.vocabularies.UI.v1.CollectionFacet":
                for (i = 0; i < oSelectedFacet.Facets.length; i += 1) {
                    aTG.push(facetFactory(oModel, sEntitySet, oSelectedFacet.Facets[i], sBindingPath, oFacet));
                }
                return aTG;
            default:
                break;
            }
        };

        showHTML = function (oHTMLData) {
            var oImage, oHTMLCtrl, sIframe;
            switch (oHTMLData.UrlContentType.String) {
            case "image/png":
            case "image/jpeg":
            case "image/gif":
                oImage =  new sap.m.Image({width: "100%"});
                if (oHTMLData.Url.String) {
                    oImage.setSrc(oHTMLData.Url.String);
                }
                return oImage;
            default:
                oHTMLCtrl = new sap.ui.core.HTML();
                if (oHTMLData.Url.String) {
                    oHTMLCtrl.setContent("<iframe src = '" + oHTMLData.Url.String + "' width='100%' height='250px' frameborder='0'></iframe>");
                } else {
                    if (oHTMLData.Url.Path) {
                        oHTMLCtrl.bindProperty("content", { path: oHTMLData.Url.Path,
                            formatter: function (value) {
                                sIframe = "<iframe src = '" + oHTMLData.Url.Path + "' width='100%' height='250px' frameborder='0'></iframe>";
                                return sIframe;
                            }
                            });
                    }
                }
                return oHTMLCtrl;
            }
        };

        itemListFactory =  function (oModel, aColumns, sEntityType, oMetadata, sBindingPath, oSelectedFacet, oPropertyExtensions, oFacet) {
            var aPropertyExtensions, iMaxColumns, iPrioHighColumnCount, iPrioMediumColumnCount,
                oImportance, i, k, cells = [], columns = [], aLabels = [], aControls = [], oLabel, bVisible, oControl, oTemplateData,
                sTitle, oTable, updatedFinished, aSortItems = [], oSortItem, oVSDialog, sColumnName, aFilterItems = [],
                oFilterItem, customFilterString, customFilterDecimal, customFilterCallback, customFilterReset,
                customFilterCancel, oCustomFilterControl, oSuiteUiCommonsResourceBundle, bEnableSortFilterDialog = false, bSortable,
                sConcatColumnName;
            oSuiteUiCommonsResourceBundle = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");
            if (!oMetadata) {
                oMetadata = oModel.getServiceMetadata();
            }
            aPropertyExtensions = (oMapping.propertyExtensions) ? oMapping.propertyExtensions[sEntityType] : [];
            iMaxColumns = 6; //Default value for desktop
            if (jQuery.device.is.tablet && jQuery.device.is.landscape) {
                iMaxColumns = 5;
            } else if (jQuery.device.is.tablet && jQuery.device.is.portrait) {
                iMaxColumns = 4;
            } else if (jQuery.device.is.phone && jQuery.device.is.landscape) {
                iMaxColumns = 3;
            } else if (jQuery.device.is.phone && jQuery.device.is.portrait) {
                iMaxColumns = 2;
            }
            iPrioHighColumnCount = 0;
            iPrioMediumColumnCount = 0;
            for (i = 0; i < aColumns.length; i += 1) {
                oImportance = getImportanceOfRecord(aColumns[i]);
                if (oImportance === "High") {
                    iPrioHighColumnCount += 1;
                }
            }
            if (iMaxColumns > iPrioHighColumnCount) {
                iPrioMediumColumnCount = iMaxColumns - iPrioHighColumnCount;
            } else if (iMaxColumns < iPrioHighColumnCount) {
                iPrioHighColumnCount = iMaxColumns;
            }
            columns.push(new sap.m.Column({visible: false}));
            cells.push(new sap.m.Text().bindText("__metadata/uri"));
            for (i = 0; i < aColumns.length; i += 1) {
                sConcatColumnName = "";
                oControl = new sap.ui.core.Control();
                oImportance = getImportanceOfRecord(aColumns[i]);
                oControl = dataField(aColumns[i], sEntityType, oMetadata, oFacet);
                oLabel = labelBinding(aColumns[i], null, aPropertyExtensions);
                // Enable sorting for non-concatenated fields
                if (aColumns[i].Value.Path) {
                    // "ColumnName" is required for oData call for list sorting
                    sColumnName = aColumns[i].Value.Path;
                    // Check if column is sortable (if nothing is specified, column is sortable).
                    if (oPropertyExtensions && oPropertyExtensions[sColumnName] && oPropertyExtensions[sColumnName]["http://www.sap.com/Protocols/SAPData"]
                            && oPropertyExtensions[sColumnName]["http://www.sap.com/Protocols/SAPData"].sortable) {
                        oLabel.data("IsSortable", oPropertyExtensions[sColumnName]["http://www.sap.com/Protocols/SAPData"].sortable);
                        if (oPropertyExtensions[sColumnName]["http://www.sap.com/Protocols/SAPData"].sortable === "true") {
                            bEnableSortFilterDialog = true;
                        }
                    } else {
                        oLabel.data("IsSortable", "true");
                        bEnableSortFilterDialog = true;
                    }
                    // Check if column is filterable (if nothing is specified, column is filterable).
                    if (oPropertyExtensions && oPropertyExtensions[sColumnName] && oPropertyExtensions[sColumnName]["http://www.sap.com/Protocols/SAPData"]
                            && oPropertyExtensions[sColumnName]["http://www.sap.com/Protocols/SAPData"].filterable) {
                        oLabel.data("IsFilterable", oPropertyExtensions[sColumnName]["http://www.sap.com/Protocols/SAPData"].filterable);
                        if (oPropertyExtensions[sColumnName]["http://www.sap.com/Protocols/SAPData"].filterable === "true") {
                            bEnableSortFilterDialog = true;
                        }
                    } else {
                        oLabel.data("IsFilterable", "true");
                        bEnableSortFilterDialog = true;
                    }
                } else {
                    // A column consists of concatenated fields. Only if all fields are sortable, then allow a column sorting.
                    bSortable = true;
                    for (k = 0; k < aColumns[i].Value.Apply.Parameters.length; k += 1) {
                        if (aColumns[i].Value.Apply.Parameters[k].Type === "Path") {
                            sColumnName = aColumns[i].Value.Apply.Parameters[k].Value;
                            // Check if column is sortable (if nothing is specified, column is sortable).
                            if (oPropertyExtensions[sColumnName] && oPropertyExtensions[sColumnName]["http://www.sap.com/Protocols/SAPData"]
                                    && oPropertyExtensions[sColumnName]["http://www.sap.com/Protocols/SAPData"].sortable) {
                                if (oPropertyExtensions[sColumnName]["http://www.sap.com/Protocols/SAPData"].sortable === "false") {
                                    // One of a concatenated fields isn't sortable, then the whole column will be not sortable
                                    bSortable = false;
                                    sConcatColumnName = "";
                                    break;
                                }
                            }
                            if (sConcatColumnName) {
                                sConcatColumnName += ";";
                            }
                            sConcatColumnName += sColumnName;
                        }
                    }
                    sColumnName = sConcatColumnName;
                    if (bSortable === false) {
                        oLabel.data("IsSortable", "false");
                    } else {
                        oLabel.data("IsSortable", "true");
                        bEnableSortFilterDialog = true;
                    }
                    // For concatenated fields no filtering is allowed
                    oLabel.data("IsFilterable", "false");
                }
                if (aColumns[i].EdmType) {
                    oLabel.data("EdmType", aColumns[i].EdmType);
                }
                oLabel.data("ColumnName", sColumnName);
                aLabels.push(oLabel);
                aControls.push(oControl);
                if (oImportance === "High") {
                    if (iPrioHighColumnCount > 0) {
                        bVisible = true;
                        iPrioHighColumnCount -= 1;
                    } else {
                        bVisible = false;
                    }
                } else if (oImportance === "Medium") {
                    if (iPrioMediumColumnCount > 0) {
                        bVisible = true;
                        iPrioMediumColumnCount -= 1;
                    } else {
                        bVisible = false;
                    }
                } else {
                    bVisible = false;
                }
                columns.push(new sap.m.Column({header: oLabel, hAlign: columnHAlign(aColumns[i]), visible: bVisible}));
                cells.push(oControl);
            }
            oTemplateData = new sap.m.ColumnListItem({
                type : sap.m.ListType.Navigation,
                unread : false,
                cells : cells
            });
            if (oSelectedFacet) {
                sTitle = oSelectedFacet.Label.String;
            }
            oTemplateData.attachPress({aColumns: aColumns, aLabels: aLabels, aControls: aControls, sTitle: sTitle}, function (oEvent, oData) {
                var sItem, oContent, oLabel, i, oThingGroup, oPage, oValue;
                sItem = oEvent.getSource().getCells()[0].getText().substr(oEvent.getSource().getCells()[0].getText().lastIndexOf("/"));
                oContent = new sap.m.Table({
                    backgroundDesign: sap.m.BackgroundDesign.Transparent,
                    showSeparators: sap.m.ListSeparators.None,
                    columns: [
                        new sap.m.Column({hAlign: sap.ui.core.TextAlign.End}),
                        new sap.m.Column()
                    ]
                });
                oContent.addStyleClass("sapFactsheetUtiPanel");
                oContent.addStyleClass("sapFactsheetUtiTilePadding");
                oContent.addStyleClass("sapFactsheetUtiTableNoTopBorder");
                oContent.bindElement(sItem);
                for (i = 0; i < aColumns.length; i += 1) {
                    oLabel = aLabels[i].clone();
                    oLabel.setText(oLabel.getText() + ":");
                    oValue = aControls[i].clone();
                    oLabel.setLabelFor(oValue);
                    oContent.addItem(new sap.m.ColumnListItem({cells: [oLabel, oValue]}));
                }
                oThingGroup = new sap.suite.ui.commons.UnifiedThingGroup({
                    content: oContent,
                    title: sTitle,
                    description: getTIDescription()
                });
                oPage = new sap.m.Page({
                    title: oTI.getTitle(),
                    showNavButton: true,
                    content: [ oThingGroup ]
                });
                oTI.navigateToPage(oPage, true);
                //Workaround: no Link if no authority
                oTI.attachAfterNavigate(oContent, function (oEvent){
                    if (oEvent.getParameters().getParameters().toId.indexOf("__page") >= 0) {
                        var aItems;
                        aItems = oContent.getItems();
                        if (aItems.length > 0 && aAllFacets.indexOf(oFacet) >= 0) {
                            aAllFacets[aAllFacets.indexOf(oFacet)].bLoaded = true;
                            aAllFacets[aAllFacets.indexOf(oFacet)].bProcessed = false;
                            aAllFacets[aAllFacets.indexOf(oFacet)].bIsTable = true;
                            aAllFacets[aAllFacets.indexOf(oFacet)].oTableItems = aItems;
                            checkLinks(aAllFacets.indexOf(oFacet));
                        }
                    }
                });
                //Workaround: no Link if no authority
            });
            oTable = new sap.m.Table({growing : true, columns: columns});
            oTable.setModel(oModel);
            oTable.bindItems({
                path: sBindingPath,
                template: oTemplateData
            });
            customFilterString = new sap.m.VBox({
                items: [
                    new sap.m.Input({
                        placeholder: oSuiteUiCommonsResourceBundle.getText("USHELL_FACTSHEET_ENTER_YOUR_FILTER"),
                        change: function (oEvent) {
                            var sParentParentId, vsd, filters, customFilter, i;
                            sParentParentId = oEvent.getSource().getParent().getParent().getId();
                            vsd = sap.ui.getCore().byId(sParentParentId.substr(0, sParentParentId.indexOf("-")));
                            filters = vsd.getFilterItems();
                            for (i = 0; i < filters.length; i += 1) {
                                if (filters[i] instanceof sap.m.ViewSettingsCustomItem && filters[i].getKey() === this.oParent.data("ColumnName")) {
                                    customFilter = filters[i];
                                    break;
                                }
                            }
                            if (customFilter) {
                                if ((oEvent.getParameter("newValue") === undefined) || (oEvent.getParameter("newValue") === "")) {
                                    customFilter.setSelected(false);
                                    customFilter.setFilterCount(0);
                                } else {
                                    customFilter.setSelected(true);
                                    customFilter.setFilterCount(1);
                                }
                            }
                        }
                    }).addStyleClass("sapFactsheetUtiFilterInput")
                ]
            });
            customFilterDecimal = new sap.m.VBox({
                items: [
                    new sap.m.List({
                        mode: sap.m.ListMode.SingleSelectLeft,
                        includeItemInSelection: true,
                        items: [
                            new sap.m.StandardListItem({
                                title: oSuiteUiCommonsResourceBundle.getText("USHELL_FACTSHEET_GREATER_THEN")
                            }).data("FilterOperator", sap.ui.model.FilterOperator.GT),
                            new sap.m.StandardListItem({
                                title: oSuiteUiCommonsResourceBundle.getText("USHELL_FACTSHEET_EQUALS")
                            }).data("FilterOperator", sap.ui.model.FilterOperator.EQ),
                            new sap.m.StandardListItem({
                                title: oSuiteUiCommonsResourceBundle.getText("USHELL_FACTSHEET_LESS_THEN")
                            }).data("FilterOperator", sap.ui.model.FilterOperator.LT)
                        ]
                    }),
                    new sap.m.Input({
                        placeholder: oSuiteUiCommonsResourceBundle.getText("USHELL_FACTSHEET_ENTER_YOUR_FILTER"),
                        change: function (oEvent) {
                            var sParentParentId, vsd, filters, customFilter, i;
                            sParentParentId = oEvent.getSource().getParent().getParent().getId();
                            vsd = sap.ui.getCore().byId(sParentParentId.substr(0, sParentParentId.indexOf("-")));
                            filters = vsd.getFilterItems();
                            for (i = 0; i < filters.length; i += 1) {
                                if ((filters[i] instanceof sap.m.ViewSettingsCustomItem) && (filters[i].getKey() === this.oParent.data("ColumnName"))) {
                                    customFilter = filters[i];
                                    break;
                                }
                            }
                            if (customFilter) {
                                if ((oEvent.getParameter("newValue") === undefined) || (oEvent.getParameter("newValue") === "")) {
                                    customFilter.setSelected(false);
                                    customFilter.setFilterCount(0);
                                } else {
                                    customFilter.setSelected(true);
                                    customFilter.setFilterCount(1);
                                }
                            }
                        }
                    }).addStyleClass("sapFactsheetUtiFilterInput")
                ]
            });

            // NOTE: assignment commented out (see todo comment down)
            // var oCustomFilterDate = new sap.m.Vbox({ ...
            new sap.m.VBox({
                items: [
                    new sap.m.List({
                        mode: sap.m.ListMode.SingleSelectLeft,
                        includeItemInSelection: true,
                        items: [
                            new sap.m.StandardListItem({
                                title: oSuiteUiCommonsResourceBundle.getText("USHELL_FACTSHEET_AFTER")
                            }).data("FilterOperator", sap.ui.model.FilterOperator.GT),
                            new sap.m.StandardListItem({
                                title: oSuiteUiCommonsResourceBundle.getText("USHELL_FACTSHEET_AT")
                            }).data("FilterOperator", sap.ui.model.FilterOperator.EQ),
                            new sap.m.StandardListItem({
                                title: oSuiteUiCommonsResourceBundle.getText("USHELL_FACTSHEET_BEFORE")
                            }).data("FilterOperator", sap.ui.model.FilterOperator.LT)
                        ]
                    }),
                    new sap.m.DateTimeInput({
                        type: sap.m.DateTimeInputType.Date,
                        valueFormat: new sap.ui.model.type.DateTime({pattern: "yyyy/MM/dd HH:mm:ss UTC+00:00"}).getOutputPattern(),
                        placeholder: oSuiteUiCommonsResourceBundle.getText("USHELL_FACTSHEET_ENTER_YOUR_FILTER"),
                        change: function (oEvent) {
                            var sParentParentId, vsd, filters, customFilter, i;
                            sParentParentId = oEvent.getSource().getParent().getParent().getId();
                            vsd = sap.ui.getCore().byId(sParentParentId.substr(0, sParentParentId.indexOf("-")));
                            filters = vsd.getFilterItems();
                            for (i = 0; i < filters.length; i += 1) {
                                if ((filters[i] instanceof sap.m.ViewSettingsCustomItem) && (filters[i].getKey() === this.oParent.data("ColumnName"))) {
                                    customFilter = filters[i];
                                    break;
                                }
                            }
                            if ((oEvent.getParameter("newValue") === undefined) || (oEvent.getParameter("newValue") === "")) {
                                customFilter.setSelected(false);
                                customFilter.setFilterCount(0);
                            } else {
                                customFilter.setSelected(true);
                                customFilter.setFilterCount(1);
                            }
                        }
                    }).addStyleClass("sapFactsheetUtiFilterInput")
                ]
            });

            customFilterCallback = function (oControl) {
                var aFilters = [], i, sFilterOperator, aItems = oControl.getItems(), sFilterValue;
                if (aItems[0].getParent().data("EdmType") === "Edm.String" && aItems[0].getValue()) {
                    aFilters.push(new sap.ui.model.Filter(aItems[0].getParent().data("ColumnName"), sap.ui.model.FilterOperator.Contains, aItems[0].getValue()));
                } else if (aItems[0].getParent().data("EdmType") === "Edm.Decimal" && aItems[1].getValue()) {
                    for (i = 0; i < aItems[0].getItems().length; i += 1) {
                        if (aItems[0].getItems()[i].getSelected() === true) {
                            sFilterOperator = aItems[0].getItems()[i].data("FilterOperator");
                            break;
                        }
                    }
                    sFilterValue = aItems[1].getValue();
                    for (i = sFilterValue.length - 1; i > 0; i -= 1) {
                        if (sFilterValue[i] === ",") {
                            sFilterValue = sFilterValue.replace(sFilterValue[i], ".");
                            break;
                        }
                    }
                    aFilters.push(new sap.ui.model.Filter(aItems[1].getParent().data("ColumnName"), sFilterOperator, sFilterValue));
                } else if (aItems[0].getParent().data("EdmType") === "Edm.Date" && aItems[1].getValue()) {
                    for (i = 0; i < aItems[0].getItems().length; i += 1) {
                        if (aItems[0].getItems()[i].getSelected() === true) {
                            sFilterOperator = aItems[0].getItems()[i].data("FilterOperator");
                            break;
                        }
                    }
                    aFilters.push(new sap.ui.model.Filter(aItems[1].getParent().data("ColumnName"), sFilterOperator, aItems[1].getValue()));
                } else {
                    aFilters.push(new sap.ui.model.Filter(aItems[0].getParent().data("ColumnName"), sap.ui.model.FilterOperator.EQ, aItems[0].getValue()));
                }
                return aFilters;
            };
            customFilterReset = function (oEvent) {
                var source = oEvent.getSource(), filters = source.getFilterItems(), customControlItems, i, j;
                for (i = 0; i < filters.length; i += 1) {
                    if (filters[i] && filters[i] instanceof sap.m.ViewSettingsCustomItem) {
                        filters[i].setSelected(false);
                        filters[i].setFilterCount(0);
                        customControlItems = filters[i].getCustomControl().getItems();
                        for (j = 0; j < customControlItems.length; j += 1) {
                            // Clear of sap.m.Input and sap.m.DateTimeInput
                            if ((customControlItems[j] instanceof sap.m.Input) || (customControlItems[j] instanceof sap.m.DateTimeInput)) {
                                customControlItems[j].setValue("");
                            }
                            // Clear sap.m.List
                            if ((customControlItems[j] instanceof sap.m.List) && (customControlItems[j].getSelectedItem() !== null)) {
                                customControlItems[j].removeSelections();
                            }
                        }
                    }
                }
            };
            customFilterCancel = customFilterReset;
            for (i = 0; i < columns.length; i += 1) {
                if (columns[i + 1]) {
                    oLabel = aLabels[i].clone();
                    if (oLabel.getText() && (oLabel.data("IsSortable") === "true") && columns[i + 1].getVisible()) {
                        oSortItem = new sap.m.ViewSettingsItem({
                            text: oLabel.getText(),
                            key: oLabel.data("ColumnName")
                        });
                        if (i === 0) {
                            oSortItem.setSelected(true);
                        }
                        oSortItem.Sort = oLabel.Sort;
                        aSortItems.push(oSortItem);
                    }
                    if (oLabel.getText() && (oLabel.data("IsFilterable") === "true")) {
                        if (oLabel.data("EdmType") === "Edm.String") {
                            oCustomFilterControl = customFilterString.clone().data("ColumnName", oLabel.data("ColumnName")).data("EdmType", oLabel.data("EdmType"));
                            // TODO: Currently Edm.Date is disabled until correct timezone handling
                            // } else if (oLabel.data("EdmType") === "Edm.Date") {
                            // oCustomFilterControl = customFilterDate.clone().data("ColumnName", oLabel.data("ColumnName")).data("EdmType", oLabel.data("EdmType"));
                        } else if (oLabel.data("EdmType") === "Edm.Decimal") {
                            oCustomFilterControl = customFilterDecimal.clone().data("ColumnName", oLabel.data("ColumnName")).data("EdmType", oLabel.data("EdmType"));
                        }
                        if ((oLabel.data("EdmType") === "Edm.String") || (oLabel.data("EdmType") === "Edm.Decimal")) {
                            oFilterItem = new sap.m.ViewSettingsCustomItem({
                                key: oLabel.data("ColumnName"),
                                text: oLabel.getText(),
                                customControl: oCustomFilterControl,
                                customData: new sap.ui.core.CustomData({
                                    key: "callback",
                                    value: customFilterCallback
                                })
                            });
                            aFilterItems.push(oFilterItem);
                        }
                    }
                }
            }
            oVSDialog = new sap.m.ViewSettingsDialog({
                sortItems : aSortItems,
                filterItems : aFilterItems,
                cancel : customFilterCancel,
                resetFilters : customFilterReset,
                confirm : function (evt) {
                    var mParams, oBinding, aSorters = [], sPath, aPath = [], bDescending, aFilters = [], aTableFilters = [], p, i, oCallback;
                    mParams = evt.getParameters();
                    oBinding = oTable.getBinding("items");
                    if (mParams.sortItem) {
                        sPath = mParams.sortItem.getKey();
                        bDescending = mParams.sortDescending;
                        if (sPath.indexOf(";") > 0) {
                            aPath = sPath.split(";");
                            for (i = 0; i < aPath.length; i += 1) {
                                aSorters.push(new sap.ui.model.Sorter(aPath[i], bDescending));
                            }
                        } else if (sPath) {
                            aSorters.push(new sap.ui.model.Sorter(sPath, bDescending));
                        }
                        oBinding.sort(aSorters);
                    }
                    p = mParams;
                    for (i = 0; i < p.filterItems.length; i += 1) {
                        if (p.filterItems[i] instanceof sap.m.ViewSettingsCustomItem) { // custom control filter
                            oCallback = p.filterItems[i].getCustomData()[0].getValue();
                            aFilters = oCallback.apply(this, [p.filterItems[i].getCustomControl()]);
                            if (aFilters) {
                                // The filter could be an array of filters or a single filter so we transform it to an array
                                if (!Array.isArray(aFilters)) {
                                    aFilters = [aFilters];
                                }
                                aTableFilters = aTableFilters.concat(aFilters);
                            }
                        } else if (p.filterItems[i] instanceof sap.m.ViewSettingsItem) { // standard filter
                            aFilters = p.filterItems[i].getCustomData()[0].getValue();
                            if (aFilters) {
                                // The filter could be an array of filters or a single filter so we transform it to an array
                                if (!Array.isArray(aFilters)) {
                                    aFilters = [aFilters];
                                }
                                aTableFilters = aTableFilters.concat(aFilters);
                            }
                        }
                    }
                    oBinding.filter(aTableFilters);
                }
            });
            if (bEnableSortFilterDialog === true && (aSortItems.length > 0 || aFilterItems.length > 0)) {
                // Add a button to the table header for opening the sorting dialog
                oTable.setHeaderToolbar(new sap.m.Toolbar({
                    content : [
                        new sap.m.Label(),
                        new sap.m.ToolbarSpacer(),
                        new sap.m.Button({
                            icon : "sap-icon://drop-down-list",
                            press : function (evt) {
                                oVSDialog.open();
                            },
                            tooltip : sap.ui.getCore().getLibraryResourceBundle("sap.m").getText("P13NDIALOG_VIEW_SETTINGS")
                        })
                    ]
                }));
            }
            // While data is loading display a loading text
            oTable.setNoDataText(sap.ui.getCore().getLibraryResourceBundle("sap.m").getText("PULL2REFRESH_LOADING_LONG"));
            // When data gets updated check if there are no items and set a no data text in that case
            updatedFinished = (function (oFacet) {
                return function (oEvent) {
                    var aItems = this.getItems();
                    if (aItems.length === 0) {
                        this.setNoDataText(oSuiteUiCommonsResourceBundle.getText("FACETOVERVIEW_NO_CONTENT_TEXT"));
                    } else {
                        this.setNoDataText(sap.ui.getCore().getLibraryResourceBundle("sap.m").getText("PULL2REFRESH_LOADING_LONG"));
                    }
                    //Workaround: no Link if no authority
                    if (aItems.length > 0 && aAllFacets.indexOf(oFacet) >= 0) {
                        aAllFacets[aAllFacets.indexOf(oFacet)].bLoaded = true;
                        aAllFacets[aAllFacets.indexOf(oFacet)].bProcessed = false;
                        aAllFacets[aAllFacets.indexOf(oFacet)].bIsTable = true;
                        aAllFacets[aAllFacets.indexOf(oFacet)].oTableItems = aItems;
                    }
                    checkLinks(aAllFacets.indexOf(oFacet));
                    //Workaround: no Link if no authority
                };
            }(oFacet));
            oTable.attachUpdateFinished(updatedFinished);
            return oTable;
        };

        chartControlFactory = function (sChartType, oTitle, oDescription, oDataset) {
            var oChartControl;
            switch (sChartType) {
            case "com.sap.vocabularies.UI.v1.ChartType/Area":
                oChartControl = new sap.viz.ui5.Area({});
                break;
            case "com.sap.vocabularies.UI.v1.ChartType/Bar":
                oChartControl = new sap.viz.ui5.Bar({});
                break;
            case "com.sap.vocabularies.UI.v1.ChartType/Bubble":
                oChartControl = new sap.viz.ui5.Bubble({});
                break;
            case "com.sap.vocabularies.UI.v1.ChartType/Column":
                oChartControl = new sap.viz.ui5.Column({});
                break;
            case "com.sap.vocabularies.UI.v1.ChartType/ColumnStacked":
                oChartControl = new sap.viz.ui5.StackedColumn({});
                break;
            case "com.sap.vocabularies.UI.v1.ChartType/ColumnStacked100":
                oChartControl = new sap.viz.ui5.StackedColumn100({});
                break;
            case "com.sap.vocabularies.UI.v1.ChartType/Donut":
                oChartControl = new sap.viz.ui5.Donut({});
                break;
            case "com.sap.vocabularies.UI.v1.ChartType/HeatMap":
                oChartControl = new sap.viz.ui5.Heatmap({});
                break;
            case "com.sap.vocabularies.UI.v1.ChartType/HorizontalArea":
                oChartControl = new sap.viz.ui5.HorizontalArea({});
                break;
            case "com.sap.vocabularies.UI.v1.ChartType/Line":
                oChartControl = new sap.viz.ui5.Line({});
                break;
            case "com.sap.vocabularies.UI.v1.ChartType/Pie":
                oChartControl = new sap.viz.ui5.Pie({});
                break;
            case "com.sap.vocabularies.UI.v1.ChartType/Scatter":
                oChartControl = new sap.viz.ui5.Scatter({});
                break;
            case "com.sap.vocabularies.UI.v1.ChartType/TreeMap":
                oChartControl = new sap.viz.ui5.Treemap({});
                break;
            case "com.sap.vocabularies.UI.v1.ChartType/AreaStacked":
            case "com.sap.vocabularies.UI.v1.ChartType/AreaStacked100":
            case "com.sap.vocabularies.UI.v1.ChartType/BarStacked":
            case "com.sap.vocabularies.UI.v1.ChartType/BarStacked100":
            case "com.sap.vocabularies.UI.v1.ChartType/HorizontalAreaStacked":
            case "com.sap.vocabularies.UI.v1.ChartType/HorizontalAreaStacked100":
            case "com.sap.vocabularies.UI.v1.ChartType/Radar":
            case "com.sap.vocabularies.UI.v1.ChartType/Waterfall":
                break;
            }
            if (oChartControl) {
                if (oTitle && oTitle.String) {
                    oChartControl.setTitle(new sap.viz.ui5.types.Title({
                        visible: true,
                        text: oTitle.String
                    }));
                }
                if (oDescription && oDescription.String) {
                    oChartControl.setTooltip(oDescription.String);
                }
                oChartControl.setWidth("100%");
                oChartControl.setHeight("17rem");
                oChartControl.setDataset(oDataset);
            } else {
                oChartControl = new sap.m.Text({});
            }
            return oChartControl;
        };

        /**
         * Returns tile height in rem, depending on device type and number of segments the tile consists of.
         * @param {number=} [iSegments=1] Number of segments the tile will take vertically in the grid (optional).
         *                  Currently expected values are 1, 2, 3, however any positive number is supported.
         *                  Default value is 1.
         * @return {string} Tile height in rem.
         */
        getTeaserTileHeight = function (iSegments) {
            var iReturn;
            iSegments = iSegments || 1;
            if (jQuery.device.is.phone) {
                iReturn = (7 * iSegments) + "rem";
            } else {
                iReturn = (11 * iSegments - 1) + "rem";
            }
            return iReturn;
        };

        getFieldSumsByPriority = function (aFields) {
            var i, iFieldsWithPrioHigh = 0, iFieldsWithPrioMedium = 0, iFieldsWithPrioLow = 0, oImportance;
            for (i = 0; i < aFields.length; i += 1) {
                oImportance = getImportanceOfRecord(aFields[i]);
                if (oImportance) {
                    switch (oImportance) {
                    case "High":
                        iFieldsWithPrioHigh += 1;
                        break;
                    case "Medium":
                        iFieldsWithPrioMedium += 1;
                        break;
                    case "Low":
                        iFieldsWithPrioLow += 1;
                        break;
                    }
                }
            }
            return {High: iFieldsWithPrioHigh, Medium: iFieldsWithPrioMedium, Low: iFieldsWithPrioLow};
        };

        /**
         * Returns the importance (High, Medium, Low) of a given record. Necessary as the annotation for importance
         * changed in OData V4 and we'd like to support both V2 and V4.
         * @param {object} Record as object.
         * @return {string} Importance of the record (High, Medium, Low).
         */
        getImportanceOfRecord = function (oRecord) {
            var sEnumMember = "";
            if (oRecord.Importance) {
                sEnumMember = oRecord.Importance.EnumMember;
            } else if (oRecord["com.sap.vocabularies.UI.v1.Importance"]) {
                sEnumMember = oRecord["com.sap.vocabularies.UI.v1.Importance"].EnumMember;
            }
            return sEnumMember.substr(sEnumMember.indexOf("/") + 1);
        };

        kpiTileFactory = function (oModel, aDataPoint, sEntityType, sBindingPath) {
            var bIsNumeric = false, oTile, fractionDigits, oBinding, oBindingInfo;
            oTile = new sap.suite.ui.commons.KpiTile({
                doubleFontSize: false
            });
            // Set ValueFormat
            if (aDataPoint.ValueFormat) {
                fractionDigits = aDataPoint.ValueFormat.NumberOfFractionalDigits.Int;
            }
            if (aDataPoint.Title && aDataPoint.Title.String) {
                oTile.setDescription(aDataPoint.Title.String);
            } else {
                if (aDataPoint.Title && aDataPoint.Title.Path) {
                    oTile.bindProperty("description", {path: aDataPoint.Title.Path});
                }
            }
            if (aDataPoint.Value && aDataPoint.Value.String) {
                oTile.setValue(aDataPoint.Value.String);
            } else {
                if (aDataPoint.Value && aDataPoint.Value.Path) {
                    oBinding = fieldBinding(aDataPoint.Value, aDataPoint.Value.EdmType, sEntityType);
                    // HANA Live
                    if (oBinding.fnChange) {
                        oTile.setModel(oModel);
                        oTile.bindElement(sBindingPath);
                        oTile.getElementBinding().attachChange(oBinding.fnChange, oTile);
                    }
                    if (oBinding.String) {
                        // Live KPIs detected
                        if ($.isNumeric(oBinding.String)) {
                            bIsNumeric = true;
                            oTile.setValue(kpiValueFormatter(oBinding.String, fractionDigits));
                        } else {
                            oTile.setValue(oBinding.String);
                        }
                    } else if (oBinding.BindingInfo) {
                        // Check for currencies/unit of measures
                        oBindingInfo = oBinding.BindingInfo;
                        if (oBindingInfo.parts && oBindingInfo.parts.length === 2) {
                            oTile.bindProperty("valueUnit", oBindingInfo.parts[0]);
                            oBindingInfo.parts[1].type = undefined;
                            oBindingInfo.parts[1].formatter = (function () {
                                return function (value) {
                                    return kpiValueFormatter(value, fractionDigits);
                                };
                            }(fractionDigits));
                            oTile.bindProperty("value", oBindingInfo.parts[1]);
                        } else if (oBindingInfo.parts && oBindingInfo.parts.length === 1) {
                            oBindingInfo.parts[0].type = undefined;
                            oBindingInfo.parts[0].formatter = (function () {
                                return function (value) {
                                    return kpiValueFormatter(value, fractionDigits);
                                };
                            }(fractionDigits));
                            oTile.bindProperty("value",  oBindingInfo);
                        } else {
                            oTile.bindProperty("value", oBindingInfo);
                        }
                    }
                }
            }
            // Set font size
            if (aDataPoint.Value.EdmType === "Edm.Decimal" || aDataPoint.Value.EdmType === "Edm.Double" || aDataPoint.Value.EdmType === "Edm.Single" ||
                    aDataPoint.Value.EdmType === "Edm.Int16" || aDataPoint.Value.EdmType === "Edm.Int32" || aDataPoint.Value.EdmType === "Edm.Int64" ||
                    bIsNumeric === true) {
                oTile.setDoubleFontSize(true);
            }
            return oTile;
        };

        //Workaround: no Link if no authority
        getSemObjectsFromAnnotation = function (oMetadata) {
            var aRelatedObjects = [], aRelObjToProcess = [], sSemanticObject, getSemanticObjects, collectSemanticObject, i, key;
            getSemanticObjects = function (oObject) {
                if (collectSemanticObject(oObject) === false) {
                    if (oObject.constructor === Array) {
                        for (i = 0; i < oObject.length; i += 1) {
                            collectSemanticObject(oObject[i]);
                        }
                    }
                    if (oObject.constructor === Object) {
                        for (key in oObject) {
                            if (oObject.hasOwnProperty(key)) {
                                if (oObject[key].constructor !== String) {
                                    getSemanticObjects(oObject[key]);
                                }
                            }
                        }
                    }
                }
            };
            collectSemanticObject = function (oObject) {
                if (oObject.RecordType && oObject.RecordType === "com.sap.vocabularies.UI.v1.DataFieldWithUrl") {
                    if (oObject.Url && oObject.Url.Apply) {
                        sSemanticObject = oObject.Url.Apply.Parameters[0].Value.slice(oObject.Url.Apply.Parameters[0].Value.indexOf("#") + 1, oObject.Url.Apply.Parameters[0].Value.indexOf("-"));
                        if (aRelatedObjects.indexOf(sSemanticObject) < 0) {
                            aRelatedObjects.push(sSemanticObject);
                        }
                        return true;
                    }
                } else {
                    return false;
                }
            };
            for (key in oMapping) {
                if (oMapping.hasOwnProperty(key)) {
                    if (key.indexOf(oMetadata.dataServices.schema[0].namespace) >= 0) {
                        getSemanticObjects(oMapping[key]);
                    }
                }
            }
            for (i = 0; i < aRelatedObjects.length; i += 1) {
                if (!oLinkAuthorised.hasOwnProperty(aRelatedObjects[i])) {
                    aRelObjToProcess.push(aRelatedObjects[i]);
                }
            }
            return aRelObjToProcess;
        };

        callInteropService = function (aRelObjToProcess) {
            var i, oJSONModel, sLink, sFilter;
            if (aRelObjToProcess.length > 0) {
                oJSONModel = new sap.ui.model.json.JSONModel();
                sLink = "/sap/opu/odata/UI2/INTEROP/SemanticObjects?$expand=Links&$format=json";
                sFilter = "&$filter=id%20eq%20%27";
                for (i = 0; i < aRelObjToProcess.length; i += 1) {
                    if (sFilter.length > 22) {
                        sFilter += "%20or%20id%20eq%20%27" + aRelObjToProcess[i] + "%27";
                    } else {
                        sFilter += aRelObjToProcess[i] + "%27";
                    }
                }
                sLink += sLink + sFilter;
                oJSONModel.loadData(sLink);
                oJSONModel.attachRequestCompleted(function () {
                    var i, j, types, aLinks = [];
                    if (this.getData().d && this.getData().d.results) {
                        types = this.getData().d.results;
                        for (i = 0; i < types.length; i += 1) {
                            oLinkAuthorised[types[i].id] = "";
                            aLinks = types[i].Links.results;
                            for (j = 0; j < aLinks.length; j += 1) {
                                oLinkAuthorised[aLinks[j].id.slice(0, aLinks[j].id.indexOf("~"))] = "";
                            }
                        }
                    }
                    oLinkAuthorised.InteropCompleted = true;
                    checkLinks();
                });
            } else {
                oLinkAuthorised.InteropCompleted = true;
            }
        };
        
        checkLinks = function (index) {
            var i, j, k, n, aItems, aCells, aLinks;
            if (oLinkAuthorised.InteropCompleted === true) {
                for (i = 0; i < aAllFacets.length; i += 1) {
                    if (aAllFacets[i].bLoaded && !aAllFacets[i].bProcessed && aAllFacets[i].Links) {
                        aLinks = aAllFacets[i].Links;
                        for (j = 0; j < aLinks.length; j += 1) {
                            if (oLinkAuthorised.hasOwnProperty(aLinks[j].sIntend) === true) {
                                if (aAllFacets[i].bIsTable === true) {
                                    if (aAllFacets[i].oTableItems) {
                                        aItems = aAllFacets[i].oTableItems;
                                        for (k = 0; k < aItems.length; k += 1) {
                                            aCells = aItems[k].getCells();
                                            for (n = 0; n < aCells.length; n += 1) {
                                                if (aCells[n] instanceof sap.ui.layout.VerticalLayout &&
                                                    aCells[n].getContent()[0].getBindingInfo("href").parts === aLinks[j].oVL.getContent()[0].getBindingInfo("href").parts &&
                                                    aCells[n].getContent()[1].getBindingInfo("text").parts === aLinks[j].oVL.getContent()[1].getBindingInfo("text").parts) {
                                                    aCells[n].getContent()[0].setVisible(true);
                                                    aCells[n].getContent()[1].setVisible(false);
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    aLinks[j].oVL.getContent()[0].setVisible(true);
                                    aLinks[j].oVL.getContent()[1].setVisible(false);
                                }
                            } else if (aAllFacets[i].bIsTable === false) {
                                aLinks[j].oVL.getContent()[1].setText(aLinks[j].oVL.getContent()[0].getText());
                            }
                            aAllFacets[i].bProcessed = true;
                        }
                    }
                }
            }
            if (index >= 0) {
                if (aAllFacets[index].bLoaded && !aAllFacets[index].bProcessed && aAllFacets[index].Links) {
                    aLinks = aAllFacets[index].Links;
                    for (j = 0; j < aLinks.length; j += 1) {
                        if (aAllFacets[index].bIsTable === false) {
                            aLinks[j].oVL.getContent()[1].setText(aLinks[j].oVL.getContent()[0].getText());
                        }
                    }
                }
            }
        };
        //Workaround: no Link if no authority

        thingInspectorFactory = function (sUri, sAnnotationUri, oTI) {
            var sService, oModel, sEntitySet, sBindingPath, oMetadata, sEntityType, oHeaderInfo, aFacets,i,
                oContent = {}, sNavPath, oDataReadCallback, oDataReadCallbackGeo, functionParameters, j, sBusinessParams,
                oGeneralFacet, oLinks, oTransactionSheet, oActionSheet, sAnnotationUriPath, sAnnotationUriAppAndFilename, oSapSuiteRb,
                iMaxItemsInGeneral, iFieldsWithPrioHigh = 0, iFieldsWithPrioMedium = 0, sUseTerm, sNavEntitySet, sEntitySetForFacet,
                sNavEntityType, sEntityTypeForFacet, aFacetContent, oImportance, aOperations = [], sBatchPath, oDataReadCallbackContacts,
                iFreeSpaceBuffer, aContent, oFieldSumsByPriority, iFieldsOnOverview, oFormLayout, sGeneralTileHeight, oAddBookmarkButton,
                iRowSpan, oFacet, oGeoContent, sNavType, sCardinality, parameters, oEmailBtn,
                thingInspectorBindingChanged, numKpiTiles = 0, key, aDataPoint, sTerm, oDataReadCallbackMedia, sHeight,
                oDataReadCallbackError, adjustHorizontalLayoutContent, extractContactsFromBatchRequest;
            sService = getServiceFromUri(sUri);
            //Because of a bug in icm the bsp application name and file name must be in lower case
            sAnnotationUriPath = sAnnotationUri.substring(0, sAnnotationUri.substring(0, sAnnotationUri.lastIndexOf("/")).lastIndexOf("/"));
            sAnnotationUriAppAndFilename = sAnnotationUri.substring(sAnnotationUri.substring(0, sAnnotationUri.lastIndexOf("/")).lastIndexOf("/"));
            //Transformation to lowercase can be prohibited by adding the encoded url parameter "cbn_keep_anno_case" with value "true".
            if (window.location.search.indexOf("cbn_keep_anno_case%3Dtrue") === -1) {
                sAnnotationUriAppAndFilename = sAnnotationUriAppAndFilename.toLowerCase();
            }
            oModel = new sap.ui.model.odata.ODataModel(sService,
                  {annotationURI: sAnnotationUriPath + sAnnotationUriAppAndFilename, loadAnnotationsJoined: true, loadMetadataAsync: false, json: true});
            oModel.setCountSupported(false);
            oTI.setModel(oModel);
            sEntitySet = getEntitySetFromUri(sUri, oModel);
            sBindingPath = "/" + sUri.slice(sService.length);
            oMetadata = oModel.getServiceMetadata();
            oMapping = oModel.getServiceAnnotations();
            sEntityType = getEntityType(sEntitySet, oMetadata);
            oHeaderInfo = oMapping[sEntityType]["com.sap.vocabularies.UI.v1.HeaderInfo"];
            aFacets = oMapping[sEntityType]["com.sap.vocabularies.UI.v1.Facets"];
            oTI.bindElement(sBindingPath, getExpand(sEntitySet, oMetadata));
            oSapSuiteRb = sap.ui.getCore().getLibraryResourceBundle("sap.suite.ui.commons");

            //Workaround: no Link if no authority
            oLinkAuthorised.InteropCompleted = false;
            callInteropService(getSemObjectsFromAnnotation(oMetadata));
            //Workaround: no Link if no authority
            
            // Begin of rendering

            // Add a business object specific style class for branding
            oTI.addStyleClass("sapFactsheetUtiThingType" + sEntitySet.replace(/\s/g, ""));

            // Factsheet title e. g. "Article", "Sales Order", etc.
            if (oHeaderInfo.TypeName.String) {
                oTI.setTitle(oHeaderInfo.TypeName.String);
            } else {
                if (oHeaderInfo.TypeName.Path) {
                    oTI.bindProperty("title", {path: oHeaderInfo.TypeName.Path});
                }
            }

            // Optional image/icon to the left of the title
            if (oHeaderInfo.ImageUrl && oHeaderInfo.ImageUrl.String) {
                oTI.setIcon(oHeaderInfo.ImageUrl.String);
            } else if (oHeaderInfo.ImageUrl && oHeaderInfo.ImageUrl.Path) {
                oTI.bindProperty("icon", {path: oHeaderInfo.ImageUrl.Path});
            } else if (oHeaderInfo.TypeImageUrl && oHeaderInfo.TypeImageUrl.String) {
                oTI.setIcon(oHeaderInfo.TypeImageUrl.String);
            } else if (oHeaderInfo.TypeImageUrl && oHeaderInfo.TypeImageUrl.Path) {
                oTI.bindProperty("icon", {path: oHeaderInfo.TypeImageUrl.Path});
            }

            // Name and description of the factsheet
            if (oHeaderInfo.Title.Value.String) {
                oTI.setName(oHeaderInfo.Title.Value.String);
            } else {
                oTI.bindProperty("name", fieldBinding(oHeaderInfo.Title.Value, oHeaderInfo.Title.EdmType, sEntityType).BindingInfo);
            }
            if (oHeaderInfo.Description && oHeaderInfo.Description.Value) {
                if (oHeaderInfo.Description.Value.String) {
                    oTI.setDescription(oHeaderInfo.Description.Value.String);
                } else {
                    oTI.bindProperty("description", fieldBinding(oHeaderInfo.Description.Value, oHeaderInfo.Description.EdmType, sEntityType).BindingInfo);
                }
            }

            // KPI tiles
            for (key in oMapping[sEntityType]) {
                if (oMapping[sEntityType].hasOwnProperty(key)) {
                    if (key.search("com.sap.vocabularies.UI.v1.DataPoint") !== -1) {
                        aDataPoint = oMapping[sEntityType][key];
                        if (aDataPoint) {
                            oTI.addKpi(kpiTileFactory(oModel, aDataPoint, sEntityType, sBindingPath));
                            numKpiTiles += 1;
                        }
                    }
                    // max. 3 KPIs supported
                    if (numKpiTiles >= 3) {
                        break;
                    }
                }
            }

            // General facet
            for (i = 0; i < aFacets.length; i += 1) {
                if (aFacets[i]["com.sap.vocabularies.UI.v1.IsSummary"]) {
                    oGeneralFacet = aFacets[i];
                    break;
                }
            }
            if (oGeneralFacet) {
                iMaxItemsInGeneral = 15;
                for (j = 0; j < oGeneralFacet.Facets.length; j += 1) {
                    sUseTerm = oGeneralFacet.Facets[j].Target.AnnotationPath.substring(oGeneralFacet.Facets[j].Target.AnnotationPath.lastIndexOf("@") + 1);
                    sNavPath = oGeneralFacet.Facets[j].Target.AnnotationPath;
                    sNavPath = sNavPath.substring(0, sNavPath.lastIndexOf("@") - 1);
                    oGeneralFacet.Facets[j].NavPath = sNavPath;
                    sNavEntitySet = getNavEntitySet(sEntitySet, sNavPath, oMetadata);
                    oGeneralFacet.Facets[j].NavEntitySet = sNavEntitySet;
                    if (sNavEntitySet) {
                        sEntitySetForFacet = sNavEntitySet;
                    } else {
                        sEntitySetForFacet = sEntitySet;
                    }
                    oGeneralFacet.Facets[j].EntitySet = sEntitySetForFacet;
                    sNavEntityType = getEntityType(sNavEntitySet, oMetadata);
                    if (sNavEntityType) {
                        sEntityTypeForFacet = sNavEntityType;
                    } else {
                        sEntityTypeForFacet = sEntityType;
                    }
                    oGeneralFacet.Facets[j].EntityType = sEntityTypeForFacet;
                    aFacetContent = [];
                    if (oMapping[sEntityTypeForFacet][sUseTerm].length) {
                        aFacetContent = oMapping[sEntityTypeForFacet][sUseTerm];
                    } else if (oMapping[sEntityTypeForFacet][sUseTerm].Data.length) {
                        aFacetContent = oMapping[sEntityTypeForFacet][sUseTerm].Data;
                    }
                    oGeneralFacet.Facets[j].Content = aFacetContent;
                    for (i = 0; i < aFacetContent.length; i += 1) {
                        oImportance = getImportanceOfRecord(aFacetContent[i]);
                        if (oImportance === "High") {
                            iFieldsWithPrioHigh += 1;
                        } else if (oImportance === "Medium") {
                            iFieldsWithPrioMedium += 1;
                        }
                    }
                }
                if (iFieldsWithPrioHigh >= iMaxItemsInGeneral) {
                    iFieldsWithPrioHigh = iMaxItemsInGeneral;
                    iFieldsWithPrioMedium = 0;
                } else if ((iFieldsWithPrioHigh + iFieldsWithPrioMedium) > iMaxItemsInGeneral) {
                    iFieldsWithPrioMedium = iMaxItemsInGeneral - iFieldsWithPrioHigh;
                    if (iFieldsWithPrioMedium < 0) {
                        iFieldsWithPrioMedium = 0;
                    }
                }
                // On mobile phones only fields with priority high should be displayed
                if (jQuery.device.is.phone) {
                    iFieldsWithPrioMedium = 0;
                }
                iFreeSpaceBuffer = iMaxItemsInGeneral - iFieldsWithPrioHigh - iFieldsWithPrioMedium;
                oFacet = new sap.suite.ui.commons.FacetOverview({
                    title: oSapSuiteRb.getText("UNIFIEDTHINGINSPECTOR_GENERAL_INFORMATION_HEADER_TEXT")
                });
                aAllFacets = [];
                aAllFacets.push(oFacet);
                aAllFacets[0].bLoaded = false;
                aAllFacets[0].bProcessed = false;
                aAllFacets[0].bIsTable = false;
                aContent = [];
                iFieldsOnOverview = iFieldsWithPrioMedium + iFieldsWithPrioHigh;
                for (j = 0; j < oGeneralFacet.Facets.length; j += 1) {
                    oFormLayout = formLayoutFactory(oModel, oGeneralFacet.Facets[j].EntitySet, oGeneralFacet.Facets[j].Content, {High: iFieldsWithPrioHigh,
                           Medium: iFieldsWithPrioMedium, Low: 0}, null, oFacet).addStyleClass("sapFactsheetUtiTilePadding");
                    if (j > 0) {
                        oFormLayout.addStyleClass("sapFactsheetUtiPaddingTop");
                    }
                    if (oGeneralFacet.Facets[j].NavPath) {
                        oFormLayout.bindElement(sBindingPath + "/" + oGeneralFacet.Facets[j].NavPath);
                    }
                    oFieldSumsByPriority = getFieldSumsByPriority(oGeneralFacet.Facets[j].Content);
                    iFieldsWithPrioHigh -= oFieldSumsByPriority.High;
                    iFieldsWithPrioMedium -= oFieldSumsByPriority.Medium;
                    if (((oFieldSumsByPriority.High > 0) && ((iFieldsWithPrioHigh + oFieldSumsByPriority.High) > 0)) ||
                            ((oFieldSumsByPriority.Medium > 0) && ((iFieldsWithPrioMedium + oFieldSumsByPriority.Medium) > 0))) {
                        aContent.push(oFormLayout);
                        // If there is more than one facet there will be some space between the facets. Because of this the number of fields
                        // to be displayed must be reduced.
                        if (j > 0) {
                            if (iFreeSpaceBuffer > 0) {
                                iFreeSpaceBuffer -= 1;
                            } else if (iFieldsWithPrioMedium > 0) {
                                iFieldsWithPrioMedium -= 1;
                            } else if (iFieldsWithPrioHigh > 0) {
                                iFieldsWithPrioHigh -= 1;
                            }
                        }
                    }
                    if ((iFieldsWithPrioHigh < 1) && (iFieldsWithPrioMedium < 1)) {
                        break;
                    }
                }
                if (iFieldsWithPrioHigh < 0) {
                    iFieldsWithPrioHigh = 0;
                }
                if (iFieldsWithPrioMedium < 0) {
                    iFieldsWithPrioMedium = 0;
                }
                oContent = new sap.ui.layout.VerticalLayout({content: aContent, width: "100%"});
                sGeneralTileHeight = getTeaserTileHeight();
                iRowSpan = 1;
                if ((iFieldsOnOverview > 3) && (iFieldsOnOverview <= 9)) {
                    sGeneralTileHeight = getTeaserTileHeight(2);
                    iRowSpan = 2;
                } else if (iFieldsOnOverview > 9) {
                    sGeneralTileHeight = getTeaserTileHeight(3);
                    iRowSpan = 3;
                }
                oFacet.setContent(oContent);
                oFacet.setRowSpan(iRowSpan);
                if (jQuery.device.is.phone) {
                    oFacet.setHeightType(sap.suite.ui.commons.FacetOverviewHeight.Auto);
                } else {
                    oFacet.setHeight(sGeneralTileHeight);
                }
                oFacet.addStyleClass("sapFactsheetUtiGeneralInformationOverviewFacet");
                oFacet.attachPress({facets: oGeneralFacet}, function (oEvent, oData) {
                    var sDefaultSpan, oGrid, oTG, oVL, oContent;
                    oTI.removeAllFacetContent();
                    oTG = new sap.suite.ui.commons.UnifiedThingGroup();
                    oTG.setDescription(getTIDescription());
                    oTG.setTitle(oSapSuiteRb.getText("UNIFIEDTHINGINSPECTOR_GENERAL_INFORMATION_HEADER_TEXT"));
                    oTG.addStyleClass("sapFactsheetUtiGeneralInformationUtg");
                    if (oData.facets.Facets.length > 1) {
                        sDefaultSpan = "L6 M12 S12";
                    } else {
                        sDefaultSpan = "L12 M12 S12";
                    }
                    aAllFacets[0].Links = [];
                    oVL = new sap.ui.layout.VerticalLayout({width: "100%"});
                    for (i = 0; i < oData.facets.Facets.length; i += 1) {
                        if (i % 2 === 0) {
                            oGrid = new sap.ui.layout.Grid({
                                hSpacing: 1,
                                vSpacing: 1,
                                defaultSpan: sDefaultSpan
                            });
                        }
                        oContent = facetFactory(oModel, sEntitySet, oData.facets.Facets[i], sBindingPath, this);
                        oContent.addStyleClass("sapFactsheetUtiGeneralInformationUtgContent");
                        if ((i === 0) && (oData.facets.Facets.length > 1) && (oContent.getTitle().trim() === "")) {
                            oContent.setTitle(oSapSuiteRb.getText("UNIFIEDTHINGINSPECTOR_GENERAL_INFORMATION_HEADER_TEXT"));
                        }
                        oGrid.addContent(oContent);
                        if (i % 2 !== 0) {
                            oVL.addContent(oGrid);
                        }
                    }
                    //Workaround: no Link if no authority
                    aAllFacets[0].bLoaded = true;
                    aAllFacets[0].bProcessed = false;
                    aAllFacets[0].bIsTable = false;
                    checkLinks(0);
                    //Workaround: no Link if no authority
                    if (i % 2 !== 0) {
                        oVL.addContent(oGrid);
                    }
                    oTG.setContent(oVL);
                    oTI.addFacetContent(oTG);
                    oTI.navigateToDetail();
                });
                oTI.addFacet(oFacet);
            }

            // Callback method of the oData reads for the geofacet
            oDataReadCallbackGeo = function (functionParameters) {
                return function (data) {
                    var oGeoModel, oGeoLocation, sPos, oNewFlags,
                        processGeoApplication, geoMapCallFailed, submitListener, openWindowListener, closeWindowListener,
                        oJsonModel, sBindingPath, oContentAddress, oHeaderInfoGeo, oIdentificationGeo, oContentTitle, oContentDescription,
                        oContentDetail, sCaption, iCount, i;
                    if ((functionParameters.cardinality === "*" && data.results && data.results.length && data.results.length !== 0) ||
                            (functionParameters.cardinality === "1" && data)) {
                        oJsonModel = new sap.ui.model.json.JSONModel();
                        if (functionParameters.cardinality === "*") {
                            if (data.results && data.results.length) {
                                oJsonModel.setData(data);
                            }
                        } else {
                            oJsonModel.setData({result: data});
                            sBindingPath = "/result";
                        }
                        oGeoModel = new sap.ui.model.odata.ODataModel("/sap/opu/odata/sap/VBI_APPL_DEF_SRV", false);
                        oGeoLocation = oMapping[functionParameters.navigationType]["com.sap.vocabularies.UI.v1.GeoLocation"];
                        oHeaderInfoGeo = oMapping[functionParameters.navigationType]["com.sap.vocabularies.UI.v1.HeaderInfo"];
                        oIdentificationGeo = oMapping[functionParameters.navigationType]["com.sap.vocabularies.UI.v1.Identification"];
                        if (oGeoLocation.Longitude && oGeoLocation.Latitude) {
                            oNewFlags = {
                                "Data": {
                                    "Set": {
                                        "N": [
                                            {
                                                "name": "Spots",
                                                "E" : []
                                            }
                                        ]
                                    }
                                }
                            };
                            if (functionParameters.cardinality === "1") {
                                if (oGeoLocation.Longitude.Path && oGeoLocation.Latitude.Path) {
                                    sPos = data[oGeoLocation.Longitude.Path] + ";" + data[oGeoLocation.Latitude.Path] + ";0";
                                }
                                oNewFlags.Data.Set.N[0].E.push({"A": sPos, "I": "pin_blue.png" });
                            } else {
                                for (i = 0; i < data.results.length; i += 1) {
                                    if (oGeoLocation.Longitude.Path && oGeoLocation.Latitude.Path) {
                                        sPos = data.results[i][oGeoLocation.Longitude.Path] + ";" + data.results[i][oGeoLocation.Latitude.Path] + ";0";
                                    }
                                    oNewFlags.Data.Set.N[0].E.push({"A": sPos, "I": "pin_blue.png" });
                                }
                                // Set to first position
                                if (data.results.length !== 0) {
                                    sPos = data.results[0][oGeoLocation.Longitude.Path] + ";" + data.results[0][oGeoLocation.Latitude.Path] + ";0";
                                }
                            }
                        }
                        iCount = parseInt(data.__count, 10);
                        if (Number(iCount)) {
                            functionParameters.facet.setQuantity(iCount);
                        }
                        submitListener = function (oEvent) {
                            var oEventJSON, sSpot, oPopupJSON, popUpHeight, popUpWidth;
                            // Get the Spot on which was clicked
                            oEventJSON = $.parseJSON(oEvent.getParameters().data);
                            if (oEventJSON.Action.name === "DETAIL_REQUEST" && oEventJSON.Action.instance) {
                                sSpot = oEventJSON.Action.instance;
                                // Parse index of clicked Spot
                                if (oJsonModel.oData.results) {
                                    sBindingPath = "/results/" + sSpot.split(".")[1];
                                }
                                sCaption = oHeaderInfoGeo.TypeName.String.substring(0, 17); // caption must not be to long!
                                // Create JSON for Pop-Up
                                popUpHeight = parseFloat(getTeaserTileHeight(0.7)) * 16; // popup does not support rem -> do crude conversion
                                popUpWidth = parseFloat(getTeaserTileHeight(1.5)) * 16;
                                oPopupJSON = {
                                    "SAPVB": {
                                        "version": "2.0",
                                        "xmlns:VB": "VB",
                                        "Windows": {
                                            "Remove": {
                                                "name": "Detail1"
                                            },
                                            "Set": {
                                                "name": "Detail1",
                                                "Window": {
                                                    "id": "Detail1",
                                                    "type": "callout",
                                                    "refParent": "Main",
                                                    "refScene": "",
                                                    "offsetX": "16",
                                                    "offsetY": "-27",
                                                    "modal": "false",
                                                    "width": popUpWidth,
                                                    "height": popUpHeight,
                                                    "caption": sCaption,
                                                    "pos.bind": sSpot + ".GeoPosition"
                                                }
                                            }
                                        },
                                        "Scenes": {
                                            "Set": {
                                                "name": "Details",
                                                "Scene": {
                                                    "id": "Details",
                                                    "navControlVisible": "false"
                                                }
                                            }
                                        }
                                    }
                                };
                                this.load(oPopupJSON);
                            }
                        };
                        openWindowListener = function (oEvent) {
                            var key, sPopUpWidth, sNavEntitySet, iMaxFields;
                            if (!oContentTitle) {
                                // Content of Pop-Up doesn't exist yet.
                                // Get title and description of Pop-Up from HeaderInfo Term
                                oContentTitle = dataField(oHeaderInfoGeo.Title, functionParameters.navigationType, oMetadata, functionParameters.facet);
                                oContentTitle.setModel(oJsonModel);
                                oContentTitle.bindElement(sBindingPath);
                                oContentDescription = dataField(oHeaderInfoGeo.Description, functionParameters.navigationType, oMetadata, functionParameters.facet);
                                oContentDescription.setModel(oJsonModel);
                                oContentDescription.bindElement(sBindingPath);
                                // Get formatted address from property "label"
                                for (key in oGeoLocation.Address) {
                                    if (key === "label") {
                                        oContentAddress = dataField({Value: oGeoLocation.Address[key]}, functionParameters.navigationType, oMetadata, functionParameters.facet);
                                        oContentAddress.setModel(oJsonModel);
                                        oContentAddress.bindElement(sBindingPath);
                                        break;
                                    }
                                }
                                // Calculate maximal number of displayed high fields depending on device
                                iMaxFields = 7; //Default value for desktop
                                if (jQuery.device.is.tablet && jQuery.device.is.landscape) {
                                    iMaxFields = 4;
                                } else if (jQuery.device.is.tablet && jQuery.device.is.portrait) {
                                    iMaxFields = 5;
                                } else if (jQuery.device.is.phone && jQuery.device.is.landscape) {
                                    iMaxFields = 2;
                                } else if (jQuery.device.is.phone && jQuery.device.is.portrait) {
                                    iMaxFields = 3;
                                }
                                // Create a content for the additional fields with maximally 7 prio high field from Identification Term
                                oContentDetail = new sap.ui.layout.VerticalLayout({width: "100%"}).setModel(oModel);
                                if (functionParameters.navigationPath) {
                                    // GeoData is on subnode
                                    sNavEntitySet = getNavEntitySet(functionParameters.entitySet, functionParameters.navigationPath, oMetadata);
                                    oContentDetail.addContent(formLayoutFactory(oModel, sNavEntitySet, oIdentificationGeo, {High: iMaxFields}, null, functionParameters.facet));
                                    oContentDetail.setModel(oJsonModel).bindElement(sBindingPath);
                                } else {
                                    // GeoData is on root node 
                                    oContentDetail.addContent(formLayoutFactory(oModel, functionParameters.entitySet, oIdentificationGeo,
                                            {High: iMaxFields}, null, functionParameters.facet)).setModel(oJsonModel).bindElement(sBindingPath);
                                }
                            } else {
                                // Content of Pop-Up exists, rebind elements
                                oContentTitle.bindElement(sBindingPath);
                                if (oContentDescription) {
                                    oContentDescription.bindElement(sBindingPath);
                                }
                                if (oContentAddress) {
                                    oContentAddress.bindElement(sBindingPath);
                                }
                                if (oContentDetail) {
                                    oContentDetail.bindElement(sBindingPath);
                                }
                            }
                            sPopUpWidth = parseFloat(getTeaserTileHeight(1.5)) * 16 * 0.95 + "px"; // Popup does not support rem -> do crude conversion
                            if (oContentTitle) {
                                oContentTitle.placeAt(oEvent.getParameter("contentarea").id);
                                oContentTitle.addStyleClass("sapFactsheetUtiGeoPopupHead");
                                if (jQuery.device.is.phone) {
                                    oContentTitle.addStyleClass("sapFactsheetUtiGeoPopupHeadFontPhone");
                                }
                                oContentTitle.setWidth(sPopUpWidth);
                            }
                            if (oContentDescription) {
                                oContentDescription.placeAt(oEvent.getParameter("contentarea").id);
                                oContentDescription.addStyleClass("sapFactsheetUtiGeoPopupDescr");
                                if (jQuery.device.is.phone) {
                                    oContentDescription.addStyleClass("sapFactsheetUtiGeoPopupDescrFontPhone");
                                }
                                oContentDescription.setWidth(sPopUpWidth);
                            }
                            if (oContentAddress) {
                                oContentAddress.placeAt(oEvent.getParameter("contentarea").id);
                                oContentAddress.addStyleClass("sapFactsheetUtiGeoPopupText");
                                oContentAddress.setWidth(sPopUpWidth);
                            }
                            // If no Content available then don't show the control with "No Data"
                            if (oContentDetail && oContentDetail.getContent()[0] && oContentDetail.getContent()[0].getContent
                                    && oContentDetail.getContent()[0].getContent().length > 0) {
                                oContentDetail.placeAt(oEvent.getParameter("contentarea").id);
                                oContentDetail.addStyleClass("sapFactsheetUtiGeoPopupText");
                                oContentDetail.setWidth(sPopUpWidth);
                            }
                            //Workaround: no Link if no authority
                            if (aAllFacets.indexOf(functionParameters.facet) >= 0) {
                                aAllFacets[aAllFacets.indexOf(functionParameters.facet)].bLoaded = true;
                                aAllFacets[aAllFacets.indexOf(functionParameters.facet)].bProcessed = false;
                                aAllFacets[aAllFacets.indexOf(functionParameters.facet)].bIsTable = false;
                            }
                            checkLinks(aAllFacets.indexOf(functionParameters.facet));
                            //Workaround: no Link if no authority
                        };
                        closeWindowListener = function (oEvent) {
                            if (oContentTitle) {
                                oContentTitle.destroy();
                                oContentTitle = undefined;
                            }
                            if (oContentDescription) {
                                oContentDescription.destroy();
                                oContentDescription = undefined;
                            }
                            if (oContentAddress) {
                                oContentAddress.destroy();
                                oContentAddress = undefined;
                            }
                            if (oContentDetail) {
                                oContentDetail.destroy();
                                oContentDetail = undefined;
                            }
                            $(oEvent.getParameter("contentarea").id).empty();
                        };
                        processGeoApplication = function (functionParameters) {
                            return function (data) {
                                var oGeoJSON, oGeoContentDetail, oTG, sJSON, i;
                                sJSON = data.ProjectJSON;
                                sJSON = sJSON.indexOf("{") ? sJSON.substr(sJSON.indexOf("{")) : sJSON;  // Workaround: to get rid of a BOM character at the first position
                                oGeoJSON = $.parseJSON(sJSON);
                                oGeoJSON.SAPVB.Scenes.Set.SceneGeo.initialStartPosition = sPos;
                                oGeoJSON.SAPVB.Scenes.Set.SceneGeo.initialZoom = 12;
                                // Register click/touch event on map
                                oGeoJSON.SAPVB.Actions.Set.Action.push({
                                    id:"200",
                                    name: "TAP_ON_MAP",
                                    refEvent:"Click",
                                    refScene:"MainScene",
                                    refVO:"Map"
                                });
                                if (oNewFlags) {
                                    oGeoJSON.SAPVB.Data = oNewFlags.Data;
                                }
                                // Workaround: for the Spots set the scale attribute to a vector (x,y,z)
                                for (i = 0; i < oGeoJSON.SAPVB.Scenes.Set.SceneGeo.VO.length; i += 1) {
                                    if (oGeoJSON.SAPVB.Scenes.Set.SceneGeo.VO[i].datasource === "Spots") {
                                        if (oGeoJSON.SAPVB.Scenes.Set.SceneGeo.VO[i].scale && oGeoJSON.SAPVB.Scenes.Set.SceneGeo.VO[i].scale.split(";").length !== 3) {
                                            oGeoJSON.SAPVB.Scenes.Set.SceneGeo.VO[i].scale = "1.0;1.0;1.0";
                                            break;
                                        }
                                    }
                                }
                                // listen to click/touch event on map on the overview tile
                                functionParameters.facet.getContent().attachSubmit(function (oEvent) {
                                    // Workaround for mobile devices
                                    // fire Press event if any action is done (touch/tap/zoom) on map on overview tile
                                    if (jQuery.device.is.tablet || jQuery.device.is.phone) {
                                        functionParameters.facet.firePress();
                                    }
                                });
                                functionParameters.facet.getContent().load(oGeoJSON);
                                functionParameters.facet.attachPress("", function (oEvent, oData) {
                                    var aLong = [], aLat = [], i, newHeight;
                                    // Create GeoMap content
                                    if (!oGeoContentDetail) {
                                        oGeoContentDetail = new sap.ui.vbm.VBI({
                                            width: "100%",
                                            height: "100%",
                                            plugin: false,
                                            config: null
                                        });
                                        oGeoContentDetail.addStyleClass("sapFactsheetUtiGeoPopup");
                                    }
                                    oGeoJSON.SAPVB.Scenes.Set.SceneGeo.NavigationDisablement.move = "false";
                                    oGeoJSON.SAPVB.Scenes.Set.SceneGeo.NavigationDisablement.zoom = "false";
                                    oGeoJSON.SAPVB.Scenes.Set.SceneGeo.NavigationDisablement.pitch = "false";
                                    oGeoJSON.SAPVB.Scenes.Set.SceneGeo.NavigationDisablement.yaw = "false";
                                    oGeoJSON.SAPVB.Scenes.Set.SceneGeo.SuppressedNavControlVisibility = "false";
                                    oGeoContentDetail.load(oGeoJSON);
                                    // Collect longitude and latitude data of all locations
                                    if (functionParameters.cardinality === "*") {
                                        for (i = 0; i < oJsonModel.oData.results.length; i += 1) {
                                            aLong.push(oJsonModel.oData.results[i][oGeoLocation.Longitude.Path]);
                                            aLat.push(oJsonModel.oData.results[i][oGeoLocation.Latitude.Path]);
                                        }
                                    }
                                    oGeoContentDetail.attachSubmit(submitListener);
                                    oGeoContentDetail.attachOpenWindow(openWindowListener);
                                    oGeoContentDetail.attachCloseWindow(closeWindowListener);
                                    oTG = new sap.suite.ui.commons.UnifiedThingGroup({
                                        content: oGeoContentDetail,
                                        title: functionParameters.facetContent.Label.String,
                                        description: getTIDescription()
                                    });
                                    oTI.removeAllFacetContent();
                                    oTI.addFacetContent(oTG);
                                    oTI.navigateToDetail();
                                    // Workaround: UnifiedThingGroup doesn't propagate the height property to the childs, therefore we calculate the height manually
                                    oTI.attachAfterNavigate(aLong, function (oEvent) {
                                        if (oEvent.getParameters().getParameters().toId.indexOf("-detail-page") !== -1) {
                                            // Resize map to full container size on desktop and tablet and to 300px on phone
                                            if (jQuery.device.is.phone) {
                                                newHeight = "300px";
                                            } else {
                                                newHeight = Math.floor($("#" + oEvent.getParameters().getParameters().toId + "-cont").height() - 128) + "px";
                                            }
                                            oGeoContentDetail.setHeight(newHeight);
                                            // Zoom to show all locations
                                            if (aLong.length > 1) {
                                                oGeoContentDetail.zoomToGeoPosition(aLong, aLat);
                                            }
                                        }
                                    });
                                });
                            };
                        };
                        geoMapCallFailed = function (facet) {
                            return function (error) {
                                // OData returns an error. Don't display the map facet.
                                oTI.removeFacet(facet);
                            };
                        };
                        oGeoModel.read("VBIApplicationSet('ZFACTSHEETS')", "", "", false, processGeoApplication(functionParameters), geoMapCallFailed(functionParameters.facet));
                    } else {
                        functionParameters.facet.setQuantity(undefined);
                        functionParameters.facet.addStyleClass("sapFactsheetUtiEmptyTile");
                        functionParameters.facet.setHeightType(jQuery.device.is.phone ? sap.suite.ui.commons.FacetOverviewHeight.Auto : sap.suite.ui.commons.FacetOverviewHeight.S);
                        functionParameters.facet.setContent(undefined);
                        functionParameters.facet.setTitle(undefined);
                    }
                };
            };

            adjustHorizontalLayoutContent = function (oEvent) {
                var iHorizontalLayoutWidth, iHorizontalLayoutWidthLeft;
                iHorizontalLayoutWidth = oEvent.srcControl.getParent().getParent().getDomRef().clientWidth;
                iHorizontalLayoutWidthLeft = iHorizontalLayoutWidth;
                if (oEvent.srcControl.getParent().getContent()[0]) {
                    iHorizontalLayoutWidthLeft -= oEvent.srcControl.getParent().getContent()[0].getDomRef().clientWidth;
                    if (iHorizontalLayoutWidth < oEvent.srcControl.getParent().getContent()[0].getDomRef().clientWidth) {
                        oEvent.srcControl.getParent().getContent()[0].getDomRef().setAttribute("style", "width:" + iHorizontalLayoutWidth + "px");
                        return;
                    }
                }
                if (oEvent.srcControl.getParent().getContent()[1]) {
                    iHorizontalLayoutWidthLeft -= oEvent.srcControl.getParent().getContent()[1].getDomRef().clientWidth;
                }
                if (iHorizontalLayoutWidthLeft < 10) {
                    iHorizontalLayoutWidthLeft = 0;
                }
                if (oEvent.srcControl.getParent().getContent()[2]) {
                    oEvent.srcControl.getParent().getContent()[2].getDomRef().setAttribute("style", "width:" + iHorizontalLayoutWidthLeft + "px");
                }
            };

            // Callback method of the oData reads for the further facets
            oDataReadCallback = function (functionParameters) {
                return function (data) {
                    var oJsonModel, oBadge, oTitle, oMainInfo, oHLayout, sSetTitle, i, j,
                        oContent, iCount, oVLayoutForLabelValuePairs, aPropertyExtensions, oHLayoutForTitle, oTitleLabel,
                        oHLayoutForMainInfo, oMainInfoLabel, oHLayoutForSecondaryInfo, oSecondaryInfoLabel, oSecondaryInfo,
                        oImageUrl, oHLayoutForIconAndText, iSize, oImage, sAttribute, bResultNotEmpty, sSeparator = "", oAnnotationPath,
                        oChart, oLabel, aDimensions, aMeasures, oDataset;
                    oJsonModel = new sap.ui.model.json.JSONModel();
                    if (functionParameters.facetContent.Target && functionParameters.facetContent.Target.AnnotationPath
                            && functionParameters.facetContent.Target.AnnotationPath.split("#")[1]
                            && oMapping[functionParameters.navigationType]["com.sap.vocabularies.UI.v1.Badge#" + functionParameters.facetContent.Target.AnnotationPath.split("#")[1]]) {
                        oBadge = oMapping[functionParameters.navigationType]["com.sap.vocabularies.UI.v1.Badge#" + functionParameters.facetContent.Target.AnnotationPath.split("#")[1]];
                    } else {
                        oBadge = oMapping[functionParameters.navigationType]["com.sap.vocabularies.UI.v1.Badge"];
                    }
                    if (functionParameters.cardinality === "*") {
                        if (data.results && data.results.length) {
                            oAnnotationPath = functionParameters.facetContent.Target.AnnotationPath;
                            sTerm = oAnnotationPath.substring(oAnnotationPath.lastIndexOf("@") + 1);
                            if (sTerm === "com.sap.vocabularies.UI.v1.Chart") {
                                jQuery.sap.require("sap.viz.ui5.data.FlattenedDataset");
                                oChart = oMapping[functionParameters.navigationType]["com.sap.vocabularies.UI.v1.Chart"];
                                oLabel = oMapping.propertyExtensions[functionParameters.navigationType];
                                // Collect dimensions
                                aDimensions = [];
                                for (i = 0; i < oChart.Dimensions.length; i += 1) {
                                    aDimensions.push({
                                        axis : 1,
                                        name : oLabel[oChart.Dimensions[i].PropertyPath]["http://www.sap.com/Protocols/SAPData"].label,
                                        value : "{" + oChart.Dimensions[i].PropertyPath + "}"
                                    });
                                }
                                // Collect measures
                                aMeasures = [];
                                for (i = 0; i < oChart.Measures.length; i += 1) {
                                    aMeasures.push({
                                        name : oLabel[oChart.Measures[i].PropertyPath]["http://www.sap.com/Protocols/SAPData"].label,
                                        value : "{" + oChart.Measures[i].PropertyPath + "}"
                                    });
                                }
                                oDataset = new sap.viz.ui5.data.FlattenedDataset({
                                    dimensions : aDimensions,
                                    measures : aMeasures,
                                    data : { path : "/results" }
                                });
                                oContent = chartControlFactory(oChart.ChartType.EnumMember, oChart.Title, oChart.Description, oDataset);
                                // Attach the model to the chart and display it
                                oContent.setModel(oJsonModel);
                                functionParameters.facet.setHeightType(jQuery.device.is.phone ? sap.suite.ui.commons.FacetOverviewHeight.Auto : sap.suite.ui.commons.FacetOverviewHeight.XL);
                            } else {
                                oContent = new sap.ui.layout.VerticalLayout({width: "100%"}).addStyleClass("sapFactsheetUtiVLayoutPadding");
                                for (i = 0; i < data.results.length; i += 1) {
                                    oHLayout = new sap.ui.layout.HorizontalLayout().addStyleClass("sapFactsheetUtiHLayoutPadding");
                                    oTitle = dataField(oBadge.Title, functionParameters.navigationType, oMetadata, functionParameters.facet);
                                    if (oTitle.setWrapping) {
                                        oTitle.setWrapping(false);
                                    }
                                    oTitle.addDelegate({
                                        onAfterRendering: adjustHorizontalLayoutContent
                                    });
                                    oJsonModel = new sap.ui.model.json.JSONModel();
                                    oJsonModel.setData({result: data.results[i]});
                                    oTitle.setModel(oJsonModel);
                                    oTitle.bindElement("/result");
                                    sSetTitle = false;
                                    if (data.results[i][oBadge.Title.Value.Path]) {
                                        sSetTitle = true;
                                    }
                                    if (oBadge.Title.Value.Apply) {
                                      for (j = 0; j < oBadge.Title.Value.Apply.Parameters.length; j += 1) {
                                          if (oBadge.Title.Value.Apply.Parameters[j].Type === "Path") {
                                              if (data.results[i][oBadge.Title.Value.Apply.Parameters[j].Value]) {
                                                  sSetTitle = true;
                                                  break;
                                              }
                                          }
                                      }
                                    }
                                    sSeparator = "";
                                    if (sSetTitle) {
                                        oHLayout.addContent(oTitle);
                                        // Define the separator for the Tile values e.g. VALUE - VALUE or VALUE, VALUE
                                        if (oBadge.MainInfo && ((oBadge.MainInfo.EdmType && oBadge.MainInfo.EdmType === "Edm.Decimal") ||
                                                (oBadge.MainInfo.Value && oBadge.MainInfo.Value.Apply && oBadge.MainInfo.Value.Apply.Parameters[0] 
                                                && oBadge.MainInfo.Value.Apply.Parameters[0].EdmType && oBadge.MainInfo.Value.Apply.Parameters[0].EdmType === "Edm.Decimal"))) {
                                            // Decimals 
                                            sSeparator = "comma";
                                        } else if (oBadge.MainInfo && oBadge.MainInfo.Value.Path && data.results[i][oBadge.MainInfo.Value.Path]) {
                                            // Non decimal 
                                            sSeparator = "dash";
                                        } else if (oBadge.MainInfo && oBadge.MainInfo.Value.Apply) {
                                            // Non decimal concatenated fields
                                            for (j = 0; j < oBadge.MainInfo.Value.Apply.Parameters.length; j += 1) {
                                                if (oBadge.MainInfo.Value.Apply.Parameters[j].Type === "Path") {
                                                    if (data.results[i][oBadge.MainInfo.Value.Apply.Parameters[j].Value]) {
                                                        sSeparator = "dash";
                                                        break;
                                                    }
                                                }
                                            }
                                        }
                                        if (sSeparator === "dash") {
                                            oHLayout.addContent(new sap.ui.core.HTML({content: "<span class=\"sapFactsheetUtiSeparatorPadding sapMText\"> &ndash; </span>"}));
                                        }
                                        if (sSeparator === "comma") {
                                            oHLayout.addContent(new sap.m.Text({text: ", "}).addStyleClass("sapFactsheetUtiSeparatorPaddingForDecimal"));
                                        }
                                    }
                                    
                                    if (oBadge.MainInfo) {
                                        oMainInfo = dataField(oBadge.MainInfo, functionParameters.navigationType, oMetadata, functionParameters.facet);
                                        if (oMainInfo.setWrapping) {
                                            oMainInfo.setWrapping(false);
                                        }
                                        oMainInfo.addDelegate({
                                            onAfterRendering: adjustHorizontalLayoutContent
                                        });
                                        oMainInfo.setModel(oJsonModel);
                                        oMainInfo.bindElement("/result");
                                        oHLayout.addContent(oMainInfo);
                                    }
                                    oContent.addContent(oHLayout);
                                }
                            }
                            iCount = parseInt(data.__count, 10);
                            if (Number(iCount)) {
                                functionParameters.facet.setQuantity(iCount);
                            }
                            functionParameters.facet.setContent(oContent);

                            functionParameters.facet.attachPress({facet: functionParameters.facetContent}, function (oEvent, oData) {
                                var oContent;
                                oTI.removeAllFacetContent();
                                aAllFacets[aAllFacets.indexOf(functionParameters.facet)].Links = [];
                                oContent = facetFactory(oModel, functionParameters.entitySet, oData.facet, functionParameters.bindingPath, this);
                                oContent.setDescription(getTIDescription());
                                oTI.addFacetContent(oContent);
                                //Workaround: no Link if no authority
                                if (aAllFacets.indexOf(functionParameters.facet) >= 0) {
                                    aAllFacets[aAllFacets.indexOf(functionParameters.facet)].bLoaded = false;
                                    aAllFacets[aAllFacets.indexOf(functionParameters.facet)].bProcessed = false;
                                    aAllFacets[aAllFacets.indexOf(functionParameters.facet)].bIsTable = true;
                                }
                                checkLinks(aAllFacets.indexOf(functionParameters.facet));
                                //Workaround: no Link if no authority
                                oTI.navigateToDetail();
                            });
                        } else {
                            functionParameters.facet.setQuantity(0);
                            functionParameters.facet.addStyleClass("sapFactsheetUtiEmptyTile");
                            functionParameters.facet.setHeightType(jQuery.device.is.phone ? sap.suite.ui.commons.FacetOverviewHeight.Auto : sap.suite.ui.commons.FacetOverviewHeight.S);
                        }
                        //Workaround: no Link if no authority
                        if (aAllFacets.indexOf(functionParameters.facet) >= 0) {
                            aAllFacets[aAllFacets.indexOf(functionParameters.facet)].bLoaded = true;
                            aAllFacets[aAllFacets.indexOf(functionParameters.facet)].bProcessed = false;
                            aAllFacets[aAllFacets.indexOf(functionParameters.facet)].bIsTable = false;
                        }
                        checkLinks(aAllFacets.indexOf(functionParameters.facet));
                        //Workaround: no Link if no authority
                    } else {
                        oJsonModel.setData({result: data});
                        // Check if response returned data as Gateway is currently not able to send the right HTTP status code for an empty document.
                        for (sAttribute in data) {
                            if (data.hasOwnProperty(sAttribute)) {
                                if (sAttribute !== "__metadata") {
                                    // A string which is not empty
                                    if (typeof data[sAttribute] === "string" && data[sAttribute]) {
                                        // Could be a number like f.e. "0.000" or "000000", that returns 0 when calling parseInt.
                                        // When the string contains chars parseInt returns NaN.
                                        if (parseInt(data[sAttribute], 10) !== 0) {
                                            bResultNotEmpty = true;
                                            break;
                                        }
                                    } else if (typeof data[sAttribute] === "number" && parseInt(data[sAttribute], 10) !== 0) {
                                        bResultNotEmpty = true;
                                        break;
                                    }
                                }
                            }
                        }
                        if (bResultNotEmpty) {
                            oVLayoutForLabelValuePairs = new sap.ui.layout.VerticalLayout();
                            aPropertyExtensions = (oMapping.propertyExtensions) ? oMapping.propertyExtensions[functionParameters.navigationType] : [];
                            oHLayoutForTitle = new sap.ui.layout.HorizontalLayout().addStyleClass("sapFactsheetUtiHLayoutLabelValue");
                            oTitleLabel = labelBinding(oBadge.Title, {}, aPropertyExtensions, true).addStyleClass("sapFactsheetUtiLabelMargin");
                            oTitle = dataField(oBadge.Title, functionParameters.navigationType, oMetadata, functionParameters.facet);
                            oTitle.setModel(oJsonModel);
                            oTitle.bindElement("/result");
                            oHLayoutForTitle.addContent(oTitleLabel);
                            oHLayoutForTitle.addContent(oTitle);
                            oVLayoutForLabelValuePairs.addContent(oHLayoutForTitle);
                            if (oBadge.MainInfo) {
                                oHLayoutForMainInfo = new sap.ui.layout.HorizontalLayout().addStyleClass("sapFactsheetUtiHLayoutLabelValue");
                                oMainInfoLabel = labelBinding(oBadge.MainInfo, {}, aPropertyExtensions, true).addStyleClass("sapFactsheetUtiLabelMargin");
                                oMainInfo = dataField(oBadge.MainInfo, functionParameters.navigationType, oMetadata, functionParameters.facet);
                                oMainInfo.setModel(oJsonModel);
                                oMainInfo.bindElement("/result");
                                oHLayoutForMainInfo.addContent(oMainInfoLabel);
                                oHLayoutForMainInfo.addContent(oMainInfo);
                                oVLayoutForLabelValuePairs.addContent(oHLayoutForMainInfo);
                            }
                            if (oBadge.SecondaryInfo) {
                                oHLayoutForSecondaryInfo = new sap.ui.layout.HorizontalLayout().addStyleClass("sapFactsheetUtiHLayoutLabelValue");
                                oSecondaryInfoLabel = labelBinding(oBadge.SecondaryInfo, {}, aPropertyExtensions, true).addStyleClass("sapFactsheetUtiLabelMargin");
                                oSecondaryInfo = dataField(oBadge.SecondaryInfo, functionParameters.navigationType, oMetadata, functionParameters.facet);
                                oSecondaryInfo.setModel(oJsonModel);
                                oSecondaryInfo.bindElement("/result");
                                oHLayoutForSecondaryInfo.addContent(oSecondaryInfoLabel);
                                oHLayoutForSecondaryInfo.addContent(oSecondaryInfo);
                                oVLayoutForLabelValuePairs.addContent(oHLayoutForSecondaryInfo);
                            }
                            if (oBadge.TypeImageUrl || oBadge.ImageUrl) {
                                if (oBadge.ImageUrl) {
                                    oImageUrl = oBadge.ImageUrl;
                                } else {
                                    oImageUrl = oBadge.TypeImageUrl;
                                }
                                oHLayoutForIconAndText = new sap.ui.layout.HorizontalLayout();
                                iSize = "64px";
                                if (jQuery.device.is.phone) {
                                    iSize = "48px";
                                }
                                if (oImageUrl.String && (oImageUrl.String.substr(0, 11) === "sap-icon://")) {
                                    oImage = new sap.ui.core.Icon({size: iSize, width: iSize});
                                } else {
                                    oImage = new sap.m.Image({ width: iSize });
                                }
                                oImage.addStyleClass("sapFactsheetUtiRelIcon");
                                if (oImageUrl && oImageUrl.String) {
                                    oImage.setSrc(oImageUrl.String);
                                } else {
                                    if (oImageUrl && oImageUrl.Path) {
                                        oImage.bindProperty("src", oImageUrl.Path);
                                    }
                                }
                                oHLayoutForIconAndText.addContent(oImage);
                                oHLayoutForIconAndText.addContent(oVLayoutForLabelValuePairs);
                                functionParameters.facet.setContent(oHLayoutForIconAndText);
                            } else {
                                functionParameters.facet.setContent(oVLayoutForLabelValuePairs);
                            }

                            functionParameters.facet.attachPress({facet: functionParameters.facetContent}, function (oEvent, oData) {
                                var oContent;
                                oTI.removeAllFacetContent();
                                aAllFacets[aAllFacets.indexOf(functionParameters.facet)].Links = [];
                                oContent = facetFactory(oModel, functionParameters.entitySet, oData.facet, functionParameters.bindingPath, this);
                                oContent.setDescription(getTIDescription());
                                oTI.addFacetContent(oContent);
                                //Workaround: no Link if no authority
                                if (aAllFacets.indexOf(functionParameters.facet) >= 0) {
                                    aAllFacets[aAllFacets.indexOf(functionParameters.facet)].bLoaded = true;
                                    aAllFacets[aAllFacets.indexOf(functionParameters.facet)].bProcessed = false;
                                    aAllFacets[aAllFacets.indexOf(functionParameters.facet)].bIsTable = false;
                                }
                                checkLinks(aAllFacets.indexOf(functionParameters.facet));
                                //Workaround: no Link if no authority
                                oTI.navigateToDetail();
                            });
                        } else {
                            functionParameters.facet.addStyleClass("sapFactsheetUtiEmptyTile");
                            functionParameters.facet.setHeightType(jQuery.device.is.phone ? sap.suite.ui.commons.FacetOverviewHeight.Auto : sap.suite.ui.commons.FacetOverviewHeight.S);
                        }
                        //Workaround: no Link if no authority
                        if (aAllFacets.indexOf(functionParameters.facet) >= 0) {
                            aAllFacets[aAllFacets.indexOf(functionParameters.facet)].bLoaded = true;
                            aAllFacets[aAllFacets.indexOf(functionParameters.facet)].bProcessed = false;
                            aAllFacets[aAllFacets.indexOf(functionParameters.facet)].bIsTable = false;
                        }
                        checkLinks(aAllFacets.indexOf(functionParameters.facet));
                        //Workaround: no Link if no authority
                    }
                };
            };
            oDataReadCallbackError = function (functionParameters) {
                return function (error) {
                    // OData returns an error. Don't display the facet.
                    oTI.removeFacet(functionParameters.facet);
                };
            };
            oDataReadCallbackMedia = function (functionParameters) {
                return function (data) {
                    var oHLayout, oMediaResource, i, iCount, oTG;
                    oMediaResource = oMapping[functionParameters.navigationType]["com.sap.vocabularies.UI.v1.MediaResource"];
                    if (functionParameters.cardinality === "*") {
                        if (data.results && data.results.length) {
                            oHLayout = new sap.ui.layout.HorizontalLayout().addStyleClass("sapFactsheetUtiPictureViewerOverview");
                            for (i = 0; i < data.results.length; i += 1) {
                                oHLayout.addContent(new sap.m.Image({
                                    src: data.results[i][oMediaResource.Thumbnail.Url.Path],
                                    height: "85px"
                                }));
                                if (i === 3) {
                                    break;
                                }
                            }
                            iCount = parseInt(data.__count, 10);
                            if (Number(iCount)) {
                                functionParameters.facet.setQuantity(iCount);
                            }
                            functionParameters.facet.setContent(oHLayout);
                            functionParameters.facet.attachPress({facet: functionParameters.facetContent, data: data}, function (oEvent, oData) {
                                var oPictureViewer, sHeight, oImage;
                                oTI.removeAllFacetContent();
                                oTG = new sap.suite.ui.commons.UnifiedThingGroup();
                                if (oData.facet.Label && oData.facet.Label.String) {
                                    oTG.setTitle(oData.facet.Label.String);
                                }
                                oTG.setDescription(getTIDescription());
                                if (jQuery.device.is.phone) {
                                    sHeight = "350px";
                                } else {
                                    sHeight = "550px";
                                }
                                oPictureViewer = new sap.m.Carousel({height: sHeight});
                                for (i = 0; i < oData.data.results.length; i += 1) {
                                    oImage = new sap.m.Image({src: oData.data.results[i][oMediaResource.Url.Path]});
                                    if (jQuery.device.is.phone) {
                                        oImage.addStyleClass("sapFactsheetUtiCarouselMaxImageHeightPhone");
                                    } else {
                                        oImage.addStyleClass("sapFactsheetUtiCarouselMaxImageHeight");
                                    }
                                    oPictureViewer.addPage(oImage);
                                }
                                oTG.setContent(oPictureViewer);
                                oTI.addFacetContent(oTG);
                                oTI.navigateToDetail();
                            });
                        } else {
                            functionParameters.facet.setQuantity(0);
                            functionParameters.facet.addStyleClass("sapFactsheetUtiEmptyTile");
                            functionParameters.facet.setHeightType(jQuery.device.is.phone ? sap.suite.ui.commons.FacetOverviewHeight.Auto : sap.suite.ui.commons.FacetOverviewHeight.S);
                        }
                    }
                };
            };

            extractContactsFromBatchRequest = function (oData, sOrder) {
                var k, i, j, aContactResults = [], oContacts = {}, oContactMetadata, fFieldValue, sPhone, sMobile, sFax, sTelephone, sPhoto, sMetadataEmail;
                fFieldValue = function (oMetadata, oContactResult) {
                    var i, sValue = "";
                    if (oMetadata) {
                        if (oMetadata.Path) {
                            return oContactResult[oMetadata.Path];
                        } else if (oMetadata.String) {
                            return oMetadata.String;
                        } else if (oMetadata.Apply.Name === "odata.concat") {
                            for (i = 0; i < oMetadata.Apply.Parameters.length; i += 1) {
                                if (oMetadata.Apply.Parameters[i].Type === "Path") {
                                    sValue = sValue + oContactResult[oMetadata.Apply.Parameters[i].Value];
                                } else if (oMetadata.Apply.Parameters[i].Type === "String") {
                                    sValue = sValue + oMetadata.Apply.Parameters[i].Value;
                                }
                            }
                            return sValue;
                        }
                    }
                };
                oContacts.iCount = 0;
                oContacts.aContacts = [];
                for (i = 0; i < oData.__batchResponses.length; i += 1) {
                    if (!oData.__batchResponses[i].data) {
                        continue;
                    }
                    aContactResults = oData.__batchResponses[i].data.results;
                    if (!aContactResults) {
                        aContactResults = [];
                        aContactResults.push(oData.__batchResponses[i].data);
                    }
                    if (aContactResults.length > 0) {
                        oContactMetadata = oMapping[aContactResults[0].__metadata.type]["com.sap.vocabularies.Communication.v1.Contact"];
                        if (oContactMetadata) {
                            for (j = 0; j < aContactResults.length; j += 1) {
                                sPhone = sMobile = sFax = "";
                                if (oContactMetadata.tel) {
                                    for (k = 0; k < oContactMetadata.tel.length; k += 1){
                                        if (oContactMetadata.tel[k].type && oContactMetadata.tel[k].type.EnumMember) {
                                            sTelephone = fFieldValue(oContactMetadata.tel[k].uri, aContactResults[j]);
                                            switch (oContactMetadata.tel[k].type.EnumMember) {
                                            case "com.sap.vocabularies.Communication.v1.PhoneType/voice":
                                                sPhone = sTelephone ? sTelephone.replace("tel:", "") : "";
                                                sPhone = sPhone ? sPhone.replace(";ext=", "") : "";
                                                break;
                                            case "com.sap.vocabularies.Communication.v1.PhoneType/cell":
                                                sMobile = sTelephone ? sTelephone.replace("tel:", "") : "";
                                                sMobile = sMobile ? sMobile.replace(";ext=", "") : "";
                                                break;
                                            case "com.sap.vocabularies.Communication.v1.PhoneType/fax":
                                                sFax = sTelephone ? sTelephone.replace("tel:", "") : "";
                                                sFax = sFax ? sFax.replace(";ext=", "") : "";
                                                break;
                                            }
                                        }
                                    }
                                }
                                sMetadataEmail = oContactMetadata.email && oContactMetadata.email.address ? oContactMetadata.email.address : "";
                                sPhoto = fFieldValue(oContactMetadata.photo, aContactResults[j]);
                                oContacts.iCount += 1;
                                oContacts.aContacts.push({
                                    fn           : fFieldValue(oContactMetadata.fn, aContactResults[j]),
                                    title        : fFieldValue(oContactMetadata.title, aContactResults[j]),
                                    org          : fFieldValue(oContactMetadata.org, aContactResults[j]),
                                    phone        : sPhone,
                                    mobile       : sMobile,
                                    fax          : sFax,
                                    photo        : sPhoto,
                                    email        : fFieldValue(sMetadataEmail, aContactResults[j]),
                                    sEntity      : aContactResults[0].__metadata.type,
                                    bExistsPhoto : sPhoto ? true : false,
                                    bUseIcon     : sPhoto ? false : true,
                                    sOrder       : oContacts.iCount // Order inside an entity
                                });
                            }
                        }
                    }
                }
                if (sOrder) {
                    oContacts.aContacts.sort(function (a, b) {
                        return a[sOrder] > b[sOrder] ? 1 : -1;
                    });
                }
                return oContacts;
            };
            oDataReadCallbackContacts = function (functionParameters) {
                return function (oData) {
                    var i, oContacts, oGrid, oHLayout, oVLayout, oImgLayout, oImage, sTileSize;
                    oContacts = extractContactsFromBatchRequest(oData, "sOrder");
                    oGrid = new sap.ui.layout.Grid({
                        defaultSpan: "L6 M6 S12",
                        hSpacing: 0,
                        vSpacing: 0
                    }).addStyleClass("sapFactsheetUtiContactsGrid");
                    for (i = 0; i < oContacts.aContacts.length && i < 4; i += 1) {
                        oImgLayout = new sap.ui.layout.VerticalLayout();
                        if (oContacts.aContacts[i].photo) {
                            oImage = new sap.m.Image({
                                height: "55px",
                                src: oContacts.aContacts[i].photo
                            });
                        } else {
                            oImage = new sap.ui.core.Icon({
                                size: "50px",
                                src: sap.ui.core.IconPool.getIconURI("person-placeholder")
                            }).addStyleClass("sapFactsheetUtiRelIcon");
                        }
                        oImgLayout.addContent(oImage);
                        oImgLayout.addStyleClass("sapFactsheetUtiContactsImage");
                        oVLayout = new sap.ui.layout.VerticalLayout({
                            content : [ new sap.m.Text({
                                text: oContacts.aContacts[i].fn
                            }).addStyleClass("sapFactsheetUtiTextName"),
                                new sap.m.Text({
                                    text: oContacts.aContacts[i].title
                                }).addStyleClass("sapFactsheetUtiTextValue")
                                ]
                        });
                        oHLayout = new sap.ui.layout.HorizontalLayout({
                            content: [ oImgLayout,
                                        oVLayout ]
                        }).addStyleClass("sapFactsheetUtiContactsBox");
                        oGrid.addContent(oHLayout);
                    }
                    oFacet = sap.ui.getCore().byId(oTI.data("contactFacetId"));
                    oFacet.setQuantity(oContacts.iCount);
                    if (i > 0) {
                        oFacet.setContent(oGrid);
                        if (i <= 2) {
                            sTileSize = sap.suite.ui.commons.FacetOverviewHeight.M;
                        } else {
                            sTileSize = sap.suite.ui.commons.FacetOverviewHeight.L;
                        }
                        oFacet.attachPress(function () {
                            var i, aOperations = [], sBatchPath;
                            oModel.clearBatch();
                            for (i = 0; i < oMapping[sEntityType]["com.sap.vocabularies.UI.v1.Contacts"].length; i += 1) {
                                sNavPath = oMapping[sEntityType]["com.sap.vocabularies.UI.v1.Contacts"][i].AnnotationPath;
                                sNavPath = sNavPath.substring(0, sNavPath.lastIndexOf("@") - 1);
                                if (sNavPath !== "") {
                                    sBatchPath = sBindingPath + "/" + sNavPath;
                                } else {
                                    sBatchPath = sBindingPath;
                                }
                                aOperations.push(oModel.createBatchOperation(sBatchPath, "GET"));
                            }
                            oModel.addBatchReadOperations(aOperations);
                            oModel.submitBatch(function (oData) {
                                var oContacts, oJSONModel, oTemplate, oTable, oVSDialog, oTG, oResourceBundle;
                                oResourceBundle = jQuery.sap.resources({
                                    url: jQuery.sap.getModulePath("sap.ushell.components.container.") + "/resources/resources.properties",
                                    language: sap.ui.getCore().getConfiguration().getLanguage()
                                });
                                oContacts = extractContactsFromBatchRequest(oData, "sEntity");
                                oJSONModel = new sap.ui.model.json.JSONModel();
                                oJSONModel.setData(oContacts);
                                oTemplate = new sap.m.ColumnListItem({
                                    type: sap.m.Inactive,
                                    unread: false,
                                    cells: [
                                        new sap.ui.layout.VerticalLayout({ content:
                                            [
                                                new sap.m.Image({
                                                    src: "{photo}",
                                                    width: "74px",
                                                    visible: "{bExistsPhoto}"
                                                }),
                                                new sap.ui.core.Icon({
                                                    size: "76px",
                                                    src: sap.ui.core.IconPool.getIconURI("person-placeholder"),
                                                    visible: "{bUseIcon}"
                                                }).addStyleClass("sapFactsheetUtiRelIcon")
                                            ]
                                            }),
                                        new sap.ui.layout.VerticalLayout({
                                            content: [ new sap.m.Text({text: "{fn}"}).addStyleClass("sapFactsheetUtiContactsName"),
                                                       new sap.m.Label({text: "{title}"}),
                                                       new sap.m.Label({text: "{org}"})
                                            ]
                                        }),
                                        new sap.m.Link({text: "{phone}", href: "tel:{phone}"}),
                                        new sap.m.Link({text: "{mobile}", href: "tel:{mobile}"}),
                                        new sap.m.Link({text: "{fax}", href: "tel:{fax}"}),
                                        new sap.m.Link({text: "{email}", href: "mailto:{email}"})
                                    ]
                                });
                                oTable = new sap.m.Table({
                                    threshold: 2,
                                    inset: false,
                                    showUnread: true,
                                    scrollToLoad: true,
                                    columns: [
                                        new sap.m.Column({
                                            hAlign: sap.ui.core.TextAlign.Center,
                                            width: "12%",
                                            header: new sap.m.Text({text: ""})
                                        }),
                                        new sap.m.Column({
                                            hAlign: sap.ui.core.TextAlign.Begin,
                                            header: new sap.m.Text({text : oResourceBundle.getText("USHELL_FACTSHEET_NAME")})
                                        }),
                                        new sap.m.Column({
                                            hAlign: sap.ui.core.TextAlign.Begin,
                                            width: "12%",
                                            header: new sap.m.Text({text : oResourceBundle.getText("USHELL_FACTSHEET_PHONE")}),
                                            minScreenWidth : "Tablet",
                                            demandPopin : true
                                        }),
                                        new sap.m.Column({
                                            hAlign: sap.ui.core.TextAlign.Begin,
                                            width: "12%",
                                            header: new sap.m.Text({text : sap.ushell.resources.i18n.getText("mobile")}),
                                            minScreenWidth : "Tablet",
                                            demandPopin : true
                                        }),
                                        new sap.m.Column({
                                            hAlign: sap.ui.core.TextAlign.Begin,
                                            width: "12%",
                                            header: new sap.m.Text({text : sap.ushell.resources.i18n.getText("fax")}),
                                            minScreenWidth : "Tablet",
                                            demandPopin : true
                                        }),
                                        new sap.m.Column({
                                            hAlign: sap.ui.core.TextAlign.Begin,
                                            width: "26%",
                                            header: new sap.m.Text({text : oResourceBundle.getText("USHELL_FACTSHEET_EMAIL")}),
                                            minScreenWidth : "Tablet",
                                            demandPopin : true
                                        })],
                                    items: {
                                        path: "/aContacts",
                                        template: oTemplate
                                    }
                                });
                                oVSDialog = new sap.m.ViewSettingsDialog({
                                    sortItems: [ new sap.m.ViewSettingsItem({ key: "fn", text: oResourceBundle.getText("USHELL_FACTSHEET_NAME")}),
                                                 new sap.m.ViewSettingsItem({ key: "phone", text: oResourceBundle.getText("USHELL_FACTSHEET_PHONE")}),
                                                 new sap.m.ViewSettingsItem({ key: "mobile", text: sap.ushell.resources.i18n.getText("mobile")}),
                                                 new sap.m.ViewSettingsItem({ key: "fax", text: sap.ushell.resources.i18n.getText("fax")}),
                                                 new sap.m.ViewSettingsItem({ key: "email", text: oResourceBundle.getText("USHELL_FACTSHEET_EMAIL")})],
                                    confirm: function (evt) {
                                        var mParams, oBinding, aSorters = [];
                                        mParams = evt.getParameters();
                                        oBinding = oTable.getBinding("items");
                                        if (mParams.sortItem) {
                                            aSorters.push(new sap.ui.model.Sorter(mParams.sortItem.getKey(), mParams.sortDescending));
                                            oBinding.sort(aSorters);
                                        }
                                    }
                                });
                                oTable.setHeaderToolbar(new sap.m.Toolbar({
                                    content: [
                                        new sap.m.Label(),
                                        new sap.m.ToolbarSpacer(),
                                        new sap.m.Button({
                                            icon : "sap-icon://drop-down-list",
                                            press : function (evt) {
                                                oVSDialog.open();
                                            }
                                        })
                                    ]
                                }));
                                oTable.setModel(oJSONModel);
                                oTG = new sap.suite.ui.commons.UnifiedThingGroup({
                                    title: oFacet.getTitle(),
                                    description: getTIDescription(),
                                    content: oTable
                                });
                                oTI.removeAllFacetContent();
                                oTI.addFacetContent(oTG);
                                oTI.navigateToDetail();
                            });
                        });
                    } else {
                        sTileSize = sap.suite.ui.commons.FacetOverviewHeight.S;
                        oFacet.addStyleClass("sapFactsheetUtiEmptyTile");
                        oFacet.setQuantity(0);
                    }
                    oFacet.setHeightType(jQuery.device.is.phone ? sap.suite.ui.commons.FacetOverviewHeight.Auto : sTileSize);
                };
            };

            // Loop at the further facets and make oData reads to the corresponding services
            for (i = 0; i < aFacets.length; i += 1) {
                if (aFacets[i]["com.sap.vocabularies.UI.v1.Map"]) {
                    sNavPath = aFacets[i].Target.AnnotationPath;
                    sNavPath = sNavPath.substring(0, sNavPath.lastIndexOf("@") - 1);
                    sCardinality = "1";
                    sNavType = sEntityType;
                    if (sNavPath) {
                        sNavType = getNavTypeForNavPath(sNavPath, sEntityType, oMetadata);
                        sCardinality = getAssociationMultiplicity(sEntitySet, sNavPath, oMetadata);
                    }
                    sHeight = "100%";
                    if (jQuery.device.is.phone) {
                        sHeight = "150px";
                    }
                    oGeoContent =  new sap.ui.vbm.VBI({
                        width: "100%",
                        height: sHeight,
                        plugin: false,
                        config: null
                    });
                    oFacet = new sap.suite.ui.commons.FacetOverview({
                        title: aFacets[i].Label.String.trim(),
                        heightType: jQuery.device.is.phone ? sap.suite.ui.commons.FacetOverviewHeight.Auto : sap.suite.ui.commons.FacetOverviewHeight.L,
                        content: oGeoContent
                    });
                    //Workaround: no Link if no authority
                    aAllFacets.push(oFacet);
                    aAllFacets[aAllFacets.length - 1].bLoaded = false;
                    aAllFacets[aAllFacets.length - 1].bProcessed = false;
                    aAllFacets[aAllFacets.length - 1].bIsTable = false;
                    //Workaround: no Link if no authority
                    functionParameters = { cardinality: sCardinality, navigationPath: sNavPath, facet: oFacet, facetContent: aFacets[i],
                            navigationType: sNavType, metadata: oMetadata, bindingPath: sBindingPath, entitySet: sEntitySet };
                    if (sCardinality === "*") {
                        parameters = ["$inlinecount=allpages", "$top=1000"];
                    } else {
                        parameters = [];
                    }
                    oModel.read(sBindingPath + "/" + sNavPath, "", parameters, true, oDataReadCallbackGeo(functionParameters));
                    oTI.addFacet(oFacet);
                } else {
                    if (aFacets[i].Target) {
                        sNavPath = aFacets[i].Target.AnnotationPath;
                        sNavPath = sNavPath.substring(0, sNavPath.lastIndexOf("@") - 1);
                        sTerm = aFacets[i].Target.AnnotationPath.substring(aFacets[i].Target.AnnotationPath.lastIndexOf("@") + 1);
                        if (sNavPath) {
                            sNavType = getNavTypeForNavPath(sNavPath, sEntityType, oMetadata);
                            oFacet = new sap.suite.ui.commons.FacetOverview({
                                title: aFacets[i].Label.String.trim(),
                                heightType: jQuery.device.is.phone ? sap.suite.ui.commons.FacetOverviewHeight.Auto : sap.suite.ui.commons.FacetOverviewHeight.M
                            });
                            sCardinality = getAssociationMultiplicity(sEntitySet, sNavPath, oMetadata);
                            if (sCardinality !== 0) {
                                functionParameters = { cardinality: sCardinality, navigationPath: sNavPath, facet: oFacet, facetContent: aFacets[i],
                                        navigationType: sNavType, metadata: oMetadata, bindingPath: sBindingPath, entitySet: sEntitySet };
                                if (aFacets[i]["com.sap.vocabularies.UI.v1.Gallery"]) {
                                    if (sCardinality === "*") {
                                        parameters = ["$inlinecount=allpages"];
                                    } else {
                                        parameters = [];
                                    }
                                    oModel.read(sBindingPath + "/" + sNavPath, "", parameters, true, oDataReadCallbackMedia(functionParameters));
                                } else {
                                    //Workaround: no Link if no authority
                                    aAllFacets.push(oFacet);
                                    aAllFacets[aAllFacets.length - 1].bLoaded = false;
                                    aAllFacets[aAllFacets.length - 1].bProcessed = false;
                                    aAllFacets[aAllFacets.length - 1].bIsTable = false;
                                    //Workaround: no Link if no authority
                                    if (sCardinality === "*") {
                                        parameters = ["$inlinecount=allpages", "$top=3"];
                                    } else {
                                        parameters = [];
                                    }
                                    oModel.read(sBindingPath + "/" + sNavPath, "", parameters, true, oDataReadCallback(functionParameters), oDataReadCallbackError(functionParameters));
                                }
                                oTI.addFacet(oFacet);
                            }
                        } else {
                            if (sTerm === "com.sap.vocabularies.UI.v1.Contacts") {
                                oFacet = new sap.suite.ui.commons.FacetOverview({
                                    title: aFacets[i].Label.String.trim(),
                                    heightType: jQuery.device.is.phone ? sap.suite.ui.commons.FacetOverviewHeight.Auto : sap.suite.ui.commons.FacetOverviewHeight.M
                                });
                                oTI.data("contactFacetId", oFacet.sId);
                                functionParameters = { facet: oFacet };
                                oModel.clearBatch();
                                for (j = 0; j < oMapping[sEntityType][sTerm].length; j += 1) {
                                    sNavPath = oMapping[sEntityType][sTerm][j].AnnotationPath;
                                    sNavPath = sNavPath.substring(0, sNavPath.lastIndexOf("@") - 1);
                                    if (sNavPath !== "") {
                                        sCardinality = getAssociationMultiplicity(sEntitySet, sNavPath, oMetadata);
                                        if (sCardinality === "*") {
                                            sBatchPath = sBindingPath + "/" + sNavPath + "?$top=4" + "&$inlinecount=allpages";
                                        } else {
                                            sBatchPath = sBindingPath + "/" + sNavPath;
                                        }
                                    } else {
                                        sBatchPath = sBindingPath;
                                    }
                                    aOperations.push(oModel.createBatchOperation(sBatchPath, "GET"));
                                }
                                oModel.addBatchReadOperations(aOperations);
                                oModel.submitBatch(oDataReadCallbackContacts(functionParameters));
                                oTI.addFacet(oFacet);
                            }
                        }
                    }
                }
            }

            // Footer area
            oAddBookmarkButton = new sap.ushell.ui.footerbar.AddBookmarkButton();
            thingInspectorBindingChanged = function () {
                var aBusinessParams, i, sTerm, aTerm, oParaValue, oBusinessParameters = {}, key, val, sSemanticObject, sJamDiscussId, o, sKey;
                oAddBookmarkButton.setAppData({title: oTI.getTitle(), subtitle: oTI.getName() + " - " + oTI.getDescription()});
                oAddBookmarkButton.setEnabled(true);
                sSemanticObject = getEntityType(sEntitySet, oMetadata, true);
                oTransactionSheet = new sap.suite.ui.commons.LinkActionSheet({
                    showCancelButton: true,
                    placement: sap.m.PlacementType.Top
                });
                sBusinessParams = getEntityKeyFromUri(sUri, oModel);
                aBusinessParams = sBusinessParams.split(",");
                for (i = 0; i < aBusinessParams.length; i += 1) {
                    aBusinessParams[i] = aBusinessParams[i].replace("='", "=", "g");
                    if (aBusinessParams[i].lastIndexOf("'") === aBusinessParams[i].length - 1) {
                        aBusinessParams[i] = aBusinessParams[i].slice(0, -1);
                    }
                }
                for (sTerm in oMapping[sEntityType]) {
                    if (oMapping[sEntityType].hasOwnProperty(sTerm)) {
                        if (sTerm.indexOf("com.sap.vocabularies.Common.v1.SecondaryKey") === 0) {
                            aTerm = oMapping[sEntityType][sTerm];
                            for (i = 0; i < aTerm.length; i += 1) {
                                oParaValue = this.getBoundContext().getProperty(aTerm[i].PropertyPath);
                                if (oParaValue) {
                                    aBusinessParams.push(aTerm[i].PropertyPath + "=" + oParaValue);
                                }
                            }
                        }
                    }
                }
                for (i = 0; i < aBusinessParams.length; i += 1) {
                    key = aBusinessParams[i].substr(0, aBusinessParams[i].indexOf("="));
                    val = aBusinessParams[i].substr(aBusinessParams[i].indexOf("=") + 1, aBusinessParams[i].length);
                    oBusinessParameters[decodeURIComponent(key)] = decodeURIComponent(val);
                }
                oLinks = sap.ushell.Container.getService("CrossApplicationNavigation").getSemanticObjectLinks(sSemanticObject, oBusinessParameters);
                oLinks.done(jQuery.proxy(function (aLinks) {
                    var i, sIntent;
                    for (i = 0; i < aLinks.length; i += 1) {
                        if (aLinks[i].intent.indexOf(FACTSHEET) < 0) {
                            sIntent = sap.ushell.Container.getService("CrossApplicationNavigation").hrefForExternal({ target: { shellHash: aLinks[i].intent }});
                            oTransactionSheet.addItem(new sap.m.Link({text: aLinks[i].text, href: sIntent}));
                            oTI.setTransactionsVisible(true);
                        }
                    }
                }));
                oTI.attachTransactionsButtonPress(function (oEvent) {
                    oTransactionSheet.openBy(oEvent.getParameter("caller"));
                });
                this.detachChange(thingInspectorBindingChanged);
                // Set the browser Tab Name as Object Type: Object Name (Object Description) e.g. "Article: Nutella (AAUFEA000100001)"
                sap.ushell.services.AppConfiguration.setWindowTitle(oTI.getTitle().trim() + ": " + oTI.getName().trim() + " (" + oTI.getDescription().trim() + ")");
                
                oTI.setActionsVisible(true);
                oEmailBtn = new sap.m.Button({
                    text: oSapSuiteRb.getText("UNIFIEDTHINGINSPECTOR_FOOTER_BUTTON_EMAIL_LINK"),
                    icon: "sap-icon://email",
                    press: function (oE) {
                        sap.m.URLHelper.triggerEmail("", oTI.getName(), window.location.href);
                    }
                });
                oActionSheet = new sap.m.ActionSheet({ placement: sap.m.PlacementType.Top });
                sJamDiscussId = sUri.substr(0, sUri.lastIndexOf("/") + 1);
                for (o in oModel.oData) {
                  if (oModel.oData.hasOwnProperty(o)) {
                      sJamDiscussId = sJamDiscussId + o;
                      sKey = o.substring(o.indexOf("(") + 1, o.indexOf(")"));
                      break;
                  }
                }
                oActionSheet.addButton(new sap.ushell.ui.footerbar.JamDiscussButton({
                    jamData: {
                        businessObject: {
                            appContext: "CB",
                            odataServicePath: sUri.substr(0, sUri.lastIndexOf("/") + 1),
                            collection: sEntitySet,
                            key: sKey,
                            name: oTI.getTitle(),
                            ui_url: window.location.href
                        }
                    }
                }));
                oActionSheet.addButton(new sap.ushell.ui.footerbar.JamShareButton({
                    jamData: {
                        object: {
                            id: window.location.href,
                            display: new sap.m.Text({text: oTI.getTitle()}),
                            share: ""
                        },
                        externalObject: {
                            appContext: "CB",
                            odataServicePath: sUri.substr(0, sUri.lastIndexOf("/") + 1),
                            collection: sEntitySet,
                            key: sKey,
                            name: oTI.getTitle()
                        }
                    }
                }));
                oActionSheet.addButton(oAddBookmarkButton);
                oActionSheet.addButton(oEmailBtn);
                oTI.attachActionsButtonPress(function (oEvent) {
                    oActionSheet.openBy(oEvent.getParameter("caller"));
                });
                //Workaround: no Link if no authority
                aAllFacets[0].bLoaded = true;
                aAllFacets[0].bProcessed = false;
                checkLinks(0);
                //Workaround: no Link if no authority
            };

            oTI.getElementBinding().attachChange(thingInspectorBindingChanged);

            oTI.attachBackAction(function (oEvent) {
                history.back();
            });
            oTI.addDelegate({onAfterRendering: function () {
                oTI._adjustFacetLayout();
            }});
            return oTI;
        };

        return {
            ThingInspector : function (sUri, sAnnotationUri) {
                try {
                    oTI = thingInspectorFactory(sUri, sAnnotationUri, new sap.suite.ui.commons.UnifiedThingInspector({ configurationVisible: false }));
                } catch (e) {
                    throw e;
                }
                return oTI;
            }
        };
    }());
}());

}; // end of sap/ushell/components/factsheet/factory/ThingInspector.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.factsheet.tools.ODataUrlTemplating') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview This file contains an annotation parser for factsheets.
 */

(function() {
    "use strict";

 // Exception Object
    function ParameterException(parameter, template, url) {
        this.parameter = parameter;
        this.template = template;
        this.semiConvertedUrl = url;
        this.message = " is a missing key parameter for constructing the entity url";
        this.toString = function() {
           return this.parameter + this.message;
        };
    }

    jQuery.sap
            .declare("sap.ushell.components.factsheet.tools.ODataUrlTemplating");

    sap.ushell.components.factsheet.tools.ODataUrlTemplating = {
        ParameterException : ParameterException,
        resolve : function(template, data) {
            var sEntityUrl, value, parameter, i,
            businessParameter = template.match(/{\s*[\w\.]+\s*}/g);
            sEntityUrl = template;

            for (i = businessParameter.length - 1; i >= 0; i -= 1) {
                parameter = businessParameter[i];
                value = data[parameter.replace(/[{}]/g, "")];
                if (value !== undefined) {
                    if (typeof value !== "string") {
                        value = value[0];
                    }
                    value = encodeURIComponent(decodeURIComponent(value));
                    sEntityUrl = sEntityUrl.replace(parameter, value);
                }
            }

            // Is there a parameter left
            parameter = sEntityUrl.match(/{\s*[\w\.]+\s*}/g);
            if (parameter) {
                jQuery.sap.log.error(" "
                        + sEntityUrl);
                // TODO: Raise exception
                throw new this.ParameterException(parameter, template, sEntityUrl);
            }

            return sEntityUrl;
        }
    };
})();

}; // end of sap/ushell/components/factsheet/tools/ODataUrlTemplating.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.factsheet.views.ThingViewer.view') ) {
  jQuery.sap.declare('sap.ushell.components.factsheet.views.ThingViewer.view');
(function () {
    "use strict";
    /*global jQuery, sap */
    
    sap.ui.jsview("sap.ushell.components.factsheet.views.ThingViewer", {

        getControllerName : function () {
            return "sap.ushell.components.factsheet.views.ThingViewer";
        },
        createContent : function (oController) {
            var sEntityUrl, sAnnotationUrl, sEntityUrlTemplate, oTI, oViewData;
            oViewData = this.getViewData();

            jQuery.sap.require("sap.ushell.components.factsheet.factory.ThingInspector");

            // Sample Hash UI2_DEMO_PRODUCT-DisplayFactSheet~6bpO?ProductID=HT-1000
            sEntityUrl = oViewData.entity || oViewData.service;// Old Parameter Name was Service
            if (!sEntityUrl) {
                sEntityUrlTemplate = oViewData.entityTemplateURI || oViewData.template;
                
                if (sEntityUrlTemplate) {
                    // Parameters may be arrays 
                    if (typeof sEntityUrlTemplate !== "string") {
                        sEntityUrlTemplate = sEntityUrlTemplate[0];
                    }
                    //regEx = /{[A-Za-z0-9_]*}/g;
                    //Depending on the basis version it is possible, that the value of sEntityUrlTemplate is double encoded.
                    //Therefor the following decoding was implemented as a workaround.
                    sEntityUrlTemplate = sEntityUrlTemplate.replace(/%25/g, "%");
                    sEntityUrlTemplate = sEntityUrlTemplate.replace(/%28/g, "(");
                    sEntityUrlTemplate = sEntityUrlTemplate.replace(/%29/g, ")");
                    sEntityUrlTemplate = sEntityUrlTemplate.replace(/%27/g, "'");
                    sEntityUrlTemplate = sEntityUrlTemplate.replace(/%3D/g, "=");
                    sEntityUrlTemplate = sEntityUrlTemplate.replace(/%7B/g, "{");
                    sEntityUrlTemplate = sEntityUrlTemplate.replace(/%7D/g, "}");

                    sEntityUrl = sap.ushell.components.factsheet.tools.ODataUrlTemplating.resolve(sEntityUrlTemplate, oViewData);
                  }

            }
            sAnnotationUrl = oViewData.annotationURI || oViewData.annotation;

            if (typeof sEntityUrl !== "string") {
                sEntityUrl = sEntityUrl[0];
            }
            if (typeof sAnnotationUrl !== "string") {
                sAnnotationUrl = sAnnotationUrl[0];
            }
            
            if (oViewData["sap-system"] && oViewData["sap-system"][0] && (oViewData["sap-system"][0].substr(0,4) === "sid(")) {
                sEntityUrl = sEntityUrl.substr(0, sEntityUrl.lastIndexOf("/")) + ";o=" + sEntityUrl.substr(sEntityUrl.lastIndexOf("/"));
                sEntityUrl = sap.ushell.Container.getService("URLParsing").addSystemToServiceUrl(sEntityUrl);
            }

            oTI = sap.ushell.components.factsheet.factory.ThingInspector(sEntityUrl, sAnnotationUrl);

            //Add min-height
            oTI.addStyleClass("ThingInspector");
            return oTI;
        }
    });
}());
}; // end of sap/ushell/components/factsheet/views/ThingViewer.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.flp.ActionMode') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview
 * Tile action mode implementation.
 *
 * In tile action mode the user can launch an action associated with a tile.
 * The mode is launched when clicking on one of the two activation buttons:
 * 1. In the user menu
 * 2. A floating button on the bottom-right corner on the launchpad.
 * Creation of the buttons depends on the following configuration properties:
 *  - enableActionModeMenuButton
 *  - enableActionModeFloatingButton
 *
 * Tile action mode can be activated only from the launchpad. it is not accessible from the catalog or from an application.
 * When the mode is active and the user clicks on a tile - the tile's corresponding actions are presented in an action sheet
 *  and the user can click/launch any of them.
 *
 * Every user action (e.g. menu buttons, drag-and-drop) except for clicking a tile - stops/deactivates the action mode.
 *
 * This module Contains the following:
 *  - Constructor function that creates action mode activation buttons
 *  - Activation handler
 *  - Deactivation handler
 *  - Rendering tile action menu
 *
 * @version 1.32.6
 */
/**
 * @namespace
 *
 * @name sap.ushell.components.flp.ActionMode
 *
 * @since 1.26.0
 * @private
 */
(function () {
    "use strict";

    /*global jQuery, sap, window, hasher, $ */
    /*jslint nomen: true */
    jQuery.sap.declare("sap.ushell.components.flp.ActionMode");

    /**
     * Constructor function
     * Creates action mode activation buttons:
     *  1. A new button in the user menu
     *  2. A floating button
     */
    var ActionMode = function () {
            this.oEventBus = sap.ui.getCore().getEventBus();
            this.oEventBus.subscribe('launchpad', 'actionModeInactive', this.scrollToViewPoint, this);
            this.oEventBus.subscribe('launchpad', 'actionModeActive', this.scrollToViewPoint, this);
            this.viewPoint = undefined;

            this.init = function (oModel) {
                this.oModel = oModel;
                var oNavContainerFlp = sap.ui.getCore().byId('navContainerFlp'),
                    oCurrentViewName = oNavContainerFlp.getCurrentPage().getViewName(),
                    bInDahsboard = oCurrentViewName == "sap.ushell.components.flp.launchpad.dashboard.DashboardContent";

                if (bInDahsboard) {
                    _createActionButtons(oModel);
                }
            };
        },

        _createActionModeMenuButton = function (oModel) {
            var oTileActionsButton = new sap.m.Button("ActionModeBtn", {
                    text : sap.ushell.resources.i18n.getText("activateActionMode"),
                    icon : 'sap-icon://edit',
                    tooltip : sap.ushell.resources.i18n.getText("activateActionMode"),
                    press : function () {
                        sap.ushell.components.flp.ActionMode.toggleActionMode(oModel, "Menu Item");
                    }
                });

            sap.ushell.renderers.fiori2.RendererExtensions.addOptionsActionSheetButton(oTileActionsButton, "home");

            // if xRay is enabled
            if (oModel.getProperty("/enableHelp")) {
                oTileActionsButton.addStyleClass('help-id-ActionModeBtn');// xRay help ID
            }
        },

        _createFloatingActionButton = function (oModel) {
            var oFloatingActionButton = new sap.ushell.ui.shell.ShellFloatingAction({
                    id: "floatingActionBtn",
                    icon: 'sap-icon://edit',
                    press: function (oEvent) {
                        sap.ushell.components.flp.ActionMode.toggleActionMode(oModel, "Floating Button");
                    },
                    tooltip: sap.ushell.resources.i18n.getText("activateActionMode")
                });

            oFloatingActionButton.data("sap-ui-fastnavgroup", "true", true/*Write into DOM*/);
            oFloatingActionButton.addEventDelegate({

            onsapskipback: function (oEvent) {
                oEvent.preventDefault();
                sap.ushell.renderers.fiori2.AccessKeysHandler.bFocusOnShell = false;
            },

            onsaptabprevious: function (oEvent) {
                oEvent.preventDefault();
                sap.ushell.renderers.fiori2.AccessKeysHandler.bFocusOnShell = false;
            }
        });

        // if xRay is enabled
        if (oModel.getProperty("/enableHelp")) {
            oFloatingActionButton.addStyleClass('help-id-floatingActionBtn');// xRay help ID
        }
        sap.ushell.renderers.fiori2.RendererExtensions.addFloatingActionButton(oFloatingActionButton, "home");
     },

     _createActionButtons = function (oModel) {

         // Create action mode button in the user actions menu
         if (oModel.getProperty("/actionModeMenuButtonEnabled")) {
             _createActionModeMenuButton(oModel);
         }

         // Create floating action mode button
         if (oModel.getProperty("/actionModeFloatingButtonEnabled")) {
             _createFloatingActionButton(oModel);
         }
     },
     
    /**
    * Handler of click action on the shell page when tile action mode is active.
    * Tile action mode is deactivated.
    *
    * @param oEvent Event object of the clicked item/action
    */
    fnShellClickHandler = function (oEvent) {
        var clickedObj = oEvent.target;
        // If the clicked object is not a tile then the user exists action mode
        if (!$(clickedObj).hasClass("sapUshellTileActionLayerDiv")) {
            setTimeout($.proxy(sap.ushell.components.flp.ActionMode.deactivate(), sap.ushell.components.flp.ActionMode), 0);
        }
    };

   /**
    * Activation handler of tile actions mode 
    * 
    * Performs the following actions:
    * - Shows a toast message indicating the activated mode
    * - Sets the feature's model property to indicate that the feature is activated
    * - Registers deactivation click handler, called when the user clicks outside of a tile
    * - Adds the cover DIV to all tiles adding the mode's grey opacity and click handler for opening the actions menu
    * - Disables drag capability on tiles
    * - Changes the appearance of the floating activation button
    */
    ActionMode.prototype.activate = function () {
        var oFloatingActionButton,
            oTileActionsButton;

        this.eventDelegateObj = {
            ontap : fnShellClickHandler,
            ontouchstart : fnShellClickHandler,
            onmousedown : fnShellClickHandler
        };

        jQuery.sap.require("sap.m.MessageToast");
        sap.m.MessageToast.show(sap.ushell.resources.i18n.getText("actionModeActivated"), {duration: 4000});
        this.calcViewPosition();
        this.oModel.setProperty('/tileActionModeActive', true);
        this.aOrigHiddenGroupsIds = sap.ushell.utils.getCurrentHiddenGroupIds(this.oModel);

        // Change floating button display
        oFloatingActionButton = sap.ui.getCore().byId("floatingActionBtn");
        if (oFloatingActionButton) {
            oFloatingActionButton.addStyleClass("sapUshellActive");
            oFloatingActionButton.setTooltip(sap.ushell.resources.i18n.getText("deactivateActionMode"));
        }

        // Change action mode button display in the user actions menu
        oTileActionsButton = sap.ui.getCore().byId("ActionModeBtn");
        if (oTileActionsButton) {
            oTileActionsButton.setTooltip(sap.ushell.resources.i18n.getText("exitPersonalizationMode"));
            oTileActionsButton.setText(sap.ushell.resources.i18n.getText("exitPersonalizationMode"));
        }
        this.oEventBus.publish('launchpad', 'actionModeActive');
    };

    ActionMode.prototype.calcViewPosition = function () {
        //get current visible group and offset from top.
        var jqContainer = jQuery('#dashboardGroups').find('.sapUshellTileContainer').not('.sapUshellHidden'),
            ind;

        if (jqContainer) {
            for (ind = 0; ind < jqContainer.length; ind++) {
                var uiGroup = jqContainer[ind],
                    fromTopPos = jQuery(uiGroup).parent().offset().top;
                if (fromTopPos > 0) {
                    var firstChildId = jQuery(uiGroup).attr("id"),
                        oGroup = sap.ui.getCore().byId(firstChildId),
                        oData = {group : oGroup, fromTop: fromTopPos};
                    this.viewPoint = oData;
                    return;
                }
            }
        }
    };

    ActionMode.prototype.scrollToViewPoint = function () {
        window.setTimeout(jQuery.proxy(this.oEventBus.publish, this.oEventBus, "launchpad", "scrollToFirstVisibleGroup", this.viewPoint), 0);
    };

    /**
     * Deactivation handler of tile actions mode
     *
     * Performs the following actions:
     * - Unregisters deactivation click handler
     * - Sets the feature's model property to indicate that the feature is deactivated
     * - Enables drag capability on tiles
     * - Destroys the tile actions menu control
     * - Removed the cover DIV from to all the tiles
     * - Adds the cover DIV to all tiles adding the mode's grey opacity and click handler for opening the actions menu
     * - Changes the appearance of the floating activation button
     */
    ActionMode.prototype.deactivate = function () {
        var tileActionsMenu = sap.ui.getCore().byId("TileActions"),
            oTileActionsButton,
            oFloatingActionButton;

        this.calcViewPosition();
        this.oModel.setProperty('/tileActionModeActive', false);
        this.oEventBus.publish("launchpad", 'actionModeInactive', this.aOrigHiddenGroupsIds);
        if (tileActionsMenu !== undefined) {
            tileActionsMenu.destroy();
        }

        // Change floating button display
        oFloatingActionButton = sap.ui.getCore().byId("floatingActionBtn");
        if (oFloatingActionButton) {
            oFloatingActionButton.removeStyleClass("sapUshellActive");
            oFloatingActionButton.setTooltip(sap.ushell.resources.i18n.getText("activateActionMode"));
        }

        // Change action mode button display in the user actions menu
        oTileActionsButton = sap.ui.getCore().byId("ActionModeBtn");
        if (oTileActionsButton) {
            oTileActionsButton.setTooltip(sap.ushell.resources.i18n.getText("activateActionMode"));
            oTileActionsButton.setText(sap.ushell.resources.i18n.getText("activateActionMode"));
        }
    };

    ActionMode.prototype.toggleActionMode = function (oModel, sSource) {
        var bTileActionModeActive = oModel.getProperty('/tileActionModeActive');
        if (bTileActionModeActive) {
            this.deactivate();
        } else {
            this.activate();
            sap.ui.getCore().getEventBus().publish("launchpad", "enterEditMode", {source: sSource});
        }
    };

    /**
     * Apply action/edit mode CSS classes on a group.
     * This function is called when in edit/action mode and tiles were dragged,
     *  since the group is being re-rendered and the dashboard is still in action/edit mode
     */
    ActionMode.prototype.activateGroupEditMode = function (oGroup) {
        var jqGroupElement = jQuery(oGroup.getDomRef()).find('.sapUshellTileContainerContent');

        jqGroupElement.addClass("sapUshellTileContainerEditMode");
    };

   /**
    * Opens the tile menu, presenting the tile's actions 
    * 
    * Performs the following actions:
    * - Returning the clicked tile to its original appearance
    * - Tries to get an existing action sheet in case actions menu was already opened during this session of action mode 
    * - If this is the first time the user opens actions menu during this session of action mode - create a new action sheet
    * - Gets the relevant tile's actions from launch page service and create buttons accordingly
    * - Open the action sheet by the clicked tile         
    * 
    * @param oEvent Event object of the tile click action 
    */
    ActionMode.prototype._openActionsMenu = function (oEvent, oTilePressed) {
        var that = this,
            oTileControl = oTilePressed || oEvent.getSource(),
            launchPageServ =  sap.ushell.Container.getService("LaunchPage"),
            aActions = [],
            oActionSheet = sap.ui.getCore().byId("TileActions"),
            index,
            noActionsButton,
            oButton,
            oAction,
            oTile,
            fnHandleActionPress;

        if (oTileControl) {
            oTile = oTileControl.getBindingContext().getObject().object;
            aActions = launchPageServ.getTileActions(oTile);
        }
        that.oTileControl = oTileControl;
        jQuery(".sapUshellTileActionLayerDivSelected").removeClass("sapUshellTileActionLayerDivSelected");

        var coverDiv = jQuery(oEvent.getSource().getDomRef()).find(".sapUshellTileActionLayerDiv");
        coverDiv.addClass("sapUshellTileActionLayerDivSelected");
        if (oActionSheet === undefined) {
            oActionSheet = new sap.m.ActionSheet("TileActions", {
                placement: sap.m.PlacementType.Auto,
                afterClose: function () {
                    $(".sapUshellTileActionLayerDivSelected").removeClass("sapUshellTileActionLayerDivSelected");
                    var oEventBus = sap.ui.getCore().getEventBus();
                    oEventBus.publish("dashboard", "actionSheetClose",that.oTileControl);
                }
            });
        } else {
            oActionSheet.destroyButtons();
        }


        // in a locked group we do not show any action (this is here to prevent the tile-settings action added by Dynamic & Static tiles from being opened)
        // NOTE - when removeing this check (according to requirements by PO) - we must disable the tileSettings action in a different way
        if (aActions.length === 0 || oTileControl.oParent.getProperty("isGroupLocked")) {
            // Create a single button for presenting "Tile has no actions" message to the user
            noActionsButton = new sap.m.Button({
                text:  sap.ushell.resources.i18n.getText("tileHasNoActions"),
                enabled: false
            });
            oActionSheet.addButton(noActionsButton);
        } else {
            /*eslint-disable no-loop-func*/
            /*eslint-disable wrap-iife*/
            for (index = 0; index < aActions.length; index++) {
                oAction = aActions[index];
                // The press handler of a button (representing a single action) in a tile's action sheet 
                fnHandleActionPress = function (oAction) {
                    return function () {
                        that._handleActionPress(oAction);
                    };
                }(oAction);
                oButton = new sap.m.Button({
                    text:  oAction.text,
                    icon:  oAction.icon,
                    press: fnHandleActionPress
                });
                oActionSheet.addButton(oButton);
            }
            /*eslint-enable no-loop-func*/
            /*eslint-enable wrap-iife*/
        }
        oActionSheet.openBy(oEvent.getSource());
    };

    /**
     * Press handler of a button (representing a single action) in a tile's action sheet
     *
     * @param oAction The event object initiated by the click action on an element in the tile's action sheet.
     *               In addition to the text and icon properties, oAction contains one of the following:
     *               1. A "press" property that includes a callback function.
     *                  In this case the action (chosen by the user) is launched by calling the callback is called
     *               2. A "targetUrl" property that includes either a hash part of a full URL.
     *                  In this case the action (chosen by the user) is launched by navigating to the URL
     */
    ActionMode.prototype._handleActionPress = function (oAction) {
        if (oAction.press) {
            oAction.press.call();
        } else if (oAction.targetURL) {
            if (oAction.targetURL.indexOf("#") == 0) {
                hasher.setHash(oAction.targetURL);
            } else {
                window.open(oAction.targetURL, '_blank');
            }
        } else {
            sap.m.MessageToast.show("No Action");
        }
    };

    sap.ushell.components.flp.ActionMode = new ActionMode();
}());

}; // end of sap/ushell/components/flp/ActionMode.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.flp.ComponentKeysHandler') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

/* eslint-disable no-cond-assign */

(function () {
    "use strict";
    jQuery.sap.declare("sap.ushell.components.flp.ComponentKeysHandler");

    var componentKeysHandler = function () {
        this.aTileWrapperClasses = ['.sapUshellTile', '.sapUshellLinkTile'];
    };

    componentKeysHandler.prototype = {
        keyCodes: jQuery.sap.KeyCodes,

        handleCatalogKey: function () {
            this.oRouter.navTo("catalog");
        },

        handleHomepageKey: function () {
            this.oRouter.navTo("home");
        },

        getNumberOfTileInRow: function (pageName, bIsLink) {
            var jqTile = jQuery(bIsLink ? ".sapUshellLinkTile:first" : ".sapUshellTile:first");
            if (!jqTile.length) { return false; }
            var core = sap.ui.getCore();
            var tile = core.byId(jqTile.attr('id'));
            var firstTileProportion = !bIsLink && (tile.getLong() === true) ? 2 : 1;
            var contentWidth;
            if (pageName === "catalog") {
                contentWidth = jQuery("#catalogTiles .sapUshellTileContainerContent").width();
            } else {
                contentWidth = jQuery("#dashboardGroups").width();
            }
            var tileWidth = jqTile.outerWidth(true) / firstTileProportion;
            var numberTilesInRow =  Math.floor(contentWidth / tileWidth);
            return numberTilesInRow;
        },

        goToTileContainer: function (keyup) {
            var bIsActionsModeActive = this.oModel.getProperty('/tileActionModeActive');

            if (bIsActionsModeActive) {
                sap.ushell.components.flp.ComponentKeysHandler.goToEdgeTileContainer('first');
            } else {
                sap.ushell.components.flp.ComponentKeysHandler.goToEdgeTile('first');
            }
            return true;
        },

        goToEdgeTile: function (selector) {
            var tileToSelect = jQuery(".sapUshellTile:visible:not('.sapUshellPlusTile')")[selector]();
            if (!tileToSelect.length) {
                return false;
            }
            this.setTileFocus(tileToSelect);
            return true;
        },

        goToEdgeTileContainer: function (selector) {
            var jqTileContainerToSelect = jQuery('.sapUshellTileContainer:visible')[selector]();
            if (!jqTileContainerToSelect.length) {
                return false;
            }
            this.setTileContainerSelectiveFocus(jqTileContainerToSelect);
            return true;
        },

        goToFirstTileOfSiblingGroup: function (selector, e) {
            e.preventDefault();
            var currentGroup = jQuery(":focus").closest(".sapUshellDashboardGroupsContainerItem");
            if (!currentGroup.length) { return; }
            var nextGroup = currentGroup[selector + "All"](".sapUshellDashboardGroupsContainerItem:has(.sapUshellTile:visible):not(.sapUshellCloneArea)");
            var tileSelector = 'first';
            if (!nextGroup.length) {
                nextGroup = currentGroup;
                tileSelector = ( selector === "next" ) ? 'last' : 'first';
            } else {
                nextGroup = nextGroup.first();
            }
            var jqTileToSelect = nextGroup.find(".sapUshellTile:visible:not('.sapUshellPlusTile')")[tileSelector]();
            this.moveScrollDashboard(jqTileToSelect);

            return false;
        },

        goToFirstTileOfSiblingGroupInCatalog: function (selector, e) {
            e.preventDefault();
            // var currentGroup = new Array();
            var jqTileContainer = this.getFocusOnTile(jQuery(":focus"));
            if (!jqTileContainer) { return; }

            var jqTileToFocus;

            if (selector == "next") {
                var isLastGroup = jqTileContainer.nextAll("h3").length ? false : true;
                if (!isLastGroup) {
                    jqTileToFocus = jqTileContainer.nextAll("h3").first().nextAll().filter(":visible").first();
                } else {
                    jqTileToFocus = jqTileContainer.nextAll(".sapUshellTile").last();
                }
            } else {
                var isFirstGroup = jqTileContainer.prevAll("h3").length === 1 ? true : false;
                if (!isFirstGroup) {
                    jqTileToFocus = jQuery(jqTileContainer.prevAll("h3")[1]).next();
                } else {
                    jqTileToFocus = jqTileContainer.prevAll("h3").last().next();
                }
            }

            this.setTileFocus(jqTileToFocus);
            this.moveScrollCatalog(jqTileToFocus);

            return false;
        },

        swapTwoTilesInGroup: function (group, firstTile, secondTile) {
            var groupModelObj = group.getBindingContext().getObject();
            var firstTileIndex = groupModelObj.tiles.indexOf(firstTile.getBindingContext().getObject());
            var secondTileIndex = groupModelObj.tiles.indexOf(secondTile.getBindingContext().getObject());
            var firstTileModelObj = groupModelObj.tiles.splice(firstTileIndex, 1, null);
            var secondTileModelObj = groupModelObj.tiles.splice(secondTileIndex, 1, firstTileModelObj[0]);
            groupModelObj.tiles.splice(firstTileIndex, 1, secondTileModelObj[0]);
            var groupPath = group.getBindingContext().getPath();
            group.getModel().setProperty(groupPath, groupModelObj);
        },

        moveTileInGroup: function (group, firstTile, secondTile) {
            if (this.oModel.getProperty("/personalization")) {
                var groupModelObj = group.getBindingContext().getObject();
                var firstTileIndex = groupModelObj.tiles.indexOf(firstTile.getBindingContext().getObject());
                var secondTileIndex = groupModelObj.tiles.indexOf(secondTile.getBindingContext().getObject());
                var firstTileModelObj = groupModelObj.tiles.splice(firstTileIndex, 1);
                groupModelObj.tiles.splice(secondTileIndex, 0, firstTileModelObj[0]);
                var groupPath = group.getBindingContext().getPath();
                group.getModel().setProperty(groupPath, groupModelObj);
            }
        },

        moveTileToDifferentGroup: function (sourceGroup, destGroup, curTile, direction) {
            if (this.oModel.getProperty("/personalization")) {
                if (sourceGroup.getIsGroupLocked() || destGroup.getIsGroupLocked()) {
                    return;
                }
                var sourceGroupModelObj = sourceGroup.getBindingContext().getObject();
                var destGroupModelObj = destGroup.getBindingContext().getObject();
                var tileIndex = sourceGroupModelObj.tiles.indexOf(curTile.getBindingContext().getObject());
                //removing tile from source group & add tile to destination group
                if (direction === "left" || direction === "up" || direction === "down"){
                    destGroupModelObj.tiles.push(sourceGroupModelObj.tiles[tileIndex]);
                }
                if (direction === "right"){
                    destGroupModelObj.tiles.splice(0, 0, sourceGroupModelObj.tiles[tileIndex]);
                }
                sourceGroupModelObj.tiles.splice(tileIndex, 1);

                //update model
                var groupPath1 = destGroup.getBindingContext().getPath();
                destGroup.getModel().setProperty(groupPath1, destGroupModelObj);

                var groupPath2 = sourceGroup.getBindingContext().getPath();
                sourceGroup.getModel().setProperty(groupPath2, sourceGroupModelObj);

                var groupTiles = destGroup.getTiles();

                if (direction === "left" || direction === "up" || direction === "down") {
                    return groupTiles[groupTiles.length - 1];
                } else {
                    return groupTiles[0];
                }
            }
        },

        moveTile: function (direction, swapTiles) {
            var jqDashboard = jQuery(".sapUshellDashboardView"),
                dashboardView = sap.ui.getCore().byId(jqDashboard.attr("id"));
            dashboardView.markDisableGroups();
            setTimeout(function () {
                dashboardView.unmarkDisableGroups();
            }, 300);

            if (this.oModel.getProperty("/personalization")) {
                if (typeof swapTiles === "undefined") {
                    swapTiles = false;
                }
                var info = this.getGroupAndTilesInfo();
                //Tiles of locked groups cannot be reordered
                if (!info || info.group.getProperty('isGroupLocked')) {
                    return;
                }

                var bMoveTile = true,
                    bIsActionsModeActive,
                    nextTile = this.getNextTile(direction, info, bIsActionsModeActive, bMoveTile);

                if (!nextTile) {
                    return;
                } else {
                    var nextTileGroup = nextTile.getParent();
                }

                if (swapTiles) {
                    this.swapTwoTilesInGroup(info.group, info.curTile, nextTile);
                } else {
                    if (nextTileGroup === info.group) {
                        this.moveTileInGroup(info.group, info.curTile, nextTile);
                    } else {
                        nextTile = this.moveTileToDifferentGroup(info.group, nextTileGroup, info.curTile, direction);
                    }
                }
                if (sap.ushell.Layout && sap.ushell.Layout.isInited) {
                    sap.ushell.Layout.reRenderGroupLayout(info.group);
                }
                setTimeout(function () {//setTimeout because we have to wait until the asynchronous "moveTile" flow ends
                    if (nextTile) {
                        this.setTileFocus(jQuery(nextTile.getDomRef()));
                    }
                }.bind(this), 100);
            }
        },

        getNextUpDownTileInCatalog: function (direction, info) {
            var nearTilesArr, nextTile;
            var origTileLeftOffset = parseFloat(info.curTile.getDomRef().offsetLeft);
            if (direction == "down") {
                nearTilesArr = info.tiles.slice(info.curTileIndex + 1, info.curTileIndex + (info.sizeOfLine * 2));
            } else {
                var startIndex = info.curTileIndex - (info.sizeOfLine * 2);
                startIndex = (startIndex > 0) ? startIndex : 0;
                nearTilesArr = info.tiles.slice(startIndex, info.curTileIndex - 1).reverse();
            }
            for (var i = 0, length = nearTilesArr.length; i < length; i++) {
                var tileElement = nearTilesArr[i].getDomRef();
                var leftOffset = parseFloat(tileElement.offsetLeft);
                var width = parseFloat(tileElement.offsetWidth);
                var leftAndWidth = leftOffset + width;
                if (leftOffset <= origTileLeftOffset && leftAndWidth >= origTileLeftOffset) {
                    nextTile = nearTilesArr[i];
                    break;
                }
            }
            return nextTile;
        },

        getNextUpDownTileWithLayout: function (direction, info) {
            var nextTile, nextGroup;
            var tileSize = !info.curTile.isLink && info.curTile.getTall() ? 2 : 1;
            var nDirection = direction === "down" ? (tileSize) : -1;
            var isEmptyGroup = !info.tiles.length && !info.links.length;
            var bIsGroupLocked = info.group.getIsGroupLocked();
            var bIsPlusTile = jQuery(info.curTile.getDomRef()).hasClass('sapUshellPlusTile');
            var aLinks = info.group.getLinks();
            var layoutMatrix = sap.ushell.Layout.organizeGroup(info.curTile.isLink ? info.links : info.tiles, info.curTile.isLink);
            var tPos = sap.ushell.Layout.getTilePositionInMatrix(info.curTile, layoutMatrix);
            var bIsLastLineFull = this.isLastLineFull(layoutMatrix);
            var bIsActionsModeActive = this.oModel.getProperty('/tileActionModeActive');
            if (!tPos && !isEmptyGroup && !bIsPlusTile) { return; }
            //Handle the case in which the user has reached the last line of the currently navigated tile aggregation (whether it's a regular tile aggregation or link).
            if (!layoutMatrix[tPos.row + nDirection]) {
                //Handle the case in which the last line within the tileContainer has only Plus Tile
                if (bIsActionsModeActive  && !bIsGroupLocked && !bIsPlusTile && bIsLastLineFull && direction === "down") {
                    return info.group.oPlusTile;
                }
                //Handle the case in which the focus is on one of the tiles in the last row and the tile container contains links.
                if (!info.curTile.isLink && aLinks.length && direction === 'down') {
                    return aLinks[0];
                }
                //Handle the case in which the focus is on one of the links in the fist row and the direction is 'up'.
                if (info.curTile.isLink && info.tiles.length && direction === 'up') {
                    return info.tiles[0];
                }
                tPos = isEmptyGroup || bIsPlusTile ? {row : 0, col : 0} : tPos;
                nextGroup = this.getNextGroup(direction, info);
                if (!nextGroup)  {
                    return;
                }
                isEmptyGroup = !nextGroup.getTiles().length && !nextGroup.getLinks().length;
                if (!isEmptyGroup) {
                    var aFocussedTileAgg = this._getAggregationToFocusInNextGroup(nextGroup, direction);
                    var bNextTileLink = this._isNextTileLink(aFocussedTileAgg);


                    layoutMatrix = sap.ushell.Layout.organizeGroup(aFocussedTileAgg, bNextTileLink);
                    nDirection = 0;
                    tPos.row = direction === "down" ? 0 : layoutMatrix.length - 1;
                }
            }
            if (isEmptyGroup && bIsGroupLocked) {
                return undefined;
            }
            if (isEmptyGroup) {
                return nextGroup.oPlusTile;
            }

            if (typeof layoutMatrix[tPos.row + nDirection][tPos.col] === "object" && !isEmptyGroup) {
                nextTile = layoutMatrix[tPos.row + nDirection][tPos.col];
            } else {
                nextTile = this.getNextUpDownTile(layoutMatrix, tPos.row + nDirection, tPos.col ,direction);
            }

            return nextTile;
        },

        _isNextTileLink: function (aTileAggregation) {
            if (aTileAggregation && aTileAggregation.length) {
                var jqFirstTileInAgg = jQuery(aTileAggregation[0].getDomRef());
                return jqFirstTileInAgg.hasClass("sapUshellLinkTile");
            }
            return false;
        },

        _getAggregationToFocusInNextGroup: function (nextGroup, direction) {
            if (direction === "down" || direction === "right") {
                if (nextGroup.getTiles().length) {
                    return nextGroup.getShowPlaceholder() ? [].concat(nextGroup.getTiles(), nextGroup.oPlusTile) : nextGroup.getTiles();
                }
                if (nextGroup.getLinks().length) {
                    return nextGroup.getLinks();
                }
            } else if (direction === "up" || direction === "left") {
                if (nextGroup.getLinks().length) {
                    return nextGroup.getLinks();
                }
                if (nextGroup.getTiles().length) {
                    return nextGroup.getShowPlaceholder() ? [].concat(nextGroup.getTiles(), nextGroup.oPlusTile) : nextGroup.getTiles();
                }
            }
        },

        isLastLineFull: function (aLayoutMatrix) {
            var iMaxTilesInRow = this.getNumberOfTileInRow(),
                aActualLastRow = aLayoutMatrix[aLayoutMatrix.length - 1].filter(Boolean);

            return aActualLastRow.length === iMaxTilesInRow;
        },

        getNextUpDownTile: function(layoutMatrix, row, column, direction){
            var newRow = row,
                len = layoutMatrix.length,
                nextTile,
                nDirection = direction === "up" ? -1 : 1;

            while ((newRow >= 0 && newRow < len) && !nextTile){
                if (typeof layoutMatrix[newRow][column] !== "object") {
                    nextTile = layoutMatrix[newRow][column];
                }
                newRow = newRow + nDirection;
            }
            if (nextTile) { return; }

            newRow = row;
            while (( typeof layoutMatrix[newRow][column] !== "object") && column >= 0){
                column--;
            }

            return layoutMatrix[newRow][column];
        },

        getNextTile: function (direction, info, bIsActionsModeActive, bMoveTile) {
            var nextTile,
                currentTileRow,
                nearTilesArr,
                startIndex,
                tileElement,
                leftOffset,
                width,
                leftAndWidth,
                origTileLeftOffset,
                nRTL = sap.ui.getCore().getConfiguration().getRTL() ? -1 : 1,
                isEmptyGroup = !info.tiles.length,
                nDirection = direction === "right" ? 1 : -1;

            if (info.pageName === 'catalog') { // In catalog mode
                if (direction == 'right' || direction == 'left'){
                    nextTile = !isEmptyGroup ? info.tiles[info.curTileIndex + ( nRTL * nDirection ) ] : undefined;
                    return nextTile;
                }

                if (info.curTileIndex === '0' && direction === 'up') { return undefined; }

                currentTileRow = this.whichTileRow(info.curTileIndex, info);
                origTileLeftOffset = parseFloat(info.curTile.getDomRef().offsetLeft);
                if (direction == "down") {
                    nearTilesArr = info.tiles.slice(info.curTileIndex + 1, info.curTileIndex + (info.sizeOfLine * 2));
                } else {
                    startIndex = (startIndex > 0) ? startIndex : 0;
                    nearTilesArr = info.tiles.slice(startIndex, info.curTileIndex).reverse();
                }
                for (var i = 0, length = nearTilesArr.length; i < length; i++) {
                    tileElement = nearTilesArr[i].getDomRef();
                    leftOffset = parseFloat(tileElement.offsetLeft);
                    width = parseFloat(tileElement.offsetWidth);
                    leftAndWidth = leftOffset + width;

                    if (leftOffset <= origTileLeftOffset && leftAndWidth >= origTileLeftOffset) {
                        nextTile = nearTilesArr[i];

                        return nextTile;
                    }
                }

                if (this.nextRowIsShorter(direction, currentTileRow, info)) {
                    nextTile = this.getNextTileInShorterRow(direction, currentTileRow, info);
                    return nextTile;
                }
                // In dashboard mode
            } else {
                if (direction === "left" || direction === "right"){
                    //nDirection is a parameter that influence in which direction we move in array iRTL will change it
                    // to opposite direction if it's RTL
                    var nextTileIndex = info.curTileIndex + ( nRTL * nDirection );
                    var aFocussedTileAgg = info.curTile.isLink ? info.links : info.tiles;
                    // next tile is not the plus tile
                    if (aFocussedTileAgg[nextTileIndex] && !(bMoveTile && aFocussedTileAgg[nextTileIndex].getDomRef().className.indexOf("sapUshellPlusTile") > 0)) {
                        nextTile = aFocussedTileAgg.length ? aFocussedTileAgg[nextTileIndex] : undefined;
                    }

                    if (nextTile){
                        return nextTile;
                    }
                    if (direction === "right" && !info.curTile.isLink && info.links.length) {
                        return info.links[0];
                    }
                    if (direction === "left" && info.curTile.isLink && info.tiles.length) {
                        return info.group.getShowPlaceholder() ? info.group.oPlusTile :  info.tiles[info.tiles.length - 1];
                    }

                    // if next tile wasn't exist in the current group need to look on next one
                    var nextGroup = this.getNextGroup(direction, info);
                    if  (!nextGroup) {
                        return;
                    } else {
                        var nextGroupTiles = this._getAggregationToFocusInNextGroup(nextGroup, direction);
                        if (nextGroupTiles && nextGroupTiles.length){
                            var last = nextGroupTiles.length - 1;
                            if (direction === "right"){
                                nextTile = nextGroupTiles[nRTL === 1 ? 0 : last];
                            } else {
                                nextTile = nextGroupTiles[nRTL === 1 ? last : 0];
                            }
                        } else {
                            nextTile = nextGroup.oPlusTile;
                        }
                    }
                }

                if (direction === "down" || direction === "up") {
                    if (info.pageName === "catalog") {
                        nextTile = this.getNextUpDownTileInCatalog(direction, info);
                    } else if (sap.ushell.Layout && sap.ushell.Layout.isInited) {
                        nextTile = this.getNextUpDownTileWithLayout(direction, info, bIsActionsModeActive);
                    }
                }
            }
            return nextTile;
        },

        getNextTileInShorterRow:  function(direction, currentRow, info) {
            var lastTileInRowId = direction === 'down' ? this.getLastTileIdInRow(info, currentRow + 1) : this.getLastTileIdInRow(info, currentRow - 1);
            return info.tiles[lastTileInRowId];
        },

        getLastTileIdInRow: function(info, lineNumber) {
            var count = 0;
            for (var i = 0; i < info.rowsData.length; i++) {
                count += info.rowsData[i];
                if (i === lineNumber){ break; }
            }

            return count - 1;
        },

        nextRowIsShorter: function(direction, currentRow, info) {
            if (direction === 'down' && currentRow != info.rowsData.length - 1) {
                return info.rowsData[currentRow] > info.rowsData[currentRow + 1];
            }
            if (direction === 'up' && currentRow != 0) {
                return info.rowsData[currentRow] > info.rowsData[currentRow - 1];
            } else {
                return false;
            }
        },

        getNextGroup: function (direction, info) {
            var nextGroup,
                groups = info.group.getParent().getGroups(),
                isRTL = sap.ui.getCore().getConfiguration().getRTL(),
                curGroupIndex = groups.indexOf(info.group);

            if (direction === "right" || direction === "left"){
                if ( isRTL ){
                    direction = (direction === "right") ? "up" : "down";
                } else {
                    direction = (direction === "right") ? "down" : "up";
                }
            }

            if (direction === "down" || direction === "up" ) {
                var nDirection = direction === "up" ? -1 : 1;
                nextGroup = groups[curGroupIndex + nDirection];
                if (!nextGroup) { return; }

                while (!nextGroup.getVisible() && (curGroupIndex >= 0 && curGroupIndex < groups.length)){
                    curGroupIndex = curGroupIndex + nDirection;
                    nextGroup = groups[curGroupIndex];
                }
            }
            if (!nextGroup.getVisible()) { return; }
            return nextGroup;
        },

        getGroupAndTilesInfo: function (jqTileContainer, pageName) {
            if (!jqTileContainer) {
                jqTileContainer = this.getFocusOnTile(jQuery(":focus"));
            }
            if (!jqTileContainer.length) { return; }
            var curTile = sap.ui.getCore().byId(jqTileContainer.attr('id'));
            var group = curTile.getParent();
            var rowsData;
            var tiles;
            var links;
            curTile.isLink = jqTileContainer.hasClass('sapUshellLinkTile');
            if (pageName == "catalog") {
                rowsData = this.getCatalogLayoutData();
                tiles = [];
                var jqTiles = jQuery('#catalogTiles').find('.sapUshellTile:visible');
                for (var i = 0; i < jqTiles.length; i++) {
                    tiles.push(sap.ui.getCore().byId(jqTiles[i].id));
                }
            } else {
                tiles = group.getTiles();
                links = group.getLinks();
                if (group.getShowPlaceholder() && !curTile.isLink) {
                    tiles.push(group.oPlusTile);
                }
            }

            var sizeOfLine = this.getNumberOfTileInRow(pageName, curTile.isLink);
            return {
                pageName: pageName,
                curTile: curTile,
                curTileIndex: curTile.isLink ? links.indexOf(curTile) : tiles.indexOf(curTile),
                tiles: tiles,
                links: links,
                sizeOfLine: sizeOfLine,
                group: group,
                rowsData:rowsData
            };
        },

        getCatalogLayoutData: function() {
            var jqCatalogContiner = jQuery('#catalogTiles .sapUshellInner').children(':visible'),
                maxTilesInLine = this.getNumberOfTileInRow('catalog'),
                rowsIndex = [],
                countTiles = 0;

            for (var i = 1; i < jqCatalogContiner.length; i++) {

                if (jQuery(jqCatalogContiner[i]).hasClass("sapUshellTile")) {
                    countTiles++;
                }
                if (jQuery(jqCatalogContiner[i]).hasClass("sapUshellHeaderTile")) {
                    rowsIndex.push(countTiles);
                    countTiles = 0;
                }
                if (countTiles >= maxTilesInLine) {
                    rowsIndex.push(countTiles);
                    countTiles = 0;
                }
            }
            if (countTiles > 0) {
                rowsIndex.push(countTiles);
            }

            return rowsIndex;
        },

        whichTileRow: function(id, info) {
            var tilesSum = 0,
                i;

            for (i = 0; i < info.rowsData.length; i++) {
                tilesSum += info.rowsData[i];
                if (id < tilesSum) { return i; }
            }
        },

        goToSiblingElementInTileContainer: function (direction, jqFocused, pageName) {
            var jqTileContainer = jqFocused.closest('.sapUshellTileContainer'),
                jqTileContainerElement,
                jqFirstTileInTileContainer,
                jqTileContainerHeader;

            //If current focused item is the Before Content of a Tile Container.
            if (jqTileContainerElement = this.getFocusTileContainerBeforeContent(jqFocused)) {
                if (direction === 'up' || direction === "left") {
                    this._goToNextTileContainer(jqTileContainerElement, direction);
                } else {
                    jqTileContainerHeader = jqTileContainer.find('.sapUshellTileContainerHeader:first');
                    this.setTabIndexOnTileContainerHeader(jqTileContainerHeader);
                    jqTileContainerHeader.focus();
                }
                return;
            }
            // If current focused item is the Header of a Tile Container.
            if (jqTileContainerElement = this.getFocusTileContainerHeader(jqFocused)) {
                if (direction === 'up') {
                    this.setTabIndexOnTileContainerHeader(jqTileContainerHeader);
                    if (!this._goToTileContainerBeforeContent(jqTileContainer)) {
                        //If the Tile Container doesn't have a Before Content, go to the Tile Container above.
                        this._goToNextTileContainer(jqTileContainerElement, direction);
                    }
                } else if (direction === "down"){
                    jqFirstTileInTileContainer = jqTileContainer.find('.sapUshellTile:first');
                    //If this Tile Container doesn't have tiles at all (not even a Plus Tile), it means that the group is empty and locked.
                    //Thus the next arrow down navigation should be to the descending Tile Container.
                    if (jqFirstTileInTileContainer.length) {
                        this.setTileFocus(jqFirstTileInTileContainer);
                    } else {
                        this._goToNextTileContainer(jqTileContainerElement, direction);
                    }
                } else if (direction === "left") {
                    if (jqFocused.hasClass("sapUshellTileContainerHeader")) {
                        if (!this._goToTileContainerBeforeContent(jqTileContainer)) {
                            //If the Tile Container doesn't have a Before Content, go to the Tile Container above.
                            this._goToNextTileContainer(jqTileContainerElement, "left");
                        }
                    } else {
                        jqTileContainerHeader = jqFocused.closest(".sapUshellTileContainerHeader");
                        jqTileContainerHeader.focus();
                    }
                } else if (direction === "right") {
                    var editInputField = jqFocused.hasClass("sapMInputBaseInner");
                    if (!editInputField) {
                        jqFirstTileInTileContainer = jqTileContainer.find('.sapUshellTile:first');
                        //If this Tile Container doesn't have tiles at all (not even a Plus Tile), it means that the group is empty and locked.
                        //Thus the next arrow down navigation should be to the descending Tile Container.
                        if (jqFirstTileInTileContainer.length) {
                            this.setTileFocus(jqFirstTileInTileContainer);
                        } else {
                            this._goToNextTileContainer(jqTileContainerElement, "down");
                        }
                    }
                }
                return;
            }
            // If current focused item is a Tile.
            if (jqTileContainerElement = this.getFocusOnTile(jqFocused)) {
                this.goFromFocusedTile(direction, jqTileContainerElement, pageName, true);
                return;
            }
            // If current focused item is an After Content of a Tile Container.
            if (jqTileContainerElement = this.getFocusOnTileContainerAfterContent(jqFocused)) {
                if (direction === 'up' || direction === "left") {
                    this._goToFirstTileInTileContainer(jqTileContainerElement);
                } else {
                    this._goToNextTileContainer(jqTileContainerElement, direction);
                }
            }
        },

        _goToNextTileContainer: function (jqTileContainerElement, direction) {
            var jqCurrentTileContainer = jqTileContainerElement.closest('.sapUshellTileContainer'),
                aAllTileContainers = jQuery('.sapUshellTileContainer:visible'),
                nDirection = (direction === 'down') ? 1 : -1,
                jqNextTileContainer,
                jqNextTileContainerHeader;

            jqNextTileContainer = jQuery(aAllTileContainers[aAllTileContainers.index(jqCurrentTileContainer) + nDirection]);
            if (jqNextTileContainer) {
                jqNextTileContainerHeader = jqNextTileContainer.find('.sapUshellTileContainerHeader');
                if (direction === 'down') {
                    if (!this._goToTileContainerBeforeContent(jqNextTileContainer)) {
                        this.setTabIndexOnTileContainerHeader(jqNextTileContainerHeader);
                        this.setTileContainerSelectiveFocus(jqNextTileContainer);
                    }
                } else {
                    if (this._goToTileContainerAfterContent(jqNextTileContainer)) {
                        return;
                    }
                    if (direction === 'up') {
                        if (!this._goToFirstTileInTileContainer(jqNextTileContainer)) {
                            this.setTabIndexOnTileContainerHeader(jqNextTileContainerHeader);
                            jqNextTileContainerHeader.focus();
                        }
                    } else if (direction === 'left') {
                        if (!this._goToLastTileInTileContainer(jqNextTileContainer)) {
                            this.setTabIndexOnTileContainerHeader(jqNextTileContainerHeader);
                            jqNextTileContainerHeader.focus();
                        }
                    }
                }
            }
        },

        _goToLastTileInTileContainer: function (jqTileContainerElement) {
            var jqTileContainer = jqTileContainerElement.hasClass('sapUshellTileContainer') ? jqTileContainerElement : jqTileContainerElement.closest('.sapUshellTileContainer'),
                jqLastTileInTileContainer = jqTileContainer.find('.sapUshellTile:last'),
                jqLastLinkInTileContainer = jqTileContainer.find('.sapUshellLinkTile:last');

            if (!jqLastLinkInTileContainer.length && !jqLastTileInTileContainer.length) {
                return false;
            }
            this.setTileFocus(jqLastLinkInTileContainer.length ? jqLastLinkInTileContainer : jqLastTileInTileContainer);
            return true;
        },

        _goToFirstTileInTileContainer: function (jqTileContainerElement) {
            var jqTileContainer = jqTileContainerElement.hasClass('sapUshellTileContainer') ? jqTileContainerElement : jqTileContainerElement.closest('.sapUshellTileContainer'),
                jqFirstTileInTileContainer = jQuery(jqTileContainer.find('.sapUshellTile').get(0));

            if (jqFirstTileInTileContainer.length) {
                this.setTileFocus(jqFirstTileInTileContainer);
                return true;
            } else {
                return false;
            }
        },

        _goToTileContainerBeforeContent: function (jqTileContainerElement) {
            var jqTileContainer = jqTileContainerElement.hasClass('sapUshellTileContainer') ? jqTileContainerElement : jqTileContainerElement.closest('.sapUshellTileContainer'),
                jqTileContainerBeforeContent = jqTileContainer.find('.sapUshellTileContainerBeforeContent button:visible');

            if (jqTileContainerBeforeContent.length) {
                jqTileContainerBeforeContent.focus();
                return true;
            } else {
                return false;
            }
        },

        _goToTileContainerAfterContent: function (jqTileContainerElement) {
            var jqTileContainer = jqTileContainerElement.hasClass('sapUshellTileContainer') ? jqTileContainerElement : jqTileContainerElement.closest('.sapUshellTileContainer'),
                jqTileContainerAfterContent = jqTileContainer.find('.sapUshellTileContainerAfterContent button:visible');

            if (jqTileContainerAfterContent.length) {
                jqTileContainerAfterContent.focus();
                return true;
            } else {
                return false;
            }
        },

        goFromFocusedTile: function (direction, jqTile, pageName, bIsActionsModeActive) {
            var info = this.getGroupAndTilesInfo(jqTile, pageName),
                nextTile,
                jqCurrentTileContainer,
                jqNextTileContainer,
                jqCurrentTileContainerHeader,
                jqTileContainerAfterContent,
                bIsSameTileContainer;

            if (!info) { return; }
            nextTile = this.getNextTile(direction, info, bIsActionsModeActive);
            if (bIsActionsModeActive) {
                jqCurrentTileContainer =  jQuery(jqTile).closest('.sapUshellTileContainer');
                if (!nextTile) {
                    if (direction === 'down' || direction === 'right') {
                        jqTileContainerAfterContent = jQuery(jqCurrentTileContainer).find('.sapUshellTileContainerAfterContent button:visible');
                        jqTileContainerAfterContent.focus();
                        return;
                    }
                    if (direction === 'up') {
                        this.setTabIndexOnTileContainerHeader(jqCurrentTileContainer.find('.sapUshellTileContainerHeader'));
                        this.setTileContainerSelectiveFocus(jqCurrentTileContainer);
                        return;
                    }
                    if (direction === 'left') {
                        jqCurrentTileContainerHeader = jqCurrentTileContainer.find('.sapUshellTileContainerHeader');
                        jqCurrentTileContainerHeader.focus();
                    }
                } else {
                    jqNextTileContainer = jQuery(nextTile.getDomRef()).closest('.sapUshellTileContainer');
                    bIsSameTileContainer = jqCurrentTileContainer.length && jqNextTileContainer.length && (jqCurrentTileContainer.attr('id') === jqNextTileContainer.attr('id'));
                    if (bIsSameTileContainer){
                        this.setTileFocus(jQuery(nextTile.getDomRef()));
                    } else {
                        if (direction === 'down' || direction === 'right') {
                            if (!this._goToTileContainerAfterContent(jqCurrentTileContainer)) {
                                //If the Tile Container doesn't have a visible AfterContent, go to the next Tile Container.
                                this.setTabIndexOnTileContainerHeader(jqNextTileContainer.find('.sapUshellTileContainerHeader'));
                                this.setTileContainerSelectiveFocus(jqNextTileContainer);
                            }
                        } else if (direction === 'up' || 'left') {
                            jqCurrentTileContainerHeader = jqCurrentTileContainer.find('.sapUshellTileContainerHeader');
                            this.setTabIndexOnTileContainerHeader(jqCurrentTileContainerHeader);
                            jqCurrentTileContainerHeader.focus();
                        }
                    }
                }

            } else if (nextTile) {
                this.setTileFocus(jQuery(nextTile.getDomRef()));
            }
        },

        deleteTile: function (jqTile) {
            var tileId = jqTile.attr("id");
            if (!tileId) { return; }
            var oTile = sap.ui.getCore().byId(tileId);
            var info = this.getGroupAndTilesInfo(jqTile);
            var nextTile = this.getNextTile("right", info);
            if (!nextTile || (nextTile && nextTile.getParent() != info.group)) {
                nextTile = this.getNextTile("left", info);
            }
            if (!nextTile || (nextTile && nextTile.getParent() != info.group)) {
                nextTile = info.group.oPlusTile;
            }
            if (nextTile) {
                setTimeout(function (group, nextTileUuid) {
                    var tiles = group.getTiles();
                    if (!tiles.length) {
                        if (info.group.getProperty('defaultGroup')) {
                            var nextGroup = this.getNextGroup("right", info);
                            nextTile = nextGroup.getTiles()[0] || nextGroup.oPlusTile;
                            this.setTileFocus(jQuery(nextTile.getDomRef()));
                        }
                        this.setTileFocus(jQuery(group.oPlusTile.getDomRef()));
                        return;
                    }
                    var nextTile;
                    for (var i = 0; i < tiles.length; i++) {
                        if (tiles[i].getProperty('uuid') == nextTileUuid) {
                            nextTile = tiles[i];
                            break;
                        }
                    }
                    if (nextTile) {
                        this.setTileFocus(jQuery(nextTile.getDomRef()));
                    }
                }.bind(this, info.group, nextTile.getProperty('uuid')), 100);
            }
            var oEventBus = sap.ui.getCore().getEventBus();
            oEventBus.publish("launchpad", "deleteTile", {
                tileId: oTile.getUuid()
            });
        },

        setTabIndexOnTileContainerHeader: function (jqTileContainerHeader) {
            jQuery(".sapUshellTileContainerHeader").attr("tabindex", -1);
            jQuery(".sapUshellTileContainerHeader .sapUshellContainerTitle").attr("tabindex", -1);
            jQuery(".sapUshellTileContainerHeader .sapUshellContainerHeaderActions button").attr("tabindex", -1);

            if (jqTileContainerHeader) {
                var jqTileConainerHeaderTitle = jqTileContainerHeader.find('.sapUshellContainerTitle:first'),
                    jqTileContainerHeaderActions = jqTileContainerHeader.find('.sapUshellContainerHeaderActions:first');

                jqTileContainerHeader.attr('tabindex', 0);
                jqTileConainerHeaderTitle.attr('tabindex', 0);
                jqTileContainerHeaderActions.find('button').attr('tabindex', 0);
            }
        },

        setTileContainerSelectiveFocus: function(jqTileContainer) {
            var jqTileContainerBeforeContent = jqTileContainer.find('.sapUshellTileContainerBeforeContent button'),
                jqTileContainerHeader = jqTileContainer.find('.sapUshellTileContainerHeader:first'),
                bBeforeContentDisplayed = jqTileContainerBeforeContent.length && jqTileContainerBeforeContent.is(":visible");

            if (bBeforeContentDisplayed) {
                jqTileContainerBeforeContent.focus();
            } else if (jqTileContainerHeader.length) {
                //Set tab-index on tileContainerHeader and its' children.
                this.setTabIndexOnTileContainerHeader(jqTileContainerHeader);
                jqTileContainerHeader.focus();
            }
        },

        setTileFocus: function(jqTile) {
            if (!jqTile.hasClass('sapUshellPlusTile')) {
                var currentPage = this.oModel.getProperty("/currentViewName"),
                    jqFocusables;

                jqFocusables = jqTile.find('[tabindex]');
                if (currentPage === "catalog") {
                    var handler = sap.ushell.components.flp.ComponentKeysHandler;
                    handler.setFocusOnCatalogTile(jqFocusables.eq(0));
                }
                if (!jqFocusables.length){
                    jqTile.attr("tabindex", "0");
                    jqFocusables = jqTile.find('[tabindex], a').andSelf().filter('[tabindex], a');
                }
                jqFocusables.filter('[tabindex!="-1"]');
                jQuery.each(this.aTileWrapperClasses, function (index, sTileWrapperClass) {
                    var jqTileWrapper = jqFocusables.eq(0).closest(sTileWrapperClass);
                    jqTile = jqTileWrapper.length ? jqTileWrapper : jqFocusables.eq(0);
                    return !(jqTileWrapper.length);
                });
            }

            jqTile.focus();
        },

        setFocusOnCatalogTile: function(jqTile){
            var oPrevFirsTile = jQuery(".sapUshellTile[tabindex=0]"),
                aAllTileFocusableElements,
                aVisibleTiles,
                jqParentTile;

            if (oPrevFirsTile.length) {
                //remove tabindex attribute to all tile's elements in TAB cycle if exists
                jQuery(".sapUshellTileContainerContent").find('[tabindex*=0]').attr("tabindex", -1);
                aAllTileFocusableElements = oPrevFirsTile.find('[tabindex], a').andSelf().filter('[tabindex], a');
                aAllTileFocusableElements.attr("tabindex", -1);
            }

            if (!jqTile){
                aVisibleTiles = jQuery(".sapUshellTile:visible");
                if (aVisibleTiles.length) {
                    jqParentTile = jQuery(aVisibleTiles[0]);
                    jqTile = jqParentTile.find('[tabindex], a').eq(0);
                } else {
                    return;
                }
            }

            //add tabindex attribute to all tile's elements in TAB cycle
            jqTile.closest(".sapUshellTile").attr("tabindex", 0);
            jqTile.attr("tabindex", 0);
            jqTile.closest(".sapUshellTile").find("button").attr("tabindex", 0);
        },

        moveScrollDashboard: function (jqTileSelected) {
            var containerId = jqTileSelected.closest(".sapUshellTileContainer")[0].id,
                iY = -1 * ( document.getElementById('dashboardGroups').getBoundingClientRect().top) + document.getElementById(containerId).getBoundingClientRect().top;
            jQuery('.sapUshellDashboardView').animate({scrollTop: iY}, 200, function () {
                this.setTileFocus(jqTileSelected);
            }.bind(this));
        },

        moveScrollCatalog: function (jqTileSelected) {
            var jqDashboardPageCont = jQuery("#catalogTilesPage-cont");
            var iTopSpacing = jQuery('#shell-hdr').height() + jQuery('.sapMPageHeader').height() + (parseInt(jQuery('.sapMPanelHdr').css('margin-top'), 10) * 2);
            var iY = jqTileSelected.offset().top + jqDashboardPageCont.scrollTop() - iTopSpacing;
            sap.ui.getCore().byId("catalogTilesPage").scrollTo(iY, 200);
        },

        goToNearbySidePanelGroup: function (direction, jqElement) {
            var selector = (direction == "up") ? "prev" : "next";
            var nextGroup = jqElement[selector]();
            // find the first group list item (in the respected order) which is visible (i.e. non empty)
            while (nextGroup.css('display') == "none") {
                nextGroup = nextGroup[selector]();
            }
            if (!nextGroup) { return; }
            nextGroup.focus();
        },

        deleteSidePanelGroup: function (jqGroup) {
            var core = sap.ui.getCore();
            var oGroup = core.byId(jqGroup.attr('id'));
            var bRemovable = oGroup.getRemovable();
            var oEventBus = core.getEventBus();
            oEventBus.publish("launchpad", bRemovable ? "deleteGroup" : "resetGroup", {
                groupId: oGroup.getGroupId()
            });
        },

        moveGroupFromDashboard: function(direction, jqGroup) {
            var jqCurrentTileContainer,
                aTileContainers = jQuery(".sapUshellDashboardGroupsContainerItem"),
                indexOfTileContainer,
                toIndex;

            jqCurrentTileContainer = jqGroup.closest(".sapUshellDashboardGroupsContainerItem");
            indexOfTileContainer = aTileContainers.index(jqCurrentTileContainer);
            toIndex = direction == "up" || direction == "left" ? indexOfTileContainer - 1 : indexOfTileContainer + 1;
            this.moveGroup(indexOfTileContainer, toIndex);
        },

        moveGroup: function(fromIndex, toIndex) {
            var aGroups = jQuery(".sapUshellDashboardGroupsContainerItem"),
                numOfDisabledDragAndDropGroups = jQuery(".sapUshellDisableDragAndDrop").length;
            if (toIndex < 0 || toIndex >= aGroups.length || toIndex < numOfDisabledDragAndDropGroups) { return; }
            var core = sap.ui.getCore();
            var oData = {fromIndex: fromIndex, toIndex: toIndex};
            var oBus = core.getEventBus();
            oBus.publish("launchpad", "moveGroup", oData);

            setTimeout(function () {
                var tileContainerHeader = jQuery(".sapUshellTileContainerHeader")[toIndex];
                this.setTabIndexOnTileContainerHeader(jQuery(tileContainerHeader));
                jQuery(tileContainerHeader).focus();
            }.bind(this), 100);
        },

        goToEdgeSidePanelGroup: function (selector) {
            var jqGroups = jQuery(".sapUshellGroupLI");
            jqGroups[selector]().focus();
        },

        getFocusGroupFromSidePanel: function (jqFocused) {
            var jqFocusedGroup = jqFocused.closest(".sapUshellGroupLI");
            return jqFocusedGroup.length ? jqFocusedGroup : false;
        },

        getFocusGroupFromDashboard: function (jqFocused) {
            var bIsFocusedOnHeaderTitle = jqFocused.closest('.sapUshellTileContainerHeader').length && jqFocused[0].tagName === 'H2';
            return bIsFocusedOnHeaderTitle ? jqFocused : false;
        },

        getFocusTileContainerBeforeContent: function (jqFocusedElement) {
            var jqTileContainerBeforeContent = jqFocusedElement.closest('.sapUshellTileContainerBeforeContent');
            return jqTileContainerBeforeContent.length ? jqTileContainerBeforeContent : false;
        },

        getFocusTileContainerHeader: function (jqFocusedElement) {
            var jqTileContainerHeader = jqFocusedElement.closest('.sapUshellTileContainerHeader');
            return jqTileContainerHeader.length ? jqTileContainerHeader : false;
        },

        getFocusOnTileContainerAfterContent: function (jqFocusedElement) {
            var jqTileContainerAfterContent = jqFocusedElement.closest('.sapUshellTileContainerAfterContent');
            return jqTileContainerAfterContent.length ? jqTileContainerAfterContent : false;
        },

        getFocusOnTile: function (jqFocused) {
            var jqFocusedTile;

            jQuery.each(this.aTileWrapperClasses, function (index, sTileWrapperClass) {
                var jqTileWrapper = jqFocused.closest(sTileWrapperClass);
                jqFocusedTile = jqTileWrapper.length ? jqTileWrapper : false;
                return !(jqFocusedTile);
            });

            return jqFocusedTile;
        },

        getFocusOnCatalogPopover: function (jqFocused) {
            var jqFocusedPopover = jqFocused.closest(".sapMPopover");
            return jqFocusedPopover.length ? jqFocusedPopover : false;
        },

        addGroup: function (jqButton) {
            var core = sap.ui.getCore();
            var oButton = core.byId(jqButton.attr('id'));
            oButton.firePress();
        },

        renameGroup: function () {
            var jqFocused = jQuery(":focus");
            var jqTileContainerTitle = this.getFocusGroupFromDashboard(jqFocused);

            if (jqTileContainerTitle) {
                jqTileContainerTitle.click();
            }
        },

        upDownButtonsHandler: function (direction, pageName) {
            var jqFocused = jQuery(":focus"),
                jqElement = this.getFocusGroupFromSidePanel(jqFocused);

            this.goFromFocusedTile(direction, jqElement, pageName);
        },
        arrowsButtonsHandler: function (direction, pageName) {
            var jqElement,
                jqFocused = jQuery(":focus"),
                bIsActionsModeActive = this.oModel.getProperty('/tileActionModeActive');

            if ((jqElement = this.getFocusGroupFromSidePanel(jqFocused)) && (direction === "up" || direction === "down")) {
                    this.goToNearbySidePanelGroup(direction, jqElement);
            } else {
                if (bIsActionsModeActive) {
                    if (!jqFocused.hasClass('sapMInputBaseInner')) {
                        this.goToSiblingElementInTileContainer(direction, jqFocused, pageName);
                    }
                } else {
                    this.goFromFocusedTile(direction, jqElement, pageName);
                }
            }
        },

        homeEndButtonsHandler: function (selector, e) {
            var jqFocused = jQuery(":focus"),
                jqElement = this.getFocusGroupFromSidePanel(jqFocused);
            if (jqFocused.closest("#dashboardGroups").length || jqFocused.closest("#catalogTiles").length) {
                e.preventDefault();
                this.goToEdgeTile(selector);
                return;
            }
            if (jqElement && jqElement[0].id == jqFocused[0].id) {
                e.preventDefault();
                this.goToEdgeSidePanelGroup(selector);
                return;
            }
        },

        deleteButtonHandler: function () {
            if (this.oModel.getProperty("/personalization") && this.oModel.getProperty("/tileActionModeActive")) {
                var jqElement,
                    jqFocused = jQuery(":focus");
                if (jqElement = this.getFocusOnTile(jqFocused)) {
                    if (!jqElement.hasClass('sapUshellLockedTile') && !jqElement.hasClass('sapUshellPlusTile')) {
                        this.deleteTile(jqElement);
                    }
                    return;
                }
                if (jqElement = this.getFocusGroupFromSidePanel(jqFocused)) {
                    //Don't delete the group in case delete was pressed during renaming & in case this is a default group.
                    if (!jqElement.hasClass('sapUshellEditing') && !jqElement.hasClass("sapUshellDefaultGroupItem") && !jqElement.hasClass("sapUshellTileContainerLocked")) {
                        this.deleteSidePanelGroup(jqElement);
                        return;
                    }
                }
            }
        },

        ctrlPlusArrowKeyButtonsHandler: function (selector) {
            var jqElement,
                jqFocused = jQuery(":focus");
            if (jqElement = this.getFocusOnTile(jqFocused)) {
                this.moveTile(selector, false, jqElement);
                return;
            }
            if (jqElement = this.getFocusTileContainerHeader(jqFocused)) {
                // first we check if we should prevent the move of the group - obtain the wrapping container (content div)
                var jqFocusGroupContentElement = jqElement.closest('.sapUshellTileContainerContent');
                // if the group is the Home group OR Locked group - do not initiate move
                if (jqFocusGroupContentElement.hasClass('sapUshellTileContainerDefault') || jqFocusGroupContentElement.hasClass('sapUshellTileContainerLocked')) {
                    return;
                } else {
                    this.moveGroupFromDashboard(selector, jqElement);
                }
            }
        },

        spaceButtonHandler: function (e) {
            var jqElement,
                jqFocused = jQuery(":focus");
            if (jqElement = this.getFocusGroupFromSidePanel(jqFocused)) {
                jqElement.click();
                return false;
            }
        },

        goToFirstCatalogTile: function () {
            var handler = sap.ushell.components.flp.ComponentKeysHandler;
            var firstTile = jQuery('#catalogTiles .sapUshellTile:visible:first');
            handler.setTileFocus(firstTile);
        },

        goToFirstCatalogHeaderItem: function () {
            var nextElement = jQuery("#catalogTilesPage header button")[0];
            nextElement.focus();
        },

        handleFocusOnMe: function(keyup, bFocusPassedFirstTime) {
            var handler = sap.ushell.components.flp.ComponentKeysHandler;

            if (handler.oModel.getProperty("/currentViewName") === "home") {
                // we got the focus from the shell
                if (bFocusPassedFirstTime) {
                    if (keyup.shiftKey) {
                        handler.goToTileContainer(keyup);
                    } else {
                        //sidePanelFirstGroup
                        var jqElement = jQuery(".sapUshellGroupLI:first:visible");
                        if (!jqElement.length) {
                            handler.goToTileContainer(keyup);
                        } else {
                            jqElement.focus();
                        }
                    }
                } else {
                    handler.mainKeydownHandler(keyup);
                    handler.dashboardKeydownHandler(keyup);
                }
            } else {
                // we got the focus from the shell
                if (bFocusPassedFirstTime) {
                    if (keyup.shiftKey) {
                        handler.goToFirstCatalogTile();
                    } else {
                        handler.goToFirstCatalogHeaderItem();
                    }
                } else {
                    handler.mainKeydownHandler(keyup);
                    handler.catalogKeydownHandler(keyup);
                }
            }
        },

        groupHeaderNavigation: function() {
            var jqFocusItem = jQuery(":focus"),
                jqElement;

            if (jqFocusItem.hasClass("sapUshellTileContainerHeader")) {
                jqElement = jqFocusItem.find(".sapUshellContainerTitle");
                jqElement.focus();
            } else if (jqElement = jqFocusItem.closest(".sapUshellTileContainerHeader")){
                jqElement.focus();
            }
        },

        handleShortcuts: function (oEvent) {
            var handler = sap.ushell.components.flp.ComponentKeysHandler;

            if (oEvent.altKey) {
                switch (String.fromCharCode(oEvent.keyCode)) {
                    case 'C':
                        if (handler.oModel.getProperty("/personalization")) {
                            handler.handleCatalogKey();
                        }
                        break;
                    case 'H':
                        handler.handleHomepageKey();
                        break;
                }
            }
        },

        mainKeydownHandler: function (e) {
            e = e || window.event;

            switch (e.keyCode) {
                case this.keyCodes.SPACE:
                    this.spaceButtonHandler(e);
                    break;
                case this.keyCodes.HOME: //Home button
                    this.homeEndButtonsHandler("first", e);
                    break;
                case this.keyCodes.END: //End button
                    this.homeEndButtonsHandler("last", e);
                    break;
            }
        },

        catalogKeydownHandler: function (keyup) {
            var handler = sap.ushell.components.flp.ComponentKeysHandler;
            var pageName = "catalog";
            switch (keyup.keyCode) {
                case handler.keyCodes.ARROW_UP: //Up
                    handler.upDownButtonsHandler("up", pageName);
                    break;
                case handler.keyCodes.ARROW_DOWN: //Down
                    handler.upDownButtonsHandler("down", pageName);
                    break;
                case handler.keyCodes.ARROW_RIGHT: // Right ->
                    handler.goFromFocusedTile("right","",pageName);
                    break;
                case handler.keyCodes.ARROW_LEFT: // Left <-
                    handler.goFromFocusedTile("left","",pageName);
                    break;
                case handler.keyCodes.PAGE_UP: //Page Up button
                    handler.goToFirstTileOfSiblingGroupInCatalog('prev', keyup);
                    break;
                case handler.keyCodes.PAGE_DOWN: //Page Down
                    handler.goToFirstTileOfSiblingGroupInCatalog('next', keyup);
                    break;
            }
        },

        dashboardKeydownHandler: function (keyup) {
            var handler = sap.ushell.components.flp.ComponentKeysHandler;
            switch (keyup.keyCode) {
                case handler.keyCodes.F2:
                    handler.renameGroup();
                    break;
                case handler.keyCodes.F7:
                    handler.groupHeaderNavigation();
                    break;
                case handler.keyCodes.DELETE: // Delete
                    handler.deleteButtonHandler();
                    break;
                case handler.keyCodes.ARROW_UP: //Up
                    if (keyup.ctrlKey === true) {
                        handler.ctrlPlusArrowKeyButtonsHandler("up");
                    } else {
                        handler.arrowsButtonsHandler("up");
                    }
                    break;
                case handler.keyCodes.ARROW_DOWN: //Down
                    if (keyup.ctrlKey === true) {
                        handler.ctrlPlusArrowKeyButtonsHandler("down");
                    } else {
                        handler.arrowsButtonsHandler("down");
                    }
                    break;
                case handler.keyCodes.ARROW_RIGHT: // Right ->
                    if (keyup.ctrlKey === true) {
                        handler.ctrlPlusArrowKeyButtonsHandler("right");
                    } else {
                        handler.arrowsButtonsHandler('right');
                    }
                    break;
                case handler.keyCodes.ARROW_LEFT: // Left <-
                    if (keyup.ctrlKey === true) {
                        handler.ctrlPlusArrowKeyButtonsHandler("left");
                    } else {
                        handler.arrowsButtonsHandler('left');
                    }
                    break;
                case handler.keyCodes.PAGE_UP: //Page Up button //TODO : check what happen when the tile is  empty
                    handler.goToFirstTileOfSiblingGroup('prev', keyup);
                    break;
                case handler.keyCodes.PAGE_DOWN: //Page Down
                    handler.goToFirstTileOfSiblingGroup('next', keyup);
                    break;
            }

            return true;
        },

        init: function (oModel, oRouter) {
            this.oModel = oModel;
            this.oRouter = oRouter;
        }
    };

    sap.ushell.components.flp.ComponentKeysHandler = new componentKeysHandler();
}());

}; // end of sap/ushell/components/flp/ComponentKeysHandler.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.flp.CustomRouter') ) {
(function () {
    "use strict";
    jQuery.sap.declare("sap.ushell.components.flp.CustomRouter");

    sap.ui.core.routing.Router.extend("sap.ushell.components.flp.CustomRouter", {

        constructor : function() {
            sap.ui.core.routing.Router.apply(this, arguments);
            //this._oRouteMatchedHandler = new sap.m.routing.RouteMatchedHandler(this);
            this.attachRouteMatched(this._onHandleRouteMatched, this);
            //this.attachRoutePatternMatched(this._handleRoutePatternMatched, this);
        },

        navTo : function() {
            if (!this._bIsInitialized) {
                this.initialize();
            }
            sap.ui.core.routing.Router.prototype.navTo.apply(this, arguments);
        },

        destroy : function() {
            sap.ui.core.routing.Router.prototype.destroy.apply(this, arguments);
        },
        _onHandleRouteMatched : function (oEvent) {
            var mParameters = oEvent.getParameters(),
                oTargetControl = sap.ui.getCore().byId(mParameters.config.controlId);
            var result = this.getTarget(mParameters.config.target).display();
            oTargetControl.to(result.oTargetParent);
        }
    });
})();
}; // end of sap/ushell/components/flp/CustomRouter.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.flp.FLPAnalytics') ) {

(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.components.flp.FLPAnalytics");

    /**
     * Manage UsageAnalytics event logging as a result of FLP user flows
     */

    // Launchpad action events that trigger logging
    var aObservedLaunchpadActions = ["appOpened", "deleteTile", "createGroup", "enterEditMode", "catalogTileClick", "dashboardTileClick", "dashboardTileLinkClick"],
        oEventBus = sap.ui.getCore().getEventBus(),
        that = this,
        oLaunchedApplications = {};

    /**
     * Updates oLaunchedApplications with the title and opening time of the given application  
     */
    function saveOpenAppicationData(applicationId) {
        var oMetadataOfTarget = sap.ushell.services.AppConfiguration.getMetadata();
        oLaunchedApplications[applicationId] = {};
        oLaunchedApplications[applicationId].startTime = new Date();
        oLaunchedApplications[applicationId].title = oMetadataOfTarget.title;
    }

    /**
     * Logs a "Time in App" event according to the given application ID
     * 
     * Calculates the time according to the current (closing) time 
     *  and the opening time that is kept on oLaunchedApplications[applicationId]  
     */
    function logTimeInAppEvent(applicationId) {
        var appDuration = 0;

        try {
            appDuration = (new Date() - oLaunchedApplications[applicationId].startTime) / 1000;
            sap.ushell.Container.getService("UsageAnalytics").logCustomEvent("FLP: Time in Application (sec)", appDuration, [oLaunchedApplications[applicationId].title]);
        } catch (e) {
            jQuery.sap.log.warning("Duration in application " + applicationId + " could not be calculated", null, "sap.ushell.components.flp.FLPAnalytics");
        }
    }

    /**
     * Handler for published usageAnalytics events.  
     */
    function handleAction(sChannelId, sEventId, oData) {
        var sApplicationId = window.location.hash.substr(1),
            sApplicationTitle;

        window.swa.custom1 = {ref: sApplicationId};
        switch (sEventId) {
        case 'appOpened':
            // In order to be notified when applications are launched - we rely on navContainer's attachAfterNavigate event.
            // but for the first navigation (e.g. login or direct URL in a new tab) we still need the "appOpened" event.
            saveOpenAppicationData(sApplicationId);
            sap.ushell.Container.getService("UsageAnalytics").logCustomEvent("FLP: Application Opened", "First Load", [oLaunchedApplications[sApplicationId].title]);
            oEventBus.unsubscribe("launchpad", "appOpened", handleAction);
            break;
        case 'bookmarkTileAdded':
            sApplicationTitle = window.document.title;
            sap.ushell.Container.getService("UsageAnalytics").logCustomEvent("FLP: Personalization", "Save as Tile", [sApplicationTitle, oData.group.title, oData.group.id, oData.tile.title]);
            break;
        case 'enterEditMode':
            sap.ushell.Container.getService("UsageAnalytics").logCustomEvent("FLP: Personalization", "Enter Action Mode", [oData.source]);
            break;
        case 'catalogTileClick':
            sap.ushell.Container.getService("UsageAnalytics").logCustomEvent("FLP: Application Launch point", "Catalog", []);
            break;
        case 'dashboardTileClick':
            sap.ushell.Container.getService("UsageAnalytics").logCustomEvent("FLP: Application Launch point", "Homepage", []);
            break;
        case 'dashboardTileLinkClick':
            window.swa.custom1 = {ref: oData.targetHash.substr(1)};
            sap.ushell.Container.getService("UsageAnalytics").logCustomEvent("FLP: Application Launch point", "Tile Group Link", []);
            break;
        default:
            break;
        }
    }

    /**
     * Handler of navContainer's AfterNavigate event (i.e. navigation between the container's pages)
     *
     * - Logs "TimeInAppEvent" for the source application (i.e. from which the navigation occurred)
     * - Updated data about the opened application
     * - Logs "Application Opened" event 
     */
    function handleAfterNavigate(oEvent) {
        var sFromApplicationId,
            sToApplicationId,
            oTargetApplication;

        // For the source application (the one from which the user navigates) -
        // Calculate the time duration and log a "Time in Application" event
        sFromApplicationId =  oEvent.getParameter("from").getId().replace("application-", "").replace("applicationShellPage-", "");
        window.swa.custom1 = {ref: sFromApplicationId};
        logTimeInAppEvent(sFromApplicationId);

        // For the target application (the one to which the user navigates) -
        // Keep the opening time and title, and log an "Application Opened" event
        oTargetApplication = oEvent.getParameter("to");
        sToApplicationId =  oTargetApplication.getId().replace("application-", "").replace("applicationShellPage-", "");
        saveOpenAppicationData(sToApplicationId);
        window.swa.custom1 = {ref: sToApplicationId};
        sap.ushell.Container.getService("UsageAnalytics").logCustomEvent("FLP: Application Opened", "Through navContainer", [oLaunchedApplications[sToApplicationId].title]);
    }

    /**
     * Handler of browser tab close event
     * 
     * Logs a "Time in App" event  
     */
    jQuery(window).unload(function (event) {
        var currentApp = window.location.hash.substr(1);
        logTimeInAppEvent(currentApp);
    });

    try {
        sap.ui.getCore().byId('navContainer').attachAfterNavigate(handleAfterNavigate, that);
    } catch (e) {
        jQuery.sap.log.warning("Failure when subscribing to navContainer 'AfterNavigate' event", null, "sap.ushell.components.flp.FLPAnalytics");
    }
    oEventBus.subscribe("sap.ushell.services.Bookmark", "bookmarkTileAdded", handleAction, that);
    aObservedLaunchpadActions.forEach(function (item, i, arr) {
        oEventBus.subscribe("launchpad", item, handleAction, that);
    });
})();

}; // end of sap/ushell/components/flp/FLPAnalytics.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.flp.launchpad.PagingManager') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, document, setTimeout, window */
    /*jslint plusplus: true, nomen: true, bitwise: true */

    jQuery.sap.declare("sap.ushell.components.flp.launchpad.PagingManager");
    sap.ui.base.EventProvider.extend("sap.ushell.components.flp.launchpad.PagingManager", {
        metadata : {
            publicMethods : ["setElementClass", "setContainerSize", "getNumberOfAllocatedElements", "moveToNextPage", "getTileHeight"]
        },
        constructor : function (sId, mSettings) {
            //make this class only available once
//            if (sap.ushell.components.flp.launchpad.getPagingManager && sap.ushell.components.flp.launchpad.getPagingManager()) {
//                return sap.ushell.components.flp.launchpad.getPagingManager();
//            }
            sap.ushell.components.flp.launchpad.getPagingManager = jQuery.sap.getter(this.getInterface());
            this.currentPageIndex = 0;
            this.containerHeight = mSettings.containerHeight || 0;
            this.containerWidth = mSettings.containerWidth || 0;
            this.ElementClass = mSettings.elementClassName || "";
            this.tileHeight = 0;
        },
        getTileHeight : function () {
            return this.tileHeight;
        },
        setElementClass : function (sClassName) {
            this.ElementClass = sClassName;
        },

        setContainerSize : function (nHeight, nWidth) {
            var totalNumberAllocatedTiles = this.getNumberOfAllocatedElements();
            this.containerHeight = nHeight;
            this.containerWidth = nWidth;
            this._changePageSize(totalNumberAllocatedTiles);
        },

        getNumberOfAllocatedElements : function () {
            return this._calcElementsPerPage() * this.currentPageIndex;
        },

        _changePageSize: function (totlaNumberAllocateedTiles) {
            this.currentPageIndex = Math.ceil(totlaNumberAllocateedTiles / this._calcElementsPerPage());
        },

        moveToNextPage : function () {
            this.currentPageIndex++;
        },

        _calcElementsPerPage : function () {
            var oElement = jQuery("<div>").addClass(this.ElementClass);
            jQuery('body').append(oElement);
            var elementHeight = oElement.height();
            var elementWidth = oElement.width();

            if (elementHeight < 100 || elementWidth < 100) {
                elementWidth = 100;
                elementHeight = 100;
            }

            var elementsPerRow = Math.round(this.containerWidth / elementWidth),
                elementsPerColumn = Math.round(this.containerHeight / elementHeight);
            this.tileHeight = elementHeight;

            oElement.remove();
            if (!elementsPerRow || !elementsPerColumn || elementsPerColumn === Infinity || elementsPerRow === Infinity || elementsPerColumn === 0 || elementsPerRow === 0) {
                return 10;
            }
            return elementsPerRow * elementsPerColumn;
        }
    });
}());

}; // end of sap/ushell/components/flp/launchpad/PagingManager.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper') ) {
(function(){
    jQuery.sap.declare("sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper");

    sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper = function(tile) {
        this.tile = tile;
    };
    sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper.prototype.setErrorState = function() {
        this.getTile().setState(sap.suite.ui.commons.LoadState.Failed);
    };
    sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper.prototype.setLoadingState = function() {
        this.getTile().setState(sap.suite.ui.commons.LoadState.Loading);
    };
    sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper.prototype.setLoadedState = function() {
        this.getTile().setState(sap.suite.ui.commons.LoadState.Loaded);
    };
    sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper.prototype.setTrendDown = function() {
        this.getTile().setIndicator(sap.suite.ui.commons.DeviationIndicator.Down);
    };
    sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper.prototype.setTrendUp = function() {
        this.getTile().setIndicator(sap.suite.ui.commons.DeviationIndicator.Up);
    };
    sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper.prototype.setTrendNeutral = function() {
        this.getTile().setIndicator(sap.suite.ui.commons.DeviationIndicator.None);
    };
    sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper.prototype.setThresholdGood = function(){};
    sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper.prototype.setThresholdBad = function(){};
    sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper.prototype.setThresholdCritical = function(){};
    sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper.prototype.setThresholdNeutral = function(){};


    sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper.prototype.calculateThreshold = function(actualValue, variantValue, improvementDirection) {

    };

    sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper.prototype.setTile = function(tile) {
        this.tile = tile;
    };
    sap.ushell.components.tiles.indicatorTileUtils.indicatorTileHelper.prototype.getTile = function() {
        return this.tile;
    };
}());


}; // end of sap/ushell/components/tiles/indicatorTileUtils/indicatorTileHelper.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.indicatorTileUtils.oData4Analytics') ) {
/**
 * @fileOverview API for analytical extensions in OData service metadata.
 *
 * <a href="../sap-odata-analytics.jpg">Overview class diagram.</a><p/> At the
 * current stage, the API is purely experimental, not yet functionally complete
 * and not meant for productive usage. At present, its only purpose is to
 * demonstrate how easy analytical extensions of OData4SAP can be consumed. <p/>
 * <em>USE OBJECTS VIA METHODS ONLY - DO NOT ACCESS JAVASCRIPT OBJECT PROPERTIES
 * DIRECTLY !</em>
 * Lazy initialization of attributes will cause unexpected values when you
 * access object attributes directly. <p/> PI BIT Consumption and Collaboration
 * <p/> Main contact: Gerald Krause
 *
 *
 */

//Module declaration
jQuery.sap.declare("sap.ushell.components.tiles.indicatorTileUtils.oData4Analytics");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained


/* this is poor codinga according to eslint */
/*eslint-disable no-cond-assign*/
/*eslint-disable no-redeclare*/
/*eslint-disable no-nested-ternary*/

/*
 * try { if (typeof sap.ui.model.odata.ODataModel === "undefined") throw "SAP
 * UI5 library not present. Load it beforehand to avoid this error"; } catch
 * (error) { throw "SAP UI5 library not present. Load it beforehand to avoid
 * this error"; }
 */
sap = sap || {};
sap.ushell = sap.ushell || {};
sap.ushell.components = sap.ushell.components || {};
sap.ushell.components.tiles.indicatorTileUtils = sap.ushell.components.tiles.indicatorTileUtils || {};
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics = sap.ushell.components.tiles.indicatorTileUtils.odata4analytics || {};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.constants = {};
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.constants["SAP_NAMESPACE"] = "http://www.sap.com/Protocols/SAPData";
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.constants["VERSION"] = "0.7";

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.helper = {
        renderPropertyKeyValue : function(sFilterValue, sPropertyEDMTypeName) {
            if (sFilterValue.charAt(0) == "'") {
                throw "Illegal property value starting with a quote";
            }
            switch (sPropertyEDMTypeName) {
            case 'Edm.String':
                return "'" + sFilterValue + "'";
            case 'Edm.DateTime':
                return "datetime'" + sFilterValue + "'";
            case 'Edm.Guid':
                return "guid'" + sFilterValue + "'";
            case 'Edm.Time':
                return "time'" + sFilterValue + "'";
            case 'Edm.DateTimeOffset':
                return "datetimeoffset'" + sFilterValue + "'";
            default:
                return sFilterValue;
            }
        },
        renderPropertyFilterValue : function(sFilterValue, sPropertyEDMTypeName) {
            if (sFilterValue.charAt(0) == "'") {
                throw "Illegal property value starting with a quote";
            }
            switch (sPropertyEDMTypeName) {
            case 'Edm.String':
                return "'" + sFilterValue + "'";
            case 'Edm.DateTime':
                return "datetime'" + sFilterValue + "'";
            case 'Edm.Guid':
                return "guid'" + sFilterValue + "'";
            case 'Edm.Time':
                return "time'" + sFilterValue + "'";
            case 'Edm.DateTimeOffset':
                return "datetimeoffset'" + sFilterValue + "'";
            default:
                return sFilterValue;
            }
        },
        tokenizeNametoLabelText : function(sName) {
            var sLabel = "";

            // split UpperCamelCase in words (treat numbers and _ as upper case)
            sLabel = sName.replace(/([^A-Z0-9_]+)([A-Z0-9_])/g, "$1 $2");
            // split acronyms in words
            sLabel = sLabel.replace(/([A-Z0-9_]{2,})([A-Z0-9_])([^A-Z0-9_]+)/g, "$1 $2$3");
            // remove trailing _E
            sLabel = sLabel.replace(/(.*) _E$/, "$1");
            // remove underscores that were identified as upper case
            sLabel = sLabel.replace(/(.*) _(.*)/g, "$1 $2");
            return sLabel;
        }
};

/**
 * Create a representation of the analytical semantics of OData service metadata
 *
 * @param {object}
 *            oModelReference An instance of ReferenceByURI, ReferenceByModel or
 *            ReferenceWithWorkaround for locating the OData service.
 * @param {string}
 *            sAnnotationJSONDoc A JSON document providing extra annotations to
 *            the elements of the structure of the given service
 * @constructor
 *
 * @class Representation of an OData model with analytical annotations defined
 *        by OData4SAP.
 *
 */

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Model = function(oModelReference, sAnnotationJSONDoc) {
    this._init(oModelReference, sAnnotationJSONDoc);
};

/**
 * Create a reference to an OData model by the URI of the related OData service.
 *
 * @param {string}
 *            sURI holding the URI.
 * @constructor
 *
 * @class Handle to an OData model by the URI pointing to it.
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Model.ReferenceByURI = function(sURI) {
    return {
        sServiceURI : sURI
    };
};

/**
 * Create a reference to an OData model already loaded elsewhere with the help
 * of SAP UI5.
 *
 * @param {object}
 *            oModel holding the OData model.
 * @constructor
 *
 * @class Handle to an already instantiated SAP UI5 OData model.
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Model.ReferenceByModel = function(oModel) {
    return {
        oModel : oModel
    };
};

/**
 * Create a reference to an OData model having certain workarounds activated. A
 * workaround is an implementation that changes the standard behavior of the API
 * to overcome some gap or limitation in the OData provider. The workaround
 * implementation can be conditionally activated by passing the identifier in
 * the contructor.
 *
 * Known workaround identifiers are:
 *
 * <li>"CreateLabelsFromTechnicalNames" - If a property has no label text, it
 * gets generated from the property name.</li>
 *
 * <li>"IdentifyTextPropertiesByName" -If a dimension property has no text and
 * another property with the same name and an appended "Name", "Text" etc. exists, they are linked via annotation.</li>
 *
 *
 * @param {object}
 *            oModelReference holding a reference to the OData model, obtained
 *            by sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Model.ReferenceByModel or by
 *            sap.odata4analytics.Model.ReferenceByURI.
 * @param {array(string)}
 *            aWorkaroundID listing all workarounds to be applied.
 * @constructor
 *
 * @class Handle to an already instantiated SAP UI5 OData model.
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Model.ReferenceWithWorkaround = function(oModel, aWorkaroundID) {
    return {
        oModelReference : oModel,
        aWorkaroundID : aWorkaroundID
    };
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Model.prototype = {

        /**
         * initialize a new object
         *
         * @private
         */
        _init : function(oModelReference, sAnnotationJSONDoc) {

            /*
             * get access to OData model
             */

            this._oActivatedWorkarounds = {};

            if (oModelReference && oModelReference.aWorkaroundID) {
                var aWorkaroundID = oModelReference.aWorkaroundID;

                for (var i = 0; i < aWorkaroundID.length; i++) {
                    this._oActivatedWorkarounds[aWorkaroundID[i]] = true;
                }

                oModelReference = oModelReference.oModelReference;
            }

            // check proper usage
            if (!oModelReference || (!oModelReference.sServiceURI && !oModelReference.oModel)) {
                throw "Usage with oModelReference being an instance of Model.ReferenceByURI or Model.ReferenceByModel";
            }

            if (oModelReference.oModel) {
                this._oModel = oModelReference.oModel;
            } else {
                this._oModel = new sap.ui.model.odata.ODataModel(oModelReference.sServiceURI);
            }

            if (this._oModel.getServiceMetadata().dataServices == undefined) {
                throw "Model could not be loaded";
            }

            /*
             * add extra annotations if provided
             */
            this.mergeV2Annotations(sAnnotationJSONDoc);

            /*
             * parse OData model for analytic queries
             */

            this._oQueryResultSet = {};
            this._oParameterizationSet = {};
            this._oEntityTypeSet = {};
            this._oEntitySetSet = {};
            this._oEntityTypeNameToEntitySetMap = {};

            // loop over all schemas and entity containers
            // TODO: extend this implementation to support many schemas
            var oSchema = this._oModel.getServiceMetadata().dataServices.schema[0];

            // remember default container
            for ( var i = -1, oContainer; oContainer = oSchema.entityContainer[++i];) {
                if (oContainer.isDefaultEntityContainer == "true") {
                    this._oDefaultEntityContainer = oContainer;
                    break;
                }
            }

            var aEntityType = oSchema.entityType;

            // A. preparation

            // A.1 collect all relevant OData entity types representing query
            // results,
            // parameters
            var aQueryResultEntityTypes = [], aParameterEntityTypes = [], aUnsortedEntityTypes = [];

            for ( var i = -1, oType; oType = aEntityType[++i];) {
                var bProcessed = false;

                if (oType.extensions != undefined) {
                    for ( var j = -1, oExtension; oExtension = oType.extensions[++j];) {
                        if (oExtension.namespace == sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.constants.SAP_NAMESPACE
                                && oExtension.name == "semantics") {
                            bProcessed = true;
                            switch (oExtension.value) {
                            case "aggregate":
                                aQueryResultEntityTypes.push(oType);
                                break;
                            case "parameters":
                                aParameterEntityTypes.push(oType);
                                break;
                            default:
                                aUnsortedEntityTypes.push(oType);
                            }
                        }
                        if (bProcessed) {
                            continue;
                        }
                    }
                    if (!bProcessed) {
                        aUnsortedEntityTypes.push(oType);
                    }
                } else {
                    aUnsortedEntityTypes.push(oType);
                }
            }
            // A.2 create entity type representations for the unsorted types
            for ( var i = -1, oType; oType = aUnsortedEntityTypes[++i];) {
                var oEntityType = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntityType(this._oModel
                        .getServiceMetadata(), oSchema, oType);
                this._oEntityTypeSet[oEntityType.getQName()] = oEntityType;
                var aEntitySet = this._getEntitySetsOfType(oSchema, oEntityType.getQName());
                if (aEntitySet.length == 0) {
                    throw "Invalid consumption model: No entity set for entity type annotated with parameters semantics";
                }
                if (aEntitySet.length > 1) {
                    throw "Unsupported consumption model: More than one entity set for entity type annotated with parameters semantics";
                }
                var oEntitySet = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntitySet(this._oModel
                        .getServiceMetadata(), oSchema, aEntitySet[0][0], aEntitySet[0][1]);
                this._oEntitySetSet[oEntitySet.getQName()] = oEntitySet;
                this._oEntityTypeNameToEntitySetMap[oEntityType.getQName()] = oEntitySet;
            }

            // B. create objects for the analytical extensions of these entity types
            // B.1 create parameters

            // temporary storage for lookup of entity *types* annotated with
            // parameters semantics
            var oParameterizationEntityTypeSet = {};

            for ( var i = -1, oType; oType = aParameterEntityTypes[++i];) {
                // B.1.1 create object for OData entity type
                var oEntityType = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntityType(this._oModel
                        .getServiceMetadata(), oSchema, oType);
                this._oEntityTypeSet[oEntityType.getQName()] = oEntityType;
                // B.1.2 get sets with this type
                var aEntitySet = this._getEntitySetsOfType(oSchema, oEntityType.getQName());
                if (aEntitySet.length == 0) {
                    throw "Invalid consumption model: No entity set for entity type annotated with parameters semantics";
                }
                if (aEntitySet.length > 1) {
                    throw "Unsupported consumption model: More than one entity set for entity type annotated with parameters semantics";
                }

                // B.1.3 create object for OData entity set
                var oEntitySet = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntitySet(this._oModel
                        .getServiceMetadata(), oSchema, aEntitySet[0][0], aEntitySet[0][1]);
                this._oEntitySetSet[oEntitySet.getQName()] = oEntitySet;
                this._oEntityTypeNameToEntitySetMap[oEntityType.getQName()] = oEntitySet;

                // B.1.4 create object for parameters and related OData entity
                var oParameterization = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameterization(oEntityType,
                        oEntitySet);
                this._oParameterizationSet[oParameterization.getName()] = oParameterization;
                oParameterizationEntityTypeSet[oEntityType.getQName()] = oParameterization;

                // B.1.5 recognize all available parameter value helps
                var sParameterizationEntityTypeQTypeName = oEntityType.getQName();

                if (oSchema.association != undefined) {
                    for ( var j = -1, oAssoc; oAssoc = oSchema.association[++j];) {
                        // value help always established by a referential constraint
                        // on an association
                        if (oAssoc.referentialConstraint == undefined) {
                            continue;
                        }

                        var sParameterValueHelpEntityTypeQTypeName = null;

                        // B.1.5.1 relevant only if one end has same type as the
                        // given parameterization entity type
                        if (oAssoc.end[0].type == sParameterizationEntityTypeQTypeName
                                && oAssoc.end[0].multiplicity == "*"
                                    && oAssoc.end[1].multiplicity == "1") {
                            sParameterValueHelpEntityTypeQTypeName = oAssoc.end[1].type;

                        } else if (oAssoc.end[1].type == sParameterizationEntityTypeQTypeName
                                && oAssoc.end[1].multiplicity == "*"
                                    && oAssoc.end[0].multiplicity == "1") {
                            sParameterValueHelpEntityTypeQTypeName = oAssoc.end[0].type;
                        }
                        if (!sParameterValueHelpEntityTypeQTypeName) {
                            continue;
                        }

                        // B.1.5.2 check if the referential constraint declares a
                        // parameter property as dependent
                        if (oAssoc.referentialConstraint.dependent.propertyRef.length != 1) {
                            continue;
                        }
                        var oParameter = oParameterization.findParameterByName(oAssoc.referentialConstraint.dependent.propertyRef[0].name);
                        if (oParameter == null) {
                            continue;
                        }

                        // B.1.5.3 Register the recognized parameter value help
                        // entity type and set and link it to the parameter
                        var oValueListEntityType = this._oEntityTypeSet[sParameterValueHelpEntityTypeQTypeName];
                        var oValueListEntitySet = this._oEntityTypeNameToEntitySetMap[sParameterValueHelpEntityTypeQTypeName];
                        oParameter.setValueSetEntity(oValueListEntityType, oValueListEntitySet);
                    }
                }
            }

            // B.2
            // B.2 create analytic queries
            for ( var i = -1, oType; oType = aQueryResultEntityTypes[++i];) {

                // B.2.1 create object for OData entity
                var oEntityType = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntityType(this._oModel
                        .getServiceMetadata(), oSchema, oType);
                this._oEntityTypeSet[oEntityType.getQName()] = oEntityType;
                var sQueryResultEntityTypeQTypeName = oEntityType.getQName();

                // B.2.2 find assocs to parameter entity types
                var oParameterization = null;
                var oAssocFromParamsToResult = null;

                if (oSchema.association != undefined) {
                    for ( var j = -1, oAssoc; oAssoc = oSchema.association[++j];) {
                        var sParameterEntityTypeQTypeName = null;
                        if (oAssoc.end[0].type == sQueryResultEntityTypeQTypeName) {
                            sParameterEntityTypeQTypeName = oAssoc.end[1].type;
                        } else if (oAssoc.end[1].type == sQueryResultEntityTypeQTypeName) {
                            sParameterEntityTypeQTypeName = oAssoc.end[0].type;
                        } else {
                            continue;
                        }

                        // B.2.2.2 fetch Parameterization object if any
                        var oMatchingParameterization = null;

                        oMatchingParameterization = oParameterizationEntityTypeSet[sParameterEntityTypeQTypeName];
                        if (oMatchingParameterization != null) {
                            if (oParameterization != null) {
                                // TODO: extend this implementation to support more
                                // than
                                // one related parameter entity type
                                throw "LIMITATION: Unable to handle multiple parameter entity types of query entity "
                                + oEntityType.name;
                            } else {
                                oParameterization = oMatchingParameterization;
                                oAssocFromParamsToResult = oAssoc;
                            }
                        }
                    }
                }

                // B.2.3 get sets with this type
                var aEntitySet = this._getEntitySetsOfType(oSchema, oEntityType.getQName());
                if (aEntitySet.length != 1) {
                    throw "Invalid consumption model: There must be exactly one entity set for an entity type annotated with aggregating semantics";
                }

                // B.2.4 create object for OData entity set of analytic query result
                var oEntitySet = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntitySet(this._oModel
                        .getServiceMetadata(), oSchema, aEntitySet[0][0], aEntitySet[0][1]);
                this._oEntitySetSet[oEntitySet.getQName()] = oEntitySet;
                this._oEntityTypeNameToEntitySetMap[oEntityType.getQName()] = oEntitySet;

                // B.2.5 create object for analytic query result, related OData
                // entity type and set and
                // (if any) related parameters object
                var oQueryResult = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.QueryResult(this, oEntityType,
                        oEntitySet, oParameterization);
                this._oQueryResultSet[oQueryResult.getName()] = oQueryResult;

                // B.2.6 set target result for found parameterization
                if (oParameterization) {
                    oParameterization.setTargetQueryResult(oQueryResult, oAssocFromParamsToResult);
                }

            }

        },

        /*
         * Control data for adding extra annotations to service metadata
         *
         * @private
         */
        oUI5ODataModelAnnotatableObject : {
            objectName : "schema",
            keyPropName : "namespace",
            extensions : true,
            aSubObject : [ {
                objectName : "entityType",
                keyPropName : "name",
                extensions : true,
                aSubObject : [ {
                    objectName : "property",
                    keyPropName : "name",
                    aSubObject : [],
                    extensions : true
                } ]
            }, {
                objectName : "entityContainer",
                keyPropName : "name",
                extensions : false,
                aSubObject : [ {
                    objectName : "entitySet",
                    keyPropName : "name",
                    extensions : true,
                    aSubObject : []
                } ]
            } ]
        },

        /*
         * merging extra annotations with provided service metadata
         *
         * @private
         */
        mergeV2Annotations : function(sAnnotationJSONDoc) {
            try {
                var oAnnotation = JSON.parse(sAnnotationJSONDoc);
            } catch (exception) {
                return;
            }

            var oMetadata;
            try {
                oMetadata = this._oModel.getServiceMetadata().dataServices;
            } catch (exception) {
                return;
            }

            // find "schema" entry in annotation document
            for ( var propName in oAnnotation) {
                if (!(this.oUI5ODataModelAnnotatableObject.objectName == propName)) {
                    continue;
                }
                if (!(oAnnotation[propName] instanceof Array)) {
                    continue;
                }
                this.mergeV2AnnotationLevel(oMetadata[this.oUI5ODataModelAnnotatableObject.objectName],
                        oAnnotation[this.oUI5ODataModelAnnotatableObject.objectName],
                        this.oUI5ODataModelAnnotatableObject);
                break;
            }

            return;
        },

        /*
         * merging extra annotations with agiven service metadata object
         *
         * @private
         */

        mergeV2AnnotationLevel : function(aMetadata, aAnnotation, oUI5ODataModelAnnotatableObject) {

            for ( var i = -1, oAnnotation; oAnnotation = aAnnotation[++i];) {
                for ( var j = -1, oMetadata; oMetadata = aMetadata[++j];) {

                    if (!(oAnnotation[oUI5ODataModelAnnotatableObject.keyPropName] == oMetadata[oUI5ODataModelAnnotatableObject.keyPropName])) {
                        continue;
                    }
                    // found match:
                    // apply extensions from oAnnotation object to oMetadata object
                    if (oAnnotation["extensions"] != undefined) {
                        if (oMetadata["extensions"] == undefined) {
                            oMetadata["extensions"] = [];
                        }

                        for ( var l = -1, oAnnotationExtension; oAnnotationExtension = oAnnotation["extensions"][++l];) {
                            var bFound = false;
                            for ( var m = -1, oMetadataExtension; oMetadataExtension = oMetadata["extensions"][++m];) {
                                if (oAnnotationExtension.name == oMetadataExtension.name
                                        && oAnnotationExtension.namespace == oMetadataExtension.namespace) {
                                    oMetadataExtension.value = oAnnotationExtension.value;
                                    bFound = true;
                                    break;
                                }
                            }
                            if (!bFound) {
                                oMetadata["extensions"].push(oAnnotationExtension);
                            }
                        }
                    }
                    // walk down to sub objects
                    for ( var k = -1, oUI5ODataModelAnnotatableSubObject; oUI5ODataModelAnnotatableSubObject = oUI5ODataModelAnnotatableObject.aSubObject[++k];) {

                        for ( var propName in oAnnotation) {
                            if (!(oUI5ODataModelAnnotatableSubObject.objectName == propName)) {
                                continue;
                            }
                            if (!(oAnnotation[oUI5ODataModelAnnotatableSubObject.objectName] instanceof Array)) {
                                continue;
                            }
                            if ((oMetadata[oUI5ODataModelAnnotatableSubObject.objectName] == undefined)
                                    || (!(oMetadata[oUI5ODataModelAnnotatableSubObject.objectName] instanceof Array))) {
                                continue;
                            }
                            this.mergeV2AnnotationLevel(
                                    oMetadata[oUI5ODataModelAnnotatableSubObject.objectName],
                                    oAnnotation[oUI5ODataModelAnnotatableSubObject.objectName],
                                    oUI5ODataModelAnnotatableSubObject);
                            break;
                        }
                    }
                }
            }
            return;
        },

        /**
         * Find analytic query result by name
         *
         * @param {string}
         *            sName Fully qualified name of query result entity set
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.QueryResult} The query result object
         *          with this name or null if it does not exist
         */
        findQueryResultByName : function(sName) {
            var oQueryResult = this._oQueryResultSet[sName];

            // Everybody should have a second chance:
            // If the name was not fully qualified, check if it is in the default
            // container
            if (!oQueryResult && this._oDefaultEntityContainer) {
                var sQName = this._oDefaultEntityContainer.name + "." + sName;

                oQueryResult = this._oQueryResultSet[sQName];
            }
            return oQueryResult;
        },

        /**
         * Get the names of all query results (entity sets) offered by the model
         *
         * @returns {array(string)} List of all query result names
         */
        getAllQueryResultNames : function() {
            if (this._aQueryResultNames) {
                return this._aQueryResultNames;
            }

            this._aQueryResultNames = new Array(0);

            for ( var sName in this._oQueryResultSet)
                this._aQueryResultNames.push(this._oQueryResultSet[sName].getName());

            return this._aQueryResultNames;
        },

        /**
         * Get all query results offered by the model
         *
         * @returns {object} An object with individual JS properties for each query
         *          result included in the model. The JS object properties all are
         *          objects of type sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.QueryResult. The names
         *          of the JS object properties are given by the entity set names
         *          representing the query results.
         */
        getAllQueryResults : function() {
            return this._oQueryResultSet;
        },

        /**
         * Get underlying OData model provided by SAP UI5
         *
         * @returns {object} The SAP UI5 representation of the model.
         */
        getODataModel : function() {
            return this._oModel;
        },
        /**
         * Private methods
         */

        /**
         * Find entity sets of a given type
         *
         * @private
         */
        _getEntitySetsOfType : function(oSchema, sQTypeName) {
            var aEntitySet = [];

            for ( var i = -1, oEntityContainer; oEntityContainer = oSchema.entityContainer[++i];) {
                for ( var j = -1, oEntitySet; oEntitySet = oEntityContainer.entitySet[++j];) {
                    if (oEntitySet.entityType == sQTypeName) {
                        aEntitySet.push([ oEntityContainer, oEntitySet ]);
                    }
                }
            }

            return aEntitySet;
        },

        /**
         * Private member attributes
         */
        _oModel : null,
        _oDefaultEntityContainer : null,

        _aQueryResultNames : null,
        _oQueryResultSet : null,
        _oParameterizationSet : null,
        _oEntityTypeSet : null,
        _oEntitySetSet : null,
        _oEntityTypeNameToEntitySetMap : null,

        _oActivatedWorkarounds : null
};

/** ******************************************************************** */

/**
 * Create a representation of an analytic query
 *
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Model}
 *            oModel The analytical model containing this query result entity
 *            set
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntityType}
 *            oEntityType The OData entity type for this query
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntitySet}
 *            oEntitySet The OData entity set for this query offered by the
 *            OData service
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameterization}
 *            oParameterization The parameterization of this query, if any
 *
 * @constructor
 * @this (QueryResult)
 *
 *
 * @class Representation of an entity type annotated with
 *        sap:semantics="aggregate".
 *
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.QueryResult = function(oModel, oEntityType, oEntitySet, oParameterization) {
    this._init(oModel, oEntityType, oEntitySet, oParameterization);
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.QueryResult.prototype = {

        /**
         * initialize new object
         *
         * @private
         */
        _init : function(oModel, oEntityType, oEntitySet, oParameterization, oAssocFromParamsToResult) {
            this._oModel = oModel;
            this._oEntityType = oEntityType;
            this._oEntitySet = oEntitySet;
            this._oParameterization = oParameterization;

            this._oDimensionSet = {};
            this._oMeasureSet = {};

            // parse entity type for analytic semantics described by annotations
            var aProperty = oEntityType.getTypeDescription().property;
            var oAttributeForPropertySet = {};
            for ( var i = -1, oProperty; oProperty = aProperty[++i];) {
                if (oProperty.extensions == undefined) {
                    continue;
                }
                for ( var j = -1, oExtension; oExtension = oProperty.extensions[++j];) {

                    if (!oExtension.namespace == sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.constants.SAP_NAMESPACE) {
                        continue;
                    }

                    switch (oExtension.name) {
                    case "aggregation-role":
                        switch (oExtension.value) {
                        case "dimension":
                            var oDimension = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Dimension(this, oProperty);
                            this._oDimensionSet[oDimension.getName()] = oDimension;
                            break;
                        case "measure":
                            var oMeasure = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Measure(this, oProperty);
                            this._oMeasureSet[oMeasure.getName()] = oMeasure;
                            break;
                        case "totaled-properties-list":
                            this._oTotaledPropertyListProperty = oProperty;
                            break;
                        }
                        break;
                    case "attribute-for":
                        var oDimensionAttribute = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.DimensionAttribute(this,
                                oProperty);
                        oAttributeForPropertySet[oDimensionAttribute.getKeyProperty()] = oDimensionAttribute;
                        break;
                    }
                }
            }

            // assign dimension attributes to the respective dimension objects
            for ( var sDimensionAttributeName in oAttributeForPropertySet) {
                var oDimensionAttribute = oAttributeForPropertySet[sDimensionAttributeName];
                oDimensionAttribute.getDimension().addAttribute(oDimensionAttribute);
            }

            // apply workaround for missing text properties if requested
            if (oModel._oActivatedWorkarounds.IdentifyTextPropertiesByName) {
                var aMatchedTextPropertyName = [];
                for ( var oDimName in this._oDimensionSet) {
                    var oDimension = this._oDimensionSet[oDimName];
                    if (!oDimension.getTextProperty()) {
                        var oTextProperty = null; // order of matching is
                        // significant!
                        oTextProperty = oEntityType.findPropertyByName(oDimName + "Name");
                        if (!oTextProperty) {
                            oTextProperty = oEntityType.findPropertyByName(oDimName + "Text");
                        }
                        if (!oTextProperty) {
                            oTextProperty = oEntityType.findPropertyByName(oDimName + "Desc");
                        }
                        if (!oTextProperty) {
                            oTextProperty = oEntityType.findPropertyByName(oDimName + "Description");
                        }
                        if (oTextProperty) { // any match?
                            oDimension.setTextProperty(oTextProperty); // link
                            // dimension
                            // with text
                            // property
                            aMatchedTextPropertyName.push(oTextProperty.name);
                        }
                    }
                }
                // make sure that any matched text property is not exposed as
                // dimension (according to spec)
                for ( var i = -1, sPropertyName; sPropertyName = aMatchedTextPropertyName[++i];) {
                    delete this._oDimensionSet[sPropertyName];
                }
            }
        },

        /**
         * Get the name of the query result
         *
         * @returns {string} The fully qualified name of the parameter
         */
        getName : function() {
            return this.getEntitySet().getQName();
        },

        /**
         * Get the parameterization of this query result
         *
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameterization} The object for the
         *          parameterization or null if the query result is not
         *          parameterized
         */
        getParameterization : function() {
            return this._oParameterization;
        },

        /**
         * Get the names of all dimensions included in the query result
         *
         * @returns {array(string)} List of all dimension names
         */
        getAllDimensionNames : function() {
            if (this._aDimensionNames) {
                return this._aDimensionNames;
            }

            this._aDimensionNames = [];

            for ( var sName in this._oDimensionSet)
                this._aDimensionNames.push(this._oDimensionSet[sName].getName());

            return this._aDimensionNames;
        },

        /**
         * Get all dimensions included in this query result
         *
         * @returns {object} An object with individual JS properties for each
         *          dimension included in the query result. The JS object properties
         *          all are objects of type sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Dimension. The
         *          names of the JS object properties are given by the OData entity
         *          type property names representing the dimension keys.
         */
        getAllDimensions : function() {
            return this._oDimensionSet;
        },

        /**
         * Get the names of all measures included in the query result
         *
         * @returns {array(string)} List of all measure names
         */
        getAllMeasureNames : function() {
            if (this._aMeasureNames) {
                return this._aMeasureNames;
            }

            this._aMeasureNames = [];

            for ( var sName in this._oMeasureSet)
                this._aMeasureNames.push(this._oMeasureSet[sName].getName());

            return this._aMeasureNames;
        },

        /**
         * Get all measures included in this query result
         *
         * @returns {object} An object with individual JS properties for each
         *          measure included in the query result. The JS object properties
         *          all are objects of type sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Measure. The
         *          names of the JS object properties are given by the OData entity
         *          type property names representing the measure raw values.
         */
        getAllMeasures : function() {
            return this._oMeasureSet;
        },

        /**
         * Find dimension by name
         *
         * @param {string}
         *            sName Dimension name
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Dimension} The dimension object with
         *          this name or null if it does not exist
         */
        findDimensionByName : function(sName) {
            return this._oDimensionSet[sName];
        },

        /**
         * Get property holding the totaled property list
         *
         * @returns {object} The DataJS object representing this property
         */
        getTotaledPropertiesListProperty : function() {
            return this._oTotaledPropertyListProperty;
        },

        /**
         * Find measure by name
         *
         * @param {string}
         *            sName Measure name
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Dimension} The measure object with this
         *          name or null if it does not exist
         */
        findMeasureByName : function(sName) {
            return this._oMeasureSet[sName];
        },

        /**
         * Get the analytical model containing the entity set for this query result
         *
         * @returns {object} The analytical representation of the OData model
         */
        getModel : function() {
            return this._oModel;
        },

        getEntityType : function() {
            return this._oEntityType;
        },

        getEntitySet : function() {
            return this._oEntitySet;
        },

        /**
         * Private member attributes
         */

        _oModel : null,
        _oEntityType : null,
        _oEntitySet : null,
        _oParameterization : null,
        _aDimensionNames : null,
        _oDimensionSet : null,
        _aMeasureNames : null,
        _oMeasureSet : null,
        _oTotaledPropertyListProperty : null
};

/** ******************************************************************** */

/**
 * Create a representation of a parameterization for an analytic query
 *
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntityType}
 *            oEntityType The OData entity type for this parameterization
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntitySet}
 *            oEntitySet The OData entity set for this parameterization offered
 *            by the OData service
 *
 * @class Representation of an entity type annotated with
 *        sap:semantics="parameters".
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameterization = function(oEntityType, oEntitySet) {
    this._init(oEntityType, oEntitySet);
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameterization.prototype = {
        /**
         * @private
         */
        _init : function(oEntityType, oEntitySet) {
            this._oEntityType = oEntityType;
            this._oEntitySet = oEntitySet;

            this._oParameterSet = {};

            // parse entity type for analytic semantics described by annotations
            var aProperty = oEntityType.getTypeDescription().property;
            for ( var i = -1, oProperty; oProperty = aProperty[++i];) {
                if (oProperty.extensions == undefined) {
                    continue;
                }

                for ( var j = -1, oExtension; oExtension = oProperty.extensions[++j];) {

                    if (!oExtension.namespace == sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.constants.SAP_NAMESPACE) {
                        continue;
                    }

                    switch (oExtension.name) {
                    // process parameter semantics
                    case "parameter":
                        var oParameter = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameter(this, oProperty);
                        this._oParameterSet[oParameter.getName()] = oParameter;

                        break;
                    }
                }
            }

        },

        // to be called only by Model objects
        setTargetQueryResult : function(oQueryResult, oAssociation) {
            this._oQueryResult = oQueryResult;
            var sQAssocName = this._oEntityType.getSchema().namespace + "." + oAssociation.name;
            var aNavProp = this._oEntityType.getTypeDescription().navigationProperty;
            if (!aNavProp) {
                throw "Invalid consumption model: Parameters entity type lacks navigation property for association to query result entity type";
            }
            for ( var i = -1, oNavProp; oNavProp = aNavProp[++i];) {
                if (oNavProp.relationship == sQAssocName) {
                    this._oNavPropToQueryResult = oNavProp.name;
                }
            }
            if (!this._oNavPropToQueryResult) {
                throw "Invalid consumption model: Parameters entity type lacks navigation property for association to query result entity type";
            }
        },

        /**
         * Get the name of the parameter
         *
         * @returns {string} The name of the parameter
         */
        getName : function() {
            return this.getEntitySet().getQName();
        },

        /**
         * Get the names of all parameters part of the parameterization
         *
         * @returns {array(string)} List of all parameter names
         */
        getAllParameterNames : function() {
            if (this._aParameterNames) {
                return this._aParameterNames;
            }

            this._aParameterNames = [];

            for ( var sName in this._oParameterSet)
                this._aParameterNames.push(this._oParameterSet[sName].getName());

            return this._aParameterNames;
        },

        /**
         * Get all parameters included in this parameterization
         *
         * @returns {object} An object with individual JS properties for each
         *          parameter included in the query result. The JS object properties
         *          all are objects of type sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameter. The
         *          names of the JS object properties are given by the OData entity
         *          type property names representing the parameter keys.
         */
        getAllParameters : function() {
            return this._oParameterSet;
        },

        /**
         * Find parameter by name
         *
         * @param {string}
         *            sName Parameter name
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameter} The parameter object with
         *          this name or null if it does not exist
         */
        findParameterByName : function(sName) {
            return this._oParameterSet[sName];
        },

        /**
         * Get navigation property to query result
         *
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.QueryResult} The parameter object with
         *          this name or null if it does not exist
         */
        getNavigationPropertyToQueryResult : function() {
            return this._oNavPropToQueryResult;
        },

        getEntityType : function() {
            return this._oEntityType;
        },

        getEntitySet : function() {
            return this._oEntitySet;
        },

        /**
         * Private member attributes
         */
        _oEntityType : null,
        _oEntitySet : null,
        _oQueryResult : null,
        _oNavPropToQueryResult : null,
        _aParameterNames : null,
        _oParameterSet : null
};

/** ******************************************************************** */

/**
 * Create a representation of a single parameter contained in a parameterization
 *
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameterization}
 *            oParameterization The parameterization containing this parameter
 * @param {object}
 *            oProperty The DataJS object object representing the text property
 *
 * @constructor
 *
 * @class Representation of a property annotated with sap:parameter.
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameter = function(oParameterization, oProperty) {
    this._init(oParameterization, oProperty);
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameter.prototype = {
        /**
         * @private
         */
        _init : function(oParameterization, oProperty) {
            this._oParameterization = oParameterization;
            this._oProperty = oProperty;

            var oEntityType = oParameterization.getEntityType();

            if (oProperty.extensions != undefined) {
                for ( var i = -1, oExtension; oExtension = oProperty.extensions[++i];) {

                    if (!oExtension.namespace == sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.constants.SAP_NAMESPACE) {
                        continue;
                    }

                    switch (oExtension.name) {
                    case "parameter":
                        switch (oExtension.value) {
                        case "mandatory":
                            this._bRequired = true;
                            break;
                        case "optional":
                            this._bRequired = false;
                            break;
                        default:
                            throw "Invalid annotation value for parameter property";
                        }
                        break;
                    case "label":
                        this._sLabelText = oExtension.value;
                        break;
                    case "text":
                        this._oTextProperty = oEntityType.findPropertyByName(oExtension.value);
                        break;
                    case "upper-boundary":
                        this._bIntervalBoundaryParameter = true;
                        this._oUpperIntervalBoundaryParameterProperty = oEntityType
                        .findPropertyByName(oExtension.value);
                        break;
                    case "lower-boundary":
                        this._bIntervalBoundaryParameter = true;
                        this._oLowerIntervalBoundaryParameterProperty = oEntityType
                        .findPropertyByName(oExtension.value);
                        break;
                    }
                }
            }
            if (!this._sLabelText) {
                this._sLabelText = "";
            }
        },

        // to be called only by Model objects
        setValueSetEntity : function(oEntityType, oEntitySet) {
            this._oValueSetEntityType = oEntityType;
            this._oValueSetEntitySet = oEntitySet;
        },

        /**
         * Get text property related to this parameter
         *
         * @returns {object} The DataJS object representing the text property or
         *          null if it does not exist
         */
        getTextProperty : function() {
            return this._oTextProperty;
        },

        /**
         * Get label
         *
         * @returns {string} The (possibly language-dependent) label text for this
         *          parameter
         */
        getLabelText : function() {
            if (!this._sLabelText && this._oQueryResult._oModel._oActivatedWorkarounds.CreateLabelsFromTechnicalNames) {
                this._sLabelText = sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.helper.tokenizeNametoLabelText(this .getName());
            }
            return this._sLabelText;
        },

        /**
         * Get indicator whether or not the parameter is optional
         *
         * @returns {boolean} True iff the parameter is optional
         */
        isOptional : function() {
            return (!this._bRequired);
        },

        /**
         * Get indicator if the parameter represents an interval boundary
         *
         * @returns {boolean} True iff it represents an interval boundary, otherwise
         *          false
         */
        isIntervalBoundary : function() {
            return this._bIntervalBoundaryParameter;
        },

        /**
         * Get indicator if the parameter represents the lower boundary of an
         * interval
         *
         * @returns {boolean} True iff it represents the lower boundary of an
         *          interval, otherwise false
         */
        isLowerIntervalBoundary : function() {
            return (this._oUpperIntervalBoundaryParameterProperty ? true : false);
        },

        /**
         * Get property for the parameter representing the peer boundary of the same
         * interval
         *
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameter} The parameter representing
         *          the peer boundary of the same interval. This means that if
         *          *this* parameter is a lower boundary, the returned object
         */
        getPeerIntervalBoundaryParameter : function() {
            var sPeerParamPropName = null;
            if (this._oLowerIntervalBoundaryParameterProperty) {
                sPeerParamPropName = this._oLowerIntervalBoundaryParameterProperty.name;
            } else {
                sPeerParamPropName = this._oUpperIntervalBoundaryParameterProperty.name;
            }

            if (!sPeerParamPropName) {
                throw "Parameter is not an interval boundary";
            }
            return this._oParameterization.findParameterByName(sPeerParamPropName);
        },

        /**
         * Get indicator if a set of values is available for this parameter.
         * Typically, this is true for parameters with a finite set of known values
         * such as products, business partners in different roles, organization
         * units, and false for integer or date parameters
         *
         * @returns {boolean} True iff a value set is available, otherwise false
         */
        isValueSetAvailable : function() {
            return (this._oValueSetEntityType ? true : false);
        },

        /**
         * Get the name of the parameter
         *
         * @returns {string} The name of the parameter
         */
        getName : function() {
            return this._oProperty.name;
        },

        /**
         * Get property
         *
         * @returns {object} The DataJS object representing the property of this
         *          parameter
         */
        getProperty : function() {
            return this._oProperty;
        },

        /**
         * Get parameterization containing this parameter
         *
         * @return {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameterization} The parameterization
         *         object
         */
        getContainingParameterization : function() {
            return this._oParameterization;
        },

        /**
         * Get the URI to locate the entity set holding the value set, if it is
         * available.
         *
         * @param {String}
         *            sServiceRootURI (optional) Identifies the root of the OData
         *            service
         * @returns The resource path of the URI pointing to the entity set. It is a
         *          relative URI unless a service root is given, which would then
         *          prefixed in order to return a complete URL.
         */
        getURIToValueEntitySet : function(sServiceRootURI) {
            var sURI = null;
            sURI = (sServiceRootURI ? sServiceRootURI : "") + "/" + this._oValueSetEntitySet.getQName();
            return sURI;
        },

        /**
         * Private member attributes
         */
        _oParameterization : null,
        _oProperty : null,
        _sLabelText : null,
        _oTextProperty : null,
        _bRequired : false,
        _bIntervalBoundaryParameter : false,
        _oLowerIntervalBoundaryParameterProperty : null,
        _oUpperIntervalBoundaryParameterProperty : null,

        _oValueSetEntityType : null,
        _oValueSetEntitySet : null
};

/** ******************************************************************** */

/**
 * Create a representation of a dimension provided by an analytic query
 *
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.QueryResult}
 *            oQueryResult The query result containing this dimension
 * @param {object}
 *            oProperty The DataJS object object representing the dimension
 *
 * @constructor
 *
 * @class Representation of a property annotated with
 *        sap:aggregation-role="dimension".
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Dimension = function(oQueryResult, oProperty) {
    this._init(oQueryResult, oProperty);
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Dimension.prototype = {
        _init : function(oQueryResult, oProperty) {
            this._oQueryResult = oQueryResult;
            this._oProperty = oProperty;

            this._oAttributeSet = {};

            if (oProperty.extensions != undefined) {

                for ( var i = -1, oExtension; oExtension = oProperty.extensions[++i];) {

                    if (!oExtension.namespace == sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.constants.SAP_NAMESPACE) {
                        continue;
                    }

                    switch (oExtension.name) {
                    case "label":
                        this._sLabelText = oExtension.value;
                        break;
                    case "text":
                        this._oTextProperty = oQueryResult.getEntityType().findPropertyByName(
                                oExtension.value);
                        break;
                    case "super-ordinate":
                        this._sSuperOrdinatePropertyName = oExtension.value;
                        break;
                    }
                }
            }
            if (!this._sLabelText) {
                this._sLabelText = "";
            }
        },

        /**
         * Get the name of the dimension
         *
         * @returns {string} The name of this dimension
         */
        getName : function() {
            return this._oProperty.name;
        },

        /**
         * Get the key property
         *
         * @returns {object} The DataJS object representing the property for the
         *          dimension key
         */
        getKeyProperty : function() {
            return this._oProperty;
        },

        /**
         * Get text property related to this dimension
         *
         * @returns {object} The DataJS object representing the text property or
         *          null if it does not exist
         */
        getTextProperty : function() {
            return this._oTextProperty;
        },

        /**
         * Set text property Relevant for workaround w/ID
         * IdentifyTextPropertiesByName
         *
         * @private
         */
        setTextProperty : function(oTextProperty) {
            this._oTextProperty = oTextProperty;
        },

        /**
         * Get label
         *
         * @returns {string} The (possibly language-dependent) label text for this
         *          dimension
         */
        getLabelText : function() {
            if (!this._sLabelText && this._oQueryResult._oModel._oActivatedWorkarounds.CreateLabelsFromTechnicalNames) {
                this._sLabelText = sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.helper.tokenizeNametoLabelText(this.getName());
            }
            return this._sLabelText;
        },

        /**
         * Get super-ordinate dimension
         *
         * @returns {object} The super-ordinate dimension or null if there is none
         */
        getSuperOrdinateDimension : function() {
            if (!this._sSuperOrdinatePropertyName) {
                return null;
            }
            return this._oQueryResult.findDimensionByName(this._sSuperOrdinatePropertyName);
        },

        /**
         * Get associated hierarchy
         *
         * @returns {object} The hierarchy object or null if there is none. It can
         *          be an instance of class
         *          sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.RecursiveHierarchy (TODO later: or a
         *          leveled hierarchy). Use methods isLeveledHierarchy and
         *          isRecursiveHierarchy to determine object type.
         */
        getHierarchy : function() {
            // set associated hierarchy if any
            if (!this._oHierarchy) {
                this._oHierarchy = this._oQueryResult.getEntityType().getHierarchy(this._oProperty.name);
            }

            return this._oHierarchy;
        },

        /**
         * Get the names of all dimensions included in the query result
         *
         * @returns {array(string)} List of all dimension names
         */
        getAllAttributeNames : function() {
            if (this._aAttributeNames) {
                return this._aAttributeNames;
            }

            this._aAttributeNames = [];

            for ( var sName in this._oAttributeSet)
                this._aAttributeNames.push(this._oAttributeSet[sName].getName());

            return this._aAttributeNames;
        },

        /**
         * Get all attributes of this dimensions
         *
         * @returns {object} An object with individual JS properties for each
         *          attribute of this dimension. The JS object properties all are
         *          objects of type sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.DimensionAttribute. The
         *          names of the JS object properties are given by the OData entity
         *          type property names representing the dimension attribute keys.
         */
        getAllAttributes : function() {
            return this._oAttributeSet;
        },

        /**
         * Find attribute by name
         *
         * @param {string}
         *            sName Attribute name
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Dimension} The dimension attribute
         *          object with this name or null if it does not exist
         */
        findAttributeByName : function(sName) {
            return this._oAttributeSet[sName];
        },

        // to be called only by QueryResult objects
        addAttribute : function(oDimensionAttribute) {
            this._oAttributeSet[oDimensionAttribute.getName()] = oDimensionAttribute;
        },

        /**
         * Get query result containing this parameter
         *
         * @return {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.QueryResult} The query result object
         */
        getContainingQueryResult : function() {
            return this._oQueryResult;
        },

        /**
         * Private member attributes
         */
        _oQueryResult : null,
        _oProperty : null,

        _oTextProperty : null,
        _sLabelText : null,
        _sSuperOrdinatePropertyName : null,
        _aAttributeNames : null,
        _oAttributeSet : null,

        _oHierarchy : null
};

/** ******************************************************************** */

/**
 * Create a representation of a dimension attribute provided by an analytic
 * query
 *
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.QueryResult}
 *            oQueryResult The query result containing this dimension attribute
 * @param {object}
 *            oProperty The DataJS object object representing the dimension
 *            attribute
 *
 * @constructor
 *
 * @class Representation of a dimension attribute.
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.DimensionAttribute = function(oQueryResult, oProperty) {
    this._init(oQueryResult, oProperty);
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.DimensionAttribute.prototype = {
        /**
         * @private
         */
        _init : function(oQueryResult, oProperty) {
            this._oQueryResult = oQueryResult;
            this._oProperty = oProperty;

            if (oProperty.extensions != undefined) {

                for ( var i = -1, oExtension; oExtension = oProperty.extensions[++i];) {

                    if (!oExtension.namespace == sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.constants.SAP_NAMESPACE) {
                        continue;
                    }

                    switch (oExtension.name) {
                    case "attribute-for":
                        this._sDimensionName = oExtension.value;
                        break;
                    case "label":
                        this._sLabelText = oExtension.value;
                        break;
                    case "text":
                        this._oTextProperty = oQueryResult.getEntityType().findPropertyByName(
                                oExtension.value);
                        break;
                    }
                }
            }
        },

        /**
         * Get the name of the dimension attribute
         *
         * @returns {string} The name of the dimension attribute
         */
        getName : function() {
            return this._oProperty.name;
        },

        /**
         * Get the key property
         *
         * @returns {object} The DataJS object representing the property for the key
         *          of this dimension attribute
         */
        getKeyProperty : function() {
            return this._oProperty;
        },

        /**
         * Get text property related to this dimension attribute
         *
         * @returns {object} The DataJS object representing the text property or
         *          null if it does not exist
         */
        getTextProperty : function() {
            return this._oTextProperty;
        },

        /**
         * Get label
         *
         * @returns {string} The (possibly language-dependent) label text for this
         *          dimension attribute
         */
        getLabelText : function() {
            return this._sLabelText;
        },

        /**
         * Get dimension
         *
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Dimension} The dimension object
         *          containing this attribute
         */
        getDimension : function() {
            return this._oQueryResult.findDimensionByName(this._sDimensionName);
        },

        /**
         * Private member attributes
         */
        _oQueryResult : null,
        _oProperty : null,

        _oTextProperty : null,
        _sLabelText : null,
        _sDimensionName : null
};

/** ******************************************************************** */

/**
 * Create a representation of a measure provided by an analytic query
 *
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.QueryResult}
 *            oQueryResult The query result containing this measure
 * @param {object}
 *            oProperty The DataJS object object representing the measure
 *
 * @constructor
 *
 * @class Representation of a property annotated with
 *        sap:aggregation-role="measure".
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Measure = function(oQueryResult, oProperty) {
    this._init(oQueryResult, oProperty);
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Measure.prototype = {
        /**
         * @private
         */
        _init : function(oQueryResult, oProperty) {
            this._oQueryResult = oQueryResult;
            this._oProperty = oProperty;

            if (oProperty.extensions != undefined) {

                for ( var i = -1, oExtension; oExtension = oProperty.extensions[++i];) {

                    if (!oExtension.namespace == sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.constants.SAP_NAMESPACE) {
                        continue;
                    }

                    switch (oExtension.name) {
                    case "label":
                        this._sLabelText = oExtension.value;
                        break;
                    case "text":
                        this._oTextProperty = oQueryResult.getEntityType().findPropertyByName(
                                oExtension.value);
                        break;
                    case "unit":
                        this._oUnitProperty = oQueryResult.getEntityType().findPropertyByName(
                                oExtension.value);
                        break;
                    }
                }
            }
            if (!this._sLabelText) {
                this._sLabelText = "";
            }
        },

        /**
         * Get the name of the measure
         *
         * @returns {string} The name of the measure
         */
        getName : function() {
            return this._oProperty.name;
        },

        /**
         * Get the raw value property
         *
         * @returns {object} The DataJS object representing the property holding the
         *          raw value of this measure
         */
        getRawValueProperty : function() {
            return this._oProperty;
        },

        /**
         * Get the text property associated to the raw value property holding the
         * formatted value related to this measure
         *
         * @returns {object} The DataJS object representing the property holding the
         *          formatted value text of this measure or null if this measure
         *          does not have a unit
         */
        getFormattedValueProperty : function() {
            return this._oTextProperty;
        },

        /**
         * Get the unit property related to this dimension
         *
         * @returns {object} The DataJS object representing the unit property or
         *          null if this measure does not have a unit
         */
        getUnitProperty : function() {
            return this._oUnitProperty;
        },

        /**
         * Get label
         *
         * @returns {string} The (possibly language-dependent) label text for this
         *          measure
         */
        getLabelText : function() {
            return this._sLabelText;
        },

        /**
         * Private member attributes
         */
        _oQueryResult : null,
        _oProperty : null,

        _oTextProperty : null,
        _sLabelText : null,
        _oUnitProperty : null
};

/** ******************************************************************** */

/**
 * Create a representation of an OData entity set in the context of an analytic
 * query
 *
 * @param {object}
 *            oModel DataJS object for the OData model containing this entity
 *            set
 * @param {object}
 *            oSchema DataJS object for the schema surrounding the container of
 *            this entity set
 * @param {object}
 *            oContainer DataJS object for the container holding this entity set
 * @param {object}
 *            oEntitySet DataJS object for the entity set
 *
 * @constructor
 *
 * @class Representation of a OData entity set.
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntitySet = function(oModel, oSchema, oContainer, oEntitySet) {
    this._init(oModel, oSchema, oContainer, oEntitySet);
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntitySet.prototype = {
        /**
         * @private
         */
        _init : function(oModel, oSchema, oContainer, oEntitySet) {
            this._oEntitySet = oEntitySet;
            this._oContainer = oContainer;
            this._oSchema = oSchema;
            this._oModel = oModel;

            if (oSchema.entityContainer.length > 1) {
                this._sQName = oContainer.name + "." + oEntitySet.name;
            } else {
                // no need to disambiguate this for the simple case
                this._sQName = oEntitySet.name;
            }
        },

        /**
         * Get the fully qualified name for this entity type
         *
         * @returns {string} The fully qualified name
         */
        getQName : function() {
            return this._sQName;
        },

        /**
         * Get full description for this entity set
         *
         * @returns {object} The DataJS object representing the entity set
         */
        getSetDescription : function() {
            return this._oEntitySet;
        },

        getSchema : function() {
            return this._oSchema;
        },

        getModel : function() {
            return this._oModel;
        },

        /**
         * Private member attributes
         */

        _oEntitySet : null,
        _oContainer : null,
        _oSchema : null,
        _oModel : null,
        _sQName : null

};

/** ******************************************************************** */

/**
 * Create a representation of an OData entity type in the context of an analytic
 * query
 *
 * @param {object}
 *            oModel DataJS object for the OData model containing this entity
 *            type
 * @param {object}
 *            oSchema DataJS object for the schema containing this entity type
 * @param {object}
 *            oEntityType DataJS object for the entity type
 *
 * @constructor
 *
 * @class Representation of a OData entity type.
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntityType = function(oModel, oSchema, oEntityType) {
    this._init(oModel, oSchema, oEntityType);
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntityType.prototype = {
        /**
         * @private
         */
        _init : function(oModel, oSchema, oEntityType) {
            this._oEntityType = oEntityType;
            this._oSchema = oSchema;
            this._oModel = oModel;

            this._oPropertySet = {};
            this._aFilterablePropertyNames = [];
            this._aSortablePropertyNames = [];
            this._aRequiredFilterPropertyNames = [];

            this._sQName = oSchema.namespace + "." + oEntityType.name;

            /*
             * collect all hierarchies defined in this entity type
             */
            var oRecursiveHierarchies = {}; // temp for collecting all properties
            // participating in hierarchies
            var oRecursiveHierarchy = null;

            for ( var i = -1, oProperty; oProperty = oEntityType.property[++i];) {

                // by default, every property can be filtered
                this._aFilterablePropertyNames.push(oProperty.name);

                // by default, every property can be sorted
                this._aSortablePropertyNames.push(oProperty.name);

                if (oProperty.extensions == undefined) {
                    continue;
                }
                for ( var j = -1, oExtension; oExtension = oProperty.extensions[++j];) {

                    if (!oExtension.namespace == sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.constants.SAP_NAMESPACE) {
                        continue;
                    }

                    switch (oExtension.name) {
                    case "filterable":
                        if (oExtension.value == "false") {
                            this._aFilterablePropertyNames.pop(oProperty.name);
                        }
                        break;
                    case "sortable":
                        if (oExtension.value == "false") {
                            this._aSortablePropertyNames.pop(oProperty.name);
                        }
                        break;
                    case "required-filter":
                        if (oExtension.value == "true") {
                            this._aRequiredFilterPropertyNames.push(oProperty.name);
                        }
                        break;

                        // hierarchy annotations: build temporary set of
                        // hierarchy-node-id properties with relevant attributes
                    case "hierarchy-node-for":
                        if (!(oRecursiveHierarchy = oRecursiveHierarchies[oProperty.name])) {
                            oRecursiveHierarchy = oRecursiveHierarchies[oProperty.name] = {};
                        }
                        oRecursiveHierarchy.dimensionName = oExtension.value;
                        break;
                    case "hierarchy-parent-node-for":
                    case "hierarchy-parent-nod": // TODO workaround for GW bug
                        if (!(oRecursiveHierarchy = oRecursiveHierarchies[oExtension.value])) {
                            oRecursiveHierarchy = oRecursiveHierarchies[oExtension.value] = {};
                        }
                        oRecursiveHierarchy.parentNodeIDProperty = oProperty;
                        break;
                    case "hierarchy-level-for":
                        if (!(oRecursiveHierarchy = oRecursiveHierarchies[oExtension.value])) {
                            oRecursiveHierarchy = oRecursiveHierarchies[oExtension.value] = {};
                        }
                        oRecursiveHierarchy.levelProperty = oProperty;
                        break;
                    case "hierarchy-drill-state-for":
                    case "hierarchy-drill-stat": // TODO workaround for GW bug
                        if (!(oRecursiveHierarchy = oRecursiveHierarchies[oExtension.value])) {
                            oRecursiveHierarchy = oRecursiveHierarchies[oExtension.value] = {};
                        }
                        oRecursiveHierarchy.drillStateProperty = oProperty;
                        break;

                    }

                }

                // store property references for faster lookup
                this._oPropertySet[oProperty.name] = oProperty;
            }

            // post processing: set up hierarchy objects
            this._oRecursiveHierarchySet = {};
            for ( var hierNodeIDPropertyName in oRecursiveHierarchies) {
                var oHierarchy = oRecursiveHierarchies[hierNodeIDPropertyName];
                var oHierarchyNodeIDProperty = this._oPropertySet[hierNodeIDPropertyName];
                var oDimensionProperty = this._oPropertySet[oHierarchy.dimensionName];
                if (oDimensionProperty == null) {
                    // TODO temporary workaround for BW provider, which does not
                    // return it
                    // let dimension coincide with hierarchy node ID
                    oDimensionProperty = oHierarchyNodeIDProperty;
                }
                this._oRecursiveHierarchySet[oDimensionProperty.name] = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.RecursiveHierarchy(
                        oEntityType, oHierarchyNodeIDProperty, oHierarchy.parentNodeIDProperty,
                        oHierarchy.levelProperty, oDimensionProperty);
            }

        },

        /**
         * Find property by name
         *
         * @param {string}
         *            sName Property name
         * @returns {object} The DataJS object representing the property or null if
         *          it does not exist
         */
        findPropertyByName : function(sName) {
            return this._oPropertySet[sName];
        },

        /**
         * Get names of properties that can be filtered, that is they can be used in
         * $filter expressions
         *
         * @returns {array(string)} Array with names of properties that can be
         *          filtered.
         */
        getFilterablePropertyNames : function() {
            return this._aFilterablePropertyNames;
        },

        /**
         * Get names of properties that can be sorted, that is they can be used in
         * $orderby expressions
         *
         * @returns {array(string)} Array with names of properties that can be
         *          sorted.
         */
        getSortablePropertyNames : function() {
            return this._aSortablePropertyNames;
        },

        /**
         * Get names of properties that must be filtered, that is they must appear
         * in every $filter expression
         *
         * @returns {array(string)} Array with names of properties that must be
         *          filtered.
         */
        getRequiredFilterPropertyNames : function() {
            return this._aRequiredFilterPropertyNames;
        },

        /**
         * Get the names of all properties with an associated hierarchy
         *
         * @returns {array(string)} List of all property names
         */
        getAllHierarchyPropertyNames : function() {
            if (this._aHierarchyPropertyNames) {
                return this._aHierarchyPropertyNames;
            }

            this._aHierarchyPropertyNames = [];

            for ( var sName in this._oRecursiveHierarchySet)
                this._aHierarchyPropertyNames.push(this._oRecursiveHierarchySet[sName]
                .getNodeValueProperty().name);

            return this._aHierarchyPropertyNames;
        },

        /**
         * Get the hierarchy associated to a given property Based on the current
         * specification, hierarchies are always recursive. TODO: Extend behavior
         * when leveled hierarchies get in scope
         *
         * @param {string}
         *            sName Parameter name
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.RecursiveHierarchy} The hierarchy
         *          object or null if it does not exist
         */
        getHierarchy : function(sName) {
            if (this._oRecursiveHierarchySet[sName] == undefined) {
                return null;
            }
            return this._oRecursiveHierarchySet[sName];
        },

        /**
         * Get the fully qualified name for this entity type
         *
         * @returns {string} The fully qualified name
         */
        getQName : function() {
            return this._sQName;
        },

        /**
         * Get full description for this entity type
         *
         * @returns {object} The DataJS object representing the entity type
         */
        getTypeDescription : function() {
            return this._oEntityType;
        },

        getSchema : function() {
            return this._oSchema;
        },

        getModel : function() {
            return this._oModel;
        },

        /**
         * Private member attributes
         */

        _oEntityType : null,
        _oSchema : null,
        _oModel : null,
        _sQName : null,

        _oPropertySet : null,
        _aFilterablePropertyNames : null,
        _aRequiredFilterPropertyNames : null,

        _aHierarchyPropertyNames : null,
        _oRecursiveHierarchySet : null
};

/** ******************************************************************** */

/**
 * Create a representation of a recursive hierarchy defined on one multiple
 * properties in an OData entity type query
 *
 * @param {EntityType}
 *            oEntityType object for the entity type
 * @param {object}
 *            oNodeIDProperty DataJS object for the property holding the
 *            hierarchy node ID identifying the hierarchy node to which the
 *            OData entry belongs
 * @param {object}
 *            oParentNodeIDProperty DataJS object for the property holding the
 *            node ID of the parent of the hierarchy node pointed to by the
 *            value of oNodeIDProperty
 * @param {object}
 *            oNodeLevelProperty DataJS object for the property holding the
 *            level number for the of the hierarchy node pointed to by the value
 *            of oNodeIDProperty
 * @param {object}
 *            oNodeValueProperty DataJS object for the property holding the data
 *            value for the of the hierarchy node pointed to by the value of
 *            oNodeIDProperty
 *
 * @constructor
 *
 * @class Representation of a recursive hierarchy.
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.RecursiveHierarchy = function(oEntityType, oNodeIDProperty,
        oParentNodeIDProperty, oNodeLevelProperty, oNodeValueProperty) {
    this._init(oEntityType, oNodeIDProperty, oParentNodeIDProperty, oNodeLevelProperty,
            oNodeValueProperty);
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.RecursiveHierarchy.prototype = {
        /**
         * @private
         */
        _init : function(oEntityType, oNodeIDProperty, oParentNodeIDProperty, oNodeLevelProperty,
                oNodeValueProperty) {
            this._oEntityType = oEntityType;

            this._oNodeIDProperty = oNodeIDProperty;
            this._oParentNodeIDProperty = oParentNodeIDProperty;
            this._oNodeLevelProperty = oNodeLevelProperty;
            this._oNodeValueProperty = oNodeValueProperty;

        },

        /**
         * Get indicator if this is a recursive hierarchy
         *
         * @returns {boolean} True
         */
        isRecursiveHierarchy : function() {
            return true;
        },

        /**
         * Get indicator if this is a leveled hierarchy
         *
         * @returns {boolean} False
         */
        isLeveledHierarchy : function() {
            return false;
        },

        /**
         * Get the property holding the node ID of the hierarchy node
         *
         * @returns {object} The DataJS object representing this property
         */
        getNodeIDProperty : function() {
            return this._oNodeIDProperty;
        },

        /**
         * Get the property holding the parent node ID of the hierarchy node
         *
         * @returns {object} The DataJS object representing this property
         */
        getParentNodeIDProperty : function() {
            return this._oParentNodeIDProperty;
        },

        /**
         * Get the property holding the level of the hierarchy node
         *
         * @returns {object} The DataJS object representing this property
         */
        getNodeLevelProperty : function() {
            return this._oNodeLevelProperty;
        },

        /**
         * Get the property holding the value that is structurally organized by the
         * hierarchy
         *
         * @returns {object} The DataJS object representing this property
         */
        getNodeValueProperty : function() {
            return this._oNodeValueProperty;
        },

        /**
         * Private member attributes
         */

        _oNodeIDProperty : null,
        _oParentNodeIDProperty : null,
        _oNodeLevelProperty : null,
        _oNodeValueProperty : null

};

/** ******************************************************************** */

/**
 * Create a representation of a filter expression for a given entity type. It
 * can be rendered as value for the $filter system query option.
 *
 * @param {object}
 *            oModel DataJS object for the OData model containing this entity
 *            type
 * @param {object}
 *            oSchema DataJS object for the schema containing this entity type
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntityType}
 *            oEntityType object for the entity type
 *
 * @constructor
 *
 * @class Representation of a $filter expression for an OData entity type.
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.FilterExpression = function(oModel, oSchema, oEntityType) {
    this._init(oModel, oSchema, oEntityType);
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.FilterExpression.prototype = {
        /**
         * @private
         */
        _init : function(oModel, oSchema, oEntityType) {
            this._oEntityType = oEntityType;
            this._oSchema = oSchema;
            this._oModel = oModel;

            this._aFilterCondition = [];
        },

        /**
         * Clear expression from any conditions that may have been set previously
         *
         */
        clear : function() {
            this._aFilterCondition = [];
        },

        /**
         * Add a condition to the filter expression.
         *
         * Multiple conditions on the same property are combined with a logical OR
         * first, and in a second step conditions for different properties are
         * combined with a logical AND.
         *
         * @param {string}
         *            sPropertyName The name of the property bound in the condition
         * @param {sap.ui.model.FilterOperator}
         *            sOperator operator used for the condition
         * @param {object}
         *            oValue value to be used for this condition
         * @param {object}
         *            oValue2 (optional) as second value to be used for this
         *            condition
         * @throws Exception
         *             if the property is unknown or not filterable
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.FilterExpression} This object for
         *          method chaining
         */
        addCondition : function(sPropertyName, sOperator, oValue, oValue2) {
            var oProperty = this._oEntityType.findPropertyByName(sPropertyName);
            if (oProperty == null) {
                throw "Cannot add filter condition for unknown property name " + sPropertyName; // TODO
            }
            var aFilterablePropertyNames = this._oEntityType.getFilterablePropertyNames();
            if (aFilterablePropertyNames.indexOf(sPropertyName) === -1) {
                throw "Cannot add filter condition for not filterable property name " + sPropertyName; // TODO
            }
            this._aFilterCondition.push({
                property : oProperty,
                op : sOperator,
                val1 : oValue,
                val2 : oValue2
            });
            return this._aFilterablePropertyNames;
        },

        /**
         * Add a set condition to the filter expression.
         *
         * A set condition tests if the value of a property is included in a set of
         * given values. It is a convenience method for this particular use case
         * eliminating the need for multiple API calls.
         *
         * @param {string}
         *            sPropertyName The name of the property bound in the condition
         * @param {array}
         *            aValues values defining the set
         * @throws Exception
         *             if the property is unknown or not filterable
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.FilterExpression} This object for
         *          method chaining
         */
        addSetCondition : function(sPropertyName, aValues) {
            var oProperty = this._oEntityType.findPropertyByName(sPropertyName);
            if (oProperty == null) {
                throw "Cannot add filter condition for unknown property name " + sPropertyName; // TODO
            }
            var aFilterablePropertyNames = this._oEntityType.getFilterablePropertyNames();
            if (aFilterablePropertyNames.indexOf(sPropertyName) === -1) {
                throw "Cannot add filter condition for not filterable property name " + sPropertyName; // TODO
            }
            for ( var i = -1, oValue; oValue = aValues[++i];) {
                this._aFilterCondition.push({
                    property : oProperty,
                    op : sap.ui.model.FilterOperator.EQ,
                    val1 : oValue
                });
            }
            return this._aFilterablePropertyNames;
        },

        /**
         * Get an array of SAPUI5 Filter objects corresponding to this expression.
         *
         * @returns {array(sap.ui.model.Filter)} List of filter objects representing
         *          this expression
         */
        getExpressionAsUI5FilterArray : function() {
            var aFilterObjects = [];

            for ( var i = -1, oCondition; oCondition = this._aFilterCondition[++i];) {
                aFilterObjects.push(new sap.ui.model.Filter(oCondition.property.name, oCondition.op,
                        oCondition.val1, oCondition.val2));
            }
            return aFilterObjects;
        },

        /**
         * Get the value for the OData system query option $filter corresponding to
         * this expression.
         *
         * @returns {string} The $filter value for the filter expression
         */
        getURIFilterOptionValue : function() {

            if (this._aFilterCondition.length == 0) {
                return "";
            }

            this._aFilterCondition.sort(function(a, b) {
                if (a.property.name == b.property.name) {
                    return 0;
                }
                if (a.property.name > b.property.name) {
                    return 1;
                } else {
                    return -1;
                }
            });

            var sPropertyName = this._aFilterCondition[0].property.name;
            var sOptionString = "";
            var sSubExpression = "";
            for ( var i = -1, oCondition; oCondition = this._aFilterCondition[++i];) {
                if (sPropertyName != oCondition.property.name) {
                    sOptionString += (sOptionString == "" ? "" : " and ") + "(" + sSubExpression + ")";
                    sSubExpression = "";
                    sPropertyName = oCondition.property.name;
                }

                switch (oCondition.op) {
                case sap.ui.model.FilterOperator.BT:
                    sSubExpression += (sSubExpression == "" ? "" : " or ")
                    + "("
                    + oCondition.property.name
                    + " "
                    + sap.ui.model.FilterOperator.GE.toLowerCase()
                    + " "
                    + sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.helper.renderPropertyFilterValue(oCondition.val1,
                            oCondition.property.type)
                            + " and "
                            + oCondition.property.name
                            + " "
                            + sap.ui.model.FilterOperator.LE.toLowerCase()
                            + " "
                            + sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.helper.renderPropertyFilterValue(oCondition.val2,
                                    oCondition.property.type) + ")";
                    break;
                default:
                    sSubExpression += (sSubExpression == "" ? "" : " or ")
                    + "("
                    + oCondition.property.name
                    + " "
                    + oCondition.op.toLowerCase()
                    + " "
                    + sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.helper.renderPropertyFilterValue(oCondition.val1,
                            oCondition.property.type) + ")";
                }
            }
            sOptionString += (sOptionString == "" ? "" : " and ") + "(" + sSubExpression + ")";

            return sOptionString;
        },

        /**
         * Get description for this entity type
         *
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntityType} The object representing the
         *          entity type
         */
        getEntityType : function() {
            return this._oEntityType;
        },

        getSchema : function() {
            return this._oSchema;
        },

        getModel : function() {
            return this._oModel;
        },

        /**
         * Private member attributes
         */

        _oEntityType : null,
        _oSchema : null,
        _oModel : null,

        _aFilterCondition : null
};

/** ******************************************************************** */

/**
 * @class Sort order of a property
 *
 * @static
 * @public
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.SortOrder = {

        /**
         * Sort Order: ascending.
         *
         * @public
         */
        Ascending : "asc",

        /**
         * Sort Order: descending.
         *
         * @public
         */
        Descending : "desc"

};

/** ******************************************************************** */

/**
 * Create a representation of an order by expression for a given entity type. It
 * can be rendered as value for the $orderby system query option.
 *
 * @param {object}
 *            oModel DataJS object for the OData model containing this entity
 *            type
 * @param {object}
 *            oSchema DataJS object for the schema containing this entity type
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntityType}
 *            oEntityType object for the entity type
 *
 * @constructor
 *
 * @class Representation of a $orderby expression for an OData entity type.
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.SortExpression = function(oModel, oSchema, oEntityType) {
    this._init(oModel, oSchema, oEntityType);
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.SortExpression.prototype = {
        /**
         * @private
         */
        _init : function(oModel, oSchema, oEntityType) {
            this._oEntityType = oEntityType;
            this._oSchema = oSchema;
            this._oModel = oModel;

            this._aSortCondition = [];
        },

        /**
         * Checks if an order by expression for the given property is already
         * defined and returns a reference to an object with property sorter and
         * index of the object or null if the property is not yet defined in an
         * order by expression.
         *
         * @private
         */
        _containsSorter : function(sPropertyName) {
            var oResult = null;
            for ( var i = -1, oCurrentSorter; oCurrentSorter = this._aSortCondition[++i];) {
                if (oCurrentSorter.property.name === sPropertyName) {
                    oResult = {
                            sorter : oCurrentSorter,
                            index : i
                    };
                    break;
                }
            }
            return oResult;
        },

        /**
         * TODO helper method to remove elements from array
         *
         * @private
         */
        _removeFromArray : function(array, from, to) {
            var rest = array.slice((to || from) + 1 || array.length);
            array.length = from < 0 ? array.length + from : from;
            return array.push.apply(array, rest);
        },

        /**
         * Clear expression from any sort conditions that may have been set
         * previously
         */
        clear : function() {
            this._aSortCondition = [];
        },

        /**
         * Add a condition to the order by expression. Multiple conditions on the
         * same property will throw an exception, e.g. you cannot order by ascending
         * and descending at the same time on the same property.
         *
         * @param {string}
         *            sPropertyName The name of the property bound in the condition
         * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.SortOrder}
         *            sSortOrder sorting order used for the condition
         * @throws Exception
         *             if the property is unknown, not sortable or already added as
         *             sorter
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.SortExpression} This object for method
         *          chaining
         */
        addSorter : function(sPropertyName, sSortOrder) {
            var oProperty = this._oEntityType.findPropertyByName(sPropertyName);
            if (oProperty == null) {
                throw "Cannot add sort condition for unknown property name " + sPropertyName; // TODO
            }
            if (this._containsSorter(sPropertyName) != null) {
                throw "Sort condition for this property name is already defined " + sPropertyName; // TODO
            }
            var aSortablePropertyNames = this._oEntityType.getSortablePropertyNames();
            if (aSortablePropertyNames.indexOf(sPropertyName) === -1) {
                throw "Cannot add sort condition for not sortable property name " + sPropertyName; // TODO
            }

            this._aSortCondition.push({
                property : oProperty,
                order : sSortOrder
            });
            return this;
        },

        /**
         * Removes the order by expression for the given property name from the list
         * of order by expression. If no order by expression with this property name
         * exists the method does nothing.
         *
         * @param {string}
         *            sPropertyName The name of the property to be removed from the
         *            condition
         */
        removeSorter : function(sPropertyName) {
            if (!sPropertyName) {
                return;
            }

            var oSorter = this._containsSorter(sPropertyName);
            if (oSorter) {
                this._removeFromArray(this._aSortCondition, oSorter.index);
            }
        },

        /**
         * Get an array of SAPUI5 Sorter objects corresponding to this expression.
         *
         * @returns {array(sap.ui.model.Sorter)} List of sorter objects representing
         *          this expression
         */
        getExpressionsAsUI5SorterArray : function() {
            var aSorterObjects = [];

            for ( var i = -1, oCondition; oCondition = this._aSortCondition[++i];) {
                aSorterObjects.push(new sap.ui.model.Sorter(oCondition.property.name,
                        oCondition.order == sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.SortOrder.Descending));
            }

            return aSorterObjects;
        },

        /**
         * Get the first SAPUI5 Sorter object.
         *
         * @returns {sap.ui.model.Sorter} first sorter object or null if empty
         */
        getExpressionAsUI5Sorter : function() {
            var aSortArray = this.getExpressionsAsUI5SorterArray();
            if (aSortArray.length == 0) {
                return null;
            } else {
                return aSortArray[0];
            }
        },

        /**
         * Get the value for the OData system query option $orderby corresponding to
         * this expression.
         *
         * @returns {string} The $orderby value for the sort expressions
         */
        getURIOrderByOptionValue : function() {
            if (this._aSortCondition.length == 0) {
                return "";
            }

            var sOrderByOptionString = "";
            for ( var i = -1, oCondition; oCondition = this._aSortCondition[++i];) {
                sOrderByOptionString += oCondition.property.name + " " + oCondition.order;
                if (i < this._aSortCondition.length - 1) {
                    sOrderByOptionString += ", ";
                }
            }

            return sOrderByOptionString;
        },

        /**
         * Get description for this entity type
         *
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.EntityType} The object representing the
         *          entity type
         */
        getEntityType : function() {
            return this._oEntityType;
        },

        getSchema : function() {
            return this._oSchema;
        },

        getModel : function() {
            return this._oModel;
        },

        /**
         * Private member attributes
         */

        _oEntityType : null,
        _oSchema : null,
        _oModel : null,

        _aSortCondition : null
};

/** ******************************************************************** */

/**
 * Create a request object for interaction with a query parameterization.
 *
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameterization}
 *            oParameterization Description of a query parameterization
 *
 * @constructor
 *
 * @class Creation of URIs for query parameterizations.
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.ParameterizationRequest = function(oParameterization) {
    this._init(oParameterization);
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.ParameterizationRequest.prototype = {
        /**
         * @private
         */
        _init : function(oParameterization) {
            if (!oParameterization) {
                throw "No parameterization given"; // TODO
            }
            this._oParameterization = oParameterization;
            this._oParameterValueAssignment = [];
        },

        /**
         * Get the description of the parameterization on which this request
         * operates on
         *
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameterization} Description of a
         *          query parameterization
         */
        getParameterization : function() {
            return this._oParameterization;
        },

        /**
         * Assign a value to a parameter
         *
         * @param {String}
         *            sParameterName Name of the parameter. In case of a range
         *            value, provide the name of the lower boundary parameter.
         * @param {String}
         *            sValue Assigned value. Pass null to remove a value assignment.
         * @param {String}
         *            sToValue Omit it or set it to null for single values. If set,
         *            it will be assigned to the upper boundary parameter
         */
        setParameterValue : function(sParameterName, sValue, sToValue) {
            var oParameter = this._oParameterization.findParameterByName(sParameterName);
            if (!oParameter) {
                throw "Invalid parameter name " + sParameterName; // TODO improve
            }
            // error handling
            if (sToValue != null) {
                if (!oParameter.isIntervalBoundary()) {
                    // TODO improve error handling
                    throw "Range value cannot be applied to parameter " + sParameterName
                    + " accepting only single values"; // TODO
                }
                if (!oParameter.isLowerIntervalBoundary()) {
                    // TODO improve error handling
                    throw "Range value given, but parameter " + sParameterName
                    + " does not hold the lower boundary"; // TODO
                }
            }
            if (!oParameter.isIntervalBoundary()) {
                if (sValue == null) {
                    delete this._oParameterValueAssignment[sParameterName];
                } else {
                    this._oParameterValueAssignment[sParameterName] = sValue;
                }
            } else {
                if (sValue == null && sToValue != null) {
                    throw "Parameter " + sParameterName
                    + ": An upper boundary cannot be given without the lower boundary"; // TODO
                }
                if (sValue == null) {
                    delete this._oParameterValueAssignment[sParameterName];
                    sToValue = null;
                } else {
                    this._oParameterValueAssignment[sParameterName] = sValue;
                }
                var oUpperBoundaryParameter = oParameter.getPeerIntervalBoundaryParameter();
                if (sToValue == null) {
                    sToValue = sValue;
                }
                if (sValue == null) {
                    delete this._oParameterValueAssignment[oUpperBoundaryParameter.getName()];
                } else {
                    this._oParameterValueAssignment[oUpperBoundaryParameter.getName()] = sToValue;
                }
            }
            return;
        },

        /**
         * Get the URI to locate the entity set for the query parameterization.
         *
         * @param {String}
         *            sServiceRootURI (optional) Identifies the root of the OData
         *            service
         * @returns The resource path of the URI pointing to the entity set. It is a
         *          relative URI unless a service root is given, which would then
         *          prefixed in order to return a complete URL.
         */
        getURIToParameterizationEntitySet : function(sServiceRootURI) {
            return (sServiceRootURI ? sServiceRootURI : "") + "/"
            + this._oParameterization.getEntitySet().getQName();
        },

        /**
         * Get the URI to locate the parameterization entity for the values assigned
         * to all parameters beforehand. Notice that a value must be supplied for
         * every parameter including those marked as optional. For optional
         * parameters, assign the special value that the service provider uses as an
         * "omitted" value. For example, for services based on BW Easy Queries, this
         * would be an empty string.
         *
         * @param {String}
         *            sServiceRootURI (optional) Identifies the root of the OData
         *            service
         * @returns The resource path of the URI pointing to the entity set. It is a
         *          relative URI unless a service root is given, which would then
         *          prefixed in order to return a complete URL.
         */
        getURIToParameterizationEntry : function(sServiceRootURI) {
            var oDefinedParameters = this._oParameterization.getAllParameters();
            for ( var sDefinedParameterName in oDefinedParameters) {
                // check that all parameters have a value assigned. This is also
                // true for those marked as optional, because the omitted value is
                // conveyed by some default value, e.g. as empty string.
                if (this._oParameterValueAssignment[sDefinedParameterName] == undefined) {
                    throw "Parameter " + sDefinedParameterName + " has no value assigned"; // TODO
                }
            }
            var sKeyIdentification = "", bFirst = true;
            for ( var sParameterName in this._oParameterValueAssignment) {
                sKeyIdentification += (bFirst ? "" : ",")
                + sParameterName
                + "="
                + sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.helper.renderPropertyKeyValue(
                        this._oParameterValueAssignment[sParameterName],
                        oDefinedParameters[sParameterName].getProperty().type);
                bFirst = false;
            }

            return (sServiceRootURI ? sServiceRootURI : "") + "/"
            + this._oParameterization.getEntitySet().getQName() + "(" + sKeyIdentification
            + ")";
        },

        /**
         * Private member attributes
         */
        _oParameterization : null,
        _oParameterValueAssignment : null

};

/** ******************************************************************** */

/**
 * Create a request object for interaction with a query result.
 *
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.QueryResult}
 *            oParameterization Description of a query parameterization
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.ParameterizationRequest}
 *            oParameterizationRequest (optional) Request object for
 *            interactions with the parameterization of this query. Only
 *            required if the query service includes parameters.
 *
 * @constructor
 *
 * @class Creation of URIs for fetching query results.
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.QueryResultRequest = function(oQueryResult, oParameterizationRequest) {
    this._init(oQueryResult);
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.QueryResultRequest.prototype = {
        /**
         * @private
         */
        _init : function(oQueryResult, oParameterizationRequest) {
            this._oQueryResult = oQueryResult;
            this._oParameterizationRequest = oParameterizationRequest;
            this._oAggregationLevel = {};
            this._oMeasures = {};
            this._bIncludeEntityKey = false;
            this._oFilterExpression = null;
        },

        /**
         * Set the parameterization request required for interactions with the query
         * result of parameterized queries
         *
         * @param oParameterizationRequest
         *            Request object for interactions with the parameterization of
         *            this query
         */
        setParameterizationRequest : function(oParameterizationRequest) {
            this._oParameterizationRequest = oParameterizationRequest;
        },

        /**
         * Get the description of the query result on which this request operates on
         *
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.QueryResult} Description of a query
         *          result
         */
        getQueryResult : function() {
            return this._oQueryResult;
        },

        /**
         * Set the aggregation level for the query result request. By default, the
         * query result will include the properties holding the keys of the given
         * dimensions. This setting can be changed using
         * includeDimensionKeyTextAttributes.
         *
         * @param aDimensionName
         *            Array of dimension names to be part of the aggregation level.
         *            If null, the aggregation level includes all dimensions, if
         *            empty, no dimension is included.
         *
         */
        setAggregationLevel : function(aDimensionName) {
            this._oAggregationLevel = {};
            if (!aDimensionName) {
                aDimensionName = this._oQueryResult.getAllDimensionNames();
            }
            this.addToAggregationLevel(aDimensionName);
        },

        /**
         * Add one or more dimensions to the aggregation level
         *
         * @param aDimensionName
         *            Array of dimension names to be added to the already defined
         *            aggregation level.
         *
         */
        addToAggregationLevel : function(aDimensionName) {
            if (!aDimensionName) {
                return;
            }

            for ( var i = -1, sDimName; sDimName = aDimensionName[++i];) {
                if (!this._oQueryResult.findDimensionByName(sDimName)) {
                    throw sDimName + " is not a valid dimension name"; // TODO
                }
                this._oAggregationLevel[sDimName] = {
                        key : true,
                        text : false,
                        attributes : null
                };
            }
        },

        /**
         * Remove one or more dimensions from the aggregation level. The method also
         * removed a potential sort expression on the dimension.
         *
         * @param aDimensionName
         *            Array of dimension names to be removed from the already
         *            defined aggregation level.
         */
        removeFromAggregationLevel : function(aDimensionName) {
            if (!aDimensionName) {
                return;
            }
            for ( var i = -1, sDimName; sDimName = aDimensionName[++i];) {
                if (!this._oQueryResult.findDimensionByName(sDimName)) {
                    throw sDimName + " is not a valid dimension name"; // TODO
                }
                if (this._oAggregationLevel[sDimName] != undefined) {
                    delete this._oAggregationLevel[sDimName];

                    // remove potential sort expression on this dimension
                    this.getSortExpression().removeSorter(sDimName);
                }
            }
        },

        /**
         * Get the names of the dimensions included in the aggregation level
         *
         * @returns {Array} The dimension names included in the aggregation level
         */
        getAggregationLevel : function() {
            var aDimName = [];
            for ( var sDimName in this._oAggregationLevel) {
                aDimName.push(sDimName);
            }
            return aDimName;
        },

        /**
         * Get details about a dimensions included in the aggregation level
         *
         * @param sDImensionName
         *            Name of a dimension included in the aggregation level of this
         *            request, for which details shall be returned
         *
         * @returns {object} An object with three properties named key and text,
         *          both with Boolean values indicating whether the key and text of
         *          this dimension are included in this request. The third property
         *          named attributes is an array of attribute names of this
         *          dimension included in this request, or null, if there are none.
         */
        getAggregationLevelDetails : function(sDimensionName) {
            if (this._oAggregationLevel[sDimensionName] == undefined) {
                throw "Aggregation level does not include dimension " + sDimensionName;
            }
            return this._oAggregationLevel[sDimensionName];
        },

        /**
         * Set the measures to be included in the query result request. By default,
         * the query result will include the properties holding the raw values of
         * the given measures. This setting can be changed using
         * includeMeasureRawFormattedValueUnit.
         *
         * @param aMeasureName
         *            Array of measure names to be part of the query result request.
         *            If null, the request includes all measures, if empty, no
         *            measure is included.
         */
        setMeasures : function(aMeasureName) {
            if (!aMeasureName) {
                aMeasureName = this._oQueryResult.getAllMeasureNames();
            }
            this._oMeasures = {};
            for ( var i = -1, sMeasName; sMeasName = aMeasureName[++i];) {
                if (!this._oQueryResult.findMeasureByName(sMeasName)) {
                    throw sMeasName + " is not a valid measure name"; // TODO
                }

                this._oMeasures[sMeasName] = {
                    value : true,
                    text : false,
                    unit : false
                };
            }
        },

        /**
         * Get the names of the measures included in the query result request
         *
         * @returns {Array} The measure names included in the query result request
         */
        getMeasureNames : function() {
            var aMeasName = [];
            for ( var sMeasName in this._oMeasures) {
                aMeasName.push(sMeasName);
            }
            return aMeasName;
        },

        /**
         * Specify which dimension components shall be included in the query result.
         * The settings get applied to the currently defined aggregation level.
         *
         * @param sDimensionName
         *            Name of the dimension for which the settings get applied.
         *            Specify null to apply the settings to all dimensions in the
         *            aggregation level.
         * @param bIncludeKey
         *            Indicator whether or not to include the dimension key in the
         *            query result. Pass null to keep current setting.
         * @param bIncludeText
         *            Indicator whether or not to include the dimension text (if
         *            available) in the query result. Pass null to keep current
         *            setting.
         * @param aAttributeName
         *            Array of dimension attribute names to be included in the
         *            result. Pass null to keep current setting. This argument is
         *            ignored if sDimensionName is null.
         */
        includeDimensionKeyTextAttributes : function(sDimensionName, bIncludeKey, bIncludeText,
                aAttributeName) {
            var aDimName = [];
            if (sDimensionName) {
                if (this._oAggregationLevel[sDimensionName] == undefined) {
                    throw sDimensionName + " is not included in the aggregation level";
                }
                aDimName.push(sDimensionName);
            } else {
                for ( var sName in this._oAggregationLevel) {
                    aDimName.push(sName);
                }
                aAttributeName = null;
            }
            for ( var i = -1, sDimName; sDimName = aDimName[++i];) {
                if (bIncludeKey != null) {
                    this._oAggregationLevel[sDimName].key = bIncludeKey;
                }
                if (bIncludeText != null) {
                    this._oAggregationLevel[sDimName].text = bIncludeText;
                }
                if (aAttributeName != null) {
                    this._oAggregationLevel[sDimName].attributes = aAttributeName;
                }
            }
        },

        /**
         * Specify which measure components shall be included in the query result.
         * The settings get applied to the currently set measures.
         *
         * @param sMeasureName
         *            Name of the measure for which the settings get applied.
         *            Specify null to apply the settings to all currently set
         *            measures.
         * @param bIncludeRawValue
         *            Indicator whether or not to include the raw value in the query
         *            result. Pass null to keep current setting.
         * @param bIncludeFormattedValue
         *            Indicator whether or not to include the formatted value (if
         *            available) in the query result. Pass null to keep current
         *            setting.
         * @param bIncludeUnit
         *            Indicator whether or not to include the unit (if available) in
         *            the query result. Pass null to keep current setting.
         */
        includeMeasureRawFormattedValueUnit : function(sMeasureName, bIncludeRawValue,
                bIncludeFormattedValue, bIncludeUnit) {
            var aMeasName = [];
            if (sMeasureName) {
                if (this._oMeasures[sMeasureName] == undefined) {
                    throw sMeasureName + " is not part of the query result";
                }
                aMeasName.push(sMeasureName);
            } else {
                for ( var sName in this._oMeasures) {
                    aMeasName.push(sName);
                }
            }
            for ( var i = -1, sMeasName; sMeasName = aMeasName[++i];) {
                if (bIncludeRawValue != null) {
                    this._oMeasures[sMeasName].value = bIncludeRawValue;
                }
                if (bIncludeFormattedValue != null) {
                    this._oMeasures[sMeasName].text = bIncludeFormattedValue;
                }
                if (bIncludeUnit != null) {
                    this._oMeasures[sMeasName].unit = bIncludeUnit;
                }
            }
        },

        /**
         * Get the filter expression for this request.
         *
         * Expressions are represented by separate objects. If none exists so far, a
         * new expression object gets created.
         *
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.FilterExpression} The filter object
         *          associated to this request.
         */
        getFilterExpression : function() {
            if (this._oFilterExpression == null) {
                var oEntityType = this._oQueryResult.getEntityType();
                this._oFilterExpression = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.FilterExpression(oEntityType
                        .getModel(), oEntityType.getSchema(), oEntityType);
            }
            return this._oFilterExpression;
        },

        /**
         * Set the filter expression for this request.
         *
         * Expressions are represented by separate objects. Calling this method
         * replaces the filter object maintained by this request.
         *
         * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.FilterExpression}
         *            oFilter The filter object to be associated with this request.
         */
        setFilterExpression : function(oFilter) {
            this._oFilterExpression = oFilter;
        },

        /**
         * Get the sort expression for this request.
         *
         * Expressions are represented by separate objects. If none exists so far, a
         * new expression object gets created.
         *
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.SortExpression} The sort object
         *          associated to this request.
         */
        getSortExpression : function() {
            if (this._oSortExpression == null) {
                var oEntityType = this._oQueryResult.getEntityType();
                this._oSortExpression = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.SortExpression(oEntityType
                        .getModel(), oEntityType.getSchema(), oEntityType);
            }
            return this._oSortExpression;
        },

        /**
         * Set the sort expression for this request.
         *
         * Expressions are represented by separate objects. Calling this method
         * replaces the sort object maintained by this request.
         *
         * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.SortExpression}
         *            oSorter The sort object to be associated with this request.
         */
        setSortExpression : function(oSorter) {
            this._oSortExpression = oSorter;
        },

        /**
         * Set further options to be applied for the OData request to fetch the
         * query result
         *
         * @param {Boolean}
         *            bIncludeEntityKey Indicates whether or not the entity key
         *            should be returned for every entry in the query result.
         *            Default is not to include it. Pass null to keep current
         *            setting.
         * @param {Boolean}
         *            bIncludeCount Indicates whether or not the result shall
         *            include a count for the returned entities. Default is not to
         *            include it. Pass null to keep current setting.
         */
        setRequestOptions : function(bIncludeEntityKey, bIncludeCount) {
            if (bIncludeEntityKey) {
                this._bIncludeEntityKey = bIncludeEntityKey;
            }
            if (bIncludeCount) {
                this._bIncludeCount = bIncludeCount;
            }
        },

        /**
         * Specify that only a page of the query result shall be returned. A page is
         * described by its boundaries, that are row numbers for the first and last
         * rows in the query result to be returned.
         *
         * @param {Number}
         *            start The first row of the query result to be returned.
         *            Numbering starts at 1. Passing null is equivalent to start
         *            with the first row.
         * @param {Number}
         *            end The last row of the query result to be returned. Passing
         *            null is equivalent to get all rows up to the end of the query
         *            result.
         */
        setResultPageBoundaries : function(start, end) {
            if (start != null && typeof start !== "number") {
                throw "Start value must be null or numeric"; // TODO
            }
            if (end !== null && typeof end !== "number") {
                throw "End value must be null or numeric"; // TODO
            }

            if (start == null) {
                start = 1;
            }

            if (start < 1 || start > (end == null ? start : end)) {
                throw "Invalid values for requested page boundaries"; // TODO
            }

            this._iSkipRequestOption = (start > 1) ? start : null;
            this._iTopRequestOption = (end != null) ? (end - start + 1) : null;
        },

        /**
         * Returns the current page boundaries as object with properties
         * <code>start</code> and <code>end</code>. If the end of the page is
         * unbounded, <code>end</code> is null.
         *
         * @returns {Object} the current page boundaries as object
         */
        getResultPageBoundaries : function() {
            return {
                start : (this._iSkipRequestOption == null) ? 1 : this._iSkipRequestOption,
                        end : (this._iTopRequestOption != null) ? (this._iSkipRequestOption == null) ? 1
                                : this._iSkipRequestOption + this._iTopRequestOption : null
            };
        },

        /**
         * Get the URI to locate the entity set for the query result.
         *
         * @param {String}
         *            sServiceRootURI (optional) Identifies the root of the OData
         *            service
         * @returns {String} The resource path of the URI pointing to the entity
         *          set. It is a relative URI unless a service root is given, which
         *          would then prefixed in order to return a complete URL.
         */
        getURIToQueryResultEntitySet : function(sServiceRootURI) {
            var sURI = null;
            if (this._oQueryResult.getParameterization()) {
                if (!this._oParameterizationRequest) {
                    throw "Missing parameterization request";
                } else {
                    sURI = this._oParameterizationRequest
                    .getURIToParameterizationEntry(sServiceRootURI)
                    + "/"
                    + this._oQueryResult.getParameterization()
                    .getNavigationPropertyToQueryResult();
                }
            } else {
                sURI = (sServiceRootURI ? sServiceRootURI : "") + "/"
                + this._oQueryResult.getEntitySet().getQName();
            }
            return sURI;
        },

        /**
         * Get the value of an query option for the OData request URI corresponding
         * to this request.
         *
         * @param {String}
         *            sQueryOptionName Identifies the query option: $select,
         *            $filter,$orderby ... or any custom query option
         *
         * @returns {String} The value of the requested query option or null, if
         *          this option is not used for the OData request.
         */
        getURIQueryOptionValue : function(sQueryOptionName) {
            var sQueryOptionValue = null;

            switch (sQueryOptionName) {
            case "$select": {
                var sSelectOption = "";
                for ( var sDimName in this._oAggregationLevel) {
                    var oDim = this._oQueryResult.findDimensionByName(sDimName);
                    var oDimSelect = this._oAggregationLevel[sDimName];
                    if (oDimSelect.key == true) {
                        sSelectOption += (sSelectOption == "" ? "" : ",") + oDim.getKeyProperty().name;
                    }
                    if (oDimSelect.text == true && oDim.getTextProperty()) {
                        sSelectOption += (sSelectOption == "" ? "" : ",") + oDim.getTextProperty().name;
                    }
                    if (oDimSelect.attributes) {
                        for ( var i = -1, sAttrName; sAttrName = oDimSelect.attributes[++i];) {
                            sSelectOption += (sSelectOption == "" ? "" : ",")
                            + oDim.findAttributeByName(sAttrName).getName();
                        }
                    }
                }

                for ( var sMeasName in this._oMeasures) {
                    var oMeas = this._oQueryResult.findMeasureByName(sMeasName);
                    var oMeasSelect = this._oMeasures[sMeasName];
                    if (oMeasSelect.value == true) {
                        sSelectOption += (sSelectOption == "" ? "" : ",")
                        + oMeas.getRawValueProperty().name;
                    }
                    if (oMeasSelect.text == true && oMeas.getFormattedValueProperty()) {
                        sSelectOption += (sSelectOption == "" ? "" : ",")
                        + oMeas.getFormattedValueProperty().name;
                    }
                    if (oMeasSelect.unit == true && oMeas.getUnitProperty()) {
                        sSelectOption += (sSelectOption == "" ? "" : ",")
                        + oMeas.getUnitProperty().name;
                    }
                }

                if (this._bIncludeEntityKey) {
                    var aKeyPropRef = this._oQueryResult.getEntityType().getTypeDescription().key.propertyRef;
                    for ( var i = -1, oKeyProp; oKeyProp = aKeyPropRef[++i];) {
                        sSelectOption += (sSelectOption == "" ? "" : ",") + oKeyProp.name;
                    }
                }
                sQueryOptionValue = (sSelectOption ? sSelectOption : null);
                break;
            }
            case "$filter": {
                var sFilterOption = null;
                if (this._oFilterExpression) {
                    sFilterOption = this._oFilterExpression.getURIFilterOptionValue();
                }
                sQueryOptionValue = (sFilterOption ? sFilterOption : null);
                break;
            }
            case "$orderby": {
                var sSortOption = null;
                if (this._oSortExpression) {
                    sSortOption = this._oSortExpression.getURIOrderByOptionValue();
                }
                sQueryOptionValue = (sSortOption ? sSortOption : null);
                break;
            }
            case "$top": {
                if (this._iTopRequestOption !== null) {
                    sQueryOptionValue = this._iTopRequestOption;
                }
                break;
            }
            case "$skip": {
                sQueryOptionValue = this._iSkipRequestOption;
                break;
            }
            default:
                break;
            }
            return sQueryOptionValue;
        },

        /**
         * Get the unescaped URI to fetch the query result.
         *
         * @param {String}
         *            sServiceRootURI (optional) Identifies the root of the OData
         *            service
         *
         * @returns {String} The unescaped URI that contains the OData resource path
         *          and OData system query options to express the aggregation level,
         *          filter expression and further options.
         */
        getURIToQueryResultEntries : function(sServiceRootURI) {

            // construct resource path
            var sResourcePath = this.getURIToQueryResultEntitySet(sServiceRootURI);

            // construct $select
            var sSelectOption = this.getURIQueryOptionValue("$select");
            var sFilterOption = this.getURIQueryOptionValue("$filter");
            var sSortOption = this.getURIQueryOptionValue("$orderby");
            var sTopOption = this.getURIQueryOptionValue("$top");
            var sSkipOption = this.getURIQueryOptionValue("$skip");

            var sURI = sResourcePath;
            var bQuestionmark = false;

            if (sSelectOption) {
                sURI += "?$select=" + sSelectOption;
                bQuestionmark = true;
            }
            if (this._oFilterExpression && sFilterOption) {
                if (!bQuestionmark) {
                    sURI += "?";
                    bQuestionmark = true;
                } else {
                    sURI += "&";
                }
                sURI += "$filter=" + sFilterOption;
            }
            if (this._oSortExpression && sSortOption) {
                if (!bQuestionmark) {
                    sURI += "?";
                    bQuestionmark = true;
                } else {
                    sURI += "&";
                }
                sURI += "$orderby=" + sSortOption;
            }

            if (this._iTopRequestOption && sTopOption) {
                if (!bQuestionmark) {
                    sURI += "?";
                    bQuestionmark = true;
                } else {
                    sURI += "&";
                }
                sURI += "$top=" + sTopOption;
            }
            if (this._iSkipRequestOption && sSkipOption) {
                if (!bQuestionmark) {
                    sURI += "?";
                    bQuestionmark = true;
                } else {
                    sURI += "&";
                }
                sURI += "$skip=" + sSkipOption;
            }
            if (this._bIncludeCount) {
                if (!bQuestionmark) {
                    sURI += "?";
                    bQuestionmark = true;
                } else {
                    sURI += "&";
                }
                sURI += "$inlinecount=allpages";
            }
            return sURI;
        },

        /**
         * Private member attributes
         */
        _oQueryResult : null,
        _oParameterizationRequest : null,
        _oAggregationLevel : null,
        _oMeasures : null,
        _bIncludeEntityKey : null,
        _bIncludeCount : null,
        _oFilterExpression : null,
        _oSortExpression : null,
        _iSkipRequestOption : 0,
        _iTopRequestOption : null
};

/** ******************************************************************** */

/**
 * Create a request object for interaction with a query parameter value help.
 *
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameter}
 *            oParameter Description of a query parameter
 *
 * @constructor
 *
 * @class Creation of URIs for fetching a query parameter value set.
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.ParameterValueSetRequest = function(oParameter) {
    this._init(oParameter);
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.ParameterValueSetRequest.prototype = {
        /**
         * @private
         */
        _init : function(oParameter) {
            this._oParameter = oParameter;
            this._oValueSetResult = {};
            this._oFilterExpression = null;
            this._oSortExpression = null;
        },

        /**
         * Specify which components of the parameter shall be included in the value
         * set.
         *
         * @param bIncludeText
         *            Indicator whether or not to include the parameter text (if
         *            available) in the value set. Pass null to keep current
         *            setting.
         */
        includeParameterText : function(bIncludeText) {
            if (bIncludeText != null) {
                this._oValueSetResult.text = bIncludeText;
            }
        },

        /**
         * Get the filter expression for this request.
         *
         * Expressions are represented by separate objects. If none exists so far, a
         * new expression object gets created.
         *
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.FilterExpression} The filter object
         *          associated to this request.
         */
        getFilterExpression : function() {
            if (this._oFilterExpression == null) {
                var oEntityType = this._oParameter.getContainingParameterization().getEntityType();
                this._oFilterExpression = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.FilterExpression(oEntityType
                        .getModel(), oEntityType.getSchema(), oEntityType);
            }
            return this._oFilterExpression;
        },

        /**
         * Set the filter expression for this request.
         *
         * Expressions are represented by separate objects. Calling this method
         * replaces the filter object maintained by this request.
         *
         * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.FilterExpression}
         *            oFilter The filter object to be associated with this request.
         */
        setFilterExpression : function(oFilter) {
            this._oFilterExpression = oFilter;
        },

        /**
         * Get the sort expression for this request.
         *
         * Expressions are represented by separate objects. If none exists so far, a
         * new expression object gets created.
         *
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.SortExpression} The sort object
         *          associated to this request.
         */
        getSortExpression : function() {
            if (this._oSortExpression == null) {
                var oEntityType = this._oQueryResult.getEntityType();
                this._oSortExpression = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.SortExpression(oEntityType
                        .getModel(), oEntityType.getSchema(), oEntityType);
            }
            return this._oSortExpression;
        },

        /**
         * Set the sort expression for this request.
         *
         * Expressions are represented by separate objects. Calling this method
         * replaces the sort object maintained by this request.
         *
         * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.SortExpression}
         *            oSorter The sort object to be associated with this request.
         */
        setSortExpression : function(oSorter) {
            this._oSortExpression = oSorter;
        },

        /**
         * Get the value of an query option for the OData request URI corresponding
         * to this request.
         *
         * @param {String}
         *            sQueryOptionName Identifies the query option: $select,
         *            $filter,... or any custom query option
         *
         * @returns {String} The value of the requested query option or null, if
         *          this option is not used for the OData request.
         */
        getURIQueryOptionValue : function(sQueryOptionName) {
            var sQueryOptionValue = null;

            switch (sQueryOptionName) {
            case "$select": {
                var sSelectOption = "";
                sSelectOption += (sSelectOption == "" ? "" : ",") + this._oParameter.getProperty().name;
                if (this._oValueSetResult.text == true && this._oParameter.getTextProperty()) {
                    sSelectOption += (sSelectOption == "" ? "" : ",")
                    + this._oParameter.getTextProperty().name;
                }
                sQueryOptionValue = (sSelectOption ? sSelectOption : null);
                break;
            }
            case "$filter": {
                var sFilterOption = null;
                if (this._oFilterExpression) {
                    sFilterOption = this._oFilterExpression.getURIFilterOptionValue();
                }
                sQueryOptionValue = (sFilterOption ? sFilterOption : null);
                break;
            }
            case "$orderby": {
                var sSortOption = null;
                if (this._oSortExpression) {
                    sSortOption = this._oSortExpression.getURIOrderByOptionValue();
                }
                sQueryOptionValue = (sSortOption ? sSortOption : null);
                break;
            }
            default:
                break;
            }

            return sQueryOptionValue;
        },

        /**
         * Get the unescaped URI to fetch the parameter value set.
         *
         * @param {String}
         *            sServiceRootURI (optional) Identifies the root of the OData
         *            service
         * @returns {String} The unescaped URI that contains the OData resource path
         *          and OData system query options to express the request for the
         *          parameter value set..
         */
        getURIToParameterValueSetEntries : function(sServiceRootURI) {

            // construct resource path
            var sResourcePath = null;

            sResourcePath = (sServiceRootURI ? sServiceRootURI : "") + "/"
            + this._oParameter.getContainingParameterization().getEntitySet().getQName();

            // construct query options
            var sSelectOption = this.getURIQueryOptionValue("$select");
            var sFilterOption = this.getURIQueryOptionValue("$filter");
            var sSortOption = this.getURIQueryOptionValue("$orderby");

            var sURI = sResourcePath;
            var bQuestionmark = false;

            if (sSelectOption) {
                sURI += "?$select=" + sSelectOption;
                bQuestionmark = true;
            }
            if (this._oFilterExpression && sFilterOption) {
                if (!bQuestionmark) {
                    sURI += "?";
                    bQuestionmark = true;
                } else {
                    sURI += "&";
                }
                sURI += "$filter=" + sFilterOption;
            }
            if (this._oSortExpression && sSortOption) {
                if (!bQuestionmark) {
                    sURI += "?";
                    bQuestionmark = true;
                } else {
                    sURI += "&";
                }
                sURI += "$orderby=" + sSortOption;
            }
            return sURI;
        },

        /**
         * Private member attributes
         */
        _oParameter : null,
        _oFilterExpression : null,
        _oSortExpression : null,
        _oValueSetResult : null
};

/** ******************************************************************** */

/**
 * Create a request object for interaction with a dimension value help.
 *
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Dimension}
 *            oDimension Description of a dimension
 * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.ParameterizationRequest}
 *            oParameterizationRequest (optional) Request object for
 *            interactions with the parameterization of this query. Only
 *            required if the query service includes parameters.
 *
 * @constructor
 *
 * @class Creation of URIs for fetching a query dimension value set.
 */
sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.DimensionMemberSetRequest = function(oDimension, oParameterizationRequest) {
    this._init(oDimension, oParameterizationRequest);
};

sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.DimensionMemberSetRequest.prototype = {
        /**
         * @private
         */
        _init : function(oDimension, oParameterizationRequest) {
            this._oDimension = oDimension;
            this._oParameterizationRequest = oParameterizationRequest;
            this._oValueSetResult = {};
            this._oFilterExpression = null;
            this._oSortExpression = null;
        },

        /**
         * Set the parameterization request required for retrieving dimension
         * members of a parameterized query
         *
         * @param oParameterizationRequest
         *            Request object for interactions with the parameterization of
         *            this query
         */
        setParameterizationRequest : function(oParameterizationRequest) {
            this._oParameterizationRequest = oParameterizationRequest;
        },

        /**
         * Specify which components of the dimension shall be included in the value
         * set.
         *
         * @param bIncludeText
         *            Indicator whether or not to include the parameter text (if
         *            available) in the value set. Pass null to keep current
         *            setting.
         * @param aAttributeName
         *            Array of dimension attribute names to be included in the
         *            result. Pass null to keep current setting.
         */
        includeDimensionTextAttributes : function(bIncludeText, aAttributeName) {
            if (bIncludeText != null) {
                this._oValueSetResult.text = bIncludeText;
            }
            if (aAttributeName != null) {
                this._oValueSetResult.attributes = aAttributeName;
            }
        },

        /**
         * Get the filter expression for this request.
         *
         * Expressions are represented by separate objects. If none exists so far, a
         * new expression object gets created.
         *
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.FilterExpression} The filter object
         *          associated to this request.
         */
        getFilterExpression : function() {
            if (this._oFilterExpression == null) {
                var oEntityType = this._oDimension.getContainingQueryResult().getEntityType();
                this._oFilterExpression = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.FilterExpression(oEntityType
                        .getModel(), oEntityType.getSchema(), oEntityType);
            }
            return this._oFilterExpression;
        },

        /**
         * Set the filter expression for this request.
         *
         * Expressions are represented by separate objects. Calling this method
         * replaces the filter object maintained by this request.
         *
         * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.FilterExpression}
         *            oFilter The filter object to be associated with this request.
         */
        setFilterExpression : function(oFilter) {
            this._oFilterExpression = oFilter;
        },

        /**
         * Get the sort expression for this request.
         *
         * Expressions are represented by separate objects. If none exists so far, a
         * new expression object gets created.
         *
         * @returns {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.SortExpression} The sort object
         *          associated to this request.
         */
        getSortExpression : function() {
            if (this._oSortExpression == null) {
                var oEntityType = this._oQueryResult.getEntityType();
                this._oSortExpression = new sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.SortExpression(oEntityType
                        .getModel(), oEntityType.getSchema(), oEntityType);
            }
            return this._oSortExpression;
        },

        /**
         * Set the sort expression for this request.
         *
         * Expressions are represented by separate objects. Calling this method
         * replaces the sort object maintained by this request.
         *
         * @param {sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.SortExpression}
         *            oSorter The sort object to be associated with this request.
         */
        setSortExpression : function(oSorter) {
            this._oSortExpression = oSorter;
        },

        /**
         * Get indicator whether or not master data are available for this dimension
         *
         * @returns {boolean} True iff the master data are available
         */
        hasMasterDataAvailable : function() {
            return false; // TODO support to be added
        },

        /**
         * Get the value of an query option for the OData request URI corresponding
         * to this request.
         *
         * @param {String}
         *            sQueryOptionName Identifies the query option: $select,
         *            $filter,... or any custom query option
         *
         * @returns {String} The value of the requested query option or null, if
         *          this option is not used for the OData request.
         */
        getURIQueryOptionValue : function(sQueryOptionName) {
            var sQueryOptionValue = null;

            switch (sQueryOptionName) {
            case "$select": {
                var sSelectOption = "";
                sSelectOption += (sSelectOption == "" ? "" : ",")
                + this._oDimension.getKeyProperty().name;
                if (this._oValueSetResult.text == true && this._oDimension.getTextProperty()) {
                    sSelectOption += (sSelectOption == "" ? "" : ",")
                    + this._oDimension.getTextProperty().name;
                }
                if (this._oValueSetResult.attributes) {
                    for ( var i = -1, sAttrName; sAttrName = this._oValueSetResult.attributes[++i];) {
                        sSelectOption += (sSelectOption == "" ? "" : ",")
                        + this._oDimension.findAttributeByName(sAttrName).getName();
                    }
                }
                sQueryOptionValue = (sSelectOption ? sSelectOption : null);
                break;
            }
            case "$filter": {
                var sFilterOption = null;
                if (this._oFilterExpression) {
                    sFilterOption = this._oFilterExpression.getURIFilterOptionValue();
                }
                sQueryOptionValue = (sFilterOption ? sFilterOption : null);
                break;
            }
            case "$orderby": {
                var sSortOption = null;
                if (this._oSortExpression) {
                    sSortOption = this._oSortExpression.getURIOrderByOptionValue();
                }
                sQueryOptionValue = (sSortOption ? sSortOption : null);
                break;
            }
            default:
                break;
            }

            return sQueryOptionValue;
        },

        /**
         * Get the unescaped URI to fetch the dimension members, optionally
         * augmented by text and attributes.
         *
         * @param {String}
         *            sServiceRootURI (optional) Identifies the root of the OData
         *            service
         * @returns {String} The unescaped URI that contains the OData resource path
         *          and OData system query options to express the request for the
         *          parameter value set..
         */
        getURIToDimensionMemberEntries : function(sServiceRootURI) {

            // construct resource path
            var sResourcePath = null;
            if (this._oDimension.getContainingQueryResult().getParameterization()) {
                if (!this._oParameterizationRequest) {
                    throw "Missing parameterization request";
                } else {
                    sResourcePath = this._oParameterizationRequest
                    .getURIToParameterizationEntry(sServiceRootURI)
                    + "/"
                    + this._oDimension.getContainingQueryResult().getParameterization()
                    .getNavigationPropertyToQueryResult();
                }
            } else {
                sResourcePath = (sServiceRootURI ? sServiceRootURI : "") + "/"
                + this._oDimension.getContainingQueryResult().getEntitySet().getQName();
            }

            // construct query options
            var sSelectOption = this.getURIQueryOptionValue("$select");
            var sFilterOption = this.getURIQueryOptionValue("$filter");
            var sSortOption = this.getURIQueryOptionValue("$orderby");

            var sURI = sResourcePath;
            var bQuestionmark = false;

            if (sSelectOption) {
                sURI += "?$select=" + sSelectOption;
                bQuestionmark = true;
            }
            if (this._oFilterExpression && sFilterOption) {
                if (!bQuestionmark) {
                    sURI += "?";
                    bQuestionmark = true;
                } else {
                    sURI += "&";
                }
                sURI += "$filter=" + sFilterOption;
            }
            if (this._oSortExpression && sSortOption) {
                if (!bQuestionmark) {
                    sURI += "?";
                    bQuestionmark = true;
                } else {
                    sURI += "&";
                }
                sURI += "$orderby=" + sSortOption;
            }
            return sURI;
        },

        /**
         * Private member attributes
         */
        _oDimension : null,
        _oParameterizationRequest : null,
        _oFilterExpression : null,
        _oSortExpression : null,
        _oValueSetResult : null
};


//Desirable extensions:

//- Another class for representing value help entities to
//specifiy text properties, attribute properties (with association to
//sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Parameter and sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.Dimension)

//- ParameterValueSetRequest: Add option to read values from separate entity
//set (sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.ParameterValueSetRequest)

//- DimensionMemberSetRequest: Add option to read values from separate master
//data entity
//set (sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.DimensionMemberSetRequest)

//DONE - value rendering: Add support for types other than string
//(sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.helper.renderPropertyKeyValue)

//- filter expressions are validated against filter restriction annotations
//(sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.FilterExpression)

//- Implemenentation of filter expressions shall use SAPUI5 class
//sap.ui.model.Filter. Problem:
//This class does not provide accessor methods for object attributes.
//(sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.FilterExpression)

//- Shield API implementation from direct access to object properties.
//Introduce closures for this purpose.
/*
 * Pattern: sap.ushell.components.tiles.indicatorTileUtils.odata4analytics.QueryResult = (function ($){ var _init =
 * func
 *
 * var class = function(oEntityType, oEntitySet, oParameterization) {
 * _init(oEntityType, oEntitySet, oParameterization); }; }; return class;
 * })(jQuery);
 *
 */

}; // end of sap/ushell/components/tiles/indicatorTileUtils/oData4Analytics.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.indicatorTileUtils.smartBusinessUtil') ) {
jQuery.sap.declare("sap.ushell.components.tiles.indicatorTileUtils.smartBusinessUtil");


/* this is poor coding according to eslint and other general programming rules, (ever heard of use strict?)*/
/*eslint-disable no-cond-assign*/
/*eslint-disable no-nested-ternary*/
/*eslint-disable no-unused-vars*/
/*eslint-disable no-undef*/  /* likely indicates error */
/*eslint-disable no-inner-declarations*/

sap = sap || {};
sap.ushell = sap.ushell || {};
sap.ushell.components = sap.ushell.components || {};
sap.ushell.components.tiles.indicatorTileUtils = sap.ushell.components.tiles.indicatorTileUtils || {};
sap.ushell.components.tiles.indicatorTileUtils.util = sap.ushell.components.tiles.indicatorTileUtils.util || {};

sap.ushell.components.tiles.indicatorTileUtils.util = (function(global, $) {
    var fetchAuthToken = function() {
        var obj = {};
        $.ajax({
            type: "GET",
            async : false,
            dataType : "json",
            url: "/sap/hba/apps/kpi/s/logic/__token.xsjs",
            headers: {
                "X-CSRF-Token": "Fetch"
            },
            success: function( data, status, xhr ) {
                obj.userName = data.userName;
                obj.token = xhr.getResponseHeader("X-CSRF-Token");
            },
            error: function() {
                $.sap.log.error("Error Fetching AUTH TOKEN");
            }
        });
        return obj;
    };

    var getArray = function(stringArray) {
        var retArray = [];
        for (var itr = 0; itr < stringArray.length; itr++) {
            retArray.push(JSON.parse(stringArray[itr]));
        }
        return retArray;
    };

    "use strict";
    var cache = {};
    return {
        getAuthToken : function() {
            return fetchAuthToken().token;
        },
        getHanaUser : function() {
            return authObject.userName;
        },
        getEdmType : function(sUri, propertyName) {
            var oDataModel = null;
            if (sUri instanceof sap.ui.model.odata.ODataModel) {
                oDataModel = sUri;
            } else  {
                oDataModel = this.getODataModelByServiceUri(sUri);
            }
            if (oDataModel && oDataModel.getServiceMetadata()) {
                var serviceMetaData = oDataModel.getServiceMetadata();
                var entitySets = serviceMetaData.dataServices.schema[0].entityType;
                if (entitySets) {
                    for (var i = 0; i < entitySets.length; i++) {
                        var entity = entitySets[i];
                        var properties = entity.property;
                        for (var j = 0; j < properties.length; j++) {
                            var property = properties[j];
                            if (property.name == propertyName) {
                                return property.type;
                            }
                        }
                    }
                }
            }
            return null;
        },

        getODataModelByServiceUri : function(sServiceUri) {
            sServiceUri = this.addSystemToServiceUrl(sServiceUri);
            if (!cache[sServiceUri]) {
                var oModel = new sap.ui.model.odata.ODataModel(sServiceUri,true);
                cache[sServiceUri] = oModel;
            }
            return cache[sServiceUri];
        },

        addSystemToServiceUrl : function(url, system) {
            jQuery.sap.log.info("Hana Adapter --> Add System to Service Url");
            if (sap.ushell && sap.ushell.Container) {
                if (system) {
                    url = sap.ushell.Container.getService("URLParsing").addSystemToServiceUrl(url, system);
                } else {
                    url = sap.ushell.Container.getService("URLParsing").addSystemToServiceUrl(url);
                }
            }
            return url;
        },

        getMantissaLength : function(num){
            var sNum = num.toString();
            var initPos = 0;
            if (num < 0){
                initPos = 1;
            }
            return (sNum.indexOf('.') === -1 ) ? (num < 0 ? sNum.length - 1 : sNum.length) :
                sNum.substring(initPos, sNum.indexOf('.')).length;
        },

        getLocaleFormattedValue : function(num, oScale, oDecimal, isACurrencyMeasure, currencyCode){
            jQuery.sap.require("sap.ui.core.format.NumberFormat");
            isACurrencyMeasure = isACurrencyMeasure || false;
            currencyCode = currencyCode || null;
            if (isACurrencyMeasure) {
                return sap.ui.core.format.NumberFormat.getCurrencyInstance({style:"short", showMeasure: false}).format(num, currencyCode);
            }
            //var locale = new sap.ui.core.Locale(sap.ui.getCore().getConfiguration().getLanguage());
            var sD = 2;
            var oFormatOptions = {
                    style : "short"
            };
            var fNum;
            if (!(oDecimal == -1 || oDecimal == null)){
                oFormatOptions.shortDecimals = Number(oDecimal);
                oFormatOptions.minFractionDigits = Number(oDecimal);
                oFormatOptions.maxFractionDigits = Number(oDecimal);
            }
            var valFormatter = sap.ui.core.format.NumberFormat.getInstance(oFormatOptions);
            if (oScale == -2) {
                if (num > 9999) {
                    fNum = "????";
                } else if (num < 0.001) {
                    fNum = "0";
                } else {
                    if (num.toString().indexOf('.') != -1) {
                        fNum = Number(num).toFixed(4 - num.toString().indexOf('.'));
                    } else {
                        fNum = Number(num);
                    }
                    fNum = valFormatter.format(fNum);
                }
            } else if (oDecimal == -1 || oDecimal == null) {
                var mantissaLength  = this.getMantissaLength(num);
                if (!(mantissaLength % 3)) {
                    sD = 1;
                }
                if (mantissaLength % 3 === 1){
                    sD = 3;
                }
                if (mantissaLength % 3 === 2){
                    sD = 2;
                }
                if (Math.abs(num) % Math.pow(10, mantissaLength - 1) == 0) {
                    sD = 0;
                } else if ((Math.abs(num) % Math.pow(10, mantissaLength - 1)) < 6 * Math.pow(10, mantissaLength - 4)) {
                    sD = 0;
                }
                valFormatter = sap.ui.core.format.NumberFormat.getInstance({ style: "short" , shortDecimals:sD});
                fNum = valFormatter.format(num);
            } else {
                fNum = valFormatter.format(num);
            }
            return fNum;
        },

        getPlatform : function(sPlatform){
            return (jQuery.sap.getUriParameters().get("sb_metadata") || sPlatform || "HANA").toUpperCase();
        },

        getRunTimeUri : function(sPlatform){
            //if (this.getPlatform(sPlatform) == "HANA")
            if (sPlatform.toUpperCase() == "HANA") {
                return "/sap/hba/r/sb/core/odata/runtime/SMART_BUSINESS.xsodata";
            }
            return "/sap/opu/odata/SSB/SMART_BUSINESS_RUNTIME_SRV";
        },

        getTileTitleSubtitle: function(oChipApi){
            var titleObj = {};
            if (oChipApi.bag && oChipApi.bag.getBagIds() && oChipApi.bag.getBagIds().length){
                titleObj.title = oChipApi.bag.getBag("sb_tileProperties").getText("title") ||
                oChipApi.bag.getBag("sb_tileProperties").getProperty("title") ||
                oChipApi.preview.getTitle();
                titleObj.subTitle = oChipApi.bag.getBag("sb_tileProperties").getText("description") ||
                oChipApi.bag.getBag("sb_tileProperties").getProperty("description") ||
                oChipApi.preview.getDescription();
            } else {
                titleObj.title = oChipApi.preview.getTitle();
                titleObj.subTitle = oChipApi.preview.getDescription();
            }
            return titleObj;
        },

        getModelerRuntimeServiceModel : function() {
            return this.getODataModelByServiceUri("/sap/hba/apps/kpi/s/odata/smart_business_runtime_services.xsodata");
        },
        getSapFontErrorCode : function() {
            return String.fromCharCode(0xe0b1);
        },
        getSapFontBusyCode : function() {
            return String.fromCharCode(0xe1f2);
        },
        prepareFilterStructure : function(filter,addFilters){
            var variantData = [];
            if (addFilters){
                filter = filter.concat(addFilters);

            }

            for (var itr = 0; itr < filter.length; itr++){
                var pushObj = {};
                pushObj.comparator = filter[itr].OPERATOR;
                pushObj.filterPropertyName = filter[itr].NAME;

                if (filter[itr].ID) {
                    pushObj.id = filter[itr].ID;
                }

                pushObj.type = filter[itr].TYPE;
                pushObj.value = filter[itr].VALUE_1;
                pushObj.valueTo = filter[itr].VALUE_2;
                variantData.push(pushObj);
            }

            return variantData;
        },


        getODataModelByServiceUriFromChipAPI : function(sServiceUri,oTileApi) {
            sServiceUri = oTileApi.url.addSystemToServiceUrl(sServiceUri); 
            if (!cache[sServiceUri]) {
                var oModel = new sap.ui.model.odata.ODataModel(sServiceUri,true);
                cache[sServiceUri] = oModel;
            }
            return cache[sServiceUri];
        },

        getFilterFromRunTimeService: function(oConfig,oTileApi,fnS,fnE){
            var sPlatform = oConfig.TILE_PROPERTIES.sb_metadata;
            var KPI_RUNTIME_ODATA_MODEL =  this.getODataModelByServiceUriFromChipAPI(this.getRunTimeUri(sPlatform),oTileApi);
            var filterValue = "ID eq '#EVALUATIONID'".replace("#EVALUATIONID",oConfig.EVALUATION.ID);
            var kpiEvaluationFilterODataReadRef = KPI_RUNTIME_ODATA_MODEL.read("/EVALUATION_FILTERS", null, {"$filter" : filterValue}, true, function(data) {
                var filters = [];
                if (data.results.length){
                    filters = data.results;
                }
                fnS.call(this,filters);
            },fnE);
            return kpiEvaluationFilterODataReadRef;
        },

        findTextPropertyForDimension : function(sUri, entitySet, dimension) {
            try {
                var o4a = this._getOData4AnalyticsObject(sUri);
                var queryResult = o4a.findQueryResultByName(entitySet);
                var oDimension = queryResult.findDimensionByName(dimension);
                if (oDimension.getTextProperty()){
                    return oDimension.getTextProperty().name;
                } else {
                    return dimension;
                }
            } catch(e) {
                $.sap.log.error("Error Fetching Text Property for " + dimension + " : " + e.toString());
            }
        },

        getEvalValueMeasureName : function(oConfig, type, retType){
            var evalValue = oConfig.EVALUATION_VALUES;
            for (var i = 0; i < evalValue.length; i++){
                if (evalValue[i].TYPE == type) {
                    if (retType === "FIXED") {
                        return evalValue[i].FIXED;
                    } else {
                        return evalValue[i].COLUMN_NAME;
                    }
                }
            }
        },
        /**
         * get coded colorName
         */
        getSemanticColorName : function(applyColor){
            var status = "";
            if (applyColor == "Error") {
                status = "sb.error";
            }
            if (applyColor == "Neutral") {
                status = "sb.neutral";
            }
            if (applyColor == "Critical") {
                status = "sb.critical";
            }
            if (applyColor == "Good") {
                status = "sb.good";
            }
            return status;
        },
        /**
         * sets tooltip for tile
         * @param
         */
        setTooltipInTile: function(oControl, tileType ,valueObj){
            var toolTip = "";
            var oResourceBundle = sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle();
            if (tileType == "NT" || tileType == "DT"){
                if (valueObj.status) {
                    toolTip += oResourceBundle.getText("sb.status") + ": " + oResourceBundle.getText(valueObj.status) + "\n";
                }
                if (valueObj.actual) {
                    toolTip += oResourceBundle.getText("sb.actual") + ": " + valueObj.actual + "\n";
                }
                if (valueObj.target) {
                    toolTip += oResourceBundle.getText("sb.target") + ": " + valueObj.target + "\n";
                }
                if (valueObj.cH) {
                    toolTip += oResourceBundle.getText("sb.ch") + ": " + valueObj.cH + "\n";
                }
                if (valueObj.wH) {
                    toolTip += oResourceBundle.getText("sb.wh") + ": " + valueObj.wH + "\n";
                }
                if (valueObj.wL) {
                    toolTip += oResourceBundle.getText("sb.wl") + ": " + valueObj.wL + "\n";
                }
                if (valueObj.cL) {
                    toolTip += oResourceBundle.getText("sb.cl") + ": " + valueObj.cL + "\n";
                }
            }
            if (tileType == "CONT" || tileType == "COMP"){
                if (valueObj.measure && tileType == "CONT") {
                    toolTip += oResourceBundle.getText("sb.topn") + ": " + valueObj.measure + "\n";
                }
                if (valueObj.m1 && ((valueObj.v1 == undefined || valueObj.v1 == null) ? false : valueObj.v1.toString()) && valueObj.c1) {
                    toolTip += valueObj.m1 + ": " + valueObj.v1 + " " + oResourceBundle.getText(valueObj.c1) + "\n";
                }
                if (valueObj.m2 && ((valueObj.v2 == undefined || valueObj.v2 == null) ? false : valueObj.v2.toString()) && valueObj.c2) {
                    toolTip += valueObj.m2 + ": " + valueObj.v2 + " " + oResourceBundle.getText(valueObj.c2) + "\n";
                }
                if (valueObj.m3 && ((valueObj.v3 == undefined || valueObj.v3 == null) ? false : valueObj.v3.toString()) && valueObj.c3) {
                    toolTip += valueObj.m3 + ": " + valueObj.v3 + " " + oResourceBundle.getText(valueObj.c3) + "\n";
                }
            }
            oControl.setTooltip(toolTip);
        },
        /**
         * Read and initialize configuration object from given JSON string. Used by all indicator tiles.
         *
         * @param {string} sConfig
         *   Configuration string in JSON format
         * @returns {object}
         *   Returns parsed configuration object
         */
        _getFormattedTileProperties:function(tileProperties){
            tileProperties = tileProperties || {};
            var properties = ["sb_metadata","sb_navigation","sb_catalog"];
            var isPlatformPresent = false;
            for (var i = 0; !isPlatformPresent && i < properties.length; i++){
                isPlatformPresent = isPlatformPresent || jQuery.sap.getUriParameters().get(properties[i]) || tileProperties[properties[i]];
            }
            tileProperties.sb_metadata = (jQuery.sap.getUriParameters().get("sb_metadata") || tileProperties.sb_metadata || "HANA").toLowerCase();
            tileProperties.sb_navigation = (jQuery.sap.getUriParameters().get("sb_navigation") || tileProperties.sb_navigation || "abap").toLowerCase();
            tileProperties.sb_catalog = (jQuery.sap.getUriParameters().get("sb_catalog") || tileProperties.sb_catalog || "HANA").toLowerCase();
            tileProperties.isPlatformInfoPresent = isPlatformPresent;
            return tileProperties;
        },
        getParsedChip : function(sConfig, callback){
            var parsedChipConfig = {};
            var chipJson = JSON.parse(sConfig);
            var evaluationId = JSON.parse(chipJson.TILE_PROPERTIES).evaluationId || "";
            var that = this;
            if (chipJson.TAGS) {
                parsedChipConfig["TAGS"] = JSON.parse(chipJson.TAGS);
            }
            if (chipJson.ADDITIONAL_FILTERS) {
                parsedChipConfig["ADDITIONAL_FILTERS"] = JSON.parse(chipJson.ADDITIONAL_FILTERS);
            }
            if (chipJson.ADDITIONAL_APP_PARAMETERS) {
                parsedChipConfig["ADDITIONAL_APP_PARAMETERS"] = JSON.parse(chipJson.ADDITIONAL_APP_PARAMETERS);
            }

            parsedChipConfig.TILE_PROPERTIES = this._getFormattedTileProperties(JSON.parse(chipJson.TILE_PROPERTIES));

            var sPlatform = parsedChipConfig.TILE_PROPERTIES.sb_metadata;

            if (chipJson.EVALUATION_FILTERS) {
                parsedChipConfig["EVALUATION_FILTERS"] = JSON.parse(chipJson.EVALUATION_FILTERS);
                if (chipJson.EVALUATION_VALUES){
                    parsedChipConfig["EVALUATION_VALUES"] = JSON.parse(chipJson.EVALUATION_VALUES);
                    if (chipJson.EVALUATION){
                        parsedChipConfig.EVALUATION = JSON.parse(chipJson.EVALUATION);
                        callback(parsedChipConfig);
                    } else  {
                        that.getEvaluationDetailsFromRunTimeService("/EVALUATIONS",sPlatform, evaluationId, function(filters){
                            parsedChipConfig.EVALUATION = filters;
                            callback(parsedChipConfig);
                        });
                    }
                } else {
                    that.getEvaluationDetailsFromRunTimeService("/EVALUATION_VALUES", sPlatform,evaluationId, function(filters){
                        parsedChipConfig["EVALUATION_VALUES"] = filters;
                        if (chipJson.EVALUATION){
                            parsedChipConfig.EVALUATION = JSON.parse(chipJson.EVALUATION);
                            callback(parsedChipConfig);
                        } else {
                            that.getEvaluationDetailsFromRunTimeService("/EVALUATIONS", sPlatform,evaluationId, function(filters){
                                parsedChipConfig.EVALUATION = filters;
                                callback(parsedChipConfig);
                            });
                        }
                    });
                }
            } else {
                that.getEvaluationDetailsFromRunTimeService("/EVALUATION_FILTERS",sPlatform, evaluationId, function(filters){
                    parsedChipConfig["EVALUATION_FILTERS"] = filters;
                    if (chipJson.EVALUATION_VALUES){
                        parsedChipConfig["EVALUATION_VALUES"] = JSON.parse(chipJson.EVALUATION_VALUES);
                        if (chipJson.EVALUATION){
                            parsedChipConfig.EVALUATION = JSON.parse(chipJson.EVALUATION);
                            callback(parsedChipConfig);
                        } else {
                            that.getEvaluationDetailsFromRunTimeService("/EVALUATIONS", sPlatform,evaluationId, function(filters){
                                parsedChipConfig.EVALUATION = filters;
                                callback(parsedChipConfig);
                            });
                        }
                    } else {
                        that.getEvaluationDetailsFromRunTimeService("/EVALUATION_VALUES",sPlatform, evaluationId, function(filters){
                            parsedChipConfig["EVALUATION_VALUES"] = filters;
                            if (chipJson.EVALUATION){
                                parsedChipConfig.EVALUATION = JSON.parse(chipJson.EVALUATION);
                                callback(parsedChipConfig);
                            } else {
                                that.getEvaluationDetailsFromRunTimeService("/EVALUATIONS", sPlatform,evaluationId, function(filters){
                                    parsedChipConfig.EVALUATION = filters;
                                    callback(parsedChipConfig);
                                });
                            }
                        });
                    }
                });
            }

        },

        /**
         * Read entity set name and evaluation id and return the appropriate call results.
         *
         * @param {string} oEntitySet
         *   Entity set name
         * @param {string} oId
         *   Evaluation Id
         * @returns {object}
         *   Returns call results
         */

        getEvaluationDetailsFromRunTimeService: function(oEntitySet,sPlatform, oId, callback){
            var KPI_RUNTIME_ODATA_MODEL =  this.getODataModelByServiceUri(this.getRunTimeUri(sPlatform));
            var filterValue = "ID eq '#EVALUATIONID'".replace("#EVALUATIONID",oId);
            var kpiEvaluationFilterODataReadRef = KPI_RUNTIME_ODATA_MODEL.read(oEntitySet, null, {"$filter" : filterValue}, true, function(data) {
                var filters = [];
                if (data.results.length){
                    filters = data.results;
                }
                callback.call(this,filters);
            });
        },

        /**
         * Read and create external target Nav Hash
         *
         * @param {JSON} jConfig
         *  configuration object for CHIP
         * @return {string}
         *  Returns navigation hash
         */

        getNavigationTarget: function(jConfig,system){
            var fgetService = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService;
            var oCrossAppNavigator = fgetService && fgetService("CrossApplicationNavigation");
            var each;
            var param = {};
            param["evaluationId"] = jConfig.EVALUATION.ID;
            param["chipId"] = jConfig.TILE_PROPERTIES.id;
            if (system) {
                param["sap-system"] = system;
            }

            param["tileType"] = jConfig.TILE_PROPERTIES.tileType;

            if (jConfig.TILE_PROPERTIES.dimension) {
                param["dimension"] = jConfig.TILE_PROPERTIES.dimension;
            }
            if (jConfig.TILE_PROPERTIES.storyId) {
                param["storyId"] = jConfig.TILE_PROPERTIES.storyId;
            }
            if (jConfig.TILE_PROPERTIES.apfConfId) {
                param["sap-apf-configuration-id"] = jConfig.TILE_PROPERTIES.apfConfId;
            }
            if (jConfig.TILE_PROPERTIES.isPlatformInfoPresent){
                param["sb_metadata"] = jConfig.TILE_PROPERTIES.sb_metadata;
                param["sb_navigation"] = jConfig.TILE_PROPERTIES.sb_navigation;
                param["sb_catalog"] = jConfig.TILE_PROPERTIES.sb_catalog;
            }
            if (jConfig.ADDITIONAL_APP_PARAMETERS){
                for (each in jConfig.ADDITIONAL_APP_PARAMETERS){
                    if (jConfig.ADDITIONAL_APP_PARAMETERS.hasOwnProperty(each)){
                        if (jConfig.ADDITIONAL_APP_PARAMETERS[each].constructor == Array){
                            var addApp = jConfig.ADDITIONAL_APP_PARAMETERS[each];
                            for (var i = 0; i < addApp.length; i++) {
                                param[each] = addApp[i];
                            }
                        } else {
                            param[each] = jConfig.ADDITIONAL_APP_PARAMETERS[each];
                        }
                    }
                }
            }
            var toOurApp = oCrossAppNavigator && oCrossAppNavigator.hrefForExternal({
                target: {
                    semanticObject: jConfig.TILE_PROPERTIES.semanticObject,
                    action: jConfig.TILE_PROPERTIES.semanticAction
                },
                params: param
            }) || "";
            if (jConfig.ADDITIONAL_FILTERS){
                var addFilter = jConfig.ADDITIONAL_FILTERS;
                var addFilterString = "&";
                for (var j = 0; j < addFilter.length; j++){
                    if (addFilter[j].OPERATOR === "EQ") {
                        addFilterString = addFilterString + "/" + addFilter[j].NAME + "=" + addFilter[j].VALUE_1;
                    }
                }
                toOurApp += addFilterString;
            }
            return toOurApp;
        },

        /**
         * Read chipConfig object and return appropriate title
         *
         * @param {JSON} CHIP config
         *  configuration object for CHIP
         * @return {string}
         *  returns title for tile
         */
        getChipTitle: function(jConfig){
            var title = "";
            if (jConfig){
                var chipIndicator = jConfig.EVALUATION || {};
                title = chipIndicator.INDICATOR_TITLE || "";
            }
            return title;
        },

        getstringifyTileConfig: function(jConfig){
            var sConfig = {};
            sConfig.EVALUATION = JSON.stringify(jConfig.EVALUATION);
            sConfig.EVALUATION_FILTERS = JSON.stringify(jConfig.EVALUATION_FILTERS);
            sConfig.EVALUATION_VALUES = JSON.stringify(jConfig.EVALUATION_VALUES);
            sConfig.TILE_PROPERTIES = JSON.stringify(jConfig.TILE_PROPERTIES);
            return JSON.stringify(sConfig);
        },
        /**
         * Read chipConfig object and return appropriate subTitle
         *
         * @param {JSON} CHIP config
         *  configuration object for CHIP
         * @return {string}
         *  returns subtitle for tile
         */

        getChipSubTitle: function(jConfig){
            var sTitle = "";
            if (jConfig){
                var chipEvaluation = jConfig.EVALUATION || {};
                sTitle = chipEvaluation.TITLE || "";
            }
            return sTitle;
        },
        getFormattingMetadata: function(sUri, entitySet, propertyName) {
            var formattingMetadata = {};
            formattingMetadata._hasCurrency = false;
            formattingMetadata._hasSapText = false;

            var modelReferenceBy = null;
            if (sUri instanceof sap.ui.model.odata.ODataModel) {
                modelReferenceBy = sap.ui.model.analytics.odata4analytics.Model.ReferenceByModel(sUri);
            } else {
                var tempModel = this.getODataModelByServiceUri(sUri);
                modelReferenceBy = sap.ui.model.analytics.odata4analytics.Model.ReferenceByModel(tempModel);
            }
            var O4A = new sap.ui.model.analytics.odata4analytics.Model(modelReferenceBy);
            var queryResult = O4A.findQueryResultByName(entitySet);

            var measures = queryResult.getAllMeasures();

            if (measures[propertyName] ) {

                var sapTextPropertyName = (measures[propertyName]._oTextProperty && measures[propertyName]._oTextProperty.name) ?
                        measures[propertyName]._oTextProperty.name : "";

                        if (sapTextPropertyName != "") {
                            formattingMetadata._hasSapText = true;
                            formattingMetadata._sapTextColumn = sapTextPropertyName;
                        } else if (measures[propertyName].hasOwnProperty("_oUnitProperty")){
                            var extensions = measures[propertyName]._oUnitProperty.extensions;
                            for (var i = 0; i < measures[propertyName]._oUnitProperty.extensions.length; i++) {
                                if (extensions[i].name === "semantics" && extensions[i].value === "currency-code") {
                                    formattingMetadata._hasCurrency = true;
                                    formattingMetadata._currencyColumn =  measures[propertyName]._oUnitProperty.name;
                                }
                            }
                        }
            }

            return formattingMetadata;
        },
        /**
         * Returns fully formed oData Query URI using oData4Analytics Library
         *
         * @param {string} sUri
         *   oData entry URI
         * @param {string} entitySet
         *   entitySet in oDataURI for query
         * @param {string} measure
         *   aggregation of value on column name measure
         * @param {string} dimension
         *   aggregation of value on column name group by dimension
         * @param {JSON} variants
         *   $filter parameter in oData URI
         * @param {string} orderByElements
         *   orderBy either asc or desc
         * @param {string} top
         *   how many top values to select
         * @returns {string}
         *   Returns fully formed oData URI
         */

        prepareQueryServiceUri : function(sUri, entitySet, measure, dimension, variants, orderByElements, top) {
            function _replaceSingleQuoteWithDoubleSingleQuote(str) {
                return str.replace(/'/g,"''");
            }
            var tmpDimension = null;
            try {
                var modelReferenceBy = null;
                if (sUri instanceof sap.ui.model.odata.ODataModel) {
                    modelReferenceBy = sap.ui.model.analytics.odata4analytics.Model.ReferenceByModel(sUri);
                } else {
                    var tempModel = this.getODataModelByServiceUri(sUri);
                    modelReferenceBy = sap.ui.model.analytics.odata4analytics.Model.ReferenceByModel(tempModel);
                }
                var O4A = new sap.ui.model.analytics.odata4analytics.Model(modelReferenceBy);
                var oQueryResult = O4A.findQueryResultByName(entitySet);
                var oQueryResultRequest = new sap.ui.model.analytics.odata4analytics.QueryResultRequest(oQueryResult);
                if (measure) {
                    oQueryResultRequest.setMeasures(measure.split(","));
                    oQueryResultRequest.includeMeasureRawFormattedValueUnit(null, true, true, true);
                }
                if (dimension) {
                    if (typeof dimension == "string") {
                        tmpDimension = dimension;
                        tmpDimension = tmpDimension.split(",");
                    }

                    for (var i = 0; i < tmpDimension.length; i++) {
                        oQueryResultRequest.addToAggregationLevel([tmpDimension[i]]);
                        var tmp = oQueryResult.getAllDimensions();
                        if (tmp[tmpDimension[i]].getTextProperty() != null) {
                            oQueryResultRequest.includeDimensionKeyTextAttributes([tmpDimension[i]], true, true, null);
                        }
                    }
//                  oQueryResultRequest.setAggregationLevel(dimension.split(","));
//                  oQueryResultRequest.includeDimensionKeyTextAttributes(null, true, false, null);
                }

                if (variants && variants.length) {
                    var filterVariants = [];
                    var inputParamsVariants = [];
                    for (var i = 0, l = variants.length; i < l; i++) {
                        var each = variants[i];
                        if (each.type === "PA") {
                            inputParamsVariants.push(each);
                        } else if (each.type === "FI") {
                            filterVariants.push(each);
                        }
                    }
                    function changeToYYYYMMDDHHMMSS(odate){
                        var dateStr = odate.toJSON();
                        var lastChar = dateStr.charAt(dateStr.length - 1).toUpperCase();
                        if (lastChar.charCodeAt(0) >= 65 && lastChar.charCodeAt(0) <= 90) {
                            dateStr = dateStr.slice(0, -1);
                        }
                        return dateStr;
                    }
                    function _processODataDateTime(junkValue) {
                        if (junkValue) {
                            try {
                                if (junkValue == +junkValue) {
                                    junkValue = window.parseInt(junkValue);
                                }
                                var date = new Date(junkValue);
                                var time = date.getTime();
                                if (isNaN(time)) {
                                    return junkValue;
                                } else {
                                    return changeToYYYYMMDDHHMMSS(date);
                                }
                            }catch(e) {

                            }
                        }
                        return junkValue;
                    }
                    if (filterVariants.length) {
                        var oFilterExpression = oQueryResultRequest.getFilterExpression();
                        for (var i = 0, l = filterVariants.length; i < l; i++) {
                            var each = filterVariants[i];
                            if (this.getEdmType(sUri,each.filterPropertyName) == "Edm.DateTime") {
                                each.value = _processODataDateTime(each.value);
                                each.valueTo = _processODataDateTime(each.valueTo);
                            }
                            if (each.comparator == sap.ui.model.FilterOperator.BT) {
                                oFilterExpression.addCondition(each.filterPropertyName,each.comparator,_replaceSingleQuoteWithDoubleSingleQuote(each.value),each.valueTo);
                            } else {
                                var multipleFilterValueArray = each.value.split(",");
                                for (var j = 0, k = multipleFilterValueArray.length; j < k; j++) {
                                    oFilterExpression.addCondition(each.filterPropertyName,each.comparator,_replaceSingleQuoteWithDoubleSingleQuote(multipleFilterValueArray[j].replace(/\^\|/g,",")),null);
                                }
                            }

                        }
                    }
                    if (inputParamsVariants.length) {
                        if (oQueryResult.getParameterization()) {
                            var oParamRequest = new sap.ui.model.analytics.odata4analytics.ParameterizationRequest(oQueryResult.getParameterization());
                            var paramererizationObj = oQueryResult.getParameterization();
                            var eachInputParam, findParameter, fromVal,toVal,toValParam;
                            for (var y = 0, z = inputParamsVariants.length; y < z; y++) {
                                eachInputParam = inputParamsVariants[y];
                                findParameter = paramererizationObj.findParameterByName(eachInputParam.filterPropertyName);
                                if (findParameter.isIntervalBoundary() === true && findParameter.isLowerIntervalBoundary() === true){
                                    //peerInterval = findParameter.getPeerIntervalBoundaryParameter();
                                    toValParam = findParameter.getPeerIntervalBoundaryParameter();
                                    for (var i = 0, l = inputParamsVariants.length; i < l; i++) {
                                        if (inputParamsVariants[i].filterPropertyName === toValParam.getName()) {
                                            toVal = _replaceSingleQuoteWithDoubleSingleQuote(inputParamsVariants[i].value);
                                            break;
                                        }
                                    }
                                    fromVal = _replaceSingleQuoteWithDoubleSingleQuote(eachInputParam.value);
                                    if (toVal) {
                                        oParamRequest.setParameterValue(eachInputParam.filterPropertyName,fromVal,toVal);

                                    }
                                } else if (findParameter.isIntervalBoundary() === true && findParameter.isLowerIntervalBoundary() === false) {
                                    // Do nothing for upper Boundary
                                    jQuery.sap.log.info("Future development");
                                } else {
                                    oParamRequest.setParameterValue(eachInputParam.filterPropertyName,_replaceSingleQuoteWithDoubleSingleQuote(eachInputParam.value));
                                }
                            }
                            oQueryResultRequest.setParameterizationRequest(oParamRequest);
                        }
                    }
                }
                var finalUri = oQueryResultRequest.getURIToQueryResultEntries();

                if (orderByElements && orderByElements.length) {
                    //finalUri = finalUri+"&$orderby="+orderByElements.join(",");
                    finalUri = finalUri + "&$orderby=";
                    for (var y = 0, z = orderByElements.length; y < z; y++) {
                        var order = orderByElements[y].sortOrder || "asc";
                        if (order) {
                            finalUri += orderByElements[y].element + " " + order + ",";
                        }
                    }
                    finalUri = finalUri.slice(0,finalUri.length - 1);
                }

                if (top) {
                    finalUri = finalUri + "&$top=" + top;
                }

                var oMeasureNames = oQueryResult.getAllMeasures();
                var unit = [];
                for (var i = 0; i < measure.split(",").length; i++) {
                    unit.push(oMeasureNames[measure.split(",")[i]].getUnitProperty());
                }


                return {
                    uri : finalUri,
                    model : O4A.getODataModel(),
                    unit : unit
                };
            } catch(e) {
                $.sap.log.error("Error Preparing Query Service Uri using OData4Analytics Library : " + e.toString());
                if (arguments.length) {
                    $.sap.log.error("Arguments Passed to this function");
                    $.sap.log.error(arguments[0] + "," + arguments[1] + "," + arguments[2] + "," + arguments[3]);
                } else {
                    $.sap.log.error("NO Arguments passed to this function");
                }
                return null;
            }
        },
        _getOData4AnalyticsObject  : function(sUri) {
            var oModel = null;
            if (sUri instanceof sap.ui.model.odata.ODataModel) {
                oModel = sUri;
            } else if (typeof sUri == "string") {
                oModel = this.getODataModelByServiceUri(sUri);
            } else {
                throw new Error("Invalid Input to Create ODataModel Object : " + sUri);
            }
            var O4A = new sap.ui.model.analytics.odata4analytics.Model(sap.ui.model.analytics.odata4analytics.Model.ReferenceByModel(oModel));
            return O4A;
        },
        getAllEntitySet : function(sUri) {
            var entitySets = [];
            try {
                var o4a = this._getOData4AnalyticsObject(sUri);
                entitySets = o4a.getAllQueryResultNames();
            } catch(e) {
                $.sap.log.error("Error fetching Enity Set : " + e.toString());
            }
            return entitySets;

        },
        getAllMeasures : function(sUri, entitySet) {
            var measures = [];
            try {
                var o4a = this._getOData4AnalyticsObject(sUri);
                var queryResult = o4a.findQueryResultByName(entitySet);
                measures = queryResult.getAllMeasureNames();
            } catch(e) {
                $.sap.log.error("Error Fetching All Measures : " + e.toString());
            }
            return measures;
        },
        getAllMeasuresWithLabelText : function(sUri, entitySet) {
            var measures = [];
            try {
                var o4a = this._getOData4AnalyticsObject(sUri);
                var queryResult = o4a.findQueryResultByName(entitySet);
                var measureNames = queryResult.getAllMeasureNames();
                for (var i = 0; i < measureNames.length; i++) {
                    var each = measureNames[i];
                    global.oMeasure = queryResult.findMeasureByName(each);
                    measures.push({
                        key : each,
                        value : oMeasure.getLabelText()  // omeasure? global, likely a bug?
                    });
                }
            } catch(e) {
                $.sap.log.error("Error Fetching All Measures : " + e.toString());
            }
            return measures;
        },
        getAllDimensions : function(sUri, entitySet) {
            function intersectionOfArray(array1, array2) {
                var ai = 0, bi = 0;
                var result = [];
                while ( ai < array1.length && bi < array2.length ) {
                    if      (array1[ai] < array2[bi] ){
                        ai++;
                    } else if (array1[ai] > array2[bi] ){
                        bi++;
                    } else { /* they're equal */
                        result.push(array1[ai]);
                        ai++;
                        bi++;
                    }
                }
                return result;
            }
            var dimensions = [];
            var aFilterablePropertyNames = [];
            try {
                var o4a = this._getOData4AnalyticsObject(sUri);
                var queryResult = o4a.findQueryResultByName(entitySet);
                var entityType = queryResult.getEntityType();
                aFilterablePropertyNames = entityType.getFilterablePropertyNames();
                dimensions = queryResult.getAllDimensionNames();
                if (aFilterablePropertyNames && aFilterablePropertyNames.length) {
                    dimensions = intersectionOfArray(aFilterablePropertyNames.sort(),dimensions.sort());
                }
            } catch(e) {
                $.sap.log.error("Error Fetching All Dimesions : " + e.toString());
            }
            return dimensions;
        },
        getAllDimensionsWithLabelText : function(sUri, entitySet) {
            var dimensions = [];
            try {
                var o4a = this._getOData4AnalyticsObject(sUri);
                var queryResult = o4a.findQueryResultByName(entitySet);
                var dimensionNames = queryResult.getAllDimensionNames();
                for (var i = 0; i < dimensionNames.length; i++) {
                    var each = dimensionNames[i];
                    var oDimension = queryResult.findDimensionByName(each);
                    var textProperty = null;
                    if (oDimension.getTextProperty() != null) {
                        textProperty = oDimension.getTextProperty().name;
                    }
                    dimensions.push({
                        key : each,
                        value : oDimension.getLabelText(),
                        textProperty: textProperty
                    });
                }
            } catch(e) {
                $.sap.log.error("Error Fetching All Dimesions : " + e.toString());
            }
            return dimensions;
        },
        getAllInputParams : function(sUri, entitySet) {
            var inputParams = [];
            try {
                var o4a = this._getOData4AnalyticsObject(sUri);
                var queryResult = o4a.findQueryResultByName(entitySet);
                if (queryResult.getParameterization()) {
                    var oParams = queryResult.getParameterization();
                    inputParams = oParams.getAllParameterNames();
                }
            } catch(e) {
                $.sap.log.error("Error Fetching Input Params : " + e.toString());
            }
            return inputParams;
        },
        getAllInputParamsWithFlag : function(sUri, entitySet) {
            var inputParams = [];
            try {
                var o4a = this._getOData4AnalyticsObject(sUri);
                var queryResult = o4a.findQueryResultByName(entitySet);
                if (queryResult.getParameterization()) {
                    var oParams = queryResult.getParameterization();
                    var inputParamsArray = oParams.getAllParameterNames();
                    for (var i = 0; i < inputParamsArray.length; i++) {
                        var each = inputParamsArray[i];
                        var paramObject  = oParams.findParameterByName(each);
                        inputParams.push({
                            name : each,
                            optional : paramObject.isOptional()
                        });
                    }
                }
            } catch(e) {
                $.sap.log.error("Error Fetching Input Params : " + e.toString());
            }
            return inputParams;
        },

        formatOdataObjectToString : function (value){
            if (value && value.constructor == Object){
                if (value.__edmType == "Edm.Time"){
                    var milliseconds = value.ms;
                    var seconds = Math.floor((milliseconds / 1000) % 60);
                    var minutes = Math.floor((milliseconds / 60000) % 60);
                    var hours   = Math.floor((milliseconds / 3600000) % 24);
                    return hours + "H" + minutes + "M" + seconds + "S";
                }
            }
            return value;
        },
        generateCombinations:function (array){
            function getPerfectBinary(maxLength,str){
                while (str.length < maxLength){
                    str = '0' + str;
                }
                return str;
            }
            var max = Math.pow(2,array.length);
            var resultArray = [];
            var index = 0;

            while (max > 1){
                var str = (max - 1).toString(2);
                str = getPerfectBinary(array.length,str);
                resultArray[index] = [];
                for (var i = 0; i < str.length; i++){
                    if (Number(str[i])) {
                        resultArray[index].push(array[i]);
                    }
                }
                max--;
                index++;
            }
            return resultArray;
        },

        logError : function(err,oControl){
            if (err == "no data" && oControl){
                var oResourceBundle = sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle();
                oControl.setFailedText(oResourceBundle.getText("sb.noData"));
            }
            jQuery.sap.log.error(err.toString());
        },

        numberOfLeadingZeros : function(num) {
            num = String(num);
            var count = 0;
            var decimal_index = num.indexOf('.');
            if (decimal_index == -1) {
                return 0;
            }
            if (Number(num.split('.')[0]) != 0) {
                return 0;
            }
            var i = decimal_index + 1;
            while (num[i++] == '0') {
                ++count;
            }
            return count;
        },

        formatValue : function (val,scaleFactor,MAX_LEN) {
            MAX_LEN = MAX_LEN || 3;
            var unit = {3: "K", 6: "M", 9: "B", 12: "T", 0: ""};
            unit["-3"] = "m";
            unit["-6"] = "u";
            unit["-9"] = "n";
            unit["-12"] = "t";
            unit["-2"] = "%";
            var temp,pre,suff;
            temp = Number(val).toPrecision(MAX_LEN);
            var zeroes = this.numberOfLeadingZeros(temp);
            if (zeroes > 0 && scaleFactor < 0){
                pre = temp * Math.pow(10,zeroes + MAX_LEN);
                suff = -(zeroes + MAX_LEN);
            } else {
                pre = Number(temp.split("e")[0]);
                suff = Number(temp.split("e")[1]) || 0;
            }
            if (!val && val != 0) {
                return {value:"",unitPrefix:""};
            }
            if (scaleFactor >= 0) {
                if (suff % 3 != 0){
                    if (suff % 3 == 2){
                        if (suff + 1 == scaleFactor){
                            suff = suff + 1;
                            pre = pre / 10;
                        } else {
                            suff = suff - 2;
                            pre = pre * 100;
                        }
                    } else {
                        if (suff + 2 == scaleFactor){
                            suff = suff + 2;
                            pre = pre / 100;
                        } else {
                            suff--;
                            pre = pre * 10;
                        }
                    }
                } else if (suff == 15) {
                    pre = pre * 1000;
                    suff = 12;
                }
            } else { // for negative scale factor and suff
                if (scaleFactor == "-2"){
                    var x = this.formatValue((val * 100), 0);
                } else if (suff >= 0 && val < 10 && scaleFactor == "-3") {
                    pre = val * Math.pow(10,3);
                    suff = -3;
                } else if (suff >= 0) {
                    return this.formatValue(val, 0);
                } else {
                    suff = Math.abs(suff);
                    scaleFactor = Math.abs(scaleFactor);
                    if (scaleFactor > suff){
                        pre = pre / (Math.pow(10, suff % 3));
                        suff = suff - (suff % 3);
                    } else {
                        var diff = suff - scaleFactor;
                        pre = pre / (Math.pow(10,diff));
                        suff  = suff - diff;
                    }
                    suff = 0 - suff;
                }

            }
            // ending of neg scale factor
            pre += "";
            if (scaleFactor == "-2"){
                var valstr = (x.unitPrefix == "") ? Number(x.value + "").toFixed(4 - (x.value + "").indexOf('.')) : Number(x.value + "").toFixed(3 - (x.value + "").indexOf('.'));
                return {value: Number(valstr), unitPrefix: (x.unitPrefix) + unit[-2]};
            }
            pre = Number(pre).toFixed(4 - pre.indexOf('.'));
            return {value:Number(pre),unitPrefix:unit[suff]};
        },
        getHanaClient : function(){
            var sessionClient;
            var deferred = sap.ushell.components.tiles.indicatorTileUtils.util.HANA_CLIENT_DEFERRED || jQuery.Deferred();
            var cacheHanaClient = sap.ushell.components.tiles.indicatorTileUtils.cache.getCacheHanaClient();
            if (cacheHanaClient != undefined) {
                sessionClient = cacheHanaClient;
                sap.ushell.components.tiles.indicatorTileUtils.util.HANA_CLIENT_DEFERRED.resolve(sessionClient);
            } else if (sap.ushell.components.tiles.indicatorTileUtils.util.HANA_CLIENT_DEFERRED) {
                return sap.ushell.components.tiles.indicatorTileUtils.util.HANA_CLIENT_DEFERRED.promise();
            } else {
                sap.ushell.components.tiles.indicatorTileUtils.util.HANA_CLIENT_DEFERRED = deferred;
                jQuery.ajax({
                    type: "GET",
                    async: false,
                    dataType: "json",
                    url: "/sap/hba/r/sb/core/logic/GetSessionClient.xsjs",
                    success: function(d, s, x) {
                        sessionClient = d.sessionClient;
                        sap.ushell.components.tiles.indicatorTileUtils.cache.setCacheHanaClient(sessionClient);
                        sap.ushell.components.tiles.indicatorTileUtils.util.HANA_CLIENT_DEFERRED.resolve(sessionClient);
                    },
                    error: function(jqXHR, textStatus, errorThrown) {
                        jQuery.sap.log.error(jqXHR.responseText);
                        jQuery.sap.log.error("session client call failed");
                        sap.ushell.components.tiles.indicatorTileUtils.cache.setCacheHanaClient(null);
                        sap.ushell.components.tiles.indicatorTileUtils.util.HANA_CLIENT_DEFERRED.reject();
                    }
                });
            }
            return sap.ushell.components.tiles.indicatorTileUtils.util.HANA_CLIENT_DEFERRED.promise();
            //return sessionClient;
        },        
        abortPendingODataCalls : function(oDataCallRef){
            try {
                if (oDataCallRef) {
                    oDataCallRef.abort();
                }
            } catch(e) {
                this.logError(e);
            }
        }
    };

})(window, jQuery);

sap.ushell.components.tiles.indicatorTileUtils.cache = (function() {
	var BIGMAP = {};
	var KPIVALUE = {};
	var sessionContext = "HANA_CLIENT";
	return {
		getCacheHanaClient : function(){
//			if(BIGMAP[sessionContext]){
//			return BIGMAP[sessionContext];
//			}
//			return null;
			return BIGMAP[sessionContext];
		},
		setCacheHanaClient : function(data){
			BIGMAP[sessionContext] = data;
		},
		getEvaluationById : function(key) {
			return this.getEvaluationByChipId(key);
		},
		getEvaluationByChipId : function(key) {
			if (BIGMAP[key]) {
				return BIGMAP[key];
			}
			return null;
		},
		setEvaluationById : function(key, data) {
			BIGMAP[key] = data;
		},
		getKpivalueById : function(key){
			if (KPIVALUE[key]) {
				return KPIVALUE[key];
			}
			return null;
		},
		setKpivalueById : function(key, data) {
			KPIVALUE[key]  = data;
		}
	};
})();

}; // end of sap/ushell/components/tiles/indicatorTileUtils/smartBusinessUtil.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.indicatorcomparison.ComparisonTile.view') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.indicatorcomparison.ComparisonTile.view');
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

//Comparison Tile
(function () {
    "use strict";
    /*global jQuery, sap */
    /*jslint nomen: true */

    
    jQuery.sap.require('sap.ui.model.analytics.odata4analytics'); // unlisted dependency retained

    jQuery.sap.require('sap.ca.ui.model.format.NumberFormat'); // unlisted dependency retained

    sap.ui.getCore().loadLibrary("sap.suite.ui.commons");

    sap.ui.jsview("tiles.indicatorcomparison.ComparisonTile", {
        getControllerName: function () {
            return "tiles.indicatorcomparison.ComparisonTile";
        },
        createContent: function (oController) {
            this.setHeight('100%');
            this.setWidth('100%');

            var that = this;
            that.tileData;

            that.oGenericTileData = {
//                    subheader : "Lorem Ipsum SubHeader",
//                    header : "Lorem Ipsum Header",
//                    value: 8888,
//                    size: sap.suite.ui.commons.InfoTileSize.Auto,
//                    frameType:"OneByOne",
//                    state: sap.suite.ui.commons.LoadState.Loading,
//                    valueColor:sap.suite.ui.commons.InfoTileValueColor.Error,
//                    indicator: sap.suite.ui.commons.DeviationIndicator.None,
//                    title : "US Profit Margin",
//                    footer : "Current Quarter",
//                    description: "Maximum deviation",
//                    data: [
//                           { title: "Americas", value: 10, color: "Neutral" },
//                           { title: "EMEA", value: 50, color: "Neutral" },
//                           { title: "APAC", value: -20, color: "Neutral" }
//                           ],
            };

            that.oCmprsDataTmpl = new sap.suite.ui.commons.ComparisonData({
                title : "{title}",
                value : "{value}",
                color : "{color}",
                displayValue : "{displayValue}"
            });

            that.oCmprsChrtTmpl = new sap.suite.ui.commons.ComparisonChart(
                    {
                        size : "{/size}",
                        scale : "{/scale}",
                        data : {
                            template : that.oCmprsDataTmpl,
                            path : "/data"
                        }
                    });

            that.oComparisonTile = new sap.suite.ui.commons.TileContent({
                unit : "{/unit}",
                size : "{/size}",
                footer : "{/footerComp}",
                content : that.oCmprsChrtTmpl
            });


            that.oGenericTile = new sap.suite.ui.commons.GenericTile({
                subheader : "{/subheader}",
                frameType : "{/frameType}",
                size : "{/size}",
                header : "{/header}",
                tileContent : [that.oComparisonTile]//that.oComparisonTile]
            });


            that.oGenericTileModel = new sap.ui.model.json.JSONModel();
            that.oGenericTileModel.setData(that.oGenericTileData);
            that.oGenericTile.setModel(that.oGenericTileModel);

            return that.oGenericTile;


        }
    });
}());

}; // end of sap/ushell/components/tiles/indicatorcomparison/ComparisonTile.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.indicatorcontribution.ContributionTile.view') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.indicatorcontribution.ContributionTile.view');
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

//Comparison Tile
(function () {
    "use strict";
    /*global jQuery, sap */
    /*jslint nomen: true */

    
    jQuery.sap.require('sap.ui.model.analytics.odata4analytics'); // unlisted dependency retained

    jQuery.sap.require('sap.ca.ui.model.format.NumberFormat'); // unlisted dependency retained

    sap.ui.getCore().loadLibrary("sap.suite.ui.commons");

    sap.ui.jsview("tiles.indicatorcontribution.ContributionTile", {
        getControllerName: function () {
            return "tiles.indicatorcontribution.ContributionTile";
        },
        createContent: function (oController) {
            this.setHeight('100%');
            this.setWidth('100%');

            var that = this;
            that.tileData;

            that.oGenericTileData = {
//                    subheader : "Lorem Ipsum SubHeader",
//                    header : "Lorem Ipsum Header",
//                    value: 8888,
//                    size: sap.suite.ui.commons.InfoTileSize.Auto,
//                    frameType:"OneByOne",
//                    state: sap.suite.ui.commons.LoadState.Loading,
//                    valueColor:sap.suite.ui.commons.InfoTileValueColor.Error,
//                    indicator: sap.suite.ui.commons.DeviationIndicator.None,
//                    title : "US Profit Margin",
//                    footer : "Current Quarter",
//                    description: "Maximum deviation",
//                    data: [
//                           { title: "Americas", value: 10, color: "Neutral" },
//                           { title: "EMEA", value: 50, color: "Neutral" },
//                           { title: "APAC", value: -20, color: "Neutral" }
//                           ],
            };


            that.oCmprsDataTmpl = new sap.suite.ui.commons.ComparisonData({
                title : "{title}",
                value : "{value}",
                color : "{color}",
                displayValue : "{displayValue}"
            });

            that.oCmprsChrtTmpl = new sap.suite.ui.commons.ComparisonChart({
                size : "{/size}",
                scale : "{/scale}",
                data : {
                    template : that.oCmprsDataTmpl,
                    path : "/data"
                }
            });

            that.oComparisonTile = new sap.suite.ui.commons.TileContent({
                unit : "{/unit}",
                size : "{/size}",
                footer : "{/footerComp}",
                content : that.oCmprsChrtTmpl
            });


            that.oGenericTile = new sap.suite.ui.commons.GenericTile({
                subheader : "{/subheader}",
                frameType : "{/frameType}",
                size : "{/size}",
                header : "{/header}",
                tileContent : [that.oComparisonTile]
            });


            that.oGenericTileModel = new sap.ui.model.json.JSONModel();
            that.oGenericTileModel.setData(that.oGenericTileData);
            that.oGenericTile.setModel(that.oGenericTileModel);

            return that.oGenericTile;


        }
    });
}());

}; // end of sap/ushell/components/tiles/indicatorcontribution/ContributionTile.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.indicatordeviation.DeviationTile.view') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.indicatordeviation.DeviationTile.view');
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap */
    /*jslint nomen: true */

    
    jQuery.sap.require('sap.ui.model.analytics.odata4analytics'); // unlisted dependency retained

    jQuery.sap.require('sap.ca.ui.model.format.NumberFormat'); // unlisted dependency retained

    sap.ui.getCore().loadLibrary("sap.suite.ui.commons");

    sap.ui.jsview("tiles.indicatordeviation.DeviationTile", {
        getControllerName: function () {
            return "tiles.indicatordeviation.DeviationTile";
        },
        createContent: function (oController) {
            this.setHeight('100%');
            this.setWidth('100%');
            //var preview = this.getViewData().chip.preview;
            var header = "Lorem ipsum";
            var subheader =  "Lorem ipsum";
            var titleObj = sap.ushell.components.tiles.indicatorTileUtils.util.getTileTitleSubtitle(this.getViewData().chip);
            if (titleObj.title && titleObj.subTitle){
                header = titleObj.title;
                subheader = titleObj.subTitle;
            }
            var deviationTileData = {
                    subheader : subheader,
                    header : header,
                    footerNum : "",
                    footerComp : "",
                    frameType:"OneByOne",
                    state: sap.suite.ui.commons.LoadState.Loading,
                    scale: ""
//                    actual: { value: 120, color: sap.suite.ui.commons.InfoTileValueColor.Good},
//                    targetValue: 100,
//                    thresholds: [
//                                 { value: 0, color: sap.suite.ui.commons.InfoTileValueColor.Error },
//                                 { value: 50, color: sap.suite.ui.commons.InfoTileValueColor.Critical },
//                                 { value: 150, color: sap.suite.ui.commons.InfoTileValueColor.Critical },
//                                 { value: 200, color: sap.suite.ui.commons.InfoTileValueColor.Error }
//                                 ],
//                    showActualValue: true,
//                    showTargetValue: true
            };

            var oBCDataTmpl = new sap.suite.ui.commons.BulletChartData({
                value: "{value}",
                color: "{color}"
            });

            this.oBCTmpl = new sap.suite.ui.commons.BulletChart({
                size: sap.suite.ui.commons.InfoTileSize.Auto,
                scale: "{/scale}",
                actual: {
                    value: "{/actual/value}",
                    color: "{/actual/color}"
                },
                targetValue: "{/targetValue}",
                actualValueLabel: "{/actualValueLabel}",
                targetValueLabel: "{/targetValueLabel}",
                thresholds: {
                    template: oBCDataTmpl,
                    path: "/thresholds"
                },
                state: "{/state}",
                showActualValue: "{/showActualValue}",
                showTargetValue: "{/showTargetValue}"
            });

            var oNVConfS = new sap.suite.ui.commons.TileContent({
                unit : "{/unit}",
                size : "{/size}",
                footer : "{/footerNum}",
                content: this.oBCTmpl
            });

            this.oGenericTile = new sap.suite.ui.commons.GenericTile({
                subheader : "{/subheader}",
                frameType : "{/frameType}",
                size : "{/size}",
                header : "{/header}",
                tileContent : [oNVConfS]
            });

            var oGenericTileModel = new sap.ui.model.json.JSONModel();
            oGenericTileModel.setData(deviationTileData);
            this.oGenericTile.setModel(oGenericTileModel);

            return this.oGenericTile;
        }
    });
}());

}; // end of sap/ushell/components/tiles/indicatordeviation/DeviationTile.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.indicatornumeric.NumericTile.view') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.indicatornumeric.NumericTile.view');
(function () {
    "use strict";
    /*global jQuery, sap */
    /*jslint nomen: true */
    
    jQuery.sap.require('sap.ui.model.analytics.odata4analytics'); // unlisted dependency retained

    jQuery.sap.require('sap.ca.ui.model.format.NumberFormat'); // unlisted dependency retained

    sap.ui.getCore().loadLibrary("sap.suite.ui.commons");

    sap.ui.jsview("tiles.indicatornumeric.NumericTile", {
        getControllerName: function () {
            return "tiles.indicatornumeric.NumericTile";
        },
        createContent: function (oController) {
            //var preview = this.getViewData().chip.preview;
            var header = "Lorem ipsum";
            var subheader =  "Lorem ipsum";

            var titleObj = sap.ushell.components.tiles.indicatorTileUtils.util.getTileTitleSubtitle(this.getViewData().chip);
            if (titleObj.title && titleObj.subTitle){
                header = titleObj.title;
                subheader = titleObj.subTitle;
            }
            var oGenericTileData = {
                    subheader : subheader,
                    header : header,
                    footerNum : "",
                    footerComp : "",
                    scale: "",
                    unit: "",
                    value: "",
                    size:"Auto",
                    frameType:"OneByOne",
                    state: sap.suite.ui.commons.LoadState.Loading,
                    valueColor:sap.suite.ui.commons.InfoTileValueColor.Neutral,
                    indicator: sap.suite.ui.commons.DeviationIndicator.None,
                    title : "",
                    footer : "",
                    description: ""
            };

            this.oNVConfContS = new sap.suite.ui.commons.NumericContent({
                value : "{/value}",
                scale : "{/scale}",
                unit : "{/unit}",
                indicator : "{/indicator}",
                valueColor: "{/valueColor}",
                size : "{/size}",
                formatterValue : true,
                truncateValueTo : 5 ,
                nullifyValue : false
            });

            /*
             * @to be removed once suite.commons fix scaling this issue
             */

//            this.oNVConfContS.setScale = function(sText) {
//                if(!this.getFormatterValue()) {
//                    this.setProperty("scale", sText, true);
//                }
//                return this;
//            };

            var oNVConfS = new sap.suite.ui.commons.TileContent({
                unit : "{/unit}",
                size : "{/size}",
                footer : "{/footerNum}",
                content: this.oNVConfContS
            });

            this.oGenericTile = new sap.suite.ui.commons.GenericTile({
                subheader : "{/subheader}",
                frameType : "{/frameType}",
                size : "{/size}",
                header : "{/header}",
                tileContent : [oNVConfS]
            });

            var oGenericTileModel = new sap.ui.model.json.JSONModel();
            oGenericTileModel.setData(oGenericTileData);
            this.oGenericTile.setModel(oGenericTileModel);

            return this.oGenericTile;
        }
    });
}());

}; // end of sap/ushell/components/tiles/indicatornumeric/NumericTile.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.utils') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview This file contains miscellaneous utility functions.
 */
/* global jQuery, OData, sap */

/* eslint-disable no-undef */

this.sap = this.sap || {};

(function() {
    "use strict";
    /* global document, jQuery, sap, OData */

    jQuery.sap.declare("sap.ushell.components.tiles.utils");

    // namespace "sap.ushell.components.tiles.utils" ************************************
    sap = sap || {};
    sap.ushell = sap.ushell || {};
    sap.ushell.components = sap.ushell.components || {};
    sap.ushell.components.tiles = sap.ushell.components.tiles || {};
    sap.ushell.components.tiles.utils = sap.ushell.components.tiles.utils || {};

    if (sap.ushell.components.tiles.utils.getConfiguration) {
        return;
    }

// var oTilesResourceBundle;

// /**
// * Converts parameters formatted in a query string into an array of name value pairs.
// *
// * @param {string} sQueryString
// * the query string (without leading '?') as coming from the launchpad; it must at least
// * contain one parameter
// * @returns {[object]}
// * the parameters as array of object with <code>name</code> and <code>value</code>
// */
// function stringToNameValuePairs(sQueryString) {
// var aNameValuePairs = sQueryString.replace(/\+/g, ' ').split("&"),
// aPair,
// i,
// aResult = [];
//
// for (i = 0; i < aNameValuePairs.length; i += 1) {
// aPair = aNameValuePairs[i].split("=");
// aResult.push({
// name: decodeURIComponent(aPair.shift()),
// value: decodeURIComponent(aPair.join("="))
// });
// }
// return aResult;
// }
    // "public static methods" **************************************************
    /**
     * Checks whether the translated chip title is in initial state.
     *
     * @param {string} sTitle The chip title.
     * @returns {boolean} True, if the title is in initial state.
     */
    sap.ushell.components.tiles.utils.isInitial = function(sTitle) {
        return sTitle === "App Launcher – Static" || sTitle === "App Launcher – Dynamic" || sTitle === "Target Mapping";
    };

    /**
     * Get shared resource bundle model for applauncher and action tiles.
     *
     * @returns {sap.ui.model.resource.ResourceModel} Shared resource bundle model for applauncher and action tiles.
     */
    sap.ushell.components.tiles.utils.getResourceBundleModel = function() {
        jQuery.sap.require("sap.ushell.resources");
        return sap.ushell.resources.i18nModel;
    };

    /**
     * Read and initialize configuration object from given JSON string. Used by static and dynamic applaunchers.
     *
     * @param {string} sConfig Configuration string in JSON format
     * @param {boolean} bAdmin A flag that indicates, whether the configuration shall be shown in the Admin UI
     * @param {boolean} bEdit A flag that indicates, whether the configuration shall be shown in the Admin UI in edit mode (i.e., not on a tile)
     * @returns {object} Returns parsed and initialized configuration object
     */
    sap.ushell.components.tiles.utils.getConfiguration = function(oTileApi, bAdmin, bEdit) {

        var oResourceBundle;
        var sConfig = oTileApi.configuration.getParameterValueAsString('tileConfiguration');
        var oConfig = JSON.parse(sConfig || "{}");

        oConfig.editable = true;
        if (oTileApi.configurationUi && oTileApi.configurationUi.isReadOnly) {
            if (oTileApi.configurationUi.isReadOnly()) {
                oConfig.editable = false;
            }
        }

        // first try to get properties from bag
        var sTitle = sap.ushell.components.tiles.utils.getTranslatedTitle(oTileApi);
        var sSubtitle = sap.ushell.components.tiles.utils.getTranslatedSubtitle(oTileApi, oConfig);
        var sInfo = sap.ushell.components.tiles.utils.getTranslatedProperty(oTileApi, oConfig, 'display_info_text');
        var sKeywords = sap.ushell.components.tiles.utils.getTranslatedProperty(oTileApi, oConfig, 'display_search_keywords');

        if (bAdmin) {
            // resource bundle is only used in admin mode
            oResourceBundle = sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle();

            if (bEdit && oTileApi.bag) {
                var orgLocale = oTileApi.bag.getOriginalLanguage();
                var userLocale = sap.ui.getCore().getConfiguration().getLanguage();
                oConfig.isLocaleSuitable = orgLocale === "" || orgLocale.toLowerCase() === userLocale.toLowerCase();
                oConfig.orgLocale = orgLocale;
                oConfig.userLocale = userLocale;

            }
        }
        // in Admin UI, we display sample values for info/title/subtitle if not defined in the configuration
        oConfig.display_icon_url = oConfig.display_icon_url || "";

        if (sInfo !== undefined) {
            oConfig.display_info_text = sInfo;
        } else if (oConfig.display_info_text === undefined) {
            if (bAdmin && !bEdit) {
                oConfig.display_info_text = "[" + oResourceBundle.getText("configuration.display_info_text") + "]";
            } else {
                oConfig.display_info_text = "";
            }
        }

        oConfig.navigation_semantic_object = oConfig.navigation_semantic_object || "";
        oConfig.navigation_semantic_action = oConfig.navigation_semantic_action || "";
        oConfig.navigation_semantic_parameters = oConfig.navigation_semantic_parameters || "";
        oConfig.display_number_unit = oConfig.display_number_unit || "";
        oConfig.display_number_factor = oConfig.display_number_factor || "";
        oConfig.service_refresh_interval = oConfig.service_refresh_interval ? parseInt(oConfig.service_refresh_interval, 10) : 0;
        oConfig.service_url = oConfig.service_url || "";
        oConfig.navigation_target_url = oConfig.navigation_target_url || "";
        if (bAdmin && sap.ushell.components.tiles.utils.isInitial(sTitle)) {
            oConfig.display_title_text = bEdit ? "" : "[" + oResourceBundle.getText("configuration.display_title_text") + "]";
            oConfig.display_subtitle_text = bEdit ? "" : "[" + oResourceBundle.getText("configuration.display_subtitle_text") + "]";
        } else {
            oConfig.display_title_text = sTitle || oConfig.display_title_text || "";
            if (sSubtitle !== undefined) {
                oConfig.display_subtitle_text = sSubtitle;
            } else if (oConfig.display_subtitle_text === undefined) {
                oConfig.display_subtitle_text = "";
            }
        }
        oConfig.navigation_use_semantic_object = (oConfig.navigation_use_semantic_object === false ? false : true);
        oConfig.display_search_keywords = sKeywords || oConfig.display_search_keywords || "";

        // display sample value '1234' in Admin UI
        if (bAdmin) {
            oConfig.display_number_value = oConfig.display_number_value || 1234;
        }

        // If form factors were not configured yet, use default values
        oConfig.form_factors = oConfig.form_factors ? oConfig.form_factors : this.getDefaultFormFactors();

        oConfig.desktopChecked = oConfig.form_factors.manual.desktop;
        oConfig.tabletChecked = oConfig.form_factors.manual.tablet;
        oConfig.phoneChecked = oConfig.form_factors.manual.phone;
        oConfig.manualFormFactor = !(oConfig.form_factors.appDefault) && oConfig.editable;
        oConfig.appFormFactor = oConfig.form_factors.appDefault;

        // The following line is workaround for the case that the form factor parameters were set by default
        // We don't want to save this unless the user specifically changed the form factor (uncheck and immediately recheck is considered a change)
        oConfig.formFactorConfigDefault = oConfig.form_factors.defaultParam ? true : false;
        oConfig.rows = (oConfig.mapping_signature && oConfig.mapping_signature !== "*=*") ? this.getMappingSignatureTableData(oConfig.mapping_signature, bEdit && oConfig.editable) : [
            this.getEmptyRowObj(oConfig.editable)
        ];
        oConfig.isUnknownAllowed = (oConfig.mapping_signature !== undefined) ? this.getAllowUnknownParametersValue(oConfig.mapping_signature) : true;

        // Tile Action table data

        if (bAdmin) {
            // for designer
            oConfig.tile_actions_rows = this.getTileNavigationActionsRows(oTileApi, oConfig.editable);
        } else {
            // for runtime - if actions are already in the configuration we keep them (HANA), otherwise try to construct them from bag (on ABAP)
            if (!oConfig.actions) {
                oConfig.actions = this.getTileNavigationActions(oTileApi);
            }
        }

        return oConfig;
    };

    // Create a row template for adding new empty row to the params table (mapping signature)
    sap.ushell.components.tiles.utils.getEmptyRowObj = function(bEdit) {
        return {
            name: "",
            mandatory: false,
            value: "",
            isRegularExpression: false,
            defaultValue: "",
            valEnabled: false || !bEdit,
            defValEnabled: true,
            editable: bEdit
        };

    };

    // Create a row template for adding new empty row to the Tile Actions table
    sap.ushell.components.tiles.utils.getEmptyTileActionsRowObj = function(bEdit) {
        var oResourceBundle = sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle();
        return {
            menu_title: "",
            target_type: oResourceBundle.getText("configuration.tile_actions.table.target_type.url"),
            navigation_target: "",
            action: "",
            icon: "",
            isTargetTypeIntent: false,
            editable: bEdit
        };

    };

    /**
     * This function will be called during init operation Returns tile navigation actions array for design time. Returns empty row if there are not
     * navigation actions maintained.
     *
     * @param {object} oTileApi The instance-specific chip API.
     * @returns {array} atileActionsRows Returns tile navigation actions array. Example: [{action: "" icon: "sap-icon://Fiori2/F0101"
     *          isTargetTypeIntent: false menu_title: "action1" navigation_target: "http://google.co.in" target_type: "URL"} {action: "action" icon:
     *          "sap-icon://Fiori2/F0212" isTargetTypeIntent: true menu_title: "action2" navigation_target: "AccessControlRole" target_type:
     *          "Intent"}] Empty row Example: [{menu_title: "" , target_type: "URL", navigation_target: "", action: "", icon: "", isTargetTypeIntent:
     *          false}]
     */
    sap.ushell.components.tiles.utils.getTileNavigationActionsRows = function(oTileApi, bEdit) {
        var atileActionsRows = [], aTileNavigationActions = [];

        aTileNavigationActions = this.getTileNavigationActions(oTileApi);
        if (aTileNavigationActions.length) {
            for (var i = 0; i < aTileNavigationActions.length; i++) {
                atileActionsRows.push(tileAction2TileActionsRow(aTileNavigationActions[i], bEdit));
            }
        } else {
            atileActionsRows = [
                this.getEmptyTileActionsRowObj(bEdit)
            ];
        }

        return atileActionsRows;
    };

    /**
     * This function will be called by runtime Returns tile navigation actions array
     *
     * @param {object} oTileApi The instance-specific chip API.
     * @returns {array} aTileNavigationActions Returns tile navigation actions array. Actions title text will be translated text Example: [{icon:
     *          "sap-icon://Fiori2/F0211", targetURL: "https://www.google.co.in", text: "action1"}, {icon: "sap-icon://Fiori2/F0210", targetURL:
     *          "#AccessControlRole-action", text: "action2"}]
     */
    sap.ushell.components.tiles.utils.getTileNavigationActions = function(oTileApi) {
        var aTileNavigationActions = [], sTileActionTitle = '';
        var bag = oTileApi.bag.getBag('tileNavigationActions');
        if (bag.getPropertyNames().indexOf('tile_navigation_actions') >= 0) {
            aTileNavigationActions = JSON.parse(bag.getProperty('tile_navigation_actions')); // Bag will return tile navigation actions as a
            // string.JSON.parse will parse the string to an array
            for (var i = 0; i < aTileNavigationActions.length; i++) {
                if (aTileNavigationActions[i].text) {
                    if (bag.getTextNames().indexOf('action_tile_' + (i + 1)) >= 0) {
                        sTileActionTitle = bag.getText('action_tile_' + (i + 1)); // Get translated action title text from bag
                    }
                    aTileNavigationActions[i].text = sTileActionTitle; // Update the action title text with the translated text fetched from bag
                }
            }
        }

        return aTileNavigationActions;
    };

    /**
     * Retruns tile actions table row object
     *
     * @param {object} oTileActionsRow Tile Navigation Actions row object
     * @returns {object} tileActionsRowObject Returns tile navigation actions row object Example: {action: "" icon: "sap-icon://Fiori2/F0101"
     *          isTargetTypeIntent: false menu_title: "action1" navigation_target: "http://google.co.in" target_type: "URL"}
     */
    var tileAction2TileActionsRow = function(oTileActionsRow, bEdit) {
        var tileActionsRowObject = {}, oResourceBundle = sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle();

        tileActionsRowObject.menu_title = oTileActionsRow.text;
        tileActionsRowObject.icon = oTileActionsRow.icon;
        if ((oTileActionsRow.targetURL).charAt(0) === "#") {
            // Target Type is Intent
            tileActionsRowObject.target_type = oResourceBundle.getText("configuration.tile_actions.table.target_type.intent");
            var aNavigationTarget = oTileActionsRow.targetURL.split("-");
            tileActionsRowObject.navigation_target = aNavigationTarget[0].substring(1, aNavigationTarget[0].length); // removes # for the semantic
            // object
            tileActionsRowObject.action = aNavigationTarget[1];
            tileActionsRowObject.isTargetTypeIntent = true;
        } else {
            // Target Type is URL
            tileActionsRowObject.target_type = oResourceBundle.getText("configuration.tile_actions.table.target_type.url");
            tileActionsRowObject.navigation_target = oTileActionsRow.targetURL;
            tileActionsRowObject.action = "";
            tileActionsRowObject.isTargetTypeIntent = false;
        }
        tileActionsRowObject.editable = bEdit;

        return tileActionsRowObject;
    };

    /**
     * This function will be called during save operation. Build the tile actions array according to the entries of the table.
     *
     * @param {array} aTableContent Tile Navigation Actions array
     * @returns {array} aTileNavigationActions Returns tile navigation actions array Example for two rows data. First row:Target_Type: URL, second row
     *          Target_Type: Intent: [{icon: "sap-icon://Fiori2/F0211", targetURL: "https://www.google.co.in", text: "action1"}, {icon:
     *          "sap-icon://Fiori2/F0210", targetURL: "#AccessControlRole-action", text: "action2"}]
     */
    sap.ushell.components.tiles.utils.tileActionsRows2TileActionsArray = function(aTableContent) {
        var aTileNavigationActions = [];
        for (var i = 0; i < aTableContent.length; i++) {
            if (aTableContent[i].menu_title) {
                aTileNavigationActions.push(tileActionRow2TileActionObject(aTableContent[i]));
            }
        }
        return aTileNavigationActions; // might be empty
    };

    /**
     * Build tile actions row object. If Target Type is Intent, then taregtURL will be prefixed with '#'.
     *
     * @param {object} oTileActionRow Tile Navigation Actions row object
     * @returns {object} oTileAction Returns tile navigation actions row object with semantic object and action combined Example for Target Type URL:
     *          {icon: "sap-icon://Fiori2/F0211", targetURL: "https://www.google.co.in", text: "action1"} Example for target type Intent: {icon:
     *          "sap-icon://Fiori2/F0210", targetURL: "#AccessControlRole-action", text: "action2"}
     */
    var tileActionRow2TileActionObject = function(oTileActionRow) {
        var oTileAction = {};
        oTileAction.text = oTileActionRow.menu_title;
        oTileAction.icon = oTileActionRow.icon;
        if (oTileActionRow.action) {
            oTileAction.targetURL = "#" + oTileActionRow.navigation_target + "-" + oTileActionRow.action;
        } else {
            oTileAction.targetURL = oTileActionRow.navigation_target;
        }

        return oTileAction;
    };
    /**
     * Saves the tile navigation actions in to the bag.
     *
     * @param {Object} tileNavigationActionsBag Bag into which the tile navigation actions has to be saved
     * @param {Array} aNavigationProperties Array of tile navigation actions
     */
    sap.ushell.components.tiles.utils.populateTileNavigationActionsBag = function(tileNavigationActionsBag, aNavigationProperties) {
        // Stringify the array and populate it to the bag as a property, tile_navigation_actions
        tileNavigationActionsBag.setProperty('tile_navigation_actions', JSON.stringify(aNavigationProperties));
        for (var i = 0; i < aNavigationProperties.length; i++) {
            var sActionTitle = aNavigationProperties[i].text;
            tileNavigationActionsBag.setText('action_tile_' + (i + 1), sActionTitle);
        }
    };

    // The default values for the form factor is to let the application decide what devices are supported (i.e. form factors). The admin can override
    // the defaults.
    sap.ushell.components.tiles.utils.getDefaultFormFactors = function() {

        return {
            "appDefault": false,
            "manual": {
                "desktop": true,
                "tablet": true,
                "phone": true
            },
            "defaultParam": true
        };
    };

    // Build form factors list as populated by the user. This format is expected by the nav target resolution service.
    // When the appDefault is true, the form factor check-boxes are disabled and their value should be ignored.
    // otherwise, they are used to determine on what form factors this nav target can be used.
    // The values "desktop"/"tablet"/"phone" are sync with the sap.ui.Device.system values which are used in the resolving.
    sap.ushell.components.tiles.utils.buildFormFactorsObject = function(oModel) {

        return {
            "appDefault": oModel.getProperty("/config/appFormFactor"),
            "manual": {
                "desktop": oModel.getProperty("/config/desktopChecked"),
                "tablet": oModel.getProperty("/config/tabletChecked"),
                "phone": oModel.getProperty("/config/phoneChecked")
            }
        };
    };

    // Check if the parameters table has duplicate parameter names, return true if it does, false otherwise
    sap.ushell.components.tiles.utils.tableHasDuplicateParameterNames = function(aTableContent) {
        var parametersMap = {};
        for (var i = 0; i < aTableContent.length; i++) {
            var paramName = aTableContent[i].name;
            if (paramName !== "") {
                if (parametersMap[paramName]) {
                    return true;
                } else {
                    parametersMap[paramName] = true;
                }
            }
        }
        return false;
    };

    // Build the mapping signature string according to the entries of the table and the value of the allowed undefined checkbox.
    // This function will be called during save operation
    sap.ushell.components.tiles.utils.getMappingSignatureString = function(tableContent, allowUnknownParameters) {
        var mappingSignature = "";
        for (var i = 0; i < tableContent.length; i++) {
            if (tableContent[i].name) {
                mappingSignature += (getOneParamSignature(tableContent[i]) + "&");
            }
        }
        return allowUnknownParameters ? mappingSignature + "*=*" : mappingSignature.substring(0, mappingSignature.length - 1); // might be empty
    };

    // build a string representation of the provided row object
    var getOneParamSignature = function(tableRow) {
        var paramSignature = "";

        if (tableRow.mandatory) {
            if (tableRow.isRegularExpression) {
                paramSignature = "{" + tableRow.name + "=" + encodeURIComponent(tableRow.value) + "}";
            } else {
                paramSignature = tableRow.name + "=" + encodeURIComponent(tableRow.value);
            }
        } else {
            paramSignature = "[" + tableRow.name + "=" + encodeURIComponent(tableRow.defaultValue) + "]";
        }
        return paramSignature;
    };

    // var mappingSignatureStringExample = "par1=B%3C%3E&{par2=D*}&[par3=F%40%40]";

    // Build the table data according to the mapping signature string
    // This function will be called during init operation
    sap.ushell.components.tiles.utils.getMappingSignatureTableData = function(mappingSignatureString, bEdit) {
        var paramsArray = [];
        var paramStringsArray = mappingSignatureString.split("&");

        for (var i = 0; i < paramStringsArray.length; i++) {
            var currentParam = paramStringsArray[i];
            if (currentParam !== "*=*") {
                // For each parameter string (except from the "allow unknown parameters" sign),
                // get the parameter object and add to the array
                paramsArray.push(getOneParamObject(paramStringsArray[i], bEdit));
            }
        }
        return paramsArray;
    };

    var getOneParamObject = function(paramString, bEdit) {
        var paramObject = {};

        if (paramString.charAt(0) === "[") {
            // If there are [] brackets, this parameter is optional
            paramObject.mandatory = false;
            paramObject.isRegularExpression = false; // Optional params can't be regular expressions
            paramObject.value = ""; // No value for optional params (only default value)
            paramString = paramString.substring(1, paramString.length - 1); // Remove [] brackets
            paramObject.name = paramString.substring(0, paramString.indexOf("=")); // Get name
            paramObject.defaultValue = decodeURIComponent(paramString.substring(paramString.indexOf("=") + 1)); // Get default value
        } else {
            // No [] brackets so this parameter is mandatory
            paramObject.mandatory = true;
            paramObject.defaultValue = ""; // No default value for mandatory params (only value is allowed)
            if (paramString.charAt(0) === "{") {
                // If there are {} brackets, this parameter is a regular expression
                paramObject.isRegularExpression = true;
                paramString = paramString.substring(1, paramString.length - 1); // Remove {} brackets
            } else {
                // No {} brackets, so this parameter is not a regular expression
                paramObject.isRegularExpression = false;
            }
            paramObject.name = paramString.substring(0, paramString.indexOf("=")); // Get name
            paramObject.value = decodeURIComponent(paramString.substring(paramString.indexOf("=") + 1)); // Get value
        }
        paramObject.editable = bEdit;

        if (bEdit) {
            paramObject.valEnabled = paramObject.mandatory;
            paramObject.defValEnabled = !paramObject.mandatory;
        } else {
            paramObject.valEnabled = true;
            paramObject.defValEnabled = true;
        }

        return paramObject;
    };

    // Get the allowUnknownParameters check-box value from the mapping signature string (Will be called during init operation)
    sap.ushell.components.tiles.utils.getAllowUnknownParametersValue = function(mappingSignatureString) {
        // Check if the last parameter is *=* then "allow unknown parameters" should be true
        if (mappingSignatureString && (mappingSignatureString.substring(mappingSignatureString.length - 3, mappingSignatureString.length) === "*=*")) {
            return true;
        } else {
            return false;
        }
    };

    /**
     * Returns the translated title string.
     *
     * @param {object} oTileApi The instance-specific chip API.
     * @returns {string} The translated chip title.
     */
    sap.ushell.components.tiles.utils.getTranslatedTitle = function(oTileApi) {
        // Note: "oTileApi.title" is no genuine contract, but is injected by the launchpad designer.
        // As such, "title" is only available in design time and not during runtime.
        // At runtime. oTileApi.preview.getTitle() can be used to fetch the translatable title.

        // first try to get title from bag
        if (oTileApi.bag) {
            var bag = oTileApi.bag.getBag('tileProperties');
            if (bag.getTextNames().indexOf("display_title_text") >= 0) {
                return bag.getText('display_title_text');
            }
        }

        // design time
        if (oTileApi.title) {
            return oTileApi.title.getTitle();
        }
        // runtime
        if (oTileApi.preview) {
            return oTileApi.preview.getTitle();
        }
        return "";
    };

    /**
     * Returns the translated subtitle string.
     *
     * @param {object} oTileApi The instance-specific chip API.
     * @param {object} oConfig The instance-specific tile configuration.
     * @returns {string} The translated chip subtitle.
     */
    sap.ushell.components.tiles.utils.getTranslatedSubtitle = function(oTileApi, oConfig) {
        // first try to get subtitle from bag
        if (oTileApi.bag) {
            var bag = oTileApi.bag.getBag('tileProperties');
            if (bag.getTextNames().indexOf("display_subtitle_text") >= 0) {
                return bag.getText('display_subtitle_text');
            }
        }
        // then try to get it from the preview
        if (oTileApi.preview && oTileApi.preview.getDescription && oTileApi.preview.getDescription()) {
            return oTileApi.preview.getDescription();
        }
        // last get it from the configuration
        return oConfig['display_subtitle_text'];
    };

    /**
     * Returns the translated property string from .
     *
     * @param {object} oTileApi The instance-specific chip API.
     * @param {string} sPropertyKey The property key
     * @returns {string} The translated chip property.
     */
    sap.ushell.components.tiles.utils.getTranslatedProperty = function(oTileApi, oTileConfig, sPropertyKey) {

        // Try to read data from the property bag. If there are properties for description etc. > use them
        if (oTileApi.bag) {
            var bag = oTileApi.bag.getBag('tileProperties');
            if (bag.getTextNames().indexOf(sPropertyKey) >= 0) {
                return bag.getText(sPropertyKey);
            }
        }

        // If there is no data in the property bag, use the config bag to read the data
        return oTileConfig[sPropertyKey];

    };

    /**
     * Read and initialize configuration object from given JSON string. Used by the action chip (aka target mapping).
     *
     * @param {string} sConfig Configuration string in JSON format
     * @param {string} bAdmin A flag that indicates, whether the configuration shall be shown in the Admin UI
     * @returns {object} Returns parsed and initialized configuration object
     */
    sap.ushell.components.tiles.utils.getActionConfiguration = function(oTileApi, bAdmin) {
        var sConfig = oTileApi.configuration.getParameterValueAsString('tileConfiguration');
        var oConfig = JSON.parse(sConfig || "{}"), oResourceBundle;
        if (typeof bAdmin == "undefined") {
            bAdmin = oTileApi.configurationUi.isEnabled();
        }

        if (bAdmin) {
            oResourceBundle = sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle();
        }
        oConfig.semantic_object = oConfig.semantic_object || (bAdmin ? "[" + oResourceBundle.getText("configuration.semantic_object") + "]" : "");
        oConfig.semantic_action = oConfig.semantic_action || (bAdmin ? "[" + oResourceBundle.getText("configuration.semantic_action") + "]" : "");
        oConfig.navigation_provider = oConfig.navigation_provider || "";
        oConfig.navigation_provider_role = oConfig.navigation_provider_role || "";
        oConfig.navigation_provider_instance = oConfig.navigation_provider_instance || "";
        oConfig.target_application_id = oConfig.target_application_id || "";
        oConfig.target_application_alias = oConfig.target_application_alias || "";
        oConfig.display_info_text = oConfig.display_info_text || "";

        oConfig.editable = true;
        if (oTileApi.configurationUi && oTileApi.configurationUi.isReadOnly) {
            if (oTileApi.configurationUi.isReadOnly()) {
                oConfig.editable = false;
            }
        }
        return oConfig;
    };

    /**
     * Takes an existing view (<code>ActionTile</code>, <code>StaticTile</code>, <code>DynamicTile</code>) and initializes the configuration
     * UI.
     *
     * @param {object} oView The view for which the configuration UI shall be initialized
     * @param {string} sViewName The name of the view to initialize
     * @returns {object} The configuration view to be shown in the Admin UI, e.g., {@link components.tiles.action.Configuration},
     *          {@link components.tiles.applauncher.Configuration}, or {@link components.tiles.applauncherdynamic.Configuration}
     */
    sap.ushell.components.tiles.utils.getConfigurationUi = function(oView, sViewName) {
        var oViewData = oView.getViewData();
        var oTileApi = oViewData.chip;
        var oConfigurationView, oSemanticObjectSelector, oRoleSelector, oInstanceSelector, oAliasSelector, oApplicationType;

        var oCurrentConfig = sap.ushell.components.tiles.utils.getConfiguration(oTileApi, true, true);

        // verify user allow to edit (user locale = original Locate

        var oConfigurationModel = new sap.ui.model.json.JSONModel({
            config: oCurrentConfig,
            // keep reference to the model in this model
            // (to be able to update it directly on configuration changes)
            tileModel: oView.getModel()
        });

        oConfigurationView = new sap.ui.view({
            type: sap.ui.core.mvc.ViewType.XML,
            viewData: oViewData,
            viewName: sViewName
        });

        oConfigurationView.setModel(oConfigurationModel);

        // initialize state of input fields depending on navigation_use_semantic_object
        // navigation_semantic_objectInput</code> used in static and dynamic tiles
        // semantic_objectInput used in action tile
        oSemanticObjectSelector = oConfigurationView.byId("navigation_semantic_objectInput") || oConfigurationView.byId("semantic_objectInput");
        if (oSemanticObjectSelector) {
            oSemanticObjectSelector.getModel().setProperty("/enabled", oCurrentConfig.navigation_use_semantic_object);
            oSemanticObjectSelector.getModel().setProperty("/value", oCurrentConfig.semantic_object || oCurrentConfig.navigation_semantic_object);
        }
        oRoleSelector = oConfigurationView.byId("navigation_provider_roleInput");
        if (oRoleSelector) {
            oRoleSelector.getModel().setProperty("/value", oCurrentConfig.navigation_provider_role);
        }
        oInstanceSelector = oConfigurationView.byId("navigation_provider_instanceInput");
        if (oInstanceSelector) {
            oInstanceSelector.getModel().setProperty("/value", oCurrentConfig.navigation_provider_instance);
        }
        oAliasSelector = oConfigurationView.byId("target_application_aliasInput");
        if (oAliasSelector) {
            oAliasSelector.getModel().setProperty("/value", oCurrentConfig.target_application_alias);
        }

        // Enable Application type radio button LPD_CUST/SAPUI5 depending on navigation_provider
        // Application type is used in action tile configuration
        oApplicationType = oConfigurationView.byId("targetTypeInput");
        if (oApplicationType) {

            if (!oConfigurationView.getModel().getProperty("/config/transaction")) {
                oConfigurationView.getModel().setProperty("/config/transaction", {});
            }
            if (!oConfigurationView.getModel().getProperty("/config/web_dynpro")) {
                oConfigurationView.getModel().setProperty("/config/web_dynpro", {});
            }

            if (oView.getModel().getProperty('/config/navigation_provider') == "LPD") {
                sap.ushell.components.tiles.utils.displayLpdCustApplicationTypeFields(oConfigurationView);
            } else if (oView.getModel().getProperty('/config/navigation_provider') == "SAPUI5" || oView.getModel().getProperty('/config/navigation_provider') == '') {
                oApplicationType.setSelectedKey("SAPUI5");
                sap.ushell.components.tiles.utils.displaySapui5ApplicationTypeFields(oConfigurationView);
            } else if (oView.getModel().getProperty('/config/navigation_provider') == "TR") {
                sap.ushell.components.tiles.utils.displayTransactionApplicationTypeFields(oConfigurationView);
            } else if (oView.getModel().getProperty('/config/navigation_provider') == "WDA") {
                sap.ushell.components.tiles.utils.displayWebDynproApplicationTypeFields(oConfigurationView);
            } else if (oView.getModel().getProperty('/config/navigation_provider') == "URL") {
                sap.ushell.components.tiles.utils.displayURLApplicationTypeFields(oConfigurationView);
            }
        }
        return oConfigurationView;
    };

    /*
     * Mapping of API fields to internal config string fields and to UI5 view properties: OData API INTERNAL UI5 VIEW property [wave1] icon ->
     * /config/display_icon_url -> icon title -> /config/display_title_text -> title number -> /data/display_number_value -> number numberUnit ->
     * /config/display_number_unit -> numberUnit info -> /config/display_info_text -> info infoState -> /data/display_info_state -> infoState
     * (Negative, Neutral, Positive, Critical) infoStatus* -> /data/display_info_state -> infoState (None, Success, Warning, Error) targetParams ->
     * /data/target_params -> append to targetURL [new in wave2] subtitle -> /config/display_subtitle_text -> subtitle stateArrow ->
     * /data/display_state_arrow -> stateArrow (None, Up, Down) numberState -> /data/display_number_state -> numberState (Negative, Neutral, Positive,
     * Critical) numberDigits -> /data/display_number_digits -> numberDigits (Digits after comma/period) numberFactor -> /data/display_number_factor ->
     * numberFactor scaling factor of number (e.g. "%", "M", "k") keywords -> /config/display_search_keyword-> not displayed string of (comma or space
     * delimited) keywords infoStatus is there for compatibility
     */
    /**
     * Get an object with attributes used by <code>DynamicTile</code>. Use values from static configuration as base and override by fields returned
     * in dynamic data.
     *
     * @param {string} oConfig Static configuration. Expects <code>display_icon_url</code>, <code>display_info_text</code>,
     *        <code>display_info_state</code>, <code>display_number</code>, <code>display_number_unit</code> and
     *        <code>display_title_text</code> in given object.
     * @param {string} oDynamicData Dynamic data to be mixed in. Updates all static configuration data by data contained in that object. If the object
     *        contains a <code>results</code> array. The <code>number</code> fields will be accumulated.
     * @returns {object} An object containing the fields from the tile configuration mixed with the fields from dynamic data
     */
    sap.ushell.components.tiles.utils.getDataToDisplay = function(oConfig, oDynamicData) {
        var nSum = 0, i, n, oCurrentNumber, sCurrentTargetParams, oData = {
            display_icon_url: oDynamicData.icon || oConfig.display_icon_url || "",
            display_title_text: oDynamicData.title || oConfig.display_title_text || "",
            display_number_value: !isNaN(oDynamicData.number) ? oDynamicData.number : "...",
            display_number_unit: oDynamicData.numberUnit || oConfig.display_number_unit || "",
            display_info_text: oDynamicData.info || oConfig.display_info_text || "",
            display_info_state: oDynamicData.infoState || "Neutral",
            display_subtitle_text: oDynamicData.subtitle || oConfig.display_subtitle_text || "",
            display_state_arrow: oDynamicData.stateArrow || "None",
            display_number_state: oDynamicData.numberState || "Neutral",
            display_number_digits:  oDynamicData.numberDigits >= 0 ? oDynamicData.numberDigits  : 4,
            display_number_factor: oDynamicData.numberFactor || "",
            display_search_keyword: oDynamicData.keywords || oConfig.display_search_keyword || "",
            targetParams: []
        };
        if (oDynamicData.infoStatus) {
            // wave 1 compatability with "infoStatus" field
            oData.display_info_state = oDynamicData.infoStatus;
        }
        if (oDynamicData.targetParams) {
            oData.targetParams.push(oDynamicData.targetParams);
        }
        // accumulate results field
        if (oDynamicData.results) {
            for (i = 0, n = oDynamicData.results.length; i < n; i = i + 1) {
                oCurrentNumber = oDynamicData.results[i].number || 0;
                if (typeof oCurrentNumber === "string") {
                    oCurrentNumber = parseInt(oCurrentNumber, 10);
                }
                nSum = nSum + oCurrentNumber;
                sCurrentTargetParams = oDynamicData.results[i].targetParams;
                if (sCurrentTargetParams) {
                    oData.targetParams.push(sCurrentTargetParams);
                }
            }
            oData.display_number_value = nSum;
        }
        return oData;
    };

    /**
     * @param {object} oConfig The configuration object (as returned by <code>getConfiguration</code>)
     * @returns {string} The relative navigation URL: '#', semantic object, '-', action, '?' parameters
     */
    sap.ushell.components.tiles.utils.getSemanticNavigationUrl = function(oConfig) {
        // note: empty semantic objects and actions (?) are perfectly possible
        var sUrl = "#" + jQuery.trim(oConfig.navigation_semantic_object);
        sUrl += "-" + jQuery.trim(oConfig.navigation_semantic_action);
        // parameters are optional
        if (oConfig.navigation_semantic_parameters && jQuery.trim(oConfig.navigation_semantic_parameters).length > 0) {
            sUrl += "?" + jQuery.trim(oConfig.navigation_semantic_parameters);
        }
        return sUrl;
    };

    /*
     * Add target parameters returned from OData call to configured URL.
     */
    /**
     * Rewrites the given URL by appending target parameters.
     *
     * @param {string} sUrl The target URL to be rewritten
     * @param {object} oData The dynamic tile configuration as returned by <code>getDataToDisplay</code>
     * @returns {string} The rewritten URL containing teh target parameters
     */
    sap.ushell.components.tiles.utils.addParamsToUrl = function(sUrl, oData) {
        var sParams = "", bUrlHasParams = sUrl.indexOf("?") !== -1, aTargetParams = oData.targetParams, i;

        if (aTargetParams && aTargetParams.length > 0) {
            for (i = 0; i < aTargetParams.length; i = i + 1) {
                sParams += aTargetParams[i];
                if (i < aTargetParams.length - 1) {
                    sParams += "&";
                }
            }
        }
        if (sParams.length > 0) {
            if (!bUrlHasParams) {
                sUrl += "?";
            } else {
                sUrl += "&";
            }
            sUrl += sParams;
        }
        return sUrl;
    };

    /**
     * Captures/caches the names of semantic objects configured in the backend.
     */
    sap.ushell.components.tiles.utils.aData = [];
    sap.ushell.components.tiles.utils.aActionData = [];
    sap.ushell.components.tiles.utils.aRoleData = [];
    sap.ushell.components.tiles.utils.aAliasData = [];

    /**
     * Search function for the object selector dialog.
     */
    sap.ushell.components.tiles.utils.objectSelectDoSearch = function(oEvent) {
        var filter = [], sVal = oEvent.getParameter("value"), itemsBinding, selectNameFilter, selectObjFilter;
        if (sVal !== undefined) {
            itemsBinding = oEvent.getParameter("itemsBinding");
            selectNameFilter = new sap.ui.model.Filter("name", sap.ui.model.FilterOperator.Contains, sVal);
            selectObjFilter = new sap.ui.model.Filter("obj", sap.ui.model.FilterOperator.Contains, sVal);
            filter.push(selectObjFilter);
            filter.push(selectNameFilter);
            itemsBinding.filter(new sap.ui.model.Filter(filter, false));
        }
    };

    /**
     * Search function for the action selector dialog.
     */
    sap.ushell.components.tiles.utils.actionSelectDoSearch = function(oEvent) {
        var filter = [], sVal = oEvent.getParameter("value"), itemsBinding, selectActionFilter;
        if (sVal !== undefined) {
            itemsBinding = oEvent.getParameter("itemsBinding");
            selectActionFilter = new sap.ui.model.Filter("text", sap.ui.model.FilterOperator.Contains, sVal);
            filter.push(selectActionFilter);
            itemsBinding.filter(new sap.ui.model.Filter(filter, false));
        }
    };

    /**
     * Search function for the role selector dialog.
     */
    sap.ushell.components.tiles.utils.roleSelectDoSearch = function(oEvent) {
        var filter = [], sVal = oEvent.getParameter("value"), itemsBinding, selectRoleFilter, selectInstanceFilter;
        if (sVal !== undefined) {
            itemsBinding = oEvent.getParameter("itemsBinding");
            selectRoleFilter = new sap.ui.model.Filter("role", sap.ui.model.FilterOperator.Contains, sVal);
            selectInstanceFilter = new sap.ui.model.Filter("instance", sap.ui.model.FilterOperator.Contains, sVal);
            filter.push(selectRoleFilter);
            filter.push(selectInstanceFilter);
            itemsBinding.filter(new sap.ui.model.Filter(filter, false));
        }
    };

    /**
     * Search function for the instance selector dialog.
     */
    sap.ushell.components.tiles.utils.instanceSelectDoSearch = function(oEvent) {
        var filter = [], sVal = oEvent.getParameter("value"), customData, sRole, itemsBinding, selectRoleFilter, selectObjFilter;

        customData = oEvent.getSource().getCustomData();
        sRole = customData[0].getValue();

        if (sVal !== undefined) {
            itemsBinding = oEvent.getParameter("itemsBinding");
            if (sVal != "") {
                selectObjFilter = new sap.ui.model.Filter("instance", sap.ui.model.FilterOperator.Contains, sVal);
                filter.push(selectObjFilter);
            }
            if (sRole != "") {
                selectRoleFilter = new sap.ui.model.Filter("role", sap.ui.model.FilterOperator.EQ, sRole);
                filter.push(selectRoleFilter);
            }
            if (filter.length > 0) {
                itemsBinding.filter(new sap.ui.model.Filter(filter, true));
            }
        }
    };

    /**
     * Suggest function for the instance.
     */
    sap.ushell.components.tiles.utils.instanceSuggest = function(oController, oEvent) {
        var oView = oController.getView(), filter = [], sVal = oEvent.getParameter("value"), oRoleSelector, sRole, suggestionsItemBinding, selectRoleFilter, selectObjFilter;

        oRoleSelector = oView.byId("navigation_provider_roleInput");
        sRole = oRoleSelector.getValue();
        sVal = oEvent.getParameter("suggestValue");

        if (sVal != "") {
            selectObjFilter = new sap.ui.model.Filter("instance", sap.ui.model.FilterOperator.Contains, sVal);
            filter.push(selectObjFilter);
        }
        if (sRole != "") {
            selectRoleFilter = new sap.ui.model.Filter("role", sap.ui.model.FilterOperator.EQ, sRole);
            filter.push(selectRoleFilter);
        }
        if (filter.length > 0) {
            suggestionsItemBinding = oEvent.oSource.getBinding("suggestionItems");
            suggestionsItemBinding.filter(new sap.ui.model.Filter(filter, true));
        }
    };

    /**
     * Suggest function for the alias.
     */
    sap.ushell.components.tiles.utils.aliasSuggest = function(oController, oEvent) {
        var oView = oController.getView(), filter = [], sVal = oEvent.getParameter("value"), oInstanceSelector, sInstance, suggestionsItemBinding, selectInstanceFilter, selectAliasFilter;

        oInstanceSelector = oView.byId("navigation_provider_instanceInput");
        sInstance = oInstanceSelector.getValue();
        sVal = oEvent.getParameter("suggestValue");

        if (sVal != "") {
            selectAliasFilter = new sap.ui.model.Filter("alias", sap.ui.model.FilterOperator.Contains, sVal);
            filter.push(selectAliasFilter);
        }
        if (sInstance != "") {
            selectInstanceFilter = new sap.ui.model.Filter("instance", sap.ui.model.FilterOperator.EQ, sInstance);
            filter.push(selectInstanceFilter);
        }
        if (filter.length > 0) {
            suggestionsItemBinding = oEvent.oSource.getBinding("suggestionItems");
            suggestionsItemBinding.filter(new sap.ui.model.Filter(filter, true));
        }
    };

    /**
     * Search function for the alias selector dialog.
     */
    sap.ushell.components.tiles.utils.aliasSelectDoSearch = function(oEvent) {
        var filter = [], sVal = oEvent.getParameter("value"), customData, sInstance, itemsBinding, selectNameFilter, selectObjFilter;

        customData = oEvent.getSource().getCustomData();
        sInstance = customData[0].getValue();

        if (sVal !== undefined) {
            itemsBinding = oEvent.getParameter("itemsBinding");
            selectNameFilter = new sap.ui.model.Filter("instance", sap.ui.model.FilterOperator.EQ, sInstance);
            if (sVal != "") {
                selectObjFilter = new sap.ui.model.Filter("alias", sap.ui.model.FilterOperator.Contains, sVal);
                filter.push(selectObjFilter);
            }
            filter.push(selectNameFilter);
            itemsBinding.filter(new sap.ui.model.Filter(filter, true));
        }
    };

    /**
     * Update function of the object selector dialog.
     */
    sap.ushell.components.tiles.utils.objectSelectUpdateDialog = function(oSelectDialog, sVal) {
        var filter = [], itemsBinding = oSelectDialog.getBinding("items"), selectFilter;
        if (sVal !== undefined) {
            selectFilter = new sap.ui.model.Filter("name", sap.ui.model.FilterOperator.Contains, sVal);
            filter.push(selectFilter);
            itemsBinding.filter(filter);
        }
    };

    /**
     * Update function of the action selector dialog.
     */
    sap.ushell.components.tiles.utils.actionSelectUpdateDialog = function(oSelectDialog, sVal) {
        var filter = [], itemsBinding = oSelectDialog.getBinding("items"), selectFilter;
        if (sVal !== undefined) {
            selectFilter = new sap.ui.model.Filter("text", sap.ui.model.FilterOperator.Contains, sVal);
            filter.push(selectFilter);
            itemsBinding.filter(filter);
        }
    };

    /**
     * Update function of the role selector dialog.
     */
    sap.ushell.components.tiles.utils.roleSelectUpdateDialog = function(oSelectDialog, sVal) {
        var filter = [], itemsBinding = oSelectDialog.getBinding("items"), selectFilter;
        if (sVal !== undefined) {
            selectFilter = new sap.ui.model.Filter("role", sap.ui.model.FilterOperator.Contains, sVal);
            filter.push(selectFilter);
            itemsBinding.filter(filter);
        }
    };

    /**
     * Update function of the instance selector dialog.
     */
    sap.ushell.components.tiles.utils.instanceSelectUpdateDialog = function(oSelectDialog, sVal) {
        var filter = [], customData, itemsBinding = oSelectDialog.getBinding("items"), selectFilter, sRole, selectNameFilter;

        customData = oSelectDialog.getCustomData();
        sRole = customData[0].getValue();

        if (sVal !== undefined) {
            selectFilter = new sap.ui.model.Filter("instance", sap.ui.model.FilterOperator.Contains, sVal);
            filter.push(selectFilter);
        }
        if (sRole !== "") {
            selectNameFilter = new sap.ui.model.Filter("role", sap.ui.model.FilterOperator.EQ, sRole);
            filter.push(selectNameFilter);
        }
        if (filter.length > 0) {
            itemsBinding.filter(filter, true);
        }
    };

    /**
     * Update function of the alias selector dialog.
     */
    sap.ushell.components.tiles.utils.aliasSelectUpdateDialog = function(oSelectDialog, sVal) {
        var filter = [], customData, sInstance, itemsBinding = oSelectDialog.getBinding("items"), selectNameFilter, selectFilter;

        customData = oSelectDialog.getCustomData();
        sInstance = customData[0].getValue();

        if (sVal !== undefined) {
            selectFilter = new sap.ui.model.Filter("alias", sap.ui.model.FilterOperator.Contains, sVal);
            filter.push(selectFilter);
        }
        if (sInstance !== "") {
            selectNameFilter = new sap.ui.model.Filter("instance", sap.ui.model.FilterOperator.EQ, sInstance);
            filter.push(selectNameFilter);
        }
        if (filter.length > 0) {
            itemsBinding.filter(filter, true);
        }
    };

    // select/deselect colors for icon select dialog
    sap.ushell.components.tiles.utils.sSelectedColor = (jQuery(".sapMStdTileIconDiv").css('color') || "#007cc0").split(" ").join("");
    sap.ushell.components.tiles.utils.sDeselectedColor = (jQuery(".sapMLabel:not(.sapFioriDropZoneText )").css('color') || "#666666").split(" ").join("");

    /**
     * Visually select the given icon as indicated.
     *
     * @see sapMStdTileIconDiv
     */
    sap.ushell.components.tiles.utils.iconSelect = function(oIcon, bSelected) {
        oIcon.setColor(bSelected ? sap.ushell.components.tiles.utils.sSelectedColor : sap.ushell.components.tiles.utils.sDeselectedColor);
        oIcon.setActiveColor(bSelected ? sap.ushell.components.tiles.utils.sDeselectedColor : sap.ushell.components.tiles.utils.sSelectedColor);
    };

    /**
     * Event handler for icon's "press" event in selection dialog.
     */
    sap.ushell.components.tiles.utils.onSelectIcon = function(oController, isTileActions, oTileActionsIcon, oControlEvent) {
        var oModel = oController.getView().getModel(), oSelectedIcon;
        if (isTileActions) {
            oSelectedIcon = oModel.getProperty("/config/tile_actions_selected_icon");
        } else {
            oSelectedIcon = oModel.getProperty("/config/selected_icon");
        }

        if (oSelectedIcon) {
            sap.ushell.components.tiles.utils.iconSelect(oSelectedIcon, false);
        }

        oSelectedIcon = oControlEvent.getSource();
        sap.ushell.components.tiles.utils.iconSelect(oSelectedIcon, true);
        oModel.setProperty("/config/ok.enabled", true);
        if (isTileActions) {
            oModel.setProperty("/config/tile_actions_selected_icon", oSelectedIcon);
            oTileActionsIcon.setValue(oSelectedIcon.getSrc());
        } else {
            oModel.setProperty("/config/selected_icon", oSelectedIcon);
        }
        oController.byId("selectIconDialog").setTitle(oSelectedIcon.getSrc());
    };

    /**
     * Close handler for icon select dialog.
     */
    sap.ushell.components.tiles.utils.onSelectIconClose = function(oView) {
        oView.byId("selectIconDialog").close();
    };

    /**
     * Confirm handler for icon select dialog.
     */
    sap.ushell.components.tiles.utils.onSelectIconOk = function(oView) {
        var oSelectedIcon = oView.getModel().getProperty("/config/selected_icon");
        if (oSelectedIcon) {
            oView.getModel().setProperty("/config/display_icon_url", oSelectedIcon.getSrc());
        }
        sap.ushell.components.tiles.utils.onSelectIconClose(oView);
    };

    /**
     * Value help request for icon selection. Opens the icon selection dialog.
     */
    sap.ushell.components.tiles.utils.iconSelectOnValueHelpRequest = function(oController, oEvent, isTileActions) {
        var oModel = oController.getView().getModel(), oResponsiveFlowLayout = oController.getView().byId("icons"), aCollectionNames = sap.ui.core.IconPool.getIconCollectionNames(),
        // aContent = oResponsiveFlowLayout.getContent(),
        aContent, oDialog = oController.getView().byId("selectIconDialog"), sIcon, oTileActionsIcon, aIconNames, i, j, sUri, bBusinessSuiteInAppSymbolsContained = false;
        // Clear the content of icon layout, so that the content will be reloded everytime, with different press events for tile actions icon and
        // general icon.
        oResponsiveFlowLayout.destroyContent();

        // If the flag isTileActions is true, then it's tile actions icon field. read the value from event.
        if (isTileActions) {
            oTileActionsIcon = sap.ui.getCore().byId(oEvent.getParameter('id'));
            sIcon = oTileActionsIcon.getValue();
        } else {
            sIcon = oModel.getProperty("/config/display_icon_url");
        }

        // commenting this beacuse press event has to be binded different for general icon and tile actions icon.
        // if (aContent.length === 0) {
        aCollectionNames.sort();
        // remove in-app symbols
        aCollectionNames = jQuery.grep(aCollectionNames, function(value) {
            if (value === "BusinessSuiteInAppSymbols") {
                bBusinessSuiteInAppSymbolsContained = true;
                return false;
            }
            return true;
        });
        // append at end of array, if available
        // Note: this could be removed if the launchpad icons are not to be used for apps
        if (bBusinessSuiteInAppSymbolsContained) {
            aCollectionNames.push("BusinessSuiteInAppSymbols");
        }
        for (i = 0; i < aCollectionNames.length; i += 1) {
            aIconNames = sap.ui.core.IconPool.getIconNames(aCollectionNames[i]);
            aIconNames.sort();
            for (j = 0; j < aIconNames.length; j += 1) {
                sUri = sap.ui.core.IconPool.getIconURI(aIconNames[j], aCollectionNames[i]);
                oResponsiveFlowLayout.addContent(new sap.ui.core.Icon({
                    height: "38px",
                    press: sap.ushell.components.tiles.utils.onSelectIcon.bind(null, oController, isTileActions, oTileActionsIcon),
                    size: "2rem",
                    src: sUri,
                    tooltip: sUri,
                    width: "38px"
                }));
            }
        }
        aContent = oResponsiveFlowLayout.getContent();
        // }

        // initial state
        oModel.setProperty("/config/ok.enabled", false);
        oDialog.bindProperty("title", {
            model: "i18n",
            path: "configuration.select_icon"
        });

        // initial selection
        for (i = 0; i < aContent.length; i += 1) {
            if (aContent[i].getSrc() === sIcon) {
                // oController.oSelectedIcon = aContent[i];
                if (isTileActions) {
                    oModel.setProperty("/config/tile_actions_selected_icon", aContent[i]);
                } else {
                    oModel.setProperty("/config/selected_icon", aContent[i]);
                }
                sap.ushell.components.tiles.utils.iconSelect(aContent[i], true);
                oModel.setProperty("/config/ok.enabled", true);
                oDialog.setTitle(sIcon);
            } else {
                sap.ushell.components.tiles.utils.iconSelect(aContent[i], false);
            }
        }

        oDialog.open();
    };

    /**
     * Value help request for semantic object input. Opens the semantic object input dialog.
     */
    sap.ushell.components.tiles.utils.objectSelectOnValueHelpRequest = function(oController, oEvent, isTileActions) {
        var oView = oController.getView(), sTitle = sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle().getText("configuration.semantic_object"), oSemanticObjectSelector, sValue, oSelectorModel = new sap.ui.model.json.JSONModel(), oSelectDialog = new sap.m.SelectDialog("semantic_object_select_dialog", {
            title: sTitle,
            search: sap.ushell.components.tiles.utils.objectSelectDoSearch,
            liveChange: sap.ushell.components.tiles.utils.objectSelectDoSearch
        }), itemTemplate = new sap.m.StandardListItem({
            title: "{obj}"
        });

        if (isTileActions) {
            oSemanticObjectSelector = sap.ui.getCore().byId(oEvent.getParameter('id'));
        } else {
            // action tile uses 'semantic_objectInput', dynamic/static tile use 'navigation_semantic_objectInput'
            oSemanticObjectSelector = oView.byId("semantic_objectInput") || oView.byId("navigation_semantic_objectInput");
        }
        sValue = oSemanticObjectSelector.getValue();

        oSelectDialog.open(sValue);
        // controllers can have different default objects
        oSelectorModel.setData(oController.aDefaultObjects.concat(sap.ushell.components.tiles.utils.aData));

        oSelectDialog.bindAggregation("items", "/", itemTemplate);
        oSelectDialog.setModel(oSelectorModel);

        sap.ushell.components.tiles.utils.objectSelectUpdateDialog(oSelectDialog, sValue);

        // cancel handler
        oSelectDialog.attachCancel(function(evt) {
            oSemanticObjectSelector.setValue(sValue);
            if (!isTileActions) {
                oSemanticObjectSelector.fireChange();
            }
            oSelectDialog.destroy();
            oSelectDialog = null;
        });

        // confirm handler
        oSelectDialog.attachConfirm(function(evt) {
            var selectedItem = evt.getParameter("selectedItem");
            if (selectedItem) {
                oSemanticObjectSelector.setValue(selectedItem.getTitle());
                if (!isTileActions) {
                    oSemanticObjectSelector.fireChange();
                }
            }
            oSelectDialog.destroy();
            oSelectDialog = null;
        });
    };

    /**
     * Value help request for role input. Opens the role input dialog.
     */
    sap.ushell.components.tiles.utils.actionSelectOnValueHelpRequest = function(oController, oEvent, isTileActions) {
        var oView = oController.getView(), sTitle = sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle().getText("configuration.semantic_action"), oActionSelector, sValue, oSelectorModel = new sap.ui.model.json.JSONModel(), oSelectDialog = new sap.m.SelectDialog("semantic_action_select_dialog", {
            title: sTitle,
            search: sap.ushell.components.tiles.utils.actionSelectDoSearch,
            liveChange: sap.ushell.components.tiles.utils.actionSelectDoSearch
        }), itemTemplate = new sap.m.StandardListItem({
            title: "{text}"
        });

        if (isTileActions) {
            oActionSelector = sap.ui.getCore().byId(oEvent.getParameter('id'));
        } else {
            // action tile uses 'semantic_objectInput', dynamic/static tile use 'navigation_semantic_objectInput'
            oActionSelector = oView.byId("semantic_actionInput") || oView.byId("navigation_semantic_actionInput");
        }
        sValue = oActionSelector.getValue();

        oSelectDialog.open(sValue);
        // controllers can have different default objects
        oSelectorModel.setData(sap.ushell.components.tiles.utils.aActionData);

        oSelectDialog.bindAggregation("items", "/items", itemTemplate);
        oSelectDialog.setModel(oSelectorModel);

        sap.ushell.components.tiles.utils.actionSelectUpdateDialog(oSelectDialog, sValue);

        // cancel handler
        oSelectDialog.attachCancel(function(evt) {
            oActionSelector.setValue(sValue);
            if (!isTileActions) {
                oActionSelector.fireChange();
            }
            oSelectDialog.destroy();
            oSelectDialog = null;
        });

        // confirm handler
        oSelectDialog.attachConfirm(function(evt) {
            var selectedItem = evt.getParameter("selectedItem");
            if (selectedItem) {
                oActionSelector.setValue(selectedItem.getTitle());
                if (!isTileActions) {
                    oActionSelector.fireChange();
                    oActionSelector.fireLiveChange({
                        "newValue": selectedItem.getTitle()
                    });
                }
            }
            oSelectDialog.destroy();
            oSelectDialog = null;
        });
    };

    /**
     * Value help request for role input. Opens the role input dialog.
     */
    sap.ushell.components.tiles.utils.roleSelectOnValueHelpRequest = function(oController, oEvent) {
        var oView = oController.getView(), sTitle = sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle().getText("configuration.navigation_provider_role"), oRoleSelector, oInstanceSelector, sValue, oSelectorModel = new sap.ui.model.json.JSONModel(), oSelectDialog = new sap.m.TableSelectDialog("role_select_dialog", {
            title: sTitle,
            search: sap.ushell.components.tiles.utils.roleSelectDoSearch,
            liveChange: sap.ushell.components.tiles.utils.roleSelectDoSearch,
            columns: [
                new sap.m.Column({
                    header: [
                        new sap.m.Text({
                            text: sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle().getText("configuration.navigation_provider_role")
                        })
                    ]
                }), new sap.m.Column({
                    header: [
                        new sap.m.Text({
                            text: sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle().getText("configuration.navigation_provider_instance")
                        })
                    ]
                })
            ]
        }), itemTemplate = new sap.m.ColumnListItem({
            cells: [
                new sap.m.Text({
                    text: "{role}"
                }), new sap.m.Text({
                    text: "{instance}"
                })
            ]
        });

        oRoleSelector = oView.byId("navigation_provider_roleInput");
        oInstanceSelector = oView.byId("navigation_provider_instanceInput");

        sValue = oRoleSelector.getValue();

        oSelectDialog.open(sValue);
        // controllers can have different default objects
        oSelectorModel.setData(oController.aDefaultObjects.concat(sap.ushell.components.tiles.utils.aRoleData));

        oSelectDialog.bindAggregation("items", "/", itemTemplate);
        oSelectDialog.setModel(oSelectorModel);

        sap.ushell.components.tiles.utils.roleSelectUpdateDialog(oSelectDialog, sValue);

        // cancel handler
        oSelectDialog.attachCancel(function(evt) {
            oRoleSelector.setValue(sValue);
            oRoleSelector.fireChange();
            oSelectDialog.destroy();
            oSelectDialog = null;
        });

        // confirm handler
        oSelectDialog.attachConfirm(function(evt) {
            var selectedItem = evt.getParameter("selectedItem");
            if (selectedItem) {
                oRoleSelector.setValue(selectedItem.getCells()[0].getText());
                oInstanceSelector.setValue(selectedItem.getCells()[1].getText());
                oRoleSelector.fireChange();
                oInstanceSelector.fireChange();
            }
            oSelectDialog.destroy();
            oSelectDialog = null;
        });
    };

    /**
     * Value help request for instance input. Opens the instance input dialog.
     */
    sap.ushell.components.tiles.utils.instanceSelectOnValueHelpRequest = function(oController, oEvent) {
        var oView = oController.getView(), sRole, sTitle = sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle().getText("configuration.navigation_provider_instance"), oInstanceSelector, sValue, oSelectorModel = new sap.ui.model.json.JSONModel(), oSelectDialog = new sap.m.SelectDialog("instance_select_dialog", {
            title: sTitle,
            search: sap.ushell.components.tiles.utils.instanceSelectDoSearch,
            liveChange: sap.ushell.components.tiles.utils.instanceSelectDoSearch
        }), itemTemplate = new sap.m.StandardListItem({
            title: "{instance}"
        });

        oInstanceSelector = oView.byId("navigation_provider_instanceInput");

        sValue = oInstanceSelector.getValue();

        sRole = oView.byId("navigation_provider_roleInput").getValue();
        oSelectDialog.addCustomData(new sap.ui.core.CustomData({
            key: "role",
            value: sRole
        }));

        oSelectDialog.open(sValue);
        // controllers can have different default objects
        oSelectorModel.setData(oController.aDefaultObjects.concat(sap.ushell.components.tiles.utils.aRoleData));

        oSelectDialog.bindAggregation("items", "/", itemTemplate);
        oSelectDialog.setModel(oSelectorModel);

        sap.ushell.components.tiles.utils.instanceSelectUpdateDialog(oSelectDialog, sValue);

        // cancel handler
        oSelectDialog.attachCancel(function(evt) {
            oInstanceSelector.setValue(sValue);
            oInstanceSelector.fireChange();
            oSelectDialog.destroy();
            oSelectDialog = null;
        });

        // confirm handler
        oSelectDialog.attachConfirm(function(evt) {
            var selectedItem = evt.getParameter("selectedItem");
            if (selectedItem) {
                oInstanceSelector.setValue(selectedItem.getTitle());
                oInstanceSelector.fireChange();
            }
            oSelectDialog.destroy();
            oSelectDialog = null;
        });
    };

    /**
     * Value help request for alias input. Opens the alias input dialog.
     */
    sap.ushell.components.tiles.utils.applicationAliasSelectOnValueHelpRequest = function(oController, oEvent) {

        var oView = oController.getView(), sTitle = sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle().getText("configuration.target_application_alias"), oAliasSelector, sValue, sInstance, oSelectorModel = new sap.ui.model.json.JSONModel(), oSelectDialog = new sap.m.SelectDialog("alias_select_dialog", {
            title: sTitle,
            search: sap.ushell.components.tiles.utils.aliasSelectDoSearch,
            liveChange: sap.ushell.components.tiles.utils.aliasSelectDoSearch
        }), itemTemplate = new sap.m.StandardListItem({
            title: "{alias}"
        });

        oAliasSelector = oView.byId("target_application_aliasInput");

        sValue = oAliasSelector.getValue();

        sInstance = oView.byId("navigation_provider_instanceInput").getValue();
        oSelectDialog.addCustomData(new sap.ui.core.CustomData({
            key: "instance",
            value: sInstance
        }));

        oSelectDialog.open(sValue);
        // controllers can have different default objects
        oSelectorModel.setData(oController.aDefaultObjects.concat(sap.ushell.components.tiles.utils.aAliasData));

        oSelectDialog.bindAggregation("items", "/", itemTemplate);
        oSelectDialog.setModel(oSelectorModel);

        sap.ushell.components.tiles.utils.aliasSelectUpdateDialog(oSelectDialog, sValue);

        // cancel handler
        oSelectDialog.attachCancel(function(evt) {
            oAliasSelector.setValue(sValue);
            oAliasSelector.fireChange();
            oSelectDialog.destroy();
            oSelectDialog = null;
        });

        // confirm handler
        oSelectDialog.attachConfirm(function(evt) {
            var selectedItem = evt.getParameter("selectedItem");
            if (selectedItem) {
                oAliasSelector.setValue(selectedItem.getTitle());
                oAliasSelector.fireChange();
            }
            oSelectDialog.destroy();
            oSelectDialog = null;
        });
    };

    /**
     * This function applies table logic for the Action according to the Target Type. if Taregt Type is URL, then Action field should be disabled else
     * if it's Intent, then the Action field should be enabled.
     *
     * @param {object} oTargetTypeComboBox The target type field
     */
    sap.ushell.components.tiles.utils.onTargetTypeChange = function(oTargetTypeComboBox) {
        var sId = oTargetTypeComboBox.getParameter('id');
        var aParentCells = sap.ui.getCore().byId(sId).getParent().getCells();

        var sTargetType = oTargetTypeComboBox.getParameter('newValue');
        if (sTargetType == "Intent") {
            aParentCells[3].setEnabled(true); // Action field
            aParentCells[2].setShowValueHelp(true); // shows value Help for the Navigation Target field.
            aParentCells[2].setValue("");
        } else {
            aParentCells[2].setShowValueHelp(false); // Hides value Help for the Navigation Target field.
            aParentCells[2].setValue("");
            aParentCells[3].setEnabled(false); // Action field
            aParentCells[3].setValue("");
        }
    };

    /**
     * This function adds new row in the tile actions table.
     *
     * @param {object} oConfigurationView The configuration view to add new row in the tile actions table.
     */
    sap.ushell.components.tiles.utils.addTileActionsRow = function(oConfigurationView) {
        var oModel = oConfigurationView.getModel();
        var rows = oModel.getProperty('/config/tile_actions_rows');

        // Init a row template for adding new empty row to the tile actions table
        var newParamRow = this.getEmptyTileActionsRowObj();
        rows.push(newParamRow);
        oModel.setProperty('/config/tile_actions_rows', rows);
    };

    /**
     * This function delete rows in the tile actions table.
     *
     * @param {object} oConfigurationView The configuration view to delete rows from the tile actions table.
     */
    sap.ushell.components.tiles.utils.deleteTileActionsRow = function(oConfigurationView) {
        var oModel = oConfigurationView.getModel();
        var rows = oModel.getProperty('/config/tile_actions_rows');

        var table = oConfigurationView.byId("tileActions");
        var aSelectedItemsIndexes = table.getSelectedIndices();
        var aSortedDescending = aSelectedItemsIndexes.sort(function(a, b) {
            return b - a;
        }).slice();

        for (var i = 0; i < aSortedDescending.length; i++) {
            table.removeSelectionInterval(aSortedDescending[i], aSortedDescending[i]);// Make sure to turn off the selection or it will pass to the
            // next row.
            rows.splice(aSortedDescending[i], 1); // There is a major assumption here that the index in the model is identical to the index in the
            // table !!!
        }
        oModel.setProperty('/config/tile_actions_rows', rows);
    };

    /**
     * Checks the input of given configuration View.
     *
     * @param {object} oConfigurationView The configuration view to check the input for.
     * @param {oControlEvent} The event that triggered the call to this function.
     */
    sap.ushell.components.tiles.utils.checkInput = function(oConfigurationView, oControlEvent) {
        var oTranslationBundle = sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle(), oIconURLInput = oConfigurationView.byId("iconInput"), oUseSemObjNav = oConfigurationView.byId("useLpdCheckbox"), oSemObjectInput = oConfigurationView.byId("navigation_semantic_objectInput") || oConfigurationView.byId("semantic_objectInput"), oSemActionInput = oConfigurationView.byId("navigation_semantic_actionInput") || oConfigurationView.byId("semantic_actionInput"), sNewValue = jQuery.trim(oControlEvent.getParameter("newValue")), aItems, bFound, oValueState = sap.ui.core.ValueState.None, oValueStateText = null, j;

        switch (oControlEvent.getSource()) {
            case oIconURLInput:
                if (sNewValue != "" && sNewValue.substring(0, 11) !== "sap-icon://") {
                    oValueState = sap.ui.core.ValueState.Error;
                    oValueStateText = oTranslationBundle.getText("configuration.display_icon_url.warning");
                }
                break;
            case oUseSemObjNav:
                if (!oUseSemObjNav.getSelected()) {
                    oSemActionInput.setValueState(sap.ui.core.ValueState.None);
                    oSemObjectInput.setValueState(sap.ui.core.ValueState.None);
                }
                break;
            case oSemObjectInput:
                aItems = oSemObjectInput.getModel("suggest").getProperty("/items");
                bFound = false;
                for (j = 0; j < aItems.length; j = j + 1) {
                    if (aItems[j].obj === sNewValue) {
                        bFound = true;
                        break;
                    }
                }
                if (/[\-#&? ]/.test(sNewValue)) {
                    oValueState = sap.ui.core.ValueState.Error;
                    oValueStateText = oTranslationBundle.getText("configuration.semantic_object.error_invalid_chars");
                } else if (!bFound) {
                    oValueState = sap.ui.core.ValueState.Warning;
                    oValueStateText = oTranslationBundle.getText("configuration.semantic_object.warning");
                } else if (sNewValue == "") {
                    oValueState = sap.ui.core.ValueState.Error;
                }
                break;
            case oSemActionInput:
                if (/[\-#&? ]/.test(sNewValue)) {
                    oValueState = sap.ui.core.ValueState.Error;
                    oValueStateText = oTranslationBundle.getText("configuration.semantic_action.error_invalid_chars");
                } else if (sNewValue == "") {
                    oValueState = sap.ui.core.ValueState.Error;
                }
                break;
            default:
                break;
        }

        if (oValueState) {
            oControlEvent.getSource().setValueState(oValueState);
            if (oValueStateText !== null) {
                oControlEvent.getSource().setValueStateText(oValueStateText || "");
            }
        }
    };

    /**
     * Checks the input of given configuration View.
     *
     * @param {object} oConfigurationView The configuration view to check the input for.
     */
    sap.ushell.components.tiles.utils.checkInputOnSaveConfig = function(oConfigurationView) {
        var oIconURLInput = oConfigurationView.byId("iconInput");
        var oSemObjectInput = oConfigurationView.byId("navigation_semantic_objectInput");
        var oSemActionInput = oConfigurationView.byId("navigation_semantic_actionInput");
        var oUseSemObjNav = oConfigurationView.byId("useLpdCheckbox");
        var oTranslationBundle = sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle();
        var aItems = oSemObjectInput.getModel("suggest").getProperty("/items");
        var bFound = false, bReject = false, j;
        // Icon input check
        if (oIconURLInput.getValue() != "" && oIconURLInput.getValue().substring(0, 11) !== "sap-icon://") {
            oIconURLInput.setValueState(sap.ui.core.ValueState.Error);
            oIconURLInput.setValueStateText(oTranslationBundle.getText("configuration.display_icon_url.warning"));
            bReject = true;
        }
        // Semantic object input check
        for (j = 0; j < aItems.length; j = j + 1) {
            if (aItems[j].obj === oSemObjectInput.getValue()) {
                bFound = true;
                break;
            }
        }
        if (oUseSemObjNav.getSelected() && /[\-#&? ]/.test(oSemObjectInput.getValue())) {
            oSemObjectInput.setValueState(sap.ui.core.ValueState.Error);
            oSemObjectInput.setValueStateText(oTranslationBundle.getText("configuration.semantic_object.error_invalid_chars"));
            bReject = true;
        } else if (oUseSemObjNav.getSelected() && !bFound) {
            oSemObjectInput.setValueState(sap.ui.core.ValueState.Warning);
            oSemObjectInput.setValueStateText(oTranslationBundle.getText("configuration.semantic_object.warning"));
        } else if (oUseSemObjNav.getSelected() && oSemObjectInput.getValue() == "") {
            oSemObjectInput.setValueState(sap.ui.core.ValueState.Error);
            bReject = true;
        }
        // Semantic action input check
        if (/[\-#&? ]/.test(oSemActionInput.getValue())) {
            oSemActionInput.setValueState(sap.ui.core.ValueState.Error);
            oSemActionInput.setValueStateText(oTranslationBundle.getText("configuration.semantic_action.error_invalid_chars"));
            bReject = true;
        } else if (oUseSemObjNav.getSelected() && oSemActionInput.getValue() == "") {
            oSemActionInput.setValueState(sap.ui.core.ValueState.Error);
            bReject = true;
        }
        return bReject;
    };

    /**
     * Checks the input of given Target mapping configuration View.
     *
     * @param {object} oConfigurationView The configuration view to check the input for.
     * @param {oControlEvent} The event that triggered the call to this function.
     */
    sap.ushell.components.tiles.utils.checkTMInput = function(oConfigurationView, oControlEvent) {
        var oTranslationBundle = sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle(), oSemObjectInput = oConfigurationView.byId("semantic_objectInput"), oSemActionInput = oConfigurationView.byId("semantic_actionInput"), oTargetAppTitleInput = oConfigurationView.byId("target_application_descriptionInput"), oTargetAppURLInput = oConfigurationView.byId("target_application_urlInput"), oTargetAppCompInput = oConfigurationView.byId("target_application_componentInput"), oNavProviderRoleInput = oConfigurationView.byId("navigation_provider_roleInput"), oNavProviderInstanceInput = oConfigurationView.byId("navigation_provider_instanceInput"), oTargetAppAliasInput = oConfigurationView.byId("target_application_aliasInput"), oTargetAppIdInput = oConfigurationView.byId("target_application_idInput"),
        // /*oTargetAppLpdCust =*/ oConfigurationView.byId("typeLpd_cust"),
        // /*oTargetAppSapui5 =*/ oConfigurationView.byId("typeSapui5"),
        sNewValue = jQuery.trim(oControlEvent.getParameter("newValue")), aItems, bFound, oValueState = sap.ui.core.ValueState.None, oValueStateText = null, j;

        switch (oControlEvent.getSource()) {
            case oSemObjectInput:
                aItems = oSemObjectInput.getModel("suggest").getProperty("/items");
                bFound = false;
                for (j = 0; j < aItems.length; j = j + 1) {
                    if (aItems[j].obj === sNewValue) {
                        bFound = true;
                        break;
                    }
                }
                if (/[\-#&? ]/.test(sNewValue)) {
                    oValueState = sap.ui.core.ValueState.Error;
                    oValueStateText = oTranslationBundle.getText("configuration.semantic_object.error_invalid_chars");
                } else if (!bFound) {
                    oValueState = sap.ui.core.ValueState.Warning;
                    oValueStateText = oTranslationBundle.getText("configuration.semantic_object.warning");
                }
                if (oSemActionInput.getValue() == "") {
                    oSemActionInput.setValueState(sap.ui.core.ValueState.Error);
                }
                break;
            case oSemActionInput:
                if (/[\-#&? ]/.test(sNewValue)) {
                    oValueState = sap.ui.core.ValueState.Error;
                    oValueStateText = oTranslationBundle.getText("configuration.semantic_action.error_invalid_chars");
                } else if (sNewValue == "") {
                    oValueState = sap.ui.core.ValueState.Error;
                }
                break;
            case oTargetAppTitleInput:
                if (sNewValue == "") {
                    oValueState = sap.ui.core.ValueState.Error;
                }
                break;
            case oTargetAppURLInput:
                if (sNewValue == "") {
                    oValueState = sap.ui.core.ValueState.Error;
                } else if (!(/^[-~+,;:?%&#=/.\w]+$/.test(sNewValue))) {
                    oValueState = sap.ui.core.ValueState.Error;
                    oValueStateText = oTranslationBundle.getText("configuration.target_application.url.error_invalid_chars");
                }
                break;
            case oTargetAppCompInput:
                if (sNewValue == "") {
                    oValueState = sap.ui.core.ValueState.Error;
                } else if (sNewValue.substring(0, 17) == "SAPUI5.Component=") {
                    oValueState = sap.ui.core.ValueState.Error;
                    oValueStateText = oTranslationBundle.getText("configuration.target_application.component.error_invalid_input");
                }
                break;
            case oNavProviderRoleInput:
                if (sNewValue == "") {
                    oValueState = sap.ui.core.ValueState.Error;
                } else if (!(/^[\w]+$/.test(sNewValue))) {
                    oValueState = sap.ui.core.ValueState.Error;
                    oValueStateText = oTranslationBundle.getText("configuration.target_application.role.error_invalid_chars");
                }
                break;
            case oNavProviderInstanceInput:
                if (sNewValue == "") {
                    oValueState = sap.ui.core.ValueState.Error;
                } else if (!(/^[\w]+$/.test(sNewValue))) {
                    oValueState = sap.ui.core.ValueState.Error;
                    oValueStateText = oTranslationBundle.getText("configuration.target_application.instance.error_invalid_chars");
                }
                break;
            case oTargetAppAliasInput:
                if (sNewValue == "" && oTargetAppIdInput.getValue() == "") {
                    oValueState = sap.ui.core.ValueState.Error;
                    oValueStateText = oTranslationBundle.getText("configuration.target_application.alias_id.warning");
                } else if (sNewValue != "" && oTargetAppIdInput.getValue() != "") {
                    oValueState = sap.ui.core.ValueState.Error;
                    oValueStateText = oTranslationBundle.getText("configuration.target_application.alias_id.warning");
                    oTargetAppIdInput.setValueState(oValueState);
                    oTargetAppIdInput.setValueStateText(oValueStateText);
                } else {
                    oTargetAppIdInput.setValueState(sap.ui.core.ValueState.None);
                }
                break;
            case oTargetAppIdInput:
                if (sNewValue == "" && oTargetAppAliasInput.getValue() == "") {
                    oValueState = sap.ui.core.ValueState.Error;
                    oValueStateText = oTranslationBundle.getText("configuration.target_application.alias_id.warning");
                } else if (sNewValue != "" && oTargetAppAliasInput.getValue() != "") {
                    oValueState = sap.ui.core.ValueState.Error;
                    oValueStateText = oTranslationBundle.getText("configuration.target_application.alias_id.warning");
                    oTargetAppAliasInput.setValueState(oValueState);
                    oTargetAppAliasInput.setValueStateText(oValueStateText);
                } else if (sNewValue != "" && !(/^[A-Fa-f0-9]+$/.test(sNewValue))) {
                    oValueState = sap.ui.core.ValueState.Error;
                    oValueStateText = oTranslationBundle.getText("configuration.target_application.alias_id.error_invalid_chars");
                } else {
                    oTargetAppAliasInput.setValueState(sap.ui.core.ValueState.None);
                }
                break;
            default:
                break;
        }

        if (oValueState) {
            oControlEvent.getSource().setValueState(oValueState);
            if (oValueStateText !== null) {
                oControlEvent.getSource().setValueStateText(oValueStateText || "");
            }
        }
    };

    /**
     * Checks the input of given configuration View.
     *
     * @param {object} oConfigurationView The configuration view to check the input for.
     */
    sap.ushell.components.tiles.utils.checkTMInputOnSaveConfig = function(oConfigurationView) {
        var oTranslationBundle = sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle();
        var oSemObjectInput = oConfigurationView.byId("semantic_objectInput");
        var oSemActionInput = oConfigurationView.byId("semantic_actionInput");
        var oTargetAppTitleInput = oConfigurationView.byId("target_application_descriptionInput");
        var oTargetAppURLInput = oConfigurationView.byId("target_application_urlInput");
        var oTargetAppCompInput = oConfigurationView.byId("target_application_componentInput");
        var oNavProviderRoleInput = oConfigurationView.byId("navigation_provider_roleInput");
        var oNavProviderInstanceInput = oConfigurationView.byId("navigation_provider_instanceInput");
        var oTargetAppAliasInput = oConfigurationView.byId("target_application_aliasInput");
        var oTargetAppIdInput = oConfigurationView.byId("target_application_idInput");
        var oNavigationProvider = oConfigurationView.byId("targetTypeInput");
        var oTransaction = oConfigurationView.byId("target_transactionInput");
        var oWDApplication = oConfigurationView.byId("target_web_dynpro_applicationInput");
        var oFormFactorDesktopInput = oConfigurationView.byId("desktopCB");
        var oFormFactorTabletInput = oConfigurationView.byId("tabletCB");
        var oFormFactorPhoneInput = oConfigurationView.byId("phoneCB");
        var aItems = oSemObjectInput.getModel("suggest").getProperty("/items");
        var bFound = false, bReject = false, j;

        // Semantic object input check
        if (aItems != undefined) {
            for (j = 0; j < aItems.length; j = j + 1) {
                if (aItems[j].obj === oSemObjectInput.getValue()) {
                    bFound = true;
                    break;
                }
            }
        }
        if (/[\-#&? ]/.test(oSemObjectInput.getValue())) {
            oSemObjectInput.setValueState(sap.ui.core.ValueState.Error);
            oSemObjectInput.setValueStateText(oTranslationBundle.getText("configuration.semantic_object.error_invalid_chars"));
            bReject = true;
        } else if (!bFound) {
            oSemObjectInput.setValueState(sap.ui.core.ValueState.Warning);
            oSemObjectInput.setValueStateText(oTranslationBundle.getText("configuration.semantic_object.warning"));
        }
        // Semantic Action input check
        if (/[\-#&? ]/.test(oSemActionInput.getValue())) {
            oSemActionInput.setValueState(sap.ui.core.ValueState.Error);
            oSemActionInput.setValueStateText(oTranslationBundle.getText("configuration.semantic_action.error_invalid_chars"));
            bReject = true;
        } else if (oSemActionInput.getValue() == "") {
            oSemActionInput.setValueState(sap.ui.core.ValueState.Error);
            bReject = true;
        }

        var sNavProvider = oConfigurationView.getModel().getProperty("/config/navigation_provider");
        // SAPUI5 Fiori App radio is selected
        if (sNavProvider === "SAPUI5") {
            // Application title
            if (oTargetAppTitleInput.getValue() == "") {
                oTargetAppTitleInput.setValueState(sap.ui.core.ValueState.Error);
                bReject = true;
            }
            // Application URL
            if (oTargetAppURLInput.getValue() == "") {
                oTargetAppURLInput.setValueState(sap.ui.core.ValueState.Error);
                bReject = true;
            } else if (!(/^[-~+,;:?%&#=/.\w]+$/.test(oTargetAppURLInput.getValue()))) {
                oTargetAppURLInput.setValueState(sap.ui.core.ValueState.Error);
                oTargetAppURLInput.setValueStateText(oTranslationBundle.getText("configuration.target_application.url.error_invalid_chars"));
                bReject = true;
            }
            // Application component
            if (oTargetAppCompInput.getValue() == "") {
                oTargetAppCompInput.setValueState(sap.ui.core.ValueState.Error);
                bReject = true;
            } else if (oTargetAppCompInput.getValue().substring(0, 17) == "SAPUI5.Component=") {
                oTargetAppCompInput.setValueState(sap.ui.core.ValueState.Error);
                oTargetAppCompInput.setValueStateText(oTranslationBundle.getText("configuration.target_application.component.error_invalid_input"));
                bReject = true;
            }
        } else if (sNavProvider === "LPD") {
            // Launchpad Role
            if (oNavProviderRoleInput.getValue() == "") {
                oNavProviderRoleInput.setValueState(sap.ui.core.ValueState.Error);
                bReject = true;
            }
            if (!(/^[\w]+$/.test(oNavProviderRoleInput.getValue()))) {
                oNavProviderRoleInput.setValueState(sap.ui.core.ValueState.Error);
                var oValStateText = oTranslationBundle.getText("configuration.target_application.role.error_invalid_chars");
                oNavProviderRoleInput.setValueStateText(oValStateText);
                bReject = true;
            }
            // Launchpad instance
            if (oNavProviderInstanceInput.getValue() == "") {
                oNavProviderInstanceInput.setValueState(sap.ui.core.ValueState.Error);
                bReject = true;
            }
            if (!(/^[\w]+$/.test(oNavProviderInstanceInput.getValue()))) {
                oNavProviderInstanceInput.setValueState(sap.ui.core.ValueState.Error);
                var oValStateText = oTranslationBundle.getText("configuration.target_application.instance.error_invalid_chars");
                oNavProviderInstanceInput.setValueStateText(oValStateText);
                bReject = true;
            }
            // Application Alias and Application id
            if (oTargetAppAliasInput.getValue() == "" && oTargetAppIdInput.getValue() == "") {
                var oValStateText = oTranslationBundle.getText("configuration.target_application.alias_id.warning");
                oTargetAppAliasInput.setValueState(sap.ui.core.ValueState.Error);
                oTargetAppAliasInput.setValueStateText(oValStateText);
                oTargetAppIdInput.setValueState(sap.ui.core.ValueState.Error);
                oTargetAppIdInput.setValueStateText(oValStateText);
                bReject = true;
            }
            if (oTargetAppAliasInput.getValue() != "" && oTargetAppIdInput.getValue() != "") {
                var oValStateText = oTranslationBundle.getText("configuration.target_application.alias_id.warning");
                oTargetAppAliasInput.setValueState(sap.ui.core.ValueState.Error);
                oTargetAppAliasInput.setValueStateText(oValStateText);
                oTargetAppIdInput.setValueState(sap.ui.core.ValueState.Error);
                oTargetAppIdInput.setValueStateText(oValStateText);
                bReject = true;
            }
            // Application id
            if (oTargetAppIdInput.getValue() != "" && !(/^[A-Fa-f0-9]+$/.test(oTargetAppIdInput.getValue()))) {
                oTargetAppIdInput.setValueState(sap.ui.core.ValueState.Error);
                oTargetAppIdInput.setValueStateText(oTranslationBundle.getText("configuration.target_application.alias_id.error_invalid_chars"));
                bReject = true;
            }

        } else if (sNavProvider === "TR") {
            if (oTransaction.getValue() == "") {
                oTransaction.setValueState(sap.ui.core.ValueState.Error);
                bReject = true;
            }
        } else if (sNavProvider === "WDA") {
            if (oWDApplication.getValue() == "") {
                oWDApplication.setValueState(sap.ui.core.ValueState.Error);
                bReject = true;
            }
        } else if (sNavProvider === "URL") {
            if (oTargetAppURLInput.getValue() == "") {
                oTargetAppURLInput.setValueState(sap.ui.core.ValueState.Error);
                bReject = true;
            } else if (!(/^[-~+,;:?%&#=/.\w]+$/.test(oTargetAppURLInput.getValue()))) {
                oTargetAppURLInput.setValueState(sap.ui.core.ValueState.Error);
                oTargetAppURLInput.setValueStateText(oTranslationBundle.getText("configuration.target_application.url.error_invalid_chars"));
                bReject = true;
            }
        } else {
            oNavigationProvider.setValueState(sap.ui.core.ValueState.Error);
            oNavigationProvider.setValueStateText(oTranslationBundle.getText("configuration.navigation_provider.error_invalid_provider"));
            bReject = true;
        }

        if (!oFormFactorDesktopInput.getSelected() && !oFormFactorTabletInput.getSelected() && !oFormFactorPhoneInput.getSelected()) {
            var oValStateText = oTranslationBundle.getText("configuration.form_factor.warning");
            oFormFactorDesktopInput.setValueState(sap.ui.core.ValueState.Error);
            oFormFactorDesktopInput.setValueStateText(oValStateText);
            oFormFactorTabletInput.setValueState(sap.ui.core.ValueState.Error);
            oFormFactorTabletInput.setValueStateText(oValStateText);
            oFormFactorPhoneInput.setValueState(sap.ui.core.ValueState.Error);
            oFormFactorPhoneInput.setValueStateText(oValStateText);
            bReject = true;
        }
        return bReject;

    };

    sap.ushell.components.tiles.utils.updateTooltipForDisabledProperties = function(oConfigurationView) {

        // change tooltip for all translatable properties in case userlocale != original Locale
        var oModel = oConfigurationView.getModel();
        var isLocaleSuitable = oModel.getProperty("/config/isLocaleSuitable");
        if (!isLocaleSuitable) {
            var rb = sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle();
            var message = rb.getText("edit_configuration.original_locale_not_fit_tooltip", [
                oModel.getProperty("/config/userLocale"), oModel.getProperty("/config/orgLocale")
            ]);
            oConfigurationView.byId("titleInput").setTooltip(message);
            oConfigurationView.byId("subtitleInput").setTooltip(message);
            oConfigurationView.byId("keywordsInput").setTooltip(message);
            oConfigurationView.byId("infoInput").setTooltip(message);
        }
    };

    sap.ushell.components.tiles.utils.updateMessageStripForOriginalLanguage = function(oConfigurationView) {
        var oModel = oConfigurationView.getModel();
        if (oModel.getProperty("/config/isLocaleSuitable") === false) {
            var sMessageText = sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle().getText("edit_configuration.original_locale_not_fit_message", [
                oModel.getProperty("/config/orgLocale").toUpperCase(), oModel.getProperty("/config/userLocale").toUpperCase()
            ]);
            var oMessageStrip = oConfigurationView.byId("messageStrip");
            oMessageStrip.setVisible(true);
            oMessageStrip.setText(sMessageText);
            oMessageStrip.setType(sap.ui.core.MessageType.Warning);
        }
    };

    /**
     * Creates a model for the object selection list control. Loads all semantic objects and puts them into the cache as well as into the list of
     * suggested items.
     *
     * @param {object} oConfigController the configuration controller
     * @param {object} oSemanticObjectSelector the view of the selection control
     * @param {array} aDefaultValuesOverride if given, the default values that are in any case selectable ("*" and "") are overwritten. Must be in
     *        form <code>[{targetObject: "{semantic object id}", targetName: "{textual representation}"}]</code>
     * @private
     */
    sap.ushell.components.tiles.utils.createSemanticObjectModel = function(oConfigController, oSemanticObjectSelector, aDefaultValuesOverride) {
        var oView = oConfigController.getView(),
        // the URI of the semantic objects OData Servicw
        sUri = "/sap/opu/odata/UI2/INTEROP/SemanticObjects",
        // default selections that are prepended to the results of the OData call.
        // Options: "" (no sem obj) or "*" (all sem objects)
        aDefaultValues = [
            {
                obj: "",
                name: ""
            }, {
                obj: "*",
                name: "*"
            }
        ],
        // Note: copy the arrays!
        aDefaultObjects = (aDefaultValuesOverride || aDefaultValues).slice(0),
        // set model first only to default values
        oSelectorModel = new sap.ui.model.json.JSONModel();
        // required to make the suggestion list show all entries
        // the default value for the size limit is 100!
        oSelectorModel.setSizeLimit(999999);

        oSelectorModel.setProperty("/value", "");
        oSelectorModel.setProperty("/enabled", true);

        oSemanticObjectSelector.bindAggregation("suggestionItems", "suggest>/items", new sap.ui.core.Item({
            text: "{suggest>obj}"
        }));
        oSemanticObjectSelector.setModel(oSelectorModel, "suggest");

        if (sap.ushell.components.tiles.utils.aData.length > 0) {
            oSelectorModel.setData({
                items: aDefaultObjects.concat(sap.ushell.components.tiles.utils.aData)
            }, true); // merge
            return;
        }

        // read semantic objects from interop service
        OData.read({
            requestUri: sUri,
            headers: {
                "Accept": "application/json"
            }
        },
        // sucess
        function(oData, oResponse) {
            var sId, sText, i;
            for (i = 0; i < oData.results.length; i = i + 1) {
                sId = oData.results[i].id;
                sText = oData.results[i].text;
                sap.ushell.components.tiles.utils.aData.push({
                    obj: sId,
                    name: sText || sId
                });
            }
            oSelectorModel.setData({
                items: aDefaultObjects.concat(sap.ushell.components.tiles.utils.aData)
            }, true); // merge
        },
        // fail
        function(oError) {
            var sMessage = oError && oError.message ? oError.message : oError;
            if (oError.response) {
                sMessage += " - " + oError.response.statusCode + " " + oError.response.statusText;
            }
            jQuery.sap.log.error("Could not fetch data: " + sUri + ": " + sMessage, null,
            // the source component of the error - needs to be set within the parent controller control
            (oView.getViewName() || "sap.ushell.components.tiles.utils"));
        });
    };

    sap.ushell.components.tiles.utils.createRoleModel = function(oConfigController, oRoleSelector, oInstanceSelector) {
        var oView = oConfigController.getView(),
        // the URI of the semantic objects OData Servicw
        sUri = "/sap/opu/odata/UI2/INTEROP/GetLPDInstances",
        // set model first only to default values
        oSelectorModel = new sap.ui.model.json.JSONModel(), oInstanceSelectorModel = new sap.ui.model.json.JSONModel();
        // required to make the suggestion list show all entries
        // the default value for the size limit is 100!
        oSelectorModel.setSizeLimit(999999);
        oInstanceSelectorModel.setSizeLimit(999999);

        oSelectorModel.setProperty("/value", "");
        oSelectorModel.setProperty("/enabled", true);
        oInstanceSelectorModel.setProperty("/value", "");
        oInstanceSelectorModel.setProperty("/enabled", true);

        var itemTemplate = new sap.m.ColumnListItem({
            cells: [
                new sap.m.Label({
                    text: "{role}"
                }), new sap.m.Label({
                    text: "{instance}"
                })
            ]
        });

        oRoleSelector.bindAggregation("suggestionRows", "/items", itemTemplate);
        oInstanceSelector.bindAggregation("suggestionItems", "/items", new sap.ui.core.Item({
            text: "{instance}"
        }));
        oInstanceSelector.setModel(oInstanceSelectorModel);

        oRoleSelector.setModel(oSelectorModel);
        oRoleSelector.attachSuggestionItemSelected(function(evt) {
            oInstanceSelector.setValue(evt.getParameter("selectedRow").getCells()[1].getText());
            oInstanceSelector.fireChange();
        });

        if (sap.ushell.components.tiles.utils.aRoleData.length > 0) {
            oSelectorModel.setData({
                items: sap.ushell.components.tiles.utils.aRoleData
            }, false);
            oInstanceSelectorModel.setData({
                items: sap.ushell.components.tiles.utils.aRoleData
            }, false);
            return;
        }

        // read semantic objects from interop service
        OData.read({
            requestUri: sUri,
            headers: {
                "Accept": "application/json"
            }
        },
        // sucess
        function(oData, oResponse) {
            var sRole, sInstance, i;
            for (i = 0; i < oData.results.length; i = i + 1) {
                sRole = oData.results[i].lpdRole;
                sInstance = oData.results[i].instance;
                sap.ushell.components.tiles.utils.aRoleData.push({
                    role: sRole,
                    instance: sInstance
                });
            }
            oSelectorModel.setData({
                items: sap.ushell.components.tiles.utils.aRoleData
            }, true); // merge
            oInstanceSelectorModel.setData({
                items: sap.ushell.components.tiles.utils.aRoleData
            }, true); // merge
        },
        // fail
        function(oError) {
            var sMessage = oError && oError.message ? oError.message : oError;
            if (oError.response) {
                sMessage += " - " + oError.response.statusCode + " " + oError.response.statusText;
            }
            jQuery.sap.log.error("Could not fetch data: " + sUri + ": " + sMessage, null,
            // the source component of the error - needs to be set within the parent controller control
            (oView.getViewName() || "sap.ushell.components.tiles.utils"));
        });
    };

    sap.ushell.components.tiles.utils.createAliasModel = function(oConfigController, oAliasSelector) {
        var oView = oConfigController.getView(), oConfiguration,
        // the URI of the semantic objects OData Servicw
        sUri = "/sap/opu/odata/UI2/INTEROP/GetLPDAppAlias",
        // set model first only to default values
        oSelectorModel = new sap.ui.model.json.JSONModel();
        // required to make the suggestion list show all entries
        // the default value for the size limit is 100!
        oSelectorModel.setSizeLimit(999999);

        oSelectorModel.setProperty("/value", "");
        oSelectorModel.setProperty("/enabled", true);

        oAliasSelector.bindAggregation("suggestionItems", "/items", new sap.ui.core.Item({
            text: "{alias}"
        }));
        oAliasSelector.setModel(oSelectorModel);

        oConfiguration = sap.ushell.components.tiles.utils.getConfiguration(oView.oViewData.chip, true, true);
        if (oConfiguration && oConfiguration.navigation_provider_role && oConfiguration.navigation_provider_instance) {
            if (oConfiguration.navigation_provider_role != "" && oConfiguration.navigation_provider_instance != "") {
                sUri = sUri + "?role='" + oConfiguration.navigation_provider_role + "'&instance='" + oConfiguration.navigation_provider_instance + "'";
            }
        }

        // read semantic objects from interop service
        OData.read({
            requestUri: sUri,
            headers: {
                "Accept": "application/json"
            }
        },
        // sucess
        function(oData, oResponse) {
            var sAlias, sRole, sInstance, i, oModelData;
            sap.ushell.components.tiles.utils.aAliasData = [];
            for (i = 0; i < oData.results.length; i = i + 1) {
                sAlias = oData.results[i].lpdApplicationAlias;
                sRole = oData.results[i].lpdRole;
                sInstance = oData.results[i].lpdInstance;
                sap.ushell.components.tiles.utils.aAliasData.push({
                    role: sRole,
                    instance: sInstance,
                    alias: sAlias
                });
            }
            oModelData = oSelectorModel.getData();
            if (oModelData) {
                oModelData.items = sap.ushell.components.tiles.utils.aAliasData;
            } else {
                oModelData = {
                    items: sap.ushell.components.tiles.utils.aAliasData
                };
            }
            oSelectorModel.setData(oModelData, false);
        },
        // fail
        function(oError) {
            var sMessage = oError && oError.message ? oError.message : oError;
            if (oError.response) {
                sMessage += " - " + oError.response.statusCode + " " + oError.response.statusText;
            }
            jQuery.sap.log.error("Could not fetch data: " + sUri + ": " + sMessage, null,
            // the source component of the error - needs to be set within the parent controller control
            (oView.getViewName() || "sap.ushell.components.tiles.utils"));
        });
    };

    sap.ushell.components.tiles.utils.updateAliasModel = function(oView, oAliasSelector) {
        var sUri, sInstance, sRole, oSelectorModel = oAliasSelector.getModel();

        sInstance = oView.byId("navigation_provider_instanceInput").getValue();
        sRole = oView.byId("navigation_provider_roleInput").getValue();

        sUri = "/sap/opu/odata/UI2/INTEROP/GetLPDAppAlias?role='" + sRole + "'&instance='" + sInstance + "'";

        // read semantic objects from interop service
        OData.read({
            requestUri: sUri,
            headers: {
                "Accept": "application/json"
            }
        },
        // sucess
        function(oData, oResponse) {
            var sAlias, sRole, sInstance, i, oModelData;
            sap.ushell.components.tiles.utils.aAliasData = [];
            for (i = 0; i < oData.results.length; i = i + 1) {
                sAlias = oData.results[i].lpdApplicationAlias;
                sRole = oData.results[i].lpdRole;
                sInstance = oData.results[i].lpdInstance;
                sap.ushell.components.tiles.utils.aAliasData.push({
                    role: sRole,
                    instance: sInstance,
                    alias: sAlias
                });
            }
            oModelData = oSelectorModel.getData();
            if (oModelData) {
                oModelData.items = sap.ushell.components.tiles.utils.aAliasData;
            } else {
                oModelData = {
                    items: sap.ushell.components.tiles.utils.aAliasData
                };
            }
            oSelectorModel.setData(oModelData, false);
        },
        // fail
        function(oError) {
            var sMessage = oError && oError.message ? oError.message : oError;
            if (oError.response) {
                sMessage += " - " + oError.response.statusCode + " " + oError.response.statusText;
            }
            jQuery.sap.log.error("Could not fetch data: " + sUri + ": " + sMessage, null,
            // the source component of the error - needs to be set within the parent controller control
            (oView.getViewName() || "sap.ushell.components.tiles.utils"));
        });
    };

    sap.ushell.components.tiles.utils.createActionModel = function(oConfigController, oActionSelector) {
        var oItemModel = new sap.ui.model.json.JSONModel();
        var oView = oConfigController.getView(), oConfiguration, sAction;

        oItemModel.setData({
            "items": [
                {
                    "text": "display"
                }, {
                    "text": "approve"
                }, {
                    "text": "displayFactSheet"
                }, {
                    "text": "manage"
                }, {
                    "text": "create"
                }, {
                    "text": "monitor"
                }, {
                    "text": "track"
                }, {
                    "text": "change"
                }, {
                    "text": "register"
                }, {
                    "text": "release"
                }, {
                    "text": "analyzeKPIDetails"
                }, {
                    "text": "lookup"
                }, {
                    "text": "manageLineItems"
                }
            ]
        });

        sap.ushell.components.tiles.utils.aActionData = oItemModel.getData();

        oConfiguration = sap.ushell.components.tiles.utils.getConfiguration(oView.oViewData.chip, true, true);
        sAction = oConfiguration.navigation_semantic_action || oConfiguration.semantic_action;
        if (sAction) {
            if (!oItemModel.getData().items.some(function(oItem) {
                return oItem.text === sAction;
            })) {
                oItemModel.getData().items.push({
                    "text": sAction
                });
            }
        }

        oActionSelector.bindAggregation("suggestionItems", "items>/items", new sap.ui.core.Item({
            text: "{items>text}"
        }));

        oActionSelector.setModel(oItemModel, "items");
        oActionSelector.getBinding("suggestionItems").sort(new sap.ui.model.Sorter("text", false));
    };

    sap.ushell.components.tiles.utils.createNavigationProviderModel = function(oConfigController, oTargetTypeSelector) {
        var oItemModel = new sap.ui.model.json.JSONModel();
        var oResourcesBundle = sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle();

        oItemModel.setData({
            "items": [
                {
                    "key": "SAPUI5",
                    "text": oResourcesBundle.getText('configuration.target_application.sapui5')
                }, {
                    "key": "LPD",
                    "text": oResourcesBundle.getText('configuration.target_application.lpd_cust')
                }, {
                    "key": "TR",
                    "text": oResourcesBundle.getText('configuration.target_application.transaction')
                }, {
                    "key": "WDA",
                    "text": oResourcesBundle.getText('configuration.target_application.web_dynpro')
                }, {
                    "key": "URL",
                    "text": oResourcesBundle.getText('configuration.target_application.url')
                }
            ]
        });

        oTargetTypeSelector.bindItems("items>/items", new sap.ui.core.Item({
            key: "{items>key}",
            text: "{items>text}"
        }));
        oTargetTypeSelector.setModel(oItemModel, "items");
        oTargetTypeSelector.getBinding("items").sort(new sap.ui.model.Sorter("text", false));
    };

    /**
     * Displays the input fields relavent based on application type SAPUI5/LPD_CUST.
     *
     * @param {object} oConfigurationView The configuration view to check the input for.
     */
    sap.ushell.components.tiles.utils.displayApplicationTypeFields = function(sApplicationType, oConfigurationView) {

        switch (sApplicationType) {

            case 'LPD':
                sap.ushell.components.tiles.utils.displayLpdCustApplicationTypeFields(oConfigurationView);
                break;
            case 'SAPUI5':
                sap.ushell.components.tiles.utils.displaySapui5ApplicationTypeFields(oConfigurationView);
                break;
            case 'TR':
                sap.ushell.components.tiles.utils.displayTransactionApplicationTypeFields(oConfigurationView);
                break;
            case 'WDA':
                sap.ushell.components.tiles.utils.displayWebDynproApplicationTypeFields(oConfigurationView);
                break;
            case 'URL':
                sap.ushell.components.tiles.utils.displayURLApplicationTypeFields(oConfigurationView);
                break;
        }

    };

    /**
     * Displays the input fields relavent for application type SAPUI5.
     *
     * @param {object} oConfigurationView The configuration view to check the input for.
     */
    sap.ushell.components.tiles.utils.displaySapui5ApplicationTypeFields = function(oConfigurationView) {

        oConfigurationView.byId('navigation_provider_role').setVisible(false);
        oConfigurationView.byId('navigation_provider_roleInput').setVisible(false);

        oConfigurationView.byId('navigation_provider_instance').setVisible(false);
        oConfigurationView.byId('navigation_provider_instanceInput').setVisible(false);

        oConfigurationView.byId('target_application_alias').setVisible(false);
        oConfigurationView.byId('target_application_aliasInput').setVisible(false);

        oConfigurationView.byId('target_application_id').setVisible(false);
        oConfigurationView.byId('target_application_idInput').setVisible(false);

        oConfigurationView.byId('application_description').setVisible(true);
        oConfigurationView.byId('target_application_descriptionInput').setVisible(true);

        oConfigurationView.byId('application_url').setVisible(true);
        oConfigurationView.byId('target_application_urlInput').setVisible(true);

        oConfigurationView.byId('application_component').setVisible(true);
        oConfigurationView.byId('target_application_componentInput').setVisible(true);

        oConfigurationView.byId('target_transaction').setVisible(false);
        oConfigurationView.byId('target_transactionInput').setVisible(false);

        oConfigurationView.byId('target_web_dynpro_applicationInput').setVisible(false);
        oConfigurationView.byId('target_web_dynpro_configurationInput').setVisible(false);

        oConfigurationView.byId('target_system_alias').setVisible(false);
        oConfigurationView.byId('target_system_aliasInput').setVisible(false);
    };

    /**
     * Displays the input fields relavent for application type LPD_CUST.
     *
     * @param {object} oConfigurationView The configuration view to check the input for.
     */
    sap.ushell.components.tiles.utils.displayLpdCustApplicationTypeFields = function(oConfigurationView) {

        oConfigurationView.byId('application_description').setVisible(false);
        oConfigurationView.byId('target_application_descriptionInput').setVisible(false);

        oConfigurationView.byId('application_url').setVisible(false);
        oConfigurationView.byId('target_application_urlInput').setVisible(false);

        oConfigurationView.byId('application_component').setVisible(false);
        oConfigurationView.byId('target_application_componentInput').setVisible(false);

        oConfigurationView.byId('navigation_provider_role').setVisible(true);
        oConfigurationView.byId('navigation_provider_roleInput').setVisible(true);

        oConfigurationView.byId('navigation_provider_instance').setVisible(true);
        oConfigurationView.byId('navigation_provider_instanceInput').setVisible(true);

        oConfigurationView.byId('target_application_alias').setVisible(true);
        oConfigurationView.byId('target_application_aliasInput').setVisible(true);

        oConfigurationView.byId('target_application_id').setVisible(true);
        oConfigurationView.byId('target_application_idInput').setVisible(true);

        oConfigurationView.byId('target_transaction').setVisible(false);
        oConfigurationView.byId('target_transactionInput').setVisible(false);

        oConfigurationView.byId('target_web_dynpro_applicationInput').setVisible(false);
        oConfigurationView.byId('target_web_dynpro_configurationInput').setVisible(false);

        oConfigurationView.byId('target_system_alias').setVisible(false);
        oConfigurationView.byId('target_system_aliasInput').setVisible(false);
    };

    sap.ushell.components.tiles.utils.displayTransactionApplicationTypeFields = function(oConfigurationView) {

        oConfigurationView.byId('application_description').setVisible(true);
        oConfigurationView.byId('target_application_descriptionInput').setVisible(true);

        oConfigurationView.byId('application_url').setVisible(false);
        oConfigurationView.byId('target_application_urlInput').setVisible(false);

        oConfigurationView.byId('application_component').setVisible(false);
        oConfigurationView.byId('target_application_componentInput').setVisible(false);

        oConfigurationView.byId('navigation_provider_role').setVisible(false);
        oConfigurationView.byId('navigation_provider_roleInput').setVisible(false);

        oConfigurationView.byId('navigation_provider_instance').setVisible(false);
        oConfigurationView.byId('navigation_provider_instanceInput').setVisible(false);

        oConfigurationView.byId('target_application_alias').setVisible(false);
        oConfigurationView.byId('target_application_aliasInput').setVisible(false);

        oConfigurationView.byId('target_application_id').setVisible(false);
        oConfigurationView.byId('target_application_idInput').setVisible(false);

        oConfigurationView.byId('target_transaction').setVisible(true);
        oConfigurationView.byId('target_transactionInput').setVisible(true);

        oConfigurationView.byId('target_web_dynpro_applicationInput').setVisible(false);
        oConfigurationView.byId('target_web_dynpro_configurationInput').setVisible(false);

        oConfigurationView.byId('target_system_alias').setVisible(true);
        oConfigurationView.byId('target_system_aliasInput').setVisible(true);
    };

    sap.ushell.components.tiles.utils.displayWebDynproApplicationTypeFields = function(oConfigurationView) {

        oConfigurationView.byId('application_description').setVisible(true);
        oConfigurationView.byId('target_application_descriptionInput').setVisible(true);

        oConfigurationView.byId('application_url').setVisible(false);
        oConfigurationView.byId('target_application_urlInput').setVisible(false);

        oConfigurationView.byId('application_component').setVisible(false);
        oConfigurationView.byId('target_application_componentInput').setVisible(false);

        oConfigurationView.byId('navigation_provider_role').setVisible(false);
        oConfigurationView.byId('navigation_provider_roleInput').setVisible(false);

        oConfigurationView.byId('navigation_provider_instance').setVisible(false);
        oConfigurationView.byId('navigation_provider_instanceInput').setVisible(false);

        oConfigurationView.byId('target_application_alias').setVisible(false);
        oConfigurationView.byId('target_application_aliasInput').setVisible(false);

        oConfigurationView.byId('target_application_id').setVisible(false);
        oConfigurationView.byId('target_application_idInput').setVisible(false);

        oConfigurationView.byId('target_transaction').setVisible(false);
        oConfigurationView.byId('target_transactionInput').setVisible(false);

        oConfigurationView.byId('target_web_dynpro_applicationInput').setVisible(true);
        oConfigurationView.byId('target_web_dynpro_configurationInput').setVisible(true);

        oConfigurationView.byId('target_system_alias').setVisible(true);
        oConfigurationView.byId('target_system_aliasInput').setVisible(true);
    };

    /**
     * Displays the input fields relavent for application type SAPUI5.
     *
     * @param {object} oConfigurationView The configuration view to check the input for.
     */
    sap.ushell.components.tiles.utils.displayURLApplicationTypeFields = function(oConfigurationView) {

        oConfigurationView.byId('navigation_provider_role').setVisible(false);
        oConfigurationView.byId('navigation_provider_roleInput').setVisible(false);

        oConfigurationView.byId('navigation_provider_instance').setVisible(false);
        oConfigurationView.byId('navigation_provider_instanceInput').setVisible(false);

        oConfigurationView.byId('target_application_alias').setVisible(false);
        oConfigurationView.byId('target_application_aliasInput').setVisible(false);

        oConfigurationView.byId('target_application_id').setVisible(false);
        oConfigurationView.byId('target_application_idInput').setVisible(false);

        oConfigurationView.byId('application_description').setVisible(true);
        oConfigurationView.byId('target_application_descriptionInput').setVisible(true);

        oConfigurationView.byId('application_url').setVisible(true);
        oConfigurationView.byId('target_application_urlInput').setVisible(true);

        oConfigurationView.byId('application_component').setVisible(false);
        oConfigurationView.byId('target_application_componentInput').setVisible(false);

        oConfigurationView.byId('target_transaction').setVisible(false);
        oConfigurationView.byId('target_transactionInput').setVisible(false);

        oConfigurationView.byId('target_web_dynpro_applicationInput').setVisible(false);
        oConfigurationView.byId('target_web_dynpro_configurationInput').setVisible(false);

        oConfigurationView.byId('target_system_alias').setVisible(true);
        oConfigurationView.byId('target_system_aliasInput').setVisible(true);
    };

    sap.ushell.components.tiles.utils.getTileSettingsAction = function(oModel, saveSettingsCallback) {
        var oResourcesBundle = sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle();
        return {
            text: oResourcesBundle.getText('tileSettingsButtonTitle'),
            press: function() {

                var settingsView = sap.ui.view({
                    type: sap.ui.core.mvc.ViewType.JS,
                    viewName: "sap.ushell.ui.footerbar.SaveAsTile",
                    viewData: {
                        appData: {
                            showGroupSelection: false,
                            title: oModel.getProperty('/config/display_title_text'),
                            subtitle: oModel.getProperty('/config/display_subtitle_text'),
                            info: oModel.getProperty('/config/display_info_text'),
                            icon: oModel.getProperty('/config/display_icon_url'),
                            keywords: oModel.getProperty('/config/display_search_keywords')
                        }
                    }
                });

                var oSimpleForm = new sap.ui.layout.form.SimpleForm({
                    id: 'tileSettings',
                    layout: sap.ui.layout.form.SimpleFormLayout.GridLayout,
                    content: [
                        settingsView
                    ]
                }).addStyleClass("sapUshellAddBookmarkForm");

                var okButton = new sap.m.Button('bookmarkOkBtn', {
                    text: oResourcesBundle.getText('okBtn'),
                    press: function() {
                        saveSettingsCallback(settingsView);
                        oDialog.close();
                    },
                    enabled: true
                }), cancelButton = new sap.m.Button('bookmarkCancelBtn', {
                    text: oResourcesBundle.getText('cancelBtn'),
                    press: function() {
                        oDialog.close();
                    }
                });

                // enforce the title input as a mandatory field
                var enableOKButton = function(title) {
                    okButton.setEnabled(title.trim() ? true : false);
                };
                settingsView.getTitleInput().attachLiveChange(function() {
                    enableOKButton(this.getValue());
                });

                var oDialog = new sap.m.Dialog({
                    id: 'settingsDialog',
                    title: oResourcesBundle.getText('tileSettingsButtonTitle'),
                    contentWidth: '400px',
                    content: oSimpleForm,
                    beginButton: okButton,
                    endButton: cancelButton,
                    horizontalScrolling: false,
                    afterClose: function() {
                        oDialog.destroy();
                    }
                });

                oDialog.open();
            }
        };
    };
}());

}; // end of sap/ushell/components/tiles/utils.js
if ( !jQuery.sap.isDeclared('sap.ushell.functionBindPrototype') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview This file adds the missing Function.bind function for Webkit browsers.
 */

(function () {
    "use strict";
    /*global jQuery, sap */
    /*eslint no-extend-native: 0*/

    // ensure that sap.ushell exists
    jQuery.sap.declare("sap.ushell.functionBindPrototype");

    if (!Function.prototype.bind) {
        Function.prototype.bind = function(oThis) {
            if (typeof this !== "function") {
                // closest thing possible to the ECMAScript 5 internal IsCallable function
                throw new TypeError(
                        "Function.prototype.bind - what is trying to be bound is not callable");
            }

            var aArgs = Array.prototype.slice.call(arguments, 1), that = this, fNOP = function() {
            }, fBound = function() {
                return that.apply(this instanceof fNOP && oThis ? this
                        : oThis, aArgs.concat(Array.prototype.slice
                        .call(arguments)));
            };

            fNOP.prototype = this.prototype;
            fBound.prototype = new fNOP();

            return fBound;
        };
    }
}());

}; // end of sap/ushell/functionBindPrototype.js
if ( !jQuery.sap.isDeclared('sap.ushell.iconfonts') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview This file contains the functionality needed to register
 * the Fiori Wave 2 font icons
 */

(function () {
    "use strict";
    /*global jQuery, sap, setTimeout */

    jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


    jQuery.sap.declare("sap.ushell.iconfonts");
    sap.ushell.iconfonts = {};

    /*
     * loads SAP Fiori Wave 2 launch icon font and font icons that are needed in
     * launchpad UI itself
     */
    sap.ushell.iconfonts.registerFiori2IconFont = function () {
        // the lists of icons as [name, unicode code point] tuples
        // ... for Launchpad UI
        var oLaunchpadIcons = {
                fontFamily: "BusinessSuiteInAppSymbols",
                collectionName: "BusinessSuiteInAppSymbols",
                icons : [
                    ["icon-heart", "E000"], ["icon-quarter", "E001"], ["icon-year", "E002"],
                    ["icon-equalizer", "E003"], ["icon-component", "E004"], ["icon-component-private", "E005"],
                    ["icon-raw-material", "E006"], ["icon-sms", "E007"], ["icon-add-note", "E008"],
                    ["icon-change-time-horizon", "E009"], ["icon-table-chart-customization", "E00a"], ["icon-delegated-important-task", "E00b"],
                    ["icon-forklift", "E00c"], ["icon-coins", "E00d"], ["icon-filter-menu", "E00e"],
                    ["icon-target-to-date", "E00f"], ["icon-program", "E010"], ["icon-phase", "E011"],
                    ["icon-checklist", "E012"], ["icon-mirrored-task", "E013"], ["icon-sub-project", "E014"],
                    ["icon-checklist-item", "E015"], ["icon-adhoc-analysis", "E016"], ["icon-change-analysis", "E017"],
                    ["icon-review-demands", "E018"], ["icon-project-definition", "E019"], ["icon-data-access", "E01a"],
                    ["icon-define-shortage", "E01b"], ["icon-review-supplies", "E01c"], ["icon-change-log", "E01d"],
                    ["icon-priority-1", "E01e"], ["icon-priority-2", "E01f"], ["icon-jam", "E020"], ["icon-milestone", "E021"],
                    ["icon-bulleting-with-numbers", "E022"], ["icon-decrease-indent", "E023"], ["icon-increase-indent", "E024"],
                    ["icon-bold", "E025"],  ["icon-italic", "E026"], ["icon-strike-through", "E027"], ["icon-underline", "E028"],
                    ["icon-save-as", "E029"], ["icon-segmentation", "E02A"], ["icon-context-menu", "E02B"], ["icon-snapshot", "E02C"],
                    ["icon-substraction-b-a", "E02D"], ["icon-substraction-a-b", "E02E"], ["icon-intersection", "E02F"],
                    ["icon-union", "E030"], ["icon-top", "E031"], ["icon-bottom", "E032"],
                    ["icon-page-up", "E033"], ["icon-page-down", "E034"], ["icon-create-dashboard", "E035"],
                    ["icon-excelsius-file", "E036"], ["icon-open-folder", "E037"], ["icon-neutral", "E038"],
                    ["icon-split-segmentation", "E039"], ["icon-manage-budget", "E03A"], ["icon-blocked", "E03B"],
                    ["icon-pipette", "E03C"], ["icon-top-recipe", "E03D"], ["icon-recipe", "E03E"],
                    ["icon-ingredients", "E03F"], ["icon-multiple-charts", "E040"], ["icon-descending-bars", "E041"],
                    ["icon-descending-stacked-bars", "E042"], ["icon-scatter-plot", "E043"], ["icon-spill", "E044"],
                    ["icon-fire", "E045"], ["icon-stratification", "E046"], ["icon-relationship", "E047"],
                    ["icon-margin-decomposition", "E048"], ["icon-control-group", "E049"], ["icon-bullet-chart", "E04A"],
                    ["icon-responsible-area", "E04B"], ["icon-increase", "E04C"], ["icon-decrease", "E04D"],
                    ["icon-current-stock", "E04E"], ["icon-expedite", "E04F"], ["icon-postpone", "E050"],
                    ["icon-approved", "E051"], ["icon-partially-delivered", "E052"], ["icon-line-bar-chart", "E053"],
                    ["icon-expand-all", "E054"], ["icon-submission", "E055"], ["icon-change-request", "E056"],
                    ["icon-column-unselected", "E057"], ["icon-column-selected", "E058"], ["icon-row-unselected", "E059"],
                    ["icon-row-selected", "E05A"], ["icon-stock-requirements", "E05B"], ["icon-gender-male-and-female", "E05C"],
                    ["icon-icon-marital-status", "E05D"], ["icon-birthday", "E05E"], ["icon-classification", "E05F"],
                    ["icon-marked-for-deletion", "E060"], ["icon-bullet-chart", "E061"], ["icon-remove-filter", "E062"], ["icon-bank-account", "E063"],
                    ["icon-savings-account", "E064"], ["icon-debit-card", "E065"], ["icon-vip-customer", "E066"], ["icon-undesirable-customer", "E067"],
                    ["icon-answered-change-request", "E068"], ["icon-collected-change-request", "E069"], ["icon-draw-freehand", "E06A"],
                    ["icon-draw-circle", "E06B"], ["icon-completed", "E06C"], ["icon-answered", "E06D"], ["icon-traffic-cone", "E06E"],
                    ["icon-traffic-lights", "E06F"], ["icon-container", "E070"], ["icon-container-loading", "E071"], ["icon-traffic-jam", "E072"],
                    ["icon-products", "E073"], ["icon-sidepanel", "E074"], ["icon-split-screen", "E075"], ["icon-truck-driver", "E076"],
                    ["icon-keep-segment", "E077"], ["icon-exclude-segment", "E078"], ["icon-separate-segments", "E079"], ["icon-distribute-segments", "E07A"],
                    ["icon-next-open-item", "E07B"], ["icon-where-used", "E07C"], ["icon-outbound-delivery", "E07D"], ["icon-outbound-delivery-inactive", "E07E"],
                    ["icon-outbound-delivery-active", "E07F"], ["icon-target", "E080"], ["icon-source", "E081"], ["icon-material", "E082"],
                    ["icon-due-date", "E083"], ["icon-overdue", "E084"], ["icon-set-as-default", "E085"], ["icon-face-very-bad", "E086"],
                    ["icon-face-bad", "E087"], ["icon-face-skeptical", "E088"], ["icon-face-neutral", "E089"], ["icon-face-astonished", "E08A"],
                    ["icon-face-happy", "E08B"], ["icon-face-very-happy", "E08C"], ["icon-face-awful", "E08D"], ["icon-face-devastated", "E08E"],
                    ["icon-face-okey-dokey", "E08F"], ["icon-alarm", "E090"], ["icon-activate", "E091"], ["icon-segment-preview-reference-objects", "E092"],
                    ["icon-radius", "E093"], ["icon-polygon-black", "E094"], ["icon-polygon-white", "E095"], ["icon-polygon", "E096"],
                    ["icon-no-filter", "E097"], ["icon-grip", "E098"], ["icon-water", "E09A"], ["icon-liquid", "E09C"],
                    ["icon-gas", "E09B"], ["icon-gas-2", "e09d"], ["icon-water-2", "e09e"], ["icon-operator", "e09f"],
                    ["icon-target-filter", "e0a0"]
                ]
            },
            // old Fiori1 app icons
            oFiori1Icons = {
                fontFamily: "SAP-Icons",
                collectionName: "Fiori2",
                icons: [
                    ["F0017", "e05e"], ["F0018", "e0c3"], ["F0019", "e0c3"], ["F0020", "e0c3"],
                    ["F0021", "e10d"], ["F0366", "e129"], ["F0392", "e04f"], ["F0394", "e044"],
                    ["F0395", "e132"], ["F0396", "e064"], ["F0397", "e0a4"], ["F0398", "e0a4"],
                    ["F0399", "e044"], ["F0401", "e08d"], ["F0402", "e13e"], ["F0403", "e13e"],
                    ["F0404", "e033"], ["F0405", "e0b3"], ["F0406", "e043"], ["F0407", "e043"],
                    ["F0408", "e043"], ["F0409", "e075"], ["F0410", "e007"], ["F0411", "e075"]
                ]
            },
            // Fiori3 app icons
            oFiori3Icons = {
                fontFamily: "Fiori2",
                collectionName: "Fiori3",
                icons : [
                    ["F0246", "E218"], ["F0247", "E219"], ["F0250", "E21C"], ["F0251", "E21D"],
                    ["F0263", "E2A8"], ["F0508", "E2A9"], ["F0509", "E2AA"], ["F0510", "E2AB"],
                    ["F0533", "E2AC"], ["F0534", "E2AD"], ["F0535", "E2AE"], ["F0536", "E2AF"],
                    ["F0537", "E2B0"], ["F0538", "E2B1"], ["Lumira001", "E2B2"]
                ]
            },
            // Fiori2 app icons
            oAppIcons = {
                fontFamily: "Fiori2",
                collectionName: "Fiori2",
                icons : [
                    // transaction app icons
                    ["F0002", "E236"], ["F0003", "E202"], ["F0004", "E203"], ["F0005", "E204"],
                    ["F0006", "E205"], ["F0009", "E206"], ["F0010", "E207"], ["F0012", "E208"],
                    ["F0014", "E209"], ["F0018", "E200"], ["F0019", "E201"], ["F0023", "E20A"],
                    ["F0024", "E20B"], ["F0025", "E20C"], ["F0026", "E20D"], ["F0072", "E23A"],
                    ["F0100", "E23B"], ["F0101", "E23C"], ["F0102", "E23D"], ["F0106", "E20F"],
                    ["F0144", "E210"], ["F0190", "E23E"], ["F0194", "E23F"], ["F0210", "E242"],
                    ["F0211", "E243"], ["F0212", "E244"], ["F0217", "E211"], ["F0220", "E213"],
                    ["F0243", "E215"], ["F0244", "E216"], ["F0245", "E217"], ["F0246", "E218"],
                    ["F0247", "E219"], ["F0250", "E21C"], ["F0251", "E21D"], ["F0248", "E21A"],
                    ["F0249", "E21B"], ["F0252", "E21E"], ["F0257", "E21F"], ["F0281", "E220"],
                    ["F0282", "E221"], ["F0283", "E222"], ["F0284", "E223"], ["F0292", "E224"],
                    ["F0295", "E225"], ["F0296", "E226"], ["F0316", "E227"], ["F0317", "E228"],
                    ["F0321", "E229"], ["F0339", "E22A"], ["F0340", "E22B"], ["F0341", "E22C"],
                    ["F0342", "E22D"], ["F0365", "E212"], ["F0366", "E22F"], ["F0367", "E230"],
                    ["F0368", "E231"], ["F0369", "E235"], ["F0370", "E22E"], ["F0372", "E232"],
                    ["F0380", "E233"], ["F0381", "E234"], ["F0382", "E246"], ["F0390", "E20E"],
                    ["F0412", "E213"], ["F0429", "E2A6"], ["F0xx1", "E240"], ["F0xx2", "E241"],

                    // analytic app icons
                    ["F0013", "E237"], ["F0016", "E238"], ["F0028", "E239"], ["F0029", "E283"],
                    ["F0030", "E284"], ["F0031", "E285"], ["F0032", "E286"], ["F0033", "E287"],
                    ["F0034", "E288"], ["F0036", "E289"], ["F0038", "E28A"], ["F0039", "E28B"],
                    ["F0041", "E28C"], ["F0044", "E28D"], ["F0293", "E28E"], ["F0294", "E28F"],
                    ["F0297", "E290"], ["F0298", "E291"], ["F0299", "E292"], ["F0300", "E293"],
                    ["F0301", "E294"], ["F0302", "E295"], ["F0303", "E296"], ["F0304", "E297"],
                    ["F0305", "E298"], ["F0306", "E299"], ["F0323", "E29A"], ["F0324", "E29B"],
                    ["F0326", "E29C"], ["F0327", "E29D"], ["F0328", "E29E"], ["F0329", "E29F"],
                    ["F0331", "E2A1"], ["F0332", "E2A2"], ["F0343", "E2A3"], ["F0344", "E2A4"],
                    ["F0345", "E2A5"], ["F0388", "E2A7"], ["F0391", "E2A0"], ["F0260", "E2B4"],
                    ["FD10N", "E2B5"], ["FK10N", "E2B6"], ["FS10N", "E2B7"], ["FBL5N", "E2B8"],
                    ["FBL1N", "E2B9"], ["FFS01", "E2BA"], ["FBL3N", "E2BB"], ["FCOA1", "E2BC"]
                ]
            },
            //Fiori4 app icons
            oFiori4Icons = {
                fontFamily: "Fiori2",
                collectionName: "Fiori4",
                icons : [
                    ["F0194", "E2BD"], ["F0260", "E2B4"], ["F0433", "E21C"], ["F0251", "E2BE"],
                    ["F0499", "E2BF"], ["F0500", "E2C0"], ["F0501", "E2C1"], ["F0502", "E2C2"],
                    ["F0503", "E2C3"], ["F0504", "E2C4"], ["F0507", "E2C5"], ["F0530", "E2C6"],
                    ["F0531", "E2C7"], ["F0539", "E2C8"], ["F0544", "E2C9"], ["F0545", "E2CA"],
                    ["F0547", "E2CB"], ["F0576", "E2CC"], ["F0578", "E2CD"], ["F0579", "E2CE"],
                    ["F0580", "E2CF"], ["F0581", "E2D0"], ["F0582", "E2D1"], ["F0583", "E2D2"],
                    ["F0584", "E2D3"], ["F0586", "E2D4"], ["F0587", "E2D5"], ["F0588", "E2D6"],
                    ["F0589", "E2D7"], ["F0590", "E2D8"], ["F0591", "E2D9"], ["F0593", "E2DA"],
                    ["F0594", "E2DB"], ["F0597", "E2DC"], ["F0603", "E2DD"], ["F0604", "E2DE"],
                    ["F0605", "E2DF"], ["F0606", "E2E0"], ["F0607", "E2E1"], ["F0608", "E2E2"],
                    ["F0609", "E2E3"], ["F0615", "E2E4"], ["F0616", "E2E5"], ["F0618", "E2E6"],
                    ["F0617", "E2E7"], ["F0622", "E2E8"], ["F0623", "E2E9"], ["F0624", "E2BC"],
                    ["F0625", "E2EB"], ["F0626", "E2EC"], ["F0627", "E2ED"], ["F0629", "E2EE"],
                    ["F0630", "E2EF"], ["F0632", "E2F0"], ["F0633", "E2F1"], ["F0634", "E2F2"],
                    ["F0635", "E2F3"], ["F0636", "E2F4"], ["F0638", "E2F5"], ["F0639", "E2F6"],
                    ["F0643", "E2F7"], ["F0644", "E2F8"], ["F0645", "E2F9"], ["F0646", "E2FA"],
                    ["F0648", "E2FB"], ["F0649", "E2FC"], ["F0650", "E2FD"], ["F0654", "E2FE"],
                    ["F0655", "E2FF"], ["F0659", "E300"], ["F0660", "E301"], ["F0661", "E302"],
                    ["F0665", "E303"], ["F0666", "E304"], ["F0667", "E305"], ["F0671", "E306"],
                    ["F0672", "E307"], ["F0673", "E308"], ["F0675", "E309"], ["F0676", "E30A"],
                    ["F0677", "E30B"], ["F0678", "E30C"], ["F0679", "E30D"], ["F0680", "E30E"],
                    ["F0682", "E30F"], ["F0683", "E310"], ["F0684", "E240"], ["F0685", "E312"],
                    ["F0686", "E313"], ["F0687", "E314"], ["F0690", "E315"], ["F0691", "E316"],
                    ["F0692", "E317"], ["F0693", "E318"], ["F0694", "E319"], ["F0695", "E31A"],
                    ["F0700", "E31B"], ["F0598", "E31C"], ["F0600", "E38A"]
                ]
            },
            //Wave5 Fiori app icons
            oFiori5Icons = {
                fontFamily: "Fiori2",
                collectionName: "Fiori5",
                icons : [
                    ["F0263", "E321"], ["F0266", "E322"], ["F0834", "E31D"], ["F2001", "E31E"],
                    ["F0839", "E320"], ["F0270", "E323"], ["F0273", "E324"], ["F0439", "E325"],
                    ["F0443", "E326"], ["F0549", "E327"], ["F0550", "E328"], ["F0551", "E329"],
                    ["F0577", "E32A"], ["F0585", "E32B"], ["F0637", "E32C"], ["F0668", "E32D"],
                    ["F0669", "E32E"], ["F0670", "E330"], ["F0688", "E331"], ["F0689", "E332"],
                    ["F0701", "E333"], ["F0702", "E334"], ["F0703", "E335"], ["F0706", "E336"],
                    ["F0707", "E337"], ["F0708", "E338"], ["F0711", "E339"], ["F0712", "E33A"],
                    ["F0731", "E33B"], ["F0732", "E33C"], ["F0733", "E33D"], ["F0735", "E33E"],
                    ["F0736", "E340"], ["F0737", "E341"], ["F0742", "E342"], ["F0743", "E343"],
                    ["F0744", "E344"], ["F0745", "E345"], ["F0746", "E346"], ["F0747", "E347"],
                    ["F0748", "E348"], ["F0749", "E349"], ["F0750", "E34A"], ["F0751", "E34B"],
                    ["F0755", "E34C"], ["F0756", "E34D"], ["F0757", "E34E"], ["F0758", "E350"],
                    ["F0759", "E351"], ["F0760", "E352"], ["F0761", "E353"], ["F0763", "E354"],
                    ["F0764", "E355"], ["F0765", "E356"], ["F0768", "E357"], ["F0770", "E358"],
                    ["F0771", "E359"], ["F0772", "E35A"], ["F0774", "E35B"], ["F0776", "E35C"],
                    ["F0777", "E35D"], ["F0778", "E35E"], ["F0788", "E360"], ["F0789", "E361"],
                    ["F0790", "E362"], ["F0791", "E363"], ["F0792", "E364"], ["F0793", "E365"],
                    ["F0794", "E366"], ["F0806", "E367"], ["F0807", "E368"], ["F0808", "E369"],
                    ["F0809", "E36A"], ["F0810", "E36B"], ["F0811", "E36C"], ["F0812", "E36D"],
                    ["F0813", "E36E"], ["F0814", "E370"], ["F0815", "E371"], ["F0816", "E372"],
                    ["F0817", "E373"], ["F0818", "E374"], ["F0819", "E375"], ["F0820", "E376"],
                    ["F0821", "E377"], ["F0822", "E378"], ["F0823", "E379"], ["F0824", "E37A"],
                    ["F0825", "E37B"], ["F0826", "E37C"], ["F0827", "E37D"], ["F0828", "E37E"],
                    ["F0829", "E380"], ["F0830", "E381"], ["F0831", "E382"], ["F0717", "E383"],
                    ["F0718", "E384"], ["F0241", "E385"], ["F0246", "E386"], ["F0250", "E387"],
                    ["F0248", "E388"], ["F0252", "E389"], ["F0600", "E38A"], ["F0674", "E38B"],
                    ["F0247", "E38E"], ["F0251", "E390"]
                ]
            },

            oFiori6Icons = {
                fontFamily: "Fiori2",
                collectionName: "Fiori6",
                icons : [
                    ["F0795", "E397"], ["F0866", "E3A0"], ["F0865", "E3A1"], ["F0867", "E3A2"],
                    ["F0868", "E3A3"], ["F0869", "E3A4"], ["F0870", "E3A5"], ["F0138", "E3A6"],
                    ["F0752", "E3A7"], ["F0753", "E3A8"], ["F0773", "E3A9"], ["F0891", "E3AA"],
                    ["F0892", "E3AB"], ["F1023", "E3AC"], ["F0767", "E3AD"], ["F0849", "E3AE"],
                    ["F0670-1", "E393"], ["F0670-2", "E394"], ["F0670-3", "E395"], ["F0670-4", "E396"]
                ]
            },

            oFiori7Icons = {
                fontFamily: "Fiori2",
                collectionName: "Fiori7",
                icons : [
                    ["F1079", "E3B0"], ["F0738", "E3B1"], ["F1301", "E3B2"], ["F1302", "E3B3"],
                    ["F1303", "E3B4"], ["F1338", "E3B5"], ["F1263", "E3B6"], ["F1373", "E3B7"],
                    ["F0863", "E3B8"], ["F1068", "E3BA"], ["F0955", "E3B9"], ["F1242", "E3BB"],
                    ["F1405", "E3BC"], ["F1406", "E3BD"], ["F1407", "E3BE"], ["F1408", "E3BF"],
                    ["F1409", "E3C0"], ["F1410", "E3C1"], ["F1411", "E3C2"], ["F1412", "E3C3"],
                    ["F1413", "E3C4"], ["F1414", "E3C5"], ["F1415", "E3C6"], ["F0797", "E3C8"],
                    ["F0798", "E3C9"], ["F0800", "E3CA"], ["F0801", "E3CB"], ["F0804", "E3CC"],
                    ["F0850", "E3CD"], ["F0890", "E3CE"], ["F1075", "E3CF"], ["F1394", "E3D0"],
                    ["F1061", "E3D1"], ["F1062", "E3D2"], ["F1255", "E3D3"], ["F1077", "E3D4"],
                    ["F0843", "E3D5"], ["F1076", "E3D6"], ["F0859", "E3D7"], ["F1060", "E3D8"],
                    ["F1053", "E3D9"], ["F0900", "E3DA"], ["F0840", "E3DB"], ["F0842-1", "E3A6"],
                    ["F0842-2", "E22C"], ["F1476", "E3C7"]
                ]
            },

            oFiori8Icons = {
                fontFamily: "Fiori2",
                collectionName: "Fiori8",
                icons : [
                    ["F1317", "E3DC"], ["F1318", "E3DD"], ["F1319", "E3DE"], ["F1369", "E3DF"],
                    ["F1475", "E3E0"], ["F1345", "E3E1"], ["F1248", "E3E2"], ["F1067", "E3E3"],
                    ["F1332", "E3E4"], ["F1333", "E3E5"], ["F1334", "E3E6"], ["F1335", "E3E7"],
                    ["F1030", "E3E8"], ["F1457", "E3E9"], ["F1504", "E3EA"], ["F1505", "E3EB"]
                ]
            },

            oFiori9Icons = {
                fontFamily: "Fiori2",
                collectionName: "Fiori9",
                icons : [
                    ["F1094", "E3EC"], ["F1096", "E3ED"], ["F1353", "E3EE"], ["F1354", "E3EF"],
                    ["F1428", "E3F0"], ["F1492", "E3F1"], ["F1515", "E3F2"], ["F1516", "E3F3"],
                    ["F0997", "E400"], ["F1512", "E401"], ["F1563", "E402"], ["F1564", "E403"],
                    ["F1599", "E404"], ["F1596", "E405"], ["F1254", "E406"], ["F1618", "E407"],
                    ["F1561", "E408"]
                ]
            },

            oS4HanaIcons = {
                fontFamily: "Fiori2",
                collectionName: "S4Hana",
                icons : [
                    ["S0001", "E3F4"], ["S0002", "E3F5"], ["S0003", "E3F6"], ["S0004", "E3F7"],
                    ["S0005", "E3F8"], ["S0006", "E3F9"], ["S0007", "E3FA"], ["S0008", "E3FB"],
                    ["S0009", "E3FC"], ["S0010", "E3FD"], ["S0011", "E3FE"], ["S0012", "E3FF"]
                ]
            },
            oTNTIcons = {
                fontFamily: "SAPIconsTNT",
                collectionName: "TNTIcons",
                icons: [
                    ["Technical System", "e000"], ["Java System", "e001"], ["ABAP System", "e002"], ["System", "e004"],
                    ["System TREX", "e005"], ["System Tracks", "e006"], ["System Recommendation", "e003"], ["System HANA", "e00e"],
                    ["Technical Scenario", "e007"], ["Technical Instance", "e008"], ["Throughput Backlog", "e009"], ["Batch Processing", "e00a"],
                    ["Database Consistency", "e00b"], ["Intermediate Message", "e00c"], ["Exceptions", "e00d"]

                ]
            },
            oFioriInApp = {
                fontFamily: "FioriInAppIcons",
                collectionName: "FioriInAppIcons",
                icons : [
                    ["Hierarchal Tree", "E700"], ["Open", "E701"], ["Blocked", "E702"],
                    ["Partially Blocked", "E703"], ["Open1", "E704"], ["Partially Adopted", "E705"],
                    ["Due", "E706"], ["Overdue", "E707"], ["Sort", "E708"],
                    ["Missing Parts", "E709"], ["Fire", "E70A"], ["Dangerous Chemicals", "E70B"], ["Share", "E70C"],
                    ["Entertainment", "E70D"], ["Gift", "E70E"], ["QR Code", "E70F"]
                ]
            },
            oFioriNonNative = {
                fontFamily: "Fiori2",
                collectionName: "FioriNonNative",
                icons : [
                    ["FN0001", "E392"], ["FN0002", "E398"], ["FN0003", "E399"], ["FN0004", "E39A"],
                    ["FN0005", "E39B"], ["FN0006", "E39C"], ["FN0007", "E39D"], ["FN0008", "E39E"],
                    ["FN0009", "E39F"]
                ]
            };

        this.registerFonts(oFiori1Icons,  oFiori3Icons, oAppIcons, oLaunchpadIcons, oFioriInApp, oFiori4Icons,
            oFiori5Icons, oFioriNonNative, oFiori6Icons, oFiori7Icons, oFiori8Icons, oFiori9Icons, oS4HanaIcons,
            oTNTIcons);
    };

    /*
     * loads icon font characters
     *
     * call like <code>sap.ushell.iconfonts.registerFonts(oFontIcons1, oFontIcons2, ...);</code>
     *
     * @param {object} an object with icon font definition (see below). Note that the icon font has
     *          to be registered in CSS before (via @font-face).
     *          <code>
     *          var oIcon = {
     *              fontFamily: "FontFamilyName",   // from @font-face definition in CSS
     *              collectionName: "collection",   // IconPool collection name, e.g. 'Fiori2'
     *              icons : [["icon-name", "E001], [...], ...]  // list of tuples containing ("icon name", "unicode code point") tuples
     *          }
     *          </code>
     *
     * @private
     */
    sap.ushell.iconfonts.registerFonts = function () {
        var oIcon,
            i,
            j;
        for (i = 0; i < arguments.length; i = i + 1) {
            oIcon = arguments[i];
            for (j = 0; j < oIcon.icons.length; j = j + 1) {
                sap.ui.core.IconPool.addIcon(oIcon.icons[j][0], oIcon.collectionName, oIcon.fontFamily, oIcon.icons[j][1], false, true);
            }
        }
    };

}());
}; // end of sap/ushell/iconfonts.js
if ( !jQuery.sap.isDeclared('sap.ushell.library') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.ushell (1.32.6)
 */
jQuery.sap.declare("sap.ushell.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * SAP library: sap.ushell
 *
 * @namespace
 * @name sap.ushell
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained

jQuery.sap.require('sap.ui.layout.library'); // unlisted dependency retained

jQuery.sap.require('sap.m.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
	name : "sap.ushell",
	dependencies : ["sap.ui.core","sap.ui.layout","sap.m"],
	types: [
		"sap.ushell.ui.tile.State",
		"sap.ushell.ui.tile.StateArrow"
	],
	interfaces: [],
	controls: [
		"sap.ushell.components.factsheet.controls.PictureTile",
		"sap.ushell.components.factsheet.controls.PictureViewer",
		"sap.ushell.components.factsheet.controls.PictureViewerItem",
		"sap.ushell.ui.footerbar.AboutButton",
		"sap.ushell.ui.footerbar.AddBookmarkButton",
		"sap.ushell.ui.footerbar.ContactSupportButton",
		"sap.ushell.ui.footerbar.EndUserFeedback",
		"sap.ushell.ui.footerbar.HideGroupsButton",
		"sap.ushell.ui.footerbar.JamDiscussButton",
		"sap.ushell.ui.footerbar.JamShareButton",
		"sap.ushell.ui.footerbar.LogoutButton",
		"sap.ushell.ui.footerbar.SettingsButton",
		"sap.ushell.ui.footerbar.UserPreferencesButton",
		"sap.ushell.ui.launchpad.DashboardGroupsContainer",
		"sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage",
		"sap.ushell.ui.launchpad.GroupHeaderActions",
		"sap.ushell.ui.launchpad.GroupListItem",
		"sap.ushell.ui.launchpad.HeaderTile",
		"sap.ushell.ui.launchpad.LinkTileWrapper",
		"sap.ushell.ui.launchpad.LoadingDialog",
		"sap.ushell.ui.launchpad.Panel",
		"sap.ushell.ui.launchpad.PlusTile",
		"sap.ushell.ui.launchpad.SearchSuggestionList",
		"sap.ushell.ui.launchpad.SearchSuggestionListItem",
		"sap.ushell.ui.launchpad.Tile",
		"sap.ushell.ui.launchpad.TileContainer",
		"sap.ushell.ui.launchpad.TileState",
		"sap.ushell.ui.tile.DynamicTile",
		"sap.ushell.ui.tile.ImageTile",
		"sap.ushell.ui.tile.StaticTile",
		"sap.ushell.ui.tile.TileBase"
	],
	elements: [],
	version: "1.32.6"
});

/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ushell.ui.tile.State.
jQuery.sap.declare("sap.ushell.ui.tile.State");
/**
 * @class Denotes states for control parts and translates into standard SAP color codes
 *
 * @version 1.32.6
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ushell.ui.tile.State = {

	/**
	 * Alias for "None"
	 * @public
	 */
	Neutral : "Neutral",

	/**
	 * Indicates a state that is neutral, e.g. for standard display (Grey color)
	 * @public
	 */
	None : "None",

	/**
	 * Alias for "Error"
	 * @public
	 */
	Negative : "Negative",

	/**
	 * Indicates a state that is negative, e.g. marking an element that has to get attention urgently or indicates negative values (Red color)
	 * @public
	 */
	Error : "Error",

	/**
	 * Alias for "Success"
	 * @public
	 */
	Positive : "Positive",

	/**
	 * Indicates a state that is positive, e.g. marking a task successfully executed or a state where all is good (Green color)
	 * @public
	 */
	Success : "Success",

	/**
	 * Alias for "Warning"
	 * @public
	 */
	Critical : "Critical",

	/**
	 * Indicates a state that is critical, e.g. marking an element that needs attention (Orange color)
	 * @public
	 */
	Warning : "Warning"

};
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides enumeration sap.ushell.ui.tile.StateArrow.
jQuery.sap.declare("sap.ushell.ui.tile.StateArrow");
/**
 * @class The state of an arrow as trend direction indicator, pointing either up or down
 * @private
 *
 * @version 1.32.6
 * @static
 * @public
 * @ui5-metamodel This enumeration also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ushell.ui.tile.StateArrow = {

	/**
	 * The trend direction indicator is invisible
	 * @public
	 */
	None : "None",

	/**
	 * The trend direction indicator points up
	 * @public
	 */
	Up : "Up",

	/**
	 * The trend direction indicator points down
	 * @public
	 */
	Down : "Down"

};

// -----------------------------------------------------------------------------
// Begin of Library Initialization coding, copied from shared.js
// -----------------------------------------------------------------------------

// shared.js is automatically appended to library.js
//
// hiding (generated) types that are marked as @public by default
/**
 * @name sap.ushell.ui.tile.StateArrow
 * @private
 */
/**
 * @name sap.ushell.ui.tile.State
 * @private
 */
}; // end of sap/ushell/library.js
if ( !jQuery.sap.isDeclared('sap.ushell.override') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview This file contains miscellaneous functions which may be used
 * to override/replace existing SAPUI5 methods.
 */

(function () {
    "use strict";
    /*global jQuery, sap, setTimeout */

    // ensure that sap.ushell exists
    jQuery.sap.declare("sap.ushell.override");

    sap.ushell.override = {};

    /**
     * Override sap.ui.base.ManagedObject.updateAggregation
     *
     * This is a generic drop-in replacement. It avoids the destroy items call.
     * Instead, the bindings of existing items are updated.
     *
     * Note: Listbindings with grouping and Treebindings are not supported. In
     * these cases, the default method is still invoked.
     * @param {string} sName -
     */
    sap.ushell.override.updateAggregation = function (sName) {
        if (this.isTreeBinding(sName)) {
            // no idea how to handle -> delegate to parent
            sap.ui.base.ManagedObject.prototype.updateAggregation.apply(this, arguments);
        } else {
            var oBindingInfo = this.mBindingInfos[sName],
                oBinding = oBindingInfo.binding,
                aBindingContexts = oBinding.getContexts(),
                fnFactory = oBindingInfo.factory,
                oAggregationInfo = this.getMetadata().getJSONKeys()[sName],  // TO-DO fix handling of hidden aggregations

                sGroupFunction = oAggregationInfo._sMutator + "Group",
                bGrouped = oBinding.isGrouped() && this[sGroupFunction],

                i = 0,
                aItems = [],
                addNewItem = jQuery.proxy(function (oContext) {
                    var sId = this.getId() + "-" + jQuery.sap.uid(),
                        oClone = fnFactory(sId, oContext);
                    oClone.setBindingContext(oContext, oBindingInfo.model);
                    this[oAggregationInfo._sMutator](oClone);
                }, this);

            if (bGrouped) {
               // do not handle grouped aggregations -> delegate to parent
                sap.ui.base.ManagedObject.prototype.updateAggregation.apply(this, arguments);
            } else {
                aItems = this[oAggregationInfo._sGetter](); // get all items

                // Bind as many context as possible to existing elements. Create new ones if necessary.
                for (i = 0; i < aBindingContexts.length; ++i) {
                    if (i < aItems.length) {
                        aItems[i].setBindingContext(aBindingContexts[i], oBindingInfo.model);
                    } else {
                        addNewItem(aBindingContexts[i]);
                    }
                }

                // Delete unused elements.
                for (; i < aItems.length; ++i) {
                    aItems[i].destroy();
                }

                // Update the array length.
                aItems.length = aBindingContexts.length;
            }
        }
    };

    /**
     * Override sap.ui.base.ManagedObject.updateAggregation
     *
     * This is a generic drop-in replacement. It avoids the destroy items call.
     * Instead, the bindings of existing items are updated. Enables grouping!
     *
     * Note: Treebindings are not supported. In
     * these cases, the default method is still invoked.
     *
     * @param {string} sName -
     */
    sap.ushell.override.updateAggregationGrouped = function (sName) {
        var oBindingInfo = this.mBindingInfos[sName],
            oBinding = oBindingInfo.binding,
            fnFactory = oBindingInfo.factory,
            //oAggregationInfo = this.getMetadata().getJSONKeys()[sName],  // TODO fix handling of hidden aggregations
            oClone,
            oNewGroup = null,
            bGrouped = null,
            sGroup = null,
            that = this,
            aItems = that.getItems(),
            iLastIndex = 0,
            iListIndex = 0,
            i,
            sId,
            aToBeDestroyed = [];

        bGrouped = oBinding.isGrouped() && this.addItemGroup;
        jQuery.each(oBinding.getContexts(), function (iIndex, oContext) {
            if (bGrouped && oBinding.aSorters.length > 0) {
                oNewGroup = oBinding.aSorters[0].fnGroup(oContext);
                if (typeof oNewGroup === "string") {
                    oNewGroup = {
                        key: oNewGroup
                    };
                }
                if (oNewGroup.key !== sGroup) {
                    var oGroupHeader,
                        oHeader;
                    //If factory is defined use it
                    if (oBindingInfo.groupHeaderFactory) {
                        oGroupHeader = oBindingInfo.groupHeaderFactory(oNewGroup);
                    }
                    oHeader = oGroupHeader || new sap.m.GroupHeaderListItem({
                        title: oNewGroup.text || oNewGroup.key
                    }).addStyleClass("sapMListHdr");

                    that.insertAggregation("items", oHeader, iListIndex, true);
                    iListIndex = iListIndex + 1;
                    sGroup = oNewGroup.key;
                }
            }
            aItems = that.getItems();
            for (i = iListIndex; i < aItems.length; i = i + 1) {
                if (aItems[i].constructor === sap.m.GroupHeaderListItem) {
                    aToBeDestroyed.push(that.removeItem(aItems[i]));
                    aItems = that.getItems();
                }
            }
            if (iListIndex < aItems.length) {
                aItems[iListIndex].setBindingContext(oContext, oBindingInfo.model);
                if (aItems[iListIndex].aDelegates) {
                    jQuery.each(aItems[iListIndex].aDelegates, function (i, v) {
                        v.vThis = oContext;
                    });
                }
            } else {
                sId = that.getId() + "-" + iListIndex;
                oClone = fnFactory(sId, oContext);
                oClone.setBindingContext(oContext, oBindingInfo.model);
                that.addItem(oClone);
            }
            iListIndex = iListIndex + 1;
            iLastIndex = iListIndex;
        });

        for (i = aItems.length - 1; i >= iLastIndex; i = i - 1) {
            aToBeDestroyed.push(that.removeItem(aItems[i]));
        }

        setTimeout(function () {
            jQuery.each(aToBeDestroyed, function (i, v) {
                v.destroy();
            });
        }, 1);
    };

    /**
     * A convenience factory method to create "sap.ushell.override.updateAggregation()" already bound to a name.
     *
     * @param {string} sName
     *     the name of the aggregation
     *
     * @return {function} - jQuery.proxy(sap.ushell.override.updateAggregation, this, sName)()
     */
    sap.ushell.override.updateAggregatesFactory = function (sName) {
        return function() {
            jQuery.proxy(sap.ushell.override.updateAggregation, this, sName)();
        };
    };
}());

}; // end of sap/ushell/override.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.AccessKeysHandler') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/*global jQuery, sap, document */
(function () {
    "use strict";
    jQuery.sap.declare("sap.ushell.renderers.fiori2.AccessKeysHandler");

    var accessKeysHandler = function () {
    };

    accessKeysHandler.prototype = {

        keyCodes: jQuery.sap.KeyCodes,
        bFocusOnShell: true,
        bFocusPassedToExternalHandlerFirstTime: true,
        isFocusHandledByAnotherHandler: false,
        fnExternalKeysHandler: null,
        fnExternalShortcuts: null,

        handleSearchKey: function () {
            var searchField = sap.ui.getCore().byId('sf');
            var jqSearchField = jQuery(searchField.getDomRef());
            jqSearchField.click();
        },

        handleUserMenuKey: function () {
            var userPrefButton = sap.ui.getCore().byId('userPreferencesButton'),
                oShellController = sap.ui.getCore().byId("mainShell").oController;
            if (!userPrefButton) {
                userPrefButton = new sap.ushell.ui.footerbar.UserPreferencesButton("userPreferencesButton");
                userPrefButton.setModel(oShellController.getModel());
                oShellController._setUserPrefModel();
            }
            userPrefButton.showUserPreferencesDialog();
        },

        handleAccessOverviewKey: function () {
            var translationBundle = sap.ushell.resources.i18n,
                isSearchAvailable = this.oModel.getProperty("/searchAvailable"),
                contentList = []; //contains the content of the form depends on the launchpad configuration

            this.aShortcutsDescriptions.forEach(function (sViewName) {
                contentList.push(new sap.m.Label({text: sViewName.text}));
                contentList.push(new sap.m.Text({text: sViewName.description}));
            });

            if (isSearchAvailable) {
                contentList.push(new sap.m.Label({text: "Alt+S"}));
                contentList.push(new sap.m.Text({text: translationBundle.getText("actionSearch") }));
            }

            contentList.push(new sap.m.Label({text: "Alt+U"}));
            contentList.push(new sap.m.Text({text: translationBundle.getText("actionLoginDetails") }));

            var oSimpleForm = new sap.ui.layout.form.SimpleForm({
                editable: false,
                content: contentList
            }),

                oDialog,
                okButton = new sap.m.Button({
                    text: translationBundle.getText("okBtn"),
                    press: function () {
                        oDialog.close();
                    }
                });

            oDialog = new sap.m.Dialog({
                id: "hotKeysGlossary",
                title: translationBundle.getText("hotKeysGlossary"),
                contentWidth: "29.6rem",
                leftButton: okButton,
                afterClose: function () {
                    oDialog.destroy();
                }
            });

            oDialog.addContent(oSimpleForm);
            oDialog.open();
        },

        handleShortcuts: function (keyUpEvent) {
            if (keyUpEvent.altKey) {
                switch (String.fromCharCode(keyUpEvent.keyCode)) {
                case 'S':
                    this.handleSearchKey();
                    break;
                case 'U':
                    this.handleUserMenuKey();
                    break;

                //TODO : If we have time, register additional keys from the component (catalog + dashboard)
                case '0':
                    this.handleAccessOverviewKey();
                    break;
                } // End of switch
            } // End of if altKey
        },

        registerAppKeysHandler: function (fnHandler) {
            this.fnExternalKeysHandler = fnHandler;
        },

        resetAppKeysHandler: function () {
            this.fnExternalKeysHandler = null;
        },

        getAppKeysHandler: function () {
            return this.fnExternalKeysHandler;
        },

        registerAppShortcuts: function (fnHandler, aShortcutsDescriptions) {
            this.fnExternalShortcuts = fnHandler;
            this.aShortcutsDescriptions = aShortcutsDescriptions;
        },

        handleFocusBackToMe: function (keyUpEvent) {
            keyUpEvent.preventDefault();
            var handler = sap.ushell.renderers.fiori2.AccessKeysHandler;
            this.bFocusOnShell = true;

            if (keyUpEvent.shiftKey) {
                if (keyUpEvent.keyCode === handler.keyCodes.TAB) {
                    jQuery("#actionsBtn").focus();
                }
                if (keyUpEvent.keyCode === handler.keyCodes.F6) {
                    jQuery("#configBtn").focus();
                }
            } else {
                jQuery("#floatingActionBtn").focus();
            }

            //reset flag
            this.bFocusPassedToExternalHandlerFirstTime = true;
        },

        setIsFocusHandledByAnotherHandler: function (bHandled) {
            this.isFocusHandledByAnotherHandler = bHandled;
        },

        sendFocusBackToShell: function (oEvent) {
            this.handleFocusBackToMe(oEvent);
        },

        init: function (oModel) {
            this.oModel = oModel;
            jQuery(document).on('keydown', function (oEvent) {
                if (!this.bFocusOnShell && !this.isFocusHandledByAnotherHandler) {
                    if (this.fnExternalKeysHandler && jQuery.isFunction(this.fnExternalKeysHandler)) {
                        this.fnExternalKeysHandler(oEvent, this.bFocusPassedToExternalHandlerFirstTime);
                        this.bFocusPassedToExternalHandlerFirstTime = false;
                    }
                }

                this.handleShortcuts(oEvent);
                if (this.fnExternalShortcuts) {
                    this.fnExternalShortcuts(oEvent);
                }
                //reset flag
                this.setIsFocusHandledByAnotherHandler(false);
            }.bind(this)); // End of event handler
        }
    };

    sap.ushell.renderers.fiori2.AccessKeysHandler = new accessKeysHandler();
}());
}; // end of sap/ushell/renderers/fiori2/AccessKeysHandler.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.History') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, window */
    /*jslint nomen: true */
    jQuery.sap.declare("sap.ushell.renderers.fiori2.History");

    sap.ushell.renderers.fiori2.History = function () {
        this._history = [];
        this.backwards = false;
        this._historyPosition = -1;
        this._virtual = {};
    };

    sap.ushell.renderers.fiori2.History.prototype.hashChange = function (newHash, oldHash) {
        var historyIndex = this._history.indexOf(newHash);

        //new history entry
        if (historyIndex === -1) {
            //new item and there where x back navigations before - remove all the forward items from the history
            if (this._historyPosition + 1 < this._history.length) {
                this._history = this._history.slice(0, this._historyPosition + 1);
            }

            this._history.push(newHash);

            this._historyPosition += 1;
            this.backwards = false;
            this.forwards = false;
        } else {
            //internalNavigation
            this.backwards = this._historyPosition > historyIndex;
            this.forwards = this._historyPosition < historyIndex;

            this._historyPosition = historyIndex;
        }
    };

    sap.ushell.renderers.fiori2.History.prototype.pop = function() {
        var sLastHistory;
        if (this._history.length > 0) {
            sLastHistory = this._history.pop();
            this._historyPosition--;
        }
        return sLastHistory;
    };

    sap.ushell.renderers.fiori2.History.prototype.isVirtualHashchange = function (newHash, oldHash) {
        //the old hash was flagged as virtual
        return this._virtual.hasOwnProperty(oldHash) &&
            //the new Hash is the current One
            this.getCurrentHash() === newHash &&
            //the history has forward entries
            this._history.length - 1 > this._historyPosition &&
            //the old hash was the hash in the forward history direction
            this._history[this._historyPosition + 1] === oldHash;
    };

    sap.ushell.renderers.fiori2.History.prototype.setVirtualNavigation = function (hash) {
        this._virtual[hash] = true;
    };

    sap.ushell.renderers.fiori2.History.prototype.getCurrentHash = function () {
        return this._history[this._historyPosition] || null;
    };

    sap.ushell.renderers.fiori2.History.prototype.getHashIndex = function (hash) {
        return this._history.indexOf(hash);
    };

    sap.ushell.renderers.fiori2.History.prototype.getHistoryLength = function () {
        return this._history.length;
    };
}());

}; // end of sap/ushell/renderers/fiori2/History.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.Navigation') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, window */
    /*jslint nomen: true */
    jQuery.sap.declare("sap.ushell.renderers.fiori2.Navigation");

    sap.ushell.renderers.fiori2.Navigation = function () {
        //OBSOLETE FOR NOW: search is not part of the navigation
        this.SEARCH = {
            ID : "ShellSearch",
            SEMANTICOBJECT : "shell",
            ACTION : "search"
        };
        sap.ushell.Container.getService("NavTargetResolution").registerCustomResolver({
            name : "Search App Container",
            isApplicable : function (sHashFragment) {
                return sHashFragment === "#Action-search";
            },
            resolveHashFragment : function (sHashFragment) {
                var oDeferred = new jQuery.Deferred(),
                    res = {};
                if (sHashFragment === "#Action-search") {
                    res = {
                        "additionalInformation": "SAPUI5.Component=sap.ushell.renderers.fiori2.search.container",
                        "applicationType": "URL",
                        "url": jQuery.sap.getResourcePath("sap/ushell/renderers/fiori2/search/container")
                    };
                }
                oDeferred.resolve(res);
                return oDeferred.promise();
            }
        });
    };

    //custom resolver for the default FLP intent and for the old catalog intent
    sap.ushell.Container.getService("NavTargetResolution").registerCustomResolver({
        name : "FLP Resolver",
        isApplicable : function (sHashFragment) {
            return sHashFragment === "#Shell-home" || sHashFragment === "#shell-catalog";
        },
        resolveHashFragment : function (sHashFragment) {
            var oDeferred = new jQuery.Deferred(),
                res = {};
            if (sHashFragment === "#Shell-home" || sHashFragment === "#shell-catalog") {
                res = {
                    "additionalInformation": "SAPUI5.Component=sap.ushell.components.flp",
                    "applicationType": "URL",
                    "url": jQuery.sap.getResourcePath("sap/ushell/components/flp")
                };
            }
            oDeferred.resolve(res);
            return oDeferred.promise();
        }
    });

    sap.ushell.renderers.fiori2.Navigation = new sap.ushell.renderers.fiori2.Navigation();
}());

}; // end of sap/ushell/renderers/fiori2/Navigation.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.RendererExtensions') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/*global jQuery, sap */
/**
 * @name sap.ushell.renderers.fiori2.RendererExtensions
 * @since 1.26
 * @private
 */
(function () {
    "use strict";
    jQuery.sap.declare("sap.ushell.renderers.fiori2.RendererExtensions");



    // functions to be uses internally to communicate externally
    /**
     * @since 1.26
     * @private
     */
    function _init(oController) {
        _publishExternalEvent("rendererLoaded");
    }
    /**
     *
     * @since 1.26
     * @private
     */
    function _publishExternalEvent(sEventName, oData) {
        setTimeout(function () {
            sap.ui.getCore().getEventBus().publish("sap.ushell.renderers.fiori2.Renderer", sEventName, oData);
        }, 0);
    }
    /**
     *
     * @since 1.26
     * @private
     */
    sap.ushell.renderers.fiori2.utils = {};

    /**
     * Publish event externally. The Namespace of the event is "sap.ushell.renderers.fiori2.Renderer"
     * @param {string} sEventName
     *   The event name
     * @param {object} oData
     *   The data of the event
     *
     * @private
     */
    sap.ushell.renderers.fiori2.utils.publishExternalEvent = _publishExternalEvent;


    // initialize the sap.ushell.renderers.fiori2 publish the event "rendererLoaded" externally once.

    sap.ushell.renderers.fiori2.utils.init = _init;

    /*-------------start New Code ------------------------------------------------------*/
    function _addSubHeader(oItem, sLaunchpadState1, sLaunchpadState2) {
        sap.ushell.Container.getRenderer("fiori2").showSubHeader(oItem.getId(), false, [sLaunchpadState1, sLaunchpadState2]);
    }

    function _removeSubHeader(oItem, sLaunchpadState1, sLaunchpadState2) {
        sap.ushell.Container.getRenderer("fiori2").hideSubHeader(oItem.getId(), false, [sLaunchpadState1, sLaunchpadState2]);
    }

    function _addHeaderItem(oItem, sLaunchpadState1, sLaunchpadState2) {
        sap.ushell.Container.getRenderer("fiori2").showHeaderItem(oItem.getId(), false, [sLaunchpadState1, sLaunchpadState2]);
    }

    function _removeHeaderItem(oItem, sLaunchpadState1, sLaunchpadState2) {
        sap.ushell.Container.getRenderer("fiori2").hideHeaderItem(oItem.getId(), false, [sLaunchpadState1, sLaunchpadState2]);
    }

    function _addOptionsActionSheetButton(oButton, sLaunchpadState1, sLaunchpadState2) {
        sap.ushell.Container.getRenderer("fiori2").showActionButton(oButton.getId(), false,  [sLaunchpadState1, sLaunchpadState2]);
    }

    function _removeOptionsActionSheetButton(oButton, sLaunchpadState1, sLaunchpadState2) {
        sap.ushell.Container.getRenderer("fiori2").hideActionButton(oButton.getId(), false, [sLaunchpadState1, sLaunchpadState2]);
    }

    function _setLeftPaneContent(oContent, sLaunchpadState1, sLaunchpadState2) {
        sap.ushell.Container.getRenderer("fiori2").showLeftPaneContent(oContent.getId(), false,  [sLaunchpadState1, sLaunchpadState2]);
    }

    function _removeLeftPaneContent(sLaunchpadState1, sLaunchpadState2) {
        sap.ushell.Container.getRenderer("fiori2").hideLeftPaneContent(false, [sLaunchpadState1, sLaunchpadState2]);
    }

    function _addFloatingActionButton(oItem, sLaunchpadState1, sLaunchpadState2) {
        sap.ushell.Container.getRenderer("fiori2").showFloatingActionButton(oItem.getId(), false, [sLaunchpadState1, sLaunchpadState2]);
    }

    function _removeFloatingActionButton(oItem, sLaunchpadState1, sLaunchpadState2) {
        sap.ushell.Container.getRenderer("fiori2").hideFloatingActionButton(oItem.getId(), false, [sLaunchpadState1, sLaunchpadState2]);
    }

    function _addHeaderEndItem(oItem, sLaunchpadState1, sLaunchpadState2) {
        sap.ushell.Container.getRenderer("fiori2").showHeaderEndItem(oItem.getId(), false, [sLaunchpadState1, sLaunchpadState2]);
    }

    function _removeHeaderEndItem(oItem, sLaunchpadState1, sLaunchpadState2) {
        sap.ushell.Container.getRenderer("fiori2").hideHeaderEndItem(oItem.getId(), false, [sLaunchpadState1, sLaunchpadState2]);
    }

    /*-------------general functions Code ------------------------------------------------------*/
    function _getConfiguration() {
        return sap.ushell.Container.getRenderer("fiori2").getModelConfiguration();
    }


    function _setHeaderItemVisibility(sItem, sLaunchpadState, bToLocal, bIsVisible) {
        var oItem = sap.ui.getCore().byId(sItem);
        if (bIsVisible) {
            sap.ushell.Container.getRenderer("fiori2").showHeaderItem(oItem.getId(), bToLocal, [sLaunchpadState]);
        }
    }

    function _addEndUserFeedbackCustomUI(oCustomUIContent, bShowCustomUIContent) {
        sap.ushell.Container.getRenderer("fiori2").addEndUserFeedbackCustomUI(oCustomUIContent, bShowCustomUIContent);
    }


    function _addUserPreferencesEntry(entryObject) {
        sap.ushell.Container.getRenderer("fiori2").addUserPreferencesEntry(entryObject);
    }

    function _setHeaderTitle(sTitle) {
        sap.ushell.Container.getRenderer("fiori2").setHeaderTitle(sTitle);
    }

    function _setLeftPaneVisibility(sLaunchpadState, bVisible) {
        sap.ushell.Container.getRenderer("fiori2").setLeftPaneVisibility(sLaunchpadState, bVisible);
    }

    function _setHeaderHiding(bHiding) {
        sap.ushell.Container.getRenderer("fiori2").setHeaderHiding(bHiding);
    }

    function _setFooter(oFooter) {
        sap.ushell.Container.getRenderer("fiori2").setFooter(oFooter);
    }

    function _removeFooter() {
        sap.ushell.Container.getRenderer("fiori2").removeFooter();
    }
    /*-------------end New Code ------------------------------------------------------*/

    //functions to be uses by a public API


    // a public API
    function RendererExtensions() {

        /**
         * Adds a ShellHeadItem to the headItems aggregation of the see sap.ushell.ui.shell.shell, in the given launchpad states
         * (see sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState).
         * If no launchpad states are provided the item will be added in all states.
         * The item is added to the left side of the header.
         * Currently you can add only one item. If an item already exists, the added item overrides the existing item,
         * and a warning is written to the log.
         *
         * @param {sap.ushell.ui.shell.ShellHeadItem} oItem
         *   The item to be added.
         * @param {sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState} [sLaunchpadState1]
         *   A launchpad state in which to add the item.
         * @param {sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState} [sLaunchpadState2]
         *   A launchpad state in which to add the item.
         *
         * @since 1.26
         *
         * @private
         */
        this.addHeaderItem = _addHeaderItem;

        this.setHeaderItemVisibility = _setHeaderItemVisibility;

        //TODO: Add documentations
        this.addSubHeader = _addSubHeader;

        //TODO: Add documentations
        this.removeSubHeader = _removeSubHeader;


        /**
         * Adds a ShellHeadItem to the headEndItems aggregation of the see sap.ushell.ui.shell.shell, in the given launchpad states
         * (see sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState).
         * If no launchpad states are provided the item will be added in all states.
         * The item is added to the right side of the header.
         * Currently you can add only one item. If an item already exists, the added item overrides the existing item,
         * and a warning is written to the log.
         *
         * @param {sap.ushell.ui.shell.ShellHeadItem} oItem
         *   The item to be added.
         * @param {sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState} [sLaunchpadState1]
         *   A launchpad state in which to add the item.
         * @param {sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState} [sLaunchpadState2]
         *   A launchpad state in which to add the item.
         * @since 1.26
         *
         * @private
         */
        this.addHeaderEndItem = _addHeaderEndItem;

        /**
         * Removes the ShellHeadItem from the headItems aggregation of the see sap.ushell.ui.shell.shell, in the given launchpad states
         * (see sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState).
         * If no launchpad states are provided the item is removed from all states.
         *
         * @param {sap.ushell.ui.shell.ShellHeadItem} oItem
         *   The item to be removed.
         * @param {sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState} [sLaunchpadState1]
         *   A launchpad state from which to remove the item.
         * @param {sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState} [sLaunchpadState2]
         *   A launchpad state from which to remove the item.
         * @since 1.26
         *
         * @private
         */
        this.removeHeaderItem = _removeHeaderItem;

        /**
         * Removes the ShellHeadItem from the headEndItems aggregation of the see sap.ushell.ui.shell.shell, in the given launchpad states
         * (see sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState).
         * If no launchpad states are provided the item is removed from all states.
         *
         * @param {sap.ushell.ui.shell.ShellHeadItem} oItem
         *   The item to be removed.
         * @param {sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState} [sLaunchpadState1]
         *   A launchpad state from which to remove the item.
         * @param {sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState} [sLaunchpadState2]
         *   A launchpad state from which to remove the item.
         * @since 1.26
         *
         * @private
         */
        this.removeHeaderEndItem = _removeHeaderEndItem;

        /**
         * Adds a custom control to a dedicated section within the End User Feedback dialog.
         *
         *
         * @param {sap.ui.core.Control}  oCustomUIContent
         *   The custom control to bee added within the End User Feedback dialog.
         * @param {boolean}  bShowCustomUIContent
         * @default true
         *   The visibility state of the added custom control.
         * @since 1.26
         * @private
         */

        this.addEndUserFeedbackCustomUI = _addEndUserFeedbackCustomUI;

        /**
         * Adds a button to the action sheet which opens when clicking the 'options' button, in the given launchpad states
         * (see sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState).
         * If no launchpad states are provided the button will be added in all states.
         * The button is added to the action sheet before the Log Out button (if exists).
         * @param {sap.m.Button} oButton
         *   The button to be added. The button should have an icon, text, tooltip and a press callback
         * @param {sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState} [sLaunchpadState1]
         *   A launchpad state in which to add the button.
         * @param {sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState} [sLaunchpadState2]
         *   A launchpad state in which to add the button.
         * @since 1.26
         *
         * @private
         */
        this.addOptionsActionSheetButton = _addOptionsActionSheetButton;

        /**
         * Removes a button from the action sheet which opens when clicking the 'options' button, in the given launchpad states
         * (see sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState).
         * If no launchpad states are provided the button is removed from all states.
         * You can only remove buttons that were added to the action sheet using see sap.ushell.renderers.fiori2.RendererExtensions.addOptionsActionSheetButton
         *
         * @param {sap.m.Button} oButton
         *   The button to be removed.
         * @param {sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState} [sLaunchpadState1]
         *   A launchpad state from which to remove the button.
         * @param {sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState} [sLaunchpadState2]
         *   A launchpad state from which to remove the button.
         *
         * @since 1.26
         *
         * @private
         */
        this.removeOptionsActionSheetButton = _removeOptionsActionSheetButton;

        /**
         * Displays a footer at the bottom of the Fiori launchpad page. The footer is added to all launchpad states.
         * @param {sap.m.IBar} oFooter
         *   The footer to set.
         * @since 1.26
         *
         * @private
         */
        this.setFooter = _setFooter;

        /**
         * Removes the footer that was set using see sap.ushell.renderers.fiori2.RendererExtensions.setFooter from the
         * Fiori launchpad page. The footer is removed from all launchpad states.
         * Note that once removed, the footer might be destroyed and will not be available for reuse.
         * @since 1.26
         *
         * @private
         */
        this.removeFooter = _removeFooter;

        /**
         * Add an entry to the User Preferences dialog box.
         * @param {object} oConfig - defines the configuration settings for the added entry.
         *  [entryHelpID] : {String} - the ID of the object.
         *  title : {String} - the title of the entry to be presented in the list of User Preferences. We recommend to use the string from the translation bundle.
         *  value : {String}/{function} - a string to be presented as the value of the entry OR a function to be called which returns a {jQuery.Deferred.promise} object.
         *  [onSave] : {function} - a function to be called which returns a {jQuery.Deferred.promise} object when clicking Save in the User Preferences dialog box. If an error occurs, pass the error message via the {jQuery.Deferred.promise} object. Errors are displayed in the log.
         *  [onCancel] : {function} - a function to be called that closes the User Preferences dialog box without saving any changes.
         *  content : {function} - a function to be called which returns a {jQuery.Deferred.promise} object which consists of a {sap.ui.core.Control} to be displayed in a follow-on dialog box.
         *
         * @since 1.27
         *
         * @private
         */
        this.addUserPreferencesEntry = _addUserPreferencesEntry;

        /**
         * Set the title in the Shell Header
         * @param {String} sTitle
         *  The text of the title to set
         *
         * @since 1.27
         *
         * @private
         */
        this.setHeaderTitle = _setHeaderTitle;

        /**
         * Set the visibility of the Shell Header
         * @param {boolean} bHiding
         *  The visibility of the Shell Header
         *
         * @since 1.29
         *
         * @private
         */
        this.setHeaderHiding = _setHeaderHiding;

        /**
         * The launchpad states that can be passed as a parameter.
         * Values:
         * App - launchpad state when running a Fiori app
         * Home - launchpad state when the home page is open
         *
         * @since 1.26
         *
         * @private
         */
        this.LaunchpadState = {
            App: "app",
            Home: "home"
        };

        /**
         * Adds a button to the bottom of the Fiori launchpad page, in the given launchpad states
         * (see sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState).
         * If no launchpad state is provided the button is added in all states.
         * @param {sap.m.Button} oButton
         *   The button to be added. The button should have an icon, text, a tooltip and a press callback
         * @param {sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState} [sLaunchpadState1]
         *   A launchpad state in which to add the button.
         * @param {sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState} [sLaunchpadState2]
         *   A launchpad state in which to add the button.
         * @since 1.30
         *
         * @private
         */
        this.addFloatingActionButton = _addFloatingActionButton;

        /**
         * Removes a button from the bottom of the Fiori launchpad page, in the given launchpad states
         * (see sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState).
         * If no launchpad state is provided the button is removed from all states.
         * You can only remove buttons that were added to the Fiori launchpad page using see sap.ushell.renderers.fiori2.RendererExtensions.addFloatingActionButton
         *
         * @param {sap.m.Button} oButton
         *   The button to be removed.
         * @param {sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState} [sLaunchpadState1]
         *   A launchpad state from which to remove the button.
         * @param {sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState} [sLaunchpadState2]
         *   A launchpad state from which to remove the button.
         * @since 1.30
         *
         * @private
         */
        this.removeFloatingActionButton = _removeFloatingActionButton;

        /**
         * Sets the content of the left pane in Fiori launchpad, in the given launchpad states
         * (see sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState).
         * If no launchpad state is provided the content is added in all states.
         * @param {sap.ui.view} oView
         *   The content to set.
         * @param {sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState} [sLaunchpadState1]
         *   A launchpad state in which to set the content.
         * @param {sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState} [sLaunchpadState2]
         *   A launchpad state in which to set the content.
         * @since 1.30
         *
         * @private
         */
        this.setLeftPaneContent = _setLeftPaneContent;


        /**
         * Removes content from the left pane content that was set using see sap.ushell.renderers.fiori2.RendererExtensions.setLeftPaneContent
         * in the Fiori launchpad, in the given launchpad states
         * (see sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState).
         * Note that once removed, the content might be destroyed and will not be available for reuse.
         * @param {sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState} [sLaunchpadState1]
         *   A launchpad state in which to set the content.
         * @param {sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState} [sLaunchpadState2]
         *   A launchpad state in which to set the content.
         * @since 1.30
         *
         * @private
         */
        this.removeLeftPaneContent = _removeLeftPaneContent;

        /**
         * Sets the visibility of the left pane in the Fiori launchpad, in the given launchpad states
         * (see sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState).
         * @param {sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState} [sLaunchpadState]
         *   A launchpad state in which to set the content.
         * @param {boolean} [bVisible]
         *   A boolean value stating whether the pane should be visible or not
         * @since 1.30
         *
         * @private
         */
        this.setLeftPaneVisibility = _setLeftPaneVisibility;

        /**
         * Getter for shell configuration object
         *
         * @returns {object}
         *      shell configuration object
         * @private
         */
        this.getConfiguration = _getConfiguration;
    }

    /**
     * The RendererExtensions class which allows you to extend the fiori2 renderer
     * The following renderer lifecycle events are published:
     * rendererLoaded - is published when the renderer is loaded and indicates that the see sap.ushell.renderers.fiori2.RendererExtensions
     * APIs are available.
     * appOpened - is published when a Fiori app is opened.
     * appClosed - is published when a Fiori app is closed.
     * All events are published in the following channel: sap.ushell.renderers.fiori2.Renderer
     * @example to subscribe to an event:
     * sap.ui.getCore().getEventBus().subscribe("sap.ushell.renderers.fiori2.Renderer", "rendererLoaded", function() {
     *      var headItem1 = new sap.ushell.ui.shell.ShellHeadItem({id : "button1", icon : sap.ui.core.IconPool.getIconURI("sys-help"), press: function() {alert("the button was pressed");}});
     *      sap.ushell.renderers.fiori2.RendererExtensions.addHeaderItem(headItem1,sap.ushell.renderers.fiori2.RendererExtensions.LaunchpadState.Home)
     * });
     * @since 1.26
     *
     * @private
     */
    sap.ushell.renderers.fiori2.RendererExtensions = new RendererExtensions();

}());

}; // end of sap/ushell/renderers/fiori2/RendererExtensions.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.SearchHelper') ) {
// iteration 0 ok
/* global jQuery,sap, $, window */

(function() {
    "use strict";

    jQuery.sap.declare('sap.ushell.renderers.fiori2.search.SearchHelper');
    var module = sap.ushell.renderers.fiori2.search.SearchHelper = {};

    jQuery.sap.require('jquery.sap.storage'); // unlisted dependency retained


    // =======================================================================
    // Regex Tester
    // =======================================================================            
    module.Tester = function() {
        this.init.apply(this, arguments);
    };
    module.Tester.prototype = {

        init: function(sSearchTerms) {

            // normalize searchterms in string format
            sSearchTerms = sSearchTerms || "*";

            // escape special chars
            sSearchTerms = sSearchTerms.replace(/([.+?^=!:${}()|\[\]\/\\])/g, "\\$1");

            // store tokenized search terms array
            this.aSearchTerms = this.tokenizeSearchTerms(sSearchTerms);
            for (var j = 0; j < this.aSearchTerms.length; ++j) {
                // * has special meaning in enterprise search context 
                // (use [^\s]* and not [^\s]+ because sap* shall match sap)
                this.aSearchTerms[j] = this.aSearchTerms[j].replace(/\*/g, "[^\\s]*");
                // check if search term is Chinese (in unicode Chinese characters interval).
                var bIsChinese = this.aSearchTerms[j].match(/[\u3400-\u9faf]/) !== null ? true : false;
                if (bIsChinese) {
                    // match any place of the word, case insensitive
                    // \b \w are evil regarding unicode
                    this.aSearchTerms[j] = new RegExp(this.aSearchTerms[j], 'gi');
                } else {
                    // only match beginnings of the word, case insensitive
                    // \b \w are evil regarding unicode
                    this.aSearchTerms[j] = new RegExp('(?:^|\\s)' + this.aSearchTerms[j], 'gi');
                }
            }

        },

        // If the text to be searched contains all of search terms, 
        // return object with match flag and highlighted text or space in case of not match
        test: function(sText2BeSearched) {
            var oReturn = {
                bMatch: false,
                sHighlightedText: ''
            };

            if (!sText2BeSearched) {
                return oReturn;
            }

            this.initializeBoldArray(sText2BeSearched);

            // global flag is there is any bold char
            this.globalBold = false;
            var oRegSearchTerm;
            var bMatch = false;
            var aMatchResult;


            for (var j = 0; j < this.aSearchTerms.length; ++j) {
                // only match beginnings of the word, case insensitive
                oRegSearchTerm = this.aSearchTerms[j];

                // check for wildcard * search -> wildcard always matches -> continue with next term
                if (oRegSearchTerm.toString() === '/(?:^|\\s)[^\\s]*/gi' ||
                    oRegSearchTerm.toString() === '/[^\\s]*/gi') {
                    continue;
                }

                bMatch = false;
                // match?
                var lastIndex = -1;
                while ((aMatchResult = oRegSearchTerm.exec(sText2BeSearched)) !== null) {
                    bMatch = true;

                    // prevent endless loop, should not happen but who knows...
                    if (oRegSearchTerm.lastIndex === lastIndex) {
                        break;
                    }
                    lastIndex = oRegSearchTerm.lastIndex;

                    //aMatchResult.index: the start position of matching term
                    //oRegSearchTerm.lastIndex: the start position of next search
                    var startIndex = this.indexOfFirstNoneWhiteSpaceChar(sText2BeSearched, aMatchResult.index);
                    if (startIndex < 0) {
                        continue;
                    }
                    this.markBoldArray(startIndex, oRegSearchTerm.lastIndex);

                }

                if (bMatch === false) {
                    return oReturn;
                }

            }

            // search terms have logical "and" relation, all of them must be available in text
            oReturn.bMatch = true;
            oReturn.sHighlightedText = this.render(sText2BeSearched);

            return oReturn;

        },

        indexOfFirstNoneWhiteSpaceChar: function(text, startIndex) {
            text = text.substring(startIndex);
            var match = /[^\s]/.exec(text);
            if (!match) {
                return -1;
            }
            return match.index + startIndex;
        },

        //tokenize search terms splitted by spaces
        tokenizeSearchTerms: function(terms) {
            var termsSeparatedBySpace = terms.split(" ");
            var newTerms = [];
            //Split search terms with space and wildcard into array
            $.each(termsSeparatedBySpace, function(i, termSpace) {
                termSpace = $.trim(termSpace);
                if (termSpace.length > 0 && termSpace !== '.*') {
                    //                var termsSeparatedByWildcard = termSpace.split("*");
                    //                $.each(termsSeparatedByWildcard, function (i, term) {
                    //                    if (term.length > 0) {
                    //                        newTerms.push(term);
                    //                    }
                    //                });
                    newTerms.push(termSpace);
                }
            });
            return newTerms;
        },

        // initialize the bold array 
        initializeBoldArray: function(sText) {
            // create array which stores flag whether character is bold or not
            this.bold = new Array(sText.length);
            for (var i = 0; i < this.bold.length; ++i) {
                this.bold[i] = false;
            }
        },

        // mark bold array
        markBoldArray: function(nStartIndex, nEndIndexPlus1) {
            // mark bold characters in global array 
            for (var i = nStartIndex; i < nEndIndexPlus1; i++) {
                this.bold[i] = true;
                this.globalBold = true;
            }
        },

        // render original text with <b> tag
        render: function(sOriginalText) {

            // short cut if there is nothing to do
            if (!this.globalBold) {
                return sOriginalText;
            }

            // highlight sOriginalText according to information in this.bold
            var bold = false;
            var result = [];
            var start = 0;
            var i;
            for (i = 0; i < sOriginalText.length; ++i) {
                if ((!bold && this.bold[i]) || // check for begin of bold sequence
                    (bold && !this.bold[i])) { // check for end of bold sequence
                    result.push(sOriginalText.substring(start, i));
                    if (bold) {
                        // bold section ends
                        result.push("</b>");
                    } else {
                        // bold section starts
                        result.push("<b>");
                    }
                    bold = !bold;
                    start = i;
                }
            }

            // add last part
            result.push(sOriginalText.substring(start, i));
            if (bold) {
                result.push("</b>");
            }
            return result.join("");
        }
    };


    // =======================================================================
    // decorator for delayed execution 
    // =======================================================================            
    module.delayedExecution = function(originalFunction, delay) {
        var timerId = null;
        var decorator = function() {
            var args = arguments;
            var that = this;
            if (timerId) {
                window.clearTimeout(timerId);
            }
            timerId = window.setTimeout(function() {
                timerId = null;
                originalFunction.apply(that, args);
            }, delay);
        };
        decorator.abort = function() {
            if (timerId) {
                window.clearTimeout(timerId);
            }
        };
        return decorator;
    };

    // =======================================================================
    // decorator for refusing outdated requests
    // =======================================================================            
    module.refuseOutdatedRequests = function(originalFunction, requestGroupId) {
        /* eslint new-cap:0 */
        var lastRequestId = 0;
        var decorator = function() {
            var args = arguments;
            var that = this;
            var requestId = ++lastRequestId;
            var deferred = new jQuery.Deferred();
            //console.log(requestGroupId + ' start ', requestId);
            originalFunction.apply(that, args).done(function() {
                if (requestId !== lastRequestId) {
                    //console.log(requestGroupId + ' throw ', requestId, ' because max', maxRequestId);
                    return; // throw away outdated requests                
                }
                //console.log(requestGroupId + ' accept ', requestId);
                deferred.resolve.apply(deferred, arguments);
            }).fail(function() {
                if (requestId !== lastRequestId) {
                    return;
                } // throw away outdated requests
                deferred.reject.apply(deferred, arguments);
            });
            return deferred;
        };
        decorator.abort = function() {
            ++lastRequestId;
            //console.log(id + ' abort', maxRequestId);
        };
        if (requestGroupId) {
            module.outdatedRequestAdministration.registerDecorator(requestGroupId, decorator);
        }
        return decorator;
    };

    // =======================================================================
    // abort all requests for a given requestGroupId
    // =======================================================================            
    module.abortRequests = function(requestGroupId) {
        var decorators = module.outdatedRequestAdministration.getDecorators(requestGroupId);
        for (var i = 0; i < decorators.length; ++i) {
            var decorator = decorators[i];
            decorator.abort();
        }
    };

    // =======================================================================
    // administration of outdated request decorators
    // =======================================================================            
    module.outdatedRequestAdministration = {

        decoratorMap: {},

        registerDecorator: function(requestGroupId, decorator) {
            var decorators = this.decoratorMap[requestGroupId];
            if (!decorators) {
                decorators = [];
                this.decoratorMap[requestGroupId] = decorators;
            }
            decorators.push(decorator);
        },

        getDecorators: function(requestGroupId) {
            var decorators = this.decoratorMap[requestGroupId];
            if (!decorators) {
                decorators = [];
            }
            return decorators;
        }

    };

    // =======================================================================
    // <b>, <i> tag unescaper
    // ======================================================================= 
    module.boldTagUnescaper = function(domref) {
        var innerhtml = domref.innerHTML;
        while (innerhtml.indexOf('&lt;b&gt;') + innerhtml.indexOf('&lt;/b&gt;') >= -1) { // while these tags are found
            innerhtml = innerhtml.replace('&lt;b&gt;', '<b>');
            innerhtml = innerhtml.replace('&lt;/b&gt;', '</b>');
        }
        while (innerhtml.indexOf('&lt;i&gt;') + innerhtml.indexOf('&lt;/i&gt;') >= -1) { // while these tags are found
            innerhtml = innerhtml.replace('&lt;i&gt;', '<i>');
            innerhtml = innerhtml.replace('&lt;/i&gt;', '</i>');
        }
        domref.innerHTML = innerhtml;
    };

    // =======================================================================
    // <b> tag unescaper with the help of text() 
    // ======================================================================= 
    module.boldTagUnescaperByText = function(domref) {
        var $d = $(domref);

        // Security check, whether $d.text() contains tags other than <b> and </b>
        var s = $d.text().replace(/<b>/gi, '').replace(/<\/b>/gi, ''); /// Only those two HTML tags are allowed.

        // If not
        if (s.indexOf('<') === -1) {
            $d.html($d.text());
        }
    };

    // =======================================================================
    // emphasize whyfound in case of ellipsis
    // ======================================================================= 
    module.forwardEllipsis4Whyfound = function(domref) {
        var $d = $(domref);

        var posOfWhyfound = $d.html().indexOf("<b>");
        if (posOfWhyfound > 2 && domref.offsetWidth < domref.scrollWidth) {
            var emphasizeWhyfound = "..." + $d.html().substring(posOfWhyfound);
            $d.html(emphasizeWhyfound);
        }
    };


    // =======================================================================
    // Hasher  
    // using window.hasher does not work because
    // hasher always use encodeURL for the whole hash but for example we need
    // - to encode '=' in a value (of name value pair) 
    // but not the '=' separating name and value
    // =======================================================================            
    module.hasher = {

        hash: null,

        setHash: function(hash) {
            // compare using decodeURIComponent because encoding may slightly differ
            // (Saved tiles scramble the URL. The URL of a saved tile is different
            //  to the URL serialized by search app)
            if (decodeURIComponent(window.location.hash) !== decodeURIComponent(hash)) {
                try {
                    window.location.hash = hash;
                } catch (error) {
                    // in IE url cannot be update if longer than 2083 chars -> show error message to the user
                    this.showUrlUpdateError(error);
                }
            }
            this.hash = hash;
        },

        hasChanged: function() {
            if (decodeURIComponent(this.hash) !== decodeURIComponent(window.location.hash)) {
                return true;
            }
            return false;
        },

        showUrlUpdateError: function(error) {

            // display error only one times
            if (this.urlError) {
                return;
            }
            this.urlError = true;

            // show message box
            jQuery.sap.require("sap.m.MessageBox");
            var message = sap.ushell.resources.i18n.getText('searchUrlErrorMessage', error.toString());
            sap.m.MessageBox.alert(message, {
                title: sap.ushell.resources.i18n.getText('searchUrlErrorTitle'),
                icon: sap.m.MessageBox.Icon.ERROR
            });
        }

    };


    // =======================================================================
    // Check whether the filter button status is pressed or not
    // ======================================================================= 
    module.loadFilterButtonStatus = function() {
        if (jQuery.sap.storage && jQuery.sap.storage.isSupported()) {
            var facetsShown = jQuery.sap.storage.get("showSearchFacets");
            if (!facetsShown) {
                return false;
            } else {
                return true;
            }
        } else {
            return false;
        }
    };

    // =======================================================================
    // Set button status in sap storage
    // ======================================================================= 
    module.saveFilterButtonStatus = function(areFacetsShown) {
        if (jQuery.sap.storage.isSupported()) {
            jQuery.sap.storage.put("showSearchFacets", areFacetsShown);
        }
    };

    // =======================================================================
    // Subscribe the given event only once
    // ======================================================================= 
    module.idMap = {};

    module.subscribeOnlyOnce = function(id, eventName, callBack, selfControl) {
        if (module.idMap[id]) {
            module.idMap[id].unsubscribe();
        }
        var wrapper = function() {
            callBack.apply(selfControl);
            sap.ui.getCore().getEventBus().unsubscribe(eventName, wrapper, selfControl);
        };
        sap.ui.getCore().getEventBus().subscribe(eventName, wrapper, selfControl);
        module.idMap[id] = {
            unsubscribe: function() {
                sap.ui.getCore().getEventBus().unsubscribe(eventName, wrapper, selfControl);
            }
        };
    };

    // =======================================================================
    // Focus Handler
    // =======================================================================            
    module.SearchFocusHandler = function() {
        this.init.apply(this, arguments);
    };
    module.SearchFocusHandler.prototype = {

        init: function(oSearchView) {
            this.oSearchView = oSearchView;
        },

        // get the controlDomRef to be focused
        get2BeFocusedControlDomRef: function() {
            if (!this.oModel) {
                this.oModel = this.oSearchView.getModel();
            }

            var index = 0;
            var control = null;
            var controlDomRef = null;
            var skip = this.oModel.getSkip(); // skip>0 showMore else initial load
            if (this.oModel.getProperty('/boCount') > 0 && this.oModel.getProperty('/appCount') > 0) { // mixed result list
                index = (skip > 0) ? (skip + 1) : 0;
                control = this.oSearchView.resultList.getItems()[index];
                if (control && control.getDomRef) {
                    controlDomRef = control.getDomRef();
                }
                //expand detail area with animation
                //control.getContent()[0].showDetails();
            } else if (this.oModel.getProperty('/boCount') > 0) { // bo result items only
                index = (skip > 0) ? skip : 0;
                control = this.oSearchView.resultList.getItems()[index];
                //expand detail area with animation
                //control.getContent()[0].showDetails();
                if (control && control.getDomRef) {
                    controlDomRef = control.getDomRef();
                }
            } else if (this.oModel.getProperty('/appCount') > 0) { // app result items only
                var oTilesContainer = this.oSearchView.appSearchResult;
                index = (skip > 0) ? (Math.floor((skip + 1) / oTilesContainer.getTilesPerRow()) * oTilesContainer.getTilesPerRow() - 1) : 0;

                // control is jsview
                control = oTilesContainer.getTiles()[index];
                if (control && control.getDomRef) {
                    controlDomRef = window.$(control.getDomRef()).closest(".sapUshellSearchTileWrapper")[0];
                }

            }

            return controlDomRef;
        },

        // set focus
        // ===================================================================        
        setFocus: function() {
            /* eslint no-lonely-if:0 */

            // this method is called  
            // 1) after event allSearchFinished (see registration in Search.controller)
            // 2) after event afterNavigate (see registration in searchshellhelper)

            var that = this;
            var retries = 10;

            // method for setting the focus with periodic retry
            var doSetFocus = function() {

                that.focusSetter = null;

                var controlDomRef = that.get2BeFocusedControlDomRef();

                // check that all conditions for setting the focus are fullfilled
                if (!controlDomRef || // condition 1
                    sap.ui.getCore().getUIDirty() || // condition 2
                    sap.ui.getCore().byId('loadingDialog').isOpen() || // condition 3
                    jQuery('.sapUshellSearchTileContainerDirty').length > 0 || // condition 4
                    jQuery('.sapMBusyDialog').length > 0) { // condition 5
                    if (--retries) {
                        that.focusSetter = setTimeout(doSetFocus, 100);
                    }
                    return;
                }

                // condition 1:
                // control and its domref do need to exist
                // condition 2:
                // no rendering process is running
                // focus can only be set after ui5 rendering is finished because ui5 preserves the focus
                // condition 3:
                // loading dialog (app loading) is closed
                // loading dialog restores old focus (using timeout 300ms) so we need to wait until loading dialog has finished
                // condition 4:
                // wait that app tile container has finished rendering
                // app tile container has two rendering steps. First step is just for calculating number of tiles.
                // condition 5:
                // wait that buys indicators are finished

                // set focus
                controlDomRef.focus();

                // expand result líst item
                var control = sap.ui.getCore().byId(controlDomRef.getAttribute('id'));
                if (control && control.getContent && control.getContent()[0]) {
                    var resultListItem = control.getContent()[0];
                    if (resultListItem.showDetails) {
                        resultListItem.showDetails();
                    }
                }

                // Fix Result List Keyboard Navigation                
                that.oSearchView.resultList.collectListItemsForNavigation();
            };

            // cancel any scheduled focusSetter
            if (this.focusSetter) {
                clearTimeout(this.focusSetter);
                this.focusSetter = null;
            }

            // set focus
            doSetFocus();

        }

    };
})();

}; // end of sap/ushell/renderers/fiori2/search/SearchHelper.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.SearchIntentsResolver') ) {
/* global $,jQuery,window */
// iteration 0

(function() {
    "use strict";
    /* eslint no-warning-comments:0 */

    jQuery.sap.declare('sap.ushell.renderers.fiori2.search.SearchIntentsResolver');
    var module = sap.ushell.renderers.fiori2.search.SearchIntentsResolver = function() {
        this.init.apply(this, arguments);
    };

    module.prototype = {
        init: function(model) {
            this._oCrossAppNav = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService("CrossApplicationNavigation");
            this._model = model;
        },

        resolveIntents: function(results) {
            var that = this;

            // Synchronize all intent requests through one additional deferred object
            var dfd = new $.Deferred();

            that._model.sina.sinaSystem().getServerInfo().then(
                function(serverInfo) {
                    var semanticObjectTypeSupported = false;
                    for (var i = 0; i < serverInfo.rawServerInfo.Services.length; ++i) {
                        var service = serverInfo.rawServerInfo.Services[i];
                        if (service.Service === 'Search') {
                            for (var j = 0; j < service.Capabilities.length; ++j) {
                                var capability = service.Capabilities[j];
                                if (capability.Capability === 'SemanticObjectType') {
                                    semanticObjectTypeSupported = true;
                                    break;
                                }
                            }
                            break;
                        }
                    }

                    if (!semanticObjectTypeSupported) {
                        dfd.resolve();
                    } else {
                        var proms = [];
                        for (var k = 0; k < results.length; k++) {
                            var result = results[k];

                            // reset main URL
                            result.uri = "";

                            if (result.semanticObjectType && result.semanticObjectType.length > 0) {
                                var prom = that._doResolveIntents(result);
                                proms.push(prom);
                            }
                        }

                        //var dfd = new $.Deferred();
                        $.when.apply(null, proms).always(function(args) { //TODO: error handling
                            dfd.resolve();
                        });
                    }
                }
            );

            return dfd.promise();
        },

        _doResolveIntents: function(result) {
            var that = this;
            // additional deferredObject is necessary, because if one of the inner
            // promise objects fails, $.when.always (see below) resolves immediately
            // and does not wait for the other inner proms to either resolve or fail.
            var outerProm = new $.Deferred();
            var prom = that._oCrossAppNav.getSemanticObjectLinks(result.semanticObjectType, result.semanticObjectTypeAttrs);
            prom.done(function(intents) {
                var factSheetAction = "-displayFactSheet";
                var foundFactSheet = false;

                result.intents = [];

                for (var i = 0; i < intents.length; i++) {
                    var intent = intents[i];

                    var externalTarget = {
                        target: {
                            shellHash: intent.intent
                        }
                    };
                    var externalHash = that._oCrossAppNav.hrefForExternal(externalTarget);

                    if (!foundFactSheet && intent.intent.substr(intent.intent.indexOf("-"), factSheetAction.length) === factSheetAction) {
                        result.uri = externalHash;
                        foundFactSheet = true;
                    } else {
                        intent.target = externalTarget.target;
                        intent.externalHash = externalHash;
                        result.intents.push(intent);
                    }
                }
                outerProm.resolve();
            });
            prom.fail(function(arg) {
                outerProm.resolve();
            });
            return outerProm;
        }
    };

})();

}; // end of sap/ushell/renderers/fiori2/search/SearchIntentsResolver.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.SearchLogger') ) {
// Logging utilities

(function(global) {
    "use strict";

    jQuery.sap.declare('sap.ushell.renderers.fiori2.search.SearchLogger');
    var module = sap.ushell.renderers.fiori2.search.SearchLogger = {};



    module.NavigationEvent = function() {
        this.init.apply(this, arguments);
    };
    /**
     * class NavigationEvent
     */
    module.NavigationEvent.prototype = {


        init: function(properties) {
            // get sina
            this.sina = sap.ushell.Container.getService("Search").getSina();
        },

        _createUserHistoryEntry: function(sTargetUrl) {
            function getSID(aParameter) {
                // extract System and Client from sap-system=sid(BE1.001)
                var parameterList = aParameter;
                for (var i = 0, len = parameterList.length; i < len; i++) {
                    var param = parameterList[i];
                    if (param.indexOf("sap-system") !== -1) {
                        var sid = param.split("=");
                        return {
                            "System": sid[1].slice(4, 7),
                            "Client": sid[1].slice(8, -2)
                        };
                    }
                }
            }

            function getSemanticObjectType(sHash) {
                return sHash.split("-")[0];
            }

            function getIntent(sHash) {
                return sHash.split("-")[1].split("&")[0];
            }

            function getParameterList(aParameter) {
                var parameterList = aParameter;
                var inaParameterList = [];
                for (var i = 0, len = parameterList.length; i < len; i++) {
                    var param = parameterList[i];
                    if (param.indexOf("sap-system") !== -1) {
                        continue;
                    }
                    var name = param.split("=")[0];
                    var value = param.split("=")[1];
                    inaParameterList.push({
                        "Name": name,
                        Value: value
                    });
                }
                return inaParameterList;
            }

            var userHistoryEntry = {
                "NavigationEventList": [{
                    "SourceApplication": {
                        "SemanticObjectType": "",
                        "Intent": "",
                        "ParameterList": []
                    }
                }, {
                    "TargetApplication": {
                        "SemanticObjectType": "",
                        "Intent": "",
                        // "System" : "BE1",
                        // "Client" : "001",
                        "ParameterList": []
                    }
                }]
            };

            // source application
            var hashAsArray = window.hasher.getHashAsArray();
            var semanticObjectType = getSemanticObjectType(hashAsArray[0]);
            userHistoryEntry.NavigationEventList[0].SourceApplication.SemanticObjectType = semanticObjectType;
            var intent = getIntent(hashAsArray[0]);
            userHistoryEntry.NavigationEventList[0].SourceApplication.Intent = intent;
            var sourceParameterList = getParameterList(hashAsArray[1].split("&"));
            userHistoryEntry.NavigationEventList[0].SourceApplication.ParameterList = sourceParameterList;

            // target application
            hashAsArray = sTargetUrl.split("?");
            var targetSemanticObjectType = getSemanticObjectType(hashAsArray[0]).split("#")[1];
            userHistoryEntry.NavigationEventList[1].TargetApplication.SemanticObjectType = targetSemanticObjectType;
            var targetIntent = getIntent(hashAsArray[0]);
            userHistoryEntry.NavigationEventList[1].TargetApplication.Intent = targetIntent;
            var targetParameterList = getParameterList(hashAsArray[1].split("&"));
            userHistoryEntry.NavigationEventList[1].TargetApplication.ParameterList = targetParameterList;
            var oSystemAndClient = getSID(hashAsArray[1].split("&"));
            userHistoryEntry.NavigationEventList[1].TargetApplication = jQuery.extend(userHistoryEntry.NavigationEventList[1].TargetApplication, oSystemAndClient);
            return userHistoryEntry;
        },

        addUserHistoryEntry: function(sTargetUrl) {
            if (!sTargetUrl) {
                return;
            }
            if (sTargetUrl.indexOf("#") === -1) {
                return;
            }
            var sinaSystemServices = this.sina.getSystem().getServices();
            if (sinaSystemServices.PersonalizedSearch && sinaSystemServices.PersonalizedSearch.capabilities && sinaSystemServices.PersonalizedSearch.capabilities.SetUserStatus) {
                var userHistoryEntry = this._createUserHistoryEntry(sTargetUrl);
                this.sina.addUserHistoryEntry(userHistoryEntry)
                    .done(function(data) {
                        //                    console.log("success: " + JSON.stringify(data));
                    }).fail(function(error) {
                        //                    console.log("error: " + JSON.stringify(error));
                    });
            }

        }





    };
}(window));

}; // end of sap/ushell/renderers/fiori2/search/SearchLogger.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.SearchResultListFormatter') ) {
/* global jQuery,sap */
// iteration 0 ok

(function() {
    "use strict";

    jQuery.sap.declare('sap.ushell.renderers.fiori2.search.SearchResultListFormatter');
    var module = sap.ushell.renderers.fiori2.search.SearchResultListFormatter = function() {
        this.init.apply(this, arguments);
    };

    module.prototype = {
        init: function() {

        },

        format: function(searchResultSet, terms) {

            return this._doFormat(searchResultSet.getElements(), terms);
        },

        _getImageUrl: function(result) {

            var imageAttr = {
                imageUrl: '',
                name: ''
            };

            // loop at all properties
            for (var prop in result) {

                var attribute = result[prop];

                // check for image
                var isImage = false;
                try {
                    if (attribute.value &&
                        attribute.$$MetaData$$.presentationUsage.indexOf('Thumbnail') >= 0) {
                        isImage = true;
                    }
                } catch (e) {
                    /* eslint no-empty:0 */
                }
                if (!isImage) {
                    continue;
                }

                // image found -> set return value + return
                imageAttr.imageUrl = attribute.value;
                imageAttr.name = prop;
                return imageAttr;

            }
            return imageAttr;
        },

        _moveWhyFound2ResponseAttr: function(whyfounds, property) {
            var l = whyfounds.length;
            while (l--) {
                if (whyfounds[l].labelRaw === property.labelRaw && property !== undefined) {
                    property.value = whyfounds[l].value;
                    property.whyfound = true;
                    whyfounds.splice(l, 1);
                }
            }
        },

        _appendRemainingWhyfounds2FormattedResultItem: function(whyfounds, aItemAttributes) {
            var l = whyfounds.length;
            while (l--) {
                if (whyfounds[l].labelRaw !== undefined) {
                    var oItemAttribute = {};
                    oItemAttribute.name = whyfounds[l].label;
                    oItemAttribute.value = whyfounds[l].value;
                    oItemAttribute.whyfound = true;
                    aItemAttributes.push(oItemAttribute);
                    whyfounds.splice(l, 1);
                }
            }
        },

        _doFormat: function(results, terms) {

            //sort against displayOrder
            var sortDisplayOrder = function(a, b) {
                return a.displayOrder - b.displayOrder;
            };

            var formattedResults = [];
            for (var i = 0; i < results.length; i++) {
                var result = results[i];

                //get uri of factsheet
                var uri = '';
                var relatedActions = result.$$RelatedActions$$;
                for (var relatedAction in relatedActions) {
                    if (relatedActions[relatedAction].type === "Navigation") {
                        uri = encodeURI(relatedActions[relatedAction].uri);
                    }
                }

                //
                var whyfounds = result.$$WhyFound$$ || [];
                var summaryAttrs = [];
                var detailAttrs = [];
                var title = '';
                var semanticObjectTypeAttrs = {};

                for (var prop in result) {
                    //ignore prop without label and metadata
                    if (!result[prop].label || !result[prop].$$MetaData$$) {
                        continue;
                    }

                    var presentationUsage = result[prop].$$MetaData$$.presentationUsage || [];
                    if (presentationUsage && presentationUsage.length > 0) {
                        if (presentationUsage.indexOf("Title") > -1 && result[prop].value) {
                            this._moveWhyFound2ResponseAttr(whyfounds, result[prop]);
                            title = title + " " + result[prop].value;
                        }
                        if (presentationUsage.indexOf("Summary") > -1) {
                            summaryAttrs.push({
                                property: prop,
                                displayOrder: result[prop].$$MetaData$$.displayOrder
                            });
                        } else if (presentationUsage.indexOf("Detail") > -1) {
                            detailAttrs.push({
                                property: prop,
                                displayOrder: result[prop].$$MetaData$$.displayOrder
                            });
                        }
                    }


                    var semanticObjectType = result[prop].$$MetaData$$.semanticObjectType;
                    if (semanticObjectType && semanticObjectType.length > 0) {
                        semanticObjectTypeAttrs[semanticObjectType] = result[prop].valueRaw;
                    }
                }

                summaryAttrs.sort(sortDisplayOrder);
                detailAttrs.sort(sortDisplayOrder);

                var displayRelevantAttrs = summaryAttrs.concat(detailAttrs);
                var formattedResult = {};
                formattedResult.semanticObjectTypeAttrs = semanticObjectTypeAttrs;
                var imageAttr = this._getImageUrl(result);
                formattedResult.imageUrl = imageAttr.imageUrl;
                formattedResult.dataSourceName = result.$$DataSourceMetaData$$.label;
                formattedResult.uri = uri;
                formattedResult.semanticObjectType = result.$$DataSourceMetaData$$.semanticObjectType || "";
                formattedResult.$$Name$$ = '';

                var aItemAttributes = [];
                for (var z = 0; z < displayRelevantAttrs.length; z++) {
                    var propDisplay = displayRelevantAttrs[z].property;
                    var oItemAttribute = {};
                    // image attribute shall not be displayed as a normal key value pair
                    if (propDisplay !== imageAttr.name) {
                        this._moveWhyFound2ResponseAttr(whyfounds, result[propDisplay]);
                        oItemAttribute.name = result[propDisplay].label;
                        oItemAttribute.value = result[propDisplay].value;
                        if (result[propDisplay].whyfound) {
                            oItemAttribute.whyfound = result[propDisplay].whyfound;
                        }
                        aItemAttributes.push(oItemAttribute);
                    }
                }

                formattedResult.$$Name$$ = title.trim();
                formattedResult.numberofattributes = displayRelevantAttrs.length;
                formattedResult.title = result.title;
                formattedResult.itemattributes = aItemAttributes;
                this._appendRemainingWhyfounds2FormattedResultItem(whyfounds, formattedResult.itemattributes);
                formattedResults.push(formattedResult);
            }


            return formattedResults;

        }
    };

})();

}; // end of sap/ushell/renderers/fiori2/search/SearchResultListFormatter.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.SearchTabStripsFormatter') ) {
(function() {
    "use strict";

    // =======================================================================
    // import and declare packages
    // =======================================================================
    jQuery.sap.declare('sap.ushell.renderers.fiori2.search.SearchTabStripsFormatter');
    var module = sap.ushell.renderers.fiori2.search.SearchTabStripsFormatter = {};

    // =======================================================================
    // tree node
    // =======================================================================

    module.Node = function() {
        this.init.apply(this, arguments);
    };

    module.Node.prototype = {

        init: function(dataSource, count) {
            this.dataSource = dataSource;
            this.children = [];
            this.parent = null;
            this.count = count;
        },

        _arraysEqual: function(a, b) {
            if (a === b) {
                return true;
            }
            if (a == null || b == null) {
                return false;
            }
            if (a.length != b.length) {
                return false;
            }

            for (var i = 0; i < a.length; ++i) {
                if (a[i] !== b[i]) {
                    return false;
                }
            }
            return true;
        },

        equals: function(otherNode) {
            var parentsEqual = false;
            var eq = this.dataSource.equals(otherNode.dataSource) &&
                this.count === otherNode.count &&
                this._arraysEqual(this.children, otherNode.children);
            if (this.parent) {
                if (otherNode.parent) {
                    parentsEqual = this.parent.equals(otherNode.parent);
                } else {
                    parentsEqual = false;
                }
            } else {
                if (otherNode.parent) {
                    parentsEqual = false;
                } else {
                    parentsEqual = true;
                }
            }
            return eq && parentsEqual;
        },

        setCount: function(count) {
            this.count = count;
        },

        childrenHaveUpToDateCount: function() {
            for (var i = 0; i < this.children.length; ++i) {
                var child = this.children[i];
                if (child.count === null) {
                    return false;
                }
            }
            return true;
        },

        invalidateCount: function() {
            this.count = null;
            for (var i = 0; i < this.children.length; ++i) {
                var child = this.children[i];
                child.invalidateCount();
            }
        },

        getChildrenSortedByCount: function() {
            if (!this.childrenHaveUpToDateCount()) {
                throw 'Count invalidated - cannot sort';
            }
            var children = this.children.slice();
            children.sort(function(c1, c2) {
                return c2.count - c1.count;
            });
            return children;
        },

        clearChildren: function() {
            this.children = [];
        },

        appendNode: function(node) {
            node.parent = this;
            this.children.push(node);
        },

        removeChildNode: function(node) {
            var index = this.children.indexOf(node);
            if (index < 0) {
                return;
            }
            this.children.splice(index, 1);
        },

        findNode: function(dataSource, result) {
            if (this.dataSource.equals(dataSource)) {
                result.push(this);
                return;
            }
            for (var i = 0; i < this.children.length; ++i) {
                var child = this.children[i];
                child.findNode(dataSource, result);
                if (result.length > 0) {
                    return;
                }
            }
        },

        hasChild: function(node) {
            for (var i = 0; i < this.children.length; ++i) {
                var child = this.children[i];
                if (child === node) {
                    return true;
                }
            }
            return false;
        },


        hasSibling: function(node) {
            if (this.equals(node)) {
                // self
                return false;
            }
            if (!this.parent) {
                return null;
            }
            for (var i = 0; i < this.parent.children.length; ++i) {
                var child = this.parent.children[i];
                if (child === node) {
                    return true;
                }
            }
            return false;
        },

        getLevel1Node: function() {
            if (!this.parent) {
                return null;
            }
            if (this.parent.dataSource.key && this.parent.dataSource.key.indexOf('$$ALL$$') > -1) {
                return this;
            }
            return this.parent.getLevel1Node();
        }

    };

    // =======================================================================
    // tree
    // =======================================================================
    module.Tree = function() {
        this.init.apply(this, arguments);
    };

    module.Tree.prototype = {

        init: function() {
            this.rootNode = null;
        },

        findNode: function(dataSource) {
            if (!this.rootNode) {
                return null;
            }
            var result = [];
            this.rootNode.findNode(dataSource, result);
            return result.length > 0 ? result[0] : null;
        },

        hasChild: function(ds1, ds2) {
            if (ds2 && ds2.key && ds2.key.indexOf('$$ALL$$') > -1) {
                return false;
            }
            var node1 = this.findNode(ds1);
            if (!node1) {
                //throw 'No node for datasource ' + ds1.toString();
                return false;
            }
            var node2 = this.findNode(ds2);
            if (!node2) {
                //throw 'No node for datasource ' + ds2.toString();
                return false;
            }
            return node1.hasChild(node2);
        },

        hasSibling: function(ds1, ds2) {
            if (ds2 && ds2.key && ds2.key.indexOf('$$ALL$$') > -1) {
                return false;
            }
            var node1 = this.findNode(ds1);
            if (!node1) {
                //throw 'No node for datasource ' + ds1.toString();
                return false;
            }
            var node2 = this.findNode(ds2);
            if (!node2) {
                //throw 'No node for datasource ' + ds2.toString();
                return false;
            }
            return node1.hasSibling(node2);
        },

        updateFromPerspective: function(dataSource, perspective, model) {

            // no tree -> create tree using current datasource
            if (!this.rootNode) {
                this.rootNode = new module.Node(dataSource, null);
            }

            // update current tree node
            var currentCount = null;
            try {
                currentCount = perspective.getSearchFacet().getQuery().getResultSetSync().totalcount;
            } catch (e) {
                // do nothing
            }
            var currentNode = this.findNode(dataSource);
            if (!currentNode) {
                // node not found -> create new tree
                this.rootNode = new module.Node(dataSource, currentCount);
                currentNode = this.rootNode;
            } else {
                currentNode.setCount(currentCount);
            }

            // update child datasources
            this.updateFromPerspectiveChildDataSources(currentNode, perspective);

            // update app tree node
            this.updateAppTreeNode(dataSource, model);

        },

        updateAppTreeNode: function(dataSource, model) {

            // update only if root node = all
            if (!this.rootNode.dataSource.equals(model.allDataSource)) {
                return;
            }

            // update only for all or app datasource
            if (!dataSource.equals(model.allDataSource) && !dataSource.equals(model.appDataSource)) {
                return;
            }

            // remove old appNode
            var appCount = model.getProperty('/appCount');
            var appNode = this.findNode(model.appDataSource);
            if (appNode) {
                this.rootNode.removeChildNode(appNode);
            }

            // no apps -> return
            if (appCount === 0) {
                return;
            }

            // insert new app node
            appNode = new module.Node(model.appDataSource, appCount);
            if (!this.rootNode.childrenHaveUpToDateCount()) {
                this.rootNode.clearChildren();
            }
            this.rootNode.appendNode(appNode);

        },

        updateFromPerspectiveChildDataSources: function(currentNode, perspective) {

            // extract child datasources from perspective
            if (!perspective) {
                return;
            }
            var facets = perspective.getChartFacets();
            if (facets.length === 0) {
                return;
            }
            var dataSourceFacet = facets[0];
            if (dataSourceFacet.facetType !== 'datasource') {
                return;
            }
            var childDataSourceElements = dataSourceFacet.getQuery().getResultSetSync().getElements();

            // append children to tree node
            currentNode.clearChildren();
            for (var i = 0; i < childDataSourceElements.length; ++i) {
                var childDataSourceElement = childDataSourceElements[i];
                currentNode.appendNode(new module.Node(childDataSourceElement.dataSource, childDataSourceElement.valueRaw));
            }

        }
    };

    // =======================================================================
    // formatter
    // =======================================================================
    module.Formatter = function() {
        this.init.apply(this, arguments);
    };

    module.Formatter.prototype = {

        init: function() {
            this.tree = new module.Tree();
        },

        format: function(dataSource, perspective, model) {
            this.tree.updateFromPerspective(dataSource, perspective, model);
            var tabStrips = this.generateTabStrips(dataSource, model);
            return tabStrips;
        },

        invalidateCount: function() {
            if (!this.tree.rootNode) {
                return;
            }
            this.tree.rootNode.invalidateCount();
        },

        generateTabStrips: function(dataSource, model) {
            /* eslint no-lonely-if:0 */

            // init
            var tabStripLimit = 9999;
            var i, child, children;
            var tabStrips = {
                strips: [],
                selected: null
            };
            var node = this.tree.findNode(dataSource);

            // 1) no node in tree -> show ALL+ current datasource (should never happen)
            if (!node) {
                if (!dataSource.equals(model.allDataSource)) {
                    tabStrips.strips.push(model.allDataSource);
                }
                tabStrips.strips.push(dataSource);
                tabStrips.selected = dataSource;
                return tabStrips;
            }

            // 2) node is $$ALL$$ -> show $$ALL$$ + children of $$ALL$$
            if (node.dataSource.equals(model.allDataSource)) {
                tabStrips.strips.push(model.allDataSource);
                if (node.childrenHaveUpToDateCount()) {
                    children = node.getChildrenSortedByCount();
                    for (i = 0; i < children.length && tabStrips.strips.length < tabStripLimit; ++i) {
                        child = children[i];
                        tabStrips.strips.push(child.dataSource);
                    }
                }
                tabStrips.selected = model.allDataSource;
                return tabStrips;
            }

            // 3) node is direct child of $$ALL$$ -> show $$ALL$$ + children of $$ALL$$
            if (node.parent && node.parent.dataSource.equals(model.allDataSource)) {
                tabStrips.strips.push(model.allDataSource);
                if (node.parent.childrenHaveUpToDateCount()) {

                    // limit number of tabstrips but ensure that selected
                    // node is included
                    var includesNode = false;
                    children = node.parent.getChildrenSortedByCount();
                    for (i = 0; i < children.length; ++i) {
                        child = children[i];
                        if (includesNode) {
                            if (tabStrips.strips.length >= tabStripLimit) {
                                break;
                            }
                            tabStrips.strips.push(child.dataSource);
                        } else {
                            if (tabStrips.strips.length < tabStripLimit - 1 || node === child) {
                                tabStrips.strips.push(child.dataSource);
                                if (node === child) {
                                    includesNode = true;
                                }
                            }
                        }
                    }

                } else {
                    tabStrips.strips.push(node.dataSource);
                }
                tabStrips.selected = node.dataSource;
                return tabStrips;
            }

            // 4) node not direct child of $$ALL$$ or unknown whether node is direct child of $$ALL$$
            // -> show $$ALL$$ + node
            tabStrips.strips.push(model.allDataSource);
            tabStrips.strips.push(node.dataSource);
            tabStrips.selected = node.dataSource;
            return tabStrips;

        }
    };

})();

}; // end of sap/ushell/renderers/fiori2/search/SearchTabStripsFormatter.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.SemanticObjectsHandler') ) {
/* global console */

(function() {
    "use strict";

    // =======================================================================
    // declare package
    // =======================================================================    
    jQuery.sap.declare('sap.ushell.renderers.fiori2.search.SemanticObjectsHandler');
    var module = sap.ushell.renderers.fiori2.search.SemanticObjectsHandler = {};

    // =======================================================================
    // semantic object
    // =======================================================================
    module.SemanticObject = function() {
        this.init.apply(this, arguments);
    };

    module.SemanticObject.prototype = {

        init: function(params) {
            this.type = params.type;
            this.action = params.action;
            this.key = params.key;
        },

        getSemanticLinks: function() {
            var that = this;
            return module.getSemanticObjectsMetadata().then(function(metaData) {
                var result = {};
                var type = metaData[that.type];
                for (var i = 0; i < type.Links.results.length; ++i) {
                    var link = type.Links.results[i];
                    if (link.id.indexOf(that.type + "-displayFactSheet~") >= 0) {
                        if (that.action !== "displayFactSheet") {
                            //                          only if the main link is not a Factsheet link
                            if (!result.displayFactSheet) {
                                result.displayFactSheet = [];
                                result.displayFactSheet.push({
                                    link: link.id + '?' + that.key,
                                    text: link.text,
                                    shortText: sap.ushell.resources.i18n.getText("action_display")
                                });
                            }
                        }
                    } else if (link.id.indexOf(that.type + "-change~") >= 0) {
                        if (!result.change) {
                            result.change = [];
                            result.change.push({
                                link: link.id + '?' + that.key,
                                text: link.text,
                                shortText: sap.ushell.resources.i18n.getText("action_change")
                            });
                        }
                    } else if (link.id.indexOf(that.type + "-display~") >= 0) {
                        if (!result.display) {
                            result.display = [];
                            result.display.push({
                                link: link.id + '?' + that.key,
                                text: link.text,
                                shortText: sap.ushell.resources.i18n.getText("action_display")
                            });
                        }
                    } else if (link.id.indexOf(that.type + "-manage~") >= 0) {
                        if (!result.manage) {
                            result.manage = [];
                            result.manage.push({
                                link: link.id + '?' + that.key,
                                text: link.text,
                                shortText: sap.ushell.resources.i18n.getText("action_manage")
                            });
                        }
                    } else if (link.id.indexOf(that.type + "-approve~") >= 0) {
                        if (!result.approve) {
                            result.approve = [];
                            result.approve.push({
                                link: link.id + '?' + that.key,
                                text: link.text,
                                shortText: sap.ushell.resources.i18n.getText("action_approve")
                            });
                        }
                    } else {
                        if (!result.other) {
                            result.other = [];
                        }
                        result.other.push({
                            link: link.id + '?' + that.key,
                            text: link.text
                        });
                    }
                }
                return result;
            });
        }
    };

    module.createSemanticObjectFromLink = function(link) {

        // get semantic object type from link
        var index = link.indexOf('-');
        if (index < 0) {
            throw 'Error when parsing link, missing \'-\' delimiter in \'' + link + '\'';
        }
        var type = link.slice(0, index);

        // get launchpad action from link
        link = link.slice(index + 1);
        index = link.indexOf('?');
        if (index < 0) {
            throw 'Error when parsing link, missing \'?\' delimiter in \'' + link + '\'';
        }
        var action = link.slice(0, index);

        // get semantic object key from link
        var key = link.slice(index + 1);

        // create semantic object
        return new module.SemanticObject({
            type: type,
            action: action,
            key: key
        });
    };

    // =======================================================================
    // semantic objects metadata handling
    // =======================================================================    

    module.semanticObjectsMetadataDeferred = null;

    module.metaDataUrl = '/sap/opu/odata/UI2/INTEROP/SemanticObjects?$expand=Links&$format=json';

    module.getSemanticObjectsMetadata = function() {
        if (module.semanticObjectsMetadataDeferred) {
            return module.semanticObjectsMetadataDeferred;
        }
        module.semanticObjectsMetadataDeferred = new jQuery.Deferred();
        var oJSONModel = new sap.ui.model.json.JSONModel();
        oJSONModel.loadData(module.metaDataUrl);
        oJSONModel.attachRequestCompleted(function() {
            // make hashmap from array
            var result = {};
            var types = this.getData().d.results;
            for (var i = 0; i < types.length; ++i) {
                var type = types[i];
                result[type.id] = type;
            }
            module.semanticObjectsMetadataDeferred.resolve(result);
        });
        return module.semanticObjectsMetadataDeferred;
    };

    // =======================================================================
    // link determination for ui
    // =======================================================================
    module.linkDetermination = function(mainLink) {
        return module.getSemanticObjectsMetadata().then(function(metaData) {
            /* eslint no-lonely-if:0 */
            var result = {},
                link = mainLink;

            // get semantic object type from link
            var index = link.indexOf("-");
            if (index < 0) {
                throw "Error when parsing link, missing \'-\' delimiter in \'" + link + "\'";
            }
            var semanticObject = link.slice(0, index);

            // get launchpad action from link
            link = link.slice(index + 1);
            index = link.indexOf("?");
            if (index < 0) {
                throw "Error when parsing link, missing \'?\' delimiter in \'" + link + "\'";
            }
            var action = link.slice(0, index);

            // get semantic object key from link
            var key = link.slice(index + 1);

            if (action === "displayFactSheet") {
                // the main link is a Fact Sheet link -> no further action
                result.mainLink = mainLink;
                return result;
            }

            // main link is not a Fact Sheet link
            var type = metaData[semanticObject];
            var oFactSheet = {},
                sAppLink = "";
            for (var i = 0; i < type.Links.results.length; ++i) {
                link = type.Links.results[i];
                if (link.id.indexOf("-" + action + "~") >= 0) {
                    // main link is authorised
                    sAppLink = mainLink;
                }
                if (link.id.indexOf(semanticObject + "-displayFactSheet~") >= 0) {
                    oFactSheet.link = link.id + "?" + key;
                    oFactSheet.text = sap.ushell.resources.i18n.getText("show_related_objects");
                }
            }
            if (sAppLink) {
                result.mainLink = sAppLink;
                if (oFactSheet.link) {
                    result.relatedLink = oFactSheet;
                }
            } else {
                // main link is NOT authorised
                if (oFactSheet.link) {
                    result.mainLink = oFactSheet.link;
                }
            }
            return result;
        });
    };

    // =======================================================================
    // test
    // =======================================================================    

    module.test = function() {
        /* eslint no-unused-vars:0 */

        // create semantic object from link
        var semanticObject = module.createSemanticObjectFromLink('SalesOrder-displayFactSheet?SalesOrder=0000027');

        // get semantic links
        semanticObject.getSemanticLinks().done(function(links) {
            for (var i = 0; i < links.length; ++i) {
                var link = links[i];
                //console.log('-->', link.text, link.link);
            }
        });
        semanticObject.getSemanticLinks().done(function(links) {
            for (var i = 0; i < links.length; ++i) {
                var link = links[i];
                //console.log('-->', link.text, link.link);
            }
        });

    };

})();

}; // end of sap/ushell/renderers/fiori2/search/SemanticObjectsHandler.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.UXLog') ) {
// iteration 0 ok
/* global jQuery, sap, window */
(function() {
    "use strict";

    
    var SearchHelper = sap.ushell.renderers.fiori2.search.SearchHelper;

    jQuery.sap.declare('sap.ushell.renderers.fiori2.search.UXLog');
    var module = sap.ushell.renderers.fiori2.search.UXLog = {};

    jQuery.extend(module, {

        logLines: [],

        log: function() {
            this._log.apply(this, arguments);
        },

        _log: function(text) {
            this.logLines.push(text);
            this._save();
        },

        _save: function() {
            jQuery.ajax({
                type: 'PUT',
                url: '/uxlog.txt',
                data: this.logLines.join('\n') + '\n',
                contentType: 'text/plain'
            });
            this.logLines = [];
        }

    });

    module._save = SearchHelper.delayedExecution(module._save, 2000);

})();

}; // end of sap/ushell/renderers/fiori2/search/UXLog.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.container.Component') ) {
// iteration 0 ok

// define a root UIComponent which exposes the main view
jQuery.sap.declare("sap.ushell.renderers.fiori2.search.container.Component");
jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained


// new Component
sap.ui.core.UIComponent.extend("sap.ushell.renderers.fiori2.search.container.Component", {

    metadata: {

        version: "1.32.6",

        library: "sap.ushell.renderers.fiori2.search.container",

        includes: [],

        dependencies: {
            libs: ["sap.m"],
            components: []
        },
        config: {}
    },

    createContent: function() {
        "use strict";
        return sap.ui.view({
            id: "searchContainerApp",
            viewName: "sap.ushell.renderers.fiori2.search.container.App",
            type: sap.ui.core.mvc.ViewType.JS
        });
    }
});

}; // end of sap/ushell/renderers/fiori2/search/container/Component.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.container.ResultListKeyEventHandler') ) {
/* global jQuery, sap, window */
(function() {
    "use strict";

    jQuery.sap.declare('sap.ushell.renderers.fiori2.search.container.ResultListKeyEventHandler');

    // dom helper
    // =======================================================================
    var domHelper = {

        getAncestorByClass: function(element, className) {
            while (element) {
                if (element.classList.contains(className)) {
                    return element;
                }
                element = element.parentElement;
            }
            return false;
        }

    };

    // result list item
    // =======================================================================
    var ResultListItem = function() {
        this.init.apply(this, arguments);
    };

    ResultListItem.prototype = {

        init: function(element, model) {
            this.element = element;
            this.model = model;
        },

        checkItem: function(nextItem) {
            /* eslint no-use-before-define:0 */

            // not null?
            if (!nextItem) {
                return null;
            }

            // check for simple result list item
            if (nextItem.classList.contains('searchResultListItem')) {
                return new ResultListItem(nextItem, this.model);
            }

            // check for tiles container
            var tileContainer = nextItem.querySelector('.sapUshellSearchTileContainer');
            if (!tileContainer) {
                return null;
            }

            // check for wrapper of first tile
            var tileWrapper = tileContainer.children.item(1);
            if (!tileWrapper) {
                return null;
            }
            if (!tileWrapper.classList.contains('sapUiHLayoutChildWrapper')) {
                return null;
            }

            // get tile
            var tile = tileWrapper.children.item(0).children.item(0);
            if (!tile) {
                return null;
            }

            return new Tile(tile, this.model);
        },

        getLowerObj: function() {
            var nextItem = this.element.nextElementSibling;
            return this.checkItem(nextItem);
        },

        getUpperObj: function() {
            var nextItem = this.element.previousElementSibling;
            return this.checkItem(nextItem);
        },

        getLeftObj: function() {
            return this.getUpperObj();
        },

        getRightObj: function() {
            return this.getLowerObj();
        },

        focus: function() {
            this.element.focus();
        }
    };

    // tile
    // =======================================================================    
    var Tile = function() {
        this.init.apply(this, arguments);
    };

    Tile.prototype = {

        init: function(element, model) {
            this.element = element;
            this.model = model;
        },

        getWrapperElement: function() {
            return this.element.parentElement.parentElement;
        },

        getResultListItemElement: function() {
            var tileContainerElement = domHelper.getAncestorByClass(this.element, 'sapUshellSearchTileContainer');
            return tileContainerElement.parentElement.parentElement;
        },

        checkElement: function(element) {
            if (!element) {
                return null;
            }
            if (!element.classList.contains('sapUiHLayoutChildWrapper')) {
                var skip = this.model.getAppSkip() + 1;
                this.model.setAppSkip(skip);
                return null;
            }
            var tile = element.children.item(0).children.item(0);
            if (!tile) {
                return null;
            }
            return new Tile(tile, this.model);
        },

        getLeftObj: function() {
            var nextTile = this.getWrapperElement().previousElementSibling;
            return this.checkElement(nextTile);
        },

        getRightObj: function() {
            var prevTile = this.getWrapperElement().nextElementSibling;
            return this.checkElement(prevTile);
        },

        getLowerObj: function() {
            return (new ResultListItem(this.getResultListItemElement(), this.model)).getLowerObj();
        },

        getUpperObj: function() {
            return (new ResultListItem(this.getResultListItemElement(), this.model)).getUpperObj();
        },

        focus: function() {
            this.element.focus();
        }
    };

    // key event handler
    // =======================================================================    
    sap.ushell.renderers.fiori2.search.container.ResultListKeyEventHandler = function() {
        this.init.apply(this, arguments);
    };

    sap.ushell.renderers.fiori2.search.container.ResultListKeyEventHandler.prototype = {

        init: function(model) {
            this.model = model;
        },

        getObject: function(element) {

            // is this a tile ?
            var tileElement = domHelper.getAncestorByClass(element, 'sapUshellTileBase');
            if (tileElement) {
                return new Tile(tileElement, this.model);
            }

            // is this a result list item ?
            var itemElement = domHelper.getAncestorByClass(element, 'searchResultListItem');
            if (itemElement) {
                return new ResultListItem(itemElement, this.model);
            }

            // this is trash
            return null;
        },

        onsapdown: function(oEvent) {
            return this.navigate('getLowerObj', oEvent);
        },

        onsapup: function(oEvent) {
            return this.navigate('getUpperObj', oEvent);
        },

        onsapleft: function(oEvent) {
            return this.navigate('getLeftObj', oEvent);
        },

        onsapright: function(oEvent) {
            return this.navigate('getRightObj', oEvent);
        },

        navigate: function(navMethod, oEvent) {
            oEvent.preventDefault();
            var obj = this.getObject(oEvent.target);
            if (!obj) {
                return;
            }
            var targetObj = obj[navMethod].apply(obj, []);
            if (!targetObj) {
                return;
            }
            targetObj.focus();
        },

        onAfterRendering: function() {
            //console.log('pai');
        }

    };

})();

}; // end of sap/ushell/renderers/fiori2/search/container/ResultListKeyEventHandler.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.controls.SearchBar') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.controls.SearchBar');
/* global jQuery, sap, window */
(function() {
    "use strict";

    jQuery.sap.require('sap.m.Bar'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Label'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Button'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ButtonType'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ToggleButton'); // unlisted dependency retained


    sap.m.Bar.extend('sap.ushell.renderers.fiori2.search.controls.SearchBar', {

        metadata: {
            properties: {
                filterButtonVisible: {
                    type: "boolean",
                    defaultValue: true
                },
                filterButtonPressed: {
                    type: "boolean",
                    defaultValue: false
                }
            }
        },

        constructor: function(options, sId) {
            var that = this;
            that.sMarginPropValueSmall = "0.5rem";
            that.sMarginPropValueBigNormalMode = "12.5rem";
            that.sMarginPropValueBigCompactMode = "13.5rem";
            that.sMarginPropValueBig = that.sMarginPropValueBigNormalMode;

            if (jQuery("html").attr("dir") === 'rtl') {
                that.sMarginPropName = "margin-right";
            } else {
                that.sMarginPropName = "margin-left";
            }

            that.filterButtonPressed = options.filterButtonPressed;
            that.filterBtn = new sap.m.ToggleButton({
                icon: sap.ui.core.IconPool.getIconURI("filter"),
                tooltip: that.filterButtonPressed ? sap.ushell.resources.i18n.getText("hideFacetBtn_tooltip") : sap.ushell.resources.i18n.getText("showFacetBtn_tooltip"),
                pressed: that.filterButtonPressed,
                press: function() {

                    if (this.getPressed()) {
                        // show facet
                        that.getModel().setFacetVisibility(true);

                        // fade out
                        that._animateFilterBtn(this.getPressed(), 400, function() {
                            jQuery(this).attr("title", sap.ushell.resources.i18n.getText("hideFacetBtn_tooltip"));
                            // - setTooltip wourld trigger a compeltely new rendering, losing the current position
                            //that.filterBtn.setTooltip(sap.ushell.resources.i18n.getText("hideFacetBtn_tooltip"));
                        });

                    } else {
                        //hide facet
                        that.getModel().setFacetVisibility(false);
                        // fade in
                        that._animateFilterBtn(this.getPressed(), 400, function() {
                            jQuery(this).attr("title", sap.ushell.resources.i18n.getText("showFacetBtn_tooltip"));
                            // - setTooltip wourld trigger a compeltely new rendering, losing the current position
                            //that.filterBtn.setTooltip(sap.ushell.resources.i18n.getText("showFacetBtn_tooltip"));
                        });
                    }
                }
            });
            that.filterBtn.addStyleClass('searchBarFilterButton');
            that.filterBtn.addEventDelegate({
                onAfterRendering: function() {
                    if (jQuery(that.getDomRef()).parents(".sapUiSizeCompact").length > 0) {
                        that.sMarginPropValueBig = that.sMarginPropValueBigCompactMode;
                    }
                    that._animateFilterBtn(that.filterBtn.getPressed(), 0);
                }
            });
            options = jQuery.extend({}, {
                contentLeft: [new sap.m.Button({
                    type: sap.m.ButtonType.Back,
                    press: function(event) {
                        window.history.back(1);
                    },
                    tooltip: "{i18n>backBtn_tooltip}"
                })]
            }, options);
            if (!sap.ui.Device.system.phone) {
                options.contentLeft.push(this.filterBtn);
            }
            sap.m.Bar.prototype.constructor.apply(this, [options], sId);
            this.addStyleClass('searchBar');
        },

        getFilterButtonVisible: function() {
            this.filterBtn.getVisible();
        },

        setFilterButtonVisible: function(bIsVisible) {
            this.filterBtn.setVisible(bIsVisible);
            this.setProperty("filterButtonVisible", bIsVisible);
        },

        getFilterButtonPressed: function() {
            this.filterBtn.getPressed();
        },

        setFilterButtonPressed: function(bIsPressed) {
            this.filterBtn.setPressed(bIsPressed);
            this.setProperty("filterButtonPressed", bIsPressed);
            this._animateFilterBtn(bIsPressed);
        },

        _animateFilterBtn: function(bPressed, nDuration, oCompleteCallBack) {
            var that = this;
            var oMargin = {};
            if (bPressed) {
                oMargin[that.sMarginPropName] = that.sMarginPropValueBig;
            } else {
                oMargin[that.sMarginPropName] = that.sMarginPropValueSmall;
            }
            jQuery(that.filterBtn.getDomRef()).animate(oMargin, {
                duration: nDuration,
                complete: oCompleteCallBack
            });

        },
        renderer: 'sap.m.BarRenderer'

    });

})();

}; // end of sap/ushell/renderers/fiori2/search/controls/SearchBar.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.controls.SearchButton') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.controls.SearchButton');
/* global jQuery, sap, window */
(function() {
    "use strict";

    jQuery.sap.require('sap.m.Button'); // unlisted dependency retained


    sap.m.Button.extend('sap.ushell.renderers.fiori2.search.controls.SearchButton', {

        constructor: function(sId, options) {
            options = jQuery.extend({}, {
                icon: sap.ui.core.IconPool.getIconURI("search"),
                tooltip: sap.ushell.resources.i18n.getText("search")
            }, options);
            sap.m.Button.prototype.constructor.apply(this, [sId, options]);
            this.addStyleClass('searchBtn');
        },

        renderer: 'sap.m.ButtonRenderer'

    });

})();

}; // end of sap/ushell/renderers/fiori2/search/controls/SearchButton.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.controls.SearchFacetDialog') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.controls.SearchFacetDialog');
/* global jQuery, sap, window */
(function() {
    "use strict";

    jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained

    jQuery.sap.require('sap.ushell.renderers.fiori2.search.FacetItem'); // unlisted dependency retained


    sap.m.Dialog.extend('sap.ushell.renderers.fiori2.search.controls.SearchFacetDialog', {

        constructor: function(options) {

            var that = this;

            //the position index of elements in parent aggregation:
            //first masterPage: masterPages[0]->scrollContainer->content[]
            that.facetListPosition = 0;
            //every detailPage->content[]
            that.settingContainerPosition = 0;
            that.separatorPosition = 1;
            that.attributeListPosition = 2;
            that.advancedPosition = 3;
            //settingContainer->content[]
            that.sortingSelectPosition = 0;
            that.showOnTopCheckBoxPosition = 1;

            //flag to recognize initial call or single facet call
            that.bSingleCall = false;

            options = jQuery.extend({}, {
                showHeader: false,
                //                title: sap.ushell.resources.i18n.getText("filters"),
                horizontalScrolling: false,
                verticalScrolling: false,
                beginButton: new sap.m.Button({
                    text: sap.ushell.resources.i18n.getText("okDialogBtn"),
                    press: function(oEvent) {
                        that.onOkClick(oEvent);
                        that.close();
                        that.destroy();
                    }
                }),
                endButton: new sap.m.Button({
                    text: sap.ushell.resources.i18n.getText("cancelDialogBtn"),
                    press: function(oEvent) {
                        that.close();
                        that.destroy();
                    }
                }),
                content: [that.createContainer()]
            }, options);

            that.selectedAttribute = options.selectedAttribute ? options.selectedAttribute : "";

            sap.m.Dialog.prototype.constructor.apply(this, [options]);
            this.addStyleClass('sapUiSizeCompact');
            this.addStyleClass('sapUshellSearchFacetDialog');
        },

        renderer: 'sap.m.DialogRenderer',

        createContainer: function() {
            var that = this;

            //create SplitContainer with masterPages
            that.oSplitContainer = new sap.m.SplitContainer({
                masterPages: that.masterPagesFactory()
            });

            //binding detailPages in SplitContainer
            that.oSplitContainer.bindAggregation("detailPages", "/facetDialog", function(sId, oContext) {
                return that.detailPagesFactory(sId, oContext);
            });

            that.oSplitContainer.addStyleClass('sapUshellSearchFacetDialogContainer');

            return that.oSplitContainer;
        },

        //create masterPages in splitContainer
        masterPagesFactory: function() {
            var that = this;

            //create facet list
            var oFacetList = new sap.m.List({
                mode: sap.m.ListMode.SingleSelectMaster,
                selectionChange: function(oEvent) {
                    that.onMasterPageSelectionChange(oEvent);
                }
            });
            oFacetList.bindAggregation("items", "/facetDialog", function(sId, oContext) {
                var oListItem = new sap.m.StandardListItem({
                    title: "{title}",
                    infoState: "Success"
                });

                //calculate seleted items
                var sFacetType = oContext.oModel.getProperty(oContext.sPath).facetType;
                var aItems = oContext.oModel.getProperty(oContext.sPath).items;
                var count = 0;
                for (var i = 0; i < aItems.length; i++) {
                    if (aItems[i].selected) {
                        count++;
                    }
                }
                if (count > 0) {
                    if (sFacetType === "attribute") {
                        oListItem.setCounter(count);
                    }
                    //                    oListItem.addStyleClass('searchFacetDialogListItemBold');
                }

                //"search for" must be bold
                if (sFacetType === "search") {
                    oListItem.addStyleClass('sapUshellSearchFacetDialogListItemBold');
                }

                return oListItem;
            });

            //create a scrollContainer, content is the facet list
            var oMasterPage = new sap.m.ScrollContainer({
                height: '100%',
                horizontal: false,
                vertical: true,
                content: [oFacetList]
            }).addStyleClass('sapUshellSearchFacetDialogMasterContainer');

            oMasterPage.addEventDelegate({
                onAfterRendering: function(oEvent) {
                    if (that.selectedAttribute) {
                        for (var i = 0; i < oFacetList.getItems().length; i++) {
                            var oListItem = oFacetList.getItems()[i];
                            var oBindingObject = oListItem.getBindingContext().getObject();
                            if (that.selectedAttribute === oBindingObject.dimension) {
                                oFacetList.setSelectedItem(oListItem);
                            }
                        }
                    }
                    if (!oFacetList.getSelectedItem()) {
                        oFacetList.setSelectedItem(oFacetList.getItems()[0]);
                    }
                    var oSelectedItem = oFacetList.getSelectedItem();
                    that.updateDetailPage(oSelectedItem);
                }
            });

            //masterPages has only one page
            var oMasterPages = [oMasterPage];
            return oMasterPages;
        },

        //event: select listItems in masterPage
        onMasterPageSelectionChange: function(oEvent) {
            var that = this;
            var oListItem = oEvent.mParameters.listItem;
            that.updateDetailPage(oListItem);
        },

        //create detailPage in splitContainer, using data binding
        detailPagesFactory: function(sId, oContext) {
            var that = this;
            var sFacetType = oContext.oModel.getProperty(oContext.sPath).facetType;
            var aItems = oContext.oModel.getProperty(oContext.sPath).items;
            var count = 0;
            for (var i = 0; i < aItems.length; i++) {
                if (aItems[i].selected) {
                    count++;
                }
            }

            //create a settings container with select and checkBox, initial is not visible
            var oSelect = new sap.m.Select({
                items: [
                    new sap.ui.core.Item({
                        text: sap.ushell.resources.i18n.getText("notSorted"),
                        key: "notSorted"
                    }),
                    new sap.ui.core.Item({
                        text: sap.ushell.resources.i18n.getText("sortByCount"),
                        key: "sortCount"
                    }),
                    new sap.ui.core.Item({
                        text: sap.ushell.resources.i18n.getText("sortByName"),
                        key: "sortName"
                    })
                ],
                selectedKey: "notSorted",
                change: function(oEvent) {
                    that.onSelectChange(oEvent);
                }
            }).addStyleClass('sapUshellSearchFacetDialogSettingsSelect');
            var oCheckBox = new sap.m.CheckBox({
                text: "Show Selected on Top",
                enabled: count > 0 ? true : false,
                select: function(oEvent) {
                    that.onCheckBoxSelect(oEvent);
                }
            });
            var oSettings = new sap.ui.layout.VerticalLayout({
                content: [oSelect, oCheckBox]
            }).addStyleClass('sapUshellSearchFacetDialogSettingsContainer');
            oSettings.setVisible(false);

            //create the attribute list for each facet
            var oList = new sap.m.List({
                includeItemInSelection: true,
                showNoData: false,
                showSeparators: sap.m.ListSeparators.None,
                selectionChange: function(oEvent) {
                    that.onDetailPageSelectionChange(oEvent);
                }
            }).addStyleClass('sapUshellSearchFacetDialogDetailPageList');
            if (sFacetType === "attribute") {
                oList.setMode(sap.m.ListMode.MultiSelect);
            } else {
                oList.setMode(sap.m.ListMode.SingleSelectMaster);
            }
            var oBindingInfo = {
                path: "items",
                factory: function(sId, oContext) {
                    var oBinding = oContext.oModel.getProperty(oContext.sPath);
                    var oListItem = new sap.m.StandardListItem({
                        title: "{label}",
                        tooltip: "{label}" + "  " + "{value}",
                        info: "{valueLabel}",
                        selected: oBinding.selected
                    });

                    //prepare the local filterConditions array in facet dialog, only by initial pespective call
                    if (!that.bSingleCall && oBinding.selected && !oContext.oModel.hasFilter(oBinding)) {
                        oContext.oModel.aFilters.push(oBinding);
                    }

                    return oListItem;
                }
            };
            //            if (sFacetType === "attribute") {
            //                oBindingInfo.sorter = new sap.ui.model.Sorter("value", true, false);
            //            }
            oBindingInfo.filters = new sap.ui.model.Filter("advanced", sap.ui.model.FilterOperator.NE, true);
            oList.bindAggregation("items", oBindingInfo);

            var oListContainer = new sap.m.ScrollContainer({
                height: '67.2%',
                horizontal: false,
                vertical: true,
                content: [oList]
            }).addStyleClass('sapUshellSearchFacetDialogDetailPageListContainer');

            //create the separator between setting and attribute list
            var oSeparatorItem = new sap.m.StandardListItem({});
            var oSeparator = new sap.m.List({
                items: [oSeparatorItem],
                showSeparators: sap.m.ListSeparators.None
            }).addStyleClass('sapUshellSearchFacetDialogDetailPageSeparator');

            //create advanced serach 
            var oCondition = oContext.oModel.getProperty(oContext.sPath).items[0].filterCondition;
            var sDataType = that.getAttributeDataType(oCondition);
            var oAdvancedCondition = that.advancedConditionFactory(sDataType);
            var oAdvancedContainer = new sap.m.ScrollContainer({
                height: '32%',
                horizontal: false,
                vertical: true,
                content: [oAdvancedCondition]
            }).addStyleClass('sapUshellSearchFacetDialogDetailPageAdvancedContainer');
            oAdvancedContainer.data('dataType', sDataType);
            that.updateAdvancedConditions(oAdvancedContainer, aItems, sDataType);

            //create a page, content include settings container and attribute list, head toolbar has a setting button and a search field
            var oPage = new sap.m.Page({
                showHeader: true,
                title: sap.ushell.resources.i18n.getText("filters"),
                subHeader: new sap.m.Toolbar({
                    content: [
                        new sap.m.SearchField({
                            //showSearchButton: false,
                            placeholder: sap.ushell.resources.i18n.getText("filterPlaceholder"),
                            liveChange: function(oEvent) {
                                that.onSearchFieldLiveChange(oEvent);
                            }
                        }),
                        new sap.m.ToggleButton({
                            icon: "sap-icon://sort",
                            press: function(oEvent) {
                                that.onSettingButtonPress(oEvent);
                            }
                        })
                    ]
                }),
                content: [oSettings, oSeparator, oListContainer, oAdvancedContainer]
            }).addStyleClass('sapUshellSearchFacetDialogDetailPage');
            if (sFacetType === "datasource") {
                oPage.destroySubHeader();
            }
            if (sFacetType === "search") {
                //'search for' has no setting button
                oPage.getSubHeader().removeContent(1);
                //set the search term in searchField
                var searchTerm = oContext.oModel.getProperty('/searchBoxTerm');
                oPage.getSubHeader().getContent()[0].setValue(searchTerm);
            }

            return oPage;
        },

        //create an advanced condition
        advancedConditionFactory: function(type) {
            var that = this;
            var oAdvancedCheckBox = new sap.m.CheckBox({
                select: function(oEvent) {
                    that.updateCountInfo(oEvent.getSource().getParent().getParent().getParent());
                }
            }).addStyleClass('sapUshellSearchFacetDialogDetailPageConditionCheckBox');
            var oInputBox;
            switch (type) {
                case 'date':
                    oInputBox = new sap.m.DateRangeSelection({
                        width: '90%',
                        //delimiter: 'to'
                        change: function(oEvent) {
                            that.onDateRangeSelectionChange(oEvent);
                        }
                    }).addStyleClass('sapUshellSearchFacetDialogDetailPageConditionInput');
                    break;
                case 'string':
                    oInputBox = new sap.m.Input({
                        width: '90%',
                        liveChange: function(oEvent) {
                            that.onAdvancedInputChange(oEvent);
                        }
                    }).addStyleClass('sapUshellSearchFacetDialogDetailPageConditionInput');
                    break;
                case 'number':
                    var oInputBoxLeft = new sap.m.Input({
                        width: '46.5%',
                        liveChange: function(oEvent) {
                            that.onAdvancedNumberInputChange(oEvent);
                        },
                        type: sap.m.InputType.Number
                    }).addStyleClass('sapUshellSearchFacetDialogDetailPageConditionInput');
                    var oInputBoxRight = new sap.m.Input({
                        width: '46.5%',
                        liveChange: function(oEvent) {
                            that.onAdvancedNumberInputChange(oEvent);
                        },
                        type: sap.m.InputType.Number
                    }).addStyleClass('sapUshellSearchFacetDialogDetailPageConditionInput');
                    var oLabel = new sap.m.Label({
                        text: '...'
                    }).addStyleClass('sapUshellSearchFacetDialogDetailPageConditionLabel');
                    oInputBox = new sap.ui.layout.HorizontalLayout({
                        allowWrapping: true,
                        content: [oInputBoxLeft, oLabel, oInputBoxRight]
                    });
                    break;
                default:
                    break;

            }
            //            var oButton = new sap.m.Button({
            //                icon: 'sap-icon://add-filter',
            //                press: function(oEvent) {
            //                    that.onAdvancedAddButtonPress(oEvent, type);
            //                }
            //            }).addStyleClass('searchFacetDialogDetailPageConditionButton');

            var oAdvancedCondition = new sap.ui.layout.HorizontalLayout({
                allowWrapping: true,
                content: [oAdvancedCheckBox, oInputBox]
            }).addStyleClass('sapUshellSearchFacetDialogDetailPageCondition');
            return oAdvancedCondition;
        },

        //event: select listItems in detailPages
        onDetailPageSelectionChange: function(oEvent) {
            var that = this;

            //first set the selected value in model
            var oSelectedItem = oEvent.mParameters.listItem;
            var sSelectedBindingPath = oSelectedItem.getBindingContext().sPath + "/selected";
            oSelectedItem.getBindingContext().oModel.setProperty(sSelectedBindingPath, oSelectedItem.getSelected());

            //update aFilters
            var oBindingObject = oSelectedItem.getBindingContext().getObject();
            if (oSelectedItem.getSelected()) {
                that.getModel().addFilter(oBindingObject);
            } else {
                that.getModel().removeFilter(oBindingObject);
            }

            //update the count info in masterPageList
            var oList = oEvent.oSource;
            var oDetailPage = oList.getParent().getParent();
            that.updateCountInfo(oDetailPage);

            //deselect setting check box
            var oSettings = oList.getParent().getParent().getContent()[that.settingContainerPosition];
            var oCheckbox = oSettings.getContent()[that.showOnTopCheckBoxPosition];
            var oSelect = oSettings.getContent()[that.sortingSelectPosition];
            if (oCheckbox.getSelected()) {
                oCheckbox.setSelected(false);
                oSelect.setSelectedKey("notSorted");
            }
            if (oList.getSelectedContexts().length > 0) {
                oCheckbox.setEnabled(true);
            } else {
                oCheckbox.setEnabled(false);
            }
        },

        //event: search in detailPages
        onSearchFieldLiveChange: function(oEvent) {
            var that = this;
            var sFilterTerm = oEvent.getSource().getValue();
            var oSelectedItem = that.getFacetList().getSelectedItem();
            that.updateDetailPage(oSelectedItem, sFilterTerm);
        },

        //event: click setting button
        onSettingButtonPress: function(oEvent) {
            var that = this;
            var bPressed = oEvent.oSource.getPressed();
            var oSettings = oEvent.oSource.getParent().getParent().getContent()[that.settingContainerPosition];
            var oSeparator = oEvent.oSource.getParent().getParent().getContent()[that.separatorPosition];
            var oListContainer = oEvent.oSource.getParent().getParent().getContent()[that.attributeListPosition];
            if (bPressed) {
                oSettings.setVisible(true);
                oSeparator.setShowSeparators(sap.m.ListSeparators.All);
                oListContainer.setHeight('54%');
            } else {
                oSettings.setVisible(false);
                oSeparator.setShowSeparators(sap.m.ListSeparators.None);
                oListContainer.setHeight('67.2%');
            }
        },

        //event: change select box in settings
        onSelectChange: function(oEvent) {
            var that = this;
            that.sortingAttributeList(oEvent.oSource.getParent().getParent());
        },

        //event: select check box in settings
        onCheckBoxSelect: function(oEvent) {
            var that = this;
            that.sortingAttributeList(oEvent.oSource.getParent().getParent());
        },

        //event: date range selection box changed
        onDateRangeSelectionChange: function(oEvent) {
            var that = this;
            var oDateRangeSelection = oEvent.getSource();
            var oAdvancedCondition = oDateRangeSelection.getParent();
            var oAdvancedCheckBox = oAdvancedCondition.getContent()[0];
            if (oDateRangeSelection.getDateValue() && oDateRangeSelection.getSecondDateValue()) {
                oAdvancedCheckBox.setSelected(true);
                that.insertNewAdvancedCondition(oAdvancedCondition, "date");
                that.updateCountInfo(oAdvancedCondition.getParent().getParent());
            } else {
                oAdvancedCheckBox.setSelected(false);
            }
        },

        //event: advanced string input box changed
        onAdvancedInputChange: function(oEvent) {
            var that = this;
            var oInput = oEvent.getSource();
            var oAdvancedCondition = oInput.getParent();
            var oAdvancedCheckBox = oAdvancedCondition.getContent()[0];
            if (oInput.getValue()) {
                oAdvancedCheckBox.setSelected(true);
                that.insertNewAdvancedCondition(oAdvancedCondition, "string");
                that.updateCountInfo(oAdvancedCondition.getParent().getParent());
            } else {
                oAdvancedCheckBox.setSelected(false);
            }
        },

        //event: advanced number input box changed
        onAdvancedNumberInputChange: function(oEvent) {
            var that = this;
            var oInput = oEvent.getSource();
            var oAdvancedCondition = oInput.getParent().getParent();
            var oAdvancedCheckBox = oAdvancedCondition.getContent()[0];
            if (oInput.getParent().getContent()[0].getValue() && oInput.getParent().getContent()[2].getValue()) {
                oAdvancedCheckBox.setSelected(true);
                that.insertNewAdvancedCondition(oAdvancedCondition, "number");
                that.updateCountInfo(oAdvancedCondition.getParent().getParent());
            } else {
                oAdvancedCheckBox.setSelected(false);
            }
        },

        //event: click ok button
        onOkClick: function(oEvent) {
            var that = this;
            var oModel = that.getModel();
            var oSearchModel = that.getModel('searchModel');
            oSearchModel.resetFilterConditions(false);
            var aDetailPages = that.oSplitContainer.getDetailPages();
            for (var m = 0; m < oModel.aFilters.length; m++) {
                var item = oModel.aFilters[m];
                if (!item.advanced) {
                    oSearchModel.addFilterCondition(item, false);
                }
            }
            for (var i = 0; i < aDetailPages.length; i++) {
                //attribute list
                //                var oList = aDetailPages[i].getContent()[that.attributeListPosition].getContent()[0];
                //                for (var j = 0; j < oList.getItems().length; j++) {
                //                    var oListItem = oList.getItems()[j];
                //                    var oListItemBindingObject = oListItem.getBindingContext().getObject();
                //                    if (oListItem.getSelected()) {
                //                        oSearchModel.addFilterCondition(oListItemBindingObject, false);
                //                    }
                //                }

                //advanced search area
                if (aDetailPages[i].getContent()[that.advancedPosition]) {
                    var oAdvancedContainer = aDetailPages[i].getContent()[that.advancedPosition];
                    var sDataType = oAdvancedContainer.data('dataType');
                    var oAdvancedConditionList = aDetailPages[i].getContent()[that.advancedPosition].getContent();
                    var k, oAdvancedCondition, oAdvancedCheckBox, fromCondition, toCondition, oConditionGroup, facetItem;
                    switch (sDataType) {
                        case 'date':
                            for (k = 0; k < oAdvancedConditionList.length; k++) {
                                oAdvancedCondition = oAdvancedConditionList[k];
                                oAdvancedCheckBox = oAdvancedCondition.getContent()[0];
                                var oDateRangeSelection = oAdvancedCondition.getContent()[1];
                                if (oAdvancedCheckBox.getSelected() && oDateRangeSelection.getDateValue() && oDateRangeSelection.getSecondDateValue()) {
                                    //format: 2015-07-14 00:00:00.0000000
                                    var oFormat = {
                                        "pattern": "yyyy-MM-dd HH:mm:ss.SSSSSSS"
                                    };
                                    var oSecondFormat = {
                                        "pattern": "yyyy-MM-dd 23:59:59.9999999"
                                    };
                                    var dateValue = sap.ui.core.format.DateFormat.getDateTimeInstance(oFormat).format(oDateRangeSelection.getDateValue());
                                    var secondDateValue = sap.ui.core.format.DateFormat.getDateTimeInstance(oSecondFormat).format(oDateRangeSelection.getSecondDateValue());
                                    fromCondition = oSearchModel.sina.createFilterCondition({
                                        attribute: that.getFacetList().getItems()[i].getBindingContext().getObject().dimension,
                                        operator: ">=",
                                        value: dateValue
                                    });
                                    toCondition = oSearchModel.sina.createFilterCondition({
                                        attribute: that.getFacetList().getItems()[i].getBindingContext().getObject().dimension,
                                        operator: "<=",
                                        value: secondDateValue
                                    });
                                    oConditionGroup = that.getModel().sina.createFilterConditionGroup();
                                    oConditionGroup.label = oDateRangeSelection.getValue();
                                    oConditionGroup.conditions[0] = fromCondition;
                                    oConditionGroup.conditions[1] = toCondition;
                                    facetItem = that.createAdvancedFacetItem(oConditionGroup, that.getFacetList().getItems()[i].getBindingContext().getObject().title);
                                    oSearchModel.addFilterCondition(facetItem, false);
                                }
                            }
                            break;
                        case 'string':
                            for (k = 0; k < oAdvancedConditionList.length; k++) {
                                oAdvancedCondition = oAdvancedConditionList[k];
                                oAdvancedCheckBox = oAdvancedCondition.getContent()[0];
                                var oAdvancedInput = oAdvancedCondition.getContent()[1];
                                if (oAdvancedCheckBox.getSelected() && oAdvancedInput.getValue()) {
                                    var oFilterCondition = oSearchModel.sina.createFilterCondition({
                                        attribute: that.getFacetList().getItems()[i].getBindingContext().getObject().dimension,
                                        operator: "=",
                                        value: oAdvancedInput.getValue()
                                    });
                                    facetItem = that.createAdvancedFacetItem(oFilterCondition, that.getFacetList().getItems()[i].getBindingContext().getObject().title);
                                    oSearchModel.addFilterCondition(facetItem, false);
                                }
                            }
                            break;
                        case 'number':
                            for (k = 0; k < oAdvancedConditionList.length; k++) {
                                oAdvancedCondition = oAdvancedConditionList[k];
                                oAdvancedCheckBox = oAdvancedCondition.getContent()[0];
                                var oAdvancedInputLeft = oAdvancedCondition.getContent()[1].getContent()[0];
                                var oAdvancedInputRight = oAdvancedCondition.getContent()[1].getContent()[2];
                                var oAdvancedLebel = oAdvancedCondition.getContent()[1].getContent()[1];
                                if (oAdvancedCheckBox.getSelected() && oAdvancedInputLeft.getValue() && oAdvancedInputRight.getValue()) {
                                    fromCondition = oSearchModel.sina.createFilterCondition({
                                        attribute: that.getFacetList().getItems()[i].getBindingContext().getObject().dimension,
                                        operator: ">=",
                                        value: oAdvancedInputLeft.getValue()
                                    });
                                    toCondition = oSearchModel.sina.createFilterCondition({
                                        attribute: that.getFacetList().getItems()[i].getBindingContext().getObject().dimension,
                                        operator: "<=",
                                        value: oAdvancedInputRight.getValue()
                                    });
                                    oConditionGroup = that.getModel().sina.createFilterConditionGroup();
                                    oConditionGroup.label = oAdvancedInputLeft.getValue() + oAdvancedLebel.getText() + oAdvancedInputRight.getValue();
                                    oConditionGroup.conditions[0] = fromCondition;
                                    oConditionGroup.conditions[1] = toCondition;
                                    facetItem = that.createAdvancedFacetItem(oConditionGroup, that.getFacetList().getItems()[i].getBindingContext().getObject().title);
                                    oSearchModel.addFilterCondition(facetItem, false);
                                }
                            }
                            break;
                        default:
                            break;
                    }
                }
            }
            oSearchModel.filterChanged = true;
            oSearchModel._searchFireQuery();
        },

        //help function: get the facet list in masterPage
        getFacetList: function() {
            var that = this;
            return that.oSplitContainer.getMasterPages()[0].getContent()[this.facetListPosition];
        },

        //set count info in master page facet list
        updateCountInfo: function(oDetailPage) {
            var that = this;
            var oList = oDetailPage.getContent()[that.attributeListPosition].getContent()[0];
            var aContexts = oList.getSelectedContexts();
            var oAdvancedContainer = oList.getParent().getParent().getContent()[that.advancedPosition];
            var countAdvancedCondition = 0;
            for (var i = 0; i < oAdvancedContainer.getContent().length; i++) {
                var oConditionLayout = oAdvancedContainer.getContent()[i];
                var oCheckbox = oConditionLayout.getContent()[0];
                if (oCheckbox.getSelected()) {
                    countAdvancedCondition++;
                }
            }
            var oMasterPageList = that.getFacetList();
            var oMasterPageListItem = oMasterPageList.getSelectedItem();
            if (!oMasterPageListItem) {
                oMasterPageListItem = oMasterPageList.getItems()[0];
            }
            var sMasterBindingPath = oMasterPageListItem.getBindingContext().sPath;
            var sFacetType = oMasterPageListItem.getBindingContext().oModel.getProperty(sMasterBindingPath).facetType;
            if (sFacetType === "attribute") {
                var count = aContexts.length + countAdvancedCondition;
                if (count > 0) {
                    oMasterPageListItem.setCounter(count);
                } else {
                    oMasterPageListItem.setCounter(null);
                }
            }
            //            else if (sFacetType === "datasource") {
            //                var index = oEvent.oSource.indexOfAggregation("items", oSelectedItem);
            //                if (index > 0) {
            //                    oMasterPageListItem.addStyleClass('sapUshellSearchFacetDialogListItemBold');
            //                } else {
            //                    oMasterPageListItem.removeStyleClass('sapUshellSearchFacetDialogListItemBold');
            //                }
            //            }
        },

        //helper function: sorting the attribute list
        sortingAttributeList: function(oDetailPage) {
            var that = this;
            var oSettings = oDetailPage.getContent()[that.settingContainerPosition];
            var oSelect = oSettings.getContent()[that.sortingSelectPosition];
            var oCheckBox = oSettings.getContent()[that.showOnTopCheckBoxPosition];
            var oList = oDetailPage.getContent()[that.attributeListPosition].getContent()[0];
            var oBinding = oList.getBinding("items");
            var aSorters = [];

            if (oCheckBox.getSelected()) {
                aSorters.push(new sap.ui.model.Sorter("selected", true, false));
            }

            switch (oSelect.getSelectedKey()) {
                case "sortName":
                    aSorters.push(new sap.ui.model.Sorter("label", false, false));
                    break;
                case "sortCount":
                    aSorters.push(new sap.ui.model.Sorter("value", true, false));
                    break;
                default:
                    break;
            }

            oBinding.sort(aSorters);
        },

        //helper function: determinate the attribute list data type
        getAttributeDataType: function(oCondition) {
            //            if (oCondition.attribute && oCondition.operator === '=') {
            //                return 'string';
            //            } else {
            //                var sValue = oCondition.conditions[0].value;
            //                if (sap.ui.core.format.DateFormat.getDateTimeInstance({
            //                        "pattern": "yyyy-MM-dd hh:mm:ss.SSSSSSS"
            //                    }).parse(sValue)) {
            //                    return 'date';
            //                } else {
            //                    return 'number';
            //                }
            //            }
            var that = this;
            var dataType;
            if (oCondition.attribute) {
                if (that.getModel().aAttributesMetaData[oCondition.attribute]) {
                    dataType = that.getModel().aAttributesMetaData[oCondition.attribute].$$MetaData$$.dataType;
                }
            } else if (oCondition.conditions) {
                if (that.getModel().aAttributesMetaData[oCondition.conditions[0].attribute]) {
                    dataType = that.getModel().aAttributesMetaData[oCondition.conditions[0].attribute].$$MetaData$$.dataType;
                }
            }

            switch (dataType) {
                case "Double":
                    return "number";
                case "Timestamp":
                    return "date";
                case "String":
                    return "string";
                default:
                    return "string";
            }
        },

        //helper function: create a facet item for advanced search
        createAdvancedFacetItem: function(oFilterCondition, sFacetTitle) {
            var facetItem = new sap.ushell.renderers.fiori2.search.FacetItem({
                value: "",
                filterCondition: oFilterCondition,
                facetTitle: sFacetTitle,
                label: oFilterCondition.label ? oFilterCondition.label : oFilterCondition.value,
                selected: true,
                level: 0
            });
            return facetItem;
        },

        //helper function: insert new advanced condition
        insertNewAdvancedCondition: function(oAdvancedCondition, type) {
            var that = this;
            var oAdvancedContainer = oAdvancedCondition.getParent();
            var index = oAdvancedContainer.indexOfAggregation("content", oAdvancedCondition);
            if (index === (oAdvancedContainer.getAggregation("content").length - 1)) {
                var oNewAdvancedCondition = that.advancedConditionFactory(type);
                oAdvancedContainer.addContent(oNewAdvancedCondition);
            }
        },

        //update advanced conditions after detail page factory
        updateAdvancedConditions: function(oAdvancedContainer, aItems, type) {
            var that = this;
            var aConditions, oConditionLayout, oCheckBox, oInputBox;
            for (var i = aItems.length; i > 0; i--) {
                var item = aItems[i - 1];
                if (item.advanced) {
                    that.getModel().aFilters.push(item);

                    aConditions = oAdvancedContainer.getContent();
                    oConditionLayout = aConditions[aConditions.length - 1];

                    oCheckBox = oConditionLayout.getContent()[0];
                    oCheckBox.setSelected(true);
                    oInputBox = oConditionLayout.getContent()[1];
                    if (type === "number") {
                        var oInputBoxLeft = oInputBox.getContent()[0];
                        var oInputBoxRight = oInputBox.getContent()[2];
                        if (item.filterCondition.conditions) {
                            for (var j = 0; j < item.filterCondition.conditions.length; j++) {
                                var condition = item.filterCondition.conditions[j];
                                if (condition.operator === ">=") {
                                    oInputBoxLeft.setValue(condition.value);
                                }
                                if (condition.operator === "<=") {
                                    oInputBoxRight.setValue(condition.value);
                                }
                            }
                        }
                    } else {
                        oInputBox.setValue(item.label);
                    }
                    that.insertNewAdvancedCondition(oConditionLayout, type);
                }
            }
        },

        //helper function: collect all filters in dialog for single facet call
        applyFacetQueryFilter: function(excludedIndex) {
            var that = this;

            that.getModel().resetFacetQueryFilterConditions();

            var aDetailPages = that.oSplitContainer.getDetailPages();
            for (var i = 0; i < aDetailPages.length; i++) {
                if (i === excludedIndex) {
                    continue;
                }
                var oList = aDetailPages[i].getContent()[that.attributeListPosition].getContent()[0];
                for (var j = 0; j < oList.getItems().length; j++) {
                    var oListItem = oList.getItems()[j];
                    var oListItemBindingObject = oListItem.getBindingContext().getObject();
                    var filterCondition = oListItemBindingObject.filterCondition;
                    if (filterCondition.attribute || filterCondition.conditions) {
                        if (oListItem.getSelected()) {
                            if (!that.getModel().facetQuery.getFilter().hasFilterCondition(filterCondition)) {
                                that.getModel().facetQuery.addFilterCondition(filterCondition);
                            }
                        }
                    }
                }
            }
        },

        //according masterPageListItem, send a single facet pespective call, update the detail page
        updateDetailPage: function(oListItem, sFilterTerm) {
            var that = this;

            var oModel = oListItem.getBindingContext().oModel;
            var sBindingPath = oListItem.getBindingContext().sPath;

            var index = that.getFacetList().indexOfAggregation("items", oListItem);
            var oDetailPage = that.oSplitContainer.getDetailPages()[index];
            var oDetailPageAttributeList = oDetailPage.getContent()[that.attributeListPosition].getContent()[0];
            var sNaviId = oDetailPage.getId();
            oDetailPageAttributeList.setBusy(true);
            that.oSplitContainer.toDetail(sNaviId, "show");

            var oSelectedListItem = oModel.getProperty(sBindingPath);
            var properties = {
                sAttribute: oSelectedListItem.dimension,
                sBindingPath: sBindingPath,
                oList: oDetailPageAttributeList
            };

            //apply the facet query filter, except itself
            that.applyFacetQueryFilter(index);

            //add the filter term in search field
            if (sFilterTerm) {
                var filterCondition = oModel.sina.createFilterCondition({
                    attribute: oSelectedListItem.dimension,
                    operator: "=",
                    value: sFilterTerm + "*"
                });
                oModel.facetQuery.addFilterCondition(filterCondition);
            }

            //flag this call as single call
            that.bSingleCall = true;

            //send the single call
            oModel.facetDialogSingleCall(properties).done(function() {
                that.updateDetailPageListItemsSelected(oDetailPageAttributeList);
            });
        },

        //callback function: update selected property after model changed
        updateDetailPageListItemsSelected: function(oDetailPageAttributeList) {
            var that = this;
            var oAdvancedContainer = oDetailPageAttributeList.getParent().getParent().getContent()[that.advancedPosition];
            var sDataType = oAdvancedContainer.data('dataType');
            for (var j = 0; j < oDetailPageAttributeList.getItems().length; j++) {
                var oListItem = oDetailPageAttributeList.getItems()[j];
                var oListItemBindingObject = oListItem.getBindingContext().getObject();
                if (oDetailPageAttributeList.getModel().hasFilter(oListItemBindingObject)) {
                    oListItem.setSelected(true);
                    oDetailPageAttributeList.getModel().changeFilterAdvaced(oListItemBindingObject, false);
                    that.removeAdvancedCondition(oAdvancedContainer, oListItem, sDataType);
                } else {
                    oListItem.setSelected(false);
                }
                //update model selected property
                var sSelectedBindingPath = oListItem.getBindingContext().sPath + "/selected";
                oListItem.getBindingContext().oModel.setProperty(sSelectedBindingPath, oListItem.getSelected());
            }
            that.sortingAttributeList(oDetailPageAttributeList.getParent().getParent());
            oDetailPageAttributeList.setBusy(false);
        },

        //remove duplicate advanced condition
        removeAdvancedCondition: function(oAdvancedContainer, oListItem, type) {
            var aConditions = oAdvancedContainer.getContent();
            var oConditionLayout, oInputBox, index;

            for (var i = 0; i < aConditions.length; i++) {
                oConditionLayout = aConditions[i];
                oInputBox = oConditionLayout.getContent()[1];
                if (type === "string") {
                    var value = oInputBox.getValue();
                    var oListItemBindingObject = oListItem.getBindingContext().getObject();
                    if (value === oListItemBindingObject.filterCondition.value) {
                        index = i;
                        break;
                    }
                }
            }
            oAdvancedContainer.removeContent(index);
        }

    });
})();

}; // end of sap/ushell/renderers/fiori2/search/controls/SearchFacetDialog.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.controls.SearchFacetItem') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.controls.SearchFacetItem');
/* global jQuery, sap, window */
(function() {
    "use strict";

    jQuery.sap.require('sap.m.StandardListItem'); // unlisted dependency retained


    sap.m.StandardListItem.extend('sap.ushell.renderers.fiori2.search.controls.SearchFacetItem', {

        constructor: function(sId, options) {
            var that = this;
            that.options = jQuery.extend({}, {
                type: sap.m.ListType.Active,
                title: "{label}",
                tooltip: "{label}" + " " + "{value}",
                key: "{id}",
                info: "{valueLabel}",
                // do we need this logic? TODO
                //                info: {
                //                    parts: [{
                //                        path: 'selected'
                //                    }, {
                //                        path: '/boCount'
                //                    }, {
                //                        path: '/appCount'
                //                    }, {
                //                        path: '/dataSource'
                //                    }, {
                //                        path: 'valueLabel'
                //                    }],
                //                    formatter: function(selected, boCount, appCount, ds, valueLabel) {
                //                        if (selected) {
                //                            if (ds && ds.objectName && ds.objectName.value === "$$APP$$") {
                //                                return appCount;
                //                            }
                //                            return boCount;
                //                        }
                //                    }
                //                },
                selected: "{selected}",
                level: "{level}"
            }, options);
            sap.m.StandardListItem.prototype.constructor.apply(this, [sId, that.options]);
            this.addStyleClass('sapUshellSearchFacetItem');
            this.addEventDelegate({
                onAfterRendering: function() {
                    if (that.getBindingContext() && that.getBindingContext().getObject()) {
                        var level = that.getBindingContext().getObject().level;
                        if (jQuery("html").attr("dir") === 'rtl') {
                            jQuery(that.getDomRef()).children(".sapMLIBContent").css("padding-right", level + "rem");
                        } else {
                            jQuery(that.getDomRef()).children(".sapMLIBContent").css("padding-left", level + "rem");
                        }
                    }
                }
            });
        },



        renderer: 'sap.m.StandardListItemRenderer'
    });
})();

}; // end of sap/ushell/renderers/fiori2/search/controls/SearchFacetItem.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.controls.SearchFilterBar') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.controls.SearchFilterBar');
/* global jQuery, sap, window, console */
(function() {
    "use strict";

    jQuery.sap.require('sap.m.Toolbar'); // unlisted dependency retained


    sap.m.Toolbar.extend("sap.ushell.renderers.fiori2.search.controls.SearchFilterBar", {

        constructor: function(options) {
            var that = this;

            options = jQuery.extend({}, {
                design: sap.m.ToolbarDesign.Info
            }, options);
            sap.m.Toolbar.prototype.constructor.apply(this, [options]);
            this.addStyleClass('sapUshellSearchFilterContextualBar');

            this.bindAggregation("content", "/filterConditions", function(sId, oContext) {
                return that.contentFactory(sId, oContext);
            });
        },

        contentFactory: function(sId, oContext) {
            var label = new sap.m.Label({
                text: "{label}" + ", "
            });
            label.addStyleClass('filterLabel');
            return label;
        },

        renderer: 'sap.m.ToolbarRenderer',

        onAfterRendering: function() {
            var label = sap.ushell.resources.i18n.getText("filtered_by");
            var $filters = jQuery('.sapUshellSearchFilterContextualBar').children('label');
            var $lastFilter = $filters.last();

            // add filter by in beginning
            jQuery('.sapUshellSearchFilterContextualBar').prepend('<label class="filterTitle">' + label + ':</label>');

            // add aria label
            $filters.attr('aria-label', label);

            // remove ", " from last filter label
            $lastFilter.text($lastFilter.text().substring(0, $lastFilter.text().length - 2));
        }

    });

}());

}; // end of sap/ushell/renderers/fiori2/search/controls/SearchFilterBar.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.controls.SearchLink') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.controls.SearchLink');
/* global sap */
/* global alert */
/* global jQuery */

(function() {
    "use strict";
    
    var searchHelper = sap.ushell.renderers.fiori2.search.SearchHelper;

    sap.m.Link.extend('sap.ushell.renderers.fiori2.search.controls.SearchLink', {

        renderer: 'sap.m.LinkRenderer',
        onAfterRendering: function() {
            var d = this.getDomRef();

            // recover bold tag with the help of text() in a safe way
            searchHelper.boldTagUnescaperByText(d);

        }

    });

})();

}; // end of sap/ushell/renderers/fiori2/search/controls/SearchLink.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.controls.SearchNoResultScreen') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.controls.SearchNoResultScreen');
/* global $ */
(function() {
    "use strict";

    jQuery.sap.require('sap.ui.core.format.NumberFormat'); // unlisted dependency retained

    sap.ui.core.Control.extend("sap.ushell.renderers.fiori2.search.controls.SearchNoResultScreen", {


        metadata: {
            properties: {
                searchBoxTerm: "string"
            }
        },

        renderer: function(oRm, oControl) {

            var escapedSearchTerm = $('<div>').text(oControl.getSearchBoxTerm()).html();
            oRm.write('<div class="sapUshellSearch-no-result"');
            oRm.writeControlData(oControl);
            oRm.write('>');
            oRm.write('<div class="sapUshellSearch-no-result-icon">');
            oRm.writeIcon(sap.ui.core.IconPool.getIconURI("travel-request"));
            oRm.write('</div><div class="sapUshellSearch-no-result-text">');
            oRm.write('<div class="sapUshellSearch-no-result-info">' + sap.ushell.resources.i18n.getText("no_results_info").replace('&1', escapedSearchTerm) + '</div>');
            oRm.write('<div class="sapUshellSearch-no-result-tips">' + sap.ushell.resources.i18n.getText("no_results_tips") + '</div> ');
            oRm.write('</div></div>');

        }
    });
})();

}; // end of sap/ushell/renderers/fiori2/search/controls/SearchNoResultScreen.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.controls.SearchSelect') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.controls.SearchSelect');
/* global jQuery, sap, window */
(function() {
    "use strict";

    jQuery.sap.require('sap.m.Select'); // unlisted dependency retained


    sap.m.Select.extend('sap.ushell.renderers.fiori2.search.controls.SearchSelect', {

        constructor: function(sId, options) {
            options = jQuery.extend({}, {
                visible: "{/businessObjSearchEnabled}",
                autoAdjustWidth: true,
                maxWidth: "16rem",
                items: {
                    path: "/dataSources",
                    template: new sap.ui.core.Item({
                        key: "{key}",
                        text: "{labelPlural}"
                    })
                },
                selectedKey: {
                    path: '/dataSource/key',
                    mode: sap.ui.model.BindingMode.OneWay
                },
                change: function(event) {
                    var item = this.getSelectedItem();
                    var context = item.getBindingContext();
                    var dataSource = context.getObject();
                    this.getModel().setDataSource(dataSource, false);
                    this.getModel().abortSuggestions();
                }
            }, options);
            sap.m.Select.prototype.constructor.apply(this, [sId, options]);
            this.addStyleClass('searchSelect');
        },

        renderer: 'sap.m.SelectRenderer',

        setDisplayMode: function(mode) {
            if (mode === 'icon') {
                this.setType(sap.m.SelectType.IconOnly);
                this.setIcon('sap-icon://slim-arrow-down');
            }
        }

    });

})();

}; // end of sap/ushell/renderers/fiori2/search/controls/SearchSelect.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.controls.SearchText') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.controls.SearchText');
/* global sap */
/* global alert */
/* global jQuery */

(function() {
    "use strict";
    
    var searchHelper = sap.ushell.renderers.fiori2.search.SearchHelper;

    sap.m.Text.extend('sap.ushell.renderers.fiori2.search.controls.SearchText', {

        renderer: 'sap.m.TextRenderer',
        onAfterRendering: function() {

            var d = this.getDomRef();

            // recover bold tag with the help of text() in a safe way
            searchHelper.boldTagUnescaperByText(d);

            // emphasize whyfound in case of ellipsis
            // the problem 
            // Logic is moved to SearchResultListItem OnAfterrendering() 
            // because both offsetWidth and scrollWidth are 0 when parent .searchResultListItemDetails2 display:none
            //searchHelper.forwardEllipsis4Whyfound(d);

        }

    });

})();

}; // end of sap/ushell/renderers/fiori2/search/controls/SearchText.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.controls.SearchTileHighlighter') ) {
/* global jQuery, sap, window, document */
(function() {
    "use strict";

    // =======================================================================
    // import packages
    // =======================================================================
    jQuery.sap.declare('sap.ushell.renderers.fiori2.search.controls.SearchTileHighlighter');
    
    var Tester = sap.ushell.renderers.fiori2.search.SearchHelper.Tester;

    // =======================================================================
    // tile highlighter
    // =======================================================================    
    var Highlighter = sap.ushell.renderers.fiori2.search.controls.SearchTileHighlighter = function() {
        this.init.apply(this, arguments);
    };

    Highlighter.prototype = {

        init: function() {

        },

        setHighlightTerms: function(highlightTerms) {
            this.tester = new Tester(highlightTerms);
        },

        highlight: function(tileView) {
            var node = tileView.getDomRef();
            if (!node) {
                return;
            }
            this.doHighlight(node);
        },

        doHighlight: function(node) {
            if (node.nodeType === window.Node.TEXT_NODE) {
                this.highlightTextNode(node);
                return;
            }
            for (var i = 0; i < node.childNodes.length; ++i) {
                var child = node.childNodes[i];
                this.doHighlight(child);
            }
        },

        highlightTextNode: function(node) {

            // check for match
            var testResult = this.tester.test(node.textContent);
            if (!testResult.bMatch) {
                return;
            }

            // match -> replace dom node
            var spanNode = document.createElement('span');
            spanNode.innerHTML = testResult.sHighlightedText;
            node.parentNode.insertBefore(spanNode, node);
            node.parentNode.removeChild(node);
        }

    };

})();

}; // end of sap/ushell/renderers/fiori2/search/controls/SearchTileHighlighter.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.controls.SearchTilesContainerKeyHandler') ) {
/* global jQuery, sap, console, window  */
(function() {
    "use strict";

    jQuery.sap.declare('sap.ushell.renderers.fiori2.search.controls.SearchTilesContainerKeyHandler');

    // =======================================================================
    // dom helper
    // =======================================================================
    var domHelper = {

        getAncestorByClass: function(element, className) {
            while (element) {
                if (element.classList.contains(className)) {
                    return element;
                }
                element = element.parentElement;
            }
            return false;
        }

    };

    // =======================================================================
    // tile
    // =======================================================================
    var Tile = function() {
        this.init.apply(this, arguments);
    };

    Tile.prototype = {

        init: function(tilesContainer, element) {
            this.tilesContainer = tilesContainer;
            this.tilesContainerElement = tilesContainer.getDomRef();
            this.element = element;
        },

        getIndexInTilesContainer: function() {
            return Array.prototype.indexOf.call(this.tilesContainerElement.children, this.element);
        },

        next: function() {
            if ((this.getIndexInTilesContainer() + 1) % this.tilesContainer.getTilesPerRow() === 0) {
                return null;
            }
            if (this.element.nextElementSibling) {
                return new Tile(this.tilesContainer, this.element.nextElementSibling);
            }
            return null;
        },

        previous: function() {
            if ((this.getIndexInTilesContainer()) % this.tilesContainer.getTilesPerRow() === 0) {
                return null;
            }
            if (this.element.previousElementSibling) {
                return new Tile(this.tilesContainer, this.element.previousElementSibling);
            }
            return null;
        },

        upper: function() {
            var index = this.getIndexInTilesContainer() - this.tilesContainer.getTilesPerRow();
            if (index < 0) {
                return null;
            }
            return new Tile(this.tilesContainer, this.tilesContainerElement.children.item(index));
        },

        lower: function() {
            var index = this.getIndexInTilesContainer() + this.tilesContainer.getTilesPerRow();
            if (index >= this.tilesContainerElement.children.length) {
                return null;
            }
            return new Tile(this.tilesContainer, this.tilesContainerElement.children.item(index));
        },

        focus: function() {
            if (this.element.classList.contains('sapUshellSearchShowMoreTile')) {
                this.element.focus();
            } else {
                this.element.focus();
                //this.element.children.item(0).children.item(0).focus();
            }
        }

    };

    // =======================================================================
    // key handler
    // =======================================================================
    var KeyHandler = sap.ushell.renderers.fiori2.search.controls.SearchTilesContainerKeyHandler = function() {
        this.init.apply(this, arguments);
    };

    KeyHandler.prototype = {

        init: function(tilesContainer) {
            this.tilesContainer = tilesContainer;
        },

        getFocusedObject: function(element) {
            var tileElement = domHelper.getAncestorByClass(element, 'sapUshellSearchTileWrapper');
            if (!tileElement) {
                return null;
            }
            return new Tile(this.tilesContainer, tileElement);
        },

        onsapdown: function(oEvent) {
            this.navigate('lower', oEvent);
        },

        onsapup: function(oEvent) {
            this.navigate('upper', oEvent);
        },

        onsapleft: function(oEvent) {
            this.navigate('previous', oEvent);
        },

        onsapright: function(oEvent) {
            this.navigate('next', oEvent);
        },

        onsapenter: function(oEvent) {

            var currentElement = oEvent.target;
            if (!currentElement) {
                return;
            }

            // show more tile
            if (currentElement.classList.contains('sapUshellSearchShowMoreTile')) {
                var button = currentElement.children.item(0);
                var buttonControl = sap.ui.getCore().byId(button.getAttribute('id'));
                buttonControl.firePress();
                return;
            }

            // regular tile
            var realElements = window.$(oEvent.target).find(".sapUshellTileBase, .sapUiCockpitReportTile");
            if (realElements.length > 0) {
                var tileControl = sap.ui.getCore().byId(window.$(realElements[0]).attr('id'));
                if (tileControl && tileControl.firePress) {
                    tileControl.firePress();
                }
            }

        },

        navigate: function(method, oEvent) {
            oEvent.stopPropagation();
            oEvent.preventDefault();
            var obj = this.getFocusedObject(oEvent.target);
            if (!obj) {
                return;
            }
            var nextObj = obj[method].apply(obj, []);
            if (!nextObj) {
                return;
            }
            nextObj.focus();
        }

    };

})();

}; // end of sap/ushell/renderers/fiori2/search/controls/SearchTilesContainerKeyHandler.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.suggestions.SuggestionProvider') ) {
(function() {
    "use strict";

    // =======================================================================
    // declare package
    // =======================================================================    
    jQuery.sap.declare('sap.ushell.renderers.fiori2.search.suggestions.SuggestionProvider');

    // =======================================================================
    // suggestion provider base class
    // =======================================================================        
    var module = sap.ushell.renderers.fiori2.search.suggestions.SuggestionProvider = function() {
        this.init.apply(this, arguments);
    };

    module.prototype = {

        init: function(params) {
            jQuery.extend(this, params);
        },

        abortSuggestions: function() {},

        getSuggestions: function() {}

    };

})();

}; // end of sap/ushell/renderers/fiori2/search/suggestions/SuggestionProvider.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.suggestions.SuggestionTypes') ) {
(function() {
    "use strict";

    // =======================================================================
    // declare package
    // =======================================================================    
    jQuery.sap.declare('sap.ushell.renderers.fiori2.search.suggestions.SuggestionTypes');

    // =======================================================================
    // suggestion types
    // =======================================================================        
    sap.ushell.renderers.fiori2.search.suggestions.SuggestionTypes = {

        // string constants
        SUGGESTION_TYPE_DATASOURCE: 'datasource',
        SUGGESTION_TYPE_APPS: 'apps',
        SUGGESTION_TYPE_HISTORY: 'history',
        SUGGESTION_TYPE_OBJECT_DATA: 'businessobject',

        // properties of datasource suggestions
        datasource: {
            position: 10,
            limit: 2
        },

        // properties of app suggestions
        apps: {
            position: 20,
            limitDsAll: 3,
            limitDsApps: jQuery.device.is.phone ? 7 : 7
        },

        // properties of history suggestions
        history: {
            position: 30,
            limit: 3
        },

        // properties of object data suggestions
        objectData: {
            position: 40,
            limit: jQuery.device.is.phone ? 7 : 7
        }


    };


})();

}; // end of sap/ushell/renderers/fiori2/search/suggestions/SuggestionTypes.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.userpref.SearchPrefsDialog.view') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.userpref.SearchPrefsDialog.view');
/*global jQuery, sap, document */
(function() {
    "use strict";

    // import modules
    // =======================================================================    
    jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained


    // search preferences dialog view
    // =======================================================================        
    sap.ui.jsview("sap.ushell.renderers.fiori2.search.userpref.SearchPrefsDialog", {

        createContent: function(oController) {
            var that = this;

            // switch button for sessionUserActive (switch on/off user profiling)
            var switchButton = new sap.m.Switch({
                state: {
                    path: "/sessionUserActive",
                    mode: sap.ui.model.BindingMode.TwoWay
                },
                enabled: {
                    parts: [{
                        path: '/searchPrefsActive'
                    }, {
                        path: '/personalizationPolicy'
                    }],
                    formatter: function(searchPrefsActive, personalizationPolicy) {
                        var model = that.getModel();
                        if (searchPrefsActive &&
                            personalizationPolicy !== model.personalizationPolicyEnforced &&
                            personalizationPolicy !== model.personalizationPolicyDisabled) {
                            return true;
                        } else {
                            return false;
                        }
                    },
                    mode: sap.ui.model.BindingMode.OneWay
                }
                //change: this.switchChangeHandler.bind(this)
            });

            // label for switch button
            var userProfilingLabel = new sap.m.Label({
                text: sap.ushell.resources.i18n.getText("sp.userProfilingField") + ':'
            });

            // reset button
            this.resetButton = new sap.m.Button({
                text: sap.ushell.resources.i18n.getText("sp.clearCollectedData"),
                press: this.resetHistory.bind(this),
                enabled: {
                    parts: [{
                        path: '/searchPrefsActive'
                    }, {
                        path: '/personalizationPolicy'
                    }],
                    formatter: function(searchPrefsActive, personalizationPolicy) {
                        var model = that.getModel();
                        if (searchPrefsActive &&
                            personalizationPolicy !== model.personalizationPolicyDisabled) {
                            return true;
                        } else {
                            return false;
                        }
                    },
                    mode: sap.ui.model.BindingMode.OneWay
                }
            });

            // explanation text (disclaimer)
            var explanationText = new sap.m.Text({
                text: sap.ushell.resources.i18n.getText('sp.disclaimer')
            });

            // assemble 
            var content = [userProfilingLabel, switchButton, explanationText, this.resetButton];
            return content;
        },

        resetHistory: function() {
            var that = this;
            this.getModel().resetProfile().then(function() {
                that.resetButton.setEnabled(false);
            }, function(response) {
                var errorText = sap.ushell.resources.i18n.getText('sp.resetFailed');
                if (response.statusText && response.statusText.length > 0 && response.statusText !== 'OK') {
                    errorText += '(' + response.statusText + ')';
                }
                sap.m.MessageBox.show(errorText, {
                    title: sap.ushell.resources.i18n.getText("sp.resetFailedTitle"),
                    icon: sap.m.MessageBox.Icon.ERROR,
                    actions: [sap.m.MessageBox.Action.OK]
                });
            });
        },

        switchChangeHandler: function(e) {
            // depreceated confirmation when switch off query log
            var oSwitch = e.getSource();
            if (oSwitch.getState()) {
                return;
            }
            var i18n = sap.ushell.resources.i18n;
            var disableText = i18n.getText("sp.disable");
            sap.m.MessageBox.confirm(i18n.getText('sp.disablingUserProfiling'), {
                title: sap.ushell.resources.i18n.getText("sp.disableUserProfiling"),
                icon: sap.m.MessageBox.Icon.QUESTION,
                actions: [disableText, sap.m.MessageBox.Action.CANCEL],
                onClose: function(oAction) {
                    if (oAction == sap.m.MessageBox.Action.CANCEL) {
                        oSwitch.setState(true);
                    }
                }
            });
        },

        openMessageBox: function() {
            // depreceated confirmation when reseting query log
            var that = this;
            var i18n = sap.ushell.resources.i18n;
            var clearText = i18n.getText("sp.clear");
            sap.m.MessageBox.confirm(i18n.getText('sp.profileWillBeReset'), {
                title: sap.ushell.resources.i18n.getText("sp.clearCollectedData"),
                icon: sap.m.MessageBox.Icon.QUESTION,
                actions: [clearText, sap.m.MessageBox.Action.CANCEL],
                onClose: function(oAction) {
                    if (oAction == clearText) {
                        that.getModel().resetProfile();
                    }
                }
            });
        }

    });

}());

}; // end of sap/ushell/renderers/fiori2/search/userpref/SearchPrefsDialog.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.userpref.SearchPrefsModel') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.userpref.SearchPrefsModel');
/* global jQuery, sap, window */

// no prefs request when adding entry
// only single sina get server info request in fail case
// mathias: dataType:'text'
(function() {
    "use strict";

    // import modules
    // =======================================================================        
    jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained


    // model class for search preferences view
    // =======================================================================    
    var path = 'sap.ushell.renderers.fiori2.search.userpref.SearchPrefsModel';
    sap.ui.model.json.JSONModel.extend(path, {

        constructor: function(properties) {

            // call super constructor
            var that = this;
            sap.ui.model.json.JSONModel.prototype.constructor.apply(that, []);

            // get sina
            that.sina = sap.ushell.Container.getService("Search").getSina();

            // reset all data
            this.reset();
        },

        personalizationPolicyOptOut: 'Opt-Out',
        personalizationPolicyOptIn: 'Opt-In',
        personalizationPolicyEnforced: 'Enforced',
        personalizationPolicyDisabled: 'Disabled',
        personalizationPolicies: ['Opt-Out', 'Opt-In', 'Enforced', 'Disabled'],

        isBusinessObjSearchConfigured: function() {
            try {
                var config = window['sap-ushell-config'].renderers.fiori2.componentData.config;
                return config.searchBusinessObjects !== 'hidden';
            } catch (e) {
                return true;
            }
        },

        isSearchPrefsActive: function() {

            if (!this.isBusinessObjSearchConfigured()) {
                return jQuery.when(false);
            }

            return this.sina.getSystem().getServerInfo().then(
                function(serverInfo) {
                    // server info ok -> check capabilities
                    serverInfo = serverInfo.rawServerInfo;
                    for (var i = 0; i < serverInfo.Services.length; ++i) {
                        var service = serverInfo.Services[i];
                        if (service.Service === 'PersonalizedSearch') {
                            return jQuery.when(true);
                        }
                    }
                    return jQuery.when(false);
                },
                function() {
                    // server info failed
                    return jQuery.when(false);
                });
        },

        reset: function() {
            this.initializedDeferred = null;
            this.setData({
                searchPrefsActive: false,
                sessionUserActive: false,
                personalizationPolicy: 'Enforced'
            });
        },

        asyncInit: function() {

            // return existing deferred
            var that = this;
            if (that.initializedDeferred) {
                return that.initializedDeferred;
            }

            // load preferences from server
            that.initializedDeferred = that.isSearchPrefsActive().then(function(isSearchPrefsActive) {
                that.setProperty('/searchPrefsActive', isSearchPrefsActive);
                if (!isSearchPrefsActive) {
                    return jQuery.when(true);
                }
                return that.loadPreferences();
            });

            return that.initializedDeferred;
        },

        loadPreferences: function() {
            var that = this;
            that.searchConfiguration = that.sina.getSearchConfiguration();
            return that.searchConfiguration.load().then(function(configuration) {
                var sessionUserActive = configuration.Data.PersonalizedSearch.SessionUserActive;
                that.setProperty('/sessionUserActive', sessionUserActive);
                var personalizationPolicy = configuration.Data.PersonalizedSearch.PersonalizationPolicy;
                if (that.personalizationPolicies.indexOf(personalizationPolicy) < 0) {
                    personalizationPolicy = this.personalizationPolicyDisabled;

                }
                that.setProperty('/personalizationPolicy', personalizationPolicy);
            });
        },

        savePreferences: function() {

            // do not save depending on personalization policy
            var personalizationPolicy = this.getProperty('/personalizationPolicy');
            var searchPrefsActive = this.getProperty('/searchPrefsActive');
            if (!searchPrefsActive || personalizationPolicy === this.personalizationPolicyEnforced ||
                personalizationPolicy === this.personalizationPolicyDisabled) {
                return jQuery.when(true);
            }

            // save
            var that = this;
            var data = {
                "SearchConfiguration": {
                    "Action": "Update",
                    "Data": {
                        "PersonalizedSearch": {
                            "SessionUserActive": that.getProperty('/sessionUserActive')
                        }
                    }
                }
            };
            return that.searchConfiguration.save(data);

        },

        resetProfile: function() {
            return this.sina.emptyUserHistory();
        }

    });

})();

}; // end of sap/ushell/renderers/fiori2/search/userpref/SearchPrefsModel.js
if ( !jQuery.sap.isDeclared('sap.ushell.resources') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview This file handles the resource bundles.
 */

(function () {
    "use strict";
    /*global jQuery, sap */

    // ensure that sap.ushell exists
    jQuery.sap.declare("sap.ushell.resources");

    jQuery.sap.require('sap.ui.model.resource.ResourceModel'); // unlisted dependency retained


    sap.ushell.resources = { };

    sap.ushell.resources.getTranslationModel = function (sLocale) {
     // create translation resource model
        var oTranslationModel = new sap.ui.model.resource.ResourceModel({
            bundleUrl : jQuery.sap.getModulePath(
                "sap.ushell.renderers.fiori2.resources.resources",
                ".properties"
            ),
            bundleLocale : sLocale
        });
        return oTranslationModel;
    };

    sap.ushell.resources.i18nModel = sap.ushell.resources.getTranslationModel(sap.ui.getCore().getConfiguration().getLanguage());
    sap.ushell.resources.i18n = sap.ushell.resources.i18nModel.getResourceBundle();
}());
}; // end of sap/ushell/resources.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.AppConfiguration') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, window */
    jQuery.sap.declare("sap.ushell.services.AppConfiguration");
    /**
     * AppConfiguration service.
     *
     * @private
     */
    function AppConfiguration() {
        var oMetadata = {},
            oCurrentApplication = null,
            aIdsOfAddedButtons = [];


        /**
         * Returns the current application.
         * 
         * 
         * @returns {object}
         *   a copy of the metadata object
         *
         * @private
         */
        this.getCurrentAppliction = function (oApplication) {
            return oCurrentApplication;
        };
        /**
         * Returns the current metadata.
         * 
         * {
         *      title: {string}
         *      library: {string}
         *      version: {string}
         *      fullWidth: {boolean}
         * }  
         * 
         * @returns {object}
         *   a copy of the metadata object
         *
         * @private
         */
        this.getMetadata = function (oApplication) {
            if (!oApplication) {
                oApplication = oCurrentApplication;
            }

            if (oApplication) {
                var sKey = this.getApplicationUrl(oApplication);
                if (!(oMetadata.hasOwnProperty(sKey))) {
                    this.addMetadata(oApplication);
                }
                // If metadata was not created - create it now as an empty object
                if (!oMetadata[sKey]) {
                    oMetadata[sKey] = {};
                }
                // If title doesn't exist in the metadata - try to get it from the result of navTergetResolution, 
                //  or use the default application title 
                if (!oMetadata[sKey].title) {
                    oMetadata[sKey].title = oApplication.text || sap.ushell.resources.i18n.getText("default_app_title");
                }
                return oMetadata[sKey];
            }
            return {};
        };

        /**
         * @private
         */
        this.setCurrentApplication = function (oApplication) {
            oCurrentApplication = oApplication;
        };

        /*
         * Sets the hiding of the shell header.
         * It is meant to be used by applications that want to modify the default behavior of the shell header.
         *
         * @param {boolean} boolean value for setting enable/disable header hiding
         */
        this.setHeaderHiding = function (bEnabled) {
            var shell =  sap.ui.getCore().byId('shell');
            if (shell) {
                // only for smart phone
                if (sap.ui.Device.system.phone) {
                    shell.setHeaderHiding(bEnabled);
                } else {
                    jQuery.sap.log.warning("Application configuration could not be trigger setHeaderHiding on Shell as the running devic is not a phone");
                }
            } else {
                jQuery.sap.log.warning("Application configuration could not be trigger setHeaderHiding on Shell");
            }
        };

        /*
         * Adds buttons to the action sheet in the shell header.
         * This function always overrides the already existing application settings buttons with the new buttons.
         * It is meant to be used by applications that want to add their own settings button to the shell header.
         * 
         * @param {array} array of sap.m.Button controls
         * */
        this.addApplicationSettingsButtons = function (aButtons) {
            var i,
                aIds = [];

            for (i = 0; i < aButtons.length; i++) {
                var oCurrentButton = aButtons[i];
                aIds.push(oCurrentButton.getId());
                oCurrentButton.setIcon(oCurrentButton.getIcon() || sap.ui.core.IconPool.getIconURI('action-settings'));
            }
            if (sap.ushell.Container && sap.ushell.Container.getRenderer("fiori2")) {
                if (aIdsOfAddedButtons.length) {
                    //remove buttons that were added earlier
                    sap.ushell.Container.getRenderer("fiori2").hideActionButton(aIdsOfAddedButtons, true);
                }
                aIdsOfAddedButtons = aIds;
                sap.ushell.Container.getRenderer("fiori2").showActionButton(aIds, true, undefined, true);
            }
        };

        /**
         * Sets the title of the browser tabSets the title of the browser tab.
         *
         * @param {string} sTitle
         */
        this.setWindowTitle = function (sTitle) {
            window.document.title = sTitle;
        };

        /**
         * Sets the icons of the browser.
         *
         * @param oIconsProperties
         * An object holding icon URLs
         */
        this.setIcons = function (oIconsProperties) {
            jQuery.sap.setIcons(oIconsProperties);
        };

        /**
         * Get a settings control to display about dialog and system infos.
         *
         * @returns {sap.ushell.ui.footerbar.SettingsButton}
         *      a settings control which can be embedded where ever its needed
         * @private
         */
        this.getSettingsControl = function () {
            jQuery.sap.require("sap.ushell.ui.footerbar.SettingsButton");
            return new sap.ushell.ui.footerbar.SettingsButton();
        };

        /**
         * @private
         */
        this.getApplicationName = function (oApplication) {
            /*jslint regexp: true */
            var aMatches,
                sAdditionalInformation = (oApplication && oApplication.additionalInformation) || null;

            if (sAdditionalInformation) {
                // SAPUI5.Component=<fully-qualified-component-name>
                aMatches = /^SAPUI5\.Component=(.+)$/i.exec(sAdditionalInformation);
                if (aMatches) {
                    // determine namespace, view name, and view type
                    return aMatches[1];
                }
            }
            return null;
        };
        /**
         * @private
         */
        this.getApplicationUrl = function (oApplication) {
            var sUrl = (oApplication && oApplication.url) || null,
                sSegmentToDetermineWebGUITransaction = "P_TCODE",
                iIndexOfQuestionmark;

            if (sUrl) {

                if (oApplication.applicationType === "NWBC" && sUrl.indexOf(sSegmentToDetermineWebGUITransaction)) {
                    //in case it is a WebGUI transaction then return the whole URL of the application
                    return sUrl;
                }
                iIndexOfQuestionmark = sUrl.indexOf("?");
                if (iIndexOfQuestionmark >= 0) {
                    // pass GET parameters of URL via component data
                    // as member startupParameters  ( to allow blending with other oComponentData usage, e.g.
                    // extensibility use case
                    sUrl = sUrl.slice(0, iIndexOfQuestionmark);
                }
                if (sUrl.slice(-1) !== '/') {
                    sUrl += '/'; // ensure URL ends with a slash
                }
            }
            return sUrl;
        };

        /**
         * Reads a property value from the configuration
         *    
         * Value translation is required if the configuration includes another property whose key is composed of the original key + the string "Resource".
         * e.g. For translating the value of the property "title" - there's another configuration property: "titleResource": "TITLE_KEY".
         * The value (e.g. "TITLE_KEY") is the translation key in the resource bundle
         */
        this.getPropertyValueFromConfig = function (oConfig, sPropertyKey, oResourceBundle) {
            var oValue;

            if (oResourceBundle && oConfig.hasOwnProperty(sPropertyKey + "Resource")) {
                oValue = oResourceBundle.getText(oConfig[sPropertyKey + "Resource"]);
            } else if (oConfig.hasOwnProperty(sPropertyKey)) {
                oValue = oConfig[sPropertyKey];
            }

            return oValue;
        };

        /**
         * Reads a property value from the manifest
         */
        this.getPropertyValueFromManifest = function (oLocalMetadata, oProperties, sPropertyKey) {
            var sManifestEntryKey = oProperties[sPropertyKey].manifestEntryKey,
                sManifestPropertyPath = oProperties[sPropertyKey].path,
                oManifestEntry = oLocalMetadata.getManifestEntry(sManifestEntryKey);

            return jQuery.sap.getObject(sManifestPropertyPath, undefined, oManifestEntry);
        };

        /**
         * Adds the application metadata to oMetadata object.
         * Application metadata is taken from the manifest/descriptor (1st priority), if exists, and from the component configuration (2nd priority).
         *
         * @param oApplication Includes data for launching the application, such as applicationType, url, etc..
         * @private
         */
        this.addMetadata = function (oApplication) {
            try {
                var sComponentName = this.getApplicationName(oApplication),
                    sUrl = this.getApplicationUrl(oApplication),
                    oComponent,
                    oLocalMetadata,
                    oConfig,
                    // Hash object that maps application metadata property (i.e. property name) to its corresponding entry and path 
                    //  in the application descriptor (i.e. manifest file), if exists 
                    oProperties = {
                        "fullWidth" :              {"manifestEntryKey" : "sap.fiori", "path": "fullWidth"},
                        "hideLightBackground" :    {"manifestEntryKey" : "sap.fiori", "path": "hideLightBackground"},
                        "title"   :                {"manifestEntryKey" : "sap.app", "path": "title"},
                        "icon"    :                {"manifestEntryKey" : "sap.ui", "path": "icons.icon"},
                        "favIcon" :                {"manifestEntryKey" : "sap.ui", "path": "icons.favIcon"},
                        "homeScreenIconPhone"    : {"manifestEntryKey" : "sap.ui", "path": "icons.phone"},
                        "homeScreenIconPhone@2"  : {"manifestEntryKey" : "sap.ui", "path": "icons.phone@2"},
                        "homeScreenIconTablet"   : {"manifestEntryKey" : "sap.ui", "path": "icons.tablet"},
                        "homeScreenIconTablet@2" : {"manifestEntryKey" : "sap.ui", "path": "icons.tablet@2"},
                        "startupImage320x460"    : {"manifestEntryKey" : "sap.ui", "path": "icons.startupImage640x920"},
                        "startupImage640x920"    : {"manifestEntryKey" : "sap.ui", "path": "icons.startupImage640x920"},
                        "startupImage640x1096"   : {"manifestEntryKey" : "sap.ui", "path": "icons.startupImage640x1096"},
                        "startupImage768x1004"   : {"manifestEntryKey" : "sap.ui", "path": "icons.startupImage768x1004"},
                        "startupImage748x1024"   : {"manifestEntryKey" : "sap.ui", "path": "icons.startupImage748x1024"},
                        "startupImage1536x2008"  : {"manifestEntryKey" : "sap.ui", "path": "icons.startupImage1536x2008"},
                        "startupImage1496x2048"  : {"manifestEntryKey" : "sap.ui", "path": "icons.startupImage1496x2048"},
                        "compactContentDensity"  : {"manifestEntryKey" : "sap.ui5", "path": "contentDensities.compact"},
                        "cozyContentDensity"  : {"manifestEntryKey" : "sap.ui5", "path": "contentDensities.cozy"}
                    },
                    potentiallyRelativeUrls,
                    sComponentUrl,
                    isUrlRelative,
                    bManifestExists,
                    sPropertyKey,
                    sConfigResourceBundleUrl,
                    oResourceBundle;

                if (sUrl && !(oMetadata.hasOwnProperty(sUrl))) {
                    oMetadata[sUrl] = {};
                    oComponent = sap.ui.component.load({ url : sUrl, name : sComponentName });
                    oLocalMetadata = oComponent.getMetadata();
                    if (oLocalMetadata) {

                        oConfig = oLocalMetadata.getConfig();
                        bManifestExists = (oLocalMetadata.getManifest() !== undefined);

                        // If configuration exists and no resource bundle was created from the manifest
                        if (oConfig) {
                            sConfigResourceBundleUrl = oConfig.resourceBundle || "";
                            if (sConfigResourceBundleUrl) {
                                if (sConfigResourceBundleUrl.slice(0, 1) !== '/') {
                                    sConfigResourceBundleUrl = sUrl + sConfigResourceBundleUrl;
                                }
                                oResourceBundle = jQuery.sap.resources({
                                    url: sConfigResourceBundleUrl,
                                    locale : sap.ui.getCore().getConfiguration().getLanguage()
                                });
                            }
                        }

                        // Loop over all property names, and for each one - get the value from the manifest or from the application configuration 
                        for (sPropertyKey in oProperties) {
                            if (oProperties.hasOwnProperty(sPropertyKey)) {
                                if (bManifestExists) {
                                    // Get property value from the manifest
                                    oMetadata[sUrl][sPropertyKey] = this.getPropertyValueFromManifest(oLocalMetadata, oProperties, sPropertyKey);
                                }

                                // If application configuration exists  and the property value was not found in the manifest - 
                                // look for it in the configuration
                                if (oConfig  && oMetadata[sUrl][sPropertyKey] === undefined) {
                                    // Get property value from the configuration
                                    oMetadata[sUrl][sPropertyKey] = this.getPropertyValueFromConfig(oConfig, sPropertyKey, oResourceBundle);
                                }
                            }
                        }
                    }
                }
                oMetadata[sUrl].version = oLocalMetadata.getVersion();
                oMetadata[sUrl].libraryName = oLocalMetadata.getLibraryName();
                /*
                 * Special behavior for relative URLs: 
                 * Relative URLs are considered relative to the folder containing the Component.js,
                 * which requires adjustments here. Otherwise the browser would interpret them as
                 * relative to the location of the HTML file, which might be different and also
                 * hard to guess for app developers.
                 */
                potentiallyRelativeUrls = [
                    "favIcon",
                    "homeScreenIconPhone",
                    "homeScreenIconPhone@2",
                    "homeScreenIconTablet",
                    "homeScreenIconTablet@2",
                    "startupImage320x460",
                    "startupImage640x920",
                    "startupImage640x1096",
                    "startupImage768x1004",
                    "startupImage748x1024",
                    "startupImage1536x2008",
                    "startupImage1496x2048"
                ];

                sComponentUrl = (sUrl && sUrl[sUrl.length - 1] === '/') ?
                        sUrl.substring(0, sUrl.length - 1) : sUrl;

                isUrlRelative = function (sUrl) {
                    /*jslint regexp : true*/
                    if (sUrl.match(/^https?:\/\/.*/)) {
                        return false;
                    }
                    return sUrl && sUrl[0] !== '/';
                };

                potentiallyRelativeUrls.forEach(function (sPropName) {
                    var sOrigValue = oMetadata[sUrl][sPropName],
                        sFinalValue = null;
                    // Some URL properties might not be defined.
                    if (sOrigValue) {
                        sFinalValue = isUrlRelative(sOrigValue) ?
                                sComponentUrl + "/" + sOrigValue : sOrigValue;
                    }
                    oMetadata[sUrl][sPropName] = sFinalValue;
                });
            } catch (err) {
                jQuery.sap.log.warning("Application configuration could not be parsed");
            }
        };

    } // Metadata

    /**
     * The Unified Shell App configuration service as a singleton object. 
     * 
     * @class The unified shell's AppConfiguration service.
     * 
     * @name sap.ushell.services.AppConfiguration
     * @since 1.15.0
     * @private
     */
    sap.ushell.services.AppConfiguration = new AppConfiguration();

}());

}; // end of sap/ushell/services/AppConfiguration.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.Bookmark') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview The Unified Shell's bookmark service, which allows you to create shortcuts on the
 * user's home page.
 *
 * @version 1.32.6
 */
(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.services.Bookmark");

    /**
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.Container.getService("Bookmark")</code>.
     * Constructs a new instance of the bookmark service.
     *
     * @class The unified shell's bookmark service, which allows you to create shortcuts on the
     * user's home page.
     *
     * @constructor
     * @see sap.ushell.services.Container#getService
     * @since 1.15.0
     * @public
     */
    sap.ushell.services.Bookmark = function () {
        var that = this,
            oLaunchPageService = sap.ushell.Container.getService("LaunchPage");

        /**
         * Returns <code>true</code> if the given catalog data matches a remote catalog. This
         * requires that the LaunchPageAdapter supports getCatalogData().
         * @param {object} oCatalog
         *   a catalog as given from LaunchPage service
         * @param {object} oRemoteCatalogData
         *   the description of the catalog from a remote system
         * @param {string} oRemoteCatalogData.remoteId
         *   the catalog ID in the remote system
         * @param {string} oRemoteCatalogData.baseUrl
         *   the base URL of the catalog in the remote system
         */
        sap.ushell.utils.testPublishAt(that);
        function isMatchingRemoteCatalog(oCatalog, oRemoteCatalogData) {
            var oCatalogData = oLaunchPageService.getCatalogData(oCatalog);
            // systemAlias is not considered yet, which might lead to multiple matches
            return oCatalogData.remoteId === oRemoteCatalogData.remoteId
                && oCatalogData.baseUrl.replace(/\/$/, "")
                    === oRemoteCatalogData.baseUrl.replace(/\/$/, ""); // ignore trailing slashes
        }

        /**
         * Adds a bookmark to the user's home page.
         *
         * @param {object} oParameters
         *   Bookmark parameters. In addition to title and URL, a bookmark might allow additional
         *   settings, such as an icon or a subtitle. Which settings are supported depends
         *   on the environment in which the application is running. Unsupported parameters will be
         *   ignored.
         * @param {string} oParameters.title
         *   The title of the bookmark.
         * @param {string} oParameters.url
         *   The URL of the bookmark. If the target application shall run in the Shell the URL has
         *   to be in the format <code>"#SO-Action~Context?P1=a&P2=x&/route?RPV=1"</code>
         * @param {string} [oParameters.icon]
         *   The icon URL of the bookmark (e.g. <code>"sap-icon://home"</code>).
         * @param {string} [oParameters.info]
         *   The information text of the bookmark.
         * @param {string} [oParameters.subtitle]
         *   The subtitle of the bookmark.
         * @param {string} [oParameters.serviceUrl]
         *   The URL (a string or a JS function) to a REST or OData service that provides some dynamic information for the
         *   bookmark.
         * @param {string} [oParameters.serviceRefreshInterval]
         *   The refresh interval for the <code>serviceUrl</code> in seconds.
         * @param {string} [oParameters.numberUnit]
         *   The unit for the number retrieved from <code>serviceUrl</code>.
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which informs about success or failure
         *   of this asynchronous operation. In case of success, no further details are passed.
         *   In case of failure, an error message is passed.
         *
         * @see sap.ushell.services.URLParsing#getShellHash
         * @since 1.15.0
         * @public
         */
        this.addBookmark = function (oParameters, oGroup) {
            var oPromise = oLaunchPageService.addBookmark(oParameters, oGroup);
            oPromise.done(function (oTile) {
                var oData = {
                    tile: oTile,
                    group: oGroup
                };
                sap.ui.getCore().getEventBus().publish("sap.ushell.services.Bookmark", "bookmarkTileAdded", oData);
            });
            return oPromise;
        };

        /**
         * Adds the tile with the given id <code>sCatalogTileId</code> from the catalog with id
         * <code>sCatalogId</code> to the given group.
         * @param {jQuery.Deferred} oDeferred
         *   a deferred object to be resolved/rejected when finished. In case of success, no
         *   further details are passed. In case of failure, an error message is passed.
         * @param {string} sCatalogTileId
         *   the ID of the tile within the catalog
         * @param {object} oCatalog
         *   the catalog containing the catalog tile
         * @param {string} [sGroupId]
         *   The id of the group. If not given, the tile is added to the default group
         * @returns {object}
         *   <code>oDeferred</code>
         */
        sap.ushell.utils.testPublishAt(that);
        function doAddCatalogTileToGroup(oDeferred, sCatalogTileId, oCatalog, sGroupId) {
            var sError,
                fnFailure = oDeferred.reject.bind(oDeferred);

            function addToGroup(oGroup) {
                oLaunchPageService.getCatalogTiles(oCatalog)
                    .fail(fnFailure)
                    .done(function (aCatalogTiles) {
                        var sGroupId = oLaunchPageService.getGroupId(oGroup),
                            bTileFound = aCatalogTiles.some(function (oCatalogTile) {
                            if (oLaunchPageService.getCatalogTileId(oCatalogTile) === sCatalogTileId) {
                                oLaunchPageService.addTile(oCatalogTile, oGroup)
                                    .fail(fnFailure)
                                    .done(function () { // ignore argument oTile!
                                        oDeferred.resolve();
                                        sap.ui.getCore().getEventBus().publish("sap.ushell.services.Bookmark", "catalogTileAdded", sGroupId);
                                    });
                                return true;
                            }
                        });
                        if (!bTileFound) {
                            sError = "No tile '" + sCatalogTileId + "' in catalog '"
                                + oLaunchPageService.getCatalogId(oCatalog) + "'";
                            jQuery.sap.log.error(sError, null, "sap.ushell.services.Bookmark");
                            fnFailure(sError);
                        }
                    });
            }

            if (sGroupId) {
                oLaunchPageService.getGroups()
                    .fail(fnFailure)
                    .done(function (aGroups) {
                        var bGroupFound = aGroups.some(function (oGroup) {
                            if (oLaunchPageService.getGroupId(oGroup) === sGroupId) {
                                addToGroup(oGroup);
                                return true;
                            }
                        });
                        if (!bGroupFound) {
                            // TODO: Consider adding the tile to the default group. This would
                            // enable the user to add tiles if no valid group ID is available.
                            // Take into account how the consumer app requests the group ids.
                            sError = "Group '" + sGroupId + "' is unknown";
                            jQuery.sap.log.error(sError, null, "sap.ushell.services.Bookmark");
                            fnFailure(sError);
                        }
                    });
            } else {
                oLaunchPageService.getDefaultGroup()
                    .fail(fnFailure)
                    .done(addToGroup);
            }
            return oDeferred.promise();
        }

        /**
         * Adds the catalog tile with the given ID to given group. The catalog tile is looked up in
         * the legacy SAP HANA catalog unless data to look up a remote catalog is provided.
         *
         * @param {string} sCatalogTileId
         *   The ID of the tile within the catalog
         * @param {string} [sGroupId]
         *   The id of the group. If not given, the tile is added to the default group
         * @param {object} [oCatalogData]
         *   The data to identify the catalog containing the tile with the given ID
         * @param {string} oCatalogData.baseUrl
         *   The remote catalog's base URL such as
         *   "/sap/hba/apps/kpi/s/odata/hana_chip_catalog.xsodata/"
         * @param {string} oCatalogData.remoteId
         *   The remote catalog's id on the remote system such as "HANA_CATALOG"
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which informs about success or failure
         *   of this asynchronous operation. In case of success, no further details are passed.
         *   In case of failure, an error message is passed.
         *
         * @since 1.21.2
         * @public
         */
        this.addCatalogTileToGroup = function (sCatalogTileId, sGroupId, oCatalogData) {
            var oDeferred = new jQuery.Deferred(),
                sError,
                fnFailure = oDeferred.reject.bind(oDeferred),
                fnMatcher,
                sLegacyHanaCatalogId = "X-SAP-UI2-HANA:hana?remoteId=HANA_CATALOG";

            function isLegacyHanaCatalog(oCatalog) {
                // this is ABAP specific but should not harm other platforms
                return oLaunchPageService.getCatalogId(oCatalog) === sLegacyHanaCatalogId;
            }

            fnMatcher = oCatalogData ? isMatchingRemoteCatalog : isLegacyHanaCatalog;
            oCatalogData = oCatalogData || {id: sLegacyHanaCatalogId};
            // TODO first determine the catalog, then call onCatalogTileAdded incl. its ID
            oLaunchPageService.onCatalogTileAdded(sCatalogTileId);
            oLaunchPageService.getCatalogs()
                .fail(fnFailure)
                .done(function (aCatalogs) {
                    var oSourceCatalog;
                    aCatalogs.forEach(function (oCatalog) {
                        if (fnMatcher(oCatalog, oCatalogData)) {
                            if (!oSourceCatalog) {
                                oSourceCatalog = oCatalog;
                            } else {
                                // Note: We use the first match. If more than one catalog matches
                                // this might be the wrong one, resulting in a "missing tile"
                                // error. However we log the multiple catalog match before.
                                jQuery.sap.log.warning("More than one matching catalog: "
                                    + JSON.stringify(oCatalogData), null,
                                    "sap.ushell.services.Bookmark");
                            }
                        }
                    });
                    if (oSourceCatalog) {
                        doAddCatalogTileToGroup(oDeferred, sCatalogTileId, oSourceCatalog,
                            sGroupId);
                    } else {
                        sError = "No matching catalog found: " + JSON.stringify(oCatalogData);
                        jQuery.sap.log.error(sError, null, "sap.ushell.services.Bookmark");
                        oDeferred.reject(sError);
                    }
                });
            return oDeferred.promise();
        };

        /**
         * Counts <b>all</b> bookmarks pointing to the given URL from all of the user's pages. You
         * can use this method to check if a bookmark already exists.
         * <p>
         * This is a potentially asynchronous operation in case the user's pages have not yet been
         * loaded completely!
         *
         * @param {string} sUrl
         *   The URL of the bookmarks to be counted, exactly as specified to {@link #addBookmark}.
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which informs about success or failure
         *   of this asynchronous operation. In case of success, the count of existing bookmarks
         *   is provided (which might be zero). In case of failure, an error message is passed.
         *
         * @see #addBookmark
         * @since 1.17.1
         * @public
         */
        this.countBookmarks = function (sUrl) {
            return oLaunchPageService.countBookmarks(sUrl);
        };

        /**
         * Deletes <b>all</b> bookmarks pointing to the given URL from all of the user's pages.
         *
         * @param {string} sUrl
         *   The URL of the bookmarks to be deleted, exactly as specified to {@link #addBookmark}.
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which informs about success or
         *   failure of this asynchronous operation. In case of success, the number of deleted
         *   bookmarks is provided (which might be zero). In case of failure, an error message is
         *   passed.
         *
         * @see #addBookmark
         * @see #countBookmarks
         * @since 1.17.1
         * @public
         */
        this.deleteBookmarks = function (sUrl) {
            var oPromise = oLaunchPageService.deleteBookmarks(sUrl);

            oPromise.done(function () {
                sap.ui.getCore().getEventBus().publish("sap.ushell.services.Bookmark", "bookmarkTileDeleted", sUrl);
            });
            return oPromise;
        };

        /**
         * Updates <b>all</b> bookmarks pointing to the given URL on all of the user's pages
         * with the given new parameters. Parameters which are omitted are not changed in the
         * existing bookmarks.
         *
         * @param {string} sUrl
         *   The URL of the bookmarks to be updated, exactly as specified to {@link #addBookmark}.
         *   In case you need to update the URL itself, pass the old one here and the new one as
         *   <code>oParameters.url</code>!
         * @param {object} oParameters
         *   The bookmark parameters as documented in {@link #addBookmark}.
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which informs about success or
         *   failure of this asynchronous operation.  In case of success, the number of updated
         *   bookmarks is provided (which might be zero). In case of failure, an error message is
         *   passed.
         *
         * @see #addBookmark
         * @see #countBookmarks
         * @see #deleteBookmarks
         * @since 1.17.1
         * @public
         */
        this.updateBookmarks = function (sUrl, oParameters) {
            return oLaunchPageService.updateBookmarks(sUrl, oParameters);
        };
    };
    sap.ushell.services.Bookmark.hasNoAdapter = true;
}());

}; // end of sap/ushell/services/Bookmark.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.Container') ) {
  jQuery.sap.declare('sap.ushell.services.Container');
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview The Unified Shell's container which manages renderers, services, and adapters.
 *
 * @version 1.32.6
 */
/**
 * @namespace Namespace for Unified Shell.
 *
 * @name sap.ushell
 * @see sap.ushell.adapters
 * @see sap.ushell.renderers
 * @see sap.ushell.services
 * @since 1.15.0
 * @public
 */
/**
 * @namespace Default namespace for Unified Shell adapters. Note that there should be subordinate
 * namespaces per platform, for example <code>sap.ushell.adapters.abap</code> or
 * <code>sap.ushell.adapters.demo</code>.
 *
 * @name sap.ushell.adapters
 * @see sap.ushell.adapters.abap
 * @see sap.ushell.adapters.demo
 * @since 1.15.0
 * @public
 */
/**
 * @namespace Default namespace for Unified Shell renderers. Note that there should be subordinate
 * namespaces per renderer, for example <code>sap.ushell.renderers.standard</code>.
 *
 * @name sap.ushell.renderers
 * @see sap.ushell.renderers.standard
 * @since 1.15.0
 * @public
 */
/**
 * @namespace Default namespace for Unified Shell services. They can usually be placed directly
 * into this namespace, for example <code>sap.ushell.services.Container</code>.
 *
 * @name sap.ushell.services
 * @see sap.ushell.services.Container
 * @since 1.15.0
 * @public
 */
(function () {
    "use strict";
    /*global close, document, jQuery, localStorage, OData, sap, setTimeout, window */

    var S_COMPONENT_NAME = "sap.ushell.services.Container",
        S_DIRTY_STATE_PREFIX = "sap.ushell.Container.dirtyState.",
        S_PLUGIN_TYPE_PARAMETER = "sap-ushell-plugin-type",
        S_USER_DEFAULT_PARAMETER_VALUE = "UserDefaults",
        // The configuration as read from window["sap-ushell-config"]
        oConfig,
        // Map with platform specific packages for the service adapters. This map is passed in
        // bootstrap and is valid for the given logon platform
        mPlatformPackages,
        oUserDefaultPluginsDeferred,
        sFirstInitStack;   // keep stack trace of first initialization call for debugging purposes

    jQuery.sap.declare(S_COMPONENT_NAME);

    if ( !jQuery.sap.isDeclared('sap.ushell.utils') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview This file contains miscellaneous utility functions.
 */

(function () {
    "use strict";
    /*global dispatchEvent, document, jQuery, URI, localStorage, sap, clearTimeout, setTimeout */

    // ensure that sap.ushell exists
    jQuery.sap.declare("sap.ushell.utils");

    sap.ushell.utils = {};
    var visibilityCalcTimer;

    /**
     * Creates an <code>Error</code> object and logs the error message immediately.
     * Class representing an error that is written to the log.
     *
     * @param {string} sMessage
     *   the error message
     * @param {string} [sComponent]
     *   the error component to log
     * @class
     * @constructor
     * @since 1.15.0
     */
    sap.ushell.utils.Error = function (sMessage, sComponent) {
        this.name = "sap.ushell.utils.Error";
        this.message = sMessage;
        jQuery.sap.log.error(sMessage, null, sComponent);
    };

    sap.ushell.utils.Error.prototype = new Error();

    /**
     * Wrapper for localStorage.setItem() including exception handling
     * caused by exceeding storage quota limits
     * or exception is always thrown (safari private browsing mode)
     *
     * @param {string} sKey
     *   the key for the storage entry
     * @param {string} sValue
     *   the value for the storage entry
     * @param {boolean} [bLocalEvent=false]
     *   when true the storage event is also fired for the source window
     *
     * @since 1.21.2
     * @private
     */
    sap.ushell.utils.localStorageSetItem = function (sKey, sValue, bLocalEvent) {
        var oEvent;
        try {
            localStorage.setItem(sKey, sValue);
            if (bLocalEvent) {
                oEvent = document.createEvent("StorageEvent");
                // Events are fired only if setItem works
                // If we want to decouple this (to have eventing to the same window)
                // we have to provide a wrapper for localStorage.getItem and -removeItem() also
                oEvent.initStorageEvent("storage", false, false,
                        sKey, "", sValue, "", localStorage);
                dispatchEvent(oEvent);
            }
        } catch (e) {
            jQuery.sap.log.warning("Error calling localStorage.setItem(): " + e, null,
                "sap.ushell.utils");
        }
    };

    /**
     * given a link tag ( a ) or a window object, calculate the origin (protocol, host, port)
     * especially for cases where the .origin property is not present on the DOM Member
     * (IE11)
     * @param {object} oDomObject a location bearig object, e.g. a link-tag DOMObject or a window
     * @returns {string} a string containing protocol :// host : port (if present),
     *  e.g. "http://www.sap.com:8080" or "https://uefa.fifa.com"
     */
    sap.ushell.utils.calculateOrigin = function (oDomObject) {
        var oURI;
        if (oDomObject.origin) {
            return oDomObject.origin;
        }
        if (oDomObject.protocol && oDomObject.hostname) {
            return oDomObject.protocol + "//" + oDomObject.hostname + (oDomObject.port ? ':' + oDomObject.port : '');
        }
        if (oDomObject.href) {
            oURI = new URI(oDomObject.href);
            //beware, URI treats : not as part of the protocol
            return oURI.protocol() + "://" + oURI.hostname() + (oURI.port() ? ':' + oURI.port() : '');
        }
    };

    /**
     * Detect whether the browser can open WebGui applications natively.
     *
     * This is expected to happen from NWBC Version 6 onward.
     *
     * NWBC exposes a feature bit vector via the getNwbcFeatureBits method of
     * the private epcm object.  This is expected to be a
     * string in hex format representing 4 bits, where the least significant
     * bit represents native navigation capability. For example: "B" = 1011,
     * last bit is 1, therefore native navigation capability is enabled.
     *
     * @return {boolean}
     *     whether the browser can open SapGui applications natively
     */
    sap.ushell.utils.hasNativeNavigationCapability = function() {
        var sFeaturesHex = "0",
            oPrivateEpcm;

        // Try to get the Feature version number
        if (window.external && window.external && typeof window.external.getPrivateEpcm !== "undefined") {
            oPrivateEpcm = window.external.getPrivateEpcm();

            try {
                sFeaturesHex = oPrivateEpcm.getNwbcFeatureBits();
                jQuery.sap.log.debug("Detected epcm getNwbcFeatureBits returned feature bits: " + sFeaturesHex);
            } catch(e) {
                jQuery.sap.log.error(
                    "failed to get feature bit vector via call getNwbcFeatureBits on private epcm object",
                    e.stack,
                    "sap.ushell.utils"
                );
            }
        }

        return (parseInt(sFeaturesHex, 16) & 1) > 0;
    };

    /**
     * Determine whether the input oResolvedNavigationTarget represents a
     * WebGui application that can be navigated natively by the browser.
     *
     * @param {object} oResolvedNavigationTarget the resolution result at least properties
     *  applicationType
     * @returns {boolean}
     *      true iff the resolution result represents a response which is to be treated by the Fiori Desktop client
     * @private
     */
    sap.ushell.utils.isNativeWebGuiNavigation = function (oResolvedNavigationTarget) {
        if (this.hasNativeNavigationCapability() && oResolvedNavigationTarget && oResolvedNavigationTarget.applicationType === "TR") {
            return true;
        }
        return false;
    };

    /**
     * A mapping from arbitrary string(!) keys (including "get" or "hasOwnProperty") to
     * values of any type.
     * Creates an empty map.
     * @class
     * @since 1.15.0
     */
    sap.ushell.utils.Map = function () {
        this.entries = {};
    };

    /**
     * Associates the specified value with the specified key in this map. If the map previously
     * contained a mapping for the key, the old value is replaced by the specified value. Returns
     * the old value. Note: It might be a good idea to assert that the old value is
     * <code>undefined</code> in case you expect your keys to be unique.
     *
     * @param {string} sKey
     *   key with which the specified value is to be associated
     * @param {any} vValue
     *   value to be associated with the specified key
     * @returns {any}
     *   the old value
     * @since 1.15.0
     */
    sap.ushell.utils.Map.prototype.put = function (sKey, vValue) {
        var vOldValue = this.get(sKey);
        this.entries[sKey] = vValue;
        return vOldValue;
    };

    /**
     * Returns <tt>true</tt> if this map contains a mapping for the specified key.
     *
     * @param {string} sKey
     *   key whose presence in this map is to be tested
     * @returns {boolean}
     *   <tt>true</tt> if this map contains a mapping for the specified key
     * @since 1.15.0
     */
    sap.ushell.utils.Map.prototype.containsKey = function (sKey) {
        if (typeof sKey !== "string") {
            throw new sap.ushell.utils.Error("Not a string key: " + sKey, "sap.ushell.utils.Map");
        }
        return Object.prototype.hasOwnProperty.call(this.entries, sKey);
    };

    /**
     * Returns the value to which the specified key is mapped, or <code>undefined</code> if this map
     * contains no mapping for the key.
     * @param {string} sKey
     *   the key whose associated value is to be returned
     * @returns {any}
     *   the value to which the specified key is mapped, or <code>undefined</code> if this map
     *   contains no mapping for the key
     * @since 1.15.0
     */
    sap.ushell.utils.Map.prototype.get = function (sKey) {
        if (this.containsKey(sKey)) {
            return this.entries[sKey];
        }
        //return undefined;
    };

    /**
     * Returns an array of this map's keys. This array is a snapshot of the map; concurrent
     * modifications of the map while iterating do not influence the sequence.
     * @returns {string[]}
     *   this map's keys
     * @since 1.15.0
     */
    sap.ushell.utils.Map.prototype.keys = function () {
        return Object.keys(this.entries);
    };

    /**
     * Removes a key together with its value from the map.
     * @param {string} sKey
     *  the map's key to be removed
     * @since 1.17.1
     */
    sap.ushell.utils.Map.prototype.remove = function (sKey) {
        delete this.entries[sKey];
    };

    /**
     * Returns this map's string representation.
     *
     * @returns {string}
     *   this map's string representation
     * @since 1.15.0
     */
    sap.ushell.utils.Map.prototype.toString = function () {
        var aResult = ['sap.ushell.utils.Map('];
        aResult.push(JSON.stringify(this.entries));
        aResult.push(')');
        return aResult.join('');
    };


    /**
     * returns the Parameter value of a boolean
     * "X", "x", "true" and all case variations are true,
     * "false" and "" and all case variations are false
     *  all others and not specified return undefined
     *  @param {string} sParameterName
     *     The name of the parameter to look for, case sensitive
     *  @param {string} [sParams]
     *     specified parameter (search string), if not specified, search part of current url is used
     *  @returns {boolean} true, false or undefined
     */
    sap.ushell.utils.getParameterValueBoolean = function (sParameterName, sParams) {
        var aArr = jQuery.sap.getUriParameters(sParams).mParams && jQuery.sap.getUriParameters(sParams).mParams[sParameterName],
            aTruthy = ["true", "x"],
            aFalsy = ["false", ""],
            sValue;
        if (!aArr || aArr.length === 0) {
            return undefined;
        }
        sValue = aArr[0].toLowerCase();
        if (aTruthy.indexOf(sValue) >= 0) {
            return true;
        }
        if (aFalsy.indexOf(sValue) >= 0) {
            return false;
        }
        return undefined;
    };

    /**
     * Serves as a marker for functions that are to be exposed in QUnit tests. Calls to this
     * function are expected to be placed directly before the named function declaration (even
     * <b>after</b> the JSDoc). The function itself does nothing.
     *
     * @param {object} o
     *   the object to which this function will be attached in tests; must not be <code>this</code>
     *   (use <code>that</code> instead)
     * @param {string} [sExternalFunctionName]
     *   Optional external function name (since 1.25.0) to be used instead of the "local" function
     *   name which may have been changed e.g. by a minifier. Use this parameter in case of
     *   integration tests (and only then) which MUST be able to run against minified productive
     *   code!<p>
     *   <b>BEWARE:</b> Integration tests should rely on
     *   <code>sap.ushell.utils.testPublishAt</code> only in exceptional cases!
     * @since 1.15.0
     */
    sap.ushell.utils.testPublishAt = function (o, sExternalFunctionName) {
      // intentionally left blank
    };

    /**
     * Calls the given success handler (a)synchronously. Errors thrown in the success handler are
     * caught and the error message is reported to the error handler; if an error stack is
     * available, it is logged.
     *
     * @param {function ()} fnSuccess
     *   no-args success handler
     * @param {function (string)} [fnFailure]
     *   error handler, taking an error message; MUST NOT throw any error itself!
     * @param {boolean} [bAsync=false]
     *   whether the call shall be asynchronously
     * @since 1.28.0
     */
    sap.ushell.utils.call = function (fnSuccess, fnFailure, bAsync) {
        // Be aware of that this function is also defined as "sap.ui2.srvc.call".
        // Only difference is error logging to UI5. Please keep aligned!
        var sMessage;

        if (bAsync) {
            setTimeout(function () {
                sap.ushell.utils.call(fnSuccess, fnFailure, false);
            }, 0);
            return;
        }

        try {
            fnSuccess();
        } catch (e) {
            sMessage = e.message || e.toString();
            jQuery.sap.log.error("Call to success handler failed: " + sMessage,
                e.stack, //may be undefined: only supported in Chrome, FF; not in Safari, IE
                "sap.ushell.utils");
            if (fnFailure) {
                fnFailure(sMessage);
            }
        }
    };

    sap.ushell.utils.getIndexOfTopGroupInViewPort = function () {
        var jqTileContainers = jQuery('#dashboardGroups').find('.sapUshellTileContainer'),
            oOffset = jqTileContainers.not('.sapUshellHidden').first().offset(),
            firstContainerOffset = (oOffset && oOffset.top) || 0,
            aTileContainersTopAndBottoms = [],
            nScrollTop = 0,
            viewPortTop,
            topGroupIndex;

        if (document.getElementById('dashboard')) {
            nScrollTop = document.getElementById('dashboard').scrollTop;
        }
        // In some weird corner cases, those may not be defined -> bail out.
        if (!jqTileContainers || !oOffset) {
            return undefined;
        }
        jqTileContainers.each(function () {
            if (!jQuery(this).hasClass("sapUshellHidden")) {
                var nContainerTopPos = jQuery(this).parent().offset().top;
                aTileContainersTopAndBottoms.push([nContainerTopPos, nContainerTopPos + jQuery(this).parent().height()]);
            }
        });
        viewPortTop = nScrollTop + firstContainerOffset;
        jQuery.each(aTileContainersTopAndBottoms, function (index, currentTileContainerTopAndBottom) {
            var currentTileContainerTop = currentTileContainerTopAndBottom[0],
                currentTileContainerBottom = currentTileContainerTopAndBottom[1];

            if (currentTileContainerTop <= viewPortTop && viewPortTop <= currentTileContainerBottom) {
                topGroupIndex = index;
                return;
            }
        });
        return topGroupIndex;
    };

    /**
     * Setting Tiles visibility using the Visibility contract, according to the view-port's position.
     *
     * Serves only the last caller, with a delay of 1 sec in order to make sure that rendering is complete
     */
    sap.ushell.utils.handleTilesVisibility = function () {

        // If a previous call is still waiting  - cancel it
        clearTimeout(visibilityCalcTimer);

        // Set the new timer
        visibilityCalcTimer = setTimeout(function () {
            var start = new Date(),
                // Get the visible and non-visible Tiles
                aTiles = sap.ushell.utils.getVisibleTiles(),
                duration,
                launchPageService;

            if (aTiles && aTiles.length) {
                launchPageService = sap.ushell.Container.getService("LaunchPage");

                aTiles.forEach(function (oTile) {
                    var tileObject = sap.ushell.utils.getTileObject(oTile);
                    if (tileObject !== null) {
                        launchPageService.setTileVisible(tileObject, oTile.isDisplayedInViewPort);
                    }
                });
                jQuery.sap.log.debug("Visible Tiles: " + aTiles.filter(function (oTile) {return oTile.isDisplayedInViewPort; }).length);
                jQuery.sap.log.debug("NonVisible Tiles: " + aTiles.filter(function (oTile) {return !oTile.isDisplayedInViewPort; }).length);
            }

            duration = new Date() - start;
            jQuery.sap.log.debug("Start time is: " + start + " and duration is: " + duration);
        }, 1000);
    };

    /**
     * Setting Tiles visibility using the Visibility contract as not visible.
     *
     * The affected tiles are only the visible tiles according to the view port's position.
     *
     * This action happens immediately with no timers or timeouts.
     */
    sap.ushell.utils.setTilesNoVisibility = function () {
        // this method currently is used upon navigation (i.e. Shell.controlelr - openApp)
        // as there is logic that is running in the background such as OData count calls of the dynamic tiles
        // which are still visible at navigation (as no one had marked it otherwise).
        var aTiles = sap.ushell.utils.getVisibleTiles(),
            launchPageService;
        if ((typeof aTiles !== "undefined") && aTiles.length > 0) {
            launchPageService = sap.ushell.Container.getService("LaunchPage");

            aTiles.forEach(function (oTile) {
                launchPageService.setTileVisible(sap.ushell.utils.getTileObject(oTile), false);
            });
            jQuery.sap.log.debug("Visible Tiles: " + aTiles.filter(function (oTile) {return oTile.isDisplayedInViewPort; }).length);
            jQuery.sap.log.debug("NonVisible Tiles: " + aTiles.filter(function (oTile) {return !oTile.isDisplayedInViewPort; }).length);
        }
    };

    /**
     * Gets a hash and returns only the semanticObject-action part of it
     * @param {string} hash shell hash
     * @returns {string} Semantic Object action part of hash, false in case of a syntactically wrong hash
     */
    sap.ushell.utils.getBasicHash = function (hash) {
        // Check hash validity
        if (!sap.ushell.utils.validHash(hash)) {
            jQuery.sap.log.debug("Utils ; getBasicHash ; Got invalid hash");
            return false;
        }

        var oURLParsing = sap.ushell.Container.getService("URLParsing"),
            oShellHash = oURLParsing.parseShellHash(hash);

        return oShellHash ?  oShellHash.semanticObject + "-" + oShellHash.action : hash;
    };

    sap.ushell.utils.validHash = function (hash) {
        return (hash && hash.constructor === String && jQuery.trim(hash) != "");
    };

    sap.ushell.utils.handleTilesOpacity = function (oModel) {
        jQuery.sap.require("sap.ui.core.theming.Parameters");

        var aTilesOpacityValues,
            currentTile,
            appUsagePromise,
            sColor = sap.ui.core.theming.Parameters.get("sapUshellTileBackgroundColor"),
            rgbColor = this.hexToRgb(sColor),
            jqTiles,
            calculatedOpacity,
            RGBAformat,
            jqTile,
            sCurrentHash,
            rgbaValue,
            oContext,
            pathSegments,
            groupind,
            tileInd,
            oUserRecentsService = sap.ushell.Container.getService("UserRecents");
        //In case of custom theme where UI5 parameters are not used - tiles opacity cannot be supported
        if (rgbColor) {
            RGBAformat = "rgba(" + rgbColor.r + "," + rgbColor.g + "," + rgbColor.b + ",{0})";
            appUsagePromise = oUserRecentsService.getAppsUsage();

            appUsagePromise.done(function (appUsage) {
                aTilesOpacityValues = appUsage.usageMap;
                jqTiles = jQuery('.sapUshellTile').not('.sapUshellTileFooter');
                var groups = oModel.getProperty("/groups");
                oModel.setProperty('/animationRendered', true);

                for (var index = 0; index < jqTiles.length; index++) {
                    jqTile = jQuery(jqTiles[index]);
                    sCurrentHash = this.getBasicHash(jqTile.find('.sapUshellTileBase').attr('data-targeturl'));
                    if (sCurrentHash) {
                        calculatedOpacity = this.convertToRealOpacity(aTilesOpacityValues[sCurrentHash], appUsage.maxUsage);
                        rgbaValue = RGBAformat.replace("{0}", calculatedOpacity);
                        currentTile = sap.ui.getCore().byId(jqTile.attr('id'));
                        oContext = currentTile.getBindingContext();
                        pathSegments = oContext.sPath.split('/');
                        groupind = pathSegments[2];
                        tileInd = pathSegments[4];
                        groups[groupind].tiles[tileInd].rgba = rgbaValue;
                    }
                }

                oModel.setProperty("/groups", groups);
            }.bind(this));
        }

    };

    sap.ushell.utils.convertToRealOpacity = function(amountOfUsage, max) {
        var aOpacityLevels = [1, 0.95, 0.9, 0.85, 0.8],
            iOpacityVariance = Math.floor(max / aOpacityLevels.length),
            iOpacityLevelIndex;

        if (!amountOfUsage) {
            return aOpacityLevels[0];
        } else if (!max){
            return aOpacityLevels[aOpacityLevels.length - 1];
        } else {
            iOpacityLevelIndex = Math.floor((max - amountOfUsage) / iOpacityVariance);
            return iOpacityLevelIndex < aOpacityLevels.length ? aOpacityLevels[iOpacityLevelIndex] : aOpacityLevels[aOpacityLevels.length - 1];
        }
    };

    sap.ushell.utils.getCurrentHiddenGroupIds = function(oModel) {
        var aGroups = oModel.getProperty('/groups'),
            aHiddenGroupsIDs = [],
            sGroupId,
            groupIndex;

        for (groupIndex in aGroups) {
            if (!aGroups[groupIndex].isGroupVisible) {
                sGroupId = aGroups[groupIndex].groupId;
                aHiddenGroupsIDs.push(sGroupId);
            }
        }
        return aHiddenGroupsIDs;
    };

    sap.ushell.utils.hexToRgb = function(hex) {
        var bIsHexIllegal = !hex || hex[0] != '#' || (hex.length  != 4 && hex.length != 7),
            result;

        //If hex consists of three-character RGB notation, convert it into six-digit form
        hex = !bIsHexIllegal && hex.length === 4 ? '#' + hex[1] + hex[1] + hex[2] + hex[2] + hex[3] + hex[3] : hex;
        result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16)
        } : null;
    };

    /**
     * Gets the device's form factor. Based on <code>sap.ui.Device.system</code> from SAPUI5.
     * @returns {string}
     *   the device's form factor ("desktop", "tablet" or "phone")
     * @since 1.25.1
     */
    sap.ushell.utils.getFormFactor = function () {
        //Please be aware of that this function is also defined as "sap.ui2.srvc.getFormFactor". Keep aligned!
        var oSystem = sap.ui.Device.system;

        if (oSystem.desktop){
            return oSystem.SYSTEMTYPE.DESKTOP;
        } else if (oSystem.tablet) {
            return oSystem.SYSTEMTYPE.TABLET;
        } else {
            return oSystem.phone ? oSystem.SYSTEMTYPE.PHONE : undefined;
        }

    };

    /**
     * Iterate over all the Tiles and mark each one as visible or non-visible
     * according to the view-port's position.
     *
     * @returns {Array} Array of Tile objects, each one includes the flag "isDisplayedInViewPort" indicating its visibility
     */
    sap.ushell.utils.getVisibleTiles = function () {

        var nWindowHeight = document.body.clientHeight,
            oControl = sap.ui.getCore().byId("dashboardGroups"),
            oNavContainer = sap.ui.getCore().byId("navContainer"),
            groupsIndex,
            tilesIndex,
            group,
            groupTiles,
            oTile,
            tileDomRef,
            tileOffset,
            tileTop,
            tileBottom,
            shellHdrHeight = jQuery('#shell-hdr').height(),
            aTiles = [];


        if (oControl && oControl.getGroups() && oNavContainer) {
            //verify we are in the dashboard page
            var bIsInDashBoard = (oNavContainer.getCurrentPage().sId === "application-Shell-home") &&
                (oControl.getModel().getProperty("/currentViewName") === "home"),
                aGroups = oControl.getGroups();

            // Loop over all Groups
            //jQuery.each(aGroups, function(groupIndex) {
            for (groupsIndex = 0; groupsIndex < aGroups.length; groupsIndex = groupsIndex + 1) {
                group = aGroups[groupsIndex];
                groupTiles = group.getTiles();
                if (groupTiles) {
                    // Loop over all Tiles in the current Group
                    for (tilesIndex = 0; tilesIndex < groupTiles.length; tilesIndex = tilesIndex + 1) {

                        oTile = groupTiles[tilesIndex];

                        if (!bIsInDashBoard) {
                            // if current state is not dashboard ("Home") set not visible
                            oTile.isDisplayedInViewPort = false;
                        } else {
                            tileDomRef = jQuery(oTile.getDomRef());
                            tileOffset = tileDomRef.offset();

                            // On Dashboard loading - the Dashboard Groups Container is rendered once in an empty state on initialization
                            // and then again when all data is loaded and the Groups need to be rendered.
                            // This condition is for exiting the function when it is called for the 1st time
                            if (!tileOffset) {
                                return null;
                            }

                            tileTop = tileDomRef.offset().top;
                            tileBottom = tileTop + tileDomRef.height();

                            // If the Tile is located above or below the view-port
                            oTile.isDisplayedInViewPort = (tileBottom > shellHdrHeight) && (tileTop < nWindowHeight);
                        }
                        aTiles.push(oTile);
                    } // End of Tiles loop
                }
            } // End of Groups loop

        }
        return aTiles;
    };

    sap.ushell.utils.getTileObject = function (ui5TileObject) {
        var bindingContext = ui5TileObject.getBindingContext();
        return bindingContext.getObject() ? bindingContext.getObject().object : null;
    };

    sap.ushell.utils.addBottomSpace = function () {
        var jqContainer = jQuery('#dashboardGroups').find('.sapUshellTileContainer:visible'),
            lastGroup = jqContainer.last(),
            headerHeight = jQuery(".sapUshellShellHead").height(),
            lastGroupHeight = lastGroup.parent().height(),
            groupTitleMarginTop = parseInt(lastGroup.find(".sapUshellContainerTitle").css("margin-top"), 10),
            groupsContainerPaddingBottom = parseInt(jQuery('.sapUshellDashboardGroupsContainer').css("padding-bottom"), 10);

	    var nBottomSpace = jQuery(window).height() - headerHeight - lastGroupHeight - groupTitleMarginTop - groupsContainerPaddingBottom;
	    nBottomSpace = (nBottomSpace < 0) ? 0 : nBottomSpace;

	    // Add margin to the bottom of the screen in order to allow the lower TileContainer (in case it is chosen)
	    //to be shown on the top of the view-port
	    jQuery('.sapUshellDashboardGroupsContainer').css("margin-bottom", nBottomSpace + "px");
    };

    sap.ushell.utils.groupHasVisibleTiles = function (groupTiles, groupLinks) {
        var visibleTilesInGroup = false,
            tileIndex,
            tempTile,
            tiles = !groupTiles ? [] : groupTiles,
            links = !groupLinks ? [] : groupLinks;

        tiles = tiles.concat(links);

        if (tiles.length === 0) {
            return false;
        }

        for (tileIndex = 0; tileIndex < tiles.length; tileIndex = tileIndex + 1) {
            tempTile = tiles[tileIndex];
            // Check if the Tile is visible on the relevant device
            if (tempTile.isTileIntentSupported) {
                visibleTilesInGroup = true;
                break;
            }
        }
        return visibleTilesInGroup;
    };

    /**
     * #
     * @param {function} fnFunction
     *    the function
     * @param {array} aArguments
     *    the arguments
     * @param {string[]} aArgumentsNames
     *    array of the argument names for non-trivial functions with more than one argument
     * @returns {jQuery.Deferred.promise|function}
     *    a promise or a function
     */
    sap.ushell.utils.invokeUnfoldingArrayArguments = function(fnFunction, aArguments) {
        var aArgArray;
        if (!jQuery.isArray(aArguments[0])) {
            // invoke directy
            return fnFunction.apply(this, aArguments);
        } else {
            // process as array
            aArgArray = aArguments[0];

            if (aArgArray.length === 0) {
                // empty array
                return new jQuery.Deferred().resolve([]).promise();
            } else {
                var oDeferred = new jQuery.Deferred(),
                    aPromises = [],
                    aRes = [],
                    thePromise = new jQuery.Deferred().resolve();

                aArgArray.forEach(function(nThArgs, iIndex) {
                    if (!jQuery.isArray(nThArgs)) {
                        jQuery.sap.log.error("Expected Array as nTh Argument of multivalue invokation: first Argument must be array of array of arguments: single valued f(p1,p2), f(p1_2,p2_2), f(p1_3,p2_3) : multivalued : f([[p1,p2],[p1_2,p2_2],[p1_3,p2_3]]");
                        throw new Error("Expected Array as nTh Argument of multivalue invokation: first Argument must be array of array of arguments: single valued f(p1,p2), f(p1_2,p2_2), f(p1_3,p2_3) : multivalued : f([[p1,p2],[p1_2,p2_2],[p1_3,p2_3]]");
                    }
                    // nThArgs is an array of the arguments
                    var pr = fnFunction.apply(this, nThArgs),
                        pr2 = new jQuery.Deferred();

                    pr.done(function() {
                        var a = Array.prototype.slice.call(arguments);
                        aRes[iIndex] = a;
                        pr2.resolve();
                    }).fail(pr2.reject.bind(pr2));
                    aPromises.push(pr2.promise());
                    thePromise = jQuery.when(thePromise, pr2);
                });

                jQuery.when.apply(jQuery, aPromises).done(function() {
                    oDeferred.resolve(aRes);
                }).fail(function() {
                    oDeferred.reject("failure");
                });

                // invoke direclty
                return oDeferred.promise();
            }
        }
    };

    /*
     * Returns whether client side nav target resolution is enabled.
     *
     * @returns {boolean}
     *    whether client side nav target resolution is enabled.
     *
     * @private
     */
    sap.ushell.utils.isClientSideNavTargetResolutionEnabled = function () {
        var bDefaultEnabled = true,
            sLocalStorageClientSetting;

        if (jQuery.sap.storage === undefined) { // in case it's called before jQuery.sap.storage is defined (e.g., tests)
            sLocalStorageClientSetting = window.localStorage.getItem("targetresolution-client");
            sLocalStorageClientSetting = (
                 sLocalStorageClientSetting === false   ||
                 sLocalStorageClientSetting === "false" ||
                 sLocalStorageClientSetting === ""
            ) ? false : true;

        } else {
            sLocalStorageClientSetting = jQuery.sap.storage(
                jQuery.sap.getObject("jQuery.sap.storage.Type.local"),
                "targetresolution"
            ).get("client");
        }

        // Check when disabled
        if (sLocalStorageClientSetting === "" ||
            sLocalStorageClientSetting === false ||
            sap.ushell.utils.getParameterValueBoolean("sap-ushell-nav-cs") === false) {

            return false;
        }

        // Default behavior
        return bDefaultEnabled;
    };

}());

}; // end of sap/ushell/utils.js

    

    /*
     * Try to close window.
     * Note: Most browsers do NOT allow closing windows by JS if they were opened manually.
     *
     */
    sap.ushell.utils.testPublishAt(sap.ushell.services);
    function closeWindow() {
        close();
    }

    /*
     * Redirect window to something other than "/sap/public/bc/icf/logoff".
     */
    sap.ushell.utils.testPublishAt(sap.ushell.services);
    function redirectWindow() {
        // TODO:
        // Here we should provide a dedicated web page telling the user that he is logged out
        document.location = "about:blank";
    }

    /*
     * Getter for <code>localStorage</code> to facilitate testing.
     *
     * @returns {Storage}
     *   the local storage instance
     */
    sap.ushell.utils.testPublishAt(sap.ushell.services);
    function getLocalStorage() {
        return localStorage;
    }

    /*
     * Gets the platform specific package of the adapters.
     * @param {string} sPlatform
     *     the platform
     * @returns {string}
     */
    function getPlatformPackage(sPlatform) {
        if (mPlatformPackages && mPlatformPackages[sPlatform]) {
            return mPlatformPackages[sPlatform];
        }
        return "sap.ushell.adapters." + sPlatform;
    }

    /**
     * Gets the service configuration from window["sap-ushell-config"].services[sServiceName].
     * Ensures to return an object.
     *
     * @param {string} sServiceName
     *    the service name
     * @returns {object}
     *    the service configuration
     */
    function getServiceConfig(sServiceName) {
        return (oConfig.services && oConfig.services[sServiceName]) || {};
    }

    /**
     * Creates an adapter. Loads the adapter module if necessary. The resulting module name is
     * <code>"sap.ushell.adapters." + oSystem.platform + "." + sName + "Adapter"</code> unless
     * configured differently.
     *
     * @param {string} sName
     *     the service name
     * @param {sap.ushell.System} oSystem
     *     the target system
     * @param {string} [sParameter]
     *     a parameter which is passed to the constructor (since 1.15.0)
     * @returns {object}
     *     the adapter
     */
    function createAdapter(sName, oSystem, sParameter) {
        var oAdapterConfig = getServiceConfig(sName).adapter || {},
            sAdapterName = oAdapterConfig.module
                || getPlatformPackage(oSystem.getPlatform()) + "." + sName + "Adapter";
        jQuery.sap.require(sAdapterName);
        return new (jQuery.sap.getObject(sAdapterName))(oSystem, sParameter,
            {config: oAdapterConfig.config || {}});
    }

    /**
     * Initializes bootstrap plugins based on a given configuration.
     *
     * @param {object} oConfigParameter
     *     the configuration
     *
     * @private
     */
    function initBootstrapPlugins(oConfigParameter) {
        var oPluginConfigurations = oConfigParameter.bootstrapPlugins,
            mInitializedComponentPromise = {},
            aUserDefaultPlugins = [];

        /**
         * Internal function responsible to instantiate a UI5 component and make sure the passed
         * parameters are aligned with the asynchronous plugin use case.
         * The optional parameter oDelegatePluginDeferred might be passed in case a superseding
         * promise that will report the status to interested parties.
         *
         * @param {object} oConfig
         *     The plugin's configuration object.
         * @param {jQuery.Deferred()} [oDelegatePluginDeferred]
         *     A deferred object that mimics the internally used ECMA6 promise.
         * @returns {Promise}
         *     An ECMA6 promise returned by the call of sap.ui.component().
         * @private
         */
        function fnInstantiateComponent(oConfig, oDelegatePluginDeferred) {
            var oComponentOptions = {
                name: oConfig.component,
                url: oConfig.url,
                componentData: { config: oConfig.config || {} },
                async: true
            };

            // Add asyncHints if specified
            if (oConfig.hasOwnProperty("asyncHints")) {

                if (jQuery.isPlainObject(oConfig.asyncHints)) {
                    oComponentOptions.asyncHints = oConfig.asyncHints;
                } else {
                    jQuery.sap.log.error(
                        "Cannot pass asyncHints to plugin component: " + oConfig.component,
                        "The value of 'asyncHint' must be an object in the plugin configuration",
                        S_COMPONENT_NAME
                    );
                }
            }

            return sap.ui.component(oComponentOptions).then(
                    function () {
                        if (oDelegatePluginDeferred) {
                            oDelegatePluginDeferred.resolve();
                        }
                    },
                    function (oError) {
                        // errors always logged per component
                        oError = oError || "";
                        jQuery.sap.log.error("Cannot create UI5 plugin component: " + oError,
                            oError.stack,  // stacktrace not only available for all browsers
                            S_COMPONENT_NAME);
                        if (oDelegatePluginDeferred) {
                            oDelegatePluginDeferred.reject(oError);
                }
            });
        }

        if (oPluginConfigurations) {

            Object.keys(oPluginConfigurations).forEach(function (sPluginCfgKey) {
                var oPluginConfig = oPluginConfigurations[sPluginCfgKey],
                    oConfigAttribute,
                    oUserDefaultDeferred,
                    sPluginName;

                try {
                    // modules are loaded synchronously, components are loaded asynchronously

                    if (oPluginConfig.hasOwnProperty("component")) {
                        sPluginName = oPluginConfig.component;
                        oConfigAttribute = oPluginConfig.config || {};

                        // a user default plugin has to be marked with parameter 'sapUshellPluginType' and value 'UserDefaults'
                        if (oConfigAttribute.hasOwnProperty(S_PLUGIN_TYPE_PARAMETER) &&
                                oConfigAttribute[S_PLUGIN_TYPE_PARAMETER] === S_USER_DEFAULT_PARAMETER_VALUE) {
                            oUserDefaultDeferred = new jQuery.Deferred();
                            aUserDefaultPlugins.push(oUserDefaultDeferred.promise());
                        }

                        if (mInitializedComponentPromise.hasOwnProperty(sPluginName)) {
                            // try instantiating the next component anyway
                            mInitializedComponentPromise[sPluginName].then(
                                function () {
                                    fnInstantiateComponent(oPluginConfig, oUserDefaultDeferred);
                                },
                                function () {  // note, no error logging here
                                    fnInstantiateComponent(oPluginConfig, oUserDefaultDeferred);
                                }
                            );
                        } else {
                            mInitializedComponentPromise[sPluginName] = fnInstantiateComponent(oPluginConfig, oUserDefaultDeferred);
                        }

                    } else if (oPluginConfig.hasOwnProperty("module")) {
                        jQuery.sap.require(oPluginConfig.module);
                    } else {
                        jQuery.sap.log.error("Invalid plugin configuration", [
                            "the plugin configuration for", sPluginCfgKey,
                            "must contain <component> OR <module> keys"
                        ].join(" "), S_COMPONENT_NAME);
                    }
                } catch (oError) {
                    jQuery.sap.log.error([
                        "Error while loading bootstrap plugin:", sPluginCfgKey
                    ].join(" "), oError, S_COMPONENT_NAME);
                    // make sure to reject promise in case of user default plugin
                    if (oUserDefaultDeferred) {
                        oUserDefaultDeferred.reject(oError);
                }
                }
            });
            // collect all promises, reject if one of them fails
            jQuery.when.apply(undefined, aUserDefaultPlugins)
                .done(oUserDefaultPluginsDeferred.resolve.bind())
                .fail(oUserDefaultPluginsDeferred.reject.bind());
        } else {
            oUserDefaultPluginsDeferred.resolve();
        }
    }

    /**
     * @class The Unified Shell's container which manages renderers, services, and adapters.
     *
     * @name sap.ushell.services.Container
     * @see sap.ushell.bootstrap
     * @since 1.15.0
     * @public
     */
    /**
     * Constructs a new Unified Shell container for the given container adapter.
     *
     * @param {object} oAdapter
     *     the platform-specific adapter corresponding to this service
     *
     * @private
     * @since 1.15.0
     */
    function Container(oAdapter) {
        var oLogoutEventProvider = new sap.ui.base.EventProvider(),
            isDirty = false,
            aRegisteredDirtyMethods = [],
            oRenderers = {},
            sRemoteSystemPrefix = "sap.ushell.Container." + oAdapter.getSystem().getPlatform()
                    + ".remoteSystem.",
            mRemoteSystems = {},
            oGlobalDirtyDeferred,
            fnStorageEventListener,
            oLocalStorage = getLocalStorage(),
            mServicesByName = new sap.ushell.utils.Map(),
            sSessionTerminationKey = "sap.ushell.Container." + oAdapter.getSystem().getPlatform()
                    + ".sessionTermination",
            that = this;

        // BEWARE: constructor code below!

        /**
         * Cancels the logon procedure in the current frame, if any. This MUST be used by the
         * logon frame provider in case the user wants to close the logon frame for good.
         * It will report "Authentication cancelled" and let all pending requests for the current
         * realm fail. As a side-effect, it also calls <code>destroy</code> on the logon frame
         * provider.
         *
         * @methodOf sap.ushell.services.Container#
         * @name cancelLogon
         * @since 1.21.2
         * @public
         * @see sap.ushell.services.Container#setLogonFrameProvider
         */
        this.cancelLogon = function () {
            if (this.oFrameLogonManager) {
                this.oFrameLogonManager.cancelXHRLogon();
            }
        };

        /**
         * Creates a new renderer instance for the given renderer name.
         * <p>
         * Names without a dot are interpreted as package names within the default naming convention
         * and will be expanded to
         * <code>"sap.ushell.renderers." + sRendererName + ".Renderer"</code>.
         * Names containing a dot are used "as is".
         * <p>
         * The resulting name must point to a SAPUI5 object which is first required and then
         * created (constructor call without arguments).
         * The object must be either a control (i.e. extend <code>sap.ui.core.Control</code>) or a
         * UI component (i.e. extend <code>sap.ui.core.UIComponent</code>), which is then
         * automatically wrapped into a <code>sap.ui.core.ComponentContainer</code> control by this
         * method. This <code>sap.ui.core.ComponentContainer</code> is created with
         * <code>height</code> and <code>width</code> set to "100%" to accommodate the complete
         * available space.
         * <p>
         * The returned renderer is supposed to be added to a direct child (for example
         * <code>DIV</code>) of the <code>BODY</code> of the page and there should be no other
         * parts of the page consuming space outside the renderer.
         * Use CSS class <code>sapUShellFullHeight</code> at <code>HTML</code>, <code>BODY</code>
         * and at the element to which the renderer is added to allow the renderer to use 100%
         * height.
         *
         * @param {string} [sRendererName]
         *     The renderer name, such as "standard" or "acme.foo.bar.MyRenderer"; it is taken from
         *     the configuration property <code>defaultRenderer</code> if not given here.
         * @returns {sap.ui.core.Control}
         *     the renderer
         *
         * @methodOf sap.ushell.services.Container#
         * @name createRenderer
         * @since 1.15.0
         * @public
         */
        this.createRenderer = function (sRendererName) {
            var oComponentData,
                sComponentName,
                oRenderer,
                oRendererConfig;

            sRendererName = sRendererName || oConfig.defaultRenderer;
            if (!sRendererName) {
                throw new Error("Missing renderer name");
            }
            oRendererConfig = (oConfig.renderers && oConfig.renderers[sRendererName]) || {};
            sComponentName = oRendererConfig.module || (sRendererName.indexOf(".") < 0
                ? "sap.ushell.renderers." + sRendererName + ".Renderer"
                : sRendererName);
            jQuery.sap.require(sComponentName);
            if (oRendererConfig.componentData && oRendererConfig.componentData.config) {
                oComponentData = {config: oRendererConfig.componentData.config};
            }
            oRenderer = new (jQuery.sap.getObject(sComponentName))({
                componentData: oComponentData
            });
            if (oRenderer instanceof sap.ui.core.UIComponent) {
                oRenderer = new sap.ui.core.ComponentContainer(
                    {component: oRenderer, height: "100%", width: "100%"}
                );
            }
            if (!(oRenderer instanceof sap.ui.core.Control)) {
                throw new Error("Unsupported renderer type for name " + sRendererName);
            }
            oRenderers[sRendererName] = oRenderer;
            return oRenderer;
        };


        /**
         * Gets a renderer instance for the given renderer name,
         * that was created by the createRenderer method.
         *
         * @param {string} [sRendererName]
         *     The renderer name, such as "standard" or "acme.foo.bar.MyRenderer"; it is taken from
         *     the configuration property <code>defaultRenderer</code> if not given here.
         * @returns {sap.ui.core.Control}
         *     the renderer
         *
         * @methodOf sap.ushell.services.Container#
         * @name getRenderer
         * @since 1.30.0
         * @private
         */
        this.getRenderer = function (sRendererName) {
            sRendererName = sRendererName || oConfig.defaultRenderer;

            if (oRenderers[sRendererName]) {
                return oRenderers[sRendererName].getComponentInstance();
            }

            return undefined;
        };


        /**
         * @namespace An enumeration for the application work protect mode state.
         *
         * @name sap.ushell.Container.DirtyState
         * @since 1.21.1
         * @public
         */
        this.DirtyState = {
            /**
             * The embedded application is clean, there is no unsaved data.
             *
             * @public
             * @constant
             * @default "CLEAN"
             * @name sap.ushell.Container.DirtyState.CLEAN
             * @since 1.21.1
             * @type string
             */
            CLEAN: "CLEAN",
            /**
             * The embedded application is dirty, the user has entered data
             * that is not yet saved.
             *
             * @public
             * @constant
             * @default "DIRTY"
             * @name sap.ushell.Container.DirtyState.DIRTY
             * @since 1.21.1
             * @type string
             */
            DIRTY: "DIRTY",
            /**
             * The embedded application container's dirty state cannot be determined because
             * of technical reasons.
             *
             * @public
             * @constant
             * @default "MAYBE_DIRTY"
             * @name sap.ushell.Container.DirtyState.MAYBE_DIRTY
             * @since 1.21.1
             * @type string
             */
            MAYBE_DIRTY: "MAYBE_DIRTY",
            /**
             * Technical state telling that the dirty state is currently being determined.
             *
             * @private
             * @constant
             * @default "PENDING"
             * @name sap.ushell.Container.DirtyState.PENDING
             * @since 1.21.1
             * @type string
             */
            PENDING: "PENDING",
            /**
             * Technical state for the initial value of the localStorage dirty state key.
             *
             * @private
             * @constant
             * @default "INTIAL"
             * @name sap.ushell.Container.DirtyState.INITIAL
             * @since 1.21.2
             * @type string
             */
            INITIAL: "INITIAL"
        };

        /**
         * Returns the global dirty state.
         *
         * All open UShell browser windows for the same origin are asked about their global dirty
         * state.
         *
         * @returns {jQuery.Deferred}
         *     A <code>jQuery.Deferred</code> object's promise receiving the dirty state
         *     (see {@link sap.ushell.Container.DirtyState}).
         * @throws  Raises an exception, if called again before promise is resolved.
         *
         * @methodOf sap.ushell.services.Container#
         * @name getGlobalDirty
         * @since 1.21.1
         * @public
         */
        this.getGlobalDirty = function () {
            var i,
                oDeferred = new jQuery.Deferred(),
                sUid = jQuery.sap.uid(),
                sStorageKey,
                iPending = 0,
                oDirtyState = this.DirtyState.CLEAN;

            function tryResolve() {
                if (iPending === 0 || oDirtyState === that.DirtyState.DIRTY) {
                    // no PENDING or already dirty, so we can end the process
                    oDeferred.resolve(oDirtyState);
                    jQuery.sap.log.debug(
                        "getGlobalDirty() Resolving: " + oDirtyState,
                        null,
                        "sap.ushell.Container"
                    );
                }
            }

            function onStorageEvent(oStorageEvent) {
                if (oStorageEvent.key.indexOf(S_DIRTY_STATE_PREFIX) === 0
                        && oStorageEvent.newValue !== that.DirtyState.INITIAL
                        && oStorageEvent.newValue !== that.DirtyState.PENDING) {
                    jQuery.sap.log.debug(
                        "getGlobalDirty() Receiving event key: " + oStorageEvent.key
                            + " value: " + oStorageEvent.newValue,
                        null,
                        "sap.ushell.Container"
                    );
                    if (oStorageEvent.newValue === that.DirtyState.DIRTY
                            || oStorageEvent.newValue === that.DirtyState.MAYBE_DIRTY) {
                        oDirtyState = oStorageEvent.newValue;
                    }
                    iPending -= 1;
                    tryResolve();
                }
            }

            // check for private browsing mode in Safari
            try {
                oLocalStorage.setItem(sUid, "CHECK");
                oLocalStorage.removeItem(sUid);
            } catch (e) {
                jQuery.sap.log.warning("Error calling localStorage.setItem(): " + e, null,
                    "sap.ushell.Container");
                return oDeferred.resolve(this.DirtyState.MAYBE_DIRTY).promise();
            }

            if (oGlobalDirtyDeferred) {
                throw new Error("getGlobalDirty already called!");
            }

            oGlobalDirtyDeferred = oDeferred;
            window.addEventListener('storage', onStorageEvent);
            oDeferred.always(function () {
                window.removeEventListener('storage', onStorageEvent);
                oGlobalDirtyDeferred = undefined;
            });

            for (i = oLocalStorage.length - 1; i >= 0; i -= 1) {
                sStorageKey = oLocalStorage.key(i);
                if (sStorageKey.indexOf(S_DIRTY_STATE_PREFIX) === 0) {
                    if (oLocalStorage.getItem(sStorageKey) === 'PENDING') {
                        // cleanup unanswered PENDINGS from call before
                        oLocalStorage.removeItem(sStorageKey);
                        jQuery.sap.log.debug(
                            "getGlobalDirty() Cleanup of unresolved 'PENDINGS':" + sStorageKey,
                            null,
                            "sap.ushell.Container"
                        );
                    } else {
                        iPending += 1;
                        sap.ushell.utils.localStorageSetItem(sStorageKey,
                            this.DirtyState.PENDING, true);
                        jQuery.sap.log.debug(
                            "getGlobalDirty() Requesting status for: " + sStorageKey,
                            null,
                            "sap.ushell.Container"
                        );
                    }
                }
            }
            tryResolve();

            setTimeout(function () {
                if (oDeferred.state() !== "resolved") {
                    // no use of constants because the Container may not exist anymore
                    oDeferred.resolve('MAYBE_DIRTY');
                    jQuery.sap.log.debug(
                        "getGlobalDirty() Timeout reached, - resolved 'MAYBE_DIRTY'",
                        null,
                        "sap.ushell.Container"
                    );
                }
            }, iPending * 2000);

            return oDeferred.promise();
        };

        /**
         * Returns the logon system.
         *
         * @returns {sap.ushell.System}
         *     object providing information about the system where the container is logged in.
         *     since 1.15.0 the return value is of type <code>sap.ushell.System</code>
         *
         * @since 1.15.0
         * @private
         */
        this.getLogonSystem = function () {
            return oAdapter.getSystem();
        };

       /**
         * Returns the logged-in user.
         *
         * @returns {sap.ushell.User}
         *      object providing information about the logged-in user
         *
         * @since 1.15.0
         * @private
         */
        this.getUser = function () {
            return oAdapter.getUser();
        };

        /**
         * Returns the isDirty flag value.
         *
         * @returns {isDirty}
         *      The value of the dirty flag.
         * @methodOf sap.ushell.services.Container#
         * @name getDirtyFlag
         * @since 1.27.0
         * @public
         */
        this.getDirtyFlag = function () {
            for (var i = 0; i < aRegisteredDirtyMethods.length; i++) {
                isDirty = isDirty || aRegisteredDirtyMethods[i].call();
            }

            return isDirty;
        };

        /**
         * Setter for the isDirty flag value.
         *
         * Default value is false
         *
         * @param {boolean} [bIsDirty] The value of the dirty flag.
         * @methodOf sap.ushell.services.Container#
         * @name setDirtyFlag
         * @default false
         * @since 1.27.0
         * @public
         */
        this.setDirtyFlag = function (bIsDirty) {
            isDirty = bIsDirty;
        };

        /**
         * Register the work protection dirty callback function.
         * In the work protect mechanism, each platform can register their own method in order to check if data
         * was changed during the session, and notify the container about the change
         *
         * Use <code>Function.prototype.bind()</code> to determine the callback's <code>this</code> or
         * some of its arguments.
         *
         * @param {Function} fnDirty
         *     function for determining the state of the application
         * @since 1.31.0
         * @methodOf sap.ushell.services.Container#
         * @name registerDirtyStateProvider
         * @public
         */
        this.registerDirtyStateProvider = function (fnDirty) {
            if (typeof fnDirty !== "function") {
                throw new Error("fnDirty must be a function");
            }
            aRegisteredDirtyMethods.push(fnDirty);
        };

        /**
         * Returns a service with the given name, creating it if necessary.
         * Services are singleton objects identified by their (resulting) name.
         * <p>
         * Names without a dot are interpreted as service names within the default naming convention
         * and will be expanded to <code>"sap.ushell.services." + sServiceName</code>.
         * Names containing a dot are not yet supported. This name may be overridden via
         * configuration. See example 2 below.
         * <p>
         * The resulting name must point to a constructor function which is first required as a
         * SAPUI5 module and then called to create a service instance.
         * The service will be passed to a corresponding service adapter for the current logon system, as well as a callback
         * interface (of virtual type <code>sap.ushell.services.ContainerInterface</code>) to the
         * container providing a method <code>createAdapter(oSystem)</code> to create further
         * adapters for the same service but connected to remote systems.
         * The third parameter will be <code>sParameter</code> as passed to this function.
         * The fourth parameter will be an
         * object with the property <code>config</code> supplied by the configuration. See
         * example 2 below.
         * <p>
         * The adapter for the logon system will be created before the service. Its constructor
         * gets three parameters. The first parameter is the logon system, the second parameter is
         * <code>sParameter</code> and the third parameter is an object with the property
         * <code>config</code> supplied by the configuration.
         * <p>
         * The service may declare itself adapterless by setting the property
         * <code>hasNoAdapter = true</code> at the constructor function. In this case no adapter
         * will be created and passed to the constructor and all other parameters will be shifted.
         * <p>
         * <b>Example 1:</b> The service <code>sap.ushell.services.UserInfo</code> is
         * parameterless. It indicates this by setting
         * <code>sap.ushell.services.UserInfo.hasNoAdapter = true;</code>.
         * <p>
         * <b>Example 2:</b> (Configuration)
         * <pre>
         * window["sap-ushell-config"] = {
         *     services: {
         *         Foo: {
         *             module: "my.own.Foo"
         *             config: {header: "hidden"},
         *             adapter: {
         *                 module: "my.own.FooAdapter",
         *                 config: {foo: "bar"}
         *             }
         *         }
         *     }
         * }
         * oService = sap.ushell.Container.getService("Foo", "runtimeConfig");
         * </pre>
         * Now <code>oService</code> is an instance of <code>my.own.Foo</code>. The third parameter
         * of the constructor will be "runtimeConfig", the fourth parameter
         * <code>{config: {header: "hidden"}}</code>. Its adapter is an instance of
         * <code>my.own.FooAdapter</code> constructed with the parameters logon system,
         * "runtimeConfig" and <code>{config: {foo: "bar"}}</code>.
         *
         * @param {string} sServiceName
         *     The service name, such as "Menu"
         * @param {string} [sParameter]
         *     A parameter which is passed to the service constructor and every adapter
         *     constructor. (since 1.15.0)
         * @returns {object}
         *     the service
         *
         * @methodOf sap.ushell.services.Container#
         * @name getService
         * @see sap.ushell.services.ContainerInterface
         * @since 1.15.0
         * @public
         */
        this.getService = function (sServiceName, sParameter) {
            /**
             * @class This is a virtual type for the callback interface passed by
             * {@link sap.ui.Container.getService()} to any newly created service.
             * @name sap.ushell.services.ContainerInterface
             * @see sap.ushell.services.Container#getService
             * @since 1.15.0
             * @public
             */
            var oContainerInterface = {},
                sModuleName,
                sKey,
                Service, // Service constructor function
                oService,
                oServiceAdapter,
                oServiceConfig,
                oServiceProperties;

            /**
             * For the given remote system, creates a new adapter that corresponds to the service
             * to which this container interface was passed at construction time.
             *
             * @param {sap.ushell.System} oSystem
             *     information about the remote system to which the resulting adapter should
             *     connect
             * @returns {jQuery.Deferred}
             *     A <code>jQuery.Deferred</code> object's promise receiving the remote adapter.
             *
             * @methodOf sap.ushell.services.ContainerInterface#
             * @name createAdapter
             * @since 1.15.0
             * @public
             */
            function createRemoteAdapter(oSystem) {
                var oDeferred = new jQuery.Deferred();
                if (!oSystem) {
                    throw new Error("Missing system");
                }
                // Note: this might become really asynchronous once the remote adapter is loaded
                // from the remote system itself
                oDeferred.resolve(createAdapter(sServiceName, oSystem, sParameter));
                sap.ushell.Container.addRemoteSystem(oSystem);
                return oDeferred.promise();
            }

            if (!sServiceName) {
                throw new Error("Missing service name");
            }
            if (sServiceName.indexOf(".") >= 0) {
                //TODO support this once we have some configuration and can thus find adapters
                throw new Error("Unsupported service name");
            }
            oServiceConfig = getServiceConfig(sServiceName);
            sModuleName = oServiceConfig.module || "sap.ushell.services." + sServiceName;
            sKey = sModuleName + "/" + (sParameter || "");
            oServiceProperties = {config: oServiceConfig.config || {}};
            if (!mServicesByName.containsKey(sKey)) {
                jQuery.sap.require(sModuleName);
                Service = jQuery.sap.getObject(sModuleName);

                if (Service.hasNoAdapter === true) {
                    // has no adapter: don't create and don't pass one
                    oService = new Service(oContainerInterface, sParameter, oServiceProperties);
                } else {
                    // create and pass adapter for logon system as first parameter
                    oServiceAdapter = createAdapter(sServiceName, oAdapter.getSystem(),
                        sParameter);
                    oContainerInterface.createAdapter = createRemoteAdapter;
                    oService = new Service(oServiceAdapter, oContainerInterface, sParameter,
                        oServiceProperties);
                }

                mServicesByName.put(sKey, oService);
                return oService;
            }
            return mServicesByName.get(sKey);
        };

        /**
         * Get list of remote systems currently in use.
         *
         * @returns {object} map of sap.ushell.System
         *
         * @since 1.17.1
         * @private
         */
        sap.ushell.utils.testPublishAt(that);
        function getRemoteSystems() {
            var sSystemAlias,
                oSystemData,
                i,
                sKey;

            for (i = oLocalStorage.length - 1; i >= 0; i -= 1) {
                sKey = oLocalStorage.key(i);
                if (sKey.indexOf(sRemoteSystemPrefix) === 0) {
                    try {
                        sSystemAlias = sKey.substring(sRemoteSystemPrefix.length);
                        oSystemData = JSON.parse(oLocalStorage.getItem(sKey));
                        mRemoteSystems[sSystemAlias] = new sap.ushell.System(oSystemData);
                    } catch (e) {
                        // local storage contained garbage (non-parseable)
                        oLocalStorage.removeItem(sKey);
                    }
                }
            }
            return mRemoteSystems;
        }


        /**
         * Stub OData.read() and OData.request() to intercept OData request during logout process.
         * After 5 seconds an error handler is invoked to let the caller know about still ongoing
         * logout process.
         *
         * @since 1.17.1
         * @private
         */
        sap.ushell.utils.testPublishAt(that, "suppressOData");
        function suppressOData() {
            function stub(sErrorMessage, fnSuccess, fnFailure) {
                jQuery.sap.log.warning(sErrorMessage, null,
                    "sap.ushell.Container");
                if (fnFailure) {
                    setTimeout(fnFailure.bind(null, sErrorMessage), 5000);
                }
                // the original APIs provides abort handler which have to be stubbed also
                return { abort: function () {return; }};
            }
            OData.read = function (oRequest, fnSuccess, fnFailure) {
                return stub("OData.read('" +
                            (oRequest && oRequest.Uri ? oRequest.requestUri : oRequest) +
                            "') disabled during logout processing",
                            fnSuccess, fnFailure);
            };
            OData.request = function (oRequest, fnSuccess, fnFailure) {
                return stub("OData.request('" + (oRequest ? oRequest.requestUri : "") +
                            "') disabled during logout processing", fnSuccess, fnFailure);
            };
        }

        /**
         * Adds a system to the list of remote systems currently in use. On logout
         * this list is processed and performs a logout for each system via the ContainerAdapter
         * specific for its platform.
         *
         * @param  {sap.ushell.System} oRemoteSystem
         *         Remote system to be added.
         *
         * @methodOf sap.ushell.services.Container#
         * @name addRemoteSystem
         * @since 1.15.0
         * @public
         */
        /* Internal details
           oRemoteSystem.getAlias() is the unique key within the remote systems list.
           oRemoteSystem.getPlatform determines which ContainerAdapter implementation is used.
           oRemoteSystem.getBaseUrl determines the logout request routing; there are 3 routing modes:
           1. empty baseUrl:
             The logout is done with its platform-specific, server-absolute service path e.g.
             oRemoteSystem.platform is 'abap':
               '/sap/public/bc/icf/logoff'
             oRemoteSystem.platform is 'hana':
               '<protocol://host:port>/sap/hana/xs/formLogin/token.xsjs'
           2. baseUrl beginning with '/' e.g. '/MY_PREFIX':
             The logout request was fired with the baseUrl as prefix e.g. platform 'abap':
               '<protocol://host:port>/MY_PREFIX/sap/public/bc/icf/logoff'
           3. baseUrl is ';o=':
             The logout request is fired with <code>;o=oRemoteSystem.alias</code>
             e.g. oRemoteSystem.platform 'abap' and oRemoteSystem.alias = 'MY_SYSTEM_ALIAS':
               '<protocol://host:port>/sap/public/bc/icf/logoff;o=MY_SYSTEM_ALIAS'
           Note: Cases 2. and 3. require a corresponding Web Dispatcher rule.
        */
        this.addRemoteSystem = function (oRemoteSystem) {
            var sAlias = oRemoteSystem.getAlias(),
                oOldSystem = mRemoteSystems[sAlias];

            if (oOldSystem) {
                if (oOldSystem.toString() === oRemoteSystem.toString()) { // --> JSON.stringify
                    return;
                }
                jQuery.sap.log.warning("Replacing " + oOldSystem + " by " + oRemoteSystem,
                    null, "sap.ushell.Container");
            } else {
                jQuery.sap.log.debug("Added " + oRemoteSystem, null, "sap.ushell.Container");
            }
            mRemoteSystems[sAlias] = oRemoteSystem;
            sap.ushell.utils.localStorageSetItem(sRemoteSystemPrefix + sAlias, oRemoteSystem);
        };

        /**
         * Derives a remote system from the given OData service URL heuristically. The platform
         * is identified by the URL's prefix, the alias is derived from a segment parameter named
         * "o". If this succeeds, {@link #addRemoteSystem} is called accordingly with a base URL
         * of ";o=".
         *
         * @param {string} sServiceUrl
         *     An OData service URL.
         *
         * @methodOf sap.ushell.services.Container#
         * @name addRemoteSystemForServiceUrl
         * @since 1.23.0
         * @private
         */
        this.addRemoteSystemForServiceUrl = function (sServiceUrl) {
            /*jslint regexp:true */
            var aMatches,
                oSystemInfo = {baseUrl: ";o="};

            if (!sServiceUrl || sServiceUrl.charAt(0) !== '/' || sServiceUrl.indexOf('//') === 0) {
                return;
            }

            // extract system alias from segment parameter named "o"
            aMatches = /^[^?]*;o=([^\/;?]*)/.exec(sServiceUrl);
            if (aMatches && aMatches.length >= 2) {
                oSystemInfo.alias = aMatches[1];
            }

            // heuristically determine platform from URL prefix
            sServiceUrl = sServiceUrl.replace(/;[^\/?]*/g, ""); // remove all segment parameters
            if (/^\/sap\/(bi|hana|hba)\//.test(sServiceUrl)) {
                oSystemInfo.platform = "hana";
                oSystemInfo.alias = oSystemInfo.alias || "hana"; // use legacy hana as fallback
            } else if (/^\/sap\/opu\//.test(sServiceUrl)) {
                oSystemInfo.platform = "abap";
            }

            if (oSystemInfo.alias && oSystemInfo.platform) {
                this.addRemoteSystem(new sap.ushell.System(oSystemInfo));
            }
        };

        /**
         * Attaches a listener to the logout event.
         *
         * @param  {function} fnFunction
         *     Event handler to be attached.
         *
         * @methodOf sap.ushell.services.Container#
         * @name attachLogoutEvent
         * @since 1.19.1
         * @public
         */
        this.attachLogoutEvent = function (fnFunction) {
            oLogoutEventProvider.attachEvent("Logout", fnFunction);
        };


        /**
         * Detaches a listener from the logout event.
         *
         * @param  {function} fnFunction
         *     Event handler to be detached.
         *
         * @methodOf sap.ushell.services.Container#
         * @name detachLogoutEvent
         * @since 1.19.1
         * @public
         */
        this.detachLogoutEvent = function (fnFunction) {
            oLogoutEventProvider.detachEvent("Logout", fnFunction);
        };


        /**
         * Logs out the current user from all relevant back-end systems, including the logon system
         * itself.
         *
         * @returns {jQuery.Deferred}
         *          A <code>jQuery.promise</code> to be resolved when logout is finished, even when it fails.
         *
         * @methodOf sap.ushell.services.Container#
         * @name logout
         * @since 1.15.0
         * @public
         */
        this.logout = function () {
            var oDeferred = new jQuery.Deferred();

            function resolve() {
                oAdapter.logout(true).always(function () {
                    oLocalStorage.removeItem(sSessionTerminationKey);
                    oDeferred.resolve();
                });
            }

            function logoutLogonSystem() {
                if (oLogoutEventProvider.fireEvent("Logout", true)) {
                    resolve();
                } else {
                    // defer UShell redirect to let NWBC receive message asynchronously
                    setTimeout(resolve, 1000);
                }
            }

            function federatedLogout() {
                var mRemoteSystems,
                    aRemoteLogoutPromises = [];

                if (fnStorageEventListener) {
                    // IE sends localStorage events also to the issuing window, -
                    // this is not needed hence we remove the listener in general at that point
                    window.removeEventListener('storage', fnStorageEventListener);
                }

                sap.ushell.utils.localStorageSetItem(sSessionTerminationKey, "pending");
                suppressOData();
                mRemoteSystems = getRemoteSystems();
                Object.keys(mRemoteSystems).forEach(function (sAlias) {
                    try {
                        aRemoteLogoutPromises.push(
                            createAdapter("Container", mRemoteSystems[sAlias]).logout(false)
                        );
                    } catch (e) {
                        jQuery.sap.log.warning("Could not create adapter for " + sAlias,
                            e.toString(), "sap.ushell.Container");
                    }
                    oLocalStorage.removeItem(sRemoteSystemPrefix + sAlias);
                });
                // wait for all remote system logouts to be finished
                // Note: We use done() and not always(), and we require all adapters to resolve
                // their logout(false) in any case. If we use always() and any adapter's promise is
                // rejected, the deferred object from when() is *immediately* rejected, too. Then
                // the redirect happens before all remote logouts are finished.
                // TODO force logoutLogonSystem after timeout?
                jQuery.when.apply(jQuery, aRemoteLogoutPromises).done(logoutLogonSystem);
            }

            if (typeof oAdapter.addFurtherRemoteSystems === 'function') {
                oAdapter.addFurtherRemoteSystems().always(federatedLogout);
            } else {
                federatedLogout();
            }

            return oDeferred.promise();
        };

        /**
         * Determines the current logon frame provider for the entire Unified Shell. Initially,
         * a rudimentary default provider is active and should be replaced as soon as possible
         * by the current renderer.
         * <p>
         * A logon frame provider is used to facilitate user authentication even for requests sent
         * via <code>XMLHttpRequest</code>. It is called back in order to create a hidden
         * <code>IFRAME</code>, to show it to the user, then to hide and destroy it. The frame
         * must be treated as a black box by the provider; especially with respect to the source of
         * the frame which is managed by the Unified Shell framework. Showing the frame might
         * require user interaction and some decoration around the frame. The frame should be
         * destroyed, not reused, to be on the safe side. Note that in typical cases with SAML2,
         * authentication happens automatically and the frame can stay hidden.
         * <p>
         * The following order of method calls is guaranteed:
         * <ol>
         *   <li> The <code>create</code> method is called first.
         *   <li> The <code>show</code> method may be called next (if there is HTML code to
         *   display).
         *   <li> The <code>destroy</code> method is called last.
         *   <li> A new cycle may start for a new logon process.
         * </ol>
         *
         * @param {object} oLogonFrameProvider
         *   The new logon frame provider which needs to implement at least the methods documented
         *   here.
         * @param {function} oLogonFrameProvider.create
         *   A function taking no arguments and returning a DOM reference to an empty
         *   <code>IFRAME</code> which is initially hidden.
         *   The frame must not be moved around in the DOM later on. Make sure to add all necessary
         *   parent objects immediately, to render SAPUI5 controls as needed, and to return the DOM
         *   reference synchronously.
         * @param {function} oLogonFrameProvider.destroy
         *   A function taking no arguments which hides and destroys the current frame.
         * @param {function} oLogonFrameProvider.show
         *   A function taking no arguments which is called to indicate that the current frame
         *   probably needs to be shown to the user because interaction is required. Note that
         *   there may be false positives here. It is up to the provider how and when the frame
         *   is shown exactly; make sure to provide a good user interaction design here.
         *
         * @methodOf sap.ushell.services.Container#
         * @name setLogonFrameProvider
         * @since 1.21.2
         * @public
         * @see sap.ushell.services.Container#cancelLogon
         */
        this.setLogonFrameProvider = function (oLogonFrameProvider) {
            if (this.oFrameLogonManager) {
                this.oFrameLogonManager.setLogonFrameProvider(oLogonFrameProvider);
            }
        };

        /**
         * The function returns a promise which will be resolved once all User Default bootstrap
         * plugins components have been loaded and their promises resolved. A plugin is
         * considered to be relevant for the User Defaults scenario if it specifies a parameter
         * with name sapUshellpluginType and value UserDefaults.
         * The function is marked as private and is only intended for internal use by the
         * UserDefaultParameter service.
         *
         *  @returns {jQuery.Deferred.promise}
         *    The returned promise will be resolved once all plugin components have been loaded.
         *  @since 1.32
         *  @private
         */
        this.getUserDefaultPluginsPromise = function () {
            return oUserDefaultPluginsDeferred.promise();
        };


        // constructor code -------------------------------------------------------
        oUserDefaultPluginsDeferred = new jQuery.Deferred();
        // loose coupling to allow re-use from sap.ui2.srvc.Catalog#addSystemToServiceUrl
        sap.ui.getCore().getEventBus().subscribe("sap.ushell.Container",
            "addRemoteSystemForServiceUrl", function (sChannelId, sEventId, oData) {
                that.addRemoteSystemForServiceUrl(oData);
            });
        // register event handler for storage events issued by other UShell windows
        if (typeof oAdapter.logoutRedirect === 'function') {
            fnStorageEventListener = function (oStorageEvent) {
                function closeAndRedirectWindow() {
                    // Most browsers do not allow closing windows via JS that aren't opened via JS
                    // hence we additionally redirect to get these manually opened windows
                    // redirected at least.
                    // NOTE: It is important to NOT redirect to  "/sap/public/bc/icf/logoff"
                    // because on iPad Safari e.g. the event is not processed until the window gets
                    // the focus. This would terminate any new session opened in between.
                    closeWindow();
                    redirectWindow();
                }
                if (sap.ushell.Container !== that) {
                    // In integration test suite, old listeners remain which do not belong to the
                    // current sap.ushell.Container instance. IE sends events also to own window.
                    // Then these old listeners react as if a remote window logged out...
                    return;
                }
                // IE9 seems to get the events, but not the values in another window!?
                if (oStorageEvent.key.indexOf(sRemoteSystemPrefix) === 0
                        && oStorageEvent.newValue
                        && oStorageEvent.newValue !== oLocalStorage.getItem(oStorageEvent.key)) {
                    sap.ushell.utils.localStorageSetItem(oStorageEvent.key, oStorageEvent.newValue);
                }
                if (oStorageEvent.key === sSessionTerminationKey) {
                    if (oStorageEvent.newValue === "pending") {
                        suppressOData();
                        if (oLogoutEventProvider.fireEvent("Logout", true)) {
                            closeAndRedirectWindow();
                        } else {
                            // defer UShell closeWindow to let NWBC receive message asynchronously
                            setTimeout(closeAndRedirectWindow, 1000);
                        }
                    }
                }
            };
            window.addEventListener('storage', fnStorageEventListener);
        }
    }

    /**
     * Initializes the Unified Shell container for the given platform. This method must be called
     * exactly once in the very beginning by platform-specific code in order to bootstrap the
     * container. As soon as the returned promise has been resolved, the container will be available
     * as a singleton object <code>sap.ushell.Container</code>.
     * <p>
     * For convenience, platform-specific bootstrap code is available and can be easily included
     * (<b>before</b> the SAPUI5 bootstrap) by a corporate shell as follows:
     * <pre>
     * &lt;script src="/sap/public/bc/ui5_ui5/resources/sap/ushell_abap/bootstrap/abap.js"&gt;&lt;/script&gt;
     * &lt;script id="sap-ui-bootstrap" src=".../sap-ui-core.js"&gt;&lt;/script&gt;
     * </pre>
     * This bootstrap code will automatically defer the initialization of SAPUI5 until the
     * container is available. This is the preferred way of bootstrapping the Unified Shell.
     * <p>
     * Note: For SAPUI5 application projects the recommended way is to add a dependency to the
     * "sap.ushell_abap" library (<code>&lt;groupId&gt;com.sap.ushell&lt;/groupId&gt;
     * &lt;artifactId&gt;ushell_abap&lt;/artifactId&gt;</code>) and load the bootstrap code via the
     * application's resources folder:
     * <pre>
     * &lt;script src=".../resources/sap/ushell_abap/bootstrap/abap.js"&gt;&lt;/script&gt;
     * &lt;script id="sap-ui-bootstrap" src=".../sap-ui-core.js"&gt;&lt;/script&gt;
     * </pre>
     * <p>
     * Since 1.15.0 you can provide the function
     * <code>window['sap.ushell.bootstrap.callback']</code> for calling back from this method
     * asynchronously. SAPUI5's bootstrap is ongoing then. The same restrictions apply
     * as for the function <code>window['sap-ui-config']['xx-bootTask']</code>) when the Unified
     * Shell container has not yet finished its bootstrap. You cannot delay the bootstrap of SAPUI5
     * or the Unified Shell container; any errors are ignored. This callback is useful for
     * sending asynchronous back-end requests at the earliest opportunity without delaying
     * the core bootstrap of SAPUI5 and the Unified Shell container.
     *
     * @param {string} sPlatform
     *     the target platform, such as "abap" or "local" (Note: there is no fixed enumeration of
     *     possible platforms)
     * @param {map<string, string>} [mAdapterPackagesByPlatform={}]
     *     the map with platform specific package names for the service adapters.
     *     You only need to specify these package names, if they differ from the standard name
     *     <code>"sap.ushell.adapters." + sPlatform</code>.
     * @returns {jQuery.Promise}
     *     a promise that is resolved once the container is available
     *
     * @since 1.15.0
     * @see sap.ushell.Container
     * @public
     */
    sap.ushell.bootstrap = function (sPlatform, mAdapterPackagesByPlatform) {
        var oAdapter,
            oError;

        if (sap.ushell.Container !== undefined) {
            oError = new Error("Unified shell container is already initialized - cannot initialize twice.\nStacktrace of first initialization:" + sFirstInitStack);
            jQuery.sap.log.error(oError,
                oError.stack,  // stacktrace not only available for all browsers
                S_COMPONENT_NAME);
            throw oError;
        }
        sap.ushell.Container = null; // "loading..."
        sFirstInitStack = (new Error()).stack;	// remember stack trace of first initializon for debugging

        // remember the configuration independently of window["sap-ushell-config"]
        oConfig = JSON.parse(JSON.stringify(window["sap-ushell-config"] || {}));

        // remember the platform package names
        mPlatformPackages = mAdapterPackagesByPlatform;

        if (typeof window["sap.ushell.bootstrap.callback"] === "function") {
            setTimeout(window["sap.ushell.bootstrap.callback"]);
        }

        if (oConfig.modulePaths) {
            Object.keys(oConfig.modulePaths).forEach(function (sModuleName) {
                jQuery.sap.registerModulePath(sModuleName, oConfig.modulePaths[sModuleName]);
            });
        }

        oAdapter = createAdapter("Container", new sap.ushell.System({
            // this is the initial logon system object
            alias: "",
            platform: oConfig.platform || sPlatform
        }));

        return oAdapter.load().done(function () {
            /**
             * The Unified Shell container as a singleton object. This object will only be
             * available after <code>sap.ushell.bootstrap()</code> has finished.
             *
             * @since 1.15.0
             * @type sap.ushell.services.Container
             * @see sap.ushell.bootstrap
             * @public
             */
            sap.ushell.Container = new Container(oAdapter);
            initBootstrapPlugins(oConfig);
        });
    };
}());

}; // end of sap/ushell/services/Container.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.EndUserFeedback') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview The EndUserFeedback service.
 */
(function () {
    "use strict";
    /*global jQuery, sap, localStorage, window, setTimeout, URI*/
    /*jslint regexp: true*/
    jQuery.sap.declare("sap.ushell.services.EndUserFeedback");

    /**
     * Returns the property value of the object by value path
     *
     * @return {string} returns the property value or empty string if it does not exist
     *
     * @public
     * @since 1.25.1
     */
    function getPropertyValueOrEmptyString(sPropertyValuePath, oObject) {
        return jQuery.sap.getObject(sPropertyValuePath, undefined, oObject) || "";
    }

    /**
     * This method MUST be called by the Unified Shell's container only, others
     * MUST call <code>sap.ushell.Container.getService("EndUserFeedback")</code>.
     * Constructs a new instance of the end user feedback service.
     *
     * @param {object}
     *            oAdapter the service adapter for the end user feedback service,
     *            as already provided by the container
     * @param {object}
     *            oContainerInterface the interface provided by the container
     * @param {string}
     *            sParameters the runtime configuration specified in the
     *            <code>sap.ushell.Container.getService()</code> call (not
     *            evaluated yet)
     * @param {object}
     *            oServiceConfiguration the service configuration defined in the
     *            bootstrap configuration; the boolean property
     *            <code>enabled</code> controls the service enablement
     *
     * This service is enabled by default. It can be disabled explicitly in the
     * bootstrap configuration of the start page:
     * <pre>
     * window[&quot;sap-ushell-config&quot;] = {
     *     services: {
     *         EndUserFeedback: {
     *             config: {
     *                 enabled: true
     *             }
     *         }
     *     }
     * }
     *
     * Platform implementations can also enable it dynamically by modification of the
     * bootstrap configuration during boot time.
     *
     * @class The Unified Shell's end user feedback service
     *
     * @public
     * @constructor
     * @see sap.ushell.services.Container#getService
     *
     * @since 1.25.1
     *
     */
    sap.ushell.services.EndUserFeedback = function (oAdapter, oContainerInterface, sParameters, oServiceConfiguration) {
        var oServiceConfig = (oServiceConfiguration && oServiceConfiguration.config) || {};

        /**
         * Sends a feedback. Forwards the given data (JSON object) to the associated adapter.
         *
         * @param {JSON} JSON object containing the input fields required for the end user feedback.
         *
         * @public
         * @since 1.25.1
         */
        this.sendFeedback = function (oEndUserFeedbackData) {
            var sUrl, sNavigationIntent, sAdditionalInformation, sApplicationType, oEndUserFeedbackAdapterData, sFormFactor, sUserId, seMail, feedbackText;
            sUrl = getPropertyValueOrEmptyString("clientContext.navigationData.applicationInformation.url", oEndUserFeedbackData);
            sNavigationIntent = getPropertyValueOrEmptyString("clientContext.navigationData.navigationHash", oEndUserFeedbackData);
            sAdditionalInformation = getPropertyValueOrEmptyString("clientContext.navigationData.applicationInformation.additionalInformation", oEndUserFeedbackData);
            sApplicationType = getPropertyValueOrEmptyString("clientContext.navigationData.applicationInformation.applicationType", oEndUserFeedbackData);
            sFormFactor = getPropertyValueOrEmptyString("clientContext.navigationData.formFactor", oEndUserFeedbackData);
            sUserId = getPropertyValueOrEmptyString("clientContext.userDetails.userId", oEndUserFeedbackData);
            seMail = getPropertyValueOrEmptyString("clientContext.userDetails.eMail", oEndUserFeedbackData);
            feedbackText = oEndUserFeedbackData.feedbackText || "";

            oEndUserFeedbackAdapterData = {
                feedbackText: feedbackText.slice(0, 2000), // feedback text is trimmed to 2000 chars. not a reasonable scenario, but may happen.
                ratings: oEndUserFeedbackData.ratings || {},
                additionalInformation : sAdditionalInformation,
                applicationType : sApplicationType,
                url: sUrl ? this.getPathOfURL(sUrl) : "", //reason: parameters could contain sensitive data
                navigationIntent: sNavigationIntent.replace(/\?.*$/, ''),
                formFactor: sFormFactor,
                isAnonymous: oEndUserFeedbackData.isAnonymous || false,
                userId : oEndUserFeedbackData.isAnonymous ? "" : sUserId,
                eMail : oEndUserFeedbackData.isAnonymous ? "" : seMail
            };
            return oAdapter.sendFeedback(oEndUserFeedbackAdapterData);
        };

        /**
         * Receives the legal text for the feedback dialog box
         *
         * @param
         *
         * @public
         * @since 1.25.1
         */
        this.getLegalText = function () {
            return oAdapter.getLegalText();
        };
        /**
         * Checks if the service is enabled.
         * <p>
         * The service enablement depends on the configuration in the back-end system and the bootstrap configuration.
         *
         * @return {Object} Promise, done = if the service is enabled;
         *
         * @public
         * @since 1.25.1
         */
        this.isEnabled = function () {
            var oDeferred = new jQuery.Deferred();
            // if disabled via config -> reject
            if (oServiceConfig.enabled === false) {
                setTimeout(function () {
                    oDeferred.reject();
                }, 0);
                return oDeferred.promise();
            }
            //else : ask adapter
            oAdapter.isEnabled()
                .done(function (sLegalText) {
                    oDeferred.resolve();
                })
                .fail(function (sErrorText) {
                    oDeferred.reject();
                });
            return oDeferred.promise();
        };

        /**
         * Returns the path of the given URL (based on URI-API).
         *
         * @return {string} Path of the given URL
         *
         * @private
         * @since 1.30.0
         */
        this.getPathOfURL = function (sURL) {
             var oURI = new URI(sURL);
             return oURI.pathname();
        };

    };

}());

}; // end of sap/ushell/services/EndUserFeedback.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.LaunchPage') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview The Unified Shell's page builder service.
 *
 * @version 1.32.6
 */
(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.services.LaunchPage");

    /**
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.Container.getService("LaunchPage")</code>.
     * Constructs a new instance of the page builder service.
     *
     * @class A service for handling groups, tiles and catalogs.
     * The functions that return the main objects are getGroups, getGroupTitle, getCatalogs and getCatalogTiles.
     * Since the implementation (i.e. adapter) is platform specific, do not call or access properties and functions of returned objects.
     * Instead, use other functions of the LaunchPage service with the relevant object as the input parameter.
     *
     * @param {object} oAdapter
     *     the page builder adapter for the logon system
     * @param {object} oContainerInterface
     *     the interface provided by the container
     *
     * @class The Unified Shell's page builder service.
     *
     * @constructor
     * @see sap.ushell.services.Container#getService
     * @since 1.15.0
     *
     * @public
     */
    sap.ushell.services.LaunchPage = function (oAdapter, oContainerInterface) {
        var that = this,
            aTileActionsProviders = [];

        // this is only to expose TMs to the ClientSideResolution Adapter
        // in the end, the ClientSideResolutionAdapter should obtain the TMS
        // and expose its (or the check functionality) to the adapter / service
        // this method is private and may be removed any time!
        /**
         * Internal use only, experimental, may be removed any time
         * @returns {object} not specified
         * @private
         */
        this._getAdapter = function() {
            return oAdapter;
        };
        /**
         * Returns the groups of the user.
         * In case of success, the <code>done</code> function gets an array of 'anonymous' groups.
         * The order of the array is the order in which the groups will be displayed to the user.
         *
         * @returns {object}
         *  jQuery.promise object.
         *
         * @public
         */
        this.getGroups = function () {
            var oPromise = oAdapter.getGroups();
            oPromise.fail(function () {
                jQuery.sap.log.error("getGroups failed");
            });
            return oPromise;
        };

        /**
         * Returns the default group of the user.
         * In case of success, the <code>done</code> function gets an 'anonymous' object representing the default group.
         *
         * @returns {object}
         *  jQuery.promise object.
         *
         * @public
         */
        this.getDefaultGroup = function () {
            var oPromise  = oAdapter.getDefaultGroup();
            oPromise.fail(function () {
                jQuery.sap.log.error("getDefaultGroup failed");
            });
            return oPromise;
        };

        /**
         * Returns the title of the given group.
         *
         * @param {object} oGroup
         *     The group whose title is returned
         * @returns {string}
         *  group title
         *
         * @public
         */
        this.getGroupTitle = function (oGroup) {
            return oAdapter.getGroupTitle(oGroup);
        };

        /**
         * Returns the unique identifier of the given group
         *
         * @param {object} oGroup
         *     The group whose id is returned
         * @returns {string}
         *  Group id
         *
         * @public
         */
        this.getGroupId = function (oGroup) {
            return oAdapter.getGroupId(oGroup);
        };

        /**
         * Returns an array of 'anonymous' tiles of a group.
         * The order of the array is the order of tiles that will be displayed to the user.
         *
         * @param {object} oGroup
         *     The group whose tiles are returned
         *
         * @returns {Array}
         *  The group tiles array
         *
         * @public
         */
        this.getGroupTiles = function (oGroup) {
            return oAdapter.getGroupTiles(oGroup);
        };

        /**
         * Returns an array of link tiles for a group.
         * The order of the array is the order in which the links will be displayed to the user.
         *
         * @param {object} oGroup
         *     The group whose link tiles are returned
         *
         * @returns {Array}
         *  The array of link tiles
         *
         * @public
         */
        this.getLinkTiles = function (oGroup) {
            return oAdapter.getLinkTiles(oGroup);
        };



        /**
         * Adds a new group at a specific location.
         *
         * In case of success, the <code>done</code> function gets the new added group object.
         * Intention: the page builder adds this group to the specific location on the home screen.
         *
         * In case of failure, the <code>fail</code> function returns the consistent (i.e. persisted) backend state of all groups.
         *
         * @param {string} sTitle
         *     The title of the new group
         *
         * @param {integer} iIndex
         *     the location of the new group
         *
         * @returns {object}
         *  jQuery.promise object
         *
         * @public
         */
        this.addGroupAt = function (sTitle, iIndex) {
            var oPromise, index = iIndex;

            if (oAdapter.addGroupAt) {
                oPromise = oAdapter.addGroupAt(sTitle, iIndex);
                oPromise.fail(function () {
                    jQuery.sap.log.error("addGroup " + sTitle + " failed");
                });
            } else {
                var oDeferred = new jQuery.Deferred();

                oPromise = oAdapter.addGroup(sTitle);
                oPromise.done(function (oNewGroup, sGroupId) {
                    var movePromise = this.moveGroup(oNewGroup, index),
                        newGroup = oNewGroup;
                    movePromise.done(function () {
                        oDeferred.resolve(newGroup);
                    });
                    movePromise.fail(function () {
                        oDeferred.reject();
                    });
                }.bind(this));

                oPromise.fail(function () {
                    jQuery.sap.log.error("addGroup " + sTitle + " failed");
                    oDeferred.reject();
                });

                return oDeferred.promise();
            }

            return oPromise;
        };

        /**
         * Adds a new group.
         *
         * In case of success, the <code>done</code> function gets the new added group object.
         * Intention: the page builder adds this group to the end of the home screen.
         *
         * In case of failure, the <code>fail</code> function returns the consistent (i.e. persisted) backend state of all groups.
         *
         * @param {string} sTitle
         *     The title of the new group
         *
         * @returns {object}
         *  jQuery.promise object
         *
         * @public
         */
        this.addGroup = function (sTitle) {
            var oPromise = oAdapter.addGroup(sTitle);
            oPromise.fail(function () {
                jQuery.sap.log.error("addGroup " + sTitle + " failed");
            });
            return oPromise;
        };

        /**
         * Removes a group.
         *
         * In case of success, the <code>done</code> function is called without any value (i.e. input data).
         * Intention: the page builder already removed the page (or hid it from the user) and if successful - nothing needs to be done.
         *
         * In case of failure, the <code>fail</code> function returns the consistent (i.e. persisted) backend state of all groups.
         *
         * @param {object} oGroup
         *     The group to be removed
         * @param {integer} iIndex
         *     The index of the group to be removed
         *
         * @returns {object}
         *  jQuery.promise object
         *
         * @public
         */
        this.removeGroup = function (oGroup, iIndex) {
            var oPromise = oAdapter.removeGroup(oGroup, iIndex);
            oPromise.fail(function () {
                jQuery.sap.log.error("Fail to removeGroup " + that.getGroupTitle(oGroup));
            });
            return oPromise;
        };

        /**
         * Resets a group.
         *
         * The reset action is relevant for a group that was assigned to the user by an administrator.
         * The reset action means that the group is set back to the state defined by the administrator,
         * and changes made by the end user (e.g. adding tiles) are removed.
         * A group can be reset multiple times.
         *
         * In case of success, the <code>done</code> function gets the reset group object.
         *
         * In case of failure, or when the given group was created by the user (i.e. can't be reset)- <code>fail</code> handler is called,
         * returning the consistent (i.e. persisted) backend state of all groups.
         * The returned group object is the same as the one returned by @see sap.ushell.services.LaunchPage.getGroups
         *
         * @param {object} oGroup
         *     The group to be reset
         * @param {integer} iIndex
         *     The index of the group to be reset
         *
         * @returns {object}
         *  jQuery.promise object
         *
         * @public
         */
        this.resetGroup = function (oGroup, iIndex) {
            var oPromise = oAdapter.resetGroup(oGroup, iIndex);
            oPromise.fail(function () {
                jQuery.sap.log.error("Fail to resetGroup " + that.getGroupTitle(oGroup));
            });
            return oPromise;
        };

        /**
         * Checks if a group can be removed.
         *
         * Returns <code>true</code> if the group can be removed (i.e. if the given group was created by the user)
         * and <code>false</code> if the group can only be reset.
         *
         * @param {object} oGroup
         *     The group to be checked
         *
         * @returns {boolean}
         *  <code>true</code> if removable; <code>false</code> if resettable
         *
         * @public
         */
        this.isGroupRemovable = function (oGroup) {
            return oAdapter.isGroupRemovable(oGroup);
        };

        /**
         * Checks if a group was marked as locked (meaning the group and its tiles will lack several capabilities such as Rename, Drag&Drop...).
         *
         * Returns <code>true</code> if the group is locked
         * and <code>false</code> if not.
         *
         * @param {object} oGroup
         *     The group to be checked
         *
         * @returns {boolean}
         *  <code>true</code> if locked; <code>false</code> if not (or as default in case the function was not implemented in the proper adapter).
         *
         * @public
         */
        this.isGroupLocked = function (oGroup) {
            if (typeof oAdapter.isGroupLocked === "function") {
                return oAdapter.isGroupLocked(oGroup);
            }
            return false;
        };
        /**
         * Moves a group to a new index (i.e. location).
         *
         * In case of success, the <code>done</code> function is called without any value.
         * Intention: the page builder already moved the page (visible to the user) and if successful - nothing needs to be done.
         * In case of failure, the <code>fail</code> function returns the consistent (i.e. persisted) backend state of all groups.
         *
         * @param {object} oGroup
         *     The group to be moved
         * @param {integer} iNewIndex
         *     The new index for the group
         * @returns {object}
         *  jQuery.promise object
         *
         * @public
         */
        this.moveGroup = function (oGroup, iNewIndex) {
            var oPromise = oAdapter.moveGroup(oGroup, iNewIndex);
            oPromise.fail(function () {
                jQuery.sap.log.error("Fail to moveGroup " + that.getGroupTitle(oGroup));
            });
            return oPromise;
        };

        /**
         * Sets the title of an existing group.
         *
         * In case of success, the <code>done</code> function returns nothing.
         * Intention: the page builder knows the new title, and if successful nothing needs to be done,
         *  as the title is already visible to the user.
         * In case of failure, the <code>fail</code> function returns the consistent (i.e. persisted) backend state
         *  of the group title, in most cases the old title.
         *
         * @param {string} sTitle
         *     The new title of the group
         * @param {object} oGroup
         *     The group whose title is set
         *
         * @returns {object}
         *  jQuery.promise object
         *
         * @public
         */
        this.setGroupTitle = function (oGroup, sTitle) {
            var oPromise = oAdapter.setGroupTitle(oGroup, sTitle);
            oPromise.fail(function () {
                jQuery.sap.log.error("Fail to set Group title: " + that.getGroupTitle(oGroup));
            });
            return oPromise;
        };

        /**
         * This function receives an array of groups IDs that were selected as hidden by the end user and stores them in the back-end for persistency.
         * Any group not in the list will become visible (again).
         *
         * @param {string[]} aHiddenGroupsIDs
         *    An Array containing the IDs of the groups that should be stored as hidden.
         * @returns {object}
         *  promise object.
         */
        this.hideGroups = function (aHiddenGroupsIDs) {
            var oDeferred = jQuery.Deferred();
            if (typeof oAdapter.hideGroups !== "function") {
                oDeferred.reject('hideGroups() is not implemented in the Adapter.');
            } else {
                oAdapter.hideGroups(aHiddenGroupsIDs).done(function () {
                    oDeferred.resolve();
                }).fail(function (sMsg) {
                        jQuery.sap.log.error("Fail to store groups visibility." + sMsg);
                        oDeferred.reject();
                    });
            }
            return oDeferred.promise();
        };

        /**
         * This function checks if a group should be visible or hidden for the specific end user.
         * An end user has the ability to configure which groups should be hidden in his dashboard (as long as edit mode is enabled).
         *
         * @param {object} oGroup
         *     A group to be checked
         * @returns {boolean} true \ false accordingly.
         */
        this.isGroupVisible = function (oGroup) {
            if (typeof oAdapter.isGroupVisible === "function") {
                return oAdapter.isGroupVisible(oGroup);
            }
            return true;
        };

        /**
         * Adds a tile to a group.
         *
         * If no group is provided then the tile is added to the default group.
         *
         * In case of success, the <code>done</code> function returns the new tile.
         * Intention: the page builder by default puts this tile at the end of the default group.
         * In case of failure, the <code>fail</code> function should return the consistent (i.e. persisted) backend state of the default group.
         *
         * @param {object} oCatalogTile
         *     An 'anonymous' tile from the tile catalog
         * @param {object} [oGroup]
         *     The target group
         *
         * @returns {object}
         *  jQuery.promise object
         *
         * @public
         */
        this.addTile = function (oCatalogTile, oGroup) {
            var oPromise = oAdapter.addTile(oCatalogTile, oGroup);
            oPromise.fail(function () {
                jQuery.sap.log.error("Fail to add Tile: " + that.getCatalogTileId(oCatalogTile));
            });
            return oPromise;
        };

        /**
         * Removes a tile from a group.
         *
         * In case of success, the <code>done</code> function returns the new tile.
         * Intention: the page builder has already 'hidden' (or removed) the tile.
         *
         * In case of failure, the <code>fail</code> function should return the consistent (i.e. persisted) backend state of the group.
         *
         * @param {object} oTile
         *     The tile instance to remove
         * @param {object} oGroup
         *     The group from which to remove the tile instance
         * @param {integer} iIndex
         *     The tile index
         *
         * @returns {object}
         *  jQuery.promise object
         *
         * @public
         */
        this.removeTile = function (oGroup, oTile, iIndex) {
            var oPromise = oAdapter.removeTile(oGroup, oTile, iIndex);
            oPromise.fail(function () {
                jQuery.sap.log.error("Fail to remove Tile: " + that.getTileId(oTile));
            });
            return oPromise;
        };

        /**
         * Moves a tile within a group or between different groups.
         *
         * In case of success, the <code>done</code> function returns nothing.
         * Intention: the page builder already moved the tile.
         *
         * In case of failure, the <code>fail</code> function returns the consistent (i.e. persisted) backend state of the source group and the target group.
         * The result is in the following format {source:[{},{}], target:[{},{}]}.
         *
         * The source and the target groups tiles are in the form of the @see sap.ushell.services.LaunchPage.getGroupTiles
         *
         * @param {object} oTile
         *     a tile instance to be moved
         *     The same object type as the one returned by <code>sap.ushell.services.LaunchPage.getGroupTiles</code>
         * @param {integer} iSourceIndex
         *     the index in the source group
         * @param {integer} iTargetIndex
         * the target group index, in case this parameter is not supplied we assume the move tile is within the source group using iSourceIndex
         * @param {object} oSourceGroup
         *     the source group the tile came from
         * @param {object} [oTargetGroup]
         *    The same object type as the one returned by <code>sap.ushell.services.LaunchPage.getGroups</code>
         *    the target group the tile will be placed in, in case this
         *     parameter is not supplied we assume the move tile is within the source group
         * @returns {object}
         *  jQuery.promise object
         *
         * @public
         */
        this.moveTile = function (oTile, iSourceIndex, iTargetIndex, oSourceGroup, oTargetGroup) {
            var oPromise = oAdapter.moveTile(oTile, iSourceIndex, iTargetIndex, oSourceGroup, oTargetGroup);
            oPromise.fail(function () {
                jQuery.sap.log.error("Fail to move Tile: " + that.getTileId(oTile)); // TODO: complete message
            });
            return oPromise;
        };

        /**
         * Returns the tile's unique identifier
         *
         * @param {object} oTile
         *     The tile
         * @returns {string}
         *     Tile id
         *
         * @public
         */
        this.getTileId = function (oTile) {
            return oAdapter.getTileId(oTile);
        };

        /**
         * Returns the tile's title.
         *
         * @param {object} oTile
         *     The tile
         * @returns {string}
         *     The title
         *
         * @public
         */
        this.getTileTitle = function (oTile) {
            return oAdapter.getTileTitle(oTile);
        };

        /**
         * Returns the tile's type.
         *
         * @param {object} oTile
         *     The tile
         * @returns {string}
         *     The type
         *
         * @public
         */
        this.getTileType = function (oTile) {
            if (oAdapter.getTileType) {
                return oAdapter.getTileType(oTile);
            }
            return 'tile';
        };

        /**
         * Returns UI5 view or control of the tile.
         * In case of success the <code>done</code> function should return UI5 view or control of the tile.
         * In case of failure the <code>fail</code> function should return nothing.
         *
         * @param {object} oTile
         *     The tile
         *
         * @returns {object}
         *  jQuery.promise object
         *
         * @public
         */
        this.getTileView = function (oTile) {
            var oDfd = oAdapter.getTileView(oTile);
            /**
             * API has change to return a promise object instead the tile view since 1.24 version.
             * For backwards compatibility we check if the adapter has return a promise object,
             * if not we create one resolve it with the tile view and return the promise
             */
            if (!jQuery.isFunction(oDfd.promise)){
                oDfd = jQuery.Deferred().resolve(oDfd).promise();
            }
            return oDfd;
        };

        /**
         * Returns the tile size in the format of 1x1 or 1x2 string
         *
         * @param {object} oTile
         *     The tile
         *
         * @returns {string}
         *  tile size in units in 1x1 format
         *
         * @public
         */
        this.getTileSize = function (oTile) {
            return oAdapter.getTileSize(oTile);
        };

        /**
         * Returns the tile's navigation target.
         *
         * The navigation target string is used (when assigned to <code>location.hash</code>) for performing a navigation action
         *  that eventually opens the application represented by the tile.
         *
         * @param {object} oTile
         *     the tile
         * @returns {string}
         *  the tile target
         *
         * @public
         */
        this.getTileTarget = function (oTile) {
            return oAdapter.getTileTarget(oTile);
        };

        /**
         * Returns the technical information about the tile which can be helpful for problem analysis.
         * <p>
         * The implementation of this method in the platform-specific adapter is optional.
         *
         * @param {object} oTile
         *     the tile
         * @returns {string}
         *     debug information for the tile
         */
        this.getTileDebugInfo = function (oTile) {
            if (typeof oAdapter.getTileDebugInfo === "function") {
                return oAdapter.getTileDebugInfo(oTile);
            }

            return undefined;
        };

        /**
         * Returns <code>true</code> if the tile's target intent is supported taking into account
         * the form factor of the current device. "Supported" means that navigation to the intent
         * is possible.
         * <p>
         * This function may be called both for group tiles and for catalog tiles.
         *
         * @param {object} oTile
         *   the group tile or catalog tile
         * @returns {boolean}
         *   <code>true</code> if the tile's target intent is supported
         * @since 1.21.0
         */
        this.isTileIntentSupported = function (oTile) {
            if (typeof oAdapter.isTileIntentSupported === "function") {
                return oAdapter.isTileIntentSupported(oTile);
            }

            return true;
        };

        /**
         * Triggers a refresh action of a tile.
         * Typically this action is related to the value presented in dynamic tiles
         *
         * @param {object} oTile
         *      The tile
         *
         * @public
         */
        this.refreshTile = function (oTile) {
            oAdapter.refreshTile(oTile);
        };

        /**
         * Sets the tile's visibility state and notifies the tile about the change.
         *
         * @param {object} oTile
         *     The tile
         * @param {boolean} bNewVisible
         *   The tile's required visibility state.
         *
         * @public
         */
        this.setTileVisible = function (oTile, bNewVisible) {
            return oAdapter.setTileVisible(oTile, bNewVisible);
        };

        /**
         * Register an external tile actions provider callback function.
         *
         * The callback has to return an array of actions of the given tile. The callback is triggered when
         * @see sap.ushell.services.LaunchPage.getTileActions is called.
         *
         * Tile actions are additional operations that can be executed on a tile, and can be provided by
         * external providers.
         *
         * A tile action is an object with the following properties: text, icon and targetURL or a press handler.
         *
         * Tile actions should be returned immediately without any additional server access in order
         * to avoid delays in rendering the action list in the browser.
         *
         * @example of a tile actions provider callback:
         * <code>
         *     function (oTile){
         *          return [
         *                  {
         *                      text: "Some Action",
         *                      icon: "sap-icon://action",
         *                      targetURL: "#SemanticObject-Action"
         *                  },
         *                  {
         *                      text: "Settings",
         *                      icon: "sap-icon://action-settings",
         *                      press: function (){
         *                          //Open settings UI
         *                      }
         *                  }
         *              ];
         *       }
         * </code>.
         *
         *
         * Use <code>Function.prototype.bind()</code> to determine the callback's <code>this</code> or
         * some of its arguments.
         *
         * @param {Object} fnProvider
         *  A callback which returns an array of action objects.
         *
         * @public
         */
        this.registerTileActionsProvider = function (fnProvider){
            if (typeof fnProvider !== 'function') {
                throw new Error("Tile actions Provider is not a function");
            }
            aTileActionsProviders.push(fnProvider);
        };

        /**
         * Returns internal and external tile actions.
         * Tile actions can be provided by external providers registered using
         * @see sap.ushell.services.LaunchPage.registerTileActionsProvider,
         * and by internal provider that can provide tile actions
         * from the underlying implementation (i.e. adapter)
         *
         * @param oTile
         *      the tile
         * @returns {Array}
         *      tile actions
         */
        this.getTileActions = function (oTile){
            var aTileActions = [];
            var aActions;

            if (typeof oAdapter.getTileActions === 'function'){
                aActions = oAdapter.getTileActions(oTile);
                if (aActions && aActions.length && aActions.length > 0){
                    aTileActions.push.apply(aTileActions, aActions);
                }
            }

            for (var i = 0; i < aTileActionsProviders.length; i++){
                aActions = aTileActionsProviders[i](oTile);
                if (aActions && aActions.length && aActions.length > 0){
                    aTileActions.push.apply(aTileActions, aActions);
                }
            }

            return aTileActions;
        };

        /**
         * Returns the catalogs of the user.
         *
         * <p>
         * Only severe failures make the overall operation fail. If loading of a remote catalog fails,
         * this is handled gracefully by providing a "dummy" empty catalog (with ID instead of title).
         * Use {@link getCatalogError} to check if a (remote) catalog could not be loaded from the backend.
         * <p>
         * Progress notifications are sent for each single catalog, i.e. attaching a <code>progress</code> handler gives you the same
         * possibilities as attaching a <code>done</code> handler, but with the advantage of
         * improved responsiveness.
         *
         * @example
         *   sap.ushell.Container.getService("LaunchPage").getCatalogs()
         *   .fail(function (sErrorMessage) { // string
         *     // handle error situation
         *   })
         *   .progress(function (oCatalog) { // object
         *     // do s.th. with single catalog
         *   })
         *   .done(function (aCatalogs) { // object[]
         *     aCatalogs.forEach(function (oCatalog) {
         *       // do s.th. with single catalog
         *     });
         *   });
         *
         * @returns {object}
         *  <code>jQuery.Deferred</code> object's promise
         *   In case of success, an array of black-box catalog objects is provided (which might be empty).
         *   In case of failure, an error message is passed.
         *   Progress notifications are sent for each single catalog, providing a single black-box catalog object each time.
         *
         * @public
         */
        this.getCatalogs = function () {
            return oAdapter.getCatalogs();
        };

        /**
         * Returns whether the catalogs collection previously returned by <code>getCatalogs()</code> is still valid.
         *
         * Initially the result is <code>false</code> until <code>getCatalogs()</code> has been called.
         * Later, the result might be <code>false</code> again in case one of the catalogs has been invalidated,
         * e.g. due to adding a tile to a catalog ("Add to catalog" scenario).
         *
         * @returns {boolean} <code>true</code> in case the catalogs are still valid; <code>false</code> if not
         *
         * @since 1.16.4
         * @see #getCatalogs
         *
         * @public
         */
        this.isCatalogsValid = function () {
            return oAdapter.isCatalogsValid();
        };

        /**
         * Returns catalog's technical data.
         *
         * @param {object} oCatalog
         *     the catalog
         *
         * @returns {object}
         *     An object that includes the following properties (the list may include additional properties):
         *     <ul>
         *     <li><code>id</code>: the catalog ID
         *     <li><code>systemId</code>: [remote catalogs] the ID of the remote system
         *     <li><code>remoteId</code>: [remote catalogs] the ID of the catalog in the
         *       remote system
         *     <li><code>baseUrl</code>: [remote catalogs] the base URL of the catalog in the
         *       remote system
         *     </ul>
         *
         * @since 1.21.2
         *
         * @public
         */
        this.getCatalogData = function (oCatalog) {
            if (typeof oAdapter.getCatalogData !== "function") {
                jQuery.sap.log.warning("getCatalogData not implemented in adapter", null,
                    "sap.ushell.services.LaunchPage");
                return {
                    id: this.getCatalogId(oCatalog)
                };
            }
            return oAdapter.getCatalogData(oCatalog);
        };

        /**
         * Returns the catalog's technical error message in case it could not be loaded from the
         * backend.
         * <p>
         * <b>Beware:</b> The technical error message is not translated!
         *
         * @param {object} oCatalog
         *     the catalog
         * @returns {string}
         *     The technical error message or <code>undefined</code> if the catalog was loaded
         *     properly
         * @since 1.17.1
         *
         * @public
         */
        this.getCatalogError = function (oCatalog) {
            return oAdapter.getCatalogError(oCatalog);
        };

        /**
         * Returns the catalog's unique identifier
         *
         * @param {object} oCatalog
         *     The catalog
         *
         * @returns {string}
         *  Catalog id
         *
         * @public
         */
        this.getCatalogId = function (oCatalog) {
            return oAdapter.getCatalogId(oCatalog);
        };

        /**
         * Returns the catalog's title
         *
         * @param {object} oCatalog
         *     The catalog
         *
         * @returns {string}
         *  Catalog title
         *
         * @public
         */
        this.getCatalogTitle = function (oCatalog) {
            return oAdapter.getCatalogTitle(oCatalog);
        };

        /**
         * Returns the tiles of a catalog.
         * In case of success, the <code>done</code> function of the returned promise object gets an array of 'anonymous' tiles of the catalog.
         *
         * @param {object} oCatalog
         *     The catalog
         *
         * @returns {object}
         *  jQuery.promise object.
         *
         * @public
         */
        this.getCatalogTiles = function (oCatalog) {
            var oPromise = oAdapter.getCatalogTiles(oCatalog);
            oPromise.fail(function () {
                jQuery.sap.log.error("Fail to get Tiles of Catalog: " + that.getCatalogTitle(oCatalog));
            });
            return oPromise;
        };

        /**
         * Returns catalog tile's unique identifier.
         * This function may be called for a catalog tile or (since 1.21.0) for a group tile.
         * In the latter case, the function returns the unique identifier of the catalog tile on which the group tile is based.
         *
         * @param {object} oTile
         *     The tile or the catalog tile
         *
         * @returns {string}
         *  Tile id
         *
         * @public
         */
        this.getCatalogTileId = function (oTile) {
            return oAdapter.getCatalogTileId(oTile);
        };

        /**
         * Returns the catalog tile's title
         *
         * @param {object} oCatalogTile
         *     The catalog tile
         *
         * @returns {string}
         *  Tile title
         *
         * @public
         */
        this.getCatalogTileTitle = function (oCatalogTile) {
            return oAdapter.getCatalogTileTitle(oCatalogTile);
        };

        /**
         * Returns the size of a catalog tile as a string. For example: "1x1", "1x2"
         *
         * @param {object} oCatalogTile
         *     The catalog tile
         *
         * @returns {string}
         *  Tile size in units in 1x1 or 1x2 format
         *
         * @public
         */
        this.getCatalogTileSize = function (oCatalogTile) {
            return oAdapter.getCatalogTileSize(oCatalogTile);
        };

        /**
         * Returns the UI5 view or control  of a catalog tile
         *
         * @param {object} oCatalogTile
         *     The catalog tile
         *
         * @returns {object}
         *  UI5 view or control
         *
         * @public
         */
        this.getCatalogTileView = function (oCatalogTile) {
            return oAdapter.getCatalogTileView(oCatalogTile);
        };

        /**
         * Returns the navigation target URL of a catalog tile.
         * If the catalog tile does not exist, this function implicitly instantiates it using {@link #getCatalogTileView(oCatalogTile)}.
         *
         * @param {object} oCatalogTile
         *     The catalog tile
         *
         * @returns {string}
         *     The target URL for the catalog tile's underlying application as provided via the
         *     "preview" contract
         *
         * @public
         */
        this.getCatalogTileTargetURL = function (oCatalogTile) {
            return oAdapter.getCatalogTileTargetURL(oCatalogTile);
        };

        /**
         * Returns the tags associated with a catalog tile which can be used to find the
         * catalog tile in a tag filter.
         *
         * @param {object} oCatalogTile
         *      The catalog tile
         *
         * @returns string[]
         *      The tags associated with this catalog tile
         *
         * @public
         */
        this.getCatalogTileTags = function (oCatalogTile) {
            if (typeof oAdapter.getCatalogTileTags === "function") {
                return oAdapter.getCatalogTileTags(oCatalogTile);
            }

            return [];
        };

        /**
         * Returns the keywords associated with a catalog tile which can be used to find the
         * catalog tile in a search.
         *
         * @param {object} oCatalogTile
         *      The catalog tile
         *
         * @returns string[]
         *      The keywords associated with this catalog tile
         *
         * @public
         */
        this.getCatalogTileKeywords = function (oCatalogTile) {
            return oAdapter.getCatalogTileKeywords(oCatalogTile);
        };

        /**
         * Returns preview title for a catalog tile.
         *
         * @param {object} oCatalogTile
         *     The catalog tile
         *
         * @returns {string}
         *     Preview title for the catalog tile's underlying application as provided via the
         *     "preview" contract
         *
         * @since 1.16.3
         *
         * @public
         */
        this.getCatalogTilePreviewTitle = function (oCatalogTile) {
            return oAdapter.getCatalogTilePreviewTitle(oCatalogTile);
        };

        /**
         * Returns preview icon for a catalog tile.
         *
         * @param {object} oCatalogTile
         *     The catalog tile
         *
         * @returns {string}
         *     Preview icon as URL/URI for the catalog tile's underlying application as provided via the "preview" contract
         *
         * @since 1.16.3
         *
         * @public
         */
        this.getCatalogTilePreviewIcon = function (oCatalogTile) {
            return oAdapter.getCatalogTilePreviewIcon(oCatalogTile);
        };

        /**
         * Adds a bookmark to the user's home page.
         *
         * @param {object} oParameters
         *   bookmark parameters. In addition to title and URL, a bookmark might allow additional
         *   settings, such as an icon or a subtitle. Which settings are supported depends
         *   on the environment in which the application is running. Unsupported parameters will be
         *   ignored.
         * @param {string} oParameters.title
         *   The title of the bookmark.
         * @param {string} oParameters.url
         *   The URL of the bookmark. If the target application shall run in the Shell the URL has
         *   to be in the format <code>"#SO-Action~Context?P1=a&P2=x&/route?RPV=1"</code>
         * @param {string} [oParameters.icon]
         *   The icon URL of the bookmark (e.g. <code>"sap-icon://home"</code>).
         * @param {string} [oParameters.info]
         *   The information text of the bookmark.
         * @param {string} [oParameters.subtitle]
         *   The subtitle of the bookmark.
         * @param {string} [oParameters.serviceUrl]
         *   The URL to a REST or OData service that provides some dynamic information for the
         *   bookmark.
         * @param {string} [oParameters.serviceRefreshInterval]
         *   The refresh interval for the <code>serviceUrl</code> in seconds.
         * @param {string} [oParameters.numberUnit]
         *   The unit for the number retrieved from <code>serviceUrl</code>.
         * @returns {object}
         *   a jQuery promise.
         *
         * @see sap.ushell.services.URLParsing#getShellHash
         * @since 1.15.0
         */
        this.addBookmark = function (oParameters, oGroup) {
            var oPromise,
                oDfd,
                sMessage;
            if (!oParameters.title) {
                jQuery.sap.log.error("Add Bookmark - Missing title");
                throw new Error("Title missing in bookmark configuration");
            }
            if (!oParameters.url) {
                jQuery.sap.log.error("Add Bookmark - Missing URL");
                throw new Error("URL missing in bookmark configuration");
            }
            if (oGroup && this.isGroupLocked(oGroup)) {
                oDfd = new jQuery.Deferred();
                oPromise = oDfd.promise();
                sMessage = 'Tile cannot be added, target group (' + this.getGroupTitle(oGroup) + ')is locked!';
                oDfd.reject(sMessage);
                jQuery.sap.log.error(sMessage);
            }else {
                oPromise = oAdapter.addBookmark(oParameters, oGroup);
                oPromise.fail(function () {
                    jQuery.sap.log.error("Fail to add bookmark for URL: " + oParameters.url + " and Title: " + oParameters.title);
                });
            }

            return oPromise;
        };

        /**
         * Counts <b>all</b> bookmarks pointing to the given URL from all of the user's pages. You
         * can use this method to check if a bookmark already exists.
         * <p>
         * This is a potentially asynchronous operation in case the user's pages have not yet been
         * loaded completely!
         *
         * @param {string} sUrl
         *   The URL of the bookmarks to be counted, exactly as specified to {@link #addBookmark}.
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which informs about success or failure
         *   of this asynchronous operation. In case of success, the count of existing bookmarks
         *   is provided (which might be zero). In case of failure, an error message is passed.
         *
         * @see #addBookmark
         * @private
         */
        this.countBookmarks = function (sUrl) {
            if (!sUrl || typeof sUrl !== "string") {
                jQuery.sap.log.error("Fail to count bookmarks. No valid URL");
                throw new Error("Missing URL");
            }

            var oPromise = oAdapter.countBookmarks(sUrl);
            oPromise.fail(function () {
                jQuery.sap.log.error("Fail to count bookmarks");
            });
            return oPromise;
        };

        /**
         * Deletes <b>all</b> bookmarks pointing to the given URL from all of the user's pages.
         *
         * @param {string} sUrl
         *   The URL of the bookmarks to be deleted, exactly as specified to {@link #addBookmark}.
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which informs about success or failure
         *   of this asynchronous operation. In case of success, the number of deleted bookmarks
         *   is provided (which might be zero). In case of failure, an error message is passed.
         *
         * @see #addBookmark
         * @see #countBookmarks
         * @private
         */
        this.deleteBookmarks = function (sUrl) {
            if (!sUrl || typeof sUrl !== "string") {
                throw new Error("Missing URL");
            }

            var oPromise = oAdapter.deleteBookmarks(sUrl);
            oPromise.fail(function () {
                jQuery.sap.log.error("Fail to delete bookmark for: " + sUrl);
            });
            return oPromise;
        };

        /**
         * Updates <b>all</b> bookmarks pointing to the given URL on all of the user's pages
         * with the given new parameters. Parameters which are omitted are not changed in the
         * existing bookmarks.
         *
         * @param {string} sUrl
         *   The URL of the bookmarks to be updated, exactly as specified to {@link #addBookmark}.
         *   In case you need to update the URL itself, pass the old one here and the new one as
         *   <code>oParameters.url</code>!
         * @param {object} oParameters
         *   The bookmark parameters as documented in {@link #addBookmark}.
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which informs about success or failure
         *   of this asynchronous operation.  In case of success, the number of updated bookmarks
         *   is provided (which might be zero). In case of failure, an error message is passed.
         *
         * @see #addBookmark
         * @see #countBookmarks
         * @see #deleteBookmarks
         * @private
         */
        this.updateBookmarks = function (sUrl, oParameters) {
            if (!sUrl || typeof sUrl !== "string") {
                jQuery.sap.log.error("Fail to update bookmark. No valid URL");
                throw new Error("Missing URL");
            }
            if (!oParameters || typeof oParameters !== "object") {
                jQuery.sap.log.error("Fail to update bookmark. No valid parameters, URL is: " + sUrl);
                throw new Error("Missing parameters");
            }

            var oPromise = oAdapter.updateBookmarks(sUrl, oParameters);
            oPromise.fail(function () {
                jQuery.sap.log.error("Fail to update bookmark for: " + sUrl);
            });
            return oPromise;
        };

        /**
         * This method is called to notify that the given tile has been added to some remote
         * catalog which is not specified further.
         *
         * @param {string} sTileId
         *   the ID of the tile that has been added to the catalog (as returned by that OData POST
         *   operation)
         * @private
         * @since 1.16.4
         */
        this.onCatalogTileAdded = function (sTileId) {
            return oAdapter.onCatalogTileAdded(sTileId);
        };
    };
}());

}; // end of sap/ushell/services/LaunchPage.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.Message') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.services.Message");

    /**
     * Message service.
     *
     * @constructor
     * @name sap.ushell.services.Message
     * @since 1.16.0
     * @public
     */
    sap.ushell.services.Message = function () {

        var fnShellCallBackFunction = null;

        /**
         * Initialisation:
         * This method is to be invoked by the Shell to register the message callback function.
         * The signature of the callback is defined via the show function.
         *
         * @param {function} fnShellCallback
         *      callback for the shell to execute showing the message
         *
         * @methodOf sap.ushell.services.Message#
         * @name init
         * @private
         */
        this.init = function (fnShellCallback) {
            fnShellCallBackFunction = fnShellCallback;

            return this;
        };

        /**
         * Shows a message on the screen.
         *
         * @param {sap.ushell.services.Message.Type} iType
         *      message type
         * @param {string} sMessage
         *      the localized message as plain text
         *
         * @methodOf sap.ushell.services.Message#
         * @name show
         * @private
         */
        this.show = function (iType, sMessage, oParameters) {
            if (!sMessage) {
                jQuery.sap.log.error("Message must not be empty.");
            } else {
                if (fnShellCallBackFunction) {
                    fnShellCallBackFunction(iType, sMessage, oParameters || {});
                } else {
                    jQuery.sap.log.error("MessageService not initialized. [Message: '" + sMessage + "']");
                }
            }
        };

        /**
         * Shows an info message on the screen.
         *
         * @param {string} sMessage
         *      the localized message as plain text
         * @param {int} [iDuration=3000]
         *      display duration in ms (optional)
         *
         * @methodOf sap.ushell.services.Message#
         * @name info
         * @public
         */
        this.info = function (sMessage, iDuration) {
            this.show(sap.ushell.services.Message.Type.INFO, sMessage, { duration : iDuration || 3000 });
        };

        /**
         * Shows an error message on the screen.
         *
         * @param {string} sMessage
         *      the localized message as plain text
         * @param {string} [sTitle]
         *      the localized title as plain text (optional)
         *
         * @methodOf sap.ushell.services.Message#
         * @name error
         * @public
         */
        this.error = function (sMessage, sTitle) {
            sMessage = (sTitle !== undefined) ? sTitle + " , " + sMessage : sMessage;
            jQuery.sap.log.error(sMessage);

            this.show(sap.ushell.services.Message.Type.ERROR, sMessage, { title : sTitle });
        };

        /**
         * Shows an confirmation dialog on the screen.
         *
         * The callback is called with the following signature: <code>function(oAction)</code>
         * where oAction is the button that the user has tapped. For example, when the user has pressed the close button, a sap.m.MessageBox.Action.Close is returned.
         *
         * If no actions are provided, OK and Cancel will be shown. In this case oAction is set by one of the following three values:
         * 1. sap.m.MessageBox.Action.OK: OK (confirmed) button is tapped.
         * 2. sap.m.MessageBox.Action.Cancel: Cancel (unconfirmed) button is tapped.
         * 3. null: Confirm dialog is closed by Calling sap.m.InstanceManager.closeAllDialogs()
         *
         * @param {string} sMessage
         *      the localized message as plain text
         * @param {function} fnCallback
         *      callback function
         * @param {string} [sTitle]
         *      the localized title as plain text (optional)
         * @param {sap.m.MessageBox.Action|sap.m.MessageBox.Action[]|string|string[]} [vActions]
         *       Either a single action, or an array of two actions. If no action(s) are given, the single action MessageBox.Action.OK is taken as a default for the parameter. If more than two actions are given, only the first two actions are taken. Custom action string(s) can be provided, and then the translation of custom action string(s) needs to be done by the application.
         *
         * @methodOf sap.ushell.services.Message#
         * @name confirm
         * @public
         */
        this.confirm = function (sMessage, fnCallback, sTitle, vActions) {
            this.show(sap.ushell.services.Message.Type.CONFIRM, sMessage, { title : sTitle, callback : fnCallback, actions : vActions });
        };
    };
    sap.ushell.services.Message.hasNoAdapter = true;

//    /**
//    * The Unified Shell message service as a singleton object.
//    *
//    * @class The unified shell's message service, which provides a unified way to raise messages.
//    *
//    * @name sap.ushell.services.Message
//    * @since 1.16.0
//    * @public
//    */


    /**
    * @name sap.ushell.services.Message.Type
    * @since 1.16.0
    * @private
    */
    sap.ushell.services.Message.Type = {
        INFO : 0,
        ERROR : 1,
        CONFIRM : 2
    };

}());
}; // end of sap/ushell/services/Message.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.NavTargetResolution') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview The NavTargetResolution service.
 */
(function () {
    "use strict";
    /*global jQuery, sap, localStorage, window, URI, document*/
    /*jslint nomen: true */
    jQuery.sap.declare("sap.ushell.services.NavTargetResolution");

    /**
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.Container.getService("NavTargetResolution")</code>.
     * Constructs a new instance of the navigation target resolution service.
     *
     * @class The Unified Shell's internal navigation target resolution service
     *
     *Methods in this class deal with *internal* representations of the shell hash.
     *
     * configurations:
     * <code>config : { allowTestUrlComponentConfig  : true }</code>
     * allow to redefine the Test-url, Test-local1, Test-local2 applications via url parameters
     * (sap-ushell-test-local1-url=  / sap-ushell-test-local1-additionalInformation=  ... )
     *
     *
     * @constructor
     * @see sap.ushell.services.Container#getService
     * @since 1.15.0
     * @param {oServiceConfiguration} a Service configuration
     *
     * @public
     */
    sap.ushell.services.NavTargetResolution = function (oAdapter, oContainerInterface, sParameters, oServiceConfiguration) {
        var oServiceConfig = oServiceConfiguration && oServiceConfiguration.config,
            aLocalResolvedNavTargets,
            // oAdapter resolver is the "last" custom resolver
            aResolvers = [{
                name : "DefaultAdapter",
                isApplicable: function () { return true; },
                resolveHashFragment : oAdapter.resolveHashFragment.bind(oAdapter)
            }],
            oCurrentResolution;

        this._nextResolveHashFragment = function (aCustomResolvers, sHashFragment) {
            var oResolver,
                f;

            oResolver = aCustomResolvers.pop();
            if (oResolver.isApplicable(sHashFragment)) {
                jQuery.sap.log.info("NavTargetResolution: custom resolver " + oResolver.name + " resolves " + sHashFragment);
                f = this._nextResolveHashFragment.bind(this, aCustomResolvers);
                return oResolver.resolveHashFragment(sHashFragment, f);
            }
            return this._nextResolveHashFragment(aCustomResolvers, sHashFragment);
        };

        /**
         * expands a URL hash fragment
         *
         * This function gets the hash part of the URL and expands a sap-intent-param if present
         * and retrievable
         *
         * This is an asynchronous operation.
         *
         * @param {string} sHashFragment
         *     The formatted URL hash fragment in internal format(as obtained by the SAPUI5 hasher service,
         *     not as given in <code>location.hash</code>)
         *
         * @returns {string}
         *     A jQuery.Promise. Its <code>done()</code> function gets an expanded shell hash
         *     (in internal format)
         *
         * @public
         */
        this.expandCompactHash = function(sHashFragment) {
            var oUrlParsingService = sap.ushell.Container.getService("URLParsing"),
                oParsedShellHash,
                oDeferred = new jQuery.Deferred();

            // augment URL with application parameters from sHashFragment
            oParsedShellHash = oUrlParsingService.parseShellHash(sHashFragment);

            if (oParsedShellHash && oParsedShellHash.params && oParsedShellHash.params["sap-intent-param"]) {
                sap.ushell.Container.getService("AppState").getAppState(oParsedShellHash.params["sap-intent-param"][0]).done(

                    function (oContainer) {

                        var sValue = oContainer.getData("sap-intent-param"),
                            sHashFragmentPotentiallyExpanded = sHashFragment;

                        if (sValue) {
                            sHashFragmentPotentiallyExpanded = sap.ushell.Container.getService("URLShortening").expandParamGivenRetrievalFunction(sHashFragment, "sap-intent-param", function () {
                                return sValue;
                            });
                        }

                        oDeferred.resolve(sHashFragmentPotentiallyExpanded);
                    }
                ).fail(
                    function () {
                        oDeferred.resolve(sHashFragment);
                    }
                );
            } else {
                //setTimeout(function () {
                    oDeferred.resolve(sHashFragment);
                //}, 0);
            }
            return oDeferred.promise();
        };

        /**
         * Returns the navigation mode of a given resolved hash fragment
         *
         * @param {object} oResolvedHashFragment
         *     the hash fragment resolved by one of the registered resolvers
         *
         * @returns {string}
         *     the navigation mode for the given hash fragment. Returns the
         *     following values, each corresponding to a specific way the
         *     application should be navigated to:
         *
         *     <ul>
         *         <li><code>"embedded"</code>: the application should be
         *         opened in the current window, and rendered within the
         *         launchpad shell.</li>
         *
         *         <li><code>"newWindow"</code>: the application should be
         *         rendered in a new window, but no launchpad header must be
         *         present.</li>
         *
         *         <li><code>"newWindowThenEmbedded"</code>: the application
         *         should be opened in a new window but rendered within the
         *         launchpad shell.</li>
         *
         *         <li><code>undefined</code>: it was not possible to determine
         *         a navigation mode for the app. An error should be displayed
         *         in this case.</li>
         *     </ul>
         *
         * @private
         */
        this._getNavigationMode = function (oResolvedHashFragment) {
            var sAdditionalInformation = oResolvedHashFragment.additionalInformation,
                sApplicationType = oResolvedHashFragment.applicationType,
                sUi5ComponentPart,
                sUi5ComponentRegex;

            if ((sAdditionalInformation === null || typeof sAdditionalInformation === "string" || typeof sAdditionalInformation === "undefined") &&
                    sApplicationType === "URL") {

                /*
                 * NOTE: The "managed=" and "SAPUI5.Component=" cases are
                 * skipped if the additionalInformation field does not start
                 * exactly with the "managed=" and "SAPUI5.Component=" values;
                 */

                // managed= case(s)
                if (sAdditionalInformation && sAdditionalInformation.indexOf("managed=") === 0) {

                    if (sAdditionalInformation === "managed=FioriWave1") {
                        return "embedded";
                    }

                    if (sAdditionalInformation === "managed=") {
                        return "newWindow";
                    }

                    return undefined;
                }

                // UI5 component case
                if (sAdditionalInformation && sAdditionalInformation.indexOf("SAPUI5.Component=") === 0) {
                    sUi5ComponentPart = "[a-zA-Z0-9_]+";
                    sUi5ComponentRegex = [
                        "^SAPUI5.Component=",   // starts with SAPUI5.Component=
                        sUi5ComponentPart,      // at least one part
                        "([.]", sUi5ComponentPart, ")*$" // multiple dot-separated parts
                    ].join("");

                    if (!(new RegExp(sUi5ComponentRegex)).test(sAdditionalInformation)) {
                        jQuery.sap.log.warning(["The UI5 component name in",
                            sAdditionalInformation, "is not valid.",
                            "Please use names satisfying", sUi5ComponentRegex
                            ].join(" "));
                    }

                    return "embedded";
                }

                return "newWindow";
            }

            // NWBC
            if (sApplicationType === "NWBC") {
                return "newWindowThenEmbedded";
            }

            // default
            return undefined;
        };

        var aWDAGUIAppType = ["NWBC", "WDA", "TR"];
        /**
         * Determines the sap-system of given resolution result, if present
         *
         * @param {object} sHashFragment
         *     the hash fragment resolved by one of the registered resolvers
         * @param {object} oResolutionResult
         *     the resolution result
         *
         * @returns {string}
         *     a sap-system, if present, or undefined
         *    The result is taken from the following sequence:
         *     <ol>
         *         <li><code>result url</code>if the result url contains a parameter value
         *         sap-system, this is the value determined by this function
         *         </li>
         *         <li><code>NWBC/TR/WDA</code>If the application type is of one NWBC/TR/WDA
         *         and no sap-system is part of the *resolved* url or already, sap-system is taken from the these
         *         original hash if present
         *         </li>
         *         <li><code>undefined</code> otherwise
         *         </li>
         *     </ol>
         *  Note: in this manner sap-system can be overwritten for SAPUI5 applications within the target mapping
         * @private
         */
        this._getSapSystem = function (sHashFragment, oResolutionResult) {
            var sSystem;
            if (oResolutionResult && oResolutionResult["sap-system"]) {
                return oResolutionResult["sap-system"];
            }
            if (oResolutionResult && oResolutionResult.url) {
                sSystem = jQuery.sap.getUriParameters(oResolutionResult.url).get("sap-system");
                if (sSystem) {
                    return sSystem;
                }
            }
            if (aWDAGUIAppType.indexOf(oResolutionResult.applicationType) >= 0 && sHashFragment && sHashFragment.substring(1)) {
                sSystem = jQuery.sap.getUriParameters(sHashFragment.substring(1)).get("sap-system");
                if (sSystem) {
                    return sSystem;
                }
            }
            return undefined;
        };
        /**
         * Resolves the URL hash fragment.
         *
         * This function should be used by a custom renderer in order to
         * implement custom navigation.  Do not use this function for developing
         * Fiori applications.
         *
         * This function gets the hash part of the URL and returns data of the
         * target application.
         *
         * Example of the returned data:
         * <pre>
         * {
         *    "additionalInformation": "SAPUI5.Component=sap.ushell.renderers.fiori2.search.container",
         *    "applicationType": "URL",
         *    "url": "/sap/bc/ui5_ui5/ui2/ushell/resources/sap/ushell/renderers/fiori2/search/container",
         *    "navigationMode": "embedded"
         * }
         * </pre>
         *
         * The <code>navigationMode</code> indicates how the target application
         * should be navigated. It is always added to the result using the logic
         * in {@link #_getNavigationMode} if none of the resolvers in the chain
         * added it.
         *
         * This is an asynchronous operation.
         *
         * @param {string} sHashFragment
         *     The formatted URL hash fragment in internal format (as obtained by the SAPUI5 hasher service)
         *     not as given in <code>location.hash</code>)!
         *     example <code>#SemanticObject-action?P1=V1&P2=A%20B%20C</code>
         *
         * @returns {object}
         *     A jQuery.Promise. Its <code>done()</code> function gets an object that you can use
         *     to create a {@link sap.ushell.components.container.ApplicationContainer}
         *     or <code>undefined</code> in case the hash fragment was empty.
         *     Typically it contains the following information:
         * <pre>
         * {
         *   applicationType: "URL",
         *   url: "/sap/bc/",
         *   additionalInformation: "SAPUI5.Component=com.sap.AComponent",
         *   text: "My targetmapping description"
         * }
         * </pre>
         *
         * @public
         */
        this.resolveHashFragment = function (sHashFragment) {
            var oDeferred = new jQuery.Deferred(),
                sSapSystem,
                that = this;
            this.expandCompactHash(sHashFragment).done(function (sHashFragmentPotentiallyExpanded) {
                that._invokeResolveHashChain(sHashFragmentPotentiallyExpanded).done(function (oResult) {

                    /*
                     * Certain platforms like EP may use results from ABAP
                     * backend with custom adapters that do not fix the
                     * applicationType back to URL. This is normally done in
                     * ABAP adapters which we cannot assume to be present.
                     */
                    if (oResult && oResult.applicationType && oResult.applicationType === "SAPUI5") {
                        oResult.applicationType = "URL";
                    }

                    // Add navigation mode if it's not already there
                    if (jQuery.isPlainObject(oResult) && !oResult.hasOwnProperty("navigationMode")) {
                        oResult.navigationMode = that._getNavigationMode(oResult);
                    }

                    // add a sap-system if not already there
                    if (jQuery.isPlainObject(oResult) && !oResult.hasOwnProperty("sap-system")) {
                        sSapSystem = that._getSapSystem(sHashFragment, oResult);
                        if (sSapSystem) {
                            oResult["sap-system"] = sSapSystem;
                        }
                    }

                    oDeferred.resolve(oResult);
                }).fail(function (sMessage) {
                    oDeferred.reject(sMessage);
                });
            }).fail(function (sMessage) {
                oDeferred.reject(sMessage);
            });
            return oDeferred.promise();
        };

        this._invokeResolveHashChain = function (sHashFragment) {
            var oCRs = aResolvers.map(function (a) { return a; });

            return this._nextResolveHashFragment(oCRs, sHashFragment).done(function (oResolution) {
                oCurrentResolution = oResolution;
            });
        };

        this.baseResolveHashFragment = function (sHashFragment) {
            return oAdapter.resolveHashFragment(sHashFragment);
        };

        /**
         * Resolves a given semantic object and business parameters to a list of links,
         * taking into account the form factor of the current device.
         *
         * Note: Applications should call getService("CrossApplicationNavigation").getSemanticObjectLinks
         *
         * @param {string} sSemanticObject
         *   the semantic object such as <code>"AnObject"</code>
         * @param {object} [mParameters]
         *   the map of business parameters with values, for instance
         *   <pre>
         *   {
         *     A: "B",
         *     C: ["e", "j"]
         *   }
         *   </pre>
         * @param {boolean} [bIgnoreFormFactor=false]
         *   when set to <code>true</code> the form factor of the current device is ignored
         * @param {Object} [oComponent]
         *    SAP UI5 Component invoking the service
         * @param {string} [sAppStateKey]
         *    application state key to add to the generated links
         * @param {boolean} [bCompactIntents]
         *    whether the returned intents should be returned in compact format. Defaults to false.
         * <pre>
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which is resolved with an array of
         *   link objects containing (at least) the following properties:
         * <pre>
         * {
         *   intent: "#AnObject-action?A=B&C=e&C=j",
         *   text: "Perform action"
         * }
         *
         * Note: the intent returned is in internal format and can not be directly put into a link tag.
         * example: Let the string "C&A != H&M" be a parameter value,
         * Intent will be encoded as<code>#AnObject-action?text=C%26A%20!%3D%20H%26M<code>
         * To use this shell in a link tag, use </code>
         * <code>
         * Container.getService("CrossApplicationNavigation").hrefForExternal({ target : { shellHash :  aLink.intent} }, that.oComponent));
         * </code>
         * @private
         * </pre>
         */
        this.getSemanticObjectLinks = function (sSemanticObject, mParameters, bIgnoreFormFactor, oComponent, sAppStateKey, bCompactIntents) {
            var that = this,
                oParameters,
                oArgs,
                oPromise = new jQuery.Deferred(),
                oShellNavigation;

            if (/\?/.test(sSemanticObject)) {
                throw new Error("Parameter must not be part of semantic object");
            }

            oParameters = (mParameters === undefined) ? undefined : JSON.parse(JSON.stringify(mParameters));
            if (sAppStateKey) {
                oParameters = oParameters || {};
                oParameters["sap-xapp-state"] = encodeURIComponent(sAppStateKey);
            }

            oArgs = {
                target : {
                    semanticObject : sSemanticObject,
                    action : "dummyAction"
                },
                params : oParameters
            };

            oShellNavigation = sap.ushell.Container.getService("ShellNavigation");
            oShellNavigation.hrefForExternal(oArgs, true, oComponent, true).done(function (oResVerboseCompacted) {
                oParameters = oResVerboseCompacted.params || oParameters;
                if (oAdapter.getSemanticObjectLinks) {

                    oAdapter.getSemanticObjectLinks(sSemanticObject, oParameters, bIgnoreFormFactor).done(function (aSemanticObjectLinks) {
                        if (bCompactIntents) {
                            that._shortenGetSemanticObjectLinksResults(aSemanticObjectLinks, oComponent)
                                .done(function (aCompactSemanticObjectLinks) { // note: no fail handler
                                    oPromise.resolve(aCompactSemanticObjectLinks);
                                });
                        } else {
                            oPromise.resolve(aSemanticObjectLinks);
                        }
                    }).fail(function (sMsg) {
                        oPromise.reject(sMsg);
                    });
                } else {
                    oPromise.resolve([]);
                }
            }).fail(function (sMsg) {
                oPromise.reject(sMsg);
            });
            return oPromise.promise();
        };

        /**
         * Shortens all URLs found in the result of getSemanticObjectLinks.
         *
         * @param {array} aGetSemanticObjectLinksResults
         *    the result of {@link #getSemanticObjectLinks}
         * @param {object} oComponent
         *    a SAPUI5 component. The same passed to getSemanticObjectLinks}.
         *
         * @returns {jQuery.Deferred.Promise}
         *    a promise that is guaranteed to resolve to an array with the same
         *    structure as the array returned from getSemanticObjectLinks, but
         *    with shortened intents.
         *
         * NOTE: if it's not possible to shorten an intent in the input array,
         *       a warning is logged on the console and the unshortened intent is
         *       kept.
         *
         * @private
         * @since 1.32.0
         */
        this._shortenGetSemanticObjectLinksResults = function (aGetSemanticObjectLinksResults, oComponent) {
            var that = this,
                aSemanticObjectLinksShortened = [],
                i = 0,
                iPromisesToResolve = aGetSemanticObjectLinksResults.length,
                oUrlParsingService = sap.ushell.Container.getService("URLParsing"),
                oShellNavigation = sap.ushell.Container.getService("ShellNavigation"),
                oDeferred = new jQuery.Deferred();

            aGetSemanticObjectLinksResults.forEach(function (oIntent) {
                var oUrlParts = oUrlParsingService.parseShellHash(oIntent.intent),
                    oCompactParamsPromise = oShellNavigation.compactParams(oUrlParts.params, undefined /* keep all params */, oComponent);

                aSemanticObjectLinksShortened.push(oCompactParamsPromise);
                aSemanticObjectLinksShortened[i].done(function(iIdx, oCompactParams) {
                    aSemanticObjectLinksShortened[iIdx] = {
                        text: oIntent.text,
                        intent: "#" + oUrlParts.semanticObject + "-" + oUrlParts.action + "?" +
                            oUrlParsingService.paramsToString(oCompactParams)
                    };
                }.bind(that, i)).fail(function(iIdx, sMsg) {
                    jQuery.sap.log.warning(
                        "Cannot shorten GetSemanticObjectLinks result, using expanded form",
                        "Failure message: " + sMsg + "; intent had title ''" + oIntent.title + "'' and link ''" + oIntent.intent + "'",
                        "sap.ushell.services.NavTargetResolution"
                    );
                    aSemanticObjectLinksShortened[iIdx] = {
                        text: oIntent.text,
                        intent: oIntent.intent
                    };
                }.bind(that, i)).always(function () {
                    iPromisesToResolve--;
                    if (iPromisesToResolve === 0) {
                        oDeferred.resolve(aSemanticObjectLinksShortened);
                    }
                });
                i++;
            });

            return oDeferred.promise();
        };

        /**
         * Tells whether the given intent(s) are supported, taking into account the form factor of
         * the current device. "Supported" means that navigation to the intent is possible.
         *
         * @param {string[]} aIntents
         *   the intents (such as <code>"#AnObject-action?A=B&C=e&C=j"</code>) to be checked
         *
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which is resolved with a map
         *   containing the intents from <code>aIntents</code> as keys. The map values are
         *   objects with a property <code>supported</code> of type <code>boolean</code>.<br/>
         *   Example:
         * <pre>
         * {
         *   "#AnObject-action?A=B&C=e&C=j": { supported: false },
         *   "#AnotherObject-action2": { supported: true }
         * }
         * </pre>
         * @deprecated switch to isNavigationSupported
         * note that this has a slightly different response!
         */
        this.isIntentSupported = function (aIntents) {
            var mResult = {};
            // TODO: expand all intents, note that remapping is required!
            if (oAdapter.isIntentSupported) {
                return oAdapter.isIntentSupported(aIntents);
            }

            aIntents.forEach(function (sIntent) {
                mResult[sIntent] = {supported: undefined};
            });
            return (new jQuery.Deferred()).resolve(mResult).promise();
        };

        /**
         * Tells whether the given navigation intent(s) are supported for the given
         * parameters
         * Supported" means that a valid navigation target is configured for the
         * user for the given device form factor.
         *
         * This is effectively a test function for {@link toExternal}/ {@link hrefForExternal}.
         * It is functionally equivalent to {@link isIntentSupported} but accepts the same input
         * as {@link toExternal}/ {@link hrefForExternal}.
         *
         * @param {object[]} aIntents
         *   the intents (such as <code>["#AnObject-action?A=B&c=e"]</code>) to be checked
         * with object beeing instances the oArgs object of toExternal, hrefForExternal etc.
         *
         *  e.g. <code>{ target : { semanticObject : "AnObject", action: "action" },<br/>
         *         params : { A : "B" } }</code>
         *  or
         *  e.g. <code>{ target : { semanticObject : "AnObject", action: "action" },<br/>
         *         params : { A : "B", c : "e" } }</code>
         *  or
         *      <code>{ target : { shellHash : "AnObject-action?A=B&c=e" },
         *      }</code>
         *
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which is resolved with an array (!) of
         *   objects representing whether the intent is supported or not
         *   objects with a property <code>supported</code> of type <code>boolean</code>.<br/> representing
         *   Example:
         *
         * aIntents:
         * an array of parameterized (parsed) Intent objects,
         * in the corresponding structure to arguments to {@link sap.ushell.services.CrossApplicationNavigation.toExternal},
         * {@link sap.ushell.services.CrossApplicationNavigation.hrefForExternal}
         * <pre>
         *  [
         *    {  target : {
         *          semanticObject : "AnObject",
         *          action: "action"
         *       },
         *       params : { P1 : "B", P2 : [ "V2a", "V2b"]  }
         *    },
         *    {  target : {
         *          semanticObject : "SalesOrder",
         *          action: "display"
         *       },
         *       params : { P3 : "B", SalesOrderIds : [ "4711", "472"] }
         *    }
         * ]
         * </pre>
         *
         * The following formats are also supported as input:
         *  <code>[ "#AnObject-action?P1=B&SalesOrderIds=4711&SalesOrderIds=472" ]
         * to ease migration of existing code
         *
         * response:
         * <pre>
         * [
         *   { supported: false },
         *   { supported: true }
         * ]
         * </pre>
         * Example usage:
         * <code>
         * this.oCrossAppNav.isNavigationSupported([ ])
         * .done(function(aResponses) {
         *   if (oResponse[0].supported===true){
         *      // enable link
         *   }
         *   else {
         *      // disable link
         *   }
         * })
         * .fail(function() {
         *   // disable link
         *   // request failed or other fatal error
         * });
         * </code>
         *
         * @since 1.32
         * @public
         */
        this.isNavigationSupported = function (aIntents) {
            var oUrlParsingService = sap.ushell.Container.getService("URLParsing"),
                oDeferred = new jQuery.Deferred(),
                aIntentsAsString = [];
            aIntentsAsString = aIntents.map(function (oArg) {
                if (typeof oArg === "string") {
                    return oArg;
                }
                return "#" + oUrlParsingService.constructShellHash(oArg);
            });
            this.isIntentSupported(aIntentsAsString).done(function (oResult) {
                var aResults = aIntentsAsString.map(function (sIntent) { return oResult[sIntent] || { supported : false}; });
                oDeferred.resolve(aResults);
            }).fail(oDeferred.reject.bind(oDeferred));
            return oDeferred.promise();
        };
        /**
         * Register a custom resolver for semantic objects
         *
         * The resolver must be JavaScipt object with a string property name,
         * and two functions resolveHashFragment(sHashFragment,nextResolver) returning a promise
         * and isApplicable(sHashFragment) returning a boolean
         *
         * @param {Object} oResolver the custom resolver
         *
         * @returns {boolean} true if resolver was registered, false otherwise
         */
        this.registerCustomResolver = function (oResolver) {
            // verify oResolver
            if (typeof oResolver.name !== "string") {
                jQuery.sap.log.error("NavTargetResolution: Custom Resolver must have name {string} member");
                return false;
            }
            if (typeof oResolver.isApplicable !== "function") {
                jQuery.sap.log.error("NavTargetResolution: Custom Resolver must have isApplicable member");
                return false;
            }
            if (typeof oResolver.resolveHashFragment !== "function") {
                jQuery.sap.log.error("NavTargetResolution: Custom Resolver must have \"resolveHashFragment\" member");
                return false;
            }
            aResolvers.push(oResolver);
            return true;
        };

        // specific custom resolvers enabled by a configuration
        // #1 localResolveNavigationResolver  : given an array in config.resolveLocal, resolve
        // given SO-action strings to a locally supplied configuration
        // member of a resolveLocal setting are locally resolved
        if (oServiceConfig && jQuery.isArray(oServiceConfig.resolveLocal)) {
            // register a custom resolver which redirects all !allowed to defaultOthersTo
            aLocalResolvedNavTargets = oServiceConfig.resolveLocal.map(function (oArg) {
                return oArg.linkId;
            });
            this.registerCustomResolver({
                name : "localResolveNavigationResolver",
                cleanHash : function (sHashFragment) {
                    if (sHashFragment === "") {
                        return "#";
                    }
                    var res = sap.ushell.Container.getService("URLParsing").parseShellHash(sHashFragment.substring(1));
                    if (!res) {
                        return "#";
                    }
                    sHashFragment = "#" + res.semanticObject + "-" + res.action;
                    return sHashFragment;
                },
                _getIndex : function (sOrigHashFragment) {
                    var sHashFragment = this.cleanHash(sOrigHashFragment);
                    return aLocalResolvedNavTargets.indexOf(sHashFragment.substring(1));
                },
                // applicability test
                isApplicable: function (sOrigHashFragment) {
                    return this._getIndex(sOrigHashFragment) >= 0;
                },
                // replace hash, then resolve to app
                resolveHashFragment : function (sHashFragment) {
                    var oDeferred,
                        idx = this._getIndex(sHashFragment),
                        oResolvedResult,
                        obj,
                        hasQM,
                        newsh;
                    // assume it is a configuration object
                    //{
                    //    additionalInformation : "SAPUI5.Component=sap.ushell.demoapps.FioriSandboxDefaultApp",
                    //    applicationType : "URL",
                    //    url : "../../../../../test-resources/sap/ushell/demoapps/FioriSandboxDefaultApp",
                    //},
                    oDeferred = new jQuery.Deferred();
                    oResolvedResult = JSON.parse(JSON.stringify(oServiceConfig.resolveLocal[idx].resolveTo));

                    // augment url with application parameters from sHashFragment
                    obj = sap.ushell.Container.getService("URLParsing").parseShellHash(sHashFragment);
                    if (obj && obj.params) {
                        newsh = sap.ushell.Container.getService("URLParsing").paramsToString(obj.params);
                        hasQM = oResolvedResult.url.indexOf('?') >= 0;
                        oResolvedResult.url = oResolvedResult.url + (hasQM ? "" : "?") + newsh;
                    }

                    oDeferred.resolve(oResolvedResult);
                    return oDeferred.promise();
                } // function resolveHashFragment
            });// function registerCustomResolver
        }//if resolveLocal

        // register one fixed resolver for Standalone resolution (portal use case)
        // this resolver
        // a) demonstrates a sample resolver
        // b) Allows to launch an application via a specific ( client side coded )
        //    Target  #Shell-runStandaloneApp
        // with the effective application beeing coded via hash parameters:
        //  sap-ushell-SAPUI5.Component
        //  sap-ushell-url
        //  as in:
        //       #Shell-runStandaloneApp?sap-ushell-SAPUI5.Component=...&sap-ushell-url=...
        //  example:
        //       http://<server>/sap/bc/ui5_ui5/ui2/ushell/shells/abap/FioriLaunchpad.html?sap-client=120#Shell-runStandaloneApp?sap-ushell-SAPUI5.Component=sap.ushell.demo.AppNavSample&sap-ushell-url=%252Fsap%252Fbc%252Fui5_demokit%252Ftest-resources%252Fsap%252Fushell%252Fdemoapps%252FAppNavSample%253FA%253DURL%2526A%253DTAP%2526B%253DTAP%2526AA%253DTAP&MORE=fun
        //
        //
        //       #Test-local1 => local storage key  "sap.ushell#Test-local1"
        //       #Test-local2 => local storage key  "sap.ushell#Test-local1"
        //       #Test-url => sap-ushell-test-local1 , sap-ushell-test-url1-additionalInformation
        //  #Test-config

        this.registerCustomResolver({ name : "StandaloneLocalResolver",
            aElement : undefined,
            cleanHash : function (sHashFragment) {
                if (sHashFragment === "") {
                    return undefined;
                }
                var res = sap.ushell.Container.getService("URLParsing").parseShellHash(sHashFragment.substring(1));
                if (!res) {
                    return undefined;
                }
                sHashFragment = "#" + res.semanticObject + "-" + res.action;
                return sHashFragment;
            },
            isRunStandaloneHash : function (sHashFragment) {
                return typeof sHashFragment === "string" && sHashFragment.indexOf("#Shell-runStandaloneApp") === 0;
            },
            isApplicable: function (sHashFragment) {
                sHashFragment = this.cleanHash(sHashFragment);
                if (!sHashFragment) {
                    return false;
                }
                return sHashFragment === "#Test-url" ||
                    sHashFragment === "#Test-local1" ||
                    sHashFragment === "#Test-local2" ||
                    sHashFragment === "#Test-config" ||
                    sHashFragment === "#Test-clear" ||
                    this.isRunStandaloneHash(sHashFragment);
            },
            parseUrl : function (url) {
                if (!this.aElement) {
                    this.aElement = window.document.createElement('a');
                }
                this.aElement.href = url;
                return this.aElement;
            },
            resolveHashFragment : function (sHashFragment) {
                var oDeferred = new jQuery.Deferred(),
                    hardCoded = null,
                    that = this,
                    res,
                    oParsedShellHash,
                    oLocal,
                    additionalInformation,
                    sPrefix,
                    newsh,
                    hasQM,
                    oParams,
                    sFullHashFragment = sHashFragment,
                    url;
                sHashFragment = this.cleanHash(sHashFragment);
                if (!sHashFragment) {
                    return false;
                }
                hardCoded = {
                    "#Test-config" : {
                        applicationType: "URL",
                        url: "/sap/bc/ui5_ui5/ui2/ushell/test-resources/sap/ushell/demoapps/FioriSandboxConfigApp",
                        additionalInformation : //"SAPUI5.Component=AppNavSample"
                            "SAPUI5.Component=sap.ushell.demoapps.FioriSandboxConfigApp"
                    },
                    "none" : {
                        applicationType: "URL",
                        url: "",
                        additionalInformation : ""
                    }
                };

                function getFromLocalStorage(sKey) {
                    if (localStorage) {
                        return localStorage[sKey];
                    }
                    return undefined;
                }

                function filterParams(oParams, sKey) {
                    var res = {},
                        a;
                    for (a in oParams) {
                        if (oParams.hasOwnProperty(a)) { // correct Object.hasOwnProperty.call(this,a)
                            if (a !== sKey) {
                                res[a] = oParams[a];
                            }
                        }
                    }
                    return res;
                }

                // return undefined URL if not in same domain or not in runStandaloneAppFolderWhitelist
                function localURL(sUrl) {
                    if (sap.ushell.utils.calculateOrigin(that.parseUrl(sUrl)) !== sap.ushell.utils.calculateOrigin(window.location)) {
                        return undefined;
                    }
                    // on IE11, that.parseUrl(sUrl).pathname when set with /a/../b/ is /a/../b/,
                    // however, href is normalized ! so we use href to extract the normalized pathname /b/
                    // (and normalize again with URI)
                    var sPathNameUrl = (new URI(that.parseUrl(sUrl).href)).normalizePathname().pathname(),
                        oRunStandaloneAppFolderWhitelist = jQuery.sap.getObject("runStandaloneAppFolderWhitelist", 0, oServiceConfig),
                        sElement;
                    if (!oRunStandaloneAppFolderWhitelist) {
                        return undefined;
                    }
                    for (sElement in oRunStandaloneAppFolderWhitelist) {
                        if (oRunStandaloneAppFolderWhitelist.hasOwnProperty(sElement)) {
                            if (oRunStandaloneAppFolderWhitelist[sElement]) {
                                if (sElement === "*" || sPathNameUrl.indexOf((new URI(that.parseUrl(sElement).href)).normalizePathname().pathname()) === 0) {
                                    return sUrl;
                                }
                            }
                        }
                    }
                    return undefined;
                }
                function getURLParameter(sKey) {
                    return jQuery.sap.getUriParameters().get(sKey);
                }
                function getHashOrURLParameter(oParsedHash, sKey) {
                    return (oParsedHash.params && oParsedHash.params[sKey] && oParsedHash.params[sKey][0]) ||
                        getURLParameter(sKey);
                }
                function addToLocalStorage(sKey, sValue) {
                    if (localStorage) {
                        localStorage[sKey] = sValue;
                    }
                }
                if (hardCoded[sHashFragment]) {
                    res = hardCoded[sHashFragment];
                } else if (sHashFragment === "#Test-clear") {
                    addToLocalStorage("sap.ushell.#Test-local1", undefined);
                    addToLocalStorage("sap.ushell.#Test-local2", undefined);
                    jQuery.sap.log.info("NavTargetResolution: Local storage keys for #Test have been cleared");
                    res = hardCoded["#Test-config"];
                } else if (this.isRunStandaloneHash(sHashFragment)) {
                    oLocal = { applicationType : "URL" };
                    oParsedShellHash = sap.ushell.Container.getService("URLParsing").parseShellHash(sFullHashFragment);
                    additionalInformation =
                        (getHashOrURLParameter(oParsedShellHash, "sap-ushell-SAPUI5.Component") &&
                        "SAPUI5.Component=" + getHashOrURLParameter(oParsedShellHash, "sap-ushell-SAPUI5.Component")) ||
                        (getHashOrURLParameter(oParsedShellHash, "sap-ushell-additionalInformation"));
                    url = getHashOrURLParameter(oParsedShellHash, "sap-ushell-url") || "";
                    // blend the parameters together:
                    oParams = filterParams(oParsedShellHash.params, "sap-ushell-SAPUI5.Component");
                    oParams = filterParams(oParams, "sap-ushell-additionalInformation");
                    oParams = filterParams(oParams, "sap-ushell-url");
                    newsh = sap.ushell.Container.getService("URLParsing").paramsToString(oParams);
                    hasQM = url.indexOf('?') >= 0;
                    if (newsh) {
                        url = url + (hasQM ? (((url[url.length - 1] !== "&") && "&") || "") : "?") + newsh;
                    }
                    oLocal.url = localURL(url);
                    oLocal.additionalInformation = additionalInformation;
                    res = oLocal;
                } else if (sHashFragment === "#Test-local1" || sHashFragment === "#Test-local2" || sHashFragment === "#Test-url") {
                    res = getFromLocalStorage("sap.ushell." + sHashFragment);
                    if (!res || res === "undefined") {
                        oLocal = { applicationType : "URL" };
                    } else {
                        oLocal = JSON.parse(res);
                    }
                    // Configuring an app via url parameters is restricted to localhost for security reasons,
                    // unless explicitly enabled by config
                    if ((window.location.hostname === "localhost") ||
                            oServiceConfig.allowTestUrlComponentConfig) {
                        sPrefix = "sap-ushell-test-" + sHashFragment.substring(6);
                        additionalInformation = getURLParameter(sPrefix + "-additionalInformation");
                        if (additionalInformation) {
                            oLocal.additionalInformation = additionalInformation;
                        }
                        url = getURLParameter(sPrefix + "-url");
                        if (url) {
                            oLocal.url = localURL(url);
                        }
                    }
                    if (!oLocal.url) {
                        jQuery.sap.log.info("NavTargetResolution: No configured app for " + sHashFragment + " found ( local storage or url params sap-ushell-test-local1-url  sap-ushell-test-local1-additionalInfo  not supplied? ");
                        jQuery.sap.log.info("NavTargetResolution: Defaulting to config app ...\n");
                        oDeferred.reject("URL is not resolvable");
                        return oDeferred.promise();
                    }
                    oLocal.url = localURL(oLocal.url);
                    res = oLocal;
                }
                if (res.url === undefined) {
                    oDeferred.reject("URL is not resolvable");
                    return oDeferred.promise();
                }
                jQuery.sap.log.info("NavTargetResolution: As URL:  http://localhost:8080/sap/bc/ui5_ui5/ui2/ushell/shells/abap/FioriLaunchpad.html?sap-ushell-test-local1-url=" + encodeURIComponent((res && res.url) || "") + "&sap-ushell-test-local1-additionalInformation=" + encodeURIComponent((res && res.additionalInfo) || "") + "#Test-local1");
                jQuery.sap.log.info("NavTargetResolution: Resolving " + sHashFragment + " to "  + JSON.stringify(res));
                oDeferred.resolve(res);
                return oDeferred.promise();
            }
            });

        /**
         * Returns the last successful resolution of a hash fragment or <code>undefined</code> if
         * no resolution has been performed yet.
         *
         * @private
         * @returns {object} the last successful resolution
         * @see #resolveHashFragment
         */
        this.getCurrentResolution = function () {
            return oCurrentResolution;
        };
    };
}());

}; // end of sap/ushell/services/NavTargetResolution.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.PageBuilding') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview The Unified Shell's page building service.
 *
 * @version 1.32.6
 */
(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.services.PageBuilding");

    jQuery.sap.require('sap.ui2.srvc.factory'); // unlisted dependency retained

    jQuery.sap.require('sap.ui2.srvc.page'); // unlisted dependency retained


    /**
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.Container.getService("PageBuilding")</code>.
     * Constructs a new instance of the page building service.
     *
     * @param {object} oAdapter
     *     the page building adapter for the logon system
     *
     * @class The Unified Shell's page building service.
     *
     * @constructor
     * @see sap.ushell.services.Container#getService
     * @since 1.15.0
     * @private
     */
    sap.ushell.services.PageBuilding = function (oAdapter, oContainerInterface) {

        /**
         * Returns the UI2 page building factory.
         * @returns {sap.ui2.srvc.Factory}
         *     the page building factory
         */
        this.getFactory = function () {
            return oAdapter.getFactory();
        };

        /**
         * Returns a stub for the page with the given ID.
         *
         * @param {string} sPageId
         *     the page ID
         *
         * @returns {sap.ui2.srvc.Page}
         *     the page, as a stub
         * @since 1.15.0
         */
        this.getPage = function (sPageId) {
            return oAdapter.getFactory().createPage(sPageId);
        };

        /**
         * Returns a page set.
         *
         * @param {string} sId
         *   the page set ID
         * @returns {object}
         *   a jQuery promise. Its success handler gets a sap.ui2.srvc.PageSet.
         * @since 1.15.0
         */
        this.getPageSet = function (sId) {
            var oDeferred = new jQuery.Deferred();
            oAdapter.getFactory().createPageSet(sId, oDeferred.resolve.bind(oDeferred),
                oDeferred.reject.bind(oDeferred));
            return oDeferred.promise();
        };
    };
}());

}; // end of sap/ushell/services/PageBuilding.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.Search') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview The Unified Shell's search service which provides Enterprise Search via SINA.
 *
 * @version 1.32.6
 */
(function() {
    "use strict";
    /* eslint valid-jsdoc:0 */
    jQuery.sap.declare("sap.ushell.services.Search");
    

    var searchhelper = sap.ushell.renderers.fiori2.search.SearchHelper;

    sap.ushell.services.Search = function(oAdapter, oContainerInterface) {
        this.init.apply(this, arguments);
    };

    sap.ushell.services.Search.prototype = {

        init: function(oAdapter, oContainerInterface) {
            // do nothing, just ensure for abap adapter to init SINA (async GetServerInfo)
            // this.aCatalogTileDescriptions;
            // this.oCatalogDeferred;
            this.oAdapter = oAdapter;
            this.oContainerInterface = oContainerInterface;
            this.oLpdService = sap.ushell.Container.getService("LaunchPage");
        },

        isSearchAvailable: function() {
            return this.oAdapter.isSearchAvailable();
        },

        getSina: function() {
            return this.oAdapter.getSina();
        },

        /**
         * A helper function returning all tiles contained in all available catalogs.
         * Further, once the tiles have been successfully fetched, they are cached locally in order to speed up
         * future calls. This is based on the assumption that catalog tiles will change very infrequently.
         * In case of success the promise's <code>done</code> function should be called with the results.
         *
         * @returns {object}
         *  jQuery.promise object
         * @private
         */
        _getCatalogTiles: function() {
            //return $.when([]);
            var that = this;
            if (that.allTilesDeferred) {
                return that.allTilesDeferred;
            }

            // initialize catalog tiles
            var aCatalogTileDescriptions = [];
            // this.oCatalogDeferred = oDeferred;
            that.allTilesDeferred = that.oLpdService.getCatalogs().then(function(catalogs) {
                var oDeferreds = [];

                // append personalized group tiles
                var oDtdResult = that._getPersonalizedGroupTiles(new jQuery.Deferred());
                oDeferreds.push(oDtdResult);

                // debug
                //catalogs.pop(); // remove HANA remote catalog for performance reasons
                //catalogs.pop(); // remove HANA remote catalog for performance reasons
                // debug
                // get promises for all catalogs' tiles
                for (var i = 0; i < catalogs.length; i++) {
                    oDeferreds.push(that.oLpdService.getCatalogTiles(catalogs[i]));
                }
                // when all promises have been resolved, merge their results together
                return jQuery.when.apply(jQuery, oDeferreds).then(function() {
                    var aTilesCollection = arguments;
                    for (var i = 0; i < aTilesCollection.length; i++) {
                        var aTiles = aTilesCollection[i];
                        for (var j = 0; j < aTiles.length; j++) {
                            try {
                                var oTile = aTiles[j],
                                    //need to instanciate a view to make use of the contracts
                                    oTileView = that.oLpdService.getCatalogTileView(oTile),
                                    aKeywords = that.oLpdService.getCatalogTileKeywords(oTile),
                                    sTargetURL = that.oLpdService.getCatalogTileTargetURL(oTile),
                                    sTitle = that.oLpdService.getCatalogTilePreviewTitle(oTile) || that.oLpdService.getCatalogTileTitle(oTile),
                                    sSize = that.oLpdService.getCatalogTileSize(oTile),
                                    sIcon = that.oLpdService.getCatalogTilePreviewIcon(oTile) || "sap-icon://business-objects-experience";

                                aCatalogTileDescriptions.push({
                                    tile: oTile,
                                    keywords: aKeywords,
                                    url: sTargetURL,
                                    title: sTitle || '',
                                    icon: sIcon,
                                    size: sSize
                                });
                                //destroy the view - not needed
                                oTileView.destroy();
                                oTile.getContract("preview").setEnabled(false);
                            } catch (e) {
                                jQuery.sap.log.error(e);
                            }
                        }
                    }
                    aCatalogTileDescriptions = that._removeDuplicateTiles(aCatalogTileDescriptions);
                    aCatalogTileDescriptions.sort(function(a, b) {
                        if (a.title.toUpperCase() < b.title.toUpperCase()) {
                            return -1;
                        }
                        if (a.title.toUpperCase() > b.title.toUpperCase()) {
                            return 1;
                        }
                        return 0;
                    });
                    // resolve the promise
                    return aCatalogTileDescriptions;
                });
            });
            return that.allTilesDeferred;

        },

        _getPersonalizedGroupTiles: function(oDeferred) {
            var that = this;

            that.oLpdService.getGroups().then(function(aGroups) {
                var aDeffered = [];
                var aGroupTiles;
                for (var j = 0; j < aGroups.length; j++) {
                    aGroupTiles = that.oLpdService.getGroupTiles(aGroups[j]) || [];
                    aDeffered = aDeffered.concat(aGroupTiles);
                }
                oDeferred.resolve(aDeffered);
            });

            return oDeferred.promise();
        },

        _removeDuplicateTiles: function(aTiles) {
            var oItemsDict = {},
                key,
                aUniqueTiles = [];

            for (var i = 0; i < aTiles.length; ++i) {
                var oTile = aTiles[i];
                if (!oTile.url) {
                    continue;
                }
                var factSheetTest = new RegExp('DisplayFactSheet', 'i');
                if (factSheetTest.test(oTile.url)) {
                    continue;
                }
                key = oTile.title + oTile.url;
                if (oItemsDict[key] === undefined) {
                    oItemsDict[key] = oTile;
                    aUniqueTiles.push(oTile);
                }
            }
            return aUniqueTiles;
        },

        /**
		 * Search for tiles in all backend catalogs.
		 * @param {object}
		 *	properties configuration object which knows the attributes:
		 *   searchTerm: search for this term in apps/tiles
		 *   top: return that many apps/tiles, default is 10
		 *   searchInKeywords: also search in app keywords and not only in titles

		 * @returns {array}
		 *  found tiles

		 * @private
		 */
        _searchTiles: function(properties) {
            var sSearchTerms = properties.searchTerm;
            var aCatalogTiles = properties.aCatalogTiles;
            var iTop = properties.top || 10;
            var iSkip = properties.skip || 0;
            var iMatchCounter = 0;
            var bSearchInKeywords = properties.searchInKeywords || false;
            var aFoundTiles = [],
                oTile;

            var tileFound = function(oTile, sHighlightedTitle) {

                // increment match counter
                iMatchCounter += 1;

                // ignore matches until offset (=skip) is reached
                if (iMatchCounter <= iSkip) {
                    return;
                }

                // ignore match if top is reached
                if (iMatchCounter > (iSkip + iTop)) {
                    return;
                }

                // copy tile
                var resultTile = jQuery.extend({}, oTile);
                resultTile.tooltip = resultTile.title;
                if (sHighlightedTitle.length > 0) {
                    resultTile.label = sHighlightedTitle;
                } else {
                    resultTile.label = oTile.title;
                }

                // append to result list
                aFoundTiles.push(resultTile);

            };

            // instantiate Tester with search terms
            // ignore star for suggestions
            var sSearchTermsIgnoreStar = sSearchTerms.replace(/\*/g, '');
            var oTester = new searchhelper.Tester(sSearchTermsIgnoreStar);
            var oTestResult;

            for (var j = 0; j < aCatalogTiles.length; j++) {
                oTile = aCatalogTiles[j];

                // test whether title text contains all search terms
                // if case of match, sHighlightedText contains text with highlighted search terms
                // if not, it contains space
                oTestResult = oTester.test(oTile.title);
                if (oTestResult.bMatch === true) {
                    tileFound(oTile, oTestResult.sHighlightedText);
                    // unnecessary to look into keywords
                    continue;
                }

                // in case that SearchInKeywords in switched on
                if (bSearchInKeywords && oTile.keywords && Array.isArray(oTile.keywords)) {
                    oTestResult = oTester.test(oTile.keywords.join(' '));
                    if (oTestResult.bMatch === true) {
                        // not relevant for highlighting in title
                        tileFound(oTile, "");
                    }
                }

            }
            return {
                totalResults: iMatchCounter,
                searchTerm: sSearchTerms,
                getElements: function() {
                    return aFoundTiles;
                }
            };
        },

        /**
         * Search for Apps (Tiles) in all backend catalogs.
         *
         * @param  {object}
         *  properties configuration object which knows the attributes:
         *   searchTerm: search for this term in apps/tiles
         *   top: return that many apps/tiles, default is 10
         *   searchInKeywords: also search in app keywords and not only in titles
         *
         * @returns {object}
         *  jQuery.promise object
         *
         * @public
         */
        queryApplications: function(properties) {
            var that = this;
            return this._getCatalogTiles().then(function(aCatalogTiles) {
                properties.aCatalogTiles = aCatalogTiles;
                return that._searchTiles(properties);
            });

        },

        /**
         * Search all catalog tiles by their Semantic Object - Action pair
         * The given callback is called on success. This does not touch the respective search adapters.
         *
         * @param {array} aSemObjects
         *     an array of semantic object + action objects
         * @param {function} resultCallback
         *     the callback that will be called
         * @public
         */
        queryApplicationsByTarget: function(aSemObjects, resultCallback) {
            this._getCatalogTiles().done(function(aCatalogTileDescriptions) {
                var aResults = [];
                // loop through Semantic Objects, thus result is in same order as input SOs
                for (var j = 0, jL = aSemObjects && aSemObjects.length || 0; j < jL; j++) {
                    var oSemO = aSemObjects[j],
                        oURLParsingSrvc = sap.ushell.Container.getService("URLParsing");
                    for (var i = 0; i < aCatalogTileDescriptions.length; i++) {
                        var oTarget = oURLParsingSrvc.parseShellHash(aCatalogTileDescriptions[i].url);
                        if (oTarget && (oTarget.semanticObject === oSemO.semanticObject) && (oTarget.action === oSemO.action)) {
                            aResults.push(aCatalogTileDescriptions[i]);
                            // only take first match
                            break;
                        }
                    }
                }
                resultCallback(aResults);
            });
        }
    };


}());

}; // end of sap/ushell/services/Search.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.ShellNavigation') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview Shell Navigation Services,
 */

/*global jQuery, sap, location, hasher, jQuery */

(function () {
    "use strict";
    /*global jQuery, sap, location, hasher, window */
    jQuery.sap.require('sap.ui.thirdparty.signals'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.hasher'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.core.routing.HashChanger'); // unlisted dependency retained


    jQuery.sap.declare("sap.ushell.services.ShellNavigation");

    sap.ui.core.routing.HashChanger.extend("sap.ushell.services.ShellNavigationHashChanger", {

        constructor : function (oConfig) {
            var urlValue;
            this.oServiceConfig = oConfig;
            // apply url parameter if present
            if (jQuery.sap.getUriParameters().get("sap-ushell-reload")) {
                if (jQuery.sap.getUriParameters().get("sap-ushell-reload") === "X" ||
                         jQuery.sap.getUriParameters().get("sap-ushell-reload") === "true") {
                    urlValue = true;
                } else {
                    urlValue = false;
                }
            }
            if (urlValue !== undefined) {
                if (typeof this.oServiceConfig !== "object") {
                    this.oServiceConfig = {};
                }
                this.oServiceConfig.reload = urlValue;
            }
            sap.ui.core.routing.HashChanger.apply(this);
            this.priv_initializedByShellNav = false;    // initialization flag for the shellNavigationService
            this.oURLShortening = sap.ushell.Container.getService("URLShortening");
            this.privfnShellCallback = null;
            this.privappHashPrefix = "&/";
            this.privhashPrefix = "#";
            this.aNavigationFilters = [];
            this.NavigationFilterStatus = {
                Continue : "Continue",
                Custom : "Custom",
                Abandon : "Abandon"
            };

            /**
             * obtain the current shell hash (with #) urlDecoded
             * Shortened(!)
             * @return {string} shell hash
             * @private
             */
            this.privgetCurrentShellHash = function () {
                var res = this.privsplitHash(hasher.getHash());
                return { hash : "#" + ((res && res.shellPart) ? res.shellPart : "") };
//                return "#" + ((res && res.shellPart) ? res.shellPart : "");
            };

            /**
             * internal, construct the next hash, with #
             * shortened(!)
             * @param {string} sAppSpecific Application specific hash
             * @return {string} constructed full hash
             * @private
             */
            this.privconstructHash = function (sAppSpecific) {
                var o = this.privgetCurrentShellHash();
                o.hash = o.hash + sAppSpecific;
                return o;
            };

            /**
             * internal, without #
             * @param {object} oShellHash shell hash concept
             * @return {string} return constructed string
             * @private
             */
            this.privconstructShellHash = function (oShellHash) {
                return sap.ushell.Container.getService("URLParsing").constructShellHash(oShellHash);
            };

            /** split a shell hash into app and shell specific part
             *  @private
             *  @returns <code>null</code>, if sHash is not a valid hash (not parseable);
             *      otherwise an object with properties <code>shellPart</code> and <code>appSpecificRoute</code>
             *      the properties are <code>null</code> if sHash is falsy
             */
                // this method is deliberately restrictive to work only on proper hashes
                //  this may be made part of URLParser
            this.privsplitHash = function (sHash) {
                var oShellHash,
                    oShellHashParams,
                    sAppSpecificRoute;

                if (sHash === undefined || sHash === null || sHash === "") {
                    return {
                        shellPart : null,
                        appSpecificRoute : null,
                        intent: null,
                        params: null
                    };
                }
                // break down hash into parts
                // "#SO-ABC~CONTXT?ABC=3A&DEF=4B&/detail/1?A=B");
                oShellHash =  sap.ushell.Container.getService("URLParsing").parseShellHash(sHash);
                if (oShellHash === undefined || oShellHash === null) {
                    return null;
                }

                oShellHashParams = (oShellHash.params && !jQuery.isEmptyObject(oShellHash.params)) ? oShellHash.params : null;
                sAppSpecificRoute = oShellHash.appSpecificRoute;
                oShellHash.appSpecificRoute = undefined;
                return {
                    shellPart : this.privstripLeadingHash(this.privconstructShellHash(oShellHash)) || null,
                    appSpecificRoute : sAppSpecificRoute || null, // ,"&/detail/1?A=B");
                    intent: (oShellHash.semanticObject && oShellHash.action
                        && (oShellHash.semanticObject + "-" + oShellHash.action + (oShellHash.contextRaw || ""))) || null,
                    params: oShellHashParams
                };
            };

            /**
             * internal, central navigation hook that trigger hash change
             * triggers events and sets the hash
             * @param {string} sFullHash full shell hash
             * @param {string} sAppHash application specific hash
             * @param {boolean} writeHistory whether to create a history record (true) or replace the hash
             * @private
             */
            this.privsetHash = function (sFullHash, sAppHash, writeHistory) {
                hasher.prependHash = "";
                sFullHash = this.privstripLeadingHash(sFullHash);
                sAppHash = sAppHash || "";
                if (writeHistory === undefined) {
                    writeHistory = true;
                }
                // don't call method on super class
                // we set the full hash and fire the events for the app-specific part only
                // this is necessary for consistency of all events; hashSet and hashReplaced are
                // evaluated by sap.ui.core.routing.History
                if (writeHistory) {
                    this.fireEvent("hashSet", { sHash : sAppHash });
                    hasher.setHash(sFullHash);
                } else {
                    this.fireEvent("hashReplaced", { sHash : sAppHash });
                    hasher.replaceHash(sFullHash);
                }
            };

            this.privstripLeadingHash = function (sHash) {
                if (sHash[0] === '#') {
                    return sHash.substring(1);
                }
                return sHash;
            };

            this.registerNavigationFilter = function (fnFilter) {
                if (typeof fnFilter !== "function") {
                    throw new Error("fnFilter must be a function");
                }
                this.aNavigationFilters.push(fnFilter);
            };

            /**
             * This object can generate an arbitrary number of keys
             * and potentially store them in sequence,
             *
             * it is required to call the getNextKey function before
             * calling store(sValue)
             *
             * this.getPromise(), invoked after the last store sequence,
             * returns a promise which will be ok *after* all save sequences are
             * done
             *
             * @param {object} oComponent a ui5 component
             * @constructor
             * @class
             */
            function StoreContext(oComponent) {
                this.oAppState = undefined;
                this.oPromise = (new jQuery.Deferred()).resolve();
                this.getNextKey = function () {
                    this.oAppState = sap.ushell.Container.getService("AppState").createEmptyAppState(oComponent);
                    return this.oAppState.getKey();
                };
                this.store = function (sValue) {
                    var nPromise;
                    this.oAppState.setData(sValue);
                    nPromise = this.oAppState.save();
                    this.oPromise = jQuery.when(this.oPromise, nPromise);
                };
                this.getPromise = function () {
                    return this.oPromise;
                };
            }

            /**
             * Compact a given parameter object if too long,
             * retaining <code> aRetainParameterList if possible
             * a member sap-intent-param with the key will be added to the
             * returned oParams object
             * @param {object} oParams a parameter object
             * @param {Array} aRetainParameterList the parameter list to retain
             * @param {object} oComponent a ui5 component, currently optional
             * @returns {promise} a promise, whose first argument on resolution is a either
             * an equivalent oParams object ( or the identical one) or a new
             * parameter object with the retained url parameters and a sap-intent-param with key value
             */
            this.compactParams = function (oParams, aRetainParameterList, oComponent) {
                var oUrlParsing = sap.ushell.Container.getService("URLParsing"),
                    oSaveContext,
                    oCompactedParams,
                    oResult,
                    oPromise,
                    oDeferred = new jQuery.Deferred(),
                    sHash = oUrlParsing.constructShellHash({
                        "target" : {
                            "semanticObject" :  "SO",
                            "action" : "action"
                        },
                        "params" : oParams
                    }, oSaveContext);

                if (oParams === undefined || Object.keys(oParams).length === 0) {
                    return oDeferred.resolve(oParams).promise();
                }

                oSaveContext = new StoreContext(oComponent);
                oResult = this.oURLShortening.compactHash(sHash, aRetainParameterList, oSaveContext);

                // separate the parameters
                oCompactedParams = oUrlParsing.parseParameters(oResult.hash.match(/\?.*/)[0]);
                oPromise = oSaveContext.getPromise();
                oPromise.done(function () {
                    oDeferred.resolve(oCompactedParams);
                }).fail(function (sMsg) {
                    oDeferred.reject(sMsg);
                });
                return oDeferred;
            };

            /// protected API, only used by shell services
            /**
             * Returns a string which can be put into the DOM (e.g. in a link tag)
             * Please use CrossApplicationNavigation service and do not invoke this method directly
             * if you are an application.
             *
             * @param {Object} oArgs
             *     object encoding a semantic object and action
             *     e.g.:
             *     <pre>
             *     {
             *        target: {
             *            semanticObject: "AnObject",
             *            action: "Action"
             *        },
             *        params: {
             *            A: "B"
             *        }
             *     }
             *     </pre>
             *
             *     or
             *
             *     <pre>
             *     {
             *         target: {
             *             shellHash: "SO-36&jumper=postman"
             *         }
             *     }
             *     </pre>
             * @param {boolean} [bVerbose]
             *    whether the response should be returned in verbose format. If
             *    this flag is set to true, this function returns an object
             *    instead of a string.
             * @param {object} [oComponent]
             *    an optional instance of sap.ui.core.UIComponent
             * @param {boolean} [bAsync]
             *    indicates whether the method should return the result
             *    asynchronously. When set to <code>true</code>, the method
             *    returns a jQuery Deferred object that is resolved only after
             *    the URLShortening save operation is completed.
             *
             * @returns {object}
             *    <p>a string that can be put into an href attribute of an
             *    HTML anchor.  The returned string will always start with a
             *    hash character.</p>
             *
             *    <p>
             *    In case the <b>bVerbose</b> parameter is set to true, an
             *    object that wraps the result string will be returned
             *    instead:
             *    <pre>
             *    { hash : {string},
             *      params : {object}
             *      skippedParams : {object}
             *    }
             *    </pre>
             *    </p>
             *
             * where:
             * <ul>
             * <li><code>params</code> is an object containing non-truncated parameters</li>
             * <li><code>skippedParams</code> is an object containing truncated parameters if truncation occurred or undefined if not</li>
             * </ul>
             *
             * @methodOf sap.ushell.services.ShellNavigation#
             * @name hrefForExternal
             * @since 1.15.0
             * @private
             */
            this.hrefForExternal = function (oArgs, bVerbose, oComponent, bAsync) {
                // result not encoded
                var vResultOrPromise = this.hrefForExternalNoEnc(oArgs, bVerbose, oComponent, bAsync);

                // must encode

                function encodeResult(vResult, bVerbose) {
                    if (bVerbose === true) {
                        vResult.hash = encodeURI(vResult.hash);
                    } else {
                        vResult = encodeURI(vResult);
                    }
                    return vResult;
                }

                if (!bAsync) {
                    return encodeResult(vResultOrPromise, bVerbose);
                }

                // async case
                var oDeferred = new jQuery.Deferred();
                vResultOrPromise
                    .done(function (vResult) {
                        oDeferred.resolve(encodeResult(vResult, bVerbose));
                    })
                    .fail(oDeferred.reject.bind(oDeferred));

                return oDeferred;
            };

            /**
             * Behaves as {@link #hrefForExternal} but does not encode the
             * returned intents with encodeURI.
             *
             * @param {Object} oArgs
             *     object encoding a semantic object and action
             * @param {boolean} [bVerbose]
             *    whether the response should be returned in verbose format.
             * @param {object} [oComponent]
             *    an optional instance of sap.ui.core.UIComponent
             * @param {boolean} [bAsync]
             *    indicates whether the method should return the result
             *    asynchronously.
             *
             * @returns {object}
             *    <p>a string that can be put into an href attribute of an
             *    HTML anchor.</p>
             *
             * @methodOf sap.ushell.services.ShellNavigation#
             * @name hrefForExternal
             * @see {@link #hrefForExternal}
             * @since 1.32.0
             * @private
             */
            this.hrefForExternalNoEnc = function (oArgs, bVerbose, oComponent, bAsync) {
                var oTmp,
                    oPromise,
                    oDeferred,
                    oSaveContext = new StoreContext(oComponent),
                    oResult;

                oTmp = this.privhrefForExternalNoEnc(oArgs, oSaveContext);
                if (bVerbose === true) {
                    oResult = {
                        hash: oTmp.hash,
                        params: oTmp.params,
                        skippedParams: oTmp.skippedParams
                    };
                } else {
                    oResult = oTmp.hash;
                }

                if (!bAsync) {
                    return oResult;
                }

                oPromise = oSaveContext.getPromise();
                oDeferred = new jQuery.Deferred();
                oPromise.done(function () {
                    oDeferred.resolve(oResult);
                }).fail(function (sMsg) {
                    oDeferred.reject(sMsg);
                });

                return oDeferred;
            };

            /**
             * Shortened(!)
             * @param {object} oArgs arguments
             * @param {object} oSaveContext Save context
             * @return {string} Shell hash
             */
            this.privhrefForExternalNoEnc = function (oArgs, oSaveContext) {
                var r;
                if (oArgs === undefined) {
                    return this.privgetCurrentShellHash();
                }
                // construct url
                if (oArgs && oArgs.target && (typeof oArgs.target.semanticObject === "string" || typeof oArgs.target.shellHash === "string")) {
                    r = "#" + this.privconstructShellHash(oArgs);
                    return this.oURLShortening.compactHash(r, undefined, oSaveContext);
                }
                return this.privgetCurrentShellHash();
            };

            this.privgetAppHash = function (oArgs) {
                var sAppHash, oShellHash;
                if (oArgs && oArgs.target && (typeof oArgs.target.shellHash === "string")) {
                    oShellHash = sap.ushell.Container.getService("URLParsing").parseShellHash(oArgs.target.shellHash);
                    sAppHash = oShellHash && oShellHash.appSpecificRoute;
                    sAppHash = sAppHash && sAppHash.substring(2);
                }
                return sAppHash;
            };

            /**
             * returns a string which can be put into the DOM (e.g. in a link tag)
             * given an app specific hash suffix
             *
             * @param {string} sAppHash Application hash
             * @returns {string} a string which can be put into the link tag,
             *          containing the current shell hash as prefix and the
             *          specified application hash as suffix
             *
             * example: hrefForAppSpecificHash("View1/details/0/") returns
             * "#MyApp-Display&/View1/details/0/"
             * @methodOf sap.ushell.services.ShellNavigation#
             * @name parseShellHash
             * @since 1.15.0
             * @private
             */
            this.hrefForAppSpecificHash = function (sAppHash) {
                return encodeURI(this.privconstructHash(this.privappHashPrefix + sAppHash).hash);
            };

            /**
             *
             * Navigate to an external target
             * Please use CrossApplicationNavigation service and do not invoke this method directly!
             *
             * @param {Object} oArgs  configuration object describing the target
             *
             *  e.g. { target : { semanticObject : "AnObject", action: "Action" },
             *         params : { A : "B" } }
             *
             * constructs sth. like    http://....ushell#AnObject-Action?A=B ....
             * and navigates to it.
             * @param {Object} oComponent runtime
             *
             * @private
             */
            this.toExternal = function (oArgs, oComponent) {
                var sHash,
                    oSaveContext = new StoreContext(oComponent),
                    sAppHash;
                sHash = this.privhrefForExternalNoEnc(oArgs, oSaveContext).hash; // shortened!
                sAppHash = this.privgetAppHash(oArgs);
                this.privsetHash(sHash, sAppHash);
            };

            /**
             * constructs the full shell hash and
             * sets it, thus triggering a navigation to it
             * @param {string} sAppHash specific hash
             * @param writeHistory if true it adds a history entry in the browser if not it replaces the hash
             * @private
             */
            this.toAppHash = function (sAppHash, writeHistory) {
                var sHash = this.privconstructHash(this.privappHashPrefix + sAppHash).hash;
                this.privsetHash(sHash, sAppHash, writeHistory);
            };
        }
    });


    /**
     * Initialization for the shell navigation.
     *
     * This will start listening to hash changes and also fire a hash changed event with the initial hash.
     * @param {function} fnShellCallback Shell callback
     * @protected
     * @return {boolean} false if it was initialized before, true if it was initialized the first time
     */
    sap.ushell.services.ShellNavigationHashChanger.prototype.initShellNavigation = function (fnShellCallback) {

        if (this.priv_initializedByShellNav) {
            jQuery.sap.log.info("initShellNavigation already called on this ShellNavigationHashChanger instance.");
            return false;
        }

        this.privfnShellCallback = fnShellCallback;

        hasher.changed.add(this.treatHashChanged, this); //parse hash changes

        if (!hasher.isActive()) {
            hasher.initialized.addOnce(this.treatHashChanged, this); //parse initial hash
            hasher.init(); //start listening for history change
        } else {
            this.treatHashChanged(hasher.getHash());
        }
        this.priv_initializedByShellNav = true;
        return true;
    };

    /**
     * Initialization for the application
     *
     * The init method of the base class is overridden, because the hasher initialization (registration for hash changes) is already done
     * in <code>initShellNavigation</code> method. The application-specific initialization ensures that the application receives a hash change event for the
     * application-specific part if set in the  initial hash.
     * @return {boolean} false if it was initialized before, true if it was initialized the first time
     * @protected
     */
    sap.ushell.services.ShellNavigationHashChanger.prototype.init = function () {
        if (this.priv_initialized) {
            jQuery.sap.log.info("init already called on this ShellNavigationHashChanger instance.");
            return false;
        }
        // fire initial hash change event for the app-specific part
        var oNewHash = this.privsplitHash(hasher.getHash()),
            sAppSpecificRoute = oNewHash && (oNewHash.appSpecificRoute || "  ").substring(2);  // strip &/
        this.fireEvent("hashChanged", { newHash : sAppSpecificRoute });
        this.priv_initialized = true;
        return true;
    };

    /**
     * Fires the hashchanged event, may be extended to modify the hash before firing the event
     * @param newHash the new hash of the browser
     * @param oldHash - the previous hash
     * @protected
     */
    sap.ushell.services.ShellNavigationHashChanger.prototype.treatHashChanged = function (newHash, oldHash) {
        if (this.inAbandonFlow) {
            // in case and navigation was abandon by a navigation filter, we ignore the hash reset event
            return;
        }

        var sAppSpecificRoute,
            sOldAppSpecificRoute,
            oNewHash,
            oOldHash,
            sNewIntent,
            sOldIntent,
            sNewParameters,
            sOldParameters,
            oError,
            i,
            sFilterResult;
        newHash = this.oURLShortening.expandHash(newHash); // do synchronous expansion if possible
        oldHash = this.oURLShortening.expandHash(oldHash); // if not, the parameter remains and is expanded during NavTargetResolution
        oNewHash = this.privsplitHash(newHash);
        oOldHash = this.privsplitHash(oldHash);

        if (!oNewHash) {
            // illegal new hash; pass the full string and an error object
            oError = new Error("Illegal new hash - cannot be parsed: '" + newHash + "'");
            this.fireEvent("shellHashChanged", {
                newShellHash : newHash,
                newAppSpecificRoute : null,
                oldShellHash : (oOldHash ? oOldHash.shellPart : oldHash),
                error: oError
            });
            this.privfnShellCallback(newHash, null, (oOldHash ? oOldHash.shellPart : oldHash), (oOldHash ? oOldHash.appSpecificRoute : null), oError);
            return;
        } else {
            sNewIntent = oNewHash.intent;
        }

        if (!oOldHash) {
            // illegal old hash - we are less restrictive in this case and just set the complete hash as shell part
            oOldHash = {
                shellPart: oldHash,
                appSpecificRoute: null
            };
        } else {
            sOldIntent = oOldHash.intent;
        }

        //call all navigation filters
        for (i = 0; i < this.aNavigationFilters.length; i = i + 1) {
            try {
                sFilterResult = this.aNavigationFilters[i].call(undefined, newHash, oldHash);
                if (sFilterResult === this.NavigationFilterStatus.Custom) {
                    //filter is handling navigation - stop the navigation flow.
                    return;
                }
                if (sFilterResult === this.NavigationFilterStatus.Abandon) {
                    //filter abandon this navigation, therefore we need to reset the hash and stop the navigation flow
                    this.inAbandonFlow = true;
                    hasher.replaceHash(oldHash);
                    this.inAbandonFlow = false;
                    return;
                }
                //else - continue with navigation
            } catch (e) {
                jQuery.sap.log.error("Error while calling Navigation filter! ignoring filter...", e.message, "sap.ushell.services.ShellNavigation");
            }
        }

        if (sNewIntent === sOldIntent && (oldHash !== undefined)) { // second condition holds true for initial load where we always want to trigger the shell navigation
            // app specific change only !

            if (!this._parametersChanged(oNewHash.params, oOldHash.params)) {
                sAppSpecificRoute = (oNewHash.appSpecificRoute || "  ").substring(2);  // strip &/
                sOldAppSpecificRoute = (oOldHash.appSpecificRoute || "  ").substring(2);  // strip &/
                jQuery.sap.log.info("Inner App Hash changed from '" + sOldAppSpecificRoute + "' to '" + sAppSpecificRoute + "'", null, "sap.ushell.services.ShellNavigation");
                // an empty string has to be propagated!
                this.fireEvent("hashChanged", { newHash : sAppSpecificRoute, oldHash : sOldAppSpecificRoute });
                return;
            }

            if (this.hasListeners("shellHashParameterChanged") ) {
                sNewParameters = sap.ushell.Container.getService("URLParsing").paramsToString(oNewHash.params);
                sOldParameters = sap.ushell.Container.getService("URLParsing").paramsToString(oOldHash.params);

                jQuery.sap.log.info("Shell hash parameters changed from '" + sOldParameters + "' to '" + sNewParameters  + "'", null, "sap.ushell.services.ShellNavigation");
                this.fireEvent("shellHashParameterChanged", { oNewParameters : oNewHash.params, oOldParameters : oOldHash.params });
                return;
            } // if there is no listener for shellHashParameterChanged then we proceed with cross app navigation
        }

        function reload(sHash) {
            // the event handler is fired before hasher.js performs the actual hash update in the browser
            // thus we must update the hash here prior to triggering reload
            // (technically, _encodeHash() of hasher.js would be more appropriate)
            window.location.hash = '#' + encodeURI(sHash);
            window.location.reload();
        }
        if (oldHash !== undefined) {
            if (this.oServiceConfig && this.oServiceConfig.reload) {
                reload(newHash);
            }
        }
        jQuery.sap.log.info("Outer shell hash changed from '" + oldHash + "' to '" + newHash + "'", null, "sap.ushell.services.ShellNavigation");
        // all Shell specific callback -> load other app !
        this.fireEvent("shellHashChanged", { newShellHash : oNewHash.shellPart, newAppSpecificRoute : oNewHash.appSpecificRoute, oldShellHash :  oOldHash.shellPart, oldAppSpecificRoute : oOldHash.appSpecificRoute});
        this.privfnShellCallback(oNewHash.shellPart, oNewHash.appSpecificRoute, oOldHash.shellPart, oOldHash.appSpecificRoute);
    };

    /**
     * Checks whether shell hash parameters have changed
     * @param {object} oNewParameters the new parameters
     * @param {object} oOldParameters the new parameters
     * @returns <code>true</code> if oNewParameters are not equal to oOldParameters
     * @private
     */
    sap.ushell.services.ShellNavigationHashChanger.prototype._parametersChanged = function (oNewParameters, oOldParameters) {
        return !jQuery.sap.equal(oNewParameters, oOldParameters);
    };

    /**
     * Sets the hash to a certain value, this hash is prefixed by the shell hash if present
     * @param {string} sHash the hash
     *  adds a history entry in the browser if not it replaces the hash
     * @protected
     */
    sap.ushell.services.ShellNavigationHashChanger.prototype.setHash = function (sHash) {
        this.toAppHash(sHash, /*writeHistory*/true);
    };

    /**
     * Replaces the hash to a certain value. When using the replace function no browser history is written.
     * If you want to have an entry in the browser history, please use set setHash function.
     * this function has a side effect
     * @param {string} sHash the hash
     * @protected
     */
    sap.ushell.services.ShellNavigationHashChanger.prototype.replaceHash = function (sHash) {
        this.toAppHash(sHash, /* writeHistory */false);
    };


    /**
     * Gets the current hash
     *
     * Override the implementation of the base class and just return the application-specific hash part
     * @returns {string} returned string
     * @protected
     */
    sap.ushell.services.ShellNavigationHashChanger.prototype.getHash = function () {
        return this.getAppHash();
    };

    /**
     * Gets the current application-specific hash part
     *
     * @returns {string} the current application hash
     * @private
     */
    sap.ushell.services.ShellNavigationHashChanger.prototype.getAppHash = function () {
        var oNewHash = this.privsplitHash(hasher.getHash()),
            sAppSpecificRoute = oNewHash && (oNewHash.appSpecificRoute || "  ").substring(2);  // strip &/
        return sAppSpecificRoute;
    };

    /**
     * Cleans the event registration
     * @see sap.ui.base.Object.prototype.destroy
     * @protected
     */
    sap.ushell.services.ShellNavigationHashChanger.prototype.destroy = function () {
        hasher.changed.remove(this.treatHashChanged, this);
        sap.ui.core.routing.HashChanger.prototype.destroy.apply(this, arguments);
    };


    /**
     * The Unified Shell's internal navigation service (platform independent)
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.Container.getService("ShellNavigation")</code>.
     * Constructs a new instance of the shell navigation service.
     *
     * Note that the shell instantiation mechanism has to assure exactly one instance is created (!)
     *
     *
     * This interface is for consumption by shell renderers/containers only
     *
     * It is not for direct usage by applications, see
     *
     * inner app navigation : UI5 interfaces (hashChanger, Router)
     * cross app navigation : @see CrossApplicationNavigation
     *
     *
     * Usage:
     *
     * example: see renders/fiorisandbox/Shell.controller.js
     *
     * <code>
     *   jquery.sap.require("sap.ushell.services.ShellNavigator");<br/>
     *   Shell.onHashChange(shellHash,appHash) {  / *resolve url, load app and exchange root view* / }<br/>
     *   Shell.init() {<br/>
     *     this.privShellNavigator =  sap.ushell.services.ShellNavigator();<br/>
     *     this.privShellNavigator.init(jQuery.proxy(this.doHashChange,this));<br/>
     *   }<br/>
     * </code>
     *
     * Note: further app specific integration via the reference app reuse code
     *  (setting of app specific handler)
     *
     *
     *
     * Note: the ShellNavigation service replaces the UI5 core HashChanger which abstracts from the
     * browser url modification.
     *
     * It performs the following services:
     * - encoding of the actual browser url hash ( via hasher.js).
     * - expansion of "shortened" urls ( AppParameterParts) via invocation.
     * - splitting of shellHash and AppSpecific hash and abstraction w.r.t. Eventing
     *
     * Thus it is crucial to use appropriate interfaces and not directly invoke
     * window.location.hash.
     *
     * - internal construction methods for a "current" App specific and non-app specific hash
     * (invoked by CrossApplicationNavigation), not to be invoked directly!
     *
     * @param {object} oContainerInterface interface
     * @param {string} sParameters parameters
     * @param {object} oServiceConfiguration configuration
     *
     * @constructor
     * @class
     * @see sap.ushell.services.Container#getService
     * @since 1.15.0
     *
     * @public
     */
    function ShellNavigation(oContainerInterface, sParameters, oServiceConfiguration) {
        var oServiceConfig = oServiceConfiguration && oServiceConfiguration.config;
        // instantiate and exchange the HashChanger from UI5
        this.hashChanger = new sap.ushell.services.ShellNavigationHashChanger(oServiceConfig);
        /////////////////////////////// api for external usage

        /**
         * Returns a string which can be put into the DOM (e.g. in a link tag)
         * Please use CrossApplicationNavigation service and do not invoke this method directly
         * if you are an application.
         *
         * @param {Object} oArgs
         *     object encoding a semantic object and action
         *     e.g.:
         *     <pre>
         *     {
         *        target: {
         *            semanticObject: "AnObject",
         *            action: "Action"
         *        },
         *        params: {
         *            A: "B"
         *        }
         *     }
         *     </pre>
         *
         *     or
         *
         *     <pre>
         *     {
         *         target: {
         *             shellHash: "SO-36&jumper=postman"
         *         }
         *     }
         *     </pre>
         * @param {boolean} [bVerbose]
         *    whether the response should be returned in verbose format. If
         *    this flag is set to true, this function returns an object
         *    instead of a string.
         * @param {object} [oComponent]
         *    an optional instance of sap.ui.core.UIComponent
         * @param {boolean} [bAsync]
         *    indicates whether the method should return the result
         *    asynchronously. When set to <code>true</code>, the method
         *    returns a jQuery Deferred object that is resolved only after
         *    the URLShortening save operation is completed.
         *
         * @returns {object}
         *    <p>a string that can be put into an href attribute of an
         *    HTML anchor.  The returned string will always start with a
         *    hash character.</p>
         *
         *    <p>
         *    In case the <b>bVerbose</b> parameter is set to true, an
         *    object that wraps the result string will be returned
         *    instead:
         *    <pre>
         *    { hash : {string},
         *      params : {object}
         *      skippedParams : {object}
         *    }
         *    </pre>
         *    </p>
         *
         * where:
         * <ul>
         * <li><code>params</code> is an object containing non-truncated parameters</li>
         * <li><code>skippedParams</code> is an object containing truncated parameters if truncation occurred or undefined if not</li>
         * </ul>
         *
         * @methodOf sap.ushell.services.ShellNavigation#
         * @name hrefForExternal
         * @since 1.15.0
         * @private
         */
        this.hrefForExternal = function (oArgs, bVerbose, oComponent, bAsync) {
            return this.hashChanger.hrefForExternal(oArgs, bVerbose, oComponent, bAsync);
        };

        /**
         * returns a string which can be put into the DOM (e.g. in a link tag)
         * given an app specific hash suffix,
         * (it may shorten the app specific parts of the url to fit browser restrictions)
         *
         * @param {string} sAppHash Applicatiom hash
         * @returns {string} a string which can be put into the link tag,
         *          containing the current shell hash as prefix and the
         *          specified application hash as suffix
         *
         * example: hrefForAppSpecificHash("View1/details/0/") returns
         * "#MyApp-Display&/View1/details/0/"
         * @methodOf sap.ushell.services.ShellNavigation#
         * @name parseShellHash
         * @since 1.15.0
         * @private
         */
        this.hrefForAppSpecificHash = function (sAppHash) {
            return this.hashChanger.hrefForAppSpecificHash(sAppHash);
        };

        /**
         * compact the parameter object, if required
         * a number of parameters will be removed, instead a corresponding "sap-intent-param"
         * containing a key of an appstate representing the removed parameters will be
         * inserted
         *
         * @param {object} oParams
         *   A parameter object
         * @param {Array} [aRetainedParameters]
         *   An array of string value of parameters which shall not be compacted
         *   The array may contains a *-terminated string, which will match and strings with the same
         *   prefix ( e.g. "sap-*" will match "sap-ushell", "sap-wd", "sap-" etc. )
         * @param {Object} [oComponent]
         *  optional, a SAP UI5 Component
         * @returns a promise, whose first argument of resolve is
         * @protected
         */
        this.compactParams = function (oParams, aRetainedParameters, oComponent) {
            return this.hashChanger.compactParams(oParams, aRetainedParameters, oComponent);
        };

        /**
         * Navigate to an external target
         *
         * @param {Object} oArgs configuration object describing the target
         *
         *  e.g. { target : { semanticObject : "AnObject", action: "Action" },
         *         params : { A : "B" } }
         *
         * constructs sth like    http://....ushell#AnObject-Action?A=B ....
         * and navigates to it.
         * @param {Object} oComponent optional
         *      a SAP UI5 Component
         *
         * @private
         */
        this.toExternal = function (oArgs, oComponent) {
            this.hashChanger.toExternal(oArgs, oComponent);
        };

        /**
         * Constructs the full shell hash and
         * sets it, thus triggering a navigation to it
         * @param {string} sAppHash specific hash
         * @param {boolean} writeHistory if true it adds a history entry in the browser if not it replaces the hash
         * @private
         */
        this.toAppHash = function (sAppHash, writeHistory) {
            this.hashChanger.toAppHash(sAppHash, writeHistory);
        };

        // Lifecycle methods

        /**
         * Initializes ShellNavigation
         *
         * This function should be used by a custom renderer in order to implement custom navigation.
         * Do not use this function for developing Fiori applications.
         *
         * This method should be invoked by the Shell in order to:
         * - Register the event listener
         * - Register the container callback for the (currently single) ShellHash changes.
         *
         * Signature of the callback function(
         *         sShellHashPart,  // The hash part on the URL that is resolved and used for application loading
         *         sAppSpecificPart // Typically ignored
         *         sOldShellHashPart, // The old shell hash part, if exist
         *         sOldAppSpecificPart, // The old app hash part, if exist
         *
         * @param {function} fnShellCallback The callback method for hash changes
         * @returns {object} this
         * @public
         */
        this.init = function (fnShellCallback) {
            hasher.prependHash = "";
            sap.ui.core.routing.HashChanger.replaceHashChanger(this.hashChanger);
            this.hashChanger.initShellNavigation(fnShellCallback);
            return this;
        };

        /**
         * The navigation filter statuses that should be returned by a navigation filter
         * @see sap.ushell.services.ShellNavigation.registerNavigationFilter
         *
         * Continue - continue with the navigation flow
         * Abandon - stop the navigation flow, and revert to the previous hash state
         * Custom - stop the navigation flow, but leave the hash state as is. The filter should use this status
         *  to provide alternative navigation handling
         *
         */
        this.NavigationFilterStatus = this.hashChanger.NavigationFilterStatus;

        /**
         * Register the navigation filter callback function.
         * A navigation filter provides plugins with the ability to intervene in the navigation flow,
         * and optionally to stop the navigation.
         *
         * The callback has to return @see sap.ushell.services.ShellNavigation.NavigationFilterStatus
         *
         * Use <code>Function.prototype.bind()</code> to determine the callback's <code>this</code> or
         * some of its arguments.
         *
         * @param {Object} fnFilter
         *  navigation filter function
         */
        this.registerNavigationFilter = function (fnFilter) {
            this.hashChanger.registerNavigationFilter(fnFilter);
        };
    } // ShellNavigation

    // Note: the container instantiation mechanism has to assure exactly one instance is created
    sap.ushell.services.ShellNavigation = ShellNavigation;
    sap.ushell.services.ShellNavigation.hasNoAdapter = true;


}());

}; // end of sap/ushell/services/ShellNavigation.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.SupportTicket') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview The SupportTicket service.
 */
(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.services.SupportTicket");

    /**
     * This method MUST be called by the Unified Shell's container only, others
     * MUST call <code>sap.ushell.Container.getService("SupportTicket")</code>.
     * Constructs a new instance of the support ticket service.
     *
     * @param {object}
     *            oAdapter the service adapter for the support ticket service,
     *            as already provided by the container
     * @param {object}
     *            oContainerInterface the interface provided by the container
     * @param {string}
     *            sParameters the runtime configuration specified in the
     *            <code>sap.ushell.Container.getService()</code> call (not
     *            evaluated yet)
     * @param {object}
     *            oServiceConfiguration the service configuration defined in the
     *            bootstrap configuration; the boolean property
     *            <code>enabled</code> controls the service enablement
     *
     * This service is disabled by default. It can be enabled explicitly in the
     * bootstrap configuration of the start page:
     * <pre>
     * window[&quot;sap-ushell-config&quot;] = {
     *     services: {
     *         SupportTicket: {
     *             config: {
     *                 enabled: true
     *             }
     *         }
     *     }
     * }
     *
     * Platform implementations can also enable it dynamically by modification of the
     * bootstrap configuration during boot time.
     *
     * @class The Unified Shell's Support Ticket service
     *
     * @public
     * @constructor
     * @see sap.ushell.services.Container#getService
     *
     * @since 1.19.1
     *
     */
    sap.ushell.services.SupportTicket = function (oAdapter, oContainerInterface, sParameters, oServiceConfiguration) {
        var oServiceConfig = (oServiceConfiguration && oServiceConfiguration.config) || {};

        /**
         * Creates a Support Ticket. Forwards the given data (JSON object) to the associated adapter.
         *
         * @param {JSON} oSupportTicketData JSON object containing the input fields required for the support ticket.
         * @returns {object} promise
         * @public
         * @since 1.20.0
         */
        this.createTicket = function (oSupportTicketData) {
            return oAdapter.createTicket(oSupportTicketData);
        };

        /**
         * Checks if the service is enabled.
         * <p>
         * The service enablement depends on the configuration in the back-end system and the bootstrap configuration.
         *
         * @return {boolean} <code>true</code> if the service is enabled; <code>false</code> otherwise
         *
         * @public
         * @since 1.20.0
         */
        this.isEnabled = function () {
            return oServiceConfig.enabled === true;
        };
    };
}());

}; // end of sap/ushell/services/SupportTicket.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.URLParsing') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview URL Parsing shell services
 *
 * URL Parsing serivces for shell compliant hashes
 *
 *
 * [ SO-Action~[Context]]
 * [ ? [A=B(&C=D)+]
 * &/
 *
 * The parsing functions are deliberately restrictive and fragile,
 * only shell compliant hashes are parsed correctly,
 * invalid or completely empty results ( not silently ignored parts) are returned if the hash is not deemed parseable
 */
(function () {
    "use strict";
    /*global jQuery, sap, URI */
    jQuery.sap.declare("sap.ushell.services.URLParsing");

    // usage : sap.ushell.Container.getService("URLParsing").parseShellHash etc.

    /**
     * The Unified Shell's internal URL parsing service (platform independent)
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.Container.getService("URLParsing")</code>.
     * Constructs a new instance of the URL parsing service.
     *
     *
     * Methods in this class allow to break down a shell compliant hash into it's respective parts
     * (SemanticObject,Action,Context, Parameters, appSpecificHash) or (ShellPart,appSpecificHash) respectively
     * or construct a hash from its constituents.
     *
     * All methods deal with the *internal* shellHash format.
     *
     * Most of the parse methods are robust w.r.t. a leading "#".
     *
     * Note: The functions were designed with a "truthy" behaviour for not present values,
     * Thus a client should not rely on the difference between null, "undefined", "" when testing for the
     * result of a parse action.
     *
     * The parsing functions are deliberately restrictive and fragile,
     * only shell compliant hashes are parsed correctly,
     * behaviour for non-compliant hashes is undefined and subject to change,
     * notably we do not aim do "degrade" nicefully or support partial parsing of corrupted urls.
     *
     * @constructor
     * @class
     * @see sap.ushell.services.Container#getService
     * @since 1.15.0
     * @public
     */
    sap.ushell.services.URLParsing = function () {
        /*jslint regexp : true*/
        var reValidShellPart = /^(([A-Za-z0-9_\/]+)-([A-Za-z0-9_\/\-]+)(~([A-Z0-9a-z=+\/]+))?)?([?]([^&]|(&[^\/]))*&?)?$/;
        /**
         * Extract the Shell hash# part from an URL
         * The application specific route part is removed
         * @see getHash for a function which retains the app specific route
        *
        * Shell services shall use this service to extract relevant
        * parts of an URL from an actual URL string (which should be treated as opaque)
        * <p>
        * The URL has to comply with the Fiori-Wave 2 agreed upon format
        *
        * <p>
        * This service shall be used to extract a hash part from an url.
        * The result can be further broken up by parseShellHash
        *
        * examples <p>
        *
        * http://a.b.c?defhij#SemanticObject-Action~Context?PV1=A&PV2=B&/appspecific
        * <br/>
        * returns : "#SemanticObject-Action~Context?PV1=A&PV2=B&/appspecific"
        *
        * Note: the results when passing an illegal (non-compliant) url are undefined and subject to change
        * w.o. notice. Notably further checks may added.
        * The design is deliberately restrictive and non-robust.
        *
        * @param {string} sShellHashString
        *     a valid (Shell) url, e.g. <br/>
        *     <code>http://xx.b.c#Object-name~AFE2==?PV1=PV2&PV4=V5&/display/detail/7?UU=HH</code>
        * @returns {Object}
        *     the parsed result
        *
        *
        * @methodOf sap.ushell.services.URLParsing#
        * @name parseShellHash
        * @since 1.16.0
         *@public
        */
        this.getShellHash = function (sShellHashString) {
            /*jslint regexp : true*/
            var re = /[^#]*#(([^&]|&[^\/])*)(&\/.*)?/,
                match = re.exec(sShellHashString);
            if (match) {
                return match[1];
            }
            return undefined;
        };


        /**
         * Extract a hash part from an URL, including an app-specific part
         * @param {String} sURL
         *   any value
         * @returns {String}
         *   <code>extracted string</code> if and only if a hash is present, undefined otherwise
         * @since 1.16.0
         * @public
         */
        this.getHash = function (sURL) {
            /*jslint regexp : true*/
            var re = /#(.*)/,
                match = re.exec(sURL);
            if (match) {
                return match[1];
            }
            return undefined;
        };

        /**
         * Check if a URL has an intent based navigation part which can be parsed into
         * a semantic object and action part.
         * Accepts only a relative URL (must contain #) or
         * fully qualified Urls for which
         * origin and filename must correspond to the running launchpad.
         * Given actual url
         * <code>
         * http://www.mycorp.com/sap/fiori/FioriLaunchpad.html?sap-language=DE#SO-action?P1=value1
         * </code>, the following parts
         * <code>http://www.mycorp.com/sap/fiori/FioriLaunchpad.html<code> must match.
         *
         * The actual test is synchronous and *only* tests whether the hash part can be parsed
         * and contains a semantic object and action.
         * It does not test whether the intent or it's parameters is valid for a given user
         *
         * @param {String} sUrl the URL to test
         * @returns {Boolean}
         *   true if the conditions are fulfilled.
         * @since 1.30.0
         * @public
         */
        this.isIntentUrl = function (sUrl) {
            /*jslint regexp : true*/
            var reStartWithHash = /^#/,
                oTestUri,
                oLaunchpadUri,
                sTestUriFullResource,
                sLaunchpadUriFullResource,
                sHash,
                oParsedHash;
            if (typeof sUrl !== "string") {
                return false;
            }
            if (!reStartWithHash.test(sUrl)) {
                oTestUri = (new URI(sUrl)).normalize();
                sTestUriFullResource = oTestUri.protocol() + "://" + oTestUri.host() + oTestUri.pathname();
                oLaunchpadUri = (new URI(window.location.href)).normalize();
                sLaunchpadUriFullResource = oLaunchpadUri.protocol() + "://" + oLaunchpadUri.host() + oLaunchpadUri.pathname();
                if (sTestUriFullResource !== sLaunchpadUriFullResource) {
                    return false;
                }
            }
            // sUrl is to be processed by our launchpad
            sHash = this.getHash(sUrl);
            if (!sHash) {
                return false;
            }
            oParsedHash = this.parseShellHash(sHash);
            if (oParsedHash && oParsedHash.semanticObject && oParsedHash.action) {
                return true;
            }
            return false;
        };

        /**
         * parse parameters from a URI query string (starting with ?)
         * into a parameter object
         * @param {String} sParams
         *   Parameter string, e.g. <code>?ABC=1&ABC=1%202DEF=4</code>
         * @returns {Object} oParams
         *   any value { ABC : ["1","1 2"], DEF : ["4"]}
         * @since 1.20.0
         * @public
         */
        this.parseParameters = function (sParams) {
            if (!sParams) {
                return {};
            }
            return jQuery.sap.getUriParameters(sParams).mParams || {};
        };

        /**
         * combine members of a javascript object into a
         * parameter string,
         * note that parameters are ordered in an arbitrary manner
         * which is subject to change
         * @param {Object} oParams
         *   any value { ABC : [1,"1 2"], DEF : ["4"]}
         * @returns {String}
         *   <code>ABC=1&ABC=1%202DEF=4</code>
         *   Note that the result is *not* prefixed with a "?",
         *   parameter values are encodeURIComponent encoded.
         * @since 1.20.0
         * @public
         */
        this.paramsToString = function (oParams) {
            var first,
                a,
                k,
                i,
                lst,
                shellPart = "";
            first = "";
            a = null;
            lst = [];
            for (a in oParams) {
                if (oParams.hasOwnProperty(a)) {
                    lst.push(a);
                }
            }
            lst.sort();
            for (k = 0; k < lst.length; k = k + 1) {
                a = lst[k];
                if (jQuery.isArray(oParams[a])) {
                    for (i = 0; i < oParams[a].length; i = i + 1) {
                        shellPart += first + encodeURIComponent(a) + "=" + encodeURIComponent(oParams[a][i]);
                        first = "&";
                    }
                } else {
                    shellPart += first + encodeURIComponent(a) + "=" + encodeURIComponent(oParams[a]);
                    first = "&";
                }
            }
            return shellPart;
        };

        /**
         * Decompose a shell hash into the respective parts
         * @param {String} sHash
         *  Hash part of a shell compliant URL
         *  <code>#SO-Action~Context?P1=a&P2=x&/route?RPV=1</code>
         *  the hash part of an URL, <br/> e.g. <code>"#Object-name~AFE2==?PV1=PV2&PV4=V5&/display/detail/7?UU=HH</code>
         *
         *  Note that params always has an Array for each parameter value!
         *
         * @returns {object}
         *   <code>undefined </code> if not a parseable hash <br/>
         *   <code> { semanticObject : string, <br/>
         *            action : string, <br/>
         *            contextRaw : string, <br/>
         *            params :  MapObject<String,Array[String]>, <br/>
         *            appSpecificRoute : string <br/>
         *          }
         *  </code>
         *
         * @since 1.16.0
         * @public
         */
        this.parseShellHash = function (sHash) {
            /*jslint regexp : true*/
            var re = reValidShellPart,
                oSplitHash,
                sSemanticObject,
                sAction,
                sContext,
                sParams,
                match,
                pm;
            if (!sHash) {
                return undefined;
            }
            // split shell-hash and app-specific parts first
            oSplitHash = this.splitHash(sHash);

            match = re.exec(oSplitHash.shellPart);
            if (match) {
                sSemanticObject = match[2];
                sAction = match[3];
                sContext = match[5];
                sParams = match[6];
                pm = this.parseParameters(sParams);
                return { semanticObject : sSemanticObject,
                    action : sAction,
                    contextRaw : sContext,
                    params : pm,
                    appSpecificRoute : oSplitHash.appSpecificRoute };
            }
            if (oSplitHash.appSpecificRoute) {
                return { semanticObject : undefined,
                    action : undefined,
                    contextRaw : undefined,
                    params :  {},
                    appSpecificRoute : oSplitHash.appSpecificRoute };
            }
            return undefined;
        };

        /**
         * Internal function
         * @name privstripLeadingHash
         * @param {string} sHash
         *    Shell hash
         * @returns {string} the string wihtout a leading #
         * @since 1.16.0
         * @private
         */
        this.privstripLeadingHash = function (sHash) {
            if (sHash[0] === '#') {
                return sHash.substring(1);
            }
            return sHash;
        };

        /**
         * split a Unified Shell compliant hash into an Object containing a shell specific part and an app specific parts</br>
         * for non compliant hash strings, the empty object {} is returned.
         * an optional leading # is stripped
         * @param {String} sHash
         *  Hash part of a shell conformant URL
         *  {code}#SO-Action~Context?P1=a&P2=x&/route?RPV=1{code}
         *  the hash part of an URL, e.g. {code}"#Object-name~AFE2==?PV1=PV2&PV4=V5&/display/detail/7?UU=HH{code}
         *
         *  Note that params always has an Array for each parameter value!
         *
         * @returns {object}
         *   <code>{}</code>(empty object) if not a parseable hash
         *   <code>{ shellPart : "Object-name~AFE2==?PV1=PV2&PV4=V5",<br/>
         *            appSpecificRoute : "display/detail/7?UU=HH"<br/>
         *         }</br>
         *    </code> otherwise
         *
         * @since 1.16.0
         * @public
         */
        this.splitHash = function (sHash) {
            var re = /^(?:#|)([\S\s]*?)(&\/[\S\s]*)?$/,
                aMatch,
                sShellPart,
                sAppSpecificRoute;

            if (sHash === undefined || sHash === null || sHash === "") {
                return {};
            }
            // break down hash into parts
            // "#SO-ABC~CONTXT?ABC=3A&DEF=4B&/detail/1?A=B");
            aMatch = re.exec(sHash);
            sShellPart = aMatch[1];
            if (sShellPart !== "" && !reValidShellPart.test(sShellPart)) {
                return {};
            }
            sAppSpecificRoute = aMatch[2];
            if (sShellPart || sAppSpecificRoute) {
                return {  shellPart : sShellPart,
                    appSpecificRoute : sAppSpecificRoute }; // ,"&/detail/1?A=B");
            }
            return {};
        };

        function appendIf(sUrl, app) {
            if (app) {
                return sUrl + app;
            }
            return sUrl;
        }

        /**
         * compose a shell Hash from it's respective parts
         * Note that it also may append an app specific route !
         * @returns {string}
         *  the hash part of an URL, e.g. <code>"Object-name~AFE2==?PV1=PV2&PV4=V5&/display/detail/7?UU=HH</code>
         *  returns "" for an undefined object
         *
         * @param {object} oShellHash
         *   <code>undefined </code> if not a parseable hash
         *   <code> { target : { semanticObject : string,<br/>
         *                       action : string,<br/>
         *                       contextRaw : string<br/>
         *                     },<br/>
         *            params :  MapObject<String,Array[String]>,<br/>
         *            appSpecificRoute : string<br/>
         *          }<br/>
         *    </code>
         *    xor
         *   <code> { target : { shellHash }<br/>
         *          }
         *    </code>
         *
         * @since 1.16.0
         * @public
         */
        this.constructShellHash = function (oShellHash) {
            var shellPart,
                paramsCopy,
                result,
                i = null,
                k,
                lst = [],
                first = "?",
                a = null;
            if (!oShellHash) {
                return "";
            }
            // align lack of target
            if (!oShellHash.target) {
                oShellHash.target = {};
                oShellHash.target.semanticObject = oShellHash.semanticObject;
                oShellHash.target.action = oShellHash.action;
                oShellHash.target.contextRaw = oShellHash.contextRaw;
            }
            if (oShellHash.target.shellHash || oShellHash.target.shellHash === "") {
                result = this.privstripLeadingHash(oShellHash.target.shellHash);
                return appendIf(result, oShellHash.appSpecificRoute);
            }
            // reconstruct shell part
            if (oShellHash.target.semanticObject && oShellHash.target.action) {
                shellPart = oShellHash.target.semanticObject + "-" + oShellHash.target.action;
            } else {
                return appendIf("", oShellHash.appSpecificRoute);
            }

            if (oShellHash.target.contextRaw) {
                shellPart += "~" + oShellHash.target.contextRaw;
            }
            first = "?";
            a = null;
            lst = [];
            for (a in oShellHash.params) {
                if (oShellHash.params.hasOwnProperty(a)) {
                    lst.push(a);
                }
            }
            paramsCopy = (oShellHash.params && JSON.parse(JSON.stringify(oShellHash.params))) || {};
            if (oShellHash.appStateKey) {
                lst.push("sap-xapp-state");
                paramsCopy["sap-xapp-state"] = oShellHash.appStateKey;
            }
            lst.sort();
            for (k = 0; k < lst.length; k = k + 1) {
                a = lst[k];
                if (jQuery.isArray(paramsCopy[a])) {
                    if (paramsCopy[a].length > 1) {
                        jQuery.sap.log.error("Array startup parameters violate the designed intent of the Unified Shell Intent, use only single-valued parameters!");
                    }
                    for (i = 0; i < paramsCopy[a].length; i = i + 1) {
                        shellPart += first + encodeURIComponent(a) + "=" + encodeURIComponent(paramsCopy[a][i]);
                        first = "&";
                    }
                } else {
                    shellPart += first + encodeURIComponent(a) + "=" + encodeURIComponent(paramsCopy[a]);
                    first = "&";
                }
            }
            return appendIf(shellPart, oShellHash.appSpecificRoute);
        };

        /**
         * Note: deprecated, please use <code>sap.ui.model.odata.ODataUtils.setOrigin(sServiceUrl, { alias : sSystem });</code>
         * Makes the given server-relative SAP OData service URL point to the system given
         * explicitly as parameter <code>vComponentOrSystem</code>. If this parameter is not provided,
         * it makes the server-relative URL point to the system of the current application.
         * <em>Server-relative URL</em> means a URL starting with exactly one &quot;/&quot; (also known as
         * absolute-path URL). The <em>system of the current application</em> is taken from
         * the parameter &quot;sap-system&quot; of the last navigation target resolution result.
         * <p>
         * If either a multiple-origin parameter <code>;mo/</code> or an origin parameter with qualified system
         * (<code>;o=sid(SYS.123)</code> or <code>o=SYSALIAS</code>) is already present,
         * the <code>sServiceUrl</code> is returned unchanged.
         * <p>
         * The framework invokes this function for SAPUI5 applications that have been built using declarative model
         * instantiation with the application descriptor (data source) mechanism or using an sap.ca framework. For
         * these applications, you do not need to invoke this function explicitly in the application code.
         * If the application does not use any of these mechanisms, but explicitly constructs additional OData models or
         * performs OData requests, the application code shall invoke this function. It shall
         * pass its root component instance as <code>vComponentOrSystem</code> - the function will then determine the system
         * from the navigation start-up parameter &quot;sap-system&quot;
         * (<code>getComponentData().startupParameters[&quot;sap-system&quot;][0]).
         * Applications may call this API with parameter <code>vComponentOrSystem</code> and a non-empty string value
         * if application-specific logic is used to determine the target system for service calls. 
         * <p>
         * With service URLs converted using this API, administrators can redirect service
         * calls to servers other than the default SAP Gateway and back-end server
         * either via reverse proxy (e.g. SAP Web Dispatcher) configuration or using the system
         * alias functionality of the SAP Gateway server.
         * <p>
         * The system is added to the last URL segment of the service URL with the segment parameter
         * <code>;o=</code>. You can also make this function put the system to a different
         * URL path segment of the service URL by specifying the empty segment parameter
         * <code>;o=</code>, e.g. <code>/sap/opu/odata/MyService;o=/MyEntities/$count?p1=v1</code>.
         * If both <code>vComponentOrSystem</code> is empty and the current application has
         * no system, no system is added and the empty segment parameter <code>;o</code> is removed.
         * <br/>
         * <b>Example 1:</b> <code>/sap/opu/odata/MyService/?p1=v1</code> is converted to
         * <code>/sap/opu/odata/MyService;o=SYS/?p1=v1</code> if the target system
         * is &quot;SYS&quot;.
         * However it remains unchanged if both the current application's system <em>and</em>
         * the parameter <code>vComponentOrSystem</code> are empty.<br/>
         * <b>Example 2:</b> <code>/sap/opu/odata/MyService;o=/MyEntities/$count?p1=v1</code> is
         * converted to
         * <code>/sap/opu/odata/MyService;o=sid(SYS.123)/MyEntities/$count?p1=v1</code> if
         * parameter <code>vComponentOrSystem</code> is set to &quot;sid(SYS.123)&quot;</code>.
         * <p>
         * The URL is in no way normalized.
         *
         * @param {string} sServiceUrl
         *   a server-relative URL without system alias information
         * @param {string|sap.ui.core.Component} [vComponentOrSystem]
         *   the root component of the FLP application (
         *   <code>getComponentData().startupParameters[&quot;sap-system&quot;][0]</code> is used as system alias if present)
         *   or a string valued system specification like &quot;SYS&quot; or &quot;sid(SYS.123)&quot;
         *   if undefined or falsy the system of the current application is used
         * @returns {string}
         *   the service URL pointing to the system specified in parameter <code>vComponentOrSystem</code> or
         *   to the system of the current application
         * @public
         * @deprecated please use <code>sap.ui.model.odata.ODataUtils.setOrigin(sServiceUrl, { alias : sSystem });</code>
         * The system alias can be extracted from the Component via <code>getComponentData().startupParameters["sap-system"][0]</code>
         * @since 1.19.1 (passing an SAPUI5 component instance as second parameter is supported since version 1.32.0)
         * @throws Error if the URL is not server-relative (e.g. <code>./something</code>,
         *   <code>http://foo.bar/something</code>, ...)
         */
        this.addSystemToServiceUrl = function (sServiceUrl, vComponentOrSystem) {
            /*jslint regexp:true */
            var oResolution,
                oComponentData,
                sSystem = vComponentOrSystem;
            if (!sServiceUrl || sServiceUrl.indexOf('/') !== 0 || sServiceUrl.indexOf('//') === 0) {
                throw new sap.ui2.srvc.Error("Invalid URL: " + sServiceUrl,
                    "sap.ushell.services.URLParsing");
            }
            if (vComponentOrSystem instanceof sap.ui.core.Component) {
                oComponentData = (typeof vComponentOrSystem.getComponentData === "function") && vComponentOrSystem.getComponentData();
                sSystem = oComponentData && oComponentData.startupParameters && oComponentData.startupParameters["sap-system"]
                            && oComponentData.startupParameters["sap-system"][0];
            }

            oResolution =
                sap.ushell.Container.getService("NavTargetResolution").getCurrentResolution();
            // note: if component is specified but lacks sap-system, we do not do a fallback!
            if (!sSystem && !vComponentOrSystem && oResolution && oResolution.url) {
                sSystem = jQuery.sap.getUriParameters(oResolution.url).get("sap-system");
            }
            if (/^[^?]*(;mo([\/;?]|$))/.test(sServiceUrl) ) {
                // do nothing, mo present
                sServiceUrl = sServiceUrl;
            } else if (/^[^?]*(;o=([\/;?]|$))/.test(sServiceUrl)) {
                // URL with ";o=" *not* followed by system: insert system
                sServiceUrl = sServiceUrl.replace(/;o=([\/;?]|$)/,
                    (sSystem ? ";o=" + sSystem : "") + "$1");
            } else if (!/^[^?]*;o=/.test(sServiceUrl) && sSystem) {
                // URL without ";o=": append system
                sServiceUrl = sServiceUrl.replace(/(\/[^?]*?)(\/$|$|(\/?\?.*))/,
                    "$1;o=" + sSystem + "$2");
            }

            sap.ushell.Container.addRemoteSystemForServiceUrl(sServiceUrl);
            return sServiceUrl;
        };
    };

    sap.ushell.services.URLParsing.hasNoAdapter = true;
}());

}; // end of sap/ushell/services/URLParsing.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.URLShortening') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview URLShortening
 *
 * This service if for internal Shell usage only
 * It has services to compact and expand Long shell hashes
 *
 * @version 1.32.6
 */


/*global jQuery, sap, sessionStorage */
/*jslint nomen: true*/

(function () {
    "use strict";
    /*global jQuery, sap, location*/
    jQuery.sap.declare("sap.ushell.services.URLShortening");
    jQuery.sap.require('jquery.sap.storage'); // unlisted dependency retained


    /**
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.Container.getService("CrossApplicationNavigation")</code>.
     * Constructs a new instance of the CrossApplicationNavigation service.
     *
     * @class A service to compact URL with application parameters exceeding a certain limit
     *        when passing them via the browser hash
     *
     *  The browser hash is limited in length on certain platforms.
     *
     *  The technical means to resolve URLs in the unified shell do not involve browser
     *  has values, as actual parameters are:
     *  a) Passed and returned by the NavTargetResolution service as an OData request/response value
     *  b) subsequently passed to the Application as URL
     *
     * The length of these parameters shall not be restricted by "artificial" and platform dependent
     * browser URL length.
     *
     * The URL Shortener Service allows to shorten a given navigation target URL, replacing
     * extended parameters by a token.
     *
     * The full URL is persisted in the oStoreContext provided functionality
     *
     * This interface is only for usage by shell-internal services
     *
     * Technically this service only compacts Application Parameters of a shell hash,
     * these are split into a retained part (roughly URL_PARAMS_LENGTH_LIMIT long)
     * and an extended part
     *
     * On expansion, parameters from sap-intent-param are *appended* to parameters already
     * present.
     * Note that if the same parameter name appears multiple times in the URL, only some values
     * may be compressed, always trailing parameter values are compressed.
     * Thus the ordering of parameter values for the same parameter name in the original URL is always maintained.
     *
     * Example :  P1 : [1,2,3] => P1=1&P1=2&P1=3  =>  P1=1&sap-intent-param=AF    + AF -> P1=2&P1=3
     * Expand: P1=1&sap-intent-param=AF    + AF -> P1=2&P1=3   => P1 : [1,2,3]
     * or  P1=1111&P1=1&P1=3333&sap-intent-param=AF&P1=4444    + AF -> P1=2&P1=3  => P1 : [1111,1,3333,4444,2,3]
     *
     * Parameters are per default ordered in alphabetic order, then compressed
     *
     * Example:
     *
     * Usage:
     * <code>
     *   var oUrlShortening = sap.ushell.Container.getService("URLShortening");<br/>
     * </code>
     *
     * @constructor
     * @see sap.ushell.services.Container#getService
     * @since 1.20.0
     * @private
     */
    sap.ushell.services.URLShortening = function () {
        var that = this;
        this.ABBREV_PARAM_NAME = "sap-intent-param";
        this.URL_LENGTH_LIMIT = 1023;
        this.URL_PARAMS_LENGTH_LIMIT = 512;

        /**
         * Clients, notably WebDynpro may invoke navigation by passing the Application state *value*, not key
         * as sap-xapp-state *value*.
         * in these cases the unified shell will *store* this value and replace it by the key.
         * Note that there is no corresponding symmetric transparent *expansion* mechanism
         * @param {object} value
         * the value of an sap-xapp-state parameter,
         * in typical use cases already a key, in rare occasions a JSON.serialized string;
         * other cases should not occur
         * @param {object} oStoreContext
         *    An object with defined methods to getNextKey and store() to save a value
         *    Note that the JSON.parse'ed value of value is stored (!)
         * @returns {string}
         *  a generated key iff value is a JSON parseable object,
         *  otherwise the original (unchanged) value
         *
         * @private
         */
        this._replaceSapXAppStateRawWithKeyIfRequired = function(value, oStoreContext) {
                var oValue,
                    sKey;
            if (typeof value !== "string" || /^[A-Z0-9]{40}$/.test(value)) {
                // ok (string key) or something unintelligible
                return value;
            }
            try {
                oValue = JSON.parse(value);
            } catch(ex) {
                jQuery.sap.log.error("This cannot happen: sap-xapp-state parameter value is neither key nor JSON parseable");
                return value;
            }
            sKey = oStoreContext && oStoreContext.getNextKey();
            this._storeValue(sKey, oValue, oStoreContext);
            return sKey;
        };

        /**
        * given a URL which is a shell hash,
        * 1) if the URL contains a parameter sap-xapp-state which is
        *   a) not matching an application state key
        *   b) JSON-parseable
        *   it is assumed it represents raw data which has to be compacted
        *   (e.g. from the WDA interface).
        *   In this case *now* we generate a new Key, store the value via the StoreContext
        *
        * 2) attempt to reduce hash length by replacing
        * parts of the parameter list with sap-intent-param=KEY
        * KEY is a generated key (generated by the Personalization Service key)
        * where KEY is a generated key.
        *
        * Note. If the URL already contains a parameter sap-intent-param, no compaction (2) is performed!
        *
        * The Parameters are stored under KEY using a backend persistence.
        *
        * The inverse operation expandHash replaces a sap-intent-param=KEY
        * value.
        *
        * @param {string} sUrl
        *     A shell hash parameter string
        * @param {Array} aRetainParameterList
        *    an array listing parameter names (in order) which should be preferably
        *    not compacted (=retained in the parameter list),
        *    note that this is only a hint, some system parameters may be retained before this list is respected!
        * @param {object} oStoreContext
        *    an object <code>{ getNextKey : function(); store: function(sValue) }</code>
        * @returns {object}
        *  An object
        *     <code>{ hash : <string> }</code>
        *  An inner shell hash containing the compacted hash
        *  a present truthy member skippedParams indicates URL compaction occurred
        *  Note that no URL compaction occurs if a sap-intent-param is already present!
        *
        *
        * @since 1.20.0
        * @private
         */
        this.compactHash = function (sUrl, aRetainParameterList, oStoreContext) {
            var oSegments,
                sKey,
                oResult,
                prependHash,
                oUrlParsing,
                sResString,
                aRectifiedRetainParameterList = [this.ABBREV_PARAM_NAME, "sap-system", "sap-xapp-state"];
            if (aRetainParameterList) {
                aRetainParameterList.forEach(function (sArg) {
                    aRectifiedRetainParameterList.push(sArg);
                });
            }
            // decompose the URL
            oUrlParsing = sap.ushell.Container.getService("URLParsing");
            oSegments = oUrlParsing.parseShellHash(sUrl);
            if (!oSegments) {
                jQuery.sap.log.error("the URL is not compliant and may break in a future version " + sUrl);
            }
            // extract a hash iff present
            prependHash = '';
            if (sUrl.charAt(0) === '#') {
               prependHash = '#';
            }
            var value = oSegments && oSegments.params && oSegments.params["sap-xapp-state"] && oSegments.params["sap-xapp-state"][0];
            if (value) {
                oSegments.params["sap-xapp-state"] = [ this._replaceSapXAppStateRawWithKeyIfRequired(value, oStoreContext) ];
                // reconstruct URL with modified sap-xapp-state
                sUrl = prependHash + oUrlParsing.constructShellHash({
                    target : {
                        semanticObject: oSegments.semanticObject,
                        action : oSegments.action,
                        contextRaw : oSegments.contextRaw
                    },
                    params : oSegments.params,
                    appSpecificRoute : oSegments.appSpecificRoute
                });
            }
            if (typeof sUrl !== "string" || sUrl.length < that.URL_LENGTH_LIMIT) {
                return { hash : sUrl }; // no shortening
            }
            // already has a parameter name
            // or is the prepared *calling* URL in a open NWBC scenario, where the
            // URL is effectively duplicated when put into the URL, as the resolved URL is added
            // It is up to the Shell to assure it can deal with truncated/shortened URLs here.
            if (oSegments && ((oSegments.params && oSegments.params[that.ABBREV_PARAM_NAME]))) {
                return { hash : sUrl };
            }
            // attempt to compact it if required
            sKey = oStoreContext && oStoreContext.getNextKey();
            oResult = this._splitParameters(oSegments.params, aRectifiedRetainParameterList, sKey);
            if (!oResult.key) {
                // no shortening required or parameter can not be shortened
                return { hash : sUrl };
            }
            sResString = oUrlParsing.paramsToString(oResult.tailParams);
            this._storeValue(oResult.key, sResString, oStoreContext);
            return {
                hash : prependHash + oUrlParsing.constructShellHash({
                    target : {
                        semanticObject: oSegments.semanticObject,
                        action : oSegments.action,
                        contextRaw : oSegments.contextRaw
                    },
                    params : oResult.headParams,
                    appSpecificRoute : oSegments.appSpecificRoute
                }),
                params : oResult.headParams,
                skippedParams : oResult.tailParams
            };
        };

        /**
         * do a simple test on length of the hash
         * issue a warning if it exceeds arbitrary limits.
         *
         * This function can be replaced by compactHash if a
         * transparent URL shortening is desired.
         *
         * currently it truncates the startup parameters if they exceed URL_PARAMS_LENGTH_LIMIT characters
         * @returns {object}
         * it returns an tuple { sHash : sUrl,
         *                       oParams : parameters encoded in URL shell hash
         *                       oSkippedParams : params not encoded in URL shell hash, undefined if no truncation occurred
         *                     }
         *
         * @param {object} sURL
         *   an object representing a parsed semanticobject
         * @since 1.20.0
         * @deprecated
         * @private
          */
        this.checkHashLength = function (sURL) {
            var oSegments,
                oResult,
                prependHash,
                oUrlParsing;
            if (typeof sURL !== "string" || sURL.length < that.URL_LENGTH_LIMIT) {
                return { hash : sURL }; // no shortening
            }
            // decompose the URL
            oUrlParsing = sap.ushell.Container.getService("URLParsing");
            oSegments = oUrlParsing.parseShellHash(sURL);
             //
            prependHash = '';
            if (sURL.charAt(0) === '#') {
                prependHash = '#';
            }
            //
            oResult = this._splitParameters(oSegments.params, [], "DummyKey");
            if (oResult.key) {
                // shell parameter length may not exceed 512
                jQuery.sap.log.error("Application startup parameter length exceeds " + that.URL_PARAMS_LENGTH_LIMIT + " characters, truncation occured!");
                delete oResult.headParams[this.ABBREV_PARAM_NAME];
                // parameter can not be shortened
                return {
                    hash : prependHash + oUrlParsing.constructShellHash({
                        target : {
                            semanticObject: oSegments.semanticObject,
                            action : oSegments.action,
                            contextRaw : oSegments.contextRaw
                        },
                        params : oResult.headParams,
                        appSpecificRoute : oSegments.appSpecificRoute
                    }),
                    params : oResult.headParams,
                    skippedParams : oResult.tailParams
                };
            }
            // decision -> do not support shortening,
            // also do not limit URL length. Thus we allow platform dependent behaviour, good luck
            jQuery.sap.log.error("URL exceeds dangerous limits, arbitrary shortening or worse may occur!");
            return { hash : sURL};
        };

        /**
         * Determine the index of <code>sTest</code> in the Array <code>aArray</code>
         * The searching uses a common prefix match if the last character
         * of a string in the Array is "*"
         * Note that an exact match has higher precedence than a prefix-match.
         * @param {Array} aArray
         * an array of string containing the strings to match
         * @param {string} sTest
         *   the string to test for
         * @returns the index of a matching entry, or -1 if not found
         * <pre>
         * example _findIndex(["A","B"],"A") returns 1
         * example _findIndex(["A","B"],"B") returns 2
         * example _findIndex(["A","B"],"C") returns -1
         * example _findIndex(["A","B-*", "B-A"],"B-C") returns 1
         * example _findIndex(["A","B-*", "B-A"],"B-A") returns 2
         * ( an exact match is searched for first, has higher precedence than a prefix match
         * example _findIndex(["A","B*C", "B-A"],"B-C") returns -1
         * </pre>
         */
        this._findIndex = function(aArray, sTest) {
            var r = aArray.indexOf(sTest);
            if (r >= 0) {
                return r; // exact match
            }
            // poor mans findIndex
            r = -1;
            aArray.every(function(sArr,iIndex) {
                if (sArr.length > 0 && sArr[sArr.length - 1] === "*" &&
                        sArr.substring(0,sArr.length - 1) === sTest.substring(0, sArr.length - 1)) {
                    r = iIndex;
                    return false;
                }
                return true;
            });
            return r;
        };

        this._cmpByList = function (aArray, oA, oB) {
            var i1,
                i2;
            aArray = aArray || [];
            if (oA === oB) {
                return 0;
            }
            i1 = this._findIndex(aArray,oA);
            i2 = this._findIndex(aArray,oB);
            if (i1 >= 0 && i2 >= 0) {
                if ((i1 - i2) !== 0) {
                    return i1 - i2;
                }
                if (oA < oB) {
                    return -1;
                }
                if (oA > oB) {
                    return +1;
                }
                return 0; // should not get here
            }
            if (i1 >= 0) {
                return -1;
            }
            if (i2 >= 0) {
                return +1;
            }
            if (oA < oB) {
                return -1;
            }
            return +1;
        };

        this._sortByPriority = function (aList, aRetainParameterList) {
            return aList.sort(this._cmpByList.bind(this, aRetainParameterList));
        };


        /**
         * split a parameters object,
         * return a triple key, headParams, tailParams if split,
         * otherwise key is undefined
         * @param {object} oParams
         *  Parameter collection
         * @param {array<string>} aRetainParameterList
         *   A list of parameters to retain in the parameter list
         *   (parameters listed here will be retained in order of priority if possible).
         * @param {function} sKey
         *  A function used to generate the key
         * @returns {object}
         *   a triple { key, headParams, tailParams } if split,
         *   otherwise key is undefined, tailParams is an empty object
         * @private
         */
        this._splitParameters = function (oParams, aRetainParameterList, sKey) {
            var a,
                i,
                k,
                headParams = {},
                tailParams = {},
                hasTail = false,
                obj,
                item,
                cLength = 0,
                delta,
                lst = [];
            if (!sKey || typeof sKey !== "string") {
                throw new Error("sap.ushell.services.URLShortening._splitParameters: key must be supplied!");
            }
            // sort parameter names first, then truncate in deterministic order
            for (a in oParams) {
                if (Object.prototype.hasOwnProperty.call(oParams, a)) {
                    lst.push(a);
                }
            }
            lst.sort();
            lst = this._sortByPriority(lst, aRetainParameterList);
            //
            for (k = 0; k < lst.length; k = k + 1) {
                a = lst[k];
                obj = oParams[a];
                if (obj.length > 1) {
                    jQuery.sap.log.error("Array startup parameters violate the designed intent of the Unified Shell Intent, use only single-valued parameters!");
                }
                for (i = 0; i < obj.length; i = i + 1) {
                    item = oParams[a][i];
                    delta = a.length + item.length;
                    if (delta + cLength > this.URL_PARAMS_LENGTH_LIMIT) {
                        if (tailParams[a]) {
                            tailParams[a].push(item);
                        } else {
                            tailParams[a] = [item];
                        }
                        hasTail = true;
                    } else if (headParams[a]) {
                        headParams[a].push(item);
                    } else {
                        headParams[a] = [item];
                    }
                    cLength = cLength + delta + 1;
                }
            }
            if (hasTail) {
                headParams[this.ABBREV_PARAM_NAME] = [ sKey ];
            }
            return { key : sKey,
                     tailParams: tailParams,
                     headParams: headParams
                   };
        };

        /**
        *
        * expand a given URL if the tag is present in the parameters list,
        * using data from a local storage only!
        *
        * @param {string} oUrl
        *   a URL as a string
        * @returns {string}
        *   returns an expanded Hash (sap-intent-param) removed and expanded content
        *   iff the retrieve function is able to resolve the value *synchronously*
        *   inserted instead if present in local storage.
        *   note that the parameters are reordered in alphabetic order
        * @public
        */
        this.expandHash = function (oUrl) {
            var fRetrieveValue = function (sKey) {
                return that._retrieveValue(sKey);
            };
            return this.expandParamGivenRetrievalFunction(oUrl, this.ABBREV_PARAM_NAME, fRetrieveValue);
        };
        /**
        * expand a given shell hash URL
        * if the parameter sParamName is present in the parameters list
        * a string sKey will be extracted from the (first) parameter present,
        * the method fRetrievalValue(sKey) will be invoked to resolve sKey to a string value,
        * this string value is expected to be an Query string ( paramname=paramvalue&amp;... )
        * the parameters from this string are blended into the parameters from sUrl
        * parameters with sParamName are removed
        *
        * parameters extracted via the retrieval function are *appended* to parameters
        * already present
        *
        * @param {string} sUrl
        *    a URL
        * @param {string} sParamName
        *    the Parameter name to extract the key value from
        *    all parameter values will be stripped from the URL if expanded
        * @param {function(string)} fRetrieveValue
        *    the function to invoke to map a key to a value
        *    the value must be a parseable parameter query string, e.g. AA=1234&B=1234
        *    (parameters and value encodeURIComponent encoded)
        *    if it returns undefined, the unmodified sUrl (including sParamName=sKey ) is
        *    returned
        * @returns {string}
        *  the expanded sUrl, or the original one if expansion did not happen
        * @since 1.28.0
        * @public
        */
        this.expandParamGivenRetrievalFunction = function (sUrl, sParamName, fRetrieveValue) {
            var segments,
                val,
                sKey,
                prependHash,
                paramsExpanded;
            if (typeof sUrl !== "string") {
                return sUrl; // no shortening
            }
            // decompose the URL
            segments = sap.ushell.Container.getService("URLParsing").parseShellHash(sUrl);
            // non parseable or does it have a special parameter name?
            sKey = segments && segments.params && segments.params[sParamName] && segments.params[sParamName][0];
            if (!sKey) {
                return sUrl;
            }
            prependHash = '';
            if (sUrl.charAt(0) === '#') {
                prependHash = '#';
            }
            // can we retrieve a value for it?
            val = fRetrieveValue(sKey);
            if (!val) {
                return sUrl;
            }
            paramsExpanded = this._blendParameters(segments.params, sParamName, val);

            return prependHash + sap.ushell.Container.getService("URLParsing").constructShellHash(
                {
                    target : {
                        semanticObject : segments.semanticObject,
                        action : segments.action,
                        contextRaw : segments.contextRaw
                    },
                    params : paramsExpanded,
                    appSpecificRoute : segments.appSpecificRoute
                }
            );
        };

        this._retrieveValue = function (sKey) {
            return undefined; // jQuery.sap.storage(jQuery.sap.storage.Type.session).get(sKey);
        };

        this._storeValue = function (sKey, sValue, oStoreContext) {
            if (oStoreContext && typeof oStoreContext.store === "function") {
                oStoreContext.store(sValue);
            }
            //jQuery.sap.storage(jQuery.sap.storage.Type.session).put(sKey, sValue);
        };


        this._blendParameters = function (oParams, sParamName, sValue) {
            var newParams = sap.ushell.Container.getService("URLParsing").parseParameters("?" + sValue),
                a;
            delete oParams[sParamName];
            for (a in newParams) {
                if (Object.prototype.hasOwnProperty.call(newParams, a)) {
                    if (oParams[a]) {
                        oParams[a] = oParams[a].concat(newParams[a]);
                    } else {
                        oParams[a] = newParams[a];
                    }
                }
            }
            return oParams;
        };


    }; // URLShortening
    sap.ushell.services.URLShortening.hasNoAdapter = true;
}());

}; // end of sap/ushell/services/URLShortening.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.UsageAnalytics') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, window */
    jQuery.sap.declare("sap.ushell.services.UsageAnalytics");

    /**
     * @class A UShell service for tracking business flows and user actions.
     *
     * The UsageAnalytics service exposes API for logging custom events and setting custom field values in the logged events.<br>
     * The data is sent via http and recorded on a server, whose URL is defined by the <code>baseUrl</code> service configuration property.<br>
     * The service configuration must also include the site ID from the <code>pubToken</code> attribute.<br>
     * You can find the pubToken in the code snippet provided in the WARP when creating a new site.
     *
     * Each tracked event is represented by a table entry on the server database.<br>
     * The administrator can produce reports based on the the recorded data.
     *
     * Two types of events can be logged:<br>
     * - Automatic events: Click or pageLoad are predefined events, logged by the base tracking library.<br>
     *  You can disable these events in the service configuration.<br>
     * - Custom events: You can use the service API to log an event with custom data using the function logCustomEvent<br>
     *
     * Each tracked event (either automatic or custom) is represented by a database row, that includes 10 custom attributes named custom1...custom10.<br>
     *  Some of these values can be set using UsageAnalytics service API.<br>
     *
     * @param {object} oContainerInterface
     *     The interface provided by the container
     * @param {object} sParameter
     *     Not used in this service
     * @param {object} oServiceProperties
     *     Service configuration
     *
     * @constructor
     * @see sap.ushell.services.Container#getService
     * @since 1.32.0
     *
     * @public
     */
    sap.ushell.services.UsageAnalytics = function (oContainerInterface, sParameter, oServiceProperties) {
        var oServiceConfig = (oServiceProperties && oServiceProperties.config) || {},
            aDelayedEvents = [],
            bAnalyticsScriptLoaded = false,
            bInitialized = false,
            bEnabled = true;

        window.oCustomProperties = {};

        /**
         * Service API - Begin
         */

        /**
         * Indicates whether Usage Analytics is enabled.
         * Enablement is based on the <code>enable</code> service configuration flag 
         *  and the existence of a valid <code>pubToken</code> in the configuration
         *
         * @returns {boolean} A boolean value indicating whether the UsageAnalytics service is enabled
         *
         * @since 1.32.0
         *
         * @public
         */
        this.isEnabled = function () {
            if (!bInitialized) {
                if (!oServiceConfig.enabled || !oServiceConfig.pubToken) {
                    bEnabled = false;
                    if (!oServiceConfig.pubToken) {
                        jQuery.sap.log.warning("No valid pubToken was found in the service configuration");
                    }
                } else {
                    bEnabled = true;
                }
            }
            return bEnabled;
        };

        /**
         * Initializes the UsageAnalytics service
         *
         * Initialization is performed only if the following two conditions are fulfilled:<br>
         *  1. UsageAnalytics is enabled<br>
         *  2. UsageAnalytics service hasn't been initialized yet
         *
         * @since 1.32.0
         *
         * @public
         */
        this.init = function () {
            if (this.isEnabled() && !bInitialized) {
                this._initUsageAnalyticsLogging();
                bInitialized = true;
            }
        };

        /**
         * Sets up to 4 customer attributes of logged events according to the given object attributes.<br>
         * A customer attribute can be set only once during a session.<br>
         * Currently these attributes correspond to database columns custom3...custom6.
         *
         * @param {object} oCustomFieldValues An object that includes attribute1...attribute4 (or subset)<br>
         *  with values of type string/number/boolean or a function that returns any of these types.<br>
         *  For example:<br>
         *  {<br>
         *   attribute1: "value3",<br>
         *   attribute2: function () {return "value4"},<br>
         *   attribute3: 55<br>
         *  }<br>
         *  in this example the custom field "custom3" gets the string "value3"<br>
         *  the custom field custom4 gets the function that returns the string "value4",<br>
         *  the custom field custom5 gets a string "55".<br>
         *  Any property of oCustomFieldValues which is not in the range of attribute1...attribute4 is ignored.
         *
         * @since 1.32.0
         *
         * @public
         */
        this.setCustomAttributes = function (oCustomFieldValues) {
            var index,
                sParameterKeyPrefix = "attribute",
                sParameterKey,
                sCustomPropertyKeyPrefix = "custom",
                sCustomPropertyKey,
                sFunctionName,
                sFunctionNamePrefix = "customFunction";

            if (!this.isEnabled()) {
                return;
            }
            for (index = 1; index < 5; index++) {

                // Check that the corresponding custom property wasn't set yet
                // e.g. if index=3 then the corresponding sCustomPropertyKey is "custom5"
                // and the check verifies that swa.custom5 is empty
                sCustomPropertyKey = sCustomPropertyKeyPrefix.concat(index + 2);

                if (window.swa[sCustomPropertyKey] !== undefined) {
                    continue;
                }

                // Check that the given object (i.e. oCustomFieldValues) contains parameter with this index
                // e.g. sParameterKey is "attribute3" then check that oCustomFieldValues.attribute3 is defined
                sParameterKey = sParameterKeyPrefix + index;
                if (oCustomFieldValues[sParameterKey] === undefined) {
                    continue;
                }

                // Check if the value of oCustomFieldValues[sCustomPropertyKey] is a function
                if (jQuery.isFunction(oCustomFieldValues[sParameterKey])) {

                     // Giving the anonymous function name . e.g. "customFunction3"
                    sFunctionName = sFunctionNamePrefix + index;

                    // Make a global reference to the function. e.g. window.customFunction3 = the given function
                    window[sFunctionName] = oCustomFieldValues[sParameterKey];

                    // Set the value of the relevant custom property to be a string reference of the function.
                    // e.g. "{ref:"customFunction3"};
                    window.swa[sCustomPropertyKey] = {ref: sFunctionName};
                } else {
                    window.swa[sCustomPropertyKey] = {ref: oCustomFieldValues[sParameterKey]};
                }
            }
        };

        /**
         * Logs a custom event with the given eventType, customEventValue, and additional custom attributes.<br>
         * Each event has up to an additional 4 custom attributes that correspond to database columns custom7...custom10.
         *
         * @param {string} eventType - Type of the event
         * @param {string} customEventValue - Primary value of the event
         * @param {array} aAdditionalValues An array of zero to four strings. Any item above the 4th is ignored.
         *
         * @since 1.32.0
         *
         * @public
         */
        this.logCustomEvent = function (eventType, customEventValue, aAdditionalValues) {
            var index,
                iCustomPropertyIndex,
                sCustomPropertyKey;

            if (!this.isEnabled()) {
                return;
            }
            // If not all logging scripts were loaded - keep the request for later execution, and return.
            if (!this._isAnalyticsScriptLoaded()) {
                this._addDelayedEvent(eventType, customEventValue, aAdditionalValues);
                return;
            }
            if (aAdditionalValues) {
                for (index = 0; index < 4 && index < aAdditionalValues.length; index++) {
                    iCustomPropertyIndex = index + 7;
                    sCustomPropertyKey = "custom" + iCustomPropertyIndex;

                    // Update a global object that includes the additional values
                    window.oCustomProperties[sCustomPropertyKey] = aAdditionalValues[index];

                    // The relevant swa.custom attribute get an object that includes the function _getCustomValue,
                    // and a parameter with which the function locates the relevant value to return
                    window.swa[sCustomPropertyKey] = {ref: "_getCustomValue", params: [iCustomPropertyIndex]};
                }
            }
            this._trackCustomEvent(eventType, customEventValue);
        };

        /**
         * Service API - End
         */

        /**
         * Callback function that is called when SWA scripts are loaded.
         * Goes over all delayed custom events and logs them by calling logCustomEvent
         */
        window._trackingScriptsLoaded = function () {
            var index,
                oTempDelayedEvent;

            bAnalyticsScriptLoaded = true;
            for (index = 0; index < aDelayedEvents.length; index++) {
                oTempDelayedEvent = aDelayedEvents[index];
                this.logCustomEvent(oTempDelayedEvent.eventType, oTempDelayedEvent.customEventValue, oTempDelayedEvent.aAdditionalValues);
            }
            aDelayedEvents = null;
        };

        this._trackCustomEvent = function (eventType, customEventValue) {
            window.swa.trackCustomEvent(eventType, customEventValue);
        };

        /**
         * Embedding SWA's tracking snippet into the renderer's code
         * including the loading of js/privacy.j which is actually SWA's source code
         */
        this._initUsageAnalyticsLogging = function () {
            if (window.swa === undefined) {
                window.swa = {};
            }
            window.swa.pubToken = oServiceConfig.pubToken;
            window.swa.baseUrl = oServiceConfig.baseUrl;
            window.swa.bannerEnabled =  false;
            window.swa.loggingEnabled = true;
            window.swa.visitorCookieTimeout = 63113852;
            window.swa.dntLevel = 1;
            window.swa.trackerReadyCallback = window._trackingScriptsLoaded.bind(this);

            // the following swa properties get the value "true" by default
            window.swa.clicksEnabled  = (oServiceConfig.logClickEvents === false ? false : true);
            window.swa.pageLoadEnabled = (oServiceConfig.logPageLoadEvents === false ? false : true);
            this._handlingTrackingScripts();
        };

        this._handlingTrackingScripts = function () {
            var d = document,
                g = d.createElement('script'),
                s = d.getElementsByTagName('script')[0];

            // Callback function called when tracking script loading failed
            g.onerror = function () {
                bEnabled = false;
                jQuery.sap.log.warning("SWA scripts not loaded!");
            };
            g.type  = 'text/javascript';
            g.defer = true;
            g.async = true;
            g.src = window.swa.baseUrl + 'js/privacy.js';
            s.parentNode.insertBefore(g, s);
        };

        this._isAnalyticsScriptLoaded = function () {
            return bAnalyticsScriptLoaded;
        };

        /**
         * Called when a custom event is being logged but SWA scripts are not loaded yet.
         * Adds the logged event to aDelayedEvents.
         */
        this._addDelayedEvent = function (eventType, customEventValue, aAdditionalValues) {
            var oDelayedEvent = {
                    eventType : eventType,
                    customEventValue : customEventValue,
                    aAdditionalValues : aAdditionalValues
                };
            aDelayedEvents.push(oDelayedEvent);
        };

        window._getCustomValue = function (index) {
            var sCustomPropertyKey = "custom" + index,
                oValueToReturn = window.oCustomProperties[sCustomPropertyKey];

            window.oCustomProperties[sCustomPropertyKey] = undefined;
            return oValueToReturn;
        };
    };
    sap.ushell.services.UsageAnalytics.hasNoAdapter = true;
}());

}; // end of sap/ushell/services/UsageAnalytics.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.UserDefaultParameterPersistence') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview The Unified Shell's UserDefaultParameterPersistence service provides
 *               read and write access to a per user storage of per user
 *               persisted values.
 *
 *               Note:
 *               Values may be read only once per launchpad and storage may be more
 *               coarse grained than on parameter level.
 *               Thus inconsistencies with concurrent editing in separate clients may arise
 *
 *               Note: [security, performance]
 *               Values are be client side cached (Browser HTTP Cache),
 *               if a appropriate cache-busting is used.
 *
 *               This is *not* an application facing service, but for Shell
 *               Internal usage.
 * @version
 * 1.32.6
 */
(function () {
    "use strict";
    /*jslint nomen: true, bitwise: false */
    /*jshint bitwise: false */
    /*global jQuery, sap, setTimeout, clearTimeout, window */
    jQuery.sap.declare("sap.ushell.services.UserDefaultParameterPersistence");

    var aValidProperties = [
        "value",           // the single value
        "noEdit",          // boolean, indicates the property should be hidden from editor
        "alwaysAskPlugin", // boolean, indicates when obtaining a parameterValue the plugins will be queried
        "_shellData", // an opaque member which the shell uses to store information (e.g. timestamps etc)
        "pluginData" // an opaque member which plugins can use to store information on it (e.g. timestamps etc)
    ];
    /**
     * The Unified Shell's UserDefaultParameterPersistence service
     * This method MUST be called by the Unified Shell's container only, others
     * MUST call <code>sap.ushell.Container.getService("UserDefaultParameterPersistence")</code>.
     * Constructs a new instance of the UserDefaultParameterPersistence service.
     *
     * @param {object} oAdapter
     *      The service adapter for the UserDefaultParameterPersistence service,
     *      as already provided by the container
     * @param {object} oContainerInterface
     *      interface
     * @param {string} sParameter
     *      Service instantiation
     * @param {object} oConfig
     *      Service configuration (not in use)
     *
     * @constructor
     * @class
     * @see sap.ushell.services.Container#getService
     *
     * @since 1.32.0
     * @private
     */
    sap.ushell.services.UserDefaultParameterPersistence = function (oAdapter, oContainerInterface, sParameter, oConfig) {
        this._oAdapter = oAdapter;
        this._oData = {};
    };


    sap.ushell.services.UserDefaultParameterPersistence.prototype._cleanseValue = function(oValue) {
        var res = jQuery.extend(true, {} ,oValue),
            a;
        for  (a in res) {
            if (res.hasOwnProperty(a)) {
                if (aValidProperties.indexOf(a) < 0) {
                    delete res[a];
                }
            }
        }
        return res;
    };

    sap.ushell.services.UserDefaultParameterPersistence.prototype._testValue = function(oValue) {
        return true;
    };

    /**
     * Loads a specific ParameterValue from persistence.
     * The first request will typically trigger loading of all parameters from the backend.
     *
     * @param {string} sParameterName
     *      parameter name to be loaded
     * @returns {object}
     *      A jQuery promise, whose done handler receives as first argument a rich parameter object
     *      containing a value, e.g. <code>{ value : "value" }</code>.
     *      Its fail handler receives a message string as first argument.
     *
     * @since 1.32.0
     * @private
     */
    sap.ushell.services.UserDefaultParameterPersistence.prototype.loadParameterValue = function (sParameterName) {
        var oDeferred = new jQuery.Deferred(),
            that = this;
        if (this._oData[sParameterName]) {
            oDeferred.resolve(this._oData[sParameterName]);
        } else {
            this._oAdapter.loadParameterValue(sParameterName).done(function (oValue) {
                var oCleansedValue = that._cleanseValue(oValue);
                if (that._testValue(oCleansedValue)) {
                    oDeferred.resolve(oCleansedValue);
                } else {
                    jQuery.sap.log.error("flawed value returned from persistence");
                    oDeferred.reject("flawed value returned from persistence");
                }
            }).fail(oDeferred.reject.bind(this));
        }
        return oDeferred.promise();
    };

    /**
     * Method to save the parameter value to persistence,
     * note that adapters may choose to save the value delayed and return early with
     * a succeeded promise
     * @param {string} sParameterName
     *      Parameter name
     * @param {object} oValueObject
     *      Parameter value object, contains at least <code>{ value :... }</code>
     * @returns {object}
     *      A jQuery promise, whose done handler receives no parameters.
     *      Its fail handler receives a message string as first argument.
     *
     * @since 1.32.0
     * @public
     */
    sap.ushell.services.UserDefaultParameterPersistence.prototype.saveParameterValue = function (sParameterName, oValueObject) {
        var oDeferred,
            oCleansedValueObject;
        if (!oValueObject) {
            return this.deleteParameter(sParameterName);
        }
        oCleansedValueObject = this._cleanseValue(oValueObject);
        oDeferred = new jQuery.Deferred();
        if (!this._testValue(oCleansedValueObject) || (oValueObject && oValueObject.noStore === true)) {
            return oDeferred.resolve().promise();
        }
        this._oData[sParameterName] = oCleansedValueObject;
        return this._oAdapter.saveParameterValue(sParameterName, oCleansedValueObject);
    };

    /**
     * Method to delete a parameter value from persistence
     * note that adapters may choose to save the value delayed and return early with
     * a succeeded promise
     * @param {string} sParameterName
     *      Parameter name to be deleted
     * @returns {object}
     *      A jQuery promise, whose done handler receives no parameters.
     *      Its fail handler receives a message string as first argument.
     *
     * @since 1.32.0
     * @public
     */
    sap.ushell.services.UserDefaultParameterPersistence.prototype.deleteParameter = function (sParameterName) {
        delete this._oData[sParameterName];
        return this._oAdapter.deleteParameter(sParameterName);
    };

    /**
     * Method to get the application state key
     *
     * @returns {promise}
     *      A jQuery.Deferred whose first argument of resolve is an array of strings
     *      The strings are sorted
     *
     * @since 1.32.0
     * @private
     */
    sap.ushell.services.UserDefaultParameterPersistence.prototype.getStoredParameterNames = function () {
        var oDeferred = new jQuery.Deferred();
        this._oAdapter.getStoredParameterNames().done(function (aRes) {
            aRes.sort();
            oDeferred.resolve(aRes);
        }).fail(oDeferred.reject.bind(oDeferred));
        return oDeferred.promise();
    };

}());

}; // end of sap/ushell/services/UserDefaultParameterPersistence.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.UserDefaultParameters') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview The Unified Shell's UserDefaultParameters service provides
 *               read and write access to the User Default Parameter values.
 *               This is *not* an application facing service, but for Shell
 *               Internal usage.
 *               This service should be accessed by the application
 *               via the CrossApplicationNavigation service.
 *
 * @version
 * 1.32.6
 */
(function () {
    "use strict";
    /*global jQuery, sap, setTimeout, clearTimeout, window */
    jQuery.sap.declare("sap.ushell.services.UserDefaultParameters");

    var sEventNameValueStored = "valueStored";
    var sRelevantStoreDeltaMembers = [ "value", "noEdit", "noStore", "extendedValue", "alwaysAskPlugin"];

    /**
     * The Unified Shell's UserDefaultParameters service
     * This method MUST be called by the Unified Shell's container only, others
     * MUST call <code>sap.ushell.Container.getService("UserDefaultParameters")</code>.
     * Constructs a new instance of the UserDefaultParameters service.
     *
     * @param {object} oAdapter
     *   The service adapter for the UserDefaultParameters service,
     *   as already provided by the container
     * @param {object} oContainerInterface interface
     * @param {string} sParameter Service instantiation
     * @param {object} oConfig service configuration (not in use)
     *
     *
     * @private
     * @constructor
     * @class
     * @see sap.ushell.services.Container#getService
     *
     * @since 1.32.0
     */
    sap.ushell.services.UserDefaultParameters = function (oAdapter, oContainerInterface, sParameter, oConfig) {
        var that = this,
            oStoreValueEventProvider = new sap.ui.base.EventProvider();

        this._aPlugins = []; // list of registered plugins, in order
        /**
         * Obtain an integer representing the priority of the plugin
         *
         * @param {object} oPlugin a plug-in
         *
         * @returns {number} an integer value (default 0) representing the priority of the plug-in
         *
         */
        function getPrio(oPlugin) {
            var val = (typeof oPlugin.getComponentData === "function" &&  oPlugin.getComponentData() && oPlugin.getComponentData().config && oPlugin.getComponentData().config["sap-priority"]) || 0;
            if (typeof val !== "number" || isNaN(val)) {
                return 0;
            }
            return val;
        }

        /**
        * Plugins with higher priority are moved to *lower* places in the queue
        *
        * @param {array} aPlugins list of present plugins, modified!
        * @param {object} oPlugin the plugin to insert
        *
        * @returns {array}
        *  amended list of plugins
        *
        * @private
        *
        * @since 1.32.0
        */
        this._insertPluginOrdered = function (aPlugins, oPlugin) {
            var prioPlugin = getPrio(oPlugin),
                i,
                prioNth;
            for (i = 0; (i < aPlugins.length) && oPlugin; ++i) {
                prioNth = getPrio(aPlugins[i]);
                if (oPlugin && (prioPlugin > prioNth)) {
                    aPlugins.splice(i,0, oPlugin); // insert at index i;
                    oPlugin = undefined;
                }
            }
            if (oPlugin) {
                aPlugins.push(oPlugin);
            }
            return aPlugins;
        };

        // PLUGIN Registratiion  IFFacingPlugin
        /**
         * @param {object} oPlugin the Plugin to register with the service
         * @public
         */
        this.registerPlugin = function (oPlugin) {
            this._aPlugins = this._insertPluginOrdered(this._aPlugins, oPlugin);
        };

        /**
         * Iterates the plugins and searches for a parameter that is
         * handled by the plugin to deliver a value
         *
         * @param {number} iIndex Index of the plugin
         * @param {array} aPlugins Array of the plugins which has been registered to the service
         * @param {string} sParameterName Name of the parameter (search criteria)
         * @param {object} aValue Value which will be returned if it is handled by any plugin
         * @param {object} oDeferred Promise including aValue
         *
         *
         * @private
         * @see sap.ushell.services.Container#getService
         *
         * @since 1.32.0
         */
        function iterateOverPluginsToGetDefaultValue(iIndex, aPlugins, sParameterName, aValue, oDeferred) {
            if (iIndex >= aPlugins.length) {
                oDeferred.resolve(aValue);
                return;
            }
            // every method is optional!
            if (typeof aPlugins[iIndex].getUserDefault !== "function") {
                iterateOverPluginsToGetDefaultValue(iIndex + 1, aPlugins, sParameterName, aValue, oDeferred);
                return;
            }
            aPlugins[iIndex].getUserDefault(sParameterName, aValue).done(function(aNewValue) {
                if (aNewValue) {
                    iterateOverPluginsToGetDefaultValue(iIndex + 1, aPlugins, sParameterName, aNewValue, oDeferred);
                } else {
                    iterateOverPluginsToGetDefaultValue(iIndex + 1, aPlugins, sParameterName, aValue, oDeferred);
                }
            }).fail(function() {
                jQuery.sap.log.error("invocation of getUserDefault(\"" + sParameterName + "\") for plugin " + that._getComponentNameOfPlugin(aPlugins[iIndex]) + " rejected.", null,
                "sap.ushell.services.UserDefaultParameters");
                iterateOverPluginsToGetDefaultValue(iIndex + 1, aPlugins, sParameterName, aValue, oDeferred);
            });
            return;
        }

        function clone(oObject) {
            return jQuery.extend(true, {}, oObject);
        }

        this._getStoreDate = function() {
            return new Date().toString();
        };

        /**
         * Stores the value & persists it.
         * Note, if oValue is undefined, the value is deleted!
         *
         * @param {string} sParameterName Name of the parameter for the value which has to be saved
         * @param {object} oValueObject Value which has to be saved
         * @param {boolean} bFromEditor  true if invoked from editor, in this case an undefined value is interpreted as a "delete value operation"
         * @returns {object}
         *  A jQuery promise
         *
         * @private
         * @constructor
         * @class
         * @see sap.ushell.services.Container#getService
         *
         * @since 1.32.0
         */
        this._storeValue = function(sParameterName, oValueObject, bFromEditor) {
            if (bFromEditor && this._isInitial(oValueObject)) {
                oValueObject = undefined; // indicates removal
            } else {
                oValueObject._shellData = jQuery.extend(true,{ storeDate : this._getStoreDate() }, oValueObject._shellData);
            }
            return sap.ushell.Container.getService("UserDefaultParameterPersistence").saveParameterValue(sParameterName, oValueObject).always(function() {
                var oStoreValue = {
                    parameterName : sParameterName,
                    parameterValue: clone(oValueObject)
                };
                oStoreValueEventProvider.fireEvent(sEventNameValueStored, oStoreValue);
            });
        };

        /**
         * Obtain a present value from the internal store, may return an
         * *empty* <code>{value : undefined}</code> object if not present.
         *
         * @param {string} sParameterName Name of the parameter for the value which has to be received
         * @returns {object}
         *      A jQuery promise
         *
         * @private
         * @see sap.ushell.services.Container#getService
         *
         * @since 1.32.0
         */
        this._getCurrentValue = function(sParameterName) {
            var oDeferred = new jQuery.Deferred();
            sap.ushell.Container.getService("UserDefaultParameterPersistence").loadParameterValue(sParameterName).done(function (aValue) {
                oDeferred.resolve(aValue);
            }).fail(function() {
                oDeferred.resolve({ value : undefined });
            });
            return oDeferred.promise();
        };

        /**
         * Determine whether the value represents a value which has never been set
         * @param {object} oValue value object
         * @returns {boolean} boolean indicating whether oValue represents a Never set Value
         */
        this._isNeverSetValue = function(oValue) {
            return !oValue || (!oValue._shellData && !oValue.value && !oValue.extendedValue);
        };

        /**
         * Determine whether the value is completely empty
         * @param {object} oValue value object
         * @returns {boolean} boolean indicating whether oValue represents a Never set Value
         */
        this._isInitial = function(oValue) {
            return !(oValue && (oValue.value || oValue.extendedValue));
        };

        this._isStoreDistinct = function(oValueObject1, oValueObject2) {
            return !sRelevantStoreDeltaMembers.every(function(sMember) {
                return (oValueObject1[sMember] === oValueObject2[sMember]
                    || jQuery.sap.equal(oValueObject1[sMember],oValueObject2[sMember]));
            });
        };
        /**
         * Attempt to determine a value for the parameter name
         * <code>sParameterName</code>.
         *
         * @param {string} sParameterName
         *      Name of a parameter to be returned
         * @returns {object}
         *      A jQuery promise, whose done handler receives as first argument a rich parameter
         *      object containing a value, e.g. <code>{ value : "value" }</code>.
         *      The promise will typically always be resolved.
         *      Note: It will always return an object, the value property may be
         *      <code>undefined</code> if no value could be retrieved.
         */
        this.getValue = function (sParameterName) {
            // strategy is as follows
            // a) get value from persistence,
            // b) if required ask all plugins in order whether they want to alter value
            // c) return value
            // c2) if value was altered, including set to undefined,
            //    [not on critical path] update value in remote persistences
            //    (potentially deleting value if set to undefined!)
            var that = this,
                oDeferred = new jQuery.Deferred(),
                oDeferred2 = new jQuery.Deferred();
            this._getCurrentValue(sParameterName).done(function(aValue) {
                var aOriginalValue;
                if (!aValue) {
                    aValue = { };
                }
                aOriginalValue = clone(aValue);
                if ( (aValue._shellData || !that._isInitial(aValue)) && !aValue.noStore && !aValue.alwaysAskPlugin) {
                    oDeferred2.resolve(aValue);
                } else {
                    sap.ushell.Container.getUserDefaultPluginsPromise().done(function () {
                        iterateOverPluginsToGetDefaultValue(0, that._aPlugins, sParameterName, aValue, oDeferred2);
                    }).fail(function() {
                        jQuery.sap.log.error("Cannot get value for " + sParameterName + ". One or more plugins could not be loaded.");
                        oDeferred2.reject("Initialization of plugins failed");
                    });
                }
                oDeferred2.done(function (aNewValue) {
                    if (that._isNeverSetValue(aOriginalValue) || that._isStoreDistinct(aOriginalValue,aNewValue)) {
                        that._storeValue(sParameterName, aNewValue);
                    }
                    oDeferred.resolve(aNewValue);
                }).fail(oDeferred.reject.bind(oDeferred));
            });
            return oDeferred.promise();
        };


        this._addParameterValuesToParameters = function(oParameters, aParameterNames) {
            var oDeferred = new jQuery.Deferred();
            var aPromises = [];
            var that = this;
            aParameterNames.forEach(function(sParameterName) {
                var oNthPromise = that.getValue(sParameterName);
                aPromises.push(oNthPromise);
                oNthPromise.done(function (oValueObject) {
                    // what about if noEdit -> remove!
                    oParameters[sParameterName].valueObject = oValueObject;
                });
            });
            jQuery.when.apply(jQuery, aPromises).done(oDeferred.resolve.bind(oDeferred,oParameters)).fail(oDeferred.reject.bind(oDeferred,oParameters));
            return oDeferred.promise();
        };

        this._arrayToObject = function(aParameterNames) {
            var oRes =  {};
            aParameterNames.forEach(function(sParameterName) {
                oRes[sParameterName] = {   };
            });
            return oRes;
        };

        this._getComponentNameOfPlugin = function(oPlugin) {
            if (typeof oPlugin !== "object" || typeof oPlugin.getMetadata !== "function"
                || !oPlugin.getMetadata() || typeof oPlugin.getMetadata().getComponentName !== "function") {
                return "'name of plugin could not be determined'";
            }
            return oPlugin.getMetadata().getComponentName() || "";
        };

        /**
         * given
         * @param {object} oDeferred a jQuery Deferred, which is to be resolved if the execution
         *  succeeded
         * @param {array} aParameterNames the parameter names as string
         * @param {object} oMetadataObject a raw metadata object, not yet amended by plugin data
         * @private
         */
        this._getEditorDataAndValue = function (oDeferred, aParameterNames, oMetadataObject) {
            var that = this;
            var aPromises = [];
            var aResultsOfMetadataPluginCalls = [];
            that._aPlugins.forEach(function(oPlugin, iIndex) {
                if (typeof oPlugin.getEditorMetadata === "function") {
                    var nThPromise = new jQuery.Deferred();
                    aPromises.push(nThPromise);
                    try {
                        var iPromisesLength = aPromises.length - 1;
                        oPlugin.getEditorMetadata(oMetadataObject).done(function(oResultMetadata) {
                            aResultsOfMetadataPluginCalls[iPromisesLength] = oResultMetadata;
                        }).always(function() {
                            nThPromise.resolve();
                        }).fail(function() {
                            jQuery.sap.log.error("EditorMetadata for plugin " + that._getComponentNameOfPlugin(oPlugin) + "cannot be invoked.", null,
                            "sap.ushell.services.UserDefaultParameters");
                            nThPromise.resolve();
                        });
                    } catch (ex) {
                        jQuery.sap.log.error("Error invoking getEditorMetaData on plugin: " + ex + ex.stack, null,
                        "sap.ushell.services.UserDefaultParameters");
                        nThPromise.resolve();
                    }
                }
            });

            jQuery.when.apply(jQuery, aPromises).done(function() {
                // all metadata present
                var aParameterNamesWithoutMetadata = [];
                var oParametersWithMetadata = aResultsOfMetadataPluginCalls.reverse().reduce(function(oPreviousValue, oNthResult) {
                    aParameterNames.forEach(function(sParameterName) {
                        if (oNthResult[sParameterName] && oNthResult[sParameterName].editorMetadata) {
                            oPreviousValue[sParameterName].editorMetadata = oNthResult[sParameterName].editorMetadata;
                        }
                    });
                    return oPreviousValue;
                }, oMetadataObject);
                aParameterNames.forEach(function(sParameterName) {
                    if (!(oParametersWithMetadata[sParameterName] && oParametersWithMetadata[sParameterName].editorMetadata)) {
                        aParameterNamesWithoutMetadata.push(sParameterName);
                    }
                });
                if (aParameterNamesWithoutMetadata.length > 0) {
                    jQuery.sap.log.error("The following parameter names have no editor metadata and thus likely no configured plugin:\n\"" + aParameterNamesWithoutMetadata.join("\",\n\"") + "\".");
                }
                // blend in parameters
                that._addParameterValuesToParameters(oParametersWithMetadata, aParameterNames).done(function(oParameters) {
                    // create a deep copy
                    var oParametersDeepCopy = jQuery.extend(true, {}, oParameters),
                        aKeys;
                    // remove all noEdit parameters
                    aKeys = Object.keys(oParametersDeepCopy).splice(0);
                    aKeys.forEach(function(sParameterName) {
                        var idx;
                        if (oParametersDeepCopy[sParameterName].valueObject &&
                            oParametersDeepCopy[sParameterName].valueObject.noEdit === true) {
                            delete oParametersDeepCopy[sParameterName];
                            // also from the error log list (noEdit parameters w.o. editorMetadata are no cause of concern)
                            idx = aParameterNamesWithoutMetadata.indexOf(sParameterName);
                            if (idx >= 0) {
                                aParameterNamesWithoutMetadata.splice(idx,1);
                            }
                        }
                    });
                    if (aParameterNamesWithoutMetadata.length > 0) {
                        jQuery.sap.log.error("The following parameter names have no editor metadata and thus likely no configured plugin:\n\"" + aParameterNamesWithoutMetadata.join("\",\n\"") + "\".");
                    }
                    oDeferred.resolve(oParametersDeepCopy);
                }).fail(oDeferred.reject.bind(oDeferred));
            });
        };

        /**
         * Obtain the set or parameters, including values and metadata
         * for the UserDefaultParameterEditor
         *
         * This set is defined by all parameter values relevant for a given user
         * as determined by all values contained in Target mappings currently assigned to
         * the user
         *
         * @returns {jQuery.Deferred} promise
         * The first argument of the resolved promise is an object with parameter names as members
         *
         * The order of parameters is suitable order for parameter display.
         *
            <pre>{
                CostCenter: {
                    valueObject: {
                        "value": "1000",
                        "complexValue": "not in this release",
                        "noEdit": false, // filtered out
                        "noStore": true // not relevant for editor
                    },
                    "editorMetadata":{
                        "displayText": "Company code",
                        "description": "This is the company code",
                        "groupId": "EXAMPLE-FIN-GRP1",
                        "groupTitle": "FIN User Defaults (UShell examples)",
                        "parameterIndex": 2,
                        "editorInfo": {
                           "odataURL": "/sap/opu/odata/sap/ZFIN_USER_DEFAULTPARAMETER_SRV",
                           "entityName": "Defaultparameter",
                           "propertyName": "CompanyCode",
                           "bindingPath": "/Defaultparameters('FIN')"
                        }
                    }
                }
            }</pre>
         * the list will not contain values which have noEdit set
         *
         * The promise will typically always be resolved.
         * The first argument of the resolved response is
         * a list value object:
         * <code>{ value : sValueOrUndefined }</code>
         * Note: It will always return an object, the value property may be
         * undefined if no value could be retrieved.
         */
        this.editorGetParameters = function() {
            var oDeferred = new jQuery.Deferred();
            var that = this;
            // determine parameters from ClientSideTargetResolution
            sap.ushell.Container.getService("ClientSideTargetResolution").getUserDefaultParameterNames().done(function(aParameterNames) {
               var oMetadataObject = that._arrayToObject(aParameterNames);
               if (oMetadataObject.length === 0) {
                   // if array is empty, nothing to display in editor
                   oDeferred.resolve({});
               } else {
                   sap.ushell.Container.getUserDefaultPluginsPromise().done(function () {
                       that._getEditorDataAndValue(oDeferred, aParameterNames, oMetadataObject);
                   }).fail(function() {
                       jQuery.sap.log.error("One or more plugins could not be loaded");
                       oDeferred.reject("Initialization of plugins failed");
                   });
               }
            });
            return oDeferred.promise();
        };

        /**
         * Stores the value & persists it.
         * Note, if oValueObject is undefined, the value is deleted!
         *
         * @param {string} sParameterName Name of the parameter for the value which has to be saved
         * @param {object} oValueObject Value which has to be saved
         * @returns {object}
         *      A jQuery promise
         *
         * @private
         * @see sap.ushell.services.Container#getService
         *
         * @since 1.32.0
         */
        this.editorSetValue = function(sParameterName, oValueObject) {
            // an undefined oValueObject means deleting the parameter for the persistence, this is
            // handled by the UserDefaultParameterPersistence service
            return this._storeValue(sParameterName, oValueObject, true);
        };

        /**
         * Attaches a listener to the valueStored event.
         *
         * @param  {function} fnFunction
         *     Event handler to be attached.
         *
         * @methodOf sap.ushell.services.UserDefaultParameters#
         * @name attachValueStored
         * @since 1.34.0
         * @public
         */
        this.attachValueStored = function (fnFunction) {
            oStoreValueEventProvider.attachEvent(sEventNameValueStored, fnFunction);
        };

        /**
         * Detaches a listener from the valueStored event.
         *
         * @param  {function} fnFunction
         *     Event handler to be detached.
         *
         * @methodOf sap.ushell.services.UserDefaultParameters#
         * @name detachValueStored
         * @since 1.34.0
         * @public
         */
        this.detachValueStored = function (fnFunction) {
            oStoreValueEventProvider.detachEvent(sEventNameValueStored, fnFunction);
        };
    };
    sap.ushell.services.UserDefaultParameters.hasNoAdapter = true;
}());

}; // end of sap/ushell/services/UserDefaultParameters.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.UserInfo') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview The Unified Shell's user information service, which allows you to retrieve
 *     information about the user.
 *
 * @version 1.32.6
 */
(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.services.UserInfo");

    /**
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.Container.getService("UserInfo")</code>.
     * Constructs a new instance of the user information service.
     *
     * @class The Unified Shell's user information service, which allows you to retrieve
     *     information about the logged-in user.
     *
     * @constructor
     * @see sap.ushell.services.Container#getService
     * @since 1.16.3
     *
     * @public
     */
    sap.ushell.services.UserInfo = function (oAdapter, oContainerInterface) {
        /**
         * Returns the id of the user.
         *
         * @returns {string}
         *   The user id.
         *
         * @since 1.16.3
         *
         * @public
         */
        this.getId = function () {
            return sap.ushell.Container.getUser().getId();
        };

        /**
         * Returns an object representing the logged-in user.
         *
         * @returns {sap.ushell.User}
         *      object providing information about the logged-in user
         *
         * @since 1.15.0
         *
         * @private
         */
        this.getUser = function () {
            return sap.ushell.Container.getUser();
        };

        /**
         * Returns the list of themes available for the user.
         * In case of success, the <code>done</code> function returns an 'anonymous' object
         * representing the list of themes.
         * In case of failure, the <code>fail</code> function of the jQuery.promise object is called.
         *
         * @returns {object}
         *  jQuery.promise object.
         *
         * @private
         */
        this.getThemeList = function () {
            if (this.getUser().isSetThemePermitted() === false) {
                jQuery.sap.log.error("getThemeList failed");
                throw true;
            }

            var oPromise  = oAdapter.getThemeList();
            oPromise.fail(function () {
                jQuery.sap.log.error("getThemeList failed");
            });
            return oPromise;
        };

        /**
         * Sends the updated user attributes to the adapter.
         * In case of success, the <code>done</code> function returns nothing.
         * In case of failure, the <code>fail</code> function of the jQuery.promise object is called.
         *
         *  @returns {object}
         *  jQuery.promise object
         */
        this.updateUserPreferences = function () {
            var oPromise = oAdapter.updateUserPreferences(sap.ushell.Container.getUser());
            oPromise.fail(function () {
                jQuery.sap.log.error("updateAttributes: ");
            });
            return oPromise;
        };
    };

}());

}; // end of sap/ushell/services/UserInfo.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.AboutButton') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.footerbar.AboutButton.
jQuery.sap.declare("sap.ushell.ui.footerbar.AboutButton");

jQuery.sap.require('sap.m.Button'); // unlisted dependency retained



/**
 * Constructor for a new ui/footerbar/AboutButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Button#constructor sap.m.Button}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/footerbar/AboutButton
 * @extends sap.m.Button
 * @version 1.32.6
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.footerbar.AboutButton
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.Button.extend("sap.ushell.ui.footerbar.AboutButton", { metadata : {

	library : "sap.ushell"
}});


/**
 * Creates a new subclass of class sap.ushell.ui.footerbar.AboutButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.footerbar.AboutButton.extend
 * @function
 */

// Start of sap/ushell/ui/footerbar/AboutButton.js
(function () {
    "use strict";
    /*global jQuery, sap, navigator*/

    jQuery.sap.require('sap.ui.layout.form.SimpleForm'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ObjectHeader'); // unlisted dependency retained

    jQuery.sap.require('sap.m.VBox'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Button'); // unlisted dependency retained

    

    jQuery.sap.declare("sap.ushell.ui.footerbar.AboutButton");

    /**
     * AboutButton
     *
     * @name sap.ushell.ui.footerbar.AboutButton
     * @private
     * @since 1.16.0
     */
    sap.ushell.ui.footerbar.AboutButton.prototype.init = function () {
        this.setIcon('sap-icon://hint');
        this.setWidth('100%');
        this.setText(sap.ushell.resources.i18n.getText("about"));
        this.setTooltip(sap.ushell.resources.i18n.getText("about"));
        this.attachPress(this.showAboutDialog);
        //call the parent sap.m.Button init method
        if (sap.m.Button.prototype.init) {
            sap.m.Button.prototype.init.apply(this, arguments);
        }
    };

    sap.ushell.ui.footerbar.AboutButton.prototype.showAboutDialog = function () {

        jQuery.sap.require("sap.ushell.services.AppConfiguration");

        var translationBundle = sap.ushell.resources.i18n,
            metaData = sap.ushell.services.AppConfiguration.getMetadata(),
            oSimpleForm = new sap.ui.layout.form.SimpleForm({
                id: 'aboutDialogFormID',
                editable: false,
                content : [
                    new sap.m.Label({text : translationBundle.getText("technicalName")}),
                    new sap.m.Text({text : metaData.libraryName || ''}),
                    new sap.m.Label({text : translationBundle.getText("fioriVersionFld")}),
                    new sap.m.Text({text : metaData.version || ''}),
//                    new sap.m.Label({text : translationBundle.getText("fioriBuildFld")}),
//                    new sap.m.Text({text : sap.ui.buildinfo.buildtime || ''}),
                    new sap.m.Label({text : translationBundle.getText("sapui5Fld")}),
                    new sap.m.Text({text : (sap.ui.version || "") + (' (' + (sap.ui.buildinfo.buildtime || "") + ')') || ''}),
                    new sap.m.Label({text : translationBundle.getText("userAgentFld")}),
                    new sap.m.Text({text : navigator.userAgent || ''}),
                    new sap.m.Label({text : ''})
                ]
            }),
            oHeader = new sap.m.ObjectHeader({
                title : metaData.title,
                icon : metaData.icon
            }).addStyleClass('sapUshellAboutDialogHeader'),
            oDialog,
            oVBox,
            okButton = new sap.m.Button({
                text : translationBundle.getText("okBtn"),
                press : function () {
                    oDialog.close();
                }
            });

        if (jQuery.isEmptyObject(metaData) || !metaData.icon) {
            oVBox = new sap.m.VBox({
                items: [oSimpleForm]
            });
        } else {
            oVBox = new sap.m.VBox({
                items: [oHeader, oSimpleForm]
            });
        }

        oDialog = new sap.m.Dialog({
            id: "aboutContainerDialogID",
            title: translationBundle.getText("about"),
            contentWidth : "25rem",
            horizontalScrolling: false,
            leftButton: okButton,
            afterClose : function () {
                oDialog.destroy();
            }
        });

        oDialog.addContent(oVBox);
        oDialog.open();
    };
}());
}; // end of sap/ushell/ui/footerbar/AboutButton.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.AboutButtonRenderer') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.AboutButtonRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ButtonRenderer'); // unlisted dependency retained

    /**
     * @name sap.ushell.ui.footerbar.AboutButtonRenderer
     * @static
     * @private
     */
    sap.ushell.ui.footerbar.AboutButtonRenderer = sap.ui.core.Renderer.extend(sap.m.ButtonRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    //sap.ushell.ui.footerbar.AboutButtonRenderer.render = ;

}());
}; // end of sap/ushell/ui/footerbar/AboutButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.AddBookmarkButton') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.footerbar.AddBookmarkButton.
jQuery.sap.declare("sap.ushell.ui.footerbar.AddBookmarkButton");

jQuery.sap.require('sap.m.Button'); // unlisted dependency retained



/**
 * Constructor for a new ui/footerbar/AddBookmarkButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getBeforePressHandler beforePressHandler} : any</li>
 * <li>{@link #getAfterPressHandler afterPressHandler} : any</li>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getSubtitle subtitle} : string</li>
 * <li>{@link #getInfo info} : string</li>
 * <li>{@link #getTileIcon tileIcon} : string</li>
 * <li>{@link #getNumberUnit numberUnit} : string</li>
 * <li>{@link #getKeywords keywords} : string</li>
 * <li>{@link #getCustomUrl customUrl} : any</li>
 * <li>{@link #getServiceUrl serviceUrl} : any</li>
 * <li>{@link #getServiceRefreshInterval serviceRefreshInterval} : string</li>
 * <li>{@link #getShowGroupSelection showGroupSelection} : boolean (default: true)</li>
 * <li>{@link #getAppData appData} : object</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Button#constructor sap.m.Button}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A button to be displayed in the application footer. Clicking the button opens a dialog box allowing the user to save the app state, so that the app can be launched in this state directly from the launchpad.
 * @extends sap.m.Button
 * @version 1.32.6
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.Button.extend("sap.ushell.ui.footerbar.AddBookmarkButton", { metadata : {

	library : "sap.ushell",
	properties : {
		"beforePressHandler" : {type : "any", group : "Misc", defaultValue : null},
		"afterPressHandler" : {type : "any", group : "Misc", defaultValue : null},
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"subtitle" : {type : "string", group : "Misc", defaultValue : null},
		"info" : {type : "string", group : "Misc", defaultValue : null},
		"tileIcon" : {type : "string", group : "Misc", defaultValue : null},
		"numberUnit" : {type : "string", group : "Misc", defaultValue : null},
		"keywords" : {type : "string", group : "Misc", defaultValue : null},
		"customUrl" : {type : "any", group : "Misc", defaultValue : null},
		"serviceUrl" : {type : "any", group : "Misc", defaultValue : null},
		"serviceRefreshInterval" : {type : "string", group : "Misc", defaultValue : null},
		"showGroupSelection" : {type : "boolean", group : "Misc", defaultValue : true},
		"appData" : {type : "object", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.footerbar.AddBookmarkButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.footerbar.AddBookmarkButton.extend
 * @function
 */


/**
 * Getter for property <code>beforePressHandler</code>.
 * A callback function to be called prior to the press handler upon clicking the button.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>beforePressHandler</code>
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#getBeforePressHandler
 * @function
 */

/**
 * Setter for property <code>beforePressHandler</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oBeforePressHandler  new value for property <code>beforePressHandler</code>
 * @return {sap.ushell.ui.footerbar.AddBookmarkButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#setBeforePressHandler
 * @function
 */


/**
 * Getter for property <code>afterPressHandler</code>.
 * A callback function to be called after the press handler called upon clicking the button.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>afterPressHandler</code>
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#getAfterPressHandler
 * @function
 */

/**
 * Setter for property <code>afterPressHandler</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oAfterPressHandler  new value for property <code>afterPressHandler</code>
 * @return {sap.ushell.ui.footerbar.AddBookmarkButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#setAfterPressHandler
 * @function
 */


/**
 * Getter for property <code>title</code>.
 * Title to be displayed on the tile.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ushell.ui.footerbar.AddBookmarkButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#setTitle
 * @function
 */


/**
 * Getter for property <code>subtitle</code>.
 * Subtitle to be displayed below the tile title.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>subtitle</code>
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#getSubtitle
 * @function
 */

/**
 * Setter for property <code>subtitle</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSubtitle  new value for property <code>subtitle</code>
 * @return {sap.ushell.ui.footerbar.AddBookmarkButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#setSubtitle
 * @function
 */


/**
 * Getter for property <code>info</code>.
 * Text to be displayed at the bottom of the tile.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>info</code>
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#getInfo
 * @function
 */

/**
 * Setter for property <code>info</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sInfo  new value for property <code>info</code>
 * @return {sap.ushell.ui.footerbar.AddBookmarkButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#setInfo
 * @function
 */


/**
 * Getter for property <code>tileIcon</code>.
 * Icon to be desplied in the Tile.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>tileIcon</code>
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#getTileIcon
 * @function
 */

/**
 * Setter for property <code>tileIcon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTileIcon  new value for property <code>tileIcon</code>
 * @return {sap.ushell.ui.footerbar.AddBookmarkButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#setTileIcon
 * @function
 */


/**
 * Getter for property <code>numberUnit</code>.
 * For dynamic tile, the unit to be displayed below the number, for example, USD.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>numberUnit</code>
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#getNumberUnit
 * @function
 */

/**
 * Setter for property <code>numberUnit</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNumberUnit  new value for property <code>numberUnit</code>
 * @return {sap.ushell.ui.footerbar.AddBookmarkButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#setNumberUnit
 * @function
 */


/**
 * Getter for property <code>keywords</code>.
 * The keywords based on which the future tile should be indexed and filtered.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>keywords</code>
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#getKeywords
 * @function
 */

/**
 * Setter for property <code>keywords</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sKeywords  new value for property <code>keywords</code>
 * @return {sap.ushell.ui.footerbar.AddBookmarkButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#setKeywords
 * @function
 */


/**
 * Getter for property <code>customUrl</code>.
 * A customized target URL for the tile.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>customUrl</code>
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#getCustomUrl
 * @function
 */

/**
 * Setter for property <code>customUrl</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oCustomUrl  new value for property <code>customUrl</code>
 * @return {sap.ushell.ui.footerbar.AddBookmarkButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#setCustomUrl
 * @function
 */


/**
 * Getter for property <code>serviceUrl</code>.
 * URL of an OData service from which data should be read.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>serviceUrl</code>
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#getServiceUrl
 * @function
 */

/**
 * Setter for property <code>serviceUrl</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oServiceUrl  new value for property <code>serviceUrl</code>
 * @return {sap.ushell.ui.footerbar.AddBookmarkButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#setServiceUrl
 * @function
 */


/**
 * Getter for property <code>serviceRefreshInterval</code>.
 * Number of seconds after which dynamic content is read from the data source and the display is refreshed.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>serviceRefreshInterval</code>
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#getServiceRefreshInterval
 * @function
 */

/**
 * Setter for property <code>serviceRefreshInterval</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sServiceRefreshInterval  new value for property <code>serviceRefreshInterval</code>
 * @return {sap.ushell.ui.footerbar.AddBookmarkButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#setServiceRefreshInterval
 * @function
 */


/**
 * Getter for property <code>showGroupSelection</code>.
 * Defines whether to display the group selection control within the Save as Tile dialog box.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showGroupSelection</code>
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#getShowGroupSelection
 * @function
 */

/**
 * Setter for property <code>showGroupSelection</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowGroupSelection  new value for property <code>showGroupSelection</code>
 * @return {sap.ushell.ui.footerbar.AddBookmarkButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#setShowGroupSelection
 * @function
 */


/**
 * Getter for property <code>appData</code>.
 * Deprecated – an object containing application information properties.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>appData</code>
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#getAppData
 * @function
 */

/**
 * Setter for property <code>appData</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oAppData  new value for property <code>appData</code>
 * @return {sap.ushell.ui.footerbar.AddBookmarkButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.AddBookmarkButton#setAppData
 * @function
 */

// Start of sap/ushell/ui/footerbar/AddBookmarkButton.js
/*global jQuery, sap*/

(function () {
    "use strict";
    /*global sap, window, location */

    jQuery.sap.require('sap.ui.layout.form.SimpleForm'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Label'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Input'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Button'); // unlisted dependency retained

    

    jQuery.sap.declare("sap.ushell.ui.footerbar.AddBookmarkButton");

    sap.ushell.ui.footerbar.AddBookmarkButton.prototype.init = function () {

        this.setIcon('sap-icon://add-favorite');
        this.setText(sap.ushell.resources.i18n.getText("addToHomePageBtn"));
        this.setTooltip(sap.ushell.resources.i18n.getText("addToHomePageBtn_tooltip"));
        this.setEnabled();  // disables button if shell not initialized
        this.oModel = new sap.ui.model.json.JSONModel({
            showGroupSelection: true,
            title : '',
            subtitle: '',
            numberValue : '',
            info: '',
            icon: '',
            numberUnit: '',
            keywords: ''
        });

        var that = this;

        this.attachPress(function () {
            if (that.getBeforePressHandler()) {
                that.getBeforePressHandler()();
            }

            that.showAddBookmarkDialog(function () {
                if (that.getAfterPressHandler()) {
                    that.getAfterPressHandler()();
                }
            });
        });
        //call the parent sap.m.Button init method
        if (sap.m.Button.prototype.init) {
            sap.m.Button.prototype.init.apply(this, arguments);
        }
    };

    sap.ushell.ui.footerbar.AddBookmarkButton.prototype.exit = function () {
        if (this.oDialog) {
            this.oDialog.destroy();
        }
        //call the parent sap.m.Button exit method
        if (sap.m.Button.prototype.exit) {
            sap.m.Button.prototype.exit.apply(this, arguments);
        }
    };

    sap.ushell.ui.footerbar.AddBookmarkButton.prototype.setBookmarkTileView = function (oView) {
        this.bookmarkTileView = oView;
    };
    sap.ushell.ui.footerbar.AddBookmarkButton.prototype.getBookmarkTileView = function () {
        return this.bookmarkTileView;
    };

    sap.ushell.ui.footerbar.AddBookmarkButton.prototype.showAddBookmarkDialog = function (cb) {
        this.oResourceBundle = sap.ushell.resources.i18n;
        this.appData = this.getAppData() || {};
        var that = this;
        this.cb = cb;

        var bIsAppDataEmpty = jQuery.isEmptyObject(this.appData),
            bookmarkTileView = sap.ui.view({
                type: sap.ui.core.mvc.ViewType.JS,
                viewName: "sap.ushell.ui.footerbar.SaveAsTile",
                viewData: {
                    appData: this.appData,
                    serviceUrl: bIsAppDataEmpty ? this.getServiceUrl() : this.appData.serviceUrl,
                    customUrl: bIsAppDataEmpty ? this.getCustomUrl() : this.appData.customUrl,
                    numberUnit: bIsAppDataEmpty ? this.getNumberUnit() : this.appData.numberUnit,
                    serviceRefreshInterval: bIsAppDataEmpty ? this.getServiceRefreshInterval() : this.appData.serviceRefreshInterval,
                    keywords: bIsAppDataEmpty ? this.getKeywords() : this.appData.keywords
                }
            });
        if (jQuery.isEmptyObject(this.appData)) {
            bookmarkTileView.setModel(this.oModel);
        }
        that.setBookmarkTileView(bookmarkTileView);

        this.oSimpleForm = new sap.ui.layout.form.SimpleForm({
            id: 'bookmarkFormId',
            layout: sap.ui.layout.form.SimpleFormLayout.GridLayout,
            content: [bookmarkTileView]
        }).addStyleClass("sapUshellAddBookmarkForm");

        var oDialog = that._openDialog(this.oSimpleForm);

        //on every change in the input verify if there is a text in the input - if so enable ok, otherwise disable
        bookmarkTileView.getTitleInput().attachLiveChange(function () {
            that._toggleOkButton(this.getValue().trim(), oDialog.getBeginButton());
        });
    };

    sap.ushell.ui.footerbar.AddBookmarkButton.prototype._toggleOkButton = function (sValue, oOkButton) {
        oOkButton.setEnabled(sValue ? true : false);
    };

    sap.ushell.ui.footerbar.AddBookmarkButton.prototype._openDialog = function (oContent) {
        var bEnabled = this.bookmarkTileView.getTitleInput().getValue().length ? true : false,
            okButton = new sap.m.Button('bookmarkOkBtn', {
                text: this.oResourceBundle.getText('okBtn'),
                press: this._handleOkButtonPress.bind(this),
                enabled : bEnabled
            }),
            cancelButton = new sap.m.Button('bookmarkCancelBtn', {
                text: this.oResourceBundle.getText('cancelBtn'),
                press: function () {
                    this.oDialog.close();
                    this.cb();
                }.bind(this)
            });
        this.oDialog = new sap.m.Dialog({
            id: 'bookmarkDialog',
            title: this.oResourceBundle.getText('addToHomePageBtn'),
            contentWidth: '25rem',
            content: oContent,
            beginButton : okButton,
            endButton: cancelButton,
            stretchOnPhone: true,
            horizontalScrolling: false,
            afterClose : function () {
                this.oDialog.destroy();
                delete (this.oDialog);
            }.bind(this)
        });
        this.oDialog.open();
        return this.oDialog;
    };

    sap.ushell.ui.footerbar.AddBookmarkButton.prototype.setTitle = function (sTitle) {
        this.setProperty("title", sTitle, true);
        this.oModel.setProperty("/title", sTitle);
    };
    sap.ushell.ui.footerbar.AddBookmarkButton.prototype.setSubtitle = function (sSubtitle) {
        this.setProperty("subtitle", sSubtitle, true);
        this.oModel.setProperty("/subtitle", sSubtitle);
    };
    sap.ushell.ui.footerbar.AddBookmarkButton.prototype.setInfo = function (sInfo) {
        this.setProperty("info", sInfo, true);
        this.oModel.setProperty("/info", sInfo);
    };
    sap.ushell.ui.footerbar.AddBookmarkButton.prototype.setTileIcon = function (sIcon) {
        this.setProperty("tileIcon", sIcon, true);
        this.oModel.setProperty("/icon", sIcon);
    };


    sap.ushell.ui.footerbar.AddBookmarkButton.prototype.setShowGroupSelection = function (bShowGroupSelection) {
        this.setProperty("showGroupSelection", bShowGroupSelection, true);
        this.oModel.setProperty("/showGroupSelection", bShowGroupSelection);
    };

    sap.ushell.ui.footerbar.AddBookmarkButton.prototype.setNumberUnit = function (sNumberUnit) {
        this.setProperty("numberUnit", sNumberUnit, true);
        this.oModel.setProperty("/numberUnit", sNumberUnit);
    };
    sap.ushell.ui.footerbar.AddBookmarkButton.prototype.setKeywords = function (sKeywords) {
        this.setProperty("keywords", sKeywords, true);
        this.oModel.setProperty("/keywords", sKeywords);
    };

    sap.ushell.ui.footerbar.AddBookmarkButton.prototype._handleOkButtonPress = function () {
        var bookmarkTileView = this.getBookmarkTileView(),
            oData = bookmarkTileView.getBookmarkTileData(),
            tileGroup = oData.group ? oData.group.object : "";
        //remove the group object before sending the data to the service
        delete oData.group;

        var oResultPromise = sap.ushell.Container.getService("Bookmark").addBookmark(oData, tileGroup),
            oResourceBundle = sap.ushell.resources.i18n;
        oResultPromise.done(function () {
            //the tile is added to our model in "_addBookmarkToModel" here we just show the
            //success toast.
            if (sap.ushell.Container) {
                sap.ushell.Container.getService('Message').info(oResourceBundle.getText('tile_created_msg'));
            }
        });
        oResultPromise.fail(function (sMsg) {
            jQuery.sap.log.error(
                "Failed to add bookmark",
                sMsg,
                "sap.ushell.ui.footerbar.AddBookmarkButton"
            );
            if (sap.ushell.Container) {
                sap.ushell.Container.getService('Message').error(oResourceBundle.getText('fail_to_add_tile_msg'));
            }
        });

        this.oDialog.close();
        this.cb();
    };

    sap.ushell.ui.footerbar.AddBookmarkButton.prototype.setEnabled = function (bEnabled) {
        var sState = "",
            bPersonalization = true,
            oShellConfiguration;
        if (sap.ushell.renderers && sap.ushell.renderers.fiori2) {
            oShellConfiguration = sap.ushell.renderers.fiori2.RendererExtensions.getConfiguration();
            if (oShellConfiguration.appState) {
                sState = oShellConfiguration.appState;
            }
            if (oShellConfiguration.enablePersonalization !== undefined) {
                bPersonalization = oShellConfiguration.enablePersonalization;
            }
        }
        if (sState === 'headerless' || sState === 'standalone' || sState === 'embedded' || !bPersonalization) {
            bEnabled = false;
        }
        if (!sap.ushell.Container) {
            if (this.getEnabled()) {
                jQuery.sap.log.warning(
                    "Disabling 'Save as Tile' button: unified shell container not initialized",
                    null,
                    "sap.ushell.ui.footerbar.AddBookmarkButton"
                );
            }
            bEnabled = false;
        }
        sap.m.Button.prototype.setEnabled.call(this, bEnabled);
        if (!bEnabled) {
            this.addStyleClass("sapUshellAddBookmarkButton");
        }
    };
}());

}; // end of sap/ushell/ui/footerbar/AddBookmarkButton.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.AddBookmarkButtonRenderer') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.AddBookmarkButtonRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ButtonRenderer'); // unlisted dependency retained

    /**
     * @name sap.ushell.ui.footerbar.AddBookmarkButtonRenderer
     * @static
     * @private
     */
    sap.ushell.ui.footerbar.AddBookmarkButtonRenderer = sap.ui.core.Renderer.extend(sap.m.ButtonRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    //sap.ushell.ui.footerbar.AddBookmarkButtonRenderer.render = ;
}());
}; // end of sap/ushell/ui/footerbar/AddBookmarkButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.ContactSupportButtonRenderer') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.ContactSupportButtonRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ButtonRenderer'); // unlisted dependency retained

    /**
     * @name sap.ushell.ui.footerbar.ContactSupportButtonRenderer
     * @static
     * @private
     */
    sap.ushell.ui.footerbar.ContactSupportButtonRenderer = sap.ui.core.Renderer.extend(sap.m.ButtonRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    //sap.ushell.ui.footerbar.CreateTicketButtonRenderer.render = ;
}());
}; // end of sap/ushell/ui/footerbar/ContactSupportButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.EndUserFeedbackRenderer') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.EndUserFeedbackRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ButtonRenderer'); // unlisted dependency retained

    /**
     * @name sap.ushell.ui.footerbar.HideGroupsButtonRenderer
     * @static
     * @private
     */
    sap.ushell.ui.footerbar.EndUserFeedbackRenderer = sap.ui.core.Renderer.extend(sap.m.ButtonRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     *
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    //sap.ushell.ui.footerbar.HideGroupsButtonRenderer.render = ;

}());
}; // end of sap/ushell/ui/footerbar/EndUserFeedbackRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.HideGroupsButtonRenderer') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.HideGroupsButtonRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ButtonRenderer'); // unlisted dependency retained

    /**
     * @name sap.ushell.ui.footerbar.HideGroupsButtonRenderer
     * @static
     * @private
     */
    sap.ushell.ui.footerbar.HideGroupsButtonRenderer = sap.ui.core.Renderer.extend(sap.m.ButtonRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     *
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    //sap.ushell.ui.footerbar.HideGroupsButtonRenderer.render = ;

}());
}; // end of sap/ushell/ui/footerbar/HideGroupsButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.JamDiscussButton') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.footerbar.JamDiscussButton.
jQuery.sap.declare("sap.ushell.ui.footerbar.JamDiscussButton");

jQuery.sap.require('sap.m.Button'); // unlisted dependency retained



/**
 * Constructor for a new ui/footerbar/JamDiscussButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getBeforePressHandler beforePressHandler} : any</li>
 * <li>{@link #getAfterPressHandler afterPressHandler} : any</li>
 * <li>{@link #getJamData jamData} : object</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Button#constructor sap.m.Button}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/footerbar/JamDiscussButton
 * @extends sap.m.Button
 * @version 1.32.6
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.footerbar.JamDiscussButton
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.Button.extend("sap.ushell.ui.footerbar.JamDiscussButton", { metadata : {

	library : "sap.ushell",
	properties : {
		"beforePressHandler" : {type : "any", group : "Misc", defaultValue : null},
		"afterPressHandler" : {type : "any", group : "Misc", defaultValue : null},
		"jamData" : {type : "object", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.footerbar.JamDiscussButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.footerbar.JamDiscussButton.extend
 * @function
 */


/**
 * Getter for property <code>beforePressHandler</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>beforePressHandler</code>
 * @public
 * @name sap.ushell.ui.footerbar.JamDiscussButton#getBeforePressHandler
 * @function
 */

/**
 * Setter for property <code>beforePressHandler</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oBeforePressHandler  new value for property <code>beforePressHandler</code>
 * @return {sap.ushell.ui.footerbar.JamDiscussButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.JamDiscussButton#setBeforePressHandler
 * @function
 */


/**
 * Getter for property <code>afterPressHandler</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>afterPressHandler</code>
 * @public
 * @name sap.ushell.ui.footerbar.JamDiscussButton#getAfterPressHandler
 * @function
 */

/**
 * Setter for property <code>afterPressHandler</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oAfterPressHandler  new value for property <code>afterPressHandler</code>
 * @return {sap.ushell.ui.footerbar.JamDiscussButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.JamDiscussButton#setAfterPressHandler
 * @function
 */


/**
 * Getter for property <code>jamData</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>jamData</code>
 * @public
 * @name sap.ushell.ui.footerbar.JamDiscussButton#getJamData
 * @function
 */

/**
 * Setter for property <code>jamData</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oJamData  new value for property <code>jamData</code>
 * @return {sap.ushell.ui.footerbar.JamDiscussButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.JamDiscussButton#setJamData
 * @function
 */

// Start of sap/ushell/ui/footerbar/JamDiscussButton.js
(function () {
    "use strict";
    /*global jQuery, sap*/

    

    jQuery.sap.declare("sap.ushell.ui.footerbar.JamDiscussButton");

    /**
     * JamDiscussButton
     * 
     * @name sap.ushell.ui.footerbar.JamDiscussButton
     * @private
     * @since 1.15.0
     */
    sap.ushell.ui.footerbar.JamDiscussButton.prototype.init = function () {
        jQuery.sap.require("sap.ushell.services.Container");

        var that = this;

        this.setEnabled();        // disables button if shell not initialized or Jam not active
        this.setIcon('sap-icon://discussion-2');
        this.setText(sap.ushell.resources.i18n.getText("discussBtn"));

        this.attachPress(function () {
            if (that.getBeforePressHandler()) {
                that.getBeforePressHandler()();
            }
            this.showDiscussDialog(that.getAfterPressHandler());
        });
        //call the parent sap.m.Button init method
        if (sap.m.Button.prototype.init) {
            sap.m.Button.prototype.init.apply(this, arguments);
        }
    };

    sap.ushell.ui.footerbar.JamDiscussButton.prototype.showDiscussDialog = function (cb) {
        jQuery.sap.require('sap.collaboration.components.fiori.feed.dialog.Component');
        if (!this.discussComponent) {
            this.discussComponent = sap.ui.getCore().createComponent({
                name: "sap.collaboration.components.fiori.feed.dialog"
            });
        }
        this.discussComponent.setSettings(this.getJamData());
        this.discussComponent.open();

        //TODO: call callback after dialog vanishes
        if (cb) {
            cb();
        }
    };

    sap.ushell.ui.footerbar.JamDiscussButton.prototype.setEnabled = function (bEnabled) {
        if (!sap.ushell.Container) {
            if (this.getEnabled()) {
                jQuery.sap.log.warning(
                    "Disabling JamDiscussButton: unified shell container not initialized",
                    null,
                    "sap.ushell.ui.footerbar.JamDiscussButton"
                );
            }
            bEnabled = false;
        } else {
            var user = sap.ushell.Container.getUser();
            if (!(user && user.isJamActive())) {
                if (this.getEnabled()) {
                    jQuery.sap.log.info(
                        "Disabling JamDiscussButton: user not logged in or Jam not active",
                        null,
                        "sap.ushell.ui.footerbar.JamDiscussButton"
                    );
                }
                bEnabled = false;
                this.setVisible(false);
            }
        }
        sap.m.Button.prototype.setEnabled.call(this, bEnabled);
    };

}());

}; // end of sap/ushell/ui/footerbar/JamDiscussButton.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.JamDiscussButtonRenderer') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.JamDiscussButtonRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ButtonRenderer'); // unlisted dependency retained

    /**
     * @name sap.ushell.ui.footerbar.JamDiscussButtonRenderer
     * @static
     * @private
     */
    sap.ushell.ui.footerbar.JamDiscussButtonRenderer = sap.ui.core.Renderer.extend(sap.m.ButtonRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    //sap.ushell.ui.footerbar.JamDiscussButtonRenderer.render = ;
}());
}; // end of sap/ushell/ui/footerbar/JamDiscussButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.JamShareButton') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.footerbar.JamShareButton.
jQuery.sap.declare("sap.ushell.ui.footerbar.JamShareButton");

jQuery.sap.require('sap.m.Button'); // unlisted dependency retained



/**
 * Constructor for a new ui/footerbar/JamShareButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getBeforePressHandler beforePressHandler} : any</li>
 * <li>{@link #getAfterPressHandler afterPressHandler} : any</li>
 * <li>{@link #getJamData jamData} : object</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Button#constructor sap.m.Button}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/footerbar/JamShareButton
 * @extends sap.m.Button
 * @version 1.32.6
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.footerbar.JamShareButton
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.Button.extend("sap.ushell.ui.footerbar.JamShareButton", { metadata : {

	library : "sap.ushell",
	properties : {
		"beforePressHandler" : {type : "any", group : "Misc", defaultValue : null},
		"afterPressHandler" : {type : "any", group : "Misc", defaultValue : null},
		"jamData" : {type : "object", group : "Misc", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.footerbar.JamShareButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.footerbar.JamShareButton.extend
 * @function
 */


/**
 * Getter for property <code>beforePressHandler</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>beforePressHandler</code>
 * @public
 * @name sap.ushell.ui.footerbar.JamShareButton#getBeforePressHandler
 * @function
 */

/**
 * Setter for property <code>beforePressHandler</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oBeforePressHandler  new value for property <code>beforePressHandler</code>
 * @return {sap.ushell.ui.footerbar.JamShareButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.JamShareButton#setBeforePressHandler
 * @function
 */


/**
 * Getter for property <code>afterPressHandler</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {any} the value of property <code>afterPressHandler</code>
 * @public
 * @name sap.ushell.ui.footerbar.JamShareButton#getAfterPressHandler
 * @function
 */

/**
 * Setter for property <code>afterPressHandler</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {any} oAfterPressHandler  new value for property <code>afterPressHandler</code>
 * @return {sap.ushell.ui.footerbar.JamShareButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.JamShareButton#setAfterPressHandler
 * @function
 */


/**
 * Getter for property <code>jamData</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {object} the value of property <code>jamData</code>
 * @public
 * @name sap.ushell.ui.footerbar.JamShareButton#getJamData
 * @function
 */

/**
 * Setter for property <code>jamData</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {object} oJamData  new value for property <code>jamData</code>
 * @return {sap.ushell.ui.footerbar.JamShareButton} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.JamShareButton#setJamData
 * @function
 */

// Start of sap/ushell/ui/footerbar/JamShareButton.js
(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.JamShareButton");

    

    /**
     * JamShareButton
     *
     * @name sap.ushell.ui.footerbar.JamShareButton
     * @private
     * @since 1.15.0
     */
    sap.ushell.ui.footerbar.JamShareButton.prototype.init = function () {
        jQuery.sap.require("sap.ushell.services.Container");

        var that = this;

        this.setEnabled();        // disables button if shell not initialized or Jam not active
        this.setIcon('sap-icon://share-2');
        this.setText(sap.ushell.resources.i18n.getText("shareBtn"));

        this.attachPress(function () {
            if (that.getBeforePressHandler()) {
                that.getBeforePressHandler()();
            }
            this.showShareDialog(that.getAfterPressHandler());
        });
        //call the parent sap.m.Button init method
        if (sap.m.Button.prototype.init) {
            sap.m.Button.prototype.init.apply(this, arguments);
        }
    };

    sap.ushell.ui.footerbar.JamShareButton.prototype.showShareDialog = function (cb) {
        jQuery.sap.require('sap.collaboration.components.fiori.sharing.dialog.Component');
        if (!this.shareComponent) {
            this.shareComponent = sap.ui.getCore().createComponent({
                name: "sap.collaboration.components.fiori.sharing.dialog"
            });
        }
        this.shareComponent.setSettings(this.getJamData());
        this.shareComponent.open();

        //TODO: call callback after dialog vanishes
        if (cb) {
            cb();
        }
    };

    sap.ushell.ui.footerbar.JamShareButton.prototype.exit = function () {
        if (this.shareComponent) {
            this.shareComponent.destroy();
        }
        //call the parent sap.m.Button exit method
        if (sap.m.Button.prototype.exit) {
            sap.m.Button.prototype.exit.apply(this, arguments);
        }
    };

    sap.ushell.ui.footerbar.JamShareButton.prototype.setEnabled = function (bEnabled) {
        if (!sap.ushell.Container) {
            if (this.getEnabled()) {
                jQuery.sap.log.warning(
                    "Disabling JamShareButton: unified shell container not initialized",
                    null,
                    "sap.ushell.ui.footerbar.JamShareButton"
                );
            }
            bEnabled = false;
        } else {
            var user = sap.ushell.Container.getUser();
            if (!(user && user.isJamActive())) {
                if (this.getEnabled()) {
                    jQuery.sap.log.info(
                        "Disabling JamShareButton: user not logged in or Jam not active",
                        null,
                        "sap.ushell.ui.footerbar.JamShareButton"
                    );
                }
                bEnabled = false;
                this.setVisible(false);
            }
        }
        sap.m.Button.prototype.setEnabled.call(this, bEnabled);
    };

}());

}; // end of sap/ushell/ui/footerbar/JamShareButton.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.JamShareButtonRenderer') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.JamShareButtonRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ButtonRenderer'); // unlisted dependency retained

    /**
     * @name sap.ushell.ui.footerbar.JamShareButtonRenderer
     * @static
     * @private
     */
    sap.ushell.ui.footerbar.JamShareButtonRenderer = sap.ui.core.Renderer.extend(sap.m.ButtonRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    //sap.ushell.ui.footerbar.JamShareButtonRenderer.render = ;
}());
}; // end of sap/ushell/ui/footerbar/JamShareButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.LogoutButton') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.footerbar.LogoutButton.
jQuery.sap.declare("sap.ushell.ui.footerbar.LogoutButton");

jQuery.sap.require('sap.m.Button'); // unlisted dependency retained



/**
 * Constructor for a new ui/footerbar/LogoutButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Button#constructor sap.m.Button}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A logout button for the UShell footerbar.
 * @extends sap.m.Button
 * @version 1.32.6
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.footerbar.LogoutButton
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.Button.extend("sap.ushell.ui.footerbar.LogoutButton", { metadata : {

	library : "sap.ushell"
}});


/**
 * Creates a new subclass of class sap.ushell.ui.footerbar.LogoutButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.footerbar.LogoutButton.extend
 * @function
 */

// Start of sap/ushell/ui/footerbar/LogoutButton.js
(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.LogoutButton");

    

    /**
     * LogoutButton
     *
     * @name sap.ushell.ui.footerbar.LogoutButton
     * @private
     * @since 1.16.0
     */
    sap.ushell.ui.footerbar.LogoutButton.prototype.init = function () {
        this.setIcon('sap-icon://log');
        this.setTooltip(sap.ushell.resources.i18n.getText("logoutBtn_tooltip"));
        this.setWidth('100%');
        this.setText(sap.ushell.resources.i18n.getText("logoutBtn_title"));
        this.attachPress(this.logout);
        this.setEnabled();  // disables button if shell not initialized
        //call the parent sap.m.Button init method
        if (sap.m.Button.prototype.init) {
            sap.m.Button.prototype.init.apply(this, arguments);
        }
    };

    sap.ushell.ui.footerbar.LogoutButton.prototype.logout = function () {
        jQuery.sap.require('sap.m.MessageBox');
        var bShowLoadingScreen = true,
            bIsLoadingScreenShown = false,
            oLoading = new sap.ushell.ui.launchpad.LoadingDialog({text: ""});

        sap.ushell.Container.getGlobalDirty().done(function (dirtyState) {
            bShowLoadingScreen = false;
            if (bIsLoadingScreenShown === true) {
                oLoading.exit();
                oLoading = new sap.ushell.ui.launchpad.LoadingDialog({text: ""});
            }

            var _getLogoutDetails = function (dirtyState) {
                var oLogoutDetails = {},
                    oResourceBundle = sap.ushell.resources.i18n;

                if (dirtyState === sap.ushell.Container.DirtyState.DIRTY) {
                    // show warning only if it is sure that there are unsaved changes
                    oLogoutDetails.message = oResourceBundle.getText('unsaved_data_warning_popup_message');
                    oLogoutDetails.icon = sap.m.MessageBox.Icon.WARNING;
                    oLogoutDetails.messageTitle = oResourceBundle.getText("unsaved_data_warning_popup_title");
                } else {
                    // show 'normal' logout confirmation in all other cases, also if dirty state could not be determined
                    oLogoutDetails.message = oResourceBundle.getText('logoutConfirmationMsg');
                    oLogoutDetails.icon = sap.m.MessageBox.Icon.QUESTION;
                    oLogoutDetails.messageTitle = oResourceBundle.getText("logoutMsgTitle");
                }

                return oLogoutDetails;
            };

            var oLogoutDetails = _getLogoutDetails(dirtyState);
            sap.m.MessageBox.show(oLogoutDetails.message, oLogoutDetails.icon,
                oLogoutDetails.messageTitle, [sap.m.MessageBox.Action.OK, sap.m.MessageBox.Action.CANCEL],
                function (oAction) {
                    if (oAction === sap.m.MessageBox.Action.OK) {
                        oLoading.openLoadingScreen();
                        oLoading.showAppInfo(sap.ushell.resources.i18n.getText('beforeLogoutMsg'), null);
                        sap.ushell.Container.logout();
                    }
                }, sap.ui.core.ElementMetadata.uid("confirm"));
        });
        if (bShowLoadingScreen === true) {
            oLoading.openLoadingScreen();
            bIsLoadingScreenShown = true;
        }
    };

    sap.ushell.ui.footerbar.LogoutButton.prototype.setEnabled = function (bEnabled) {
        if (!sap.ushell.Container) {
            if (this.getEnabled()) {
                jQuery.sap.log.warning(
                    "Disabling 'Logout' button: unified shell container not initialized",
                    null,
                    "sap.ushell.ui.footerbar.LogoutButton"
                );
            }
            bEnabled = false;
        }
        sap.m.Button.prototype.setEnabled.call(this, bEnabled);
    };



}());

}; // end of sap/ushell/ui/footerbar/LogoutButton.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.LogoutButtonRenderer') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.LogoutButtonRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ButtonRenderer'); // unlisted dependency retained

    /**
     * @name sap.ushell.ui.footerbar.LogoutButtonRenderer
     * @static
     * @private
     */
    sap.ushell.ui.footerbar.LogoutButtonRenderer = sap.ui.core.Renderer.extend(sap.m.ButtonRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     *
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    //sap.ushell.ui.footerbar.LogoutButtonRenderer.render = ;

}());
}; // end of sap/ushell/ui/footerbar/LogoutButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.SettingsButton') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.footerbar.SettingsButton.
jQuery.sap.declare("sap.ushell.ui.footerbar.SettingsButton");

jQuery.sap.require('sap.m.Button'); // unlisted dependency retained



/**
 * Constructor for a new ui/footerbar/SettingsButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Button#constructor sap.m.Button}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/footerbar/SettingsButton
 * @extends sap.m.Button
 * @version 1.32.6
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.footerbar.SettingsButton
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.Button.extend("sap.ushell.ui.footerbar.SettingsButton", { metadata : {

	library : "sap.ushell"
}});


/**
 * Creates a new subclass of class sap.ushell.ui.footerbar.SettingsButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.footerbar.SettingsButton.extend
 * @function
 */

// Start of sap/ushell/ui/footerbar/SettingsButton.js
(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.SettingsButton");

    

    /**
     * SettingsButton
     * 
     * @name sap.ushell.ui.footerbar.SettingsButton
     * @private
     * @since 1.16.0
     */
    sap.ushell.ui.footerbar.SettingsButton.prototype.init = function () {
        jQuery.sap.require("sap.ushell.ui.footerbar.AboutButton");
        jQuery.sap.require("sap.ushell.ui.footerbar.UserPreferencesButton");
        jQuery.sap.require("sap.ushell.ui.footerbar.LogoutButton");

        this.setIcon('sap-icon://action-settings');
        this.setTooltip(sap.ushell.resources.i18n.getText("helpBtn_tooltip"));

        this.attachPress(this.showSettingsMenu);

        var oAboutButton = new sap.ushell.ui.footerbar.AboutButton(),
            oUserPrefButton = new sap.ushell.ui.footerbar.UserPreferencesButton(),
            oLogoutButton = new sap.ushell.ui.footerbar.LogoutButton();

        this.defaultMenuItems = [oAboutButton, oUserPrefButton, oLogoutButton];
        //call the parent sap.m.Button init method
        if (sap.m.Button.prototype.init) {
            sap.m.Button.prototype.init.apply(this, arguments);
        }
    };

    sap.ushell.ui.footerbar.SettingsButton.prototype.setMenuItems = function (buttons) {
        this.menuItems = buttons;
    };

    sap.ushell.ui.footerbar.SettingsButton.prototype.showSettingsMenu = function () {
        var oActionSheet = new sap.m.ActionSheet({
            id: 'settingsMenu',
            showHeader : false,
            buttons : (this.menuItems || []).concat(this.defaultMenuItems)
        });

        oActionSheet.setPlacement(sap.m.PlacementType.Vertical);
        oActionSheet.openBy(this);

        oActionSheet.attachAfterClose(function () {
            oActionSheet.removeAllButtons();
            oActionSheet.destroy();
        });
    };
}());

}; // end of sap/ushell/ui/footerbar/SettingsButton.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.SettingsButtonRenderer') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.SettingsButtonRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ButtonRenderer'); // unlisted dependency retained

    /**
     * @name sap.ushell.ui.footerbar.UserPreferencesButtonRenderer
     * @static
     * @private
     */
    sap.ushell.ui.footerbar.SettingsButtonRenderer = sap.ui.core.Renderer.extend(sap.m.ButtonRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    //sap.ushell.ui.footerbar.SettingsButtonRenderer.render = ;

}());
}; // end of sap/ushell/ui/footerbar/SettingsButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.UserPreferencesButtonRenderer') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.UserPreferencesButtonRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ButtonRenderer'); // unlisted dependency retained

    /**
     * @name sap.ushell.ui.footerbar.UserPreferencesButtonRenderer
     * @static
     * @private
     */
    sap.ushell.ui.footerbar.UserPreferencesButtonRenderer = sap.ui.core.Renderer.extend(sap.m.ButtonRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    //sap.ushell.ui.footerbar.UserPreferencesButtonRenderer.render = ;
}());
}; // end of sap/ushell/ui/footerbar/UserPreferencesButtonRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.AccessibilityCustomData') ) {
/*!
 * ${copyright}
 */
// Provides control sap.ushell.ui.shell.ShellHeadItem.
jQuery.sap.declare('sap.ushell.ui.launchpad.AccessibilityCustomData'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.CustomData'); // unlisted dependency retained
sap.ui.define("sap/ushell/ui/launchpad/AccessibilityCustomData",['jquery.sap.global', 'sap/ui/core/CustomData', 'sap/ushell/library'],
    function (jQuery, CustomData, library) {
        "use strict";

        var AccessibilityCustomData = CustomData.extend("sap.ushell.ui.launchpad.AccessibilityCustomData"),
            fnOrigcheckWriteToDom = CustomData.prototype._checkWriteToDom;


        AccessibilityCustomData.prototype._checkWriteToDom = function (oRelated) {
            var sKey = this.getKey().toLowerCase(),
                bIsAccessibilityOn = sap.ui.getCore().getConfiguration().getAccessibility();
            if (!bIsAccessibilityOn) {
                return;
            }
            if (sKey.indexOf("aria") === 0 || sKey === "role") {
                if (!this.getWriteToDom()) {
                    return null;
                }
                var value = this.getValue();

                if (typeof value != "string") {
                    jQuery.sap.log.error("CustomData with key " + sKey + " should be written to HTML of " + oRelated + " but the value is not a string.");
                    return null;
                }

                if (!(sap.ui.core.ID.isValid(sKey)) || (sKey.indexOf(":") != -1)) {
                    jQuery.sap.log.error("CustomData with key " + sKey + " should be written to HTML of " + oRelated + " but the key is not valid (must be a valid sap.ui.core.ID without any colon).");
                    return null;
                }

                if (sKey == jQuery.sap._FASTNAVIGATIONKEY) {
                    value = /^\s*(x|true)\s*$/i.test(value) ? "true" : "false"; // normalize values
                } else if (sKey.indexOf("sap-ui") == 0) {
                    jQuery.sap.log.error("CustomData with key " + sKey + " should be written to HTML of " + oRelated + " but the key is not valid (may not start with 'sap-ui').");
                    return null;
                }
                return {key: sKey, value: value};
            } else {
                return fnOrigcheckWriteToDom.apply(this, arguments);
            }
        };

        return AccessibilityCustomData;

    }, /* bExport= */ true);

}; // end of sap/ushell/ui/launchpad/AccessibilityCustomData.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.DashboardGroupsContainer') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.DashboardGroupsContainer.
jQuery.sap.declare("sap.ushell.ui.launchpad.DashboardGroupsContainer");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/DashboardGroupsContainer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getAccessibilityLabel accessibilityLabel} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getGroups groups} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.ui.launchpad.DashboardGroupsContainer#event:afterRendering afterRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/launchpad/DashboardGroupsContainer
 * @extends sap.ui.core.Control
 * @version 1.32.6
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.ushell.ui.launchpad.DashboardGroupsContainer", { metadata : {

	library : "sap.ushell",
	properties : {
		"accessibilityLabel" : {type : "string", group : "", defaultValue : null}
	},
	aggregations : {
		"groups" : {type : "sap.ui.core.Control", multiple : true, singularName : "group"}
	},
	events : {
		"afterRendering" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.DashboardGroupsContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer.extend
 * @function
 */

sap.ushell.ui.launchpad.DashboardGroupsContainer.M_EVENTS = {'afterRendering':'afterRendering'};


/**
 * Getter for property <code>accessibilityLabel</code>.
 * An value for an optional accessibility label
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>accessibilityLabel</code>
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#getAccessibilityLabel
 * @function
 */

/**
 * Setter for property <code>accessibilityLabel</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sAccessibilityLabel  new value for property <code>accessibilityLabel</code>
 * @return {sap.ushell.ui.launchpad.DashboardGroupsContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#setAccessibilityLabel
 * @function
 */


/**
 * Getter for aggregation <code>groups</code>.<br/>
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#getGroups
 * @function
 */


/**
 * Inserts a group into the aggregation named <code>groups</code>.
 *
 * @param {sap.ui.core.Control}
 *          oGroup the group to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the group should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the group is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the group is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.launchpad.DashboardGroupsContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#insertGroup
 * @function
 */

/**
 * Adds some group <code>oGroup</code> 
 * to the aggregation named <code>groups</code>.
 *
 * @param {sap.ui.core.Control}
 *            oGroup the group to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.launchpad.DashboardGroupsContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#addGroup
 * @function
 */

/**
 * Removes an group from the aggregation named <code>groups</code>.
 *
 * @param {int | string | sap.ui.core.Control} vGroup the group to remove or its index or id
 * @return {sap.ui.core.Control} the removed group or null
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#removeGroup
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>groups</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#removeAllGroups
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>groups</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oGroup the group whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#indexOfGroup
 * @function
 */
	

/**
 * Destroys all the groups in the aggregation 
 * named <code>groups</code>.
 * @return {sap.ushell.ui.launchpad.DashboardGroupsContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#destroyGroups
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#afterRendering
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterRendering' event of this <code>sap.ushell.ui.launchpad.DashboardGroupsContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.DashboardGroupsContainer</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.DashboardGroupsContainer</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.DashboardGroupsContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#attachAfterRendering
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterRendering' event of this <code>sap.ushell.ui.launchpad.DashboardGroupsContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.DashboardGroupsContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#detachAfterRendering
 * @function
 */

/**
 * Fire event afterRendering to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.DashboardGroupsContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer#fireAfterRendering
 * @function
 */

// Start of sap/ushell/ui/launchpad/DashboardGroupsContainer.js
/**
 * @name sap.ushell.ui.launchpad.DashboardGroupsContainer
 *
 * @private
 */
/*global jQuery, sap*/

(function () {
    "use strict";

    // Overwrite update function (version without filter/sort support)
    sap.ushell.ui.launchpad.DashboardGroupsContainer.prototype.updateGroups = sap.ushell.override.updateAggregatesFactory("groups");
    // Alternative (supports all bindings, uses default as fallback)
    //sap.ushell.ui.launchpad.TileContainer.prototype.updateAggregation = sap.ushell.override.updateAggregation;

    sap.ushell.ui.launchpad.DashboardGroupsContainer.prototype.onAfterRendering = function () {
        this.fireAfterRendering();
    };

    sap.ushell.ui.launchpad.DashboardGroupsContainer.prototype.getGroupControlByGroupId = function (groupId) {
        try {
            var groups = this.getGroups();
            for (var i = 0; i < groups.length; i++) {
                if (groups[i].getGroupId() == groupId) {
                    return groups[i];
                }
            }
        } catch (e){}

        return null;
    };
}());

}; // end of sap/ushell/ui/launchpad/DashboardGroupsContainer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.DashboardGroupsContainerRenderer') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/*global jQuery, sap*/
/**
 * @class DashboardGroupsContainer renderer.
 * @static
 *
 * @private
 */

(function () {
    "use strict";
    jQuery.sap.declare("sap.ushell.ui.launchpad.DashboardGroupsContainerRenderer");

    sap.ushell.ui.launchpad.DashboardGroupsContainerRenderer = {};

    /**
     * Renders the HTML for the given control, using the provided
     * {@link sap.ui.core.RenderManager}.
     *
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render
     *            output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be
     *            rendered
     */
    sap.ushell.ui.launchpad.DashboardGroupsContainerRenderer.render = function (oRm, oControl) {
        oRm.write("<div");
        oRm.writeControlData(oControl);
        oRm.addClass("sapUshellDashboardGroupsContainer");
        oRm.writeClasses();
        if (oControl.getAccessibilityLabel()) {
            oRm.writeAccessibilityState(oControl, {role: "navigation", label : oControl.getAccessibilityLabel()});
        }
        oRm.write(">");

        var aGroups = oControl.getGroups();

        jQuery.each(aGroups, function (index, aGroup) {
            oRm.write("<div");
            oRm.addClass("sapUshellDashboardGroupsContainerItem");
            if (aGroup.getIsGroupLocked() || aGroup.getDefaultGroup()) {
                oRm.addClass("sapUshellDisableDragAndDrop");
            }
            oRm.writeClasses();
            oRm.write(">");

            oRm.renderControl(this);

            oRm.write("</div>");
        });

        oRm.write("</div>");
    };
}());

}; // end of sap/ushell/ui/launchpad/DashboardGroupsContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage.
jQuery.sap.declare("sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage");

jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/EmbeddedSupportErrorMessage.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage#event:afterClose afterClose} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Dialog#constructor sap.m.Dialog}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/launchpad/EmbeddedSupportErrorMessage
 * @extends sap.m.Dialog
 * @version 1.32.6
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.Dialog.extend("sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage", { metadata : {

	library : "sap.ushell",
	events : {
		"afterClose" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage.extend
 * @function
 */

sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage.M_EVENTS = {'afterClose':'afterClose'};


/**
 *
 * @name sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage#afterClose
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterClose' event of this <code>sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage#attachAfterClose
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterClose' event of this <code>sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage#detachAfterClose
 * @function
 */

/**
 * Fire event afterClose to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage#fireAfterClose
 * @function
 */

// Start of sap/ushell/ui/launchpad/EmbeddedSupportErrorMessage.js
(function () {
    "use strict";
    /*global jQuery, sap, navigator*/

    jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Button'); // unlisted dependency retained

    

    jQuery.sap.declare("sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage");

    /**
     * EmbeddedSupportErrorMessage
     *
     * @name sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage
     * @private
     * @since 1.20.0
     */

    sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage.prototype.open = function () {
        var oContactSupportButton,
            oCloseButton;

        this.translationBundle = sap.ushell.resources.i18n;
        oContactSupportButton = new sap.m.Button({
            id : sap.ui.core.ElementMetadata.uid("supportBtn"),
            text : this.translationBundle.getText("contactSupportBtn"),
            press : function () {
                this.close();
                jQuery.sap.require("sap.ushell.ui.footerbar.ContactSupportButton");
                this.oContactSupport = new sap.ushell.ui.footerbar.ContactSupportButton(
                    "ContactSupportErrorMsg",{
                        visible : true
                    });
                if (this.oContactSupport) {
                    this.oContactSupport.showContactSupportDialog();
                    //oContactSupport is redundant after creation of the Contact Support Dialog.
                    this.oContactSupport.destroy();
                }
            }.bind(this)
        });
        oCloseButton = new sap.m.Button({
            id : sap.ui.core.ElementMetadata.uid("closeBtn"),
            text : this.translationBundle.getText("close"),
            press : function () {
                this.close();
            }.bind(this)
        });

        this.setType(sap.m.DialogType.Message);
        this.setIcon('sap-icon://alert');
        this.setRightButton(oCloseButton);
        this.setLeftButton(oContactSupportButton);
        this._addStyleClassToContent();
        this.addStyleClass('sapMMessageBoxError');
        this.attachAfterClose(function () {
            this.destroy();
        }.bind(this));

        //call the parent sap.m.Dialog open method
        if (sap.m.Dialog.prototype.open) {
            sap.m.Dialog.prototype.open.apply(this, arguments);
        }
    };

    sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage.prototype._addStyleClassToContent = function () {
        var aContent = this.getContent(),
            oCurrentContent,
            index;

        for (index in aContent){
            oCurrentContent = aContent[index];
            if (oCurrentContent.getMetadata().getName() === "sap.m.Text" && !oCurrentContent.aCustomStyleClasses){
                oCurrentContent.addStyleClass("sapMMsgBoxText");
            }
        }
    };
}());

}; // end of sap/ushell/ui/launchpad/EmbeddedSupportErrorMessage.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.EmbeddedSupportErrorMessageRenderer') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.launchpad.EmbeddedSupportErrorMessageRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.DialogRenderer'); // unlisted dependency retained

    /**
     * @name sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage
     * @static
     * @private
     */
    sap.ushell.ui.launchpad.EmbeddedSupportErrorMessageRenderer = sap.ui.core.Renderer.extend(sap.m.DialogRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */

}());
}; // end of sap/ushell/ui/launchpad/EmbeddedSupportErrorMessageRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.GroupHeaderActions') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.GroupHeaderActions.
jQuery.sap.declare("sap.ushell.ui.launchpad.GroupHeaderActions");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/GroupHeaderActions.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIsOverflow isOverflow} : boolean (default: false)</li>
 * <li>{@link #getTileActionModeActive tileActionModeActive} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li>
 * <li>{@link #getOverflowCtrl overflowCtrl} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.ui.launchpad.GroupHeaderActions#event:afterRendering afterRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/launchpad/GroupHeaderActions
 * @extends sap.ui.core.Control
 * @version 1.32.6
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.launchpad.GroupHeaderActions
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.ushell.ui.launchpad.GroupHeaderActions", { metadata : {

	library : "sap.ushell",
	properties : {
		"isOverflow" : {type : "boolean", group : "Misc", defaultValue : false},
		"tileActionModeActive" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	aggregations : {
		"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}, 
		"overflowCtrl" : {type : "sap.ui.core.Control", multiple : true, singularName : "overflowCtrl"}
	},
	events : {
		"afterRendering" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.GroupHeaderActions with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.GroupHeaderActions.extend
 * @function
 */

sap.ushell.ui.launchpad.GroupHeaderActions.M_EVENTS = {'afterRendering':'afterRendering'};


/**
 * Getter for property <code>isOverflow</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>isOverflow</code>
 * @public
 * @name sap.ushell.ui.launchpad.GroupHeaderActions#getIsOverflow
 * @function
 */

/**
 * Setter for property <code>isOverflow</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIsOverflow  new value for property <code>isOverflow</code>
 * @return {sap.ushell.ui.launchpad.GroupHeaderActions} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupHeaderActions#setIsOverflow
 * @function
 */


/**
 * Getter for property <code>tileActionModeActive</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>tileActionModeActive</code>
 * @public
 * @name sap.ushell.ui.launchpad.GroupHeaderActions#getTileActionModeActive
 * @function
 */

/**
 * Setter for property <code>tileActionModeActive</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bTileActionModeActive  new value for property <code>tileActionModeActive</code>
 * @return {sap.ushell.ui.launchpad.GroupHeaderActions} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupHeaderActions#setTileActionModeActive
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ushell.ui.launchpad.GroupHeaderActions#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.launchpad.GroupHeaderActions} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupHeaderActions#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.launchpad.GroupHeaderActions} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupHeaderActions#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.ushell.ui.launchpad.GroupHeaderActions#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.launchpad.GroupHeaderActions#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.launchpad.GroupHeaderActions#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ushell.ui.launchpad.GroupHeaderActions} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupHeaderActions#destroyContent
 * @function
 */


/**
 * Getter for aggregation <code>overflowCtrl</code>.<br/>
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ushell.ui.launchpad.GroupHeaderActions#getOverflowCtrl
 * @function
 */


/**
 * Inserts a overflowCtrl into the aggregation named <code>overflowCtrl</code>.
 *
 * @param {sap.ui.core.Control}
 *          oOverflowCtrl the overflowCtrl to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the overflowCtrl should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the overflowCtrl is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the overflowCtrl is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.launchpad.GroupHeaderActions} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupHeaderActions#insertOverflowCtrl
 * @function
 */

/**
 * Adds some overflowCtrl <code>oOverflowCtrl</code> 
 * to the aggregation named <code>overflowCtrl</code>.
 *
 * @param {sap.ui.core.Control}
 *            oOverflowCtrl the overflowCtrl to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.launchpad.GroupHeaderActions} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupHeaderActions#addOverflowCtrl
 * @function
 */

/**
 * Removes an overflowCtrl from the aggregation named <code>overflowCtrl</code>.
 *
 * @param {int | string | sap.ui.core.Control} vOverflowCtrl the overflowCtrl to remove or its index or id
 * @return {sap.ui.core.Control} the removed overflowCtrl or null
 * @public
 * @name sap.ushell.ui.launchpad.GroupHeaderActions#removeOverflowCtrl
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>overflowCtrl</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.launchpad.GroupHeaderActions#removeAllOverflowCtrl
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>overflowCtrl</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oOverflowCtrl the overflowCtrl whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.launchpad.GroupHeaderActions#indexOfOverflowCtrl
 * @function
 */
	

/**
 * Destroys all the overflowCtrl in the aggregation 
 * named <code>overflowCtrl</code>.
 * @return {sap.ushell.ui.launchpad.GroupHeaderActions} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupHeaderActions#destroyOverflowCtrl
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.GroupHeaderActions#afterRendering
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterRendering' event of this <code>sap.ushell.ui.launchpad.GroupHeaderActions</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.GroupHeaderActions</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.GroupHeaderActions</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.GroupHeaderActions} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupHeaderActions#attachAfterRendering
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterRendering' event of this <code>sap.ushell.ui.launchpad.GroupHeaderActions</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.GroupHeaderActions} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupHeaderActions#detachAfterRendering
 * @function
 */

/**
 * Fire event afterRendering to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.GroupHeaderActions} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.GroupHeaderActions#fireAfterRendering
 * @function
 */

// Start of sap/ushell/ui/launchpad/GroupHeaderActions.js
/*global jQuery, sap*/

/**
 * @name sap.ushell.ui.launchpad.GroupHeaderActions
 *
 * @private
 */

(function () {
    "use strict";

    sap.ushell.ui.launchpad.GroupHeaderActions.prototype.onAfterRendering = function () {
        this.fireAfterRendering();
    };

    sap.ushell.ui.launchpad.GroupHeaderActions.prototype._getActionOverflowControll = function () {
        var that = this;

        return [new sap.m.Button({
            icon: 'sap-icon://overflow',
            type: 'Transparent',
            press: function (oEvent) {

                var oActionSheet = new sap.m.ActionSheet({
                    placement: sap.m.PlacementType.Auto
                });

                that.getContent().forEach(function (oButton) {
                    var cButton = oButton.clone();
                    cButton.setModel(oButton.getModel());
                    cButton.setBindingContext(oButton.getBindingContext());
                    oActionSheet.addButton(cButton);
                });
                oActionSheet.openBy(oEvent.getSource());
            }
        }).addStyleClass('sapUshellHeaderActionButton')];
    };

}());

}; // end of sap/ushell/ui/launchpad/GroupHeaderActions.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.GroupHeaderActionsRenderer') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/*global jQuery, sap*/
/**
 * @class GroupHeaderButton renderer.
 * @static
 * 
 * @private
 */

(function () {
    "use strict";
    jQuery.sap.declare("sap.ushell.ui.launchpad.GroupHeaderActionsRenderer");

    sap.ushell.ui.launchpad.GroupHeaderActionsRenderer = {};

    /**
     * Renders the HTML for the given control, using the provided
     * {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render
     *            output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be
     *            rendered
     */
    sap.ushell.ui.launchpad.GroupHeaderActionsRenderer.render = function (oRm, oControl) {
        var isOverflow = oControl.getIsOverflow(),
            isTileActionModeActive = oControl.getTileActionModeActive();

        oRm.write("<div");
        oRm.writeControlData(oControl);
        oRm.writeClasses();
        oRm.write(">");

        var aContent = oControl.getContent();

        if (isTileActionModeActive) {
            if (isOverflow) {
                jQuery.each(oControl._getActionOverflowControll(), function () {
                    oRm.renderControl(this);
                });
            } else {
                jQuery.each(aContent, function () {
                    oRm.renderControl(this);
                });
            }
        }
        oRm.write("</div>");
    };
}());

}; // end of sap/ushell/ui/launchpad/GroupHeaderActionsRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.GroupListItem') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.GroupListItem.
jQuery.sap.declare("sap.ushell.ui.launchpad.GroupListItem");

jQuery.sap.require('sap.m.ListItemBase'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/GroupListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getDefaultGroup defaultGroup} : boolean (default: false)</li>
 * <li>{@link #getShow show} : boolean (default: true)</li>
 * <li>{@link #getGroupId groupId} : string</li>
 * <li>{@link #getIndex index} : int</li>
 * <li>{@link #getNumberOfTiles numberOfTiles} : int (default: 0)</li>
 * <li>{@link #getIsGroupVisible isGroupVisible} : boolean (default: true)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.ui.launchpad.GroupListItem#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.GroupListItem#event:afterRendering afterRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/launchpad/GroupListItem
 * @extends sap.m.ListItemBase
 * @version 1.32.6
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.ListItemBase.extend("sap.ushell.ui.launchpad.GroupListItem", { metadata : {

	library : "sap.ushell",
	properties : {
		"title" : {type : "string", group : "Misc", defaultValue : null},
		"defaultGroup" : {type : "boolean", group : "Misc", defaultValue : false},
		"show" : {type : "boolean", group : "Misc", defaultValue : true},
		"groupId" : {type : "string", group : "Misc", defaultValue : null},
		"index" : {type : "int", group : "Misc", defaultValue : null},
		"numberOfTiles" : {type : "int", group : "Misc", defaultValue : 0},
		"isGroupVisible" : {type : "boolean", group : "Misc", defaultValue : true}
	},
	events : {
		"press" : {}, 
		"afterRendering" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.GroupListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.GroupListItem.extend
 * @function
 */

sap.ushell.ui.launchpad.GroupListItem.M_EVENTS = {'press':'press','afterRendering':'afterRendering'};


/**
 * Getter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#setTitle
 * @function
 */


/**
 * Getter for property <code>defaultGroup</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>defaultGroup</code>
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#getDefaultGroup
 * @function
 */

/**
 * Setter for property <code>defaultGroup</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDefaultGroup  new value for property <code>defaultGroup</code>
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#setDefaultGroup
 * @function
 */


/**
 * Getter for property <code>show</code>.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>show</code>
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#getShow
 * @function
 */

/**
 * Setter for property <code>show</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShow  new value for property <code>show</code>
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#setShow
 * @function
 */


/**
 * Getter for property <code>groupId</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>groupId</code>
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#getGroupId
 * @function
 */

/**
 * Setter for property <code>groupId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sGroupId  new value for property <code>groupId</code>
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#setGroupId
 * @function
 */


/**
 * Getter for property <code>index</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {int} the value of property <code>index</code>
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#getIndex
 * @function
 */

/**
 * Setter for property <code>index</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {int} iIndex  new value for property <code>index</code>
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#setIndex
 * @function
 */


/**
 * Getter for property <code>numberOfTiles</code>.
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>numberOfTiles</code>
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#getNumberOfTiles
 * @function
 */

/**
 * Setter for property <code>numberOfTiles</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iNumberOfTiles  new value for property <code>numberOfTiles</code>
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#setNumberOfTiles
 * @function
 */


/**
 * Getter for property <code>isGroupVisible</code>.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>isGroupVisible</code>
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#getIsGroupVisible
 * @function
 */

/**
 * Setter for property <code>isGroupVisible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bIsGroupVisible  new value for property <code>isGroupVisible</code>
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#setIsGroupVisible
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.GroupListItem#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.GroupListItem#firePress
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.GroupListItem#afterRendering
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterRendering' event of this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#attachAfterRendering
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterRendering' event of this <code>sap.ushell.ui.launchpad.GroupListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.GroupListItem#detachAfterRendering
 * @function
 */

/**
 * Fire event afterRendering to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.GroupListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.GroupListItem#fireAfterRendering
 * @function
 */

// Start of sap/ushell/ui/launchpad/GroupListItem.js
/*global jQuery, sap*/
/**
 * @name sap.ushell.ui.launchpad.GroupListItem
 *
 * @private
 */
(function () {
    "use strict";

    jQuery.sap.require('sap.m.Input'); // unlisted dependency retained


    sap.ushell.ui.launchpad.GroupListItem.prototype.exit = function () {
        sap.m.ListItemBase.prototype.exit.apply(this, arguments);
    };

    sap.ushell.ui.launchpad.GroupListItem.prototype.onAfterRendering = function () {
        this.fireAfterRendering();
    };

    sap.ushell.ui.launchpad.GroupListItem.prototype.groupHasVisibleTiles = function () {
        var groupTiles = this.getModel().getProperty("/groups/" + this.getIndex() + "/tiles");
        var groupLinks = this.getModel().getProperty("/groups/" + this.getIndex() + "/links");
        return sap.ushell.utils.groupHasVisibleTiles(groupTiles, groupLinks);
    };

    // browser events
    // use onmousedown instead of onclick because a click will not end the edit mode if the user starts immediately dragging another tile
    sap.ushell.ui.launchpad.GroupListItem.prototype.onclick = function () {
        this.firePress({
            id : this.getId()
        });
    };

    sap.ushell.ui.launchpad.GroupListItem.prototype.onsapenter = function () {
        this.firePress({
            id : this.getId(),
            action: "sapenter"
        });
    };

    sap.ushell.ui.launchpad.GroupListItem.prototype.setGroupId = function (sGroupId) {
        this.setProperty("groupId", sGroupId, true); // suppress rerendering
        return this;
    };

    sap.ushell.ui.launchpad.GroupListItem.prototype.setTitle = function (sTitle) {
        this.setProperty("title", sTitle); // DO NOT suppress rerendering - otherwise groups list (UI) is not re-rendered and old tooltip still showing
        this.$().find(".sapMSLITitleOnly").text(sTitle);
        return this;
    };
}());

}; // end of sap/ushell/ui/launchpad/GroupListItem.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.GroupListItemRenderer') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/*global jQuery, sap*/
/**
 * @class GroupListItem renderer.
 * @static
 * 
 * @private
 */

(function () {
    "use strict";
    
    jQuery.sap.declare("sap.ushell.ui.launchpad.GroupListItemRenderer");
    jQuery.sap.require('sap.m.ListItemBaseRenderer'); // unlisted dependency retained


    /**
     * @class GroupListItem renderer.
     * @static
     */
    sap.ushell.ui.launchpad.GroupListItemRenderer = sap.ui.core.Renderer.extend(sap.m.ListItemBaseRenderer);
    var translationBundle = sap.ushell.resources.i18n;

    sap.ushell.ui.launchpad.GroupListItemRenderer.renderLIAttributes = function (rm) {
        rm.addClass("sapUshellGroupLI");
    };

    /**
     * Renders the HTML for the list content part of the given control, using the provided
     * {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render
     *            output buffer
     * @param {sap.ui.core.Control}
     *            oLI an object representation of the list item control that should be
     *            rendered
     */
    sap.ushell.ui.launchpad.GroupListItemRenderer.renderLIContent = function (rm, oLI) {
        rm.write("<div");
        rm.addClass("sapMSLIDiv");
        rm.addClass("sapMSLITitleDiv");
        rm.writeClasses();

        if (!oLI.getVisible()) {
            rm.addStyle("display", "none");
            rm.writeStyles();
        }
        rm.write(">");

        // List item text (also written when no title for keeping the space)
        rm.write("<div");
        rm.addClass("sapMSLITitleOnly");
        rm.writeClasses();
        rm.writeAccessibilityState(oLI, {label : oLI.getTitle() + translationBundle.getText("GroupListItem_label")});
        rm.write(">");
        rm.writeEscaped(oLI.getTitle());
        rm.write("</div>");

        rm.write("</div>");
    };
}());

}; // end of sap/ushell/ui/launchpad/GroupListItemRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.HeaderTileRenderer') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

/**
 * @class HeaderTile renderer.
 * @static
 * 
 * @private
 */

jQuery.sap.declare("sap.ushell.ui.launchpad.HeaderTileRenderer");
sap.ushell.ui.launchpad.HeaderTileRenderer = {};
var translationBundle = sap.ushell.resources.i18n;

/**
 * Renders the HTML for the given control, using the provided
 * {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager}
 *            oRm the RenderManager that can be used for writing to the render
 *            output buffer
 * @param {sap.ui.core.Control}
 *            oControl an object representation of the control that should be
 *            rendered
 */
sap.ushell.ui.launchpad.HeaderTileRenderer.render = function(oRm, oControl) {
    oRm.write("<");
    oRm.write(oControl.getHeaderLevel().toLowerCase());
    oRm.writeControlData(oControl);
    oRm.addClass("sapUshellHeaderTile");
    oRm.addClass("sapUiStrongBackgroundTextColor");
    if (!oControl.getVisible()) {
        oRm.addClass("sapUshellHidden");
    }
    oRm.writeClasses();
    oRm.writeAccessibilityState(oControl, {label : oControl.getHeaderText() + translationBundle.getText("HeaderCategory")});
    oRm.write(">");
    oRm.writeEscaped(oControl.getHeaderText());
    oRm.write("</");
    oRm.write(oControl.getHeaderLevel().toLowerCase());
    oRm.write(">");
};

}; // end of sap/ushell/ui/launchpad/HeaderTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.LinkTileWrapper') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.LinkTileWrapper.
jQuery.sap.declare("sap.ushell.ui.launchpad.LinkTileWrapper");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/LinkTileWrapper.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getUuid uuid} : string</li>
 * <li>{@link #getTileCatalogId tileCatalogId} : string</li>
 * <li>{@link #getTarget target} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getDebugInfo debugInfo} : string</li>
 * <li>{@link #getAnimationRendered animationRendered} : boolean (default: false)</li>
 * <li>{@link #getIsLocked isLocked} : boolean (default: false)</li>
 * <li>{@link #getIeHtml5DnD ieHtml5DnD} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTileViews tileViews} : sap.ui.core.Control[]</li>
 * <li>{@link #getFootItems footItems} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.ui.launchpad.LinkTileWrapper#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.LinkTileWrapper#event:coverDivPress coverDivPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.LinkTileWrapper#event:afterRendering afterRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.LinkTileWrapper#event:showActions showActions} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A link tile to be displayed in the tile container. This control acts as container for specialized tile implementations.
 * @extends sap.ui.core.Control
 * @version 1.32.6
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.ushell.ui.launchpad.LinkTileWrapper", { metadata : {

	library : "sap.ushell",
	properties : {
		"uuid" : {type : "string", group : "Misc", defaultValue : null},
		"tileCatalogId" : {type : "string", group : "Misc", defaultValue : null},
		"target" : {type : "string", group : "Misc", defaultValue : null},
		"visible" : {type : "boolean", group : "Misc", defaultValue : true},
		"debugInfo" : {type : "string", group : "Misc", defaultValue : null},
		"animationRendered" : {type : "boolean", group : "Misc", defaultValue : false},
		"isLocked" : {type : "boolean", group : "Misc", defaultValue : false},
		"ieHtml5DnD" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	aggregations : {
		"tileViews" : {type : "sap.ui.core.Control", multiple : true, singularName : "tileView"}, 
		"footItems" : {type : "sap.ui.core.Control", multiple : true, singularName : "footItem"}
	},
	events : {
		"press" : {}, 
		"coverDivPress" : {}, 
		"afterRendering" : {}, 
		"showActions" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.LinkTileWrapper with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.LinkTileWrapper.extend
 * @function
 */

sap.ushell.ui.launchpad.LinkTileWrapper.M_EVENTS = {'press':'press','coverDivPress':'coverDivPress','afterRendering':'afterRendering','showActions':'showActions'};


/**
 * Getter for property <code>uuid</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>uuid</code>
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#getUuid
 * @function
 */

/**
 * Setter for property <code>uuid</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sUuid  new value for property <code>uuid</code>
 * @return {sap.ushell.ui.launchpad.LinkTileWrapper} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#setUuid
 * @function
 */


/**
 * Getter for property <code>tileCatalogId</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>tileCatalogId</code>
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#getTileCatalogId
 * @function
 */

/**
 * Setter for property <code>tileCatalogId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTileCatalogId  new value for property <code>tileCatalogId</code>
 * @return {sap.ushell.ui.launchpad.LinkTileWrapper} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#setTileCatalogId
 * @function
 */


/**
 * Getter for property <code>target</code>.
 * Hyperlink target
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>target</code>
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#getTarget
 * @function
 */

/**
 * Setter for property <code>target</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTarget  new value for property <code>target</code>
 * @return {sap.ushell.ui.launchpad.LinkTileWrapper} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#setTarget
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ushell.ui.launchpad.LinkTileWrapper} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#setVisible
 * @function
 */


/**
 * Getter for property <code>debugInfo</code>.
 * Technical information about the tile which is logged when the tile is clicked
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>debugInfo</code>
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#getDebugInfo
 * @function
 */

/**
 * Setter for property <code>debugInfo</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDebugInfo  new value for property <code>debugInfo</code>
 * @return {sap.ushell.ui.launchpad.LinkTileWrapper} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#setDebugInfo
 * @function
 */


/**
 * Getter for property <code>animationRendered</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>animationRendered</code>
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#getAnimationRendered
 * @function
 */

/**
 * Setter for property <code>animationRendered</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bAnimationRendered  new value for property <code>animationRendered</code>
 * @return {sap.ushell.ui.launchpad.LinkTileWrapper} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#setAnimationRendered
 * @function
 */


/**
 * Getter for property <code>isLocked</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>isLocked</code>
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#getIsLocked
 * @function
 */

/**
 * Setter for property <code>isLocked</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIsLocked  new value for property <code>isLocked</code>
 * @return {sap.ushell.ui.launchpad.LinkTileWrapper} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#setIsLocked
 * @function
 */


/**
 * Getter for property <code>ieHtml5DnD</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>ieHtml5DnD</code>
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#getIeHtml5DnD
 * @function
 */

/**
 * Setter for property <code>ieHtml5DnD</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIeHtml5DnD  new value for property <code>ieHtml5DnD</code>
 * @return {sap.ushell.ui.launchpad.LinkTileWrapper} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#setIeHtml5DnD
 * @function
 */


/**
 * Getter for aggregation <code>tileViews</code>.<br/>
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#getTileViews
 * @function
 */


/**
 * Inserts a tileView into the aggregation named <code>tileViews</code>.
 *
 * @param {sap.ui.core.Control}
 *          oTileView the tileView to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the tileView should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the tileView is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the tileView is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.launchpad.LinkTileWrapper} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#insertTileView
 * @function
 */

/**
 * Adds some tileView <code>oTileView</code> 
 * to the aggregation named <code>tileViews</code>.
 *
 * @param {sap.ui.core.Control}
 *            oTileView the tileView to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.launchpad.LinkTileWrapper} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#addTileView
 * @function
 */

/**
 * Removes an tileView from the aggregation named <code>tileViews</code>.
 *
 * @param {int | string | sap.ui.core.Control} vTileView the tileView to remove or its index or id
 * @return {sap.ui.core.Control} the removed tileView or null
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#removeTileView
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>tileViews</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#removeAllTileViews
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>tileViews</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oTileView the tileView whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#indexOfTileView
 * @function
 */
	

/**
 * Destroys all the tileViews in the aggregation 
 * named <code>tileViews</code>.
 * @return {sap.ushell.ui.launchpad.LinkTileWrapper} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#destroyTileViews
 * @function
 */


/**
 * Getter for aggregation <code>footItems</code>.<br/>
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#getFootItems
 * @function
 */


/**
 * Inserts a footItem into the aggregation named <code>footItems</code>.
 *
 * @param {sap.ui.core.Control}
 *          oFootItem the footItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the footItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the footItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the footItem is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.launchpad.LinkTileWrapper} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#insertFootItem
 * @function
 */

/**
 * Adds some footItem <code>oFootItem</code> 
 * to the aggregation named <code>footItems</code>.
 *
 * @param {sap.ui.core.Control}
 *            oFootItem the footItem to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.launchpad.LinkTileWrapper} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#addFootItem
 * @function
 */

/**
 * Removes an footItem from the aggregation named <code>footItems</code>.
 *
 * @param {int | string | sap.ui.core.Control} vFootItem the footItem to remove or its index or id
 * @return {sap.ui.core.Control} the removed footItem or null
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#removeFootItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>footItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#removeAllFootItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>footItems</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oFootItem the footItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#indexOfFootItem
 * @function
 */
	

/**
 * Destroys all the footItems in the aggregation 
 * named <code>footItems</code>.
 * @return {sap.ushell.ui.launchpad.LinkTileWrapper} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#destroyFootItems
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.ushell.ui.launchpad.LinkTileWrapper</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.LinkTileWrapper</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.LinkTileWrapper</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.LinkTileWrapper} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.ushell.ui.launchpad.LinkTileWrapper</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.LinkTileWrapper} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.LinkTileWrapper} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#firePress
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#coverDivPress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'coverDivPress' event of this <code>sap.ushell.ui.launchpad.LinkTileWrapper</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.LinkTileWrapper</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.LinkTileWrapper</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.LinkTileWrapper} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#attachCoverDivPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'coverDivPress' event of this <code>sap.ushell.ui.launchpad.LinkTileWrapper</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.LinkTileWrapper} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#detachCoverDivPress
 * @function
 */

/**
 * Fire event coverDivPress to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.LinkTileWrapper} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#fireCoverDivPress
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#afterRendering
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterRendering' event of this <code>sap.ushell.ui.launchpad.LinkTileWrapper</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.LinkTileWrapper</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.LinkTileWrapper</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.LinkTileWrapper} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#attachAfterRendering
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterRendering' event of this <code>sap.ushell.ui.launchpad.LinkTileWrapper</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.LinkTileWrapper} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#detachAfterRendering
 * @function
 */

/**
 * Fire event afterRendering to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.LinkTileWrapper} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#fireAfterRendering
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#showActions
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'showActions' event of this <code>sap.ushell.ui.launchpad.LinkTileWrapper</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.LinkTileWrapper</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.LinkTileWrapper</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.LinkTileWrapper} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#attachShowActions
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'showActions' event of this <code>sap.ushell.ui.launchpad.LinkTileWrapper</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.LinkTileWrapper} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#detachShowActions
 * @function
 */

/**
 * Fire event showActions to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.LinkTileWrapper} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.LinkTileWrapper#fireShowActions
 * @function
 */

// Start of sap/ushell/ui/launchpad/LinkTileWrapper.js
/*global jQuery, sap*/
/**
 * @name sap.ushell.ui.launchpad.LinkTileWrapper
 *
 * @private
 */
(function () {
    "use strict";
    /*global jQuery, sap, window */
    /*jslint nomen: true*/

    

    sap.ushell.ui.launchpad.LinkTileWrapper.prototype.ontap = function (event, ui) {
        // dump debug info when tile is clicked
        jQuery.sap.log.info(
            "Tile clicked:",
            this.getDebugInfo(),
            "sap.ushell.ui.launchpad.LinkTileWrapper"
        );

        // NOTE: for now, the on press animation is not used, as it caused too much
        // confusion
        return;
    };

    sap.ushell.ui.launchpad.LinkTileWrapper.prototype.destroy = function (bSuppressInvalidate) {
        this.destroyTileViews();
        sap.ui.core.Control.prototype.destroy.call(this, bSuppressInvalidate);
    };

    sap.ushell.ui.launchpad.LinkTileWrapper.prototype.addTileView = function (oObject, bSuppressInvalidate) {
        // Workaround for a problem in addAggregation. If a child is added to its current parent again,
        // it is actually removed from the aggregation. Prevent this by removing it from its parent first.
        oObject.setParent(null);
        sap.ui.base.ManagedObject.prototype.addAggregation.call(this, "tileViews", oObject, bSuppressInvalidate);
    };

    sap.ushell.ui.launchpad.LinkTileWrapper.prototype.destroyTileViews = function () {
        // Don't delete the tileViews when destroying the aggregation. They are stored in the model and must be handled manually.
        if (this.mAggregations["tileViews"]) {
            this.mAggregations["tileViews"].length = 0;
        }
    };

    sap.ushell.ui.launchpad.LinkTileWrapper.prototype.onAfterRendering = function () {
        this.fireAfterRendering();
    };

    sap.ushell.ui.launchpad.LinkTileWrapper.prototype._launchTileViaKeyboard = function (oEvent) {
        if (oEvent.target.tagName !== "BUTTON") {
            var oTileUIWrapper = this.getTileViews()[0],
                bPressHandled = false;

            if (oTileUIWrapper.firePress) {

                //Since firePress doesn't dispatch the event for sap.m.Link (due to UI5 bug), we'll use an alternate way to simulate the press.
                //oTileUIWrapper.firePress({id: this.getId()});

                //TODO: remove this once firePress in sap.m.Link bug is resolved.
                var oClickEvent = document.createEvent('MouseEvents');
                oClickEvent.initEvent('click' /* event type */, false, true); // non-bubbling, cancelable
                oTileUIWrapper.getDomRef().dispatchEvent(oClickEvent);

                //If oTileUIWrapper is a View or a Component.
            } else {
                while (oTileUIWrapper.getContent && !bPressHandled) {
                    //Limitation: since there's no way to know which of the views is the currently presented one, we assume it's the first one.
                    oTileUIWrapper = oTileUIWrapper.getContent()[0];
                    if (oTileUIWrapper.firePress) {
                        oTileUIWrapper.firePress({id: this.getId()});
                        bPressHandled = true;
                    }
                }
            }
        }
    };

    sap.ushell.ui.launchpad.LinkTileWrapper.prototype.onsapenter = function (oEvent) {
        this._launchTileViaKeyboard(oEvent);
    };

    sap.ushell.ui.launchpad.LinkTileWrapper.prototype.onsapspace = function (oEvent) {
        this._launchTileViaKeyboard(oEvent);
    };

    sap.ushell.ui.launchpad.LinkTileWrapper.prototype.onclick = function () {
        var oCurrentLink = this.getTileViews()[0],
            sCurrentHref = oCurrentLink.getHref();

        // Publish the link-click event with the relevant href value.
        // The href value is added to the event since the URL hash was not changed yet 
        // and the subscriber to this event might need the new hash (e.g. UsageAnalytics) 
        sap.ui.getCore().getEventBus().publish("launchpad", "dashboardTileLinkClick", {targetHash: sCurrentHref});
    };

    sap.ushell.ui.launchpad.LinkTileWrapper.prototype.setVisible = function (bVisible) {
        this.setProperty("visible", bVisible, true); // suppress rerendering
        return this.toggleStyleClass("sapUshellHidden", !bVisible);
    };

    sap.ushell.ui.launchpad.LinkTileWrapper.prototype.setAnimationRendered = function (bVal) {
        this.setProperty('animationRendered', bVal, true); // suppress re-rendering
    };

    sap.ushell.ui.launchpad.LinkTileWrapper.prototype._handleTileShadow = function (jqTile, args) {
        if (jqTile.length) {
            jqTile.unbind('mouseenter mouseleave');
            var updatedShadowColor,
                tileBorderWidth = jqTile.css("border").split("px")[0],
                oModel = this.getModel();
            //tile has border
            if (tileBorderWidth > 0) {
                updatedShadowColor = jqTile.css("border-color");
            } else {
                updatedShadowColor = this.getRgba();
            }

            jqTile.hover(
                function () {
                    if (!oModel.getProperty('/tileActionModeActive')) {
                        var sOriginalTileShadow = jQuery(jqTile).css('box-shadow'),
                            sTitleShadowDimension = sOriginalTileShadow ? sOriginalTileShadow.split(') ')[1] : null,
                            sUpdatedTileShadow;

                        if (sTitleShadowDimension) {
                            sUpdatedTileShadow = sTitleShadowDimension + " " + updatedShadowColor;
                            jQuery(this).css('box-shadow', sUpdatedTileShadow);
                        }
                    }
                },
                function () {
                    jQuery(this).css('box-shadow', '');
                }
            );
        }
    };

    sap.ushell.ui.launchpad.LinkTileWrapper.prototype.setUuid = function (sUuid) {
        this.setProperty("uuid", sUuid, true); // suppress rerendering
        return this;
    };
}());

}; // end of sap/ushell/ui/launchpad/LinkTileWrapper.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.LinkTileWrapperRenderer') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/*global jQuery, sap*/

(function () {
    "use strict";
    
    jQuery.sap.declare("sap.ushell.ui.launchpad.LinkTileWrapperRenderer");

    /**
     * @class LinkTileWrapper renderer.
     * @static
     *
     * @private
     */
    sap.ushell.ui.launchpad.LinkTileWrapperRenderer = {};
    // var translationBundle = sap.ushell.resources.i18n;

    /**
     * Renders the HTML for the given control, using the provided
     * {@link sap.ui.core.RenderManager}.
     *
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render
     *            output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be
     *            rendered
     */
    sap.ushell.ui.launchpad.LinkTileWrapperRenderer.render = function (oRm, oControl) {
        var oTileView = null, oModel = oControl.getModel(),
            sTileViewId;
        try {
            oTileView = oControl.getTileViews()[0];
        } catch (ex) {
            jQuery.sap.log.warning("Failed to load tile view: ", ex.message);
            oTileView = new sap.m.Text({ text: "Failed to load. "});
        }
        sTileViewId = oTileView && oTileView.getId() ? oTileView.getId() : '';
        oRm.write("<div");

        // if xRay is enabled
        if (oModel && oModel.getProperty("/enableHelp")) {
            // currently only the Tile (and the Tile's footer) has a data attribute in teh xRay integration
            // (as using this value as a class value instead as done in all of the static elements causes parsing errors in the xRay hotspot definition flow)
            oRm.writeAttribute("data-tileCatalogId", oControl.getTileCatalogId());// xRay support
        }
        oRm.writeControlData(oControl);
        oRm.addClass("sapUshellLinkTile");
        if (!oControl.getVisible()) {
            oRm.addClass("sapUshellHidden");
        }
        //TODO:Check this
        if (oControl.getIsLocked()) {
            oRm.addClass("sapUshellLockedTile");
        }
        oRm.writeClasses();
        if (oControl.getIeHtml5DnD()) {
            oRm.writeAttribute("draggable", "true");
        }
        oRm.writeAttributeEscaped("tabindex", "-1");
        var layoutPosition = oControl.data('layoutPosition');
        if (layoutPosition) {
            var stylePosition = '-webkit-transform:' + layoutPosition.translate3D + ';-ms-transform:' + layoutPosition.translate2D + ';transform:' + layoutPosition.translate3D;
            oRm.writeAttribute("style", stylePosition);
        }
        //oRm.writeAccessibilityState(oControl, {role : 'link', label : translationBundle.getText("TileDetails_lable")});
        oRm.writeAttributeEscaped("aria-flowto", sTileViewId);
        oRm.write(">");

        // Tile Content
        oRm.addClass("sapUshellTileInner");

        if (this.renderTileView) {
            this.renderTileView(oRm, oTileView, oControl.getTarget());
        }

        oRm.write("</div>");
    };

    sap.ushell.ui.launchpad.LinkTileWrapperRenderer.renderTileView = function (oRm, oTileView, sTarget) {
        if ((sTarget || "") !== "") {
            oRm.write("<a");
            oRm.writeClasses();
            oRm.writeAttributeEscaped("href", "#" + sTarget);
            oRm.write(">");
            oRm.renderControl(oTileView);
            oRm.write("</a>");
        } else {
            oRm.write("<div");
            oRm.writeClasses();
            oRm.writeAttribute("title", oTileView.getText ? oTileView.getText() : '');
            oRm.write(">");
            oRm.renderControl(oTileView);
            oRm.write("</div>");
        }
    };

}());

}; // end of sap/ushell/ui/launchpad/LinkTileWrapperRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.LoadingDialog') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.LoadingDialog.
jQuery.sap.declare("sap.ushell.ui.launchpad.LoadingDialog");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/LoadingDialog.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getIconUri iconUri} : sap.ui.core.URI</li>
 * <li>{@link #getText text} : sap.ui.core.URI</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Displays a loading dialog with an indicator that an app is loading
 * @extends sap.ui.core.Control
 * @version 1.32.6
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.launchpad.LoadingDialog
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.ushell.ui.launchpad.LoadingDialog", { metadata : {

	library : "sap.ushell",
	properties : {
		"iconUri" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},
		"text" : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.LoadingDialog with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.LoadingDialog.extend
 * @function
 */


/**
 * Getter for property <code>iconUri</code>.
 * the sap-icon://-style URI of an icon
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>iconUri</code>
 * @public
 * @name sap.ushell.ui.launchpad.LoadingDialog#getIconUri
 * @function
 */

/**
 * Setter for property <code>iconUri</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIconUri  new value for property <code>iconUri</code>
 * @return {sap.ushell.ui.launchpad.LoadingDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.LoadingDialog#setIconUri
 * @function
 */


/**
 * Getter for property <code>text</code>.
 * the text to be displayed
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>text</code>
 * @public
 * @name sap.ushell.ui.launchpad.LoadingDialog#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sText  new value for property <code>text</code>
 * @return {sap.ushell.ui.launchpad.LoadingDialog} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.LoadingDialog#setText
 * @function
 */

// Start of sap/ushell/ui/launchpad/LoadingDialog.js
(function () {
    "use strict";
    /*global jQuery, sap, window */
    /*jslint nomen: true*/
    jQuery.sap.require('sap.ui.core.Icon'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Label'); // unlisted dependency retained


    sap.ushell.ui.launchpad.LoadingDialog.prototype.init = function () {
        this._oPopup = new sap.ui.core.Popup();
        this._oPopup.setShadow(false);
        //adds the class "sapUshellLoadingDialog" to UI5 block layer
        this._oPopup.setModal(true, "sapUshellLoadingDialog");
        this.oIcon = new sap.ui.core.Icon();
        this._oLabel = new sap.m.Label(this.getId() + 'loadingLabel');
    };

    sap.ushell.ui.launchpad.LoadingDialog.prototype.exit = function () {
        this._oPopup.close();
        this._oPopup.destroy();
        this.oIcon.destroy();
        this._oLabel.destroy();
    };

    sap.ushell.ui.launchpad.LoadingDialog.prototype.isOpen = function () {
        return this._oPopup.isOpen();
    };

    sap.ushell.ui.launchpad.LoadingDialog.prototype.openLoadingScreen = function () {
        if (!this.getVisible()) {
            this.setProperty('visible', true, true);
            this.$().show();
        }
        if (!this.isOpen()) {
            this._oPopup.setContent(this);
            this._oPopup.setPosition("center center", "center center", document, "0 0", "fit");
            this._oPopup.open();
        }
    };

    sap.ushell.ui.launchpad.LoadingDialog.prototype.showAppInfo = function (sAppTitle, sIconUri) {
        this.setProperty('text', sAppTitle, true);
        this.setProperty('iconUri', sIconUri, true);
        this.oIcon.setSrc(sIconUri);
        this._oLabel.setText(sAppTitle);
    };

    sap.ushell.ui.launchpad.LoadingDialog.prototype.closeLoadingScreen = function () {
        if (this.getVisible()) {
            this.setProperty('visible', false, true);
            this.$().hide();
            this._oPopup.close();
        }
    };

    sap.ushell.ui.launchpad.LoadingDialog.prototype.onAfterRendering = function () {
        //set the width of the control for proper alignment
        this.$().css("width", "20rem");
    };
}());

}; // end of sap/ushell/ui/launchpad/LoadingDialog.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.LoadingDialogRenderer') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/*global jQuery, sap, navigator*/

(function () {
    "use strict";
    /*jslint nomen: true*/
    jQuery.sap.declare("sap.ushell.ui.launchpad.LoadingDialogRenderer");

    /**
     * @class sap.ushell.ui.launchpad.LoadingDialogRenderer
     * @static
     * @private
     */
    sap.ushell.ui.launchpad.LoadingDialogRenderer = {};


    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     *
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     * @private
     */
    sap.ushell.ui.launchpad.LoadingDialogRenderer.render = function (oRm, oControl) {
        var sTooltip = oControl.getTooltip_AsString();
        // add custom class to label
        oControl._oLabel.addStyleClass("sapUshellLoadingDialogLabel");
        oRm.write("<div");
        oRm.writeControlData(oControl);
        oRm.addClass("sapUshellLoadingDialogControl");
        oRm.writeClasses();
        if (sTooltip) {
            oRm.writeAttributeEscaped("title", sTooltip);
        }
        oRm.write(">");

        if (jQuery.os.ios || !oControl._isPlatformDependent) {
            this.renderAppInfo(oRm, oControl);
            this.renderFioriFlower(oRm, oControl);
        } else {
            this.renderFioriFlower(oRm, oControl);
            this.renderAppInfo(oRm, oControl);
        }
        oRm.write("</div>");
    };

    sap.ushell.ui.launchpad.LoadingDialogRenderer.renderAppInfo = function (oRm, oControl) {
        oRm.write("<div").addClass("sapUshellLoadingDialogAppData").writeClasses().write(">");
        if (oControl.getIconUri()) {
            oRm.renderControl(oControl.oIcon);
        }
        oRm.renderControl(oControl._oLabel);
        oRm.write("</div>");
    };

    sap.ushell.ui.launchpad.LoadingDialogRenderer.renderFioriFlower = function (oRm, oControl) {
        /*jslint regexp: true */
        var i,
            bReplaceFlower = false,
            aUserAgentRegexes = [
                /Android\s4\.2.+GT-I9505.+Chrome\/18/ // Chrome 18 on Android 4.2.x / Samsung Galaxy S4
            ];
        // some browsers do not get the flower but the replacement
        if (navigator.userAgent) {
            for (i = 0; i < aUserAgentRegexes.length; i = i + 1) {
                // if one of the user agent matches, the replacement is drawn
                if (aUserAgentRegexes[i].test(navigator.userAgent)) {
                    bReplaceFlower = true;
                    // exit loop
                    break;
                }
            }
        }
        // create either flowery code or busy indicator
        if (jQuery.support.cssAnimations && !bReplaceFlower) {
            oRm.write("<div id='fiori2-loader'>");
            oRm.write("<div class='fiori2-blossom'>");
            for (i = 1; i < 6; i = i + 1) {
                oRm.write("<div class='fiori2-leafContainer fiori2-leafContainer" + i + "'>");
                oRm.write("<div class='fiori2-leaf fiori2-leaf" + i + "'></div>");
                // end leafContainer
                oRm.write("</div>");
            }      // end blossom
            oRm.write("</div>");
            // end fiori2-loader
            oRm.write("</div>");
        }
    };

}());

}; // end of sap/ushell/ui/launchpad/LoadingDialogRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.Panel') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.Panel.
jQuery.sap.declare("sap.ushell.ui.launchpad.Panel");

jQuery.sap.require('sap.m.Panel'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/Panel.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTranslucent translucent} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getHeaderContent headerContent} : sap.ui.core.Control[]</li>
 * <li>{@link #getHeaderBar headerBar} : sap.m.Bar</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Panel#constructor sap.m.Panel}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The Panel control is a container for controls with header text, header controls, or a header bar.
 * @extends sap.m.Panel
 * @version 1.32.6
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.launchpad.Panel
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.Panel.extend("sap.ushell.ui.launchpad.Panel", { metadata : {

	library : "sap.ushell",
	properties : {
		"translucent" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	aggregations : {
		"headerContent" : {type : "sap.ui.core.Control", multiple : true, singularName : "headerContent"}, 
		"headerBar" : {type : "sap.m.Bar", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.Panel with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.Panel.extend
 * @function
 */


/**
 * Getter for property <code>translucent</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>translucent</code>
 * @public
 * @name sap.ushell.ui.launchpad.Panel#getTranslucent
 * @function
 */

/**
 * Setter for property <code>translucent</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bTranslucent  new value for property <code>translucent</code>
 * @return {sap.ushell.ui.launchpad.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Panel#setTranslucent
 * @function
 */


/**
 * Getter for aggregation <code>headerContent</code>.<br/>
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ushell.ui.launchpad.Panel#getHeaderContent
 * @function
 */


/**
 * Inserts a headerContent into the aggregation named <code>headerContent</code>.
 *
 * @param {sap.ui.core.Control}
 *          oHeaderContent the headerContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the headerContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the headerContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the headerContent is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.launchpad.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Panel#insertHeaderContent
 * @function
 */

/**
 * Adds some headerContent <code>oHeaderContent</code> 
 * to the aggregation named <code>headerContent</code>.
 *
 * @param {sap.ui.core.Control}
 *            oHeaderContent the headerContent to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.launchpad.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Panel#addHeaderContent
 * @function
 */

/**
 * Removes an headerContent from the aggregation named <code>headerContent</code>.
 *
 * @param {int | string | sap.ui.core.Control} vHeaderContent the headerContent to remove or its index or id
 * @return {sap.ui.core.Control} the removed headerContent or null
 * @public
 * @name sap.ushell.ui.launchpad.Panel#removeHeaderContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>headerContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.launchpad.Panel#removeAllHeaderContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>headerContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oHeaderContent the headerContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.launchpad.Panel#indexOfHeaderContent
 * @function
 */
	

/**
 * Destroys all the headerContent in the aggregation 
 * named <code>headerContent</code>.
 * @return {sap.ushell.ui.launchpad.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Panel#destroyHeaderContent
 * @function
 */


/**
 * Getter for aggregation <code>headerBar</code>.<br/>
 * 
 * @return {sap.m.Bar}
 * @public
 * @name sap.ushell.ui.launchpad.Panel#getHeaderBar
 * @function
 */


/**
 * Setter for the aggregated <code>headerBar</code>.
 * @param {sap.m.Bar} oHeaderBar
 * @return {sap.ushell.ui.launchpad.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Panel#setHeaderBar
 * @function
 */
	

/**
 * Destroys the headerBar in the aggregation 
 * named <code>headerBar</code>.
 * @return {sap.ushell.ui.launchpad.Panel} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Panel#destroyHeaderBar
 * @function
 */

// Start of sap/ushell/ui/launchpad/Panel.js
/**
 * @name sap.ushell.ui.launchpad.Panel
 *
 * @private
 */


sap.ushell.ui.launchpad.Panel.prototype.updateAggregation = sap.ushell.override.updateAggregation;

}; // end of sap/ushell/ui/launchpad/Panel.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.PanelRenderer') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
jQuery.sap.declare("sap.ushell.ui.launchpad.PanelRenderer");

/**
 * @class Panel renderer. 
 * @static
 * 
 * @private
 */
sap.ushell.ui.launchpad.PanelRenderer = {
};


/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ushell.ui.launchpad.PanelRenderer.render =  function(oRm, oControl) {
    // Return immediately if control is invisible
    if (!oControl.getVisible()) {
        return;
    }

    oRm.write("<section");
    oRm.writeControlData(oControl);
    oRm.addClass("sapMPanel");
    oRm.addClass("sapUshellPanel");
    if (!oControl.getTranslucent()) {
        oRm.addClass("sapMPanelBG");
    }
    oRm.addStyle("width", oControl.getWidth());
    oRm.addStyle("height", oControl.getHeight());
    oRm.writeClasses();
    oRm.writeStyles();
    oRm.write(">");
    var aHeaderChildren = oControl.getHeaderContent();
    var jLength = aHeaderChildren.length;
    if (oControl.getHeaderText() || jLength > 0 || oControl.getHeaderBar()) {
        oRm.write("<header");
        oRm.addClass("sapMPanelHdr");
        oRm.addClass("sapUshellCatalogHeader");
        oRm.writeClasses();
        oRm.write(">");
        if (oControl.getHeaderText() || jLength > 0) {
            oRm.write("<");
            oRm.write(oControl.getHeaderLevel().toLowerCase());
            oRm.write(">");
            if (oControl.getHeaderText()) {
                oRm.writeEscaped(oControl.getHeaderText());
            }
            for (var j = 0; j < jLength; j++) {
                oRm.renderControl(aHeaderChildren[j]);
            }
            oRm.write("</");
            oRm.write(oControl.getHeaderLevel().toLowerCase());
            oRm.write(">");
        }
        if (oControl.getHeaderBar()) {
/*            oRm.addClass("sapUshellPanelHdrBar");*/
            oRm.renderControl(oControl.getHeaderBar());
        }
        oRm.write("</header>");
    }
    oRm.write("<div");
    oRm.addClass("sapMPanelContent");
    oRm.addClass("sapUshellPanelContent");
    oRm.writeClasses();
    oRm.write(">");
    var aChildren = oControl.getContent();
    var iLength = aChildren.length;
    for (var i = 0; i < iLength; i++) {
        oRm.renderControl(aChildren[i]);
    }
    oRm.write("</div>");
    oRm.write("</section>");
};

}; // end of sap/ushell/ui/launchpad/PanelRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.PlusTileRenderer') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/*global jQuery, sap*/
/**
 * @class PlusTile renderer.
 * @static
 * 
 * @private
 */
(function () {
    "use strict";
    
    jQuery.sap.declare("sap.ushell.ui.launchpad.PlusTileRenderer");

    /**
     * @class PlusTile renderer.
     * @static
     */
    sap.ushell.ui.launchpad.PlusTileRenderer = {};
    var translationBundle = sap.ushell.resources.i18n;

    /**
     * Renders the HTML for the given control, using the provided
     * {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render
     *            output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be
     *            rendered
     */
    sap.ushell.ui.launchpad.PlusTileRenderer.render = function (oRm, oControl) {
        oRm.write("<div");
        oRm.writeAttribute("tabindex", "-1");
        oRm.writeControlData(oControl);
        oRm.addClass("sapUshellTile");
        oRm.addClass("sapUshellPlusTile");
        oRm.writeClasses();
        oRm.writeAccessibilityState(oControl, {label : translationBundle.getText("TilePlus_label")});
        oRm.write(">");
        oRm.renderControl(oControl.oIcon);

        oRm.write("</div>");
    };
}());

}; // end of sap/ushell/ui/launchpad/PlusTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.SearchSuggestionList') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.SearchSuggestionList.
jQuery.sap.declare("sap.ushell.ui.launchpad.SearchSuggestionList");

jQuery.sap.require('sap.m.List'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/SearchSuggestionList.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getDisableKeyboardNavigation disableKeyboardNavigation} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.ui.launchpad.SearchSuggestionList#event:pressEsc pressEsc} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.SearchSuggestionList#event:pressUpFirstItem pressUpFirstItem} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.List#constructor sap.m.List}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/launchpad/SearchSuggestionList
 * @extends sap.m.List
 * @version 1.32.6
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionList
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.List.extend("sap.ushell.ui.launchpad.SearchSuggestionList", { metadata : {

	library : "sap.ushell",
	properties : {
		"disableKeyboardNavigation" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	events : {
		"pressEsc" : {}, 
		"pressUpFirstItem" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.SearchSuggestionList with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.SearchSuggestionList.extend
 * @function
 */

sap.ushell.ui.launchpad.SearchSuggestionList.M_EVENTS = {'pressEsc':'pressEsc','pressUpFirstItem':'pressUpFirstItem'};


/**
 * Getter for property <code>disableKeyboardNavigation</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>disableKeyboardNavigation</code>
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionList#getDisableKeyboardNavigation
 * @function
 */

/**
 * Setter for property <code>disableKeyboardNavigation</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDisableKeyboardNavigation  new value for property <code>disableKeyboardNavigation</code>
 * @return {sap.ushell.ui.launchpad.SearchSuggestionList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionList#setDisableKeyboardNavigation
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.SearchSuggestionList#pressEsc
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'pressEsc' event of this <code>sap.ushell.ui.launchpad.SearchSuggestionList</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.SearchSuggestionList</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.SearchSuggestionList</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.SearchSuggestionList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionList#attachPressEsc
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'pressEsc' event of this <code>sap.ushell.ui.launchpad.SearchSuggestionList</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.SearchSuggestionList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionList#detachPressEsc
 * @function
 */

/**
 * Fire event pressEsc to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.SearchSuggestionList} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.SearchSuggestionList#firePressEsc
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.SearchSuggestionList#pressUpFirstItem
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'pressUpFirstItem' event of this <code>sap.ushell.ui.launchpad.SearchSuggestionList</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.SearchSuggestionList</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.SearchSuggestionList</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.SearchSuggestionList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionList#attachPressUpFirstItem
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'pressUpFirstItem' event of this <code>sap.ushell.ui.launchpad.SearchSuggestionList</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.SearchSuggestionList} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionList#detachPressUpFirstItem
 * @function
 */

/**
 * Fire event pressUpFirstItem to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.SearchSuggestionList} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.SearchSuggestionList#firePressUpFirstItem
 * @function
 */

// Start of sap/ushell/ui/launchpad/SearchSuggestionList.js
(function () {
    "use strict";
    /*global jQuery, sap, window */
    /*jslint nomen: true */

    /**
     * @name sap.ushell.ui.launchpad.SearchSuggestionList
     *
     * @private
     */

    
    jQuery.sap.require('sap.ui.core.delegate.ItemNavigation'); // unlisted dependency retained


    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.init = function (oEvent) {
        sap.m.List.prototype.init.call(this,oEvent);
        this.setShowNoData(false);
        this.setShowSeparators(sap.m.ListSeparators.Inner);

        this.oItemNavigation = new sap.ui.core.delegate.ItemNavigation();
        this.oItemNavigation.attachEvent("AfterFocus", this._afterFocus);
    };

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.exit = function (oEvent) {
        this.oItemNavigation.detachEvent("AfterFocus", this._afterFocus);
        this.oItemNavigation.destroy();
    };

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.updateAggregation = sap.ushell.override.updateAggregation;

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.addItem = function (oItem) {
        if (oItem instanceof sap.ushell.ui.launchpad.SearchSuggestionListItem) {
            oItem.attachFocus(this._focusItem, this);
        }
        return sap.m.List.prototype.addItem.call(this, oItem);
    };

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.removeItem = function (oItem) {
        if (oItem instanceof sap.ushell.ui.launchpad.SearchSuggestionListItem) {
            oItem.detachFocus(this._focusItem, this);
        }
        return sap.m.List.prototype.removeItem.call(this, oItem);
    };

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.setDisableKeyboardNavigation = function (bDisabled) {
        if (bDisabled) {
            this.removeDelegate(this.oItemNavigation);
        } else {
            this.addDelegate(this.oItemNavigation);
        }

        this.setProperty("disableKeyboardNavigation", bDisabled);
        return this;
    };

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.onsapright = function () {
        var self = this.oItemNavigation;
        self.setFocusedIndex(self.getItemDomRefs().lastIndexOf(self.getFocusedDomRef()));
    };

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.onsapup = function (oEvent) {
        if (oEvent.srcControl === this.getItems()[0]) {
            this.removeDelegate(this.oItemNavigation);
            this.firePressUpFirstItem();
        }
    };

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.onsapescape = function () {
        this.removeDelegate(this.oItemNavigation);
        this.firePressEsc();
    };

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype.onAfterRendering = function () {
        //Collect the dom references of the items
        var oFocusRef = this.getDomRef(),
            aDomRefs = oFocusRef.getElementsByTagName("li"),
            aItems = [],
            iMaxColumns = 0;

        // Get max number of columns in one row
        jQuery.each(aDomRefs, function (i, value) {
            var iClolumns = value.getElementsByClassName("sapUshellSearchSuggestionListItemNavItem").length;
            if (iClolumns > iMaxColumns) {
                iMaxColumns = iClolumns;
            }
        });

        // Build Grid
        jQuery.each(aDomRefs, function (i, value) {
            var oLinks = value.getElementsByClassName("sapUshellSearchSuggestionListItemNavItem"),
                j = 0;
            if (oLinks.length > 0) {
                for (j; j < iMaxColumns; j = j + 1) {
                    aItems.push(oLinks[j] || aItems[aItems.length - 1]);
                }
            }
        });

        // After each rendering the delegate needs to be initialized as well.
        this.oItemNavigation
            .setRootDomRef(oFocusRef)
            .setItemDomRefs(aItems)
            .setCycling(true)
            .setColumns(iMaxColumns)
            .setSelectedIndex(0);
    };

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype._afterFocus = function (oEvent) {
        this.setFocusedIndex(this.getItemDomRefs().indexOf(this.getFocusedDomRef()));
    };

    sap.ushell.ui.launchpad.SearchSuggestionList.prototype._focusItem = function () {
        this.addDelegate(this.oItemNavigation);
    };
}());
}; // end of sap/ushell/ui/launchpad/SearchSuggestionList.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.SearchSuggestionListItem') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.SearchSuggestionListItem.
jQuery.sap.declare("sap.ushell.ui.launchpad.SearchSuggestionListItem");

jQuery.sap.require('sap.m.ListItemBase'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/SearchSuggestionListItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getText text} : string</li>
 * <li>{@link #getIsGroupFooter isGroupFooter} : boolean (default: false)</li>
 * <li>{@link #getCategorySeperator categorySeperator} : string (default: '/')</li>
 * <li>{@link #getCategoryFirstSeperator categoryFirstSeperator} : string (default: '')</li>
 * <li>{@link #getIcon icon} : sap.ui.core.URI</li>
 * <li>{@link #getMaxCategories maxCategories} : int (default: 2)</li>
 * <li>{@link #getIsGroupHeader isGroupHeader} : boolean</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getCategories categories} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.ui.launchpad.SearchSuggestionListItem#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.SearchSuggestionListItem#event:focus focus} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.ListItemBase#constructor sap.m.ListItemBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/launchpad/SearchSuggestionListItem
 * @extends sap.m.ListItemBase
 * @version 1.32.6
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.ListItemBase.extend("sap.ushell.ui.launchpad.SearchSuggestionListItem", { metadata : {

	library : "sap.ushell",
	properties : {
		"text" : {type : "string", group : "Misc", defaultValue : null},
		"isGroupFooter" : {type : "boolean", group : "Misc", defaultValue : false},
		"categorySeperator" : {type : "string", group : "Misc", defaultValue : '/'},
		"categoryFirstSeperator" : {type : "string", group : "Misc", defaultValue : ''},
		"icon" : {type : "sap.ui.core.URI", group : "Misc", defaultValue : null},
		"maxCategories" : {type : "int", group : "Misc", defaultValue : 2},
		"isGroupHeader" : {type : "boolean", group : "Misc", defaultValue : null}
	},
	aggregations : {
		"categories" : {type : "sap.ui.core.Control", multiple : true, singularName : "category"}
	},
	events : {
		"press" : {}, 
		"focus" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.SearchSuggestionListItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem.extend
 * @function
 */

sap.ushell.ui.launchpad.SearchSuggestionListItem.M_EVENTS = {'press':'press','focus':'focus'};


/**
 * Getter for property <code>text</code>.
 * Suggestion text
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>text</code>
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#getText
 * @function
 */

/**
 * Setter for property <code>text</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sText  new value for property <code>text</code>
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#setText
 * @function
 */


/**
 * Getter for property <code>isGroupFooter</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>isGroupFooter</code>
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#getIsGroupFooter
 * @function
 */

/**
 * Setter for property <code>isGroupFooter</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIsGroupFooter  new value for property <code>isGroupFooter</code>
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#setIsGroupFooter
 * @function
 */


/**
 * Getter for property <code>categorySeperator</code>.
 *
 * Default value is <code>/</code>
 *
 * @return {string} the value of property <code>categorySeperator</code>
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#getCategorySeperator
 * @function
 */

/**
 * Setter for property <code>categorySeperator</code>.
 *
 * Default value is <code>/</code> 
 *
 * @param {string} sCategorySeperator  new value for property <code>categorySeperator</code>
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#setCategorySeperator
 * @function
 */


/**
 * Getter for property <code>categoryFirstSeperator</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>categoryFirstSeperator</code>
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#getCategoryFirstSeperator
 * @function
 */

/**
 * Setter for property <code>categoryFirstSeperator</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sCategoryFirstSeperator  new value for property <code>categoryFirstSeperator</code>
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#setCategoryFirstSeperator
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {sap.ui.core.URI} the value of property <code>icon</code>
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {sap.ui.core.URI} sIcon  new value for property <code>icon</code>
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#setIcon
 * @function
 */


/**
 * Getter for property <code>maxCategories</code>.
 *
 * Default value is <code>2</code>
 *
 * @return {int} the value of property <code>maxCategories</code>
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#getMaxCategories
 * @function
 */

/**
 * Setter for property <code>maxCategories</code>.
 *
 * Default value is <code>2</code> 
 *
 * @param {int} iMaxCategories  new value for property <code>maxCategories</code>
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#setMaxCategories
 * @function
 */


/**
 * Getter for property <code>isGroupHeader</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>isGroupHeader</code>
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#getIsGroupHeader
 * @function
 */

/**
 * Setter for property <code>isGroupHeader</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bIsGroupHeader  new value for property <code>isGroupHeader</code>
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#setIsGroupHeader
 * @function
 */


/**
 * Getter for aggregation <code>categories</code>.<br/>
 * Category Control
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#getCategories
 * @function
 */


/**
 * Inserts a category into the aggregation named <code>categories</code>.
 *
 * @param {sap.ui.core.Control}
 *          oCategory the category to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the category should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the category is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the category is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#insertCategory
 * @function
 */

/**
 * Adds some category <code>oCategory</code> 
 * to the aggregation named <code>categories</code>.
 *
 * @param {sap.ui.core.Control}
 *            oCategory the category to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#addCategory
 * @function
 */

/**
 * Removes an category from the aggregation named <code>categories</code>.
 *
 * @param {int | string | sap.ui.core.Control} vCategory the category to remove or its index or id
 * @return {sap.ui.core.Control} the removed category or null
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#removeCategory
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>categories</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#removeAllCategories
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>categories</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oCategory the category whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#indexOfCategory
 * @function
 */
	

/**
 * Destroys all the categories in the aggregation 
 * named <code>categories</code>.
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#destroyCategories
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.ushell.ui.launchpad.SearchSuggestionListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.SearchSuggestionListItem</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.SearchSuggestionListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.ushell.ui.launchpad.SearchSuggestionListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#firePress
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#focus
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'focus' event of this <code>sap.ushell.ui.launchpad.SearchSuggestionListItem</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.SearchSuggestionListItem</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.SearchSuggestionListItem</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#attachFocus
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'focus' event of this <code>sap.ushell.ui.launchpad.SearchSuggestionListItem</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#detachFocus
 * @function
 */

/**
 * Fire event focus to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.SearchSuggestionListItem} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.SearchSuggestionListItem#fireFocus
 * @function
 */

// Start of sap/ushell/ui/launchpad/SearchSuggestionListItem.js
(function () {
    "use strict";
    /*global jQuery, sap, window */
    /*jslint nomen: true */

    /**
     * @name sap.ushell.ui.launchpad.SearchSuggestionListItem
     *
     * @private
     */

    

    sap.ushell.ui.launchpad.SearchSuggestionListItem.prototype.addCategory = function (oCategory) {
        this.addAggregation("categories", oCategory);

        oCategory.addEventDelegate({
            onmouseover: this._focusCategory
        }, this);
        oCategory.addEventDelegate({
            onsapenter: this.onsapenter
        }, oCategory);
        return this;
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItem.prototype.setActive = function (oEvent) {
        return this;
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItem.prototype.updateAggregation = sap.ushell.override.updateAggregation;


    sap.ushell.ui.launchpad.SearchSuggestionListItem.prototype.firePress = function (oEvent) {
        if (!this.getIsGroupFooter()) {
            sap.m.ListItemBase.prototype.firePress.call(this);
        }
    };


    sap.ushell.ui.launchpad.SearchSuggestionListItem.prototype.onmouseover = function (oEvent) {
        if (jQuery(oEvent.target).hasClass('sapUshellSearchSuggestionListItemNavItem')) {
            this.focus();
            this.fireFocus();
        }
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItem.prototype.onsapenter = function () {
        this.firePress();
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItem.prototype.getFocusDomRef = function () {
        return (this.getDomRef() && this.getDomRef().getElementsByClassName("sapUshellSearchSuggestionListItemNavItem")[0]) || null;
    };


    sap.ushell.ui.launchpad.SearchSuggestionListItem.prototype._focusCategory = function (oEvent) {
        oEvent.srcControl.focus();
        oEvent.preventDefault();
        oEvent.stopPropagation();
        this.fireFocus();
    };
}());
}; // end of sap/ushell/ui/launchpad/SearchSuggestionListItem.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, window */
    jQuery.sap.declare("sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ListItemBaseRenderer'); // unlisted dependency retained


    sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer = sap.ui.core.Renderer.extend(sap.m.ListItemBaseRenderer);

    sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer.renderLIAttributes = function (rm, oLI) {
        rm.addClass("sapUshellSearchSuggestionListItem");
        if (oLI.getIsGroupFooter()) {
            rm.addClass("sapUshellSearchSuggestionListItemGroupFooter");
        }
        if (oLI.getIsGroupHeader()) {
            rm.addClass("sapMGHLI sapMGHLIUpperCase sapMLIBTypeInactive sapMListHdr");
        }
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer.renderLIContent = function (rm, oLI) {
        var aCategories = oLI.getCategories();

        if (oLI.getIsGroupHeader()) {
            this.renderLIGroupHeader(rm, oLI);
        } else if (oLI.getIsGroupFooter()) {
            this.renderLIGroupFooter(rm, oLI);
        } else if (oLI.getText()) {
            if (oLI.getIcon()) {
                this.renderLIIcon(rm, oLI);
            }
            this.renderLIText(rm, oLI);
        }

        if (aCategories.length > 0) {
            this.renderLICategories(rm, oLI, aCategories);
        }
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer.renderLIIcon = function (rm, oLI) {
        rm.write("<div");
        rm.addClass("sapUshellSearchSuggestionListItemIcon");
        rm.writeClasses();
        rm.write(">");
        rm.renderControl(new sap.ui.core.Icon({src: oLI.getIcon()}));
        rm.write('</div>');
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer.renderLIGroupHeader = function (rm, oLI) {
        rm.write("<label");
        rm.addClass("sapMGHLITitle");
        rm.writeClasses();
        rm.write(">");
        rm.writeEscaped(oLI.getText());
        rm.write('</label>');
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer.renderLIGroupFooter = function (rm, oLI) {
        rm.write("<span>");
        rm.writeEscaped(oLI.getText());
        rm.write('</span>');
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer.renderLIText = function (rm, oLI) {
        rm.write("<div");
        rm.addClass("sapUshellSearchSuggestionListItemText");
        rm.writeClasses();
        rm.write(">");

        rm.write("<a");
        rm.addClass("sapUshellSearchSuggestionListItemNavItem");
        rm.writeClasses();
        rm.write("style='display: inline-block;' tabindex='0'>");

        rm.write(oLI.getText());

        rm.write('</a>');
        rm.write('</div>');
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer.renderLICategories = function (rm, oLI, aCategories) {
        var iMaxCatToDisplay = oLI.getMaxCategories(),
            iCatToDisplay = aCategories.length < iMaxCatToDisplay ? aCategories.length : iMaxCatToDisplay,
            i;

        rm.write("<div");
        rm.addClass("sapUshellSearchSuggestionListItemCategory");
        rm.writeClasses();
        rm.write(">");

        this.renderLICategoryFirstSeperator(rm, oLI);
        for (i = 0; i < iCatToDisplay; i = i + 1) {
            rm.renderControl(aCategories[i].addStyleClass("sapUshellSearchSuggestionListItemNavItem"));
            if ((i + 1) < iCatToDisplay) {
                this.renderLICategorySeperator(rm, oLI);
            }
        }

        rm.write('</div>');
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer.renderLICategoryFirstSeperator = function (rm, oLI) {
        rm.write("<div");
        rm.addClass("sapUshellSearchSuggestionListItemCategoryFirstSeperator");
        rm.writeClasses();
        rm.write(">");
        rm.writeEscaped(oLI.getCategoryFirstSeperator());
        rm.write('</div>');
    };

    sap.ushell.ui.launchpad.SearchSuggestionListItemRenderer.renderLICategorySeperator = function (rm, oLI) {
        rm.write("<div");
        rm.addClass("sapUshellSearchSuggestionListItemCategorySeperator");
        rm.writeClasses();
        rm.write(">");
        rm.writeEscaped(oLI.getCategorySeperator());
        rm.write('</div>');
    };
}());
}; // end of sap/ushell/ui/launchpad/SearchSuggestionListItemRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.SearchSuggestionListRenderer') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, window */
    /*jslint nomen: true */

    jQuery.sap.declare("sap.ushell.ui.launchpad.SearchSuggestionListRenderer");
    jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained

    jQuery.sap.require('sap.m.ListRenderer'); // unlisted dependency retained


    sap.ushell.ui.launchpad.SearchSuggestionListRenderer = sap.ui.core.Renderer.extend(sap.m.ListRenderer);

    sap.ushell.ui.launchpad.SearchSuggestionListRenderer.renderContainerAttributes = function (rm, oControl) {
        rm.addClass("sapUshellSearchSuggestionList");
    };
}());
}; // end of sap/ushell/ui/launchpad/SearchSuggestionListRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.Tile') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.Tile.
jQuery.sap.declare("sap.ushell.ui.launchpad.Tile");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/Tile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTall tall} : boolean (default: false)</li>
 * <li>{@link #getLong long} : boolean (default: false)</li>
 * <li>{@link #getUuid uuid} : string</li>
 * <li>{@link #getTileCatalogId tileCatalogId} : string</li>
 * <li>{@link #getTarget target} : string</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getDebugInfo debugInfo} : string</li>
 * <li>{@link #getRgba rgba} : string</li>
 * <li>{@link #getAnimationRendered animationRendered} : boolean (default: false)</li>
 * <li>{@link #getIsLocked isLocked} : boolean (default: false)</li>
 * <li>{@link #getShowActionsIcon showActionsIcon} : boolean (default: false)</li>
 * <li>{@link #getTileActionModeActive tileActionModeActive} : boolean (default: false)</li>
 * <li>{@link #getIeHtml5DnD ieHtml5DnD} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTileViews tileViews} : sap.ui.core.Control[]</li>
 * <li>{@link #getFootItems footItems} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.ui.launchpad.Tile#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.Tile#event:coverDivPress coverDivPress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.Tile#event:afterRendering afterRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.Tile#event:showActions showActions} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.Tile#event:deletePress deletePress} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A tile to be displayed in the tile container. This tile acts as container for specialized tile implementations.
 * @extends sap.ui.core.Control
 * @version 1.32.6
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.launchpad.Tile
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.ushell.ui.launchpad.Tile", { metadata : {

	library : "sap.ushell",
	properties : {
		"tall" : {type : "boolean", group : "Misc", defaultValue : false},
		"long" : {type : "boolean", group : "Misc", defaultValue : false},
		"uuid" : {type : "string", group : "Misc", defaultValue : null},
		"tileCatalogId" : {type : "string", group : "Misc", defaultValue : null},
		"target" : {type : "string", group : "Misc", defaultValue : null},
		"visible" : {type : "boolean", group : "Misc", defaultValue : true},
		"debugInfo" : {type : "string", group : "Misc", defaultValue : null},
		"rgba" : {type : "string", group : "Misc", defaultValue : null},
		"animationRendered" : {type : "boolean", group : "Misc", defaultValue : false},
		"isLocked" : {type : "boolean", group : "Misc", defaultValue : false},
		"showActionsIcon" : {type : "boolean", group : "Misc", defaultValue : false},
		"tileActionModeActive" : {type : "boolean", group : "Misc", defaultValue : false},
		"ieHtml5DnD" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	aggregations : {
		"tileViews" : {type : "sap.ui.core.Control", multiple : true, singularName : "tileView"}, 
		"footItems" : {type : "sap.ui.core.Control", multiple : true, singularName : "footItem"}
	},
	events : {
		"press" : {}, 
		"coverDivPress" : {}, 
		"afterRendering" : {}, 
		"showActions" : {}, 
		"deletePress" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.Tile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.Tile.extend
 * @function
 */

sap.ushell.ui.launchpad.Tile.M_EVENTS = {'press':'press','coverDivPress':'coverDivPress','afterRendering':'afterRendering','showActions':'showActions','deletePress':'deletePress'};


/**
 * Getter for property <code>tall</code>.
 * Whether tile spans more than one row
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>tall</code>
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getTall
 * @function
 */

/**
 * Setter for property <code>tall</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bTall  new value for property <code>tall</code>
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#setTall
 * @function
 */


/**
 * Getter for property <code>long</code>.
 * Whether tile spans more than one column
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>long</code>
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getLong
 * @function
 */

/**
 * Setter for property <code>long</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bLong  new value for property <code>long</code>
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#setLong
 * @function
 */


/**
 * Getter for property <code>uuid</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>uuid</code>
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getUuid
 * @function
 */

/**
 * Setter for property <code>uuid</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sUuid  new value for property <code>uuid</code>
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#setUuid
 * @function
 */


/**
 * Getter for property <code>tileCatalogId</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>tileCatalogId</code>
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getTileCatalogId
 * @function
 */

/**
 * Setter for property <code>tileCatalogId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTileCatalogId  new value for property <code>tileCatalogId</code>
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#setTileCatalogId
 * @function
 */


/**
 * Getter for property <code>target</code>.
 * Hyperlink target
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>target</code>
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getTarget
 * @function
 */

/**
 * Setter for property <code>target</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTarget  new value for property <code>target</code>
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#setTarget
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#setVisible
 * @function
 */


/**
 * Getter for property <code>debugInfo</code>.
 * Technical information about the tile which is logged when the tile is clicked
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>debugInfo</code>
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getDebugInfo
 * @function
 */

/**
 * Setter for property <code>debugInfo</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sDebugInfo  new value for property <code>debugInfo</code>
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#setDebugInfo
 * @function
 */


/**
 * Getter for property <code>rgba</code>.
 * the RGBA value of the tile
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>rgba</code>
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getRgba
 * @function
 */

/**
 * Setter for property <code>rgba</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sRgba  new value for property <code>rgba</code>
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#setRgba
 * @function
 */


/**
 * Getter for property <code>animationRendered</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>animationRendered</code>
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getAnimationRendered
 * @function
 */

/**
 * Setter for property <code>animationRendered</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bAnimationRendered  new value for property <code>animationRendered</code>
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#setAnimationRendered
 * @function
 */


/**
 * Getter for property <code>isLocked</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>isLocked</code>
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getIsLocked
 * @function
 */

/**
 * Setter for property <code>isLocked</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIsLocked  new value for property <code>isLocked</code>
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#setIsLocked
 * @function
 */


/**
 * Getter for property <code>showActionsIcon</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showActionsIcon</code>
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getShowActionsIcon
 * @function
 */

/**
 * Setter for property <code>showActionsIcon</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowActionsIcon  new value for property <code>showActionsIcon</code>
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#setShowActionsIcon
 * @function
 */


/**
 * Getter for property <code>tileActionModeActive</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>tileActionModeActive</code>
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getTileActionModeActive
 * @function
 */

/**
 * Setter for property <code>tileActionModeActive</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bTileActionModeActive  new value for property <code>tileActionModeActive</code>
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#setTileActionModeActive
 * @function
 */


/**
 * Getter for property <code>ieHtml5DnD</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>ieHtml5DnD</code>
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getIeHtml5DnD
 * @function
 */

/**
 * Setter for property <code>ieHtml5DnD</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIeHtml5DnD  new value for property <code>ieHtml5DnD</code>
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#setIeHtml5DnD
 * @function
 */


/**
 * Getter for aggregation <code>tileViews</code>.<br/>
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getTileViews
 * @function
 */


/**
 * Inserts a tileView into the aggregation named <code>tileViews</code>.
 *
 * @param {sap.ui.core.Control}
 *          oTileView the tileView to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the tileView should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the tileView is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the tileView is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#insertTileView
 * @function
 */

/**
 * Adds some tileView <code>oTileView</code> 
 * to the aggregation named <code>tileViews</code>.
 *
 * @param {sap.ui.core.Control}
 *            oTileView the tileView to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#addTileView
 * @function
 */

/**
 * Removes an tileView from the aggregation named <code>tileViews</code>.
 *
 * @param {int | string | sap.ui.core.Control} vTileView the tileView to remove or its index or id
 * @return {sap.ui.core.Control} the removed tileView or null
 * @public
 * @name sap.ushell.ui.launchpad.Tile#removeTileView
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>tileViews</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.launchpad.Tile#removeAllTileViews
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>tileViews</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oTileView the tileView whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.launchpad.Tile#indexOfTileView
 * @function
 */
	

/**
 * Destroys all the tileViews in the aggregation 
 * named <code>tileViews</code>.
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#destroyTileViews
 * @function
 */


/**
 * Getter for aggregation <code>footItems</code>.<br/>
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ushell.ui.launchpad.Tile#getFootItems
 * @function
 */


/**
 * Inserts a footItem into the aggregation named <code>footItems</code>.
 *
 * @param {sap.ui.core.Control}
 *          oFootItem the footItem to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the footItem should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the footItem is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the footItem is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#insertFootItem
 * @function
 */

/**
 * Adds some footItem <code>oFootItem</code> 
 * to the aggregation named <code>footItems</code>.
 *
 * @param {sap.ui.core.Control}
 *            oFootItem the footItem to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#addFootItem
 * @function
 */

/**
 * Removes an footItem from the aggregation named <code>footItems</code>.
 *
 * @param {int | string | sap.ui.core.Control} vFootItem the footItem to remove or its index or id
 * @return {sap.ui.core.Control} the removed footItem or null
 * @public
 * @name sap.ushell.ui.launchpad.Tile#removeFootItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>footItems</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.launchpad.Tile#removeAllFootItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>footItems</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oFootItem the footItem whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.launchpad.Tile#indexOfFootItem
 * @function
 */
	

/**
 * Destroys all the footItems in the aggregation 
 * named <code>footItems</code>.
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#destroyFootItems
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.Tile#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.ushell.ui.launchpad.Tile</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.Tile</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.Tile</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.ushell.ui.launchpad.Tile</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.Tile#firePress
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.Tile#coverDivPress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'coverDivPress' event of this <code>sap.ushell.ui.launchpad.Tile</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.Tile</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.Tile</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#attachCoverDivPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'coverDivPress' event of this <code>sap.ushell.ui.launchpad.Tile</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#detachCoverDivPress
 * @function
 */

/**
 * Fire event coverDivPress to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.Tile#fireCoverDivPress
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.Tile#afterRendering
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterRendering' event of this <code>sap.ushell.ui.launchpad.Tile</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.Tile</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.Tile</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#attachAfterRendering
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterRendering' event of this <code>sap.ushell.ui.launchpad.Tile</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#detachAfterRendering
 * @function
 */

/**
 * Fire event afterRendering to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.Tile#fireAfterRendering
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.Tile#showActions
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'showActions' event of this <code>sap.ushell.ui.launchpad.Tile</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.Tile</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.Tile</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#attachShowActions
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'showActions' event of this <code>sap.ushell.ui.launchpad.Tile</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#detachShowActions
 * @function
 */

/**
 * Fire event showActions to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.Tile#fireShowActions
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.Tile#deletePress
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'deletePress' event of this <code>sap.ushell.ui.launchpad.Tile</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.Tile</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.Tile</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#attachDeletePress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'deletePress' event of this <code>sap.ushell.ui.launchpad.Tile</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.Tile#detachDeletePress
 * @function
 */

/**
 * Fire event deletePress to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.Tile} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.Tile#fireDeletePress
 * @function
 */

// Start of sap/ushell/ui/launchpad/Tile.js
/*global jQuery, sap*/
/**
 * @name sap.ushell.ui.launchpad.Tile
 *
 * @private
 */
(function () {
    "use strict";
    /*global jQuery, sap, window */
    /*jslint nomen: true*/

    

    sap.ushell.ui.launchpad.Tile.prototype.ontap = function (event, ui) {
        // dump debug info when tile is clicked
        jQuery.sap.log.info(
            "Tile clicked:",
            this.getDebugInfo(),
            "sap.ushell.ui.launchpad.Tile"
        );

        this.firePress();

        // NOTE: for now, the on press animation is not used, as it caused too much
        // confusion
        return;
        //// var oSrc = event.srcElement,
        ////     bIsInFooter = true,
        ////     i,
        ////     fTimeoutHelper = function () {
        ////         var fHelper2 = function () {
        ////             this.toggleStyleClass("sapUshellTileHide", false);
        ////         };
        ////         this.toggleStyleClass("sapUshellTileHide", true);
        ////         this.toggleStyleClass("sapUshellTileTapped", false);
        ////         window.setTimeout(jQuery.proxy(fHelper2, this), 800);
        ////     };
        //// // we do not need to support animations for phones and if the browser does not support it
        //// if (sap.ui.Device.system.phone || !jQuery.support.cssAnimations) {
        ////     return;
        //// }
        //// // workaround: check whether the clicked source element is within the main section of the tile (i.e. in sapUshellTileInner)
        //// // If a parent is outside, e.g. in the footer (Catalog view), we suppress the animation
        //// for (i = 0; i < 6; i = i + 1) {
        ////     if (jQuery(oSrc) && (jQuery(oSrc).hasClass("sapUshellTileInner") || jQuery(oSrc).hasClass("sapUshellPlusTile"))) {
        ////         bIsInFooter = false;
        ////         break;
        ////     }
        ////     // go up one level
        ////     oSrc = jQuery(oSrc).parent();
        //// }
        //// if (bIsInFooter) {
        ////     // the tapped item is the footer button or something not within the tile - ignore
        ////     return;
        //// }
        //// this.toggleStyleClass("sapUshellTileTapped", true);
        //// window.setTimeout(jQuery.proxy(fTimeoutHelper, this), 1000);
    };

    sap.ushell.ui.launchpad.Tile.prototype.destroy = function (bSuppressInvalidate) {
        this.destroyTileViews();
        sap.ui.core.Control.prototype.destroy.call(this, bSuppressInvalidate);
    };

    sap.ushell.ui.launchpad.Tile.prototype.addTileView = function (oObject, bSuppressInvalidate) {
        // Workaround for a problem in addAggregation. If a child is added to its current parent again,
        // it is actually removed from the aggregation. Prevent this by removing it from its parent first.
        oObject.setParent(null);
        sap.ui.base.ManagedObject.prototype.addAggregation.call(this, "tileViews", oObject, bSuppressInvalidate);
    };

    sap.ushell.ui.launchpad.Tile.prototype.destroyTileViews = function () {
        // Don't delete the tileViews when destroying the aggregation. They are stored in the model and must be handled manually.
        if (this.mAggregations["tileViews"]) {
            this.mAggregations["tileViews"].length = 0;
        }
    };

    sap.ushell.ui.launchpad.Tile.prototype.onAfterRendering = function () {
        var coverDiv = this.$().find("div.sapUshellTileActionLayerDiv"),
            sRGBAvalue;

        // If in ActionMode - the cover div should be visible
        if (this.getTileActionModeActive()) {
            coverDiv.css("display", "block");
        } else {
            coverDiv.css("display", "none");
        }

        sRGBAvalue = this.getRgba();
        if (sRGBAvalue) {
            this._redrawRGBA();
        }
        this.fireAfterRendering();
    };

    sap.ushell.ui.launchpad.Tile.prototype._launchTileViaKeyboard = function(oEvent) {
        if (this.getTileActionModeActive()) {
            // If in ActionMode - invoke the cover DIV press event
            this.fireCoverDivPress({
                id : this.getId()
            });
        } else {
            if (oEvent.target.tagName !== "BUTTON") {
                var oTileUIWrapper = this.getTileViews()[0],
                    bPressHandled = false;

                if (oTileUIWrapper.firePress) {
                    oTileUIWrapper.firePress({id: this.getId()});
                    //If oTileUIWrapper is a View or a Component.
                } else {
                    while (oTileUIWrapper.getContent && !bPressHandled) {
                        //Limitation: since there's no way to know which of the views is the currently presented one, we assume it's the first one.
                        oTileUIWrapper = oTileUIWrapper.getContent()[0];
                        if (oTileUIWrapper.firePress) {
                            oTileUIWrapper.firePress({id: this.getId()});
                            bPressHandled = true;
                        }
                    }
                }
            }
        }
    };

    sap.ushell.ui.launchpad.Tile.prototype.onsapenter = function (oEvent) {
        this._launchTileViaKeyboard(oEvent);
    };

    sap.ushell.ui.launchpad.Tile.prototype.onsapspace = function (oEvent) {
        this._launchTileViaKeyboard(oEvent);
    };

    sap.ushell.ui.launchpad.Tile.prototype.onclick = function (oEvent) {
        // if tile is in Edit Mode (Action Mode)
        if (this.getTileActionModeActive()) {
            // in case we clicked on the Delete-Action Click-Area trigger delete
            var srcElement = oEvent.originalEvent.srcElement;
            if (jQuery(srcElement).hasClass('sapUshellTileDeleteClickArea')) {
                this.fireDeletePress();
            } else {
                // otherwise click made on cover-div
                this.fireCoverDivPress({
                    id: this.getId()
                });
            }
        }
    };

    sap.ushell.ui.launchpad.Tile.prototype._initDeleteAction = function () {
        var that = this; // the tile control
        if (!this.deleteIcon) {
            this.deleteIcon = new sap.ui.core.Icon({
                src: "sap-icon://decline",
                tooltip: sap.ushell.resources.i18n.getText("removeButtonTItle")
            });
            this.deleteIcon.addEventDelegate({
                onclick : function (oEvent) {
                    that.fireDeletePress();
                    oEvent.stopPropagation();
                }
            });
            this.deleteIcon.addStyleClass("sapUshellTileDeleteIconInnerClass");
        }
        return this.deleteIcon;
    };

    sap.ushell.ui.launchpad.Tile.prototype.setShowActionsIcon = function (bShow) {
        var that = this, // the tile control
            icon;

        if (bShow) {
            icon = new sap.ui.core.Icon({
                size: "1rem",
                src: "sap-icon://overflow",
                press: function (oEvent) {
                    that.fireShowActions();
                    that.addStyleClass('showTileActionsIcon');

                    var oEventBus = sap.ui.getCore().getEventBus(),
                        eventFunction = function (name, name2, tile) {
                            tile.removeStyleClass('showTileActionsIcon');
                            oEventBus.unsubscribe("dashboard", "actionSheetClose", eventFunction);
                        };
                    oEventBus.subscribe("dashboard", "actionSheetClose", eventFunction);
                }
            });
            icon.addStyleClass("sapUshellTileActionsIconClass");
            /*icon.onclick = function (e) {
                that.addStyleClass('showTileActionsIcon');
                var oEventBus = sap.ui.getCore().getEventBus();
                var eventFunction = (function (name, name2, tile) {
                    tile.removeStyleClass('showTileActionsIcon');
                    oEventBus.unsubscribe("dashboard", "actionSheetClose", eventFunction);
                })
                oEventBus.subscribe("dashboard", "actionSheetClose", eventFunction);
            };*/
            this.actionIcon = icon;
        } else if (this.actionIcon) {
            this.actionIcon.destroy(true);
        }
        this.setProperty("showActionsIcon", bShow);
    };

    sap.ushell.ui.launchpad.Tile.prototype.setVisible = function (bVisible) {
        this.setProperty("visible", bVisible, true); // suppress rerendering
        return this.toggleStyleClass("sapUshellHidden", !bVisible);
    };

    sap.ushell.ui.launchpad.Tile.prototype.setRgba = function (sValue) {
        this.setProperty("rgba", sValue, true); // suppress re-rendering
        this._redrawRGBA(arguments);
    };

    sap.ushell.ui.launchpad.Tile.prototype.setAnimationRendered = function (bVal) {
        this.setProperty('animationRendered', bVal, true); // suppress re-rendering
    };

    sap.ushell.ui.launchpad.Tile.prototype._handleTileShadow = function (jqTile, args) {
        if (jqTile.length) {
            jqTile.unbind('mouseenter mouseleave');
            var updatedShadowColor,
                tileBorderWidth = jqTile.css("border").split("px")[0],
                oModel = this.getModel();
            //tile has border
            if (tileBorderWidth > 0) {
                updatedShadowColor = jqTile.css("border-color");
            } else {
                updatedShadowColor = this.getRgba();
            }

            jqTile.hover(
                function () {
                    if (!oModel.getProperty('/tileActionModeActive')) {
                        var sOriginalTileShadow = jQuery(jqTile).css('box-shadow'),
                            sTitleShadowDimension = sOriginalTileShadow ? sOriginalTileShadow.split(') ')[1] : null,
                            sUpdatedTileShadow;

                        if (sTitleShadowDimension) {
                            sUpdatedTileShadow = sTitleShadowDimension + " " + updatedShadowColor;
                            jQuery(this).css('box-shadow', sUpdatedTileShadow);
                        }
                    }
                },
                function () {
                    jQuery(this).css('box-shadow', '');
                }
            );
        }
    };

    sap.ushell.ui.launchpad.Tile.prototype._redrawRGBA = function (args) {
        var sRGBAvalue = this.getRgba(),
            jqTile,
            bIsIE9;

        if (sRGBAvalue) {
            jqTile = jQuery.sap.byId(this.getId());
            bIsIE9 = (jQuery.browser.msie && (parseInt(jQuery.browser.version, 9) === 9));

            //In case this method is called before the tile was rendered
            if (!jqTile) {
                return;
            }

            if (!this.getModel().getProperty('/animationRendered')) {
                // If IE9
                if (bIsIE9) {
                    jqTile.animate({backgroundColor: sRGBAvalue}, 2000);
                } else {
                    jqTile.css('transition', 'background-color 2s');
                    jqTile.css('background-color', sRGBAvalue);
                }
            } else {
                jqTile.css('background-color', sRGBAvalue);
            }
            this._handleTileShadow(jqTile, args);
        }
    };

    sap.ushell.ui.launchpad.Tile.prototype.setLong = function (bLong) {
        this.setProperty("long", bLong, true); // suppress rerendering
        return this.toggleStyleClass("sapUshellLong", bLong);
    };

    sap.ushell.ui.launchpad.Tile.prototype.setTall = function (bTall) {
        this.setProperty("tall", bTall, true); // suppress rerendering
        return this.toggleStyleClass("sapUshellTall", bTall);
    };

    sap.ushell.ui.launchpad.Tile.prototype.setUuid = function (sUuid) {
        this.setProperty("uuid", sUuid, true); // suppress rerendering
        return this;
    };
}());

}; // end of sap/ushell/ui/launchpad/Tile.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.TileContainer') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.TileContainer.
jQuery.sap.declare("sap.ushell.ui.launchpad.TileContainer");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/TileContainer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getScrollType scrollType} : string (default: 'item')</li>
 * <li>{@link #getAnimationSpeed animationSpeed} : int (default: 500)</li>
 * <li>{@link #getGroupId groupId} : string</li>
 * <li>{@link #getShowHeader showHeader} : boolean (default: true)</li>
 * <li>{@link #getShowPlaceholder showPlaceholder} : boolean (default: true)</li>
 * <li>{@link #getDefaultGroup defaultGroup} : boolean (default: false)</li>
 * <li>{@link #getIsLastGroup isLastGroup} : boolean (default: false)</li>
 * <li>{@link #getHeaderText headerText} : string</li>
 * <li>{@link #getHeaderLevel headerLevel} : sap.m.HeaderLevel (default: sap.m.HeaderLevel.H2)</li>
 * <li>{@link #getGroupHeaderLevel groupHeaderLevel} : sap.m.HeaderLevel (default: sap.m.HeaderLevel.H4)</li>
 * <li>{@link #getShowGroupHeader showGroupHeader} : boolean (default: true)</li>
 * <li>{@link #getVisible visible} : boolean (default: true)</li>
 * <li>{@link #getSortable sortable} : boolean (default: true)</li>
 * <li>{@link #getShowNoData showNoData} : boolean (default: false)</li>
 * <li>{@link #getNoDataText noDataText} : string</li>
 * <li>{@link #getIsGroupLocked isGroupLocked} : boolean</li>
 * <li>{@link #getEditMode editMode} : boolean (default: false)</li>
 * <li>{@link #getShowBackground showBackground} : boolean (default: false)</li>
 * <li>{@link #getIcon icon} : string (default: 'sap-icon://locked')</li>
 * <li>{@link #getShowIcon showIcon} : boolean (default: false)</li>
 * <li>{@link #getDeluminate deluminate} : boolean (default: false)</li>
 * <li>{@link #getShowMobileActions showMobileActions} : boolean (default: false)</li>
 * <li>{@link #getEnableHelp enableHelp} : boolean (default: false)</li>
 * <li>{@link #getTileActionModeActive tileActionModeActive} : boolean (default: false)</li>
 * <li>{@link #getIeHtml5DnD ieHtml5DnD} : boolean (default: false)</li>
 * <li>{@link #getShowDragIndicator showDragIndicator} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getTiles tiles} : sap.ushell.ui.launchpad.Tile[]</li>
 * <li>{@link #getLinks links} : sap.ushell.ui.launchpad.LinkTileWrapper[]</li>
 * <li>{@link #getBeforeContent beforeContent} : sap.ui.core.Control[]</li>
 * <li>{@link #getAfterContent afterContent} : sap.ui.core.Control[]</li>
 * <li>{@link #getFooterContent footerContent} : sap.ui.core.Control[]</li>
 * <li>{@link #getHeaderActions headerActions} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.ui.launchpad.TileContainer#event:afterRendering afterRendering} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.TileContainer#event:add add} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li>
 * <li>{@link sap.ushell.ui.launchpad.TileContainer#event:titleChange titleChange} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A container that arranges Tile controls.
 * @extends sap.ui.core.Control
 * @version 1.32.6
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.ushell.ui.launchpad.TileContainer", { metadata : {

	library : "sap.ushell",
	properties : {
		"scrollType" : {type : "string", group : "Misc", defaultValue : 'item'},
		"animationSpeed" : {type : "int", group : "Misc", defaultValue : 500},
		"groupId" : {type : "string", group : "Misc", defaultValue : null},
		"showHeader" : {type : "boolean", group : "Misc", defaultValue : true},
		"showPlaceholder" : {type : "boolean", group : "Misc", defaultValue : true},
		"defaultGroup" : {type : "boolean", group : "Misc", defaultValue : false},
		"isLastGroup" : {type : "boolean", group : "Misc", defaultValue : false},
		"headerText" : {type : "string", group : "Misc", defaultValue : null},
		"headerLevel" : {type : "sap.m.HeaderLevel", group : "Misc", defaultValue : sap.m.HeaderLevel.H2},
		"groupHeaderLevel" : {type : "sap.m.HeaderLevel", group : "Misc", defaultValue : sap.m.HeaderLevel.H4},
		"showGroupHeader" : {type : "boolean", group : "Misc", defaultValue : true},
		"visible" : {type : "boolean", group : "Misc", defaultValue : true},
		"sortable" : {type : "boolean", group : "Misc", defaultValue : true},
		"showNoData" : {type : "boolean", group : "Misc", defaultValue : false},
		"noDataText" : {type : "string", group : "Misc", defaultValue : null},
		"isGroupLocked" : {type : "boolean", group : "Misc", defaultValue : null},
		"editMode" : {type : "boolean", group : "Misc", defaultValue : false},
		"showBackground" : {type : "boolean", group : "Misc", defaultValue : false},
		"icon" : {type : "string", group : "Misc", defaultValue : 'sap-icon://locked'},
		"showIcon" : {type : "boolean", group : "Misc", defaultValue : false},
		"deluminate" : {type : "boolean", group : "Misc", defaultValue : false},
		"showMobileActions" : {type : "boolean", group : "Misc", defaultValue : false},
		"enableHelp" : {type : "boolean", group : "Misc", defaultValue : false},
		"tileActionModeActive" : {type : "boolean", group : "Misc", defaultValue : false},
		"ieHtml5DnD" : {type : "boolean", group : "Misc", defaultValue : false},
		"showDragIndicator" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	aggregations : {
		"tiles" : {type : "sap.ushell.ui.launchpad.Tile", multiple : true, singularName : "tile"}, 
		"links" : {type : "sap.ushell.ui.launchpad.LinkTileWrapper", multiple : true, singularName : "link"}, 
		"beforeContent" : {type : "sap.ui.core.Control", multiple : true, singularName : "beforeContent"}, 
		"afterContent" : {type : "sap.ui.core.Control", multiple : true, singularName : "afterContent"}, 
		"footerContent" : {type : "sap.ui.core.Control", multiple : true, singularName : "footerContent"}, 
		"headerActions" : {type : "sap.ui.core.Control", multiple : true, singularName : "headerAction"}
	},
	events : {
		"afterRendering" : {}, 
		"add" : {}, 
		"titleChange" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.TileContainer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.TileContainer.extend
 * @function
 */

sap.ushell.ui.launchpad.TileContainer.M_EVENTS = {'afterRendering':'afterRendering','add':'add','titleChange':'titleChange'};


/**
 * Getter for property <code>scrollType</code>.
 *
 * Default value is <code>item</code>
 *
 * @return {string} the value of property <code>scrollType</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getScrollType
 * @function
 */

/**
 * Setter for property <code>scrollType</code>.
 *
 * Default value is <code>item</code> 
 *
 * @param {string} sScrollType  new value for property <code>scrollType</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setScrollType
 * @function
 */


/**
 * Getter for property <code>animationSpeed</code>.
 * Animation Speed in milliseconds (ms)
 *
 * Default value is <code>500</code>
 *
 * @return {int} the value of property <code>animationSpeed</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getAnimationSpeed
 * @function
 */

/**
 * Setter for property <code>animationSpeed</code>.
 *
 * Default value is <code>500</code> 
 *
 * @param {int} iAnimationSpeed  new value for property <code>animationSpeed</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setAnimationSpeed
 * @function
 */


/**
 * Getter for property <code>groupId</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>groupId</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getGroupId
 * @function
 */

/**
 * Setter for property <code>groupId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sGroupId  new value for property <code>groupId</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setGroupId
 * @function
 */


/**
 * Getter for property <code>showHeader</code>.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showHeader</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getShowHeader
 * @function
 */

/**
 * Setter for property <code>showHeader</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowHeader  new value for property <code>showHeader</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setShowHeader
 * @function
 */


/**
 * Getter for property <code>showPlaceholder</code>.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showPlaceholder</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getShowPlaceholder
 * @function
 */

/**
 * Setter for property <code>showPlaceholder</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowPlaceholder  new value for property <code>showPlaceholder</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setShowPlaceholder
 * @function
 */


/**
 * Getter for property <code>defaultGroup</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>defaultGroup</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getDefaultGroup
 * @function
 */

/**
 * Setter for property <code>defaultGroup</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDefaultGroup  new value for property <code>defaultGroup</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setDefaultGroup
 * @function
 */


/**
 * Getter for property <code>isLastGroup</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>isLastGroup</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getIsLastGroup
 * @function
 */

/**
 * Setter for property <code>isLastGroup</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIsLastGroup  new value for property <code>isLastGroup</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setIsLastGroup
 * @function
 */


/**
 * Getter for property <code>headerText</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>headerText</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getHeaderText
 * @function
 */

/**
 * Setter for property <code>headerText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sHeaderText  new value for property <code>headerText</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setHeaderText
 * @function
 */


/**
 * Getter for property <code>headerLevel</code>.
 *
 * Default value is <code>H2</code>
 *
 * @return {sap.m.HeaderLevel} the value of property <code>headerLevel</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getHeaderLevel
 * @function
 */

/**
 * Setter for property <code>headerLevel</code>.
 *
 * Default value is <code>H2</code> 
 *
 * @param {sap.m.HeaderLevel} oHeaderLevel  new value for property <code>headerLevel</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setHeaderLevel
 * @function
 */


/**
 * Getter for property <code>groupHeaderLevel</code>.
 * Header level (H1-H6) used for headers of tile groups.
 *
 * Default value is <code>H4</code>
 *
 * @return {sap.m.HeaderLevel} the value of property <code>groupHeaderLevel</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getGroupHeaderLevel
 * @function
 */

/**
 * Setter for property <code>groupHeaderLevel</code>.
 *
 * Default value is <code>H4</code> 
 *
 * @param {sap.m.HeaderLevel} oGroupHeaderLevel  new value for property <code>groupHeaderLevel</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setGroupHeaderLevel
 * @function
 */


/**
 * Getter for property <code>showGroupHeader</code>.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showGroupHeader</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getShowGroupHeader
 * @function
 */

/**
 * Setter for property <code>showGroupHeader</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowGroupHeader  new value for property <code>showGroupHeader</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setShowGroupHeader
 * @function
 */


/**
 * Getter for property <code>visible</code>.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>visible</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getVisible
 * @function
 */

/**
 * Setter for property <code>visible</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bVisible  new value for property <code>visible</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setVisible
 * @function
 */


/**
 * Getter for property <code>sortable</code>.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>sortable</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getSortable
 * @function
 */

/**
 * Setter for property <code>sortable</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bSortable  new value for property <code>sortable</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setSortable
 * @function
 */


/**
 * Getter for property <code>showNoData</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showNoData</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getShowNoData
 * @function
 */

/**
 * Setter for property <code>showNoData</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowNoData  new value for property <code>showNoData</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setShowNoData
 * @function
 */


/**
 * Getter for property <code>noDataText</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>noDataText</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getNoDataText
 * @function
 */

/**
 * Setter for property <code>noDataText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNoDataText  new value for property <code>noDataText</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setNoDataText
 * @function
 */


/**
 * Getter for property <code>isGroupLocked</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {boolean} the value of property <code>isGroupLocked</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getIsGroupLocked
 * @function
 */

/**
 * Setter for property <code>isGroupLocked</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {boolean} bIsGroupLocked  new value for property <code>isGroupLocked</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setIsGroupLocked
 * @function
 */


/**
 * Getter for property <code>editMode</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>editMode</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getEditMode
 * @function
 */

/**
 * Setter for property <code>editMode</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bEditMode  new value for property <code>editMode</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setEditMode
 * @function
 */


/**
 * Getter for property <code>showBackground</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showBackground</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getShowBackground
 * @function
 */

/**
 * Setter for property <code>showBackground</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowBackground  new value for property <code>showBackground</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setShowBackground
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 *
 * Default value is <code>sap-icon://locked</code>
 *
 * @return {string} the value of property <code>icon</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is <code>sap-icon://locked</code> 
 *
 * @param {string} sIcon  new value for property <code>icon</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setIcon
 * @function
 */


/**
 * Getter for property <code>showIcon</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showIcon</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getShowIcon
 * @function
 */

/**
 * Setter for property <code>showIcon</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowIcon  new value for property <code>showIcon</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setShowIcon
 * @function
 */


/**
 * Getter for property <code>deluminate</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>deluminate</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getDeluminate
 * @function
 */

/**
 * Setter for property <code>deluminate</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bDeluminate  new value for property <code>deluminate</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setDeluminate
 * @function
 */


/**
 * Getter for property <code>showMobileActions</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showMobileActions</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getShowMobileActions
 * @function
 */

/**
 * Setter for property <code>showMobileActions</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowMobileActions  new value for property <code>showMobileActions</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setShowMobileActions
 * @function
 */


/**
 * Getter for property <code>enableHelp</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>enableHelp</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getEnableHelp
 * @function
 */

/**
 * Setter for property <code>enableHelp</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bEnableHelp  new value for property <code>enableHelp</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setEnableHelp
 * @function
 */


/**
 * Getter for property <code>tileActionModeActive</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>tileActionModeActive</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getTileActionModeActive
 * @function
 */

/**
 * Setter for property <code>tileActionModeActive</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bTileActionModeActive  new value for property <code>tileActionModeActive</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setTileActionModeActive
 * @function
 */


/**
 * Getter for property <code>ieHtml5DnD</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>ieHtml5DnD</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getIeHtml5DnD
 * @function
 */

/**
 * Setter for property <code>ieHtml5DnD</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bIeHtml5DnD  new value for property <code>ieHtml5DnD</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setIeHtml5DnD
 * @function
 */


/**
 * Getter for property <code>showDragIndicator</code>.
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>showDragIndicator</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getShowDragIndicator
 * @function
 */

/**
 * Setter for property <code>showDragIndicator</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bShowDragIndicator  new value for property <code>showDragIndicator</code>
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#setShowDragIndicator
 * @function
 */


/**
 * Getter for aggregation <code>tiles</code>.<br/>
 * 
 * @return {sap.ushell.ui.launchpad.Tile[]}
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getTiles
 * @function
 */


/**
 * Inserts a tile into the aggregation named <code>tiles</code>.
 *
 * @param {sap.ushell.ui.launchpad.Tile}
 *          oTile the tile to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the tile should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the tile is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the tile is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#insertTile
 * @function
 */

/**
 * Adds some tile <code>oTile</code> 
 * to the aggregation named <code>tiles</code>.
 *
 * @param {sap.ushell.ui.launchpad.Tile}
 *            oTile the tile to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#addTile
 * @function
 */

/**
 * Removes an tile from the aggregation named <code>tiles</code>.
 *
 * @param {int | string | sap.ushell.ui.launchpad.Tile} vTile the tile to remove or its index or id
 * @return {sap.ushell.ui.launchpad.Tile} the removed tile or null
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#removeTile
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>tiles</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ushell.ui.launchpad.Tile[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#removeAllTiles
 * @function
 */

/**
 * Checks for the provided <code>sap.ushell.ui.launchpad.Tile</code> in the aggregation named <code>tiles</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ushell.ui.launchpad.Tile}
 *            oTile the tile whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#indexOfTile
 * @function
 */
	

/**
 * Destroys all the tiles in the aggregation 
 * named <code>tiles</code>.
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#destroyTiles
 * @function
 */


/**
 * Getter for aggregation <code>links</code>.<br/>
 * 
 * @return {sap.ushell.ui.launchpad.LinkTileWrapper[]}
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getLinks
 * @function
 */


/**
 * Inserts a link into the aggregation named <code>links</code>.
 *
 * @param {sap.ushell.ui.launchpad.LinkTileWrapper}
 *          oLink the link to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the link should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the link is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the link is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#insertLink
 * @function
 */

/**
 * Adds some link <code>oLink</code> 
 * to the aggregation named <code>links</code>.
 *
 * @param {sap.ushell.ui.launchpad.LinkTileWrapper}
 *            oLink the link to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#addLink
 * @function
 */

/**
 * Removes an link from the aggregation named <code>links</code>.
 *
 * @param {int | string | sap.ushell.ui.launchpad.LinkTileWrapper} vLink the link to remove or its index or id
 * @return {sap.ushell.ui.launchpad.LinkTileWrapper} the removed link or null
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#removeLink
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>links</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ushell.ui.launchpad.LinkTileWrapper[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#removeAllLinks
 * @function
 */

/**
 * Checks for the provided <code>sap.ushell.ui.launchpad.LinkTileWrapper</code> in the aggregation named <code>links</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ushell.ui.launchpad.LinkTileWrapper}
 *            oLink the link whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#indexOfLink
 * @function
 */
	

/**
 * Destroys all the links in the aggregation 
 * named <code>links</code>.
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#destroyLinks
 * @function
 */


/**
 * Getter for aggregation <code>beforeContent</code>.<br/>
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getBeforeContent
 * @function
 */


/**
 * Inserts a beforeContent into the aggregation named <code>beforeContent</code>.
 *
 * @param {sap.ui.core.Control}
 *          oBeforeContent the beforeContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the beforeContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the beforeContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the beforeContent is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#insertBeforeContent
 * @function
 */

/**
 * Adds some beforeContent <code>oBeforeContent</code> 
 * to the aggregation named <code>beforeContent</code>.
 *
 * @param {sap.ui.core.Control}
 *            oBeforeContent the beforeContent to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#addBeforeContent
 * @function
 */

/**
 * Removes an beforeContent from the aggregation named <code>beforeContent</code>.
 *
 * @param {int | string | sap.ui.core.Control} vBeforeContent the beforeContent to remove or its index or id
 * @return {sap.ui.core.Control} the removed beforeContent or null
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#removeBeforeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>beforeContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#removeAllBeforeContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>beforeContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oBeforeContent the beforeContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#indexOfBeforeContent
 * @function
 */
	

/**
 * Destroys all the beforeContent in the aggregation 
 * named <code>beforeContent</code>.
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#destroyBeforeContent
 * @function
 */


/**
 * Getter for aggregation <code>afterContent</code>.<br/>
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getAfterContent
 * @function
 */


/**
 * Inserts a afterContent into the aggregation named <code>afterContent</code>.
 *
 * @param {sap.ui.core.Control}
 *          oAfterContent the afterContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the afterContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the afterContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the afterContent is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#insertAfterContent
 * @function
 */

/**
 * Adds some afterContent <code>oAfterContent</code> 
 * to the aggregation named <code>afterContent</code>.
 *
 * @param {sap.ui.core.Control}
 *            oAfterContent the afterContent to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#addAfterContent
 * @function
 */

/**
 * Removes an afterContent from the aggregation named <code>afterContent</code>.
 *
 * @param {int | string | sap.ui.core.Control} vAfterContent the afterContent to remove or its index or id
 * @return {sap.ui.core.Control} the removed afterContent or null
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#removeAfterContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>afterContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#removeAllAfterContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>afterContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oAfterContent the afterContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#indexOfAfterContent
 * @function
 */
	

/**
 * Destroys all the afterContent in the aggregation 
 * named <code>afterContent</code>.
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#destroyAfterContent
 * @function
 */


/**
 * Getter for aggregation <code>footerContent</code>.<br/>
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getFooterContent
 * @function
 */


/**
 * Inserts a footerContent into the aggregation named <code>footerContent</code>.
 *
 * @param {sap.ui.core.Control}
 *          oFooterContent the footerContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the footerContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the footerContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the footerContent is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#insertFooterContent
 * @function
 */

/**
 * Adds some footerContent <code>oFooterContent</code> 
 * to the aggregation named <code>footerContent</code>.
 *
 * @param {sap.ui.core.Control}
 *            oFooterContent the footerContent to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#addFooterContent
 * @function
 */

/**
 * Removes an footerContent from the aggregation named <code>footerContent</code>.
 *
 * @param {int | string | sap.ui.core.Control} vFooterContent the footerContent to remove or its index or id
 * @return {sap.ui.core.Control} the removed footerContent or null
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#removeFooterContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>footerContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#removeAllFooterContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>footerContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oFooterContent the footerContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#indexOfFooterContent
 * @function
 */
	

/**
 * Destroys all the footerContent in the aggregation 
 * named <code>footerContent</code>.
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#destroyFooterContent
 * @function
 */


/**
 * Getter for aggregation <code>headerActions</code>.<br/>
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#getHeaderActions
 * @function
 */


/**
 * Inserts a headerAction into the aggregation named <code>headerActions</code>.
 *
 * @param {sap.ui.core.Control}
 *          oHeaderAction the headerAction to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the headerAction should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the headerAction is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the headerAction is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#insertHeaderAction
 * @function
 */

/**
 * Adds some headerAction <code>oHeaderAction</code> 
 * to the aggregation named <code>headerActions</code>.
 *
 * @param {sap.ui.core.Control}
 *            oHeaderAction the headerAction to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#addHeaderAction
 * @function
 */

/**
 * Removes an headerAction from the aggregation named <code>headerActions</code>.
 *
 * @param {int | string | sap.ui.core.Control} vHeaderAction the headerAction to remove or its index or id
 * @return {sap.ui.core.Control} the removed headerAction or null
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#removeHeaderAction
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>headerActions</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#removeAllHeaderActions
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>headerActions</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oHeaderAction the headerAction whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#indexOfHeaderAction
 * @function
 */
	

/**
 * Destroys all the headerActions in the aggregation 
 * named <code>headerActions</code>.
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#destroyHeaderActions
 * @function
 */


/**
 *
 * @name sap.ushell.ui.launchpad.TileContainer#afterRendering
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'afterRendering' event of this <code>sap.ushell.ui.launchpad.TileContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.TileContainer</code>.<br/> itself. 
 *  
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.TileContainer</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#attachAfterRendering
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'afterRendering' event of this <code>sap.ushell.ui.launchpad.TileContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#detachAfterRendering
 * @function
 */

/**
 * Fire event afterRendering to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.TileContainer#fireAfterRendering
 * @function
 */


/**
 * Event fired when placeholder is clicked
 *
 * @name sap.ushell.ui.launchpad.TileContainer#add
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'add' event of this <code>sap.ushell.ui.launchpad.TileContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.TileContainer</code>.<br/> itself. 
 *  
 * Event fired when placeholder is clicked
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.TileContainer</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#attachAdd
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'add' event of this <code>sap.ushell.ui.launchpad.TileContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#detachAdd
 * @function
 */

/**
 * Fire event add to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.TileContainer#fireAdd
 * @function
 */


/**
 * Event fired when title is renamed
 *
 * @name sap.ushell.ui.launchpad.TileContainer#titleChange
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'titleChange' event of this <code>sap.ushell.ui.launchpad.TileContainer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.TileContainer</code>.<br/> itself. 
 *  
 * Event fired when title is renamed
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.TileContainer</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#attachTitleChange
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'titleChange' event of this <code>sap.ushell.ui.launchpad.TileContainer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileContainer#detachTitleChange
 * @function
 */

/**
 * Fire event titleChange to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.TileContainer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.TileContainer#fireTitleChange
 * @function
 */

// Start of sap/ushell/ui/launchpad/TileContainer.js
/*global jQuery, sap*/
/**
 * @name sap.ushell.ui.launchpad.TileContainer
 *
 * @private
 */

(function () {
    "use strict";
    

    sap.ushell.ui.launchpad.TileContainer.prototype.init = function () {
        jQuery.sap.require("sap.ushell.ui.launchpad.PlusTile");

        this._sDefaultValue = sap.ushell.resources.i18n.getText("new_group_name");
        this._sOldTitle = "";

        this.oIcon = new sap.ui.core.Icon({src: this.getIcon()});
        this.oIcon.addStyleClass('sapUshellContainerIcon');

        this.oPlusTile = new sap.ushell.ui.launchpad.PlusTile({
            groupId : this.getGroupId(),
            press : [ this.fireAdd, this ]
        });
        this.oPlusTile.setParent(this);
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.exit = function () {
        if (this.oPlusTile) {
            this.oPlusTile.destroy();
        }
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.onAfterRendering = function () {
        var that = this,
            jqTileContainer;

        if (this.getEnableHelp()) {
            this.oPlusTile.addStyleClass("help-id-plusTile");//xRay help ID
        }

        this.handleNoItemsToDisplayMessage();
        var bEnableRenameLockedGroup = this.getModel() && this.getModel().getProperty("/enableRenameLockedGroup") || false;
        jQuery("#" + this.getId() + "-title").find(this.getHeaderLevel()).click(function () {
            var bEditMode = bEnableRenameLockedGroup || !that.getIsGroupLocked() && !that.getDefaultGroup() && that.getTileActionModeActive();
            that.setEditMode(bEditMode);
        });
        // detecting it is an IE browser with touch screen
        if ((document.documentMode) && (navigator.maxTouchPoints  || navigator.msMaxTouchPoints)) {
            jqTileContainer = jQuery(this.getDomRef());
            // cancel context menu and touch square in IE10 and above
            jqTileContainer.on("MSHoldVisual contextmenu", ".sapUshellTile", function (e) {
                e.preventDefault();
            });
        }
        this.fireAfterRendering();
    };

    // Improve handling of aggregation updates
    sap.ushell.ui.launchpad.TileContainer.prototype.updateAggregation = sap.ushell.override.updateAggregation;
    sap.ushell.ui.launchpad.TileContainer.prototype.updateTiles = function (sReason) {
        var sName = "tiles";
        if (this.isTreeBinding(sName)) {
            // no idea how to handle -> delegate to parent
            sap.ui.base.ManagedObject.prototype.updateAggregation.apply(this, arguments);
        } else {
            jQuery.sap.log.debug("Updating TileContainer. Reason: ", sReason);
            switch (sReason) {
            case "filter":
                try {
                    this.filterTiles(); // may fail if filter broadens after non-filter update
                } catch (ex) {
                    this.updateAggregation(sName);
                }
                break;
            default:
                this.updateAggregation(sName);
            }
        }
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.handleNoItemsToDisplayMessage = function () {
        var tilesBinding = this.getBinding('tiles'),
            isVisibleTiles = tilesBinding && tilesBinding.getContexts().length;
        if (isVisibleTiles) {
            this.$().find(".sapUshellNoFilteredItems").hide();
        } else {
            if (this.getShowNoData()) {
                if (this.getNoDataText()) {
                    this.setNoDataText(this.getNoDataText());
                } else {
                    this.setNoDataText(sap.ushell.resources.i18n.getText("noFilteredItems"));
                }
                this.$().find(".sapUshellNoFilteredItems").show();
            }
        }
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.createMissingElementsInOnScreenElements = function (indexingMaps, elementsToDisplay, indexSearchMissingFilteredElem, bGrouped, aSorters, oBindingInfo, fnaddNewItem, fnAddTileGroup) {
        var path,
            oNewGroup = null,
            sGroup = null,
            j = indexSearchMissingFilteredElem,
            bShowGroupHeader = this.getShowGroupHeader(),
            elementsToDisplayLength = elementsToDisplay.length,
            oGroupHeader;

        for (j = indexSearchMissingFilteredElem; j < elementsToDisplayLength; j++) {
            path = elementsToDisplay[j].getPath();
            //is aBindingContexts[j] not displayed
            if (!indexingMaps.onScreenPathIndexMap[path]) {
                //entry does not exist and should be displayed.
                if (bGrouped && aSorters.length > 0) {
                    oNewGroup = aSorters[0].fnGroup(elementsToDisplay[j]);
                    if (typeof oNewGroup === "string") {
                        oNewGroup = {
                            key: oNewGroup
                        };
                    }
                    if (sGroup === null && j > 0) {
                        sGroup = aSorters[0].fnGroup(elementsToDisplay[j - 1]);
                    }

                    //delete the sGroup logic, check only if not in indexingMaps.onScreenHeaders[oNewGroup.key].
                    if (oNewGroup.key !== sGroup) {
                        if (oBindingInfo.groupHeaderFactory) {
                            oGroupHeader = oBindingInfo.groupHeaderFactory(oNewGroup);
                        }

                        if (!indexingMaps.onScreenHeaders[oNewGroup.key]) {
                            fnAddTileGroup(oNewGroup, oGroupHeader);
                            indexingMaps.onScreenHeaders[oNewGroup.key] = {aItemsRefrenceIndex: this.getTiles().length - 1, isVisible: bShowGroupHeader};
                        }
                        sGroup = oNewGroup.key;
                    }
                }
                fnaddNewItem(elementsToDisplay[j]);
                indexingMaps.onScreenPathIndexMap[path] = {aItemsRefrenceIndex: this.getTiles().length - 1, isVisible: true};
            } else {
                //order problem needs to refresh.
                throw true;
            }
        }
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.addNewItem = function (elementToDisplay) {
        var sName = "tiles",
            oAggregationInfo = this.getMetadata().getJSONKeys()[sName],
            oBindingInfo = this.mBindingInfos[sName],
            fnFactory = oBindingInfo.factory,
            addNewItem = jQuery.proxy(function (oContext) {
                var sId = this.getId() + "-" + jQuery.sap.uid(),
                    oClone = fnFactory(sId, oContext);
                oClone.setBindingContext(oContext, oBindingInfo.model);
                this[oAggregationInfo._sMutator](oClone);
            }, this);

        addNewItem(elementToDisplay);
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.markVisibleOnScreenElements = function (elementsToDisplay, indexingMaps) {
        var indexSearchMissingFilteredElem = 0,
            path,
            elementsToDisplayLength = elementsToDisplay.length;

        for (indexSearchMissingFilteredElem = 0; indexSearchMissingFilteredElem < elementsToDisplayLength; indexSearchMissingFilteredElem++) {
            path = elementsToDisplay[indexSearchMissingFilteredElem].getPath();
            //is aBindingContexts[j] not displayed
            if (indexingMaps.onScreenPathIndexMap[path]) {
                //entry exists and should be display.
                indexingMaps.onScreenPathIndexMap[path].isVisible = true;
            } else {
                return indexSearchMissingFilteredElem;
            }
        }

        return indexSearchMissingFilteredElem;
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.indexOnScreenElements = function (onScreenItems) {
        var path,
            indexOnScreen,
            indexingMaps = {onScreenHeaders: {}, onScreenPathIndexMap: {}},
            onScreenItemsLength = onScreenItems.length,
            curOnScreenItem;

        for (indexOnScreen = 0; indexOnScreen < onScreenItemsLength; indexOnScreen++) {
            curOnScreenItem = onScreenItems[indexOnScreen];
            if (curOnScreenItem.getHeaderText) {
                //it is a header
                indexingMaps.onScreenHeaders[curOnScreenItem.getHeaderText()] = {aItemsRefrenceIndex: indexOnScreen, isVisible: false};
            } else if (curOnScreenItem.getBindingContext()) {
                //it is a tile
                path = curOnScreenItem.getBindingContext().getPath();
                indexingMaps.onScreenPathIndexMap[path] = {aItemsRefrenceIndex: indexOnScreen, isVisible: false};
            }
        }

        return indexingMaps;
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.showHideTilesAndHeaders = function (indexingMaps, onScreenItems) {
        var scrPathKey,
            sName = "tiles",
            bShowGroupHeader = this.getShowGroupHeader(),
            oBinding = this.mBindingInfos[sName].binding,
            groupHeader,
            realItem,
            entry;

        for (scrPathKey in indexingMaps.onScreenPathIndexMap) {
            if (indexingMaps.onScreenPathIndexMap.hasOwnProperty(scrPathKey)) {
                entry = indexingMaps.onScreenPathIndexMap[scrPathKey];
                realItem = onScreenItems[entry.aItemsRefrenceIndex];
                realItem.setVisible(entry.isVisible);

                //set the corresponding header to be displayed.
                if (entry.isVisible) {
                    groupHeader = oBinding.aSorters[0].fnGroup(realItem.getBindingContext());
                    indexingMaps.onScreenHeaders[groupHeader].isVisible = bShowGroupHeader;
                }
            }
        }

        //show headers...
        for (scrPathKey in indexingMaps.onScreenHeaders) {
            if (indexingMaps.onScreenHeaders.hasOwnProperty(scrPathKey)) {
                entry = indexingMaps.onScreenHeaders[scrPathKey];
                onScreenItems[entry.aItemsRefrenceIndex].setVisible(entry.isVisible);
            }
        }
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.filterTiles = function () {
        var sName = "tiles",
            oBindingInfo = this.mBindingInfos[sName],
            oBinding = this.mBindingInfos[sName].binding,
            aBindingContexts = oBinding.getContexts(),
            aItems = this.getTiles(),
            indexSearchMissingFilteredElem,
            indexingMaps,
            lastDomPath,
            firstFltrPath,
            spLastOnScreen,
            spFirstOnFilter,
            indexFirstOnFilter,
            indexLastOnScreen;

        //index the on screen elements according to the path
        indexingMaps = this.indexOnScreenElements(aItems);

        //search for the missing filtered elements
        indexSearchMissingFilteredElem = this.markVisibleOnScreenElements(aBindingContexts, indexingMaps);

        //validate data is still can be added to the screen object and still the ordering will be ok else call refresh.
        if (aBindingContexts[indexSearchMissingFilteredElem] && this.getTiles().length > 0) {
            lastDomPath = this.getTiles()[this.getTiles().length - 1].getBindingContext().getPath();
            firstFltrPath = aBindingContexts[indexSearchMissingFilteredElem].getPath();
            spLastOnScreen = lastDomPath.split('/');
            spFirstOnFilter = firstFltrPath.split('/');
            indexLastOnScreen = spLastOnScreen[spLastOnScreen.length - 1];
            indexFirstOnFilter = spFirstOnFilter[spFirstOnFilter.length - 1];
            if (parseInt(indexLastOnScreen, 10) > parseInt(indexFirstOnFilter, 10)) {
                throw true;
            }
        }

        //add the missing elements and check if there is a need for header.
        this.createMissingElementsInOnScreenElements(indexingMaps, aBindingContexts, indexSearchMissingFilteredElem, oBinding.isGrouped(), oBinding.aSorters, oBindingInfo, this.addNewItem.bind(this), this.addTileGroup.bind(this));

        aItems = this.getTiles();

        //show/ hide all the tiles ...
        this.showHideTilesAndHeaders(indexingMaps, aItems);
        this.handleNoItemsToDisplayMessage();
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.addTileGroup = function (oGroup, oHeader) {
        this.addAggregation("tiles", oHeader || new sap.ushell.ui.launchpad.HeaderTile({
            headerText: oGroup.text || oGroup.key,
            headerLevel : oGroup.headerLevel || this.getGroupHeaderLevel(),
            visible : this.getShowGroupHeader()
        }).addStyleClass("sapUshellTileContainerHdr"));
    };

    // Override setters
    sap.ushell.ui.launchpad.TileContainer.prototype.setNoDataText = function (oNoDataText) {
        this.setProperty("noDataText", oNoDataText, true); // suppress rerendering
        if (this.getShowNoData()) {
            this.$().find(".sapUshellNoFilteredItems").text(oNoDataText);
        }
        return this;
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.setGroupId = function (v) {
        this.setProperty("groupId", v, true);        // set property, but suppress rerendering
        if (this.oPlusTile) {
            this.oPlusTile.setGroupId(v);
        }
        return this;
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.setHeaderText = function (sHeaderText) {
        this.setProperty("headerText", sHeaderText, true);        // set property, but suppress rerendering
        this.$().find(".sapUshellContainerTitle").text(sHeaderText);
        return this;
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.setVisible = function (bVisible) {
        this.setProperty("visible", bVisible, true);  // suppress rerendering
        this.toggleStyleClass("sapUshellHidden", !bVisible);
        return this;
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.setShowMobileActions = function (bShowMobileActions) {
        var bSupressRerendering = true;

        if (this.oHeaderButton) {
            this.oHeaderButton.setVisible(bShowMobileActions);
        } else if (bShowMobileActions) {
            bSupressRerendering = false;
        }
        this.setProperty('showMobileActions', bShowMobileActions, bSupressRerendering);
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.setShowIcon = function (bShowIcon) {
        this.setProperty('showIcon', bShowIcon, true);  // suppress rerendering
        jQuery('#' + this.getId()).find('.' + 'sapUshellContainerIcon').toggleClass('sapUshellContainerIconHidden', !bShowIcon);
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.setDeluminate = function (bDeluminate) {
        this.setProperty('deluminate', bDeluminate, true);  // suppress rerendering
        this.toggleStyleClass('sapUshellDisableLockedGroupDuringDrag', bDeluminate);
        return this;
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.groupHasVisibleTiles = function () {
        var sPath = '',
            tiles = this.getTiles(),
            links = this.getLinks();
        if (this.getBindingContext()) {
            sPath = this.getBindingContext().sPath;
            tiles = this.getModel().getProperty(sPath).tiles;
            links = this.getModel().getProperty(sPath).links;
        }
        return sap.ushell.utils.groupHasVisibleTiles(tiles, links);
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.getInnerContainerDomRef = function () {
        var containerDOM = this.getDomRef(),
            innnerContainer;
        if (!containerDOM) {
            return null;
        }
        innnerContainer = jQuery(containerDOM).find('.sapUshellTilesContainer-sortable');
        return innnerContainer[0];
    };

    sap.ushell.ui.launchpad.TileContainer.prototype.setEditMode = function (bValue) {
        this.setProperty('editMode', bValue, false);
        if (bValue) {
            this.addStyleClass('sapUshellEditing');
            this._startEdit();
        } else {
            this.removeStyleClass('sapUshellEditing');
        }
    };

    sap.ushell.ui.launchpad.TileContainer.prototype._startEdit = function () {
        // create Input for header text editing if not exists
        if (this.getModel() && !this.getModel().getProperty("/editTitle")) {
            this.getModel().setProperty("/editTitle", true, false);
        }
        if (!this.oEditInputField) {
            jQuery.sap.require("sap.m.Input");
            var that = this;
            this.oEditInputField = new sap.m.Input({
                placeholder: this._sDefaultValue,
                value: this.getHeaderText()
            }).addStyleClass('sapUshellTileContainerTitleInput');

            this.oEditInputField.addEventDelegate({
                onfocusout: function (oEvent) {
                    // var oTileContainerTitle = oEvent.srcControl,
                    //     jqGroupTitle = jQuery(oTileContainerTitle.getDomRef()).prev();
                    that._stopEdit();
                    jQuery.proxy(that.setEditMode, that, false)();
                },
                onsapenter: function (oEvent) {
                    that._stopEdit();
                    jQuery.proxy(that.setEditMode, that, false)();
                    setTimeout(function () {
                        sap.ushell.renderers.fiori2.AccessKeysHandler.setTabIndexOnTileContainerHeader(jQuery(that.getDomRef()));
                        var oTileContainerTitle = oEvent.srcControl,
                            jqGroupTitle = jQuery(oTileContainerTitle.getDomRef()).prev();

                        jqGroupTitle.focus();
                    }, 0);
                }
            });
        }

        this._sOldTitle = this._sDefaultValue;
        this.oEditInputField.setValue(this.getHeaderText());
        var that = this;
        //Text Selection & focus on input field
        setTimeout(function () {
            if (sap.ui.Device.system.phone) {
                var oEventBus = sap.ui.getCore().getEventBus();
                oEventBus.publish("launchpad", "scrollToGroup", {
                    group : that,
                    groupChanged : false,
                    focus : false
                });
            }

            jQuery(that.oEditInputField.getDomRef()).find('input').focus();
            that.oEditInputField.selectText(0, that.oEditInputField.getValue().length);
        }, 100);
    };

    sap.ushell.ui.launchpad.TileContainer.prototype._stopEdit = function () {

        var sCurrentTitle = this.getHeaderText();
        var sNewTitle = this.oEditInputField.getValue(),
            bHasChanged;
        sNewTitle = sNewTitle.trim() || this._sDefaultValue;
        bHasChanged = sNewTitle !== sCurrentTitle;

        if (this.getModel() && this.getModel().getProperty("/editTitle")) {
            this.getModel().setProperty("/editTitle", false, false);
        }

        if (!this._sOldTitle) {

            this._sOldTitle = sCurrentTitle;
            this.setHeaderText(sCurrentTitle);

        } else if (bHasChanged) {
            this.fireTitleChange({
                newTitle: sNewTitle
            });
            this.setHeaderText(sNewTitle);
        }
    };


    sap.ushell.ui.launchpad.TileContainer.prototype.exit = function () {
        if (this.oHeaderButton) {
            this.oHeaderButton.destroy();
        }
        if (this.oActionSheet) {
            this.oActionSheet.destroy();
        }
        //Call the parent sap.m.Button exit method
        if (sap.ui.core.Control.prototype.exit) {
            sap.ui.core.Control.prototype.exit.apply(this, arguments);
        }
    };

}());

}; // end of sap/ushell/ui/launchpad/TileContainer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.TileContainerRenderer') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/*global jQuery, sap*/

(function () {
    "use strict";
    
    jQuery.sap.declare("sap.ushell.ui.launchpad.TileContainerRenderer");

    /**
     * @class TileContainer renderer.
     * @static
     *
     * @private
     */
    sap.ushell.ui.launchpad.TileContainerRenderer = {};

    /**
     * Renders the HTML for the given control, using the provided
     * {@link sap.ui.core.RenderManager}.
     *
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render
     *            output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be
     *            rendered
     */
    sap.ushell.ui.launchpad.TileContainerRenderer.render = function (oRm, oControl) {
        var aTiles = oControl.getTiles(),
            aHeaderActions = oControl.getHeaderActions(),
            aBeforeContent = oControl.getBeforeContent(),
            aAfterContent = oControl.getAfterContent(),
            aFootItems = oControl.getFooterContent() || [],
            // bHideTileContainer = !oControl.getVisible(),
            bVisibleTileExists = false,
            containerHeight,
            aLinks = oControl.getLinks();

        //WRAPPER start
        oRm.write("<div");
        oRm.writeControlData(oControl);
        oRm.addClass("sapUshellTileContainer");
        oRm.writeClasses();
        oRm.writeAccessibilityState(undefined, {role: "list"});

        oRm.write(">");

        //BEFORE CONTENT start
        if (aBeforeContent.length) {
            oRm.write("<div");
            oRm.addClass("sapUshellTileContainerBeforeContent");
            oRm.writeClasses();
            oRm.write(">");
            jQuery.each(aBeforeContent, function () {
                oRm.renderControl(this);
            });
            oRm.write("</div>");
        }
        //BEFORE CONTENT end

        //CONTENT start
        oRm.write("<div");
        oRm.addClass("sapUshellTileContainerContent");
        if (oControl.getIsGroupLocked()) {
            oRm.addClass("sapUshellTileContainerLocked");
        }
        if (oControl.getDefaultGroup()) {
            oRm.addClass("sapUshellTileContainerDefault");
        }
        if (oControl.getShowBackground()) {
            oRm.addClass("sapUshellTileContainerEditMode");
        }
        oRm.writeClasses();
        oRm.writeAttribute("tabindex", "-1");
        oRm.write(">");
        if (oControl.getShowDragIndicator()) {
            oRm.write("<div");
            oRm.addClass("sapUshellCircleBase");
            oRm.writeClasses();
            oRm.write(">");
            oRm.write("<div");
            oRm.addClass("sapUshellCircle");
            oRm.writeClasses();
            oRm.write(">");
            oRm.write("</div>");
            oRm.write("<div");
            oRm.addClass("sapUshellCircle");
            oRm.writeClasses();
            oRm.write(">");
            oRm.write("</div>");
            oRm.write("<div");
            oRm.addClass("sapUshellCircle");
            oRm.writeClasses();
            oRm.write(">");
            oRm.write("</div>");
            oRm.write("<div");
            oRm.addClass("sapUshellCircle");
            oRm.writeClasses();
            oRm.write(">");
            oRm.write("</div>");
            oRm.write("</div>");
        }

        if (oControl.getShowHeader()) {
            // Title
            oRm.write("<div");
            oRm.addClass("sapUshellTileContainerHeader");
            oRm.writeClasses();

            if (oControl.getIeHtml5DnD() && !oControl.getIsGroupLocked() && !oControl.getDefaultGroup() && oControl.getTileActionModeActive()) {
                oRm.writeAttribute("draggable", "true");
            }

            oRm.writeAccessibilityState(oControl, {label : sap.ushell.resources.i18n.getText("tileContainerHeader")});
            oRm.write(">");
            oRm.write("<div");
            oRm.writeAttribute("id", oControl.getId() + "-title");
            oRm.write(">");
            oRm.write("<");
            oRm.write(oControl.getHeaderLevel().toLowerCase());
            oRm.addClass('sapUshellContainerTitle');
            oRm.addClass("sapUiStrongBackgroundTextColor");
            oRm.writeClasses();

            oRm.writeAttributeEscaped("title", oControl.getHeaderText());
            oRm.writeAccessibilityState(oControl, {label : sap.ushell.resources.i18n.getText("tileContainerTitle") + oControl.getHeaderText()});
            oRm.write(">");
            oRm.writeEscaped(oControl.getHeaderText());
            oRm.write("</");
            oRm.write(oControl.getHeaderLevel().toLowerCase());
            oRm.write(">");
            if (oControl.getShowIcon()) {
                oControl.oIcon.removeStyleClass('sapUshellContainerIconHidden');
            } else {
                oControl.oIcon.addStyleClass('sapUshellContainerIconHidden');
            }
            oRm.renderControl(oControl.oIcon);
            oRm.renderControl(oControl.oEditInputField);
            //Header Actions
            //Header Action Start
            oRm.write("<div");
            oRm.addClass('sapUshellContainerHeaderActions');
            oRm.writeClasses();
            oRm.write(">");

            jQuery.each(aHeaderActions, function () {
                oRm.renderControl(this);
            });
            //Header Action End
            oRm.write("</div>");

            oRm.write("</div>");
            // Title END


            oRm.write("</div>");

        }

        //SORTABLE start
        oRm.write("<div");
        containerHeight = oControl.data('containerHeight');
        if (containerHeight) {
            oRm.writeAttribute("style", 'height:' + containerHeight);
        }
        oRm.addClass('sapUshellTilesContainer-sortable');
        oRm.addClass('sapUshellInner');
        oRm.writeClasses();
        oRm.write(">");

        // Tiles rendering, and checking if there is at lest one visible Tile
        jQuery.each(aTiles, function () {
            if (this.getVisible()) {
                bVisibleTileExists = true;
            }
            if (this.getVisible) {
                oRm.renderControl(this);
            }
        });
        // If no tiles in group or default group
        if (oControl.getShowPlaceholder()) {
            oRm.renderControl(oControl.oPlusTile);
        }

        // hook method to render no data
        if (oControl.getShowNoData()) {
            this.renderNoData(oRm, oControl, !aTiles.length || !bVisibleTileExists);
        }

        //SORTABLE end
        oRm.write("</div>");

        //Links rendering
        if (aLinks.length > 0) {
            if (oControl.getShowBackground() && !(oControl.getIsGroupLocked() && aTiles.length === 0)) {
                //Links Separator start.
                oRm.write("<div");
                oRm.addClass('sapUshellTilesContainerSeparator');
                oRm.writeClasses();
                oRm.write(">");
                //Links Separator end.
                oRm.write("</div>");
            }
            oRm.write("<div");
            oRm.addClass('sapUshellLinksContainer');
            oRm.writeClasses();
            oRm.write(">");

            jQuery.each(aLinks, function () {
                oRm.renderControl(this);
            });

            oRm.write("</div>");
        }

        // FOOTER start
        if (aFootItems.length > 0) {
            oRm.write("<footer");
            oRm.addClass('sapUshellTilesContainerFtr');
            oRm.writeClasses();
            oRm.write(">");
            jQuery.each(aFootItems, function () {
                oRm.renderControl(this);
            });
            oRm.write("</footer>");
        }
        // FOOTER end

        //CONTENT end
        oRm.write("</div>");

        //AFTER CONTENT start
        if (aAfterContent.length) {
            oRm.write("<div");
            oRm.addClass("sapUshellTileContainerAfterContent");
            oRm.writeClasses();
            oRm.write(">");
            jQuery.each(aAfterContent, function () {
                oRm.renderControl(this);
            });
            oRm.write("</div>");
        }
        //AFTER CONTENT end

        //WRAPPER end
        oRm.write("</div>");
    };

    // Rendering a message in case no Tiles are visible after applying the user filter
    sap.ushell.ui.launchpad.TileContainerRenderer.renderNoData = function (oRm, oControl, displayData) {
        oRm.write("<div id='" + oControl.getId() + "-listNoData' class='sapUshellNoFilteredItems sapUiStrongBackgroundTextColor'>");
        if (displayData) {
            if (oControl.getNoDataText()) {
                oRm.writeEscaped(oControl.getNoDataText());
            } else {
                oRm.writeEscaped(oControl.getNoDataText(sap.ushell.resources.i18n.getText("noFilteredItems")));
            }
        } else {
            oRm.writeEscaped("");
        }
        oRm.write("</div>");
    };

}());

}; // end of sap/ushell/ui/launchpad/TileContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.TileRenderer') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/*global jQuery, sap*/

(function () {
    "use strict";
    
    jQuery.sap.declare("sap.ushell.ui.launchpad.TileRenderer");

    /**
     * @class Tile renderer.
     * @static
     *
     * @private
     */
    sap.ushell.ui.launchpad.TileRenderer = {};
    // var translationBundle = sap.ushell.resources.i18n;

    /**
     * Renders the HTML for the given control, using the provided
     * {@link sap.ui.core.RenderManager}.
     *
     * @param {sap.ui.core.RenderManager}
     *            oRm the RenderManager that can be used for writing to the render
     *            output buffer
     * @param {sap.ui.core.Control}
     *            oControl an object representation of the control that should be
     *            rendered
     */
    sap.ushell.ui.launchpad.TileRenderer.render = function (oRm, oControl) {
        var oTileView = null, oModel = oControl.getModel(),
            sTileViewId;
        try {
            oTileView = oControl.getTileViews()[0];
        } catch (ex) {
            jQuery.sap.log.warning("Failed to load tile view: ", ex.message);
            oTileView = new sap.m.Text({ text: "Failed to load. "});
        }
        sTileViewId = oTileView && oTileView.getId() ? oTileView.getId() : '';
        oRm.write("<div");

        // if xRay is enabled
        if (oModel && oModel.getProperty("/enableHelp")) {
            // currently only the Tile (and the Tile's footer) has a data attribute in teh xRay integration
            // (as using this value as a class value instead as done in all of the static elements causes parsing errors in the xRay hotspot definition flow)
            oRm.writeAttribute("data-tileCatalogId", oControl.getTileCatalogId());// xRay support
        }
        oRm.writeControlData(oControl);
        oRm.addClass("sapUshellTile");
        if (oControl.getFootItems() && oControl.getFootItems().length > 0) {
            oRm.addClass("sapUshellTileFooter");
        }
        if (oControl.getLong()) {
            oRm.addClass("sapUshellLong");
        }
        if (oControl.getTall()) {
            oRm.addClass("sapUshellTall");
        }
        if (!oControl.getVisible()) {
            oRm.addClass("sapUshellHidden");
        }
        if (oControl.getIsLocked()){
            oRm.addClass("sapUshellLockedTile");
        }
        oRm.writeClasses();
        oRm.writeAccessibilityState(undefined, {role: "list item"});
        if (oControl.getIeHtml5DnD()) {
            oRm.writeAttribute("draggable", "true");
        }
        oRm.writeAttributeEscaped("tabindex", "-1");
        var layoutPosition = oControl.data('layoutPosition');
        if (layoutPosition) {
            var stylePosition = '-webkit-transform:' + layoutPosition.translate3D + ';-ms-transform:' + layoutPosition.translate2D + ';transform:' + layoutPosition.translate3D;
            oRm.writeAttribute("style", stylePosition);
        }
        //oRm.writeAccessibilityState(oControl, {role : 'link', label : translationBundle.getText("TileDetails_lable")});
        oRm.writeAttributeEscaped("aria-flowto", sTileViewId);
        oRm.write(">");

        // Add the ActioMode cover DIV to the tile
        oRm.write("<div");
        oRm.addClass("sapUshellTileActionLayerDiv");
        oRm.writeClasses();
        oRm.write(">");
        oRm.write("</div>");

        // Tile Content
        oRm.addClass("sapUshellTileInner");
        // action mode is true
        if (oControl.getProperty('tileActionModeActive')) {
            oRm.addClass("sapUshellTileActionBG");
        }


        if (this.renderTileView) {
            this.renderTileView(oRm, oTileView, oControl.getTarget());
        }

        // if Tile has the ActionsIcon (overflow icon at its top right corner) - display it
        if (oControl.getShowActionsIcon()) {
            oRm.renderControl(oControl.actionIcon);
        } else {
            // otherwise we display the Delete action icon - only if tile is not part of a locked group
            if (!oControl.getIsLocked() && oControl.getTileActionModeActive()) {
                // render the trash bin action


                // outer div - the click area for the delete action
                oRm.write("<div");
                oRm.addClass("sapUshellTileDeleteClickArea");
                oRm.writeClasses();
                oRm.write(">");

                // 2nd div - to draw the circle around the icon
                oRm.write("<div");
                oRm.addClass("sapUshellTileDeleteIconOuterClass");
                oRm.writeClasses();
                oRm.write(">");

                oRm.renderControl(oControl._initDeleteAction()); // initialize & render the tile's delete action icon

                oRm.write("</div>");// 2nd div - to draw the circle around the icon
                oRm.write("</div>"); // outer div - the click area for the delete action
            }
        }

        // Tile Footer Items
        oRm.write("<footer");

        // if xRay is enabled
        if (oModel && oModel.getProperty("/enableHelp")) {
            // currently only the Tile (and the Tile's footer) has a data attribute in teh xRay integration
            // (as using this value as a class value instead as done in all of the static elements causes parsing errors in the xRay hotspot definition flow)
            oRm.writeAttribute("data-tileCatalogId", "addRemoveTile-" + oControl.getTileCatalogId());
        }

        oRm.addClass("sapUshellTileFooterElement");
        oRm.writeClasses();
        oRm.write(">");
        jQuery.each(oControl.getFootItems(), function () {
            oRm.renderControl(this);
        });
        oRm.write("</footer>");

        // if tile is rendered in Edit-Mode (Tile Action mode)
        if (oControl.getTileActionModeActive()) {
            // add a div to render the tile's bottom overflow icon
            oRm.write("<div");
            oRm.addClass("sapUshellTileActionIconDivBottom");
            oRm.writeClasses();
            oRm.write(">");
            oRm.renderControl((new sap.ui.core.Icon({src: "sap-icon://overflow"})).addStyleClass('sapUshellTileActionIconDivBottomInner'));
            oRm.write("</div>");
        }

        oRm.write("</div>");
    };

    sap.ushell.ui.launchpad.TileRenderer.renderTileView = function (oRm, oTileView, sTarget) {
        if ((sTarget || "") !== "") {
            oRm.write("<a");
            oRm.writeClasses();
            oRm.writeAttributeEscaped("href", "#" + sTarget);
            oRm.write(">");
            oRm.renderControl(oTileView);
            oRm.write("</a>");
        } else {
            oRm.write("<div");
            oRm.writeClasses();
            oRm.writeAttribute("title", sap.ushell.resources.i18n.getText("launchTile_tooltip"));
            oRm.write(">");
            oRm.renderControl(oTileView);
            oRm.write("</div>");
        }
    };

}());

}; // end of sap/ushell/ui/launchpad/TileRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.TileState') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.TileState.
jQuery.sap.declare("sap.ushell.ui.launchpad.TileState");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ui/launchpad/TileState.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getState state} : string (default: 'Loaded')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * The tile state control that displays loading indicator, while tile view is loading and failed status in case tile view is not available.
 * @extends sap.ui.core.Control
 * @version 1.32.6
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.launchpad.TileState
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.ushell.ui.launchpad.TileState", { metadata : {

	library : "sap.ushell",
	properties : {
		"state" : {type : "string", group : "Misc", defaultValue : 'Loaded'}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.TileState with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.TileState.extend
 * @function
 */


/**
 * Getter for property <code>state</code>.
 * The load status.
 *
 * Default value is <code>Loaded</code>
 *
 * @return {string} the value of property <code>state</code>
 * @public
 * @name sap.ushell.ui.launchpad.TileState#getState
 * @function
 */

/**
 * Setter for property <code>state</code>.
 *
 * Default value is <code>Loaded</code> 
 *
 * @param {string} sState  new value for property <code>state</code>
 * @return {sap.ushell.ui.launchpad.TileState} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.TileState#setState
 * @function
 */

// Start of sap/ushell/ui/launchpad/TileState.js
/*global jQuery, sap */
jQuery.sap.require('sap.m.Text'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


/**
 * @name sap.ushell.ui.launchpad.TileState
 *
 * @private
 */

sap.ushell.ui.launchpad.TileState.prototype.init = function () {
    this._rb = sap.ushell.resources.i18n;

    this._sFailedToLoad = this._rb.getText("cannotLoadTile");

    this._oWarningIcon = new sap.ui.core.Icon(this.getId() + "-warn-icon", {
        src : "sap-icon://notification",
        size : "1.37rem"
    });

    this._oWarningIcon.addStyleClass("sapSuiteGTFtrFldIcnMrk");
};

sap.ushell.ui.launchpad.TileState.prototype.exit = function () {
    this._oWarningIcon.destroy();
};

sap.ushell.ui.launchpad.TileState.prototype.setState = function(oState, isSuppressed) {
    this.setProperty("state", oState, isSuppressed);
    return this;
};

}; // end of sap/ushell/ui/launchpad/TileState.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.TileStateRenderer') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */
/*global jQuery, sap */
jQuery.sap.declare("sap.ushell.ui.launchpad.TileStateRenderer");

/**
 * @class TileState renderer.
 * @static
 */
sap.ushell.ui.launchpad.TileStateRenderer = {
};

/**
 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
 * 
 * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the render output buffer
 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
 */
sap.ushell.ui.launchpad.TileStateRenderer.render = function (rm, oControl) {
    rm.write("<div");

    rm.writeControlData(oControl);

    rm.addClass("sapUshellGT");

    rm.write(">");

    var sState = oControl.getState();
    rm.write("<div");
    rm.addClass("sapUshellOverlay");
    rm.writeClasses();
    rm.writeAttribute("id", oControl.getId() + "-overlay");
    if (sState === "Failed") {
        rm.writeAttribute("title", oControl._sFailedToLoad);
    }
    rm.write(">");
    switch (sState) {
    case "Loading":
        var oBusy = new sap.ui.core.HTML({
            content: "<div class='sapUshellTileStateLoading'><div>"
        });
        oBusy.setBusyIndicatorDelay(0);
        oBusy.setBusy(true);
        rm.renderControl(oBusy);
        break;

    case "Failed":
        rm.write("<div");
        rm.writeAttribute("id", oControl.getId() + "-failed-ftr");
        rm.addClass("sapUshellTileStateFtrFld");
        rm.writeClasses();
        rm.write(">");
        rm.write("<div");
        rm.writeAttribute("id", oControl.getId() + "-failed-icon");
        rm.addClass("sapUshellTileStateFtrFldIcn");
        rm.writeClasses();
        rm.write(">");
        rm.renderControl(oControl._oWarningIcon);
        rm.write("</div>");

        rm.write("<div");
        rm.writeAttribute("id", oControl.getId() + "-failed-text");
        rm.addClass("sapUshellTileStateFtrFldTxt");
        rm.writeClasses();
        rm.write(">");
        rm.writeEscaped(oControl._sFailedToLoad);
        rm.write("</div>");

        rm.write("</div>");
        break;
    default:
    }
    rm.write("</div>");
    rm.write("</div>");
};

}; // end of sap/ushell/ui/launchpad/TileStateRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.shell.ShellFloatingAction') ) {
/*global jQuery, sap*/

/**
 * @name sap.ushell.ui.shell.ShellFloatingAction
 *
 * @private
 */
jQuery.sap.declare('sap.ushell.ui.shell.ShellFloatingAction'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
sap.ui.define("sap/ushell/ui/shell/ShellFloatingAction",['jquery.sap.global', 'sap/m/Button', 'sap/ushell/library'],
    function (jQuery, Button) {
    "use strict";

    var ShellFloatingAction = Button.extend("sap.ushell.ui.shell.ShellFloatingAction");

    ShellFloatingAction.prototype.init = function () {
        this.addStyleClass("sapUshellShellFloatingAction");
        //call the parent sap.m.Button init method
        if (Button.prototype.init) {
            Button.prototype.init.apply(this, arguments);
        }
    };

    ShellFloatingAction.prototype.exit = function () {
        Button.prototype.exit.apply(this, arguments);
    };

    ShellFloatingAction.prototype.onAfterRendering = function () {
        if (this.data("transformY")){
            this.removeStyleClass('sapUshellShellFloatingActionTransition');
            jQuery(this.getDomRef()).css('transform', "translateY(" + this.data("transformY") + ")");
        } else {
            this.addStyleClass('sapUshellShellFloatingActionTransition');
        }
    };

});

}; // end of sap/ushell/ui/shell/ShellFloatingAction.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.shell.ShellFloatingActionRenderer') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/*global jQuery, sap*/
/**
 * @class ShellFloatingAction renderer.
 * @static
 * 
 * @private
 */
jQuery.sap.declare('sap.ushell.ui.shell.ShellFloatingActionRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained
jQuery.sap.require('sap.m.ButtonRenderer'); // unlisted dependency retained
sap.ui.define("sap/ushell/ui/shell/ShellFloatingActionRenderer",['jquery.sap.global', 'sap/ui/core/Renderer', 'sap/m/ButtonRenderer'],
    function (jQuery, Renderer, ButtonRenderer) {
        "use strict";


        /**
         * Renderer for the sap.ushell.ui.shell.ShellFloatingAction
         * @namespace
         */
        var ShellFloatingActionRenderer = Renderer.extend(ButtonRenderer);


        return ShellFloatingActionRenderer;

    }, /* bExport= */ true);

}; // end of sap/ushell/ui/shell/ShellFloatingActionRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.shell.ShellFloatingActions') ) {
/*!
 * ${copyright}
 */
/*global jQuery, sap */
jQuery.sap.declare('sap.ushell.ui.shell.ShellFloatingActions'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ushell/ui/shell/ShellFloatingActions",['jquery.sap.global', './ShellFloatingAction', 'sap/ushell/library'],
    function (jQuery, ShellFloatingAction) {
        "use strict";


        var ShellFloatingActions = sap.ui.core.Control.extend("sap.ushell.ui.shell.ShellFloatingActions", {

            metadata: {
                properties: {
                    isFooterVisible: {type: "boolean", defaultValue: false}
                },
                aggregations: {
                    floatingActions: {type: "sap.ushell.ui.shell.ShellFloatingAction", multiple: true, singularName: "floatingAction"}
                }
            },

            renderer: {
                render: function (oRm, oActionButtonManager) {
                    var aFloatingActions = oActionButtonManager.getFloatingActions();
                    oRm.write("<div");
                    oRm.writeControlData(oActionButtonManager);
                    oRm.addClass("sapUshellShellFloatingActions");
                    oRm.writeClasses();
                    oRm.write(">");
                    if (aFloatingActions.length) {
                        var oFloatingAction;

                        if (aFloatingActions.length === 1) {
                            oFloatingAction = aFloatingActions[0];
                        } else {
                            oFloatingAction = oActionButtonManager._createMultipleFloatingActionsButton(aFloatingActions);
                            jQuery.each(aFloatingActions, function () {
                                this.setVisible(false);
                                oRm.renderControl(this);
                            });
                        }
                        oRm.renderControl(oFloatingAction);
                    }
                    oRm.write("</div>");
                }
            }

        });

        ShellFloatingActions.prototype._createMultipleFloatingActionsButton = function (aFloatingActions) {
            var iFloatingActionHeight;
            var that = this;
            return new ShellFloatingAction({
                id: this.getId() + "-multipleFloatingActions",
                icon: 'sap-icon://add',
                visible: true,
                press: function () {
                    if (!this.hasStyleClass('sapUshellShellFloatingActionRotate')) {
                        this.addStyleClass('sapUshellShellFloatingActionRotate');
                        if (!iFloatingActionHeight) {
                            iFloatingActionHeight = parseInt(this.$().outerHeight(), 10) + parseInt(that.$().css('bottom'), 10);
                        }

                        aFloatingActions.forEach(function (oFloatingButton) {
                            oFloatingButton.setVisible(true);
                        });

                        setTimeout(function () {
                            aFloatingActions.forEach(function (oFloatingButton, iIndex) {
                                var itemY = iFloatingActionHeight * (iIndex + 1);
                                oFloatingButton.$().css('transform', "translateY(-" + itemY + "px)");
                                oFloatingButton.data("transformY", "-" + itemY + "px");
                            });
                        }, 0);
                    } else {
                        this.removeStyleClass('sapUshellShellFloatingActionRotate');

                        aFloatingActions.forEach(function (oFloatingButton) {
                            oFloatingButton.$().css('transform', "translateY(0)");
                        });

                        setTimeout(function () {
                            aFloatingActions.forEach(function (oFloatingButton) {
                                oFloatingButton.setVisible(false);
                                oFloatingButton.data("transformY", undefined);
                            });
                        }, 150);
                    }
                }
            });
        };

        ShellFloatingActions.prototype.addFloatingAction = function(oActionButton) {
            this.addAggregation('floatingActions', oActionButton, true);
            if (this.getDomRef()) {
                var rm = sap.ui.getCore().createRenderManager();
                rm.renderControl(oActionButton);
                rm.flush(this.getDomRef());
                rm.destroy();
            }
            return this;
        };

        ShellFloatingActions.prototype.removeFloatingAction = function(oActionButton) {
            if (typeof oActionButton === 'number') {
                oActionButton = this.getAggregation('floatingActions')[oActionButton];
            }
            this.removeAggregation('floatingActions', oActionButton, true);
            var sId = oActionButton.getId();
            jQuery('#' + sId).remove();
            return this;
        };
        return ShellFloatingActions;

    }, /* bExport= */ true);

}; // end of sap/ushell/ui/shell/ShellFloatingActions.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.shell.ShellHeadItem') ) {
/*!
 * ${copyright}
 */
/*global jQuery, sap */
// Provides control sap.ushell.ui.shell.ShellHeadItem.
jQuery.sap.declare('sap.ushell.ui.shell.ShellHeadItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
sap.ui.define("sap/ushell/ui/shell/ShellHeadItem",['jquery.sap.global', 'sap/ui/core/Element', 'sap/ui/core/IconPool', 'sap/ushell/library'],
    function (jQuery, Element, IconPool) {
        "use strict";



    /**
     * Constructor for a new ShellHeadItem.
     *
     * @param {string} [sId] id for the new control, generated automatically if no id is given
     * @param {object} [mSettings] initial settings for the new control
     *
     * @class
     * Header Action item of the Shell.
     * @extends sap.ui.core.Element
     *
     * @author SAP SE
     * @version ${version}
     *
     * @constructor
     * @private
     * @since 1.15.1
     * @alias sap.ushell.ui.shell.ShellHeadItem
     * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
     */
        var ShellHeadItem = Element.extend("sap.ushell.ui.shell.ShellHeadItem", /** @lends sap.ushell.ui.shell.ShellHeadItem.prototype */ { metadata : {

            properties : {

                /**
                 * If set to true, a divider is displayed before the item.
                 * @deprecated Since version 1.18.
                 * Dividers are not supported anymore.
                 */
                startsSection : {type : "boolean", group : "Appearance", defaultValue : false, deprecated: true},

                /**
                 * If set to true, a separator is displayed after the item.
                 * @since 1.22.5
                 */
                showSeparator : {type : "boolean", group : "Appearance", defaultValue : true},

                /**
                 * If set to true, the item gets a special design.
                 */
                selected : {type : "boolean", group : "Appearance", defaultValue : false},

                /**
                 * If set to true, a theme dependent marker is shown on the item.
                 * @deprecated Since version 1.18.
                 * Markers should not be used anymore.
                 */
                showMarker : {type : "boolean", group : "Appearance", defaultValue : false, deprecated: true},

                /**
                 * The icon of the item, either defined in the sap.ui.core.IconPool or an URI to a custom image. An icon must be set.
                 */
                icon : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},

                target : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},

                ariaLabel : {type : "string", group : "Appearance", defaultValue : null},

                /**
                 * Invisible items are not shown on the UI.
                 * @since 1.18
                 */
                visible : {type : "boolean", group : "Appearance", defaultValue : true}
            },
            events : {

                /**
                 * Event is fired when the user presses the item.
                 */
                press : {}
            }
        }});

        ShellHeadItem.prototype.onclick = function (oEvent) {
            this.firePress();
            // IE always interprets a click on an anker as navigation and thus triggers the
            // beforeunload-event on the window. Since a ShellHeadItem never has a valid href-attribute,
            // the default behavior should never be triggered
            if (!this.getTarget()) {
                oEvent.preventDefault();
            }
        };

        ShellHeadItem.prototype.onsapspace = ShellHeadItem.prototype.onclick;


        ShellHeadItem.prototype.setStartsSection = function (bStartsSection) {
            bStartsSection = !!bStartsSection;
            this.setProperty("startsSection", bStartsSection, true);
            this.$().toggleClass("sapUshellShellHeadItmDelim", bStartsSection);
            return this;
        };


        ShellHeadItem.prototype.setShowSeparator = function (bShowSeparator) {
            bShowSeparator = !!bShowSeparator;
            this.setProperty("showSeparator", bShowSeparator, true);
            this.$().toggleClass("sapUshellShellHeadItmSep", bShowSeparator);
            return this;
        };


        ShellHeadItem.prototype.setSelected = function (bSelected) {
            bSelected = !!bSelected;
            this.setProperty("selected", bSelected, true);
            this.$().toggleClass("sapUshellShellHeadItmSel", bSelected);
            return this;
        };

        ShellHeadItem.prototype.setAriaLabel = function (sAriaLabel) {
            this.setProperty('ariaLabel', sAriaLabel);
            return this;
        };


        ShellHeadItem.prototype.setVisible = function (bVisible) {
            this.setProperty("visible", !!bVisible, true);
            if (bVisible) {
                this.$().removeClass('sapUshellShellHidden');
            } else {
                this.$().addClass('sapUshellShellHidden');
            }
            return this;
        };


        ShellHeadItem.prototype.setShowMarker = function (bMarker) {
            bMarker = !!bMarker;
            this.setProperty("showMarker", bMarker, true);
            this.$().toggleClass("sapUshellShellHeadItmMark", bMarker);
            return this;
        };


        ShellHeadItem.prototype.setIcon = function (sIcon) {
            this.setProperty("icon", sIcon, true);
            if (this.getDomRef()) {
                this._refreshIcon();
            }
            return this;
        };


        ShellHeadItem.prototype._refreshIcon = function () {
            var $Ico = jQuery(this.$().children()[0]);
            var sIco = this.getIcon();
            if (IconPool.isIconURI(sIco)) {
                var oIconInfo = IconPool.getIconInfo(sIco);
                $Ico.html("").css("style", "");
                if (oIconInfo) {
                    $Ico.text(oIconInfo.content).css("font-family", "'" + oIconInfo.fontFamily + "'");
                }
            } else {
                var $Image = this.$("img-inner");
                if ($Image.length === 0 || $Image.attr("src") !== sIco) {
                    $Ico.css("style", "").html("<img id='" + this.getId() + "-img-inner' src='" + jQuery.sap.encodeHTML(sIco) + "'></img>");
                }
            }
        };

    // in case someone already using the API sap.ushell.renderers.fiori2.RendererExtensions.addHeaderItem
    // with sap.ui.unified.ShellHeadItem() instance
        jQuery.sap.declare('sap.ui.unified.ShellHeadItem');
        sap.ui.unified.ShellHeadItem = ShellHeadItem;

        return ShellHeadItem;

    }, /* bExport= */ true);

}; // end of sap/ushell/ui/shell/ShellHeadItem.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.shell.ShellHeadUserItem') ) {
/*!
 * ${copyright}
 */
/*global jQuery, sap, document */
// Provides control sap.ushell.ui.shell.ShellHeadUserItem.
jQuery.sap.declare('sap.ushell.ui.shell.ShellHeadUserItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Element'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
sap.ui.define("sap/ushell/ui/shell/ShellHeadUserItem",['jquery.sap.global', 'sap/ui/core/Element', 'sap/ui/core/IconPool', 'sap/ushell/library'],
    function (jQuery, Element, IconPool) {
        "use strict";



        /**
         * Constructor for a new ShellHeadUserItem.
         *
         * @param {string} [sId] id for the new control, generated automatically if no id is given
         * @param {object} [mSettings] initial settings for the new control
         *
         * @class
         * User Header Action Item of the Shell.
         * @extends sap.ui.core.Element
         *
         * @author SAP SE
         * @version ${version}
         *
         * @constructor
         * @private
         * @since 1.22.0
         * @alias sap.ushell.ui.shell.ShellHeadUserItem
         * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
         */
        var ShellHeadUserItem = Element.extend("sap.ushell.ui.shell.ShellHeadUserItem", /** @lends sap.ushell.ui.shell.ShellHeadUserItem.prototype */ { metadata : {

            properties : {

                /**
                 * The name of the user.
                 */
                username : {type : "string", group : "Appearance", defaultValue : ''},

                ariaLabel : {type : "string", group : "Appearance", defaultValue : null},

                /**
                 * An image of the user, normally an URI to a image but also an icon from the sap.ui.core.IconPool is possible.
                 */
                image : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null}
            },
            events : {

                /**
                 * Event is fired when the user presses the button.
                 */
                press : {}
            }
        }});

        IconPool.getIconInfo("", ""); //Ensure Icon Font is loaded

        ShellHeadUserItem.prototype.onclick = function (oEvent) {
            this.firePress();
            // IE always interprets a click on an anker as navigation and thus triggers the
            // beforeunload-event on the window. Since a ShellHeadItem never has a valid href-attribute,
            // the default behavior should never be triggered
            oEvent.preventDefault();
        };

        ShellHeadUserItem.prototype.onsapspace = ShellHeadUserItem.prototype.onclick;

        ShellHeadUserItem.prototype.setImage = function (sImage) {
            this.setProperty("image", sImage, true);
            if (this.getDomRef()) {
                this._refreshImage();
            }
            return this;
        };

        ShellHeadUserItem.prototype.setAriaLabel = function (sAriaLabel) {
            this.setProperty('ariaLabel', sAriaLabel);
            return this;
        };

        ShellHeadUserItem.prototype._refreshImage = function () {
            var $Ico = this.$("img");
            var sImage = this.getImage();
            if (!sImage) {
                $Ico.html("").css("style", "").css("display", "none");
            } else if (IconPool.isIconURI(sImage)) {
                var oIconInfo = IconPool.getIconInfo(sImage);
                $Ico.html("").css("style", "");
                if (oIconInfo) {
                    $Ico.text(oIconInfo.content).css("font-family", "'" + oIconInfo.fontFamily + "'");
                }
            } else {
                var $Image = this.$("img-inner");
                if ($Image.length === 0 || $Image.attr("src") !== sImage) {
                    $Ico.css("style", "").html("<img id='" + this.getId() + "-img-inner' src='" + jQuery.sap.encodeHTML(sImage) + "'></img>");
                }
            }
        };

        ShellHeadUserItem.prototype._checkAndAdaptWidth = function (bShellSearchVisible) {
            if (!this.getDomRef()) {
                return false;
            }

            var $Ref = this.$(),
                $NameRef = this.$("name");
            var iBeforeWidth = $Ref.width();
            $Ref.toggleClass("sapUshellShellHeadActionLimit", false);
            //User name cannot be larger than 240px
            //(if a search field is shown in the shell this max size decreases depending on the screen width)
            var iMax = 240;
            if (bShellSearchVisible) {
                iMax = Math.min(iMax, 0.5 * document.documentElement.clientWidth - 225);
            }
            if (iMax < $NameRef.width()) {
                $Ref.toggleClass("sapUshellShellHeadActionLimit", true);
            }
            return iBeforeWidth !== $Ref.width();
        };

        return ShellHeadUserItem;

    }, /* bExport= */ true);

}; // end of sap/ushell/ui/shell/ShellHeadUserItem.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.shell.ShellHeader') ) {
/*!
 * ${copyright}
 */
/*global jQuery, sap */
jQuery.sap.declare('sap.ushell.ui.shell.ShellHeader'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ushell/ui/shell/ShellHeader",['jquery.sap.global', 'sap/ushell/library'],
    function (jQuery, library) {
        "use strict";

        var ShellHeader = sap.ui.core.Control.extend("sap.ushell.ui.shell.ShellHeader", {

            metadata: {
                properties: {
                    logo: {type: "sap.ui.core.URI", defaultValue: ""},
                    searchVisible: {type: "boolean", defaultValue: true},
                    ariaLabel: {type: "string", defaultValue: undefined}
                },
                aggregations: {
                    headItems: {type: "sap.ushell.ui.shell.ShellHeadItem", multiple: true},
                    headEndItems: {type: "sap.ushell.ui.shell.ShellHeadItem", multiple: true},
                    search: {type: "sap.ui.core.Control", multiple: false},
                    user: {type: "sap.ushell.ui.shell.ShellHeadUserItem", multiple: false},
                    title: {type: "sap.ushell.ui.shell.ShellTitle", multiple: false}
                }
            },
            renderer: {
                render: function (rm, oHeader) {
                    var id = oHeader.getId();
                    rm.write("<div");
                    rm.writeControlData(oHeader);
                    if (oHeader.getAriaLabel()) {
                        rm.writeAccessibilityState({
                            label: oHeader.getAriaLabel(),
                            role: "banner"
                        });
                    }
                    rm.writeAttribute("class", "sapUshellShellHeader");
                    rm.write(">");
                    rm.write("<div id='", id, "-hdr-begin' class='sapUshellShellHeadBegin'>");
                    this.renderHeaderItems(rm, oHeader, true);
                    rm.write("</div>");

                    rm.write("<div id='", id, "-hdr-center' class='sapUshellShellHeadCenter'>");
                    this.rendererTitle(rm, oHeader);
                    this.renderSearch(rm, oHeader);
                    rm.write("</div>");
                    rm.write("<div id='", id, "-hdr-end' class='sapUshellShellHeadEnd'>");
                    this.renderHeaderItems(rm, oHeader, false);
                    rm.write("</div>");
                    rm.write("</div>");
                },
                renderSearch: function (rm, oHeader) {
                    var oSearch = oHeader.getSearch();
                    rm.write("<div id='", oHeader.getId(), "-hdr-search'");
                    rm.writeAttribute("class", "sapUshellShellSearch" + (oHeader.getSearchVisible() ? "" : " sapUshellShellHidden"));
                    rm.write("><div>");
                    if (oSearch) {
                        rm.renderControl(oSearch);
                    }
                    rm.write("</div></div>");
                },
                rendererTitle: function (rm, oHeader) {
                    rm.write("<div id='", oHeader.getId(), "-hdr-title' class='sapUshellShellHeadTitle'>");
                    rm.renderControl(oHeader.getTitle());
                    rm.write("</div>");
                },
                renderHeaderItems: function (rm, oHeader, begin) {
                    rm.write("<div class='sapUshellShellHeadContainer'>");
                    var aItems = begin ? oHeader.getHeadItems() : oHeader.getHeadEndItems(),
                        i;
                    for (i = 0; i < aItems.length; i++) {
                        if ((aItems[i].getTarget() || "") !== "") {
                            rm.write("<a tabindex='0' href='");
                            rm.writeEscaped(aItems[i].getTarget());
                            rm.write("'");
                        } else {
                            rm.write("<a tabindex='0'");
                        }

                        rm.writeElementData(aItems[i]);
                        rm.addClass("sapUshellShellHeadItm");
                        if (aItems[i].getStartsSection()) {
                            rm.addClass("sapUshellShellHeadItmDelim");
                        }
                        if (aItems[i].getShowSeparator()) {
                            rm.addClass("sapUshellShellHeadItmSep");
                        }
                        if (!aItems[i].getVisible()) {
                            rm.addClass("sapUshellShellHidden");
                        }
                        if (aItems[i].getAriaLabel()) {
                            //Handle Aria Label rendering
                            rm.writeAccessibilityState({
                                label: aItems[i].getAriaLabel(),
                                role: "button"
                            });
                        }
                        if (aItems[i].getSelected()) {
                            rm.addClass("sapUshellShellHeadItmSel");
                        }
                        if (aItems[i].getShowMarker()) {
                            rm.addClass("sapUshellShellHeadItmMark");
                        }
                        rm.writeClasses();
                        var tooltip = aItems[i].getTooltip_AsString();
                        if (tooltip) {
                            rm.writeAttributeEscaped("title", tooltip);
                        }
                        rm.write("><span></span><div class='sapUshellShellHeadItmMarker'><div></div></div></a>");
                    }

                    var oUser = oHeader.getUser();
                    if (!begin && oUser) {
                        rm.write("<a tabindex='0' href='javascript:void(0);'");
                        rm.writeElementData(oUser);
                        rm.addClass("sapUshellShellHeadAction sapUshellShellHeadSeparator");
                        rm.writeClasses();
                        var tooltip = oUser.getTooltip_AsString();
                        if (tooltip) {
                            rm.writeAttributeEscaped("title", tooltip);
                        }
                        if (oUser.getAriaLabel()) {
                            //Handle Aria Label rendering
                            rm.writeAccessibilityState({
                                label: oUser.getAriaLabel(),
                                role: "button"
                            });
                        }
                        rm.write("><span id='", oUser.getId(), "-img' class='sapUshellShellHeadActionImg'></span>");
                        rm.write("<span id='" + oUser.getId() + "-name' class='sapUshellShellHeadActionName'");
                        rm.write(">");
                        var sUserName = oUser.getUsername() || "";
                        rm.writeEscaped(sUserName);
                        rm.write("</span><span class='sapUshellShellHeadActionExp'></span></a>");
                    }

                    rm.write("</div>");
                    if (begin) {
                        this._renderLogo(rm, oHeader);
                    }
                },

                _renderLogo: function (rm, oHeader) {
                    //var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui"),
                    //sLogoTooltip = rb.getText("SHELL_LOGO_TOOLTIP"),
                    var sLogoTooltip = sap.ushell.resources.i18n.getText("SHELL_LOGO_TOOLTIP"),
                        sIco = oHeader._getLogo();

                    rm.write("<div class='sapUshellShellIco'>");
                    rm.write("<img id='", oHeader.getId(), "-icon'");
                    rm.writeAttributeEscaped("title", sLogoTooltip);
                    rm.writeAttributeEscaped("alt", sLogoTooltip);
                    rm.write("src='");
                    rm.writeEscaped(sIco);
                    rm.write("' style='", sIco ? "" : "display:none;","'></img>");
                    rm.write("</div>");
                }
            }

        });


        ShellHeader.prototype.init = function () {
            var that = this;

            this._rtl = sap.ui.getCore().getConfiguration().getRTL();

            this._handleMediaChange = function (mParams) {
                if (!that.getDomRef()) {
                    return;
                }
                that._refresh();
            };
            sap.ui.Device.media.attachHandler(this._handleMediaChange, this, sap.ui.Device.media.RANGESETS.SAP_STANDARD);

            this._handleResizeChange = function () {
                if (!that.getDomRef() || !that.getUser()) {
                    return;
                }

                var oUser = this.getUser();
                var bChanged = oUser._checkAndAdaptWidth(!that.$("hdr-search").hasClass("sapUshellShellHidden") && !!that.getSearch());
                if (bChanged) {
                    that._refresh();
                }
            };
            sap.ui.Device.resize.attachHandler(this._handleResizeChange, this);

            this.data("sap-ui-fastnavgroup", "true", true); // Define group for F6 handling

            this.oTitle = null;
        };

        ShellHeader.prototype.exit = function () {
            sap.ui.Device.media.detachHandler(this._handleMediaChange, this, sap.ui.Device.media.RANGESETS.SAP_STANDARD);
            delete this._handleMediaChange;
            sap.ui.Device.resize.detachHandler(this._handleResizeChange, this);
            delete this._handleResizeChange;
            if (this.oTitle) {
                this.oTitle.destroy();
            }
        };

        ShellHeader.prototype.onAfterRendering = function () {
            this._refresh();
            this.$("hdr-center").toggleClass("sapUshellShellAnim", !this._noHeadCenterAnim);
        };

        ShellHeader.prototype.onThemeChanged = function () {
            if (this.getDomRef()) {
                this.invalidate();
            }
        };

        ShellHeader.prototype._getLogo = function () {
            var ico = this.getLogo();
            if (!ico) {
                jQuery.sap.require("sap.ui.core.theming.Parameters");
                ico = sap.ui.core.theming.Parameters._getThemeImage(null, true); // theme logo
            }
            return ico;
        };

        ShellHeader.prototype._refresh = function () {
            function updateItems(aItems) {
                for (var i = 0; i < aItems.length; i++) {
                    aItems[i]._refreshIcon();
                }
            }

		updateItems(this.getHeadItems());
		updateItems(this.getHeadEndItems());

		var oUser = this.getUser(),
			isPhoneSize = jQuery("html").hasClass("sapUiMedia-Std-Phone"),
			searchVisible = !this.$("hdr-search").hasClass("sapUshellShellHidden"),
			$logo = this.$("icon");

		if (oUser) {
			oUser._refreshImage();
			oUser._checkAndAdaptWidth(searchVisible && !!this.getSearch());
		}

		$logo.parent().toggleClass("sapUshellShellHidden", isPhoneSize && searchVisible && !!this.getSearch());

        var we = this.$("hdr-end").outerWidth(),
            wb = this.$("hdr-begin").outerWidth(),
            w = this.$().width(),
            //When there is not enough space, on small screen size, we want to assure that
            //search field width is not too short
            centerMin = 568,
            wMax = Math.max(we, wb),
            begin = ((w - wb - we < centerMin) && searchVisible ? wb : wMax) + "px",
            end = ((w - wb - we < centerMin) && searchVisible ? we : wMax) + "px";

		this.$("hdr-center").css({
			"left": this._rtl ? end : begin,
			"right": this._rtl ? begin : end
		});

        this.$("hdr-title").css({
            "left": this._rtl ? end : begin,
            "right": this._rtl ? begin : end
        });
	};

    ShellHeader.prototype.setTitleControl = function (sTitle, oInnerControl) {
        if (this.oTitle) {
            this.oTitle.destroy();
        }
        this.oTitle = new sap.ushell.ui.shell.ShellTitle("shellTitle", {
            text: sTitle,
            icon: sap.ui.core.IconPool.getIconURI("overflow")
        });
        this.oTitle.setInnerControl(oInnerControl);
        this.setTitle(this.oTitle);
    };

    ShellHeader.prototype.removeHeadItem = function (vItem) {
        if (typeof vItem === 'number') {
            vItem = this.getHeadItems()[vItem];
        }
        vItem.setVisible(false);
        this.removeAggregation('headItems', vItem, true);
    };

    ShellHeader.prototype.addHeadItem = function (oItem) {
        if (!oItem.getDomRef()) {
            //item isn't rendered yet, don't supress rendering
            this.addAggregation('headItems', oItem);
            oItem.setVisible(true);
        } else {
            //item is already rendered, just change it's visibility
            this.addAggregation('headItems', oItem, true);
            oItem.setVisible(true);
        }
    };

	return ShellHeader;

}, /* bExport= */ true);

}; // end of sap/ushell/ui/shell/ShellHeader.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.shell.ShellLayoutRenderer') ) {
/*!
 * ${copyright}
 */
/*global jQuery, sap*/
// Provides default renderer for control sap.ushell.ui.shell.ShellLayout
jQuery.sap.declare('sap.ushell.ui.shell.ShellLayoutRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ushell/ui/shell/ShellLayoutRenderer",['jquery.sap.global'],
    function (jQuery) {
        "use strict";

        /**
         * Shell Layout renderer.
         * @namespace
         */
        var ShellLayoutRenderer = {};

        /**
         * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
         * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the Render-Output-Buffer
         * @param {sap.ui.core.Control} oShell an object representation of the control that should be rendered
         */
        ShellLayoutRenderer.render = function (rm, oShell) {
            var id = oShell.getId();

            rm.write("<div");
            rm.writeControlData(oShell);
            rm.addClass("sapUshellShell");
            if (oShell._animation) {
                rm.addClass("sapUshellShellAnim");
            }
            if (!oShell.getHeaderVisible()) {
                rm.addClass("sapUshellShellNoHead");
            }
            rm.addClass("sapUshellShellHead" + (oShell._showHeader ? "Visible" : "Hidden"));
            if (oShell.getShowCurtain()) {
                rm.addClass("sapUshellShellCurtainVisible");
            } else {
                rm.addClass("sapUshellShellCurtainHidden");
                rm.addClass("sapUshellShellCurtainClosed");
            }

            rm.writeClasses();
            rm.write(">");

            rm.write("<hr id='", id, "-brand' class='sapUshellShellBrand'/>");

            rm.write("<header id='", id, "-hdr'  class='sapUshellShellHead'><div>");
            rm.write("<div id='", id, "-hdrcntnt' class='sapUshellShellCntnt'>");
            if (oShell.getHeader()) {
                rm.renderControl(oShell.getHeader());
            }
            rm.write("</div>", "</div>", "</header>");
            if (oShell.getToolArea()) {
                rm.write("<aside>");
                rm.renderControl(oShell.getToolArea());
                rm.write("</aside>");
            }

            rm.write("<section id='", id, "-curt' class='sapUshellShellCntnt sapUshellShellCurtain'>");
            rm.write("<div id='", id, "-curtcntnt' class='sapUshellShellCntnt'>");
            rm.renderControl(oShell._curtCont);
            rm.write("</div>");
            rm.write("<span id='", id, "-curt-focusDummyOut' tabindex='0'></span>");
            rm.write("</section>");
            rm.write("<div id='", id, "-cntnt' class='sapUshellShellCntnt sapUshellShellCanvas sapUiGlobalBackgroundColor sapUiGlobalBackgroundColorForce'>");

            rm.write("<div id='", id, "-strgbg' class='sapUshellShellBG" + (oShell._useStrongBG ? " sapUiStrongBackgroundColor" : "") + "'></div>");
            rm.write("<div class='sapUiGlobalBackgroundImage sapUiGlobalBackgroundImageForce sapUshellShellBG'></div>");
            rm.renderControl(oShell._cont);
            rm.write("</div>");

            rm.write("<span id='", id, "-main-focusDummyOut' tabindex='" + (oShell.getShowCurtain() ? 0 : -1) + "'></span>");

            rm.renderControl(oShell._floatingActions);

            rm.write("</div>");
        };

        return ShellLayoutRenderer;

    }, /* bExport= */ true);

}; // end of sap/ushell/ui/shell/ShellLayoutRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.shell.ShellOverlayRenderer') ) {
/*!
 * ${copyright}
 */
/*global sap*/
// Provides default renderer for control sap.ushell.ui.shell.ShellOverlay
jQuery.sap.declare('sap.ushell.ui.shell.ShellOverlayRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ushell/ui/shell/ShellOverlayRenderer",['jquery.sap.global'],
    function (jQuery) {
        "use strict";


    /**
     * ShellOverlay renderer.
     * @namespace
     */
        var ShellOverlayRenderer = {};

        /**
         * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
         * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the Render-Output-Buffer
         * @param {sap.ui.core.Control} oShell an object representation of the control that should be rendered
         */
        ShellOverlayRenderer.render = function (rm, oControl) {
            rm.write("<div");
            rm.writeControlData(oControl);
            rm.addClass("sapUshellShellOvrly");
            if (oControl._opening) {
                rm.addClass("sapUshellShellOvrlyCntntHidden");
                rm.addClass("sapUshellShellOvrlyOpening");
            }

            if (oControl._getAnimActive()) {
                rm.addClass("sapUshellShellOvrlyAnim");
            }
            rm.writeClasses();
            rm.write("><div>");

            rm.write("<header class='sapUshellShellOvrlyHead'>");
            rm.write("<hr class='sapUshellShellOvrlyBrand'/>");
            rm.write("<div class='sapUshellShellOvrlyHeadCntnt'>");
            rm.write("<div id='" + oControl.getId() + "-hdr-center' class='sapUshellShellOvrlyHeadCenter'>");
            ShellOverlayRenderer.renderSearch(rm, oControl);
            rm.write("</div>");
            //var rb = sap.ui.getCore().getLibraryResourceBundle("sap.ui"),
            //sCloseTxt = rb.getText("SHELL_OVERLAY_CLOSE");
            var sCloseTxt = sap.ushell.resources.i18n.getText("SHELL_OVERLAY_CLOSE");

            rm.write("<a tabindex='0' href='javascript:void(0);' id='" + oControl.getId() + "-close' class='sapUshellShellOvrlyHeadClose'");
            rm.writeAttributeEscaped("title", sCloseTxt);
            rm.write(">");
            rm.writeEscaped(sCloseTxt);
            rm.write("</a></div></header>");
            rm.write("<div id='" + oControl.getId() + "-cntnt' class='sapUshellShellOvrlyCntnt'>");
            ShellOverlayRenderer.renderContent(rm, oControl);
            rm.write("</div>");

            rm.write("</div></div>");
        };

        ShellOverlayRenderer.renderSearch = function (rm, oControl) {
            var iWidth = oControl._getSearchWidth();
            var sStyle = "";
            if (iWidth > 0 && oControl._opening) {
                sStyle = "style='width:" + iWidth + "px'";
            }

            rm.write("<div id='" + oControl.getId() + "-search' class='sapUshellShellOvrlySearch' " + sStyle + "><div>");
            var oSearch = oControl.getSearch();
            if (oSearch) {
                rm.renderControl(oSearch);
            }
            rm.write("</div></div>");
        };

        ShellOverlayRenderer.renderContent = function (rm, oControl) {
            rm.write("<div>");
            var aContent = oControl.getContent();
            for (var i = 0; i < aContent.length; i++) {
                rm.renderControl(aContent[i]);
            }
            rm.write("</div>");
        };

        return ShellOverlayRenderer;

    }, /* bExport= */ true);

}; // end of sap/ushell/ui/shell/ShellOverlayRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.shell.ShellRenderer') ) {
/*!
 * ${copyright}
 */
/*global sap*/
// Provides default renderer for control sap.ushell.ui.shell.Shell
jQuery.sap.declare('sap.ushell.ui.shell.ShellRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Renderer'); // unlisted dependency retained
sap.ui.define("sap/ushell/ui/shell/ShellRenderer",['jquery.sap.global', 'sap/ui/core/Renderer', './ShellLayoutRenderer'],
    function (jQuery, Renderer, ShellLayoutRenderer) {
        "use strict";


        /**
         * Renderer for the sap.ushell.ui.shell.Shell
         * @namespace
         */
        var ShellRenderer = Renderer.extend(ShellLayoutRenderer);


        return ShellRenderer;

}, /* bExport= */ true);

}; // end of sap/ushell/ui/shell/ShellRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.shell.ShellTitle') ) {
/*!
 * ${copyright}
 */
/*global jQuery, sap */
/**
 * Provides control sap.ushell.ui.shell.ShellTitle
 *
 * This control is responsible to display the Shell Header Title.
 * This control could be rendered in two different states:
 * 1. Title only: only the title will be rendered inside the Shell Header
 * 2. Title with popover button: A button will be placed in the Shell Header Title area.
 *    When the user clicks on the button, a popover will raise and render the innerControl as its content.
 *
 *    innerControl: the content of the popover. Will be destroyed by the ShellTitle control.
 */
jQuery.sap.declare('sap.ushell.ui.shell.ShellTitle'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
sap.ui.define("sap/ushell/ui/shell/ShellTitle",['jquery.sap.global', 'sap/m/Button', 'sap/ui/core/IconPool', 'sap/m/Button', 'sap/ushell/library'],
    function (jQuery, Button, IconPool) {
        "use strict";

        var ShellTitle = Button.extend("sap.ushell.ui.shell.ShellTitle",
            {
                metadata: {
                    properties: {
                        text: {type : "string", group : "Misc", defaultValue : null},
                        icon: {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null}
                    },
                    events: {
                        press: {}
                    }
                },

                renderer: {
                    render:  function(oRm, oControl) {
                        var oInnerControl = oControl.getInnerControl();
                        var sTitle = oControl.getText();
                        if (!sTitle) {
                            return;
                        }
                        if (oInnerControl) {
                            oRm.write("<a tabindex='0' href='javascript:void(0);'");
                            oRm.addClass("sapUshellShellHeadAction sapUshellHideIconOnDesktop");
                            oRm.writeClasses();
                            if (oControl.getTooltip()) {
                                oRm.writeAttributeEscaped("title", oControl.getTooltip());
                            }
                            oRm.writeControlData(oControl);
                            oRm.write("><span class='sapUshellShellHeadActionImg sapUshellShellTitleHeadActionImg'>");
                            var oIcon = IconPool.createControlByURI(oControl.getIcon());
                            oRm.renderControl(oIcon);
                            oRm.write("</span>");
                            oRm.write("<span class='sapUshellShellHeadActionName sapUshellHeadTitle'");
                            oRm.writeAttributeEscaped("title", oControl.getText());
                            oRm.write(">");
                            oRm.writeEscaped(oControl.getText());
                            oRm.write("</span><span class='sapUshellShellHeadActionExp'></span></a>");
                        } else {
                            oRm.write('<span class="sapUshellHeadTitle">');
                            oRm.writeEscaped(oControl.getText());
                            oRm.write("</span>");
                        }
                    }
                }
            });

        ShellTitle.prototype.init = function () {
            //call the parent sap.m.Button init method
            if (Button.prototype.init) {
                Button.prototype.init.apply(this, arguments);
            }
            this.innerControl = null;
            this.oPopover = null;
        };

        ShellTitle.prototype.getInnerControl = function () {
            return this.innerControl;
        };

        ShellTitle.prototype.setInnerControl = function (oInnercontrol) {
            this.innerControl = oInnercontrol;
        };

        ShellTitle.prototype.onclick = function (oEvent) {
            if (!this.oPopover) {
                this.oPopover = new sap.m.Popover("shellTitlePopover", {
                    showHeader: false,
                    content: this.getInnerControl(),
                    placement: sap.m.PlacementType.VerticalPreferedBottom
                });
            }
            this.oPopover.openBy(this);
            this.firePress();
        };

        ShellTitle.prototype.exit = function () {
            if (this.oPopover) {
                this.innerControl.destroy();
                this.oPopover.destroy();
            }
        };

        ShellTitle.prototype.onsapspace = ShellTitle.prototype.onclick;

        return ShellTitle;

    }, true);

}; // end of sap/ushell/ui/shell/ShellTitle.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.shell.ShellUtilities') ) {
/*!
 * ${copyright}
 */
/*global jQuery, sap*/
/**
 * Initialization Code and shared classes of library sap.ushell.ui.shell
 */
jQuery.sap.declare('sap.ushell.ui.shell.ShellUtilities'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ushell/ui/shell/ShellUtilities",['jquery.sap.global', 'sap/ushell/library'],
    function (jQuery) {

        "use strict";

        sap.ui.base.Object.extend("sap.ushell.ui.shell.shell_ContentRenderer", {
            constructor : function (oControl, sContentContainerId, oContent, fAfterRenderCallback) {
                sap.ui.base.Object.apply(this);
                this._id = sContentContainerId;
                this._cntnt = oContent;
                this._ctrl = oControl;
                this._rm = sap.ui.getCore().createRenderManager();
                this._cb = fAfterRenderCallback || function () {};
            },

            destroy : function () {
                this._rm.destroy();
                delete this._rm;
                delete this._id;
                delete this._cntnt;
                delete this._cb;
                delete this._ctrl;
                if (this._rerenderTimer) {
                    jQuery.sap.clearDelayedCall(this._rerenderTimer);
                    delete this._rerenderTimer;
                }
                sap.ui.base.Object.prototype.destroy.apply(this, arguments);
            },

            render : function () {
                if (!this._rm) {
                    return;
                }

                if (this._rerenderTimer) {
                    jQuery.sap.clearDelayedCall(this._rerenderTimer);
                }

                this._rerenderTimer = jQuery.sap.delayedCall(0, this, function () {
                    var $content = jQuery.sap.byId(this._id);
                    var doRender = $content.length > 0;

                    if (doRender) {
                        if (typeof (this._cntnt) === "string") {
                            var aContent = this._ctrl.getAggregation(this._cntnt, []);
                            for (var i = 0; i < aContent.length; i++) {
                                this._rm.renderControl(aContent[i]);
                            }
                        } else {
                            this._cntnt(this._rm);
                        }
                        this._rm.flush($content[0]);
                    }

                    this._cb(doRender);
                });
            }
        });


        sap.ushell.ui.shell.shell_iNumberOfOpenedShellOverlays = 0;

	//return sap.ushell.ui.shell;

}, /* bExport= */ false);

}; // end of sap/ushell/ui/shell/ShellUtilities.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.shell.SplitContainer') ) {
/*!
 * ${copyright}
 */
/*global jQuery, sap, window*/
// Provides control sap.ushell.ui.shell.SplitContainer.
jQuery.sap.declare('sap.ushell.ui.shell.SplitContainer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained
sap.ui.define("sap/ushell/ui/shell/SplitContainer",['jquery.sap.global', 'sap/ui/core/Control', 'sap/ui/core/theming/Parameters', 'sap/ushell/library'],
    function (jQuery, Control, Parameters) {
        "use strict";

        /**
         * Constructor for a new SplitContainer.
         *
         * @param {string} [sId] id for the new control, generated automatically if no id is given
         * @param {object} [mSettings] initial settings for the new control
         *
         * @class
         * Provides a main content and a secondary content area
         * @extends sap.ui.core.Control
         *
         * @author SAP SE
         * @version ${version}
         *
         * @constructor
         * @private
         * @since 1.15.0
         * @experimental Since version 1.15.0.
         * API is not yet finished and might change completely
         * @alias sap.ushell.ui.shell.SplitContainer
         * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
         */
        var SplitContainer = Control.extend("sap.ushell.ui.shell.SplitContainer", /** @lends sap.ushell.ui.shell.SplitContainer.prototype */ { metadata : {

            library : "sap.ushell.ui.shell",
            properties : {

                /**
                 * Shows / Hides the secondary area.
                 */
                showSecondaryContent : {type : "boolean", group : "Appearance", defaultValue : null},

                /**
                 * The width if the secondary content. The height is always 100%.
                 */
                secondaryContentSize : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : '250px'},

                /**
                 * Do not use. Use secondaryContentSize instead.
                 * @deprecated Since version 1.22.
                 *
                 * Only available for backwards compatibility.
                 */
                secondaryContentWidth : {type : "sap.ui.core.CSSSize", group : "Appearance", defaultValue : '250px', deprecated: true},

                /**
                 * Whether to show the secondary content on the left ("Horizontal", default) or on the top ("Vertical").
                 * @since 1.22.0
                 */
                orientation : {type : "sap.ui.core.Orientation", group : "Appearance", defaultValue : sap.ui.core.Orientation.Horizontal}
            },
            defaultAggregation : "content",
            aggregations : {

                /**
                 * The content to appear in the main area.
                 */
                content : {type : "sap.ui.core.Control", multiple : true, singularName : "content"},


                /**
                 * The content to appear in the main area.
                 */
                subHeaders : {type : "sap.ui.core.Control", multiple : true, singularName : "subHeader"},



                /**
                 * The content to appear in the secondary area.
                 */
                secondaryContent : {type : "sap.ui.core.Control", multiple : true, singularName : "secondaryContent"}
            }
        }});

        (function (window) {


        ////////////////////////////////////////// Public Methods //////////////////////////////////////////

            SplitContainer.prototype.init = function () {
                this.bRtl  = sap.ui.getCore().getConfiguration().getRTL();

                this._paneRenderer = new sap.ushell.ui.shell.shell_ContentRenderer(this, this.getId() + "-panecntnt", "secondaryContent");
                this._subHeadersRenderer = new sap.ushell.ui.shell.shell_ContentRenderer(this, this.getId() + "-canvassubHeaders", "subHeaders");
                this._canvasRenderer = new sap.ushell.ui.shell.shell_ContentRenderer(this, this.getId() + "-canvasrootContent", "content");

            // Design decided that content does not need to be handled differently depending on device - remove
            // comments if needed again...
            //sap.ui.Device.media.attachHandler(
            //this._handleMediaChange, this, sap.ui.Device.media.RANGESETS.SAP_STANDARD
            //);

                // By default move the content when the secondaryContent is shown
                this._moveContent = true;
            };

            SplitContainer.prototype.addSubHeader = function (oControl) {
                var sSubHeadersWrapperId = this.getId() + '-canvassubHeaders',
                    jqSubHeadersWrapper = jQuery(this.getDomRef()),
                    bSubHeadersWrapperRendered = jQuery(jqSubHeadersWrapper).find("#" + sSubHeadersWrapperId).length ? true : false;

                if (bSubHeadersWrapperRendered) {
                    return this._mod(function (bRendered) {
                        return this.addAggregation("subHeaders", oControl, bRendered);
                    }, this._subHeadersRenderer);
                } else {
                    return this.addAggregation("subHeaders", oControl);
                }
            };

            SplitContainer.prototype.removeSubHeader = function (oControl) {
                return this._mod(function (bRendered) {
                    return this.removeAggregation("subHeaders", oControl, bRendered);
                }, this._subHeadersRenderer);
            };

            SplitContainer.prototype.insertSubHeader = function (oControl, iIndex) {
                return this._mod(function (bRendered) {
                    return this.insertAggregation("subHeaders", oControl, iIndex, bRendered);
                }, this._subHeadersRenderer);
            };

            SplitContainer.prototype.removeAllSubHeaders = function () {
                return this._mod(function (bRendered) {
                    return this.removeAllAggregation("subHeaders", bRendered);
                }, this._subHeadersRenderer);
            };
            SplitContainer.prototype.destroySubHeaders = function () {
                return this._mod(function (bRendered) {
                    return this.destroyAggregation("subHeaders", bRendered);
                }, this._subHeadersRenderer);
            };

            SplitContainer.prototype.exit = function () {
                this._paneRenderer.destroy();
                delete this._paneRenderer;
                this._canvasRenderer.destroy();
                delete this._canvasRenderer;

                delete this._contentContainer;
                delete this._secondaryContentContainer;
            };


        ////////////////////////////////////////// onEvent Methods /////////////////////////////////////////

            SplitContainer.prototype.onAfterRendering = function () {
                // Shortcuts to the main DOM containers
                this._contentContainer = this.$("canvas");
                this._secondaryContentContainer = this.$("pane");
                this._toolArea = this.getParent() && this.getParent().getToolArea && this.getParent().getToolArea() ? this.getParent().getToolArea() : {};

            // Design decided that content does not need to be handled differently depending on device - remove
            // comments if needed again...
            //this._lastDeviceName = "";
            //this._handleMediaChange(
            //sap.ui.Device.media.getCurrentRange(sap.ui.Device.media.RANGESETS.SAP_STANDARD)
            //);

                this._applySecondaryContentSize();
            };


        ////////////////////////////////////////// Private Methods /////////////////////////////////////////

        // Design decided that content does not need to be handled differently depending on device - remove
        // comments if needed again...
        ///**
        // * This method is called whenever the size of the document changes into a different range of values
        // * that represent different devices (Desktop/Tablet/Phone).
        // *
        // * @private
        // */
        //sap.ushell.ui.shell.SplitContainer.prototype._handleMediaChange = function(mParams) {
        //	var sDeviceName = mParams.name;
        //
        //	// By default, move the content to the right, there should be enough space
        //	this._moveContent = true;
        //
        //	if (sDeviceName == "Phone") {
        //		// On phones, do not move the main content as it does not have enough
        //		// space as it is
        //		this._moveContent = false;
        //	}
        //
        //	// Only write changes if something actually changed
        //	if (this._lastDeviceName !== sDeviceName) {
        //		this._applySecondaryContentSize();
        //	}
        //	this._lastDeviceName = sDeviceName;
        //};

        /**
         * Applies the current status to the content areas (CSS left and width properties).
         *
         * @private
         */
            SplitContainer.prototype._applySecondaryContentSize = function () {
                // Only set if rendered...
                if (this.getDomRef()) {
                    var bVertical = this.getOrientation() === sap.ui.core.Orientation.Vertical;
                    var sSize, sOtherSize;
                    var sDir, sOtherDir, sDirValue;
                    var sSizeValue = this.getSecondaryContentSize();
                    var bShow = this.getShowSecondaryContent();

                    if (bVertical) {
                        // Vertical mode
                        sSize = "height";
                        sOtherSize =  "width";
                        sDir = "top";
                        sOtherDir = this.bRtl ? "right" : "left";
                    } else {
                        // Horizontal mode
                        sSize = "width";
                        sOtherSize =  "height";
                        sDir = this.bRtl ? "right" : "left";
                        sOtherDir = "top";
                    }

                    if (this._closeContentDelayId) {
                        jQuery.sap.clearDelayedCall(this._closeContentDelayId);
                    }

                    this._secondaryContentContainer.css(sSize, sSizeValue);
                    this._secondaryContentContainer.css(sOtherSize, "");
                    if (this._toolArea.getVisible && !this._toolArea.getVisible()) {
                        sDirValue = "0";
                    } else {
                        sDirValue = this._toolArea.getSize ? this._toolArea.getSize() : "0";
                    }

                    this._secondaryContentContainer.css(sDir, bShow ? sDirValue : "-" + sSizeValue);
                    this._secondaryContentContainer.css(sOtherDir, "");

                    // Move main content if it should be completely visible. @see _handleMediaChange()
                    if (this._moveContent) {
                        sSizeValue = this._adjustSecondaryContentSize();
                        this._contentContainer.css(sDir, bShow ? sSizeValue : sDirValue);
                    } else {
                        this._contentContainer.css(sDir, sDirValue);
                    }

                    if (!bShow) {
                        // The theming parameter is something along the lines of "500ms", the "ms"-part is
                        // ignored by parseInt.
                        // TODO: Cache the value.
                        var iHideDelay = parseInt(
                            Parameters.get("sapUshellSplitContAnimationDuration"),
                            10
                        );
                        // Maybe we could also allow "s"-values and then multiply everything below 20 with 1000...?

                        this._closeContentDelayId = jQuery.sap.delayedCall(iHideDelay, this, function () {
                            if (this._secondaryContentContainer) {
                                this._secondaryContentContainer.toggleClass("sapUshellSplitContSecondClosed", true);
                            }
                        });
                    } else {
                        this._secondaryContentContainer.toggleClass("sapUshellSplitContSecondClosed", false);
                    }

                }
            };


            /**
             * Optimization method that prevents the normal render from rerendering the whole control.
             * See _ContentRenderer in file shared.js for details.
             *
             * @param {function} fMod Method that is called to perform the requested change
             * @param {sap.ui.core.Renderer} oDoIfRendered Renderer Instance
             * @returns {any} the return value from the first parameter
             *
             * @private
             */
            SplitContainer.prototype._mod = function (fMod, oDoIfRendered) {
                var bRendered = !!this.getDomRef();
                var res = fMod.apply(this, [bRendered]);
                if (bRendered && oDoIfRendered) {
                    oDoIfRendered.render();
                }
                return res;
            };

            SplitContainer.prototype._adjustSecondaryContentSize = function () {
                var sContentSize = this.getProperty("secondaryContentSize"),
                    sBarSize = this._toolArea.getVisible && this._toolArea.getVisible() ? this._toolArea.getSize() : "0rem";
                sContentSize = parseFloat(sContentSize, 10) + parseFloat(sBarSize, 10) + "rem";

                return sContentSize;
            };

        //////////////////////////////////////// Overridden Methods ////////////////////////////////////////

        //////////////////////////// Property "showSecondaryContent" ///////////////////////////////

            SplitContainer.prototype.setShowSecondaryContent = function (bShow) {
                var bRendered = this.getDomRef();
                this.setProperty("showSecondaryContent", !!bShow, bRendered);

                this._applySecondaryContentSize();
                return this;
            };

        ///////////////////////////// Property "secondaryContentSize" /////////////////////////////

            SplitContainer.prototype.setSecondaryContentSize = function (sSize) {
                this.setProperty("secondaryContentSize", sSize, true);
                this._applySecondaryContentSize();
                return this;
            };

        // Backwards compatibility with old property name

            SplitContainer.prototype.getSecondaryContentWidth = function () {
                jQuery.sap.log.warning(
                    "SplitContainer: Use of deprecated property \"SecondaryContentWidth\", please use " +
                    "\"SecondaryContentSize\" instead."
                );
                return this.getSecondaryContentSize.apply(this, arguments);
            };

            SplitContainer.prototype.setSecondaryContentWidth = function () {
                jQuery.sap.log.warning(
                    "SplitContainer: Use of deprecated property \"SecondaryContentWidth\", please use " +
                    "\"SecondaryContentSize\" instead."
                );
                return this.setSecondaryContentSize.apply(this, arguments);
            };

        /////////////////////////////////// Aggregation "content" //////////////////////////////////

            SplitContainer.prototype.insertContent = function (oContent, iIndex) {
                return this._mod(function (bRendered) {
                    return this.insertAggregation("content", oContent, iIndex, bRendered);
                }, this._canvasRenderer);
            };
            SplitContainer.prototype.addContent = function (oContent) {
                return this._mod(function (bRendered) {
                    return this.addAggregation("content", oContent, bRendered);
                }, this._canvasRenderer);
            };
            SplitContainer.prototype.removeContent = function (vIndex) {
                return this._mod(function (bRendered) {
                    return this.removeAggregation("content", vIndex, bRendered);
                }, this._canvasRenderer);
            };
            SplitContainer.prototype.removeAllContent = function () {
                return this._mod(function (bRendered) {
                    return this.removeAllAggregation("content", bRendered);
                }, this._canvasRenderer);
            };
            SplitContainer.prototype.destroyContent = function () {
                return this._mod(function (bRendered) {
                    return this.destroyAggregation("content", bRendered);
                }, this._canvasRenderer);
            };

        ////////////////////////////// Aggregation "secondaryContent" //////////////////////////////

            SplitContainer.prototype.insertSecondaryContent = function (oContent, iIndex) {
                return this._mod(function (bRendered) {
                    return this.insertAggregation("secondaryContent", oContent, iIndex, bRendered);
                }, this._paneRenderer);
            };
            SplitContainer.prototype.addSecondaryContent = function (oContent) {
                return this._mod(function (bRendered) {
                    return this.addAggregation("secondaryContent", oContent, bRendered);
                }, this._paneRenderer);
            };
            SplitContainer.prototype.removeSecondaryContent = function (vIndex) {
                return this._mod(function (bRendered) {
                    return this.removeAggregation("secondaryContent", vIndex, bRendered);
                }, this._paneRenderer);
            };
            SplitContainer.prototype.removeAllSecondaryContent = function( ) {
                return this._mod(function (bRendered) {
                    return this.removeAllAggregation("secondaryContent", bRendered);
                }, this._paneRenderer);
            };
            SplitContainer.prototype.destroySecondaryContent = function () {
                return this._mod(function (bRendered) {
                    return this.destroyAggregation("secondaryContent", bRendered);
                }, this._paneRenderer);
            };


        })(window);


        return SplitContainer;

    }, /* bExport= */ true);

}; // end of sap/ushell/ui/shell/SplitContainer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.shell.SplitContainerRenderer') ) {
/*!
 * ${copyright}
 */
/*global jQuery, sap, window*/
// Provides default renderer for control sap.ushell.ui.shell.SplitContainer
jQuery.sap.declare('sap.ushell.ui.shell.SplitContainerRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ushell/ui/shell/SplitContainerRenderer",['jquery.sap.global'],
    function (jQuery) {
        "use strict";


        /**
         * SplitContainer renderer.
         * @namespace
         */
        var SplitContainerRenderer = {};

        /**
         * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
         * @param {sap.ui.core.RenderManager} rm the RenderManager that can be used for writing to the Render-Output-Buffer
         * @param {sap.ui.core.Control} oShell an object representation of the control that should be rendered
         */
        SplitContainerRenderer.render = function (rm, oControl) {
            var sId = oControl.getId();

            var bVertical = oControl.getOrientation() === sap.ui.core.Orientation.Vertical;

            rm.write("<div");
            rm.writeControlData(oControl);
            rm.addClass("sapUshellSpltCont");
            rm.addClass("sapUshellSpltCont" + (bVertical ? "V" : "H"));
            if (sap.ui.getCore().getConfiguration().getAnimation()) {
                rm.addClass("sapUshellSpltContAnim");
            }

            if (!oControl.getShowSecondaryContent()) {
                rm.addClass("sapUshellSpltContPaneHidden");
            }
            rm.writeClasses();
            rm.write(">");

            var sSidePaneId = sId + "-pane";
            var sWidth = oControl.getShowSecondaryContent() ? oControl.getSecondaryContentSize() : "0";
            rm.write("<aside id='", sSidePaneId, "' style='width:", sWidth, "'");
            rm.addClass("sapUshellSpltContPane");
            if (!oControl.getShowSecondaryContent()) {
                rm.addClass("sapUshellSplitContSecondClosed");
            }
            rm.writeClasses();
            rm.write(">");
            this.renderContent(rm, sSidePaneId, oControl.getSecondaryContent(), oControl._bRootContent);
            rm.write("</aside>");

            var sCanvasId = sId + "-canvas";
            rm.write("<section id='", sCanvasId, "' class='sapUshellSpltContCanvas'>");
            var aSubHeaders = oControl.getAggregation('subHeaders');
            this.renderContent(rm, sCanvasId, oControl.getContent(), oControl._bRootContent, aSubHeaders);
            rm.write("</section>");
            rm.write("</div>");
        };

        SplitContainerRenderer.renderContent = function (rm, sId, aContent, bRootContent, aSubHeaders) {
            if (bRootContent) {
                this.renderRootContent(rm, sId, aContent, aSubHeaders);
            } else {
                this.renderSecondaryContent(rm, sId, aContent);
            }
        };

        SplitContainerRenderer.renderRootContent = function (rm, sId, aContent, aSubHeaders) {
            rm.write("<div id='", sId, "cntnt' class='sapUshellSpltContCntnt'");
            rm.writeAttribute("data-sap-ui-root-content", "true"); // see e.g. sap.m.App#onAfterRendering
            rm.write(">");
            if (aSubHeaders && aSubHeaders.length) {
                rm.write("<div id='", sId, "subHeaders'>");
                aSubHeaders.forEach(function (oSubHeader, index) {
                    rm.renderControl(oSubHeader);
                });
                rm.write("</div>");
            }
            if (aContent && aContent.length) {
                rm.write("<div id='", sId, "rootContent' class='sapUshellSpltContainerContentWrapper'>");
                aContent.forEach(function (oControl, index) {
                    rm.renderControl(oControl);
                });
                rm.write("</div>");
            }
            rm.write("</div>");
        };

        SplitContainerRenderer.renderSecondaryContent = function (rm, sId, aContent) {
            rm.write("<div id='", sId, "secondaryContent' class='sapUshellSpltContCntnt'>");
            for (var i = 0; i < aContent.length; i++) {
                rm.renderControl(aContent[i]);
            }
            rm.write("</div>");
        };


        return SplitContainerRenderer;

}, /* bExport= */ true);

}; // end of sap/ushell/ui/shell/SplitContainerRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.shell.ToolAreaItem') ) {
/**
 * Created by I074932 on 14/07/2015.
 */
jQuery.sap.declare('sap.ushell.ui.shell.ToolAreaItem'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained
sap.ui.define("sap/ushell/ui/shell/ToolAreaItem",['jquery.sap.global', 'sap/ui/core/Control', 'sap/ui/core/IconPool', 'sap/ushell/library' ],
function (jQuery, Control, IconPool) {
    "use strict";

    /**
     * Constructor for a new ToolAreaItem.
     *
     * @param {string} [sId] id for the new control, generated automatically if no id is given
     * @param {object} [mSettings] initial settings for the new control
     *
     * @class
     * A control to be placed in the tool area
     * @extends sap.ui.core.Control
     *
     * @version ${version}
     *
     * @constructor
     * @public
     * @since 1.30.5
     *
     * @alias sap.ushell.ui.shell.ToolAreaItem
     */

    var ToolAreaItem = Control.extend("sap.ushell.ui.shell.ToolAreaItem", /** @lends sap.ushell.ui.shell.ShellHeadItem.prototype */ {
        metadata : {

        properties : {

            /**
             * Icon that is displayed in the item.
             */
            icon : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},

            /**
             * Defines whether to mark the control as selected
             */
            selected : {type : "boolean", group : "Appearance", defaultValue : false},

            text: {type : "string", group : "Appearance", defaultValue : null},

            /**
             * Text  which will be read by screenreader.
             * @since 1.30
             * @private
             */
            ariaLabel : {type : "string", group : "Appearance", defaultValue : null},

            /**
             * Defines whether to display the control
             */
            visible : {type : "boolean", group : "Appearance", defaultValue : true},

            /**
             * Defines whether the control will have the "expand" functionality
             */
            expandable : {type : "boolean", group : "Appearance", defaultValue : false}
        },
        events : {

            /**
             * Event is fired when the user presses the item.
             */
            press : {},
            /**
             * Event is fired when the user presses the Expand icon.
             */
            expand : {}
        }
    },
        renderer: {
            render: function (rm, oToolAreaItem) {
                var oIcon;

                rm.write("<div");

                rm.writeControlData(oToolAreaItem);
                if (!oToolAreaItem.getIcon()) {
                    rm.addClass("sapUshellToolAreaItmTextOnly");
                } else {
                    rm.addClass("sapUshellToolAreaItm");
                }

                if (!oToolAreaItem.getVisible()) {
                    rm.addClass("sapUshellShellHidden");
                }
                if (oToolAreaItem.getAriaLabel()) {
                    //Handle Aria Label rendering
                    rm.writeAccessibilityState({
                        label: this.getAriaLabel(),
                        role: "button"
                    });
                }
                rm.writeClasses();
                var tooltip = oToolAreaItem.getTooltip_AsString();
                if (tooltip) {
                    rm.writeAttributeEscaped("title", tooltip);
                }
                rm.write(">");
                if (oToolAreaItem.getIcon()) {
                    oIcon = IconPool.createControlByURI(oToolAreaItem.getIcon());
                    oIcon.setUseIconTooltip(false);
                    oIcon.addStyleClass("sapUshellToolAreaItemIcon");
                    rm.renderControl(oIcon);
                }

                if  (oToolAreaItem.getText()) {
                    rm.write("<span");
                    rm.addClass("sapUshellToolAreaItemText");
                    rm.writeClasses();
                    rm.write(">");
                    rm.writeEscaped(oToolAreaItem.getText());
                    rm.write("</span>");
                }

                if (oToolAreaItem.getExpandable()) {
                    this.renderExpandable(rm);
                }
                rm.write("</div>");

            },

            renderExpandable: function(rm) {
                var oIcon = IconPool.createControlByURI("sap-icon://icon-dropdown");
                oIcon.addStyleClass("sapUshellToolAreaItemExpandable");
                rm.renderControl(oIcon);
            }

        }
    });

    ToolAreaItem.prototype.onclick = function (oEvent) {

        if (this.$().parent().hasClass("sapUshellToolAreaItemSelected")) {
            this.setSelected(false);
        } else {
            this.setSelected(true);
        }
        if (oEvent.target.className.indexOf("sapUshellToolAreaItemExpandable") > 0) {
            this.fireExpand();

        } else {
            this.firePress();
        }

    };

    ToolAreaItem.prototype.onsapenter = ToolAreaItem.prototype.onclick;

    ToolAreaItem.prototype.setExpandable = function (bExpandable) {
        bExpandable = !!bExpandable;
        this.setProperty("expandable", bExpandable, true);
        this.$().toggleClass("sapUshellToolAreaItemExpandable", bExpandable);
    };

    ToolAreaItem.prototype.setSelected = function (bSelected) {
        bSelected = !!bSelected;
        if (bSelected) {
            var jqSelected = jQuery(".sapUshellToolAreaItemSelected");
            jqSelected.each( function () {
                jQuery(this).removeClass("sapUshellToolAreaItemSelected");
            });
        }
        this.setProperty("selected", bSelected, true);
        this.$().parent().toggleClass("sapUshellToolAreaItemSelected", bSelected);
    };

    ToolAreaItem.prototype.setVisible = function (bVisible) {
        var bRendered = this.getParent().getDomRef();
        this.setProperty("visible", !!bVisible, bRendered);
        this.$().toggleClass("sapUshellShellHidden", !bVisible);


    };

    ToolAreaItem.prototype.setAriaLabel = function (sAriaLabel) {
        this.setProperty('ariaLabel', sAriaLabel);
        return this;
    };

    return ToolAreaItem;

}, true);

}; // end of sap/ushell/ui/shell/ToolAreaItem.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.tile.TileBase') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.tile.TileBase.
jQuery.sap.declare("sap.ushell.ui.tile.TileBase");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new ui/tile/TileBase.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTitle title} : string</li>
 * <li>{@link #getSubtitle subtitle} : string</li>
 * <li>{@link #getIcon icon} : string</li>
 * <li>{@link #getInfo info} : string</li>
 * <li>{@link #getInfoState infoState} : sap.ushell.ui.tile.State (default: sap.ushell.ui.tile.State.Neutral)</li>
 * <li>{@link #getTargetURL targetURL} : string</li>
 * <li>{@link #getHighlightTerms highlightTerms} : any (default: [])</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getContent content} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.ui.tile.TileBase#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Base class for tiles that already provides several visual elements like title, subtitle, icon and additional information
 * @extends sap.ui.core.Control
 * @version 1.32.6
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.tile.TileBase
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.ushell.ui.tile.TileBase", { metadata : {

	library : "sap.ushell",
	properties : {
		"title" : {type : "string", group : "Data", defaultValue : null},
		"subtitle" : {type : "string", group : "Data", defaultValue : null},
		"icon" : {type : "string", group : "Data", defaultValue : null},
		"info" : {type : "string", group : "Data", defaultValue : null},
		"infoState" : {type : "sap.ushell.ui.tile.State", group : "", defaultValue : sap.ushell.ui.tile.State.Neutral},
		"targetURL" : {type : "string", group : "Behavior", defaultValue : null},
		"highlightTerms" : {type : "any", group : "Appearance", defaultValue : []}
	},
	aggregations : {
		"content" : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.tile.TileBase with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.tile.TileBase.extend
 * @function
 */

sap.ushell.ui.tile.TileBase.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>title</code>.
 * The title of this tile
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>title</code>
 * @public
 * @name sap.ushell.ui.tile.TileBase#getTitle
 * @function
 */

/**
 * Setter for property <code>title</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTitle  new value for property <code>title</code>
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#setTitle
 * @function
 */


/**
 * Getter for property <code>subtitle</code>.
 * A subtitle of this tile (optional)
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>subtitle</code>
 * @public
 * @name sap.ushell.ui.tile.TileBase#getSubtitle
 * @function
 */

/**
 * Setter for property <code>subtitle</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSubtitle  new value for property <code>subtitle</code>
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#setSubtitle
 * @function
 */


/**
 * Getter for property <code>icon</code>.
 * An icon for the tile
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>icon</code>
 * @public
 * @name sap.ushell.ui.tile.TileBase#getIcon
 * @function
 */

/**
 * Setter for property <code>icon</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sIcon  new value for property <code>icon</code>
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#setIcon
 * @function
 */


/**
 * Getter for property <code>info</code>.
 * Additional information displayed at the bottom of the tile
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>info</code>
 * @public
 * @name sap.ushell.ui.tile.TileBase#getInfo
 * @function
 */

/**
 * Setter for property <code>info</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sInfo  new value for property <code>info</code>
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#setInfo
 * @function
 */


/**
 * Getter for property <code>infoState</code>.
 * The state of the info field
 *
 * Default value is <code>Neutral</code>
 *
 * @return {sap.ushell.ui.tile.State} the value of property <code>infoState</code>
 * @public
 * @name sap.ushell.ui.tile.TileBase#getInfoState
 * @function
 */

/**
 * Setter for property <code>infoState</code>.
 *
 * Default value is <code>Neutral</code> 
 *
 * @param {sap.ushell.ui.tile.State} oInfoState  new value for property <code>infoState</code>
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#setInfoState
 * @function
 */


/**
 * Getter for property <code>targetURL</code>.
 * If given, the Control is wrapped into a link pointing to this URL. If empty or not set, the link is not rendered
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>targetURL</code>
 * @public
 * @name sap.ushell.ui.tile.TileBase#getTargetURL
 * @function
 */

/**
 * Setter for property <code>targetURL</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTargetURL  new value for property <code>targetURL</code>
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#setTargetURL
 * @function
 */


/**
 * Getter for property <code>highlightTerms</code>.
 * contains an array of terms that should be highlighted; per default, the array is empty
 *
 * Default value is <code>[]</code>
 *
 * @return {any} the value of property <code>highlightTerms</code>
 * @public
 * @name sap.ushell.ui.tile.TileBase#getHighlightTerms
 * @function
 */

/**
 * Setter for property <code>highlightTerms</code>.
 *
 * Default value is <code>[]</code> 
 *
 * @param {any} oHighlightTerms  new value for property <code>highlightTerms</code>
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#setHighlightTerms
 * @function
 */


/**
 * Getter for aggregation <code>content</code>.<br/>
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ushell.ui.tile.TileBase#getContent
 * @function
 */


/**
 * Inserts a content into the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *          oContent the content to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the content should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the content is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the content is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#insertContent
 * @function
 */

/**
 * Adds some content <code>oContent</code> 
 * to the aggregation named <code>content</code>.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#addContent
 * @function
 */

/**
 * Removes an content from the aggregation named <code>content</code>.
 *
 * @param {int | string | sap.ui.core.Control} vContent the content to remove or its index or id
 * @return {sap.ui.core.Control} the removed content or null
 * @public
 * @name sap.ushell.ui.tile.TileBase#removeContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>content</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.tile.TileBase#removeAllContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>content</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oContent the content whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.tile.TileBase#indexOfContent
 * @function
 */
	

/**
 * Destroys all the content in the aggregation 
 * named <code>content</code>.
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#destroyContent
 * @function
 */


/**
 * called when the tile is clicked / pressed
 *
 * @name sap.ushell.ui.tile.TileBase#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.ushell.ui.tile.TileBase</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.tile.TileBase</code>.<br/> itself. 
 *  
 * called when the tile is clicked / pressed
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.tile.TileBase</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.ushell.ui.tile.TileBase</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.TileBase#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.tile.TileBase} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.tile.TileBase#firePress
 * @function
 */

// Start of sap/ushell/ui/tile/TileBase.js
/*global jQuery, sap*/

/**
 * Base class for applaunchers that provides basic properties like title,
 * subtitle, icon and additional information.
 *
 * @name sap.ushell.ui.tile.TileBase
 *
 * @since   1.15.0
 * @private
 */

(function () {
    "use strict";

    sap.ushell.ui.tile.TileBase.prototype.ontap = function (e) {
        this.firePress({});
    };

    sap.ushell.ui.tile.TileBase.prototype.onsapenter = function (e) {
        this.firePress({});
    };

    sap.ushell.ui.tile.TileBase.prototype.onsapspace = function (e) {
        this.firePress({});
    };
}());

}; // end of sap/ushell/ui/tile/TileBase.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.tile.TileBaseRenderer') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/*global jQuery, sap*/

(function () {
    "use strict";
    
    jQuery.sap.declare("sap.ushell.ui.tile.TileBaseRenderer");

    /**
     * @name sap.ushell.ui.tile.TileBaseRenderer
     * @static
     * @private
     */
    sap.ushell.ui.tile.TileBaseRenderer = {};
    var translationBundle = sap.ushell.resources.i18n;

    /**
     * Searches for occurrences of given searchTerms and substitutes substrings with themselves wrapped in HTML bold tag
     *
     * @param {array} aHighlightTerms an array of strings that will be detected and replaced
     * @param {string} sText contains the text to be highlighted
     * @returns {string} the text with all occurrences wrapped
     * 
     * @private
     */
    sap.ushell.ui.tile.TileBaseRenderer.highlight = function (aHighlightTerms, sText) {
        var i,
            regexpHighlightTerm,
            // immediately escape string for displaying as HTML
            sEscapedText = jQuery.sap.encodeHTML(sText).replace(/&#xa;/g, "<br/>");
        if (aHighlightTerms && aHighlightTerms.length && aHighlightTerms.length > 0) {
            for (i = 0; i < aHighlightTerms.length; i = i + 1) {
                // build regular expression with escaped highlight term (case insensitive + greedy)
                regexpHighlightTerm = new RegExp("(" + jQuery.sap.encodeHTML(aHighlightTerms[i]).replace(/([.*+?\^=!:${}()|\[\]\/\\])/g, "\\$1") + ")", "gi");
                // regexp replace occurrence with wrapped self
                sEscapedText = sEscapedText.replace(regexpHighlightTerm, "<b>$1</b>");
            }
        }
        return sEscapedText;
    };

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    sap.ushell.ui.tile.TileBaseRenderer.render = function (oRm, oControl) {
        // is it necessary to wrap the control into a link?
        var sTileTitleTooltip = translationBundle.getText('launchTileTitle_tooltip', [oControl.getTitle()]),
            sTileSubtitleTooltip =  translationBundle.getText([oControl.getSubtitle()]),
            sInfoPrefix,
            oIcon;
        oRm.write("<div");
        oRm.writeControlData(oControl);
        if (oControl.getTargetURL()){
            oRm.writeAttributeEscaped("data-targeturl", oControl.getTargetURL());
        }
        oRm.writeAttributeEscaped("tabindex", "-1");
        if (sTileSubtitleTooltip === "") {
            oRm.writeAttributeEscaped('title', sTileTitleTooltip);
        } else {
            oRm.writeAttributeEscaped('title', sTileTitleTooltip + "\r\n" + sTileSubtitleTooltip);
        }
        oRm.addClass("sapUshellTileBase");
        oRm.writeClasses();
        oRm.write(">");

        // plain title + subtitle wrapper
        oRm.write("<div");
        oRm.addClass("sapUshellTileBaseHeader");
        oRm.writeClasses();
        oRm.write(">");

        // title
        oRm.write("<h3");
        oRm.addClass("sapUshellTileBaseTitle");
        oRm.writeClasses();
        oRm.writeAccessibilityState(oControl, {label : translationBundle.getText("TileDetails_lable") + translationBundle.getText("TileTitle_lable") + oControl.getTitle()});
        oRm.write(">");
        // note: this mustn't be escaped, as highlight already does that
        oRm.write(this.highlight(oControl.getHighlightTerms(), oControl.getTitle() || ""));
        oRm.write("</h3>");

        // subtitle
        if (oControl.getSubtitle()) {
            oRm.write("<h4");
            oRm.addClass("sapUshellTileBaseSubtitle");
            oRm.writeClasses();
            oRm.writeAccessibilityState(oControl, {label : translationBundle.getText("TileSubTitle_lable") + oControl.getSubtitle()});
            oRm.write(">");
            // note: this mustn't be escaped, as highlight already does that
            oRm.write(this.highlight(oControl.getHighlightTerms(), oControl.getSubtitle()));
            oRm.write("</h4>");
        }

        oRm.write("</div>");


        /* render inheriting controls  */
        if (typeof (this.renderPart) === 'function') {
            this.renderPart(oRm, oControl);
        }

        // icon
        if (oControl.getIcon()) {
            oIcon = new sap.ui.core.Icon({src: oControl.getIcon()});
            oIcon.addStyleClass("sapUshellTileBaseIcon");
            oRm.renderControl(oIcon);
        }

        // begin sapUshellTileBaseInfo
        if (oControl.getInfo() || ((typeof (this.getInfoPrefix) === 'function')) && this.getInfoPrefix(oControl)) {
            oRm.write("<div");
            oRm.addClass("sapUshellTileBaseInfo");
            oRm.addClass(oControl.getInfoState() ? "sapUshellTileBase" + oControl.getInfoState() : "sapUshellTileBase" + sap.ushell.ui.tile.State.Neutral);
            oRm.writeClasses();
            oRm.writeAccessibilityState(oControl, {label : translationBundle.getText("TileInfo_lable") + oControl.getInfo()});
            oRm.write(">");

            // it is possible for subclasses to prefix the info with arbitrary information (e.g. unit ex DynamicTiles)
            if (typeof (this.getInfoPrefix) === 'function') {
                sInfoPrefix = this.getInfoPrefix(oControl);
                oRm.writeEscaped(sInfoPrefix);
            }
            // info string
            if (oControl.getInfo()) {
                // number units are separated from info text with a comma
                if (sInfoPrefix) {
                    oRm.write(", ");
                }
                // note: this mustn't be escaped, as highlight already does that
                oRm.write(this.highlight(oControl.getHighlightTerms(), oControl.getInfo()));
            }
            // end sapUshellTileBaseInfo
            oRm.write("</div>");

        }

        // end control div element
        oRm.write("</div>");
    };
}());
}; // end of sap/ushell/ui/tile/TileBaseRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.User') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview The <code>sap.ushell.User</code> object with related functions.
 */

(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.User");

    

    // "private" methods (static) without need to access properties -------------

    /**
     * Determines the theme root for the given theme
     * @params {string} theme
     * @params {string} system theme root
     * @returns {string} theme root for the given theme
     *
     * @private
     */
    function determineThemeRoot(sTheme, sSystemThemeRoot) {
        if (sTheme.indexOf("sap_") === 0) {
            // SAP theme
            return "";
        }
        return sSystemThemeRoot;
    }

    /**
     * Clone a JSON object.
     *
     * @param {object} object to clone
     * @returns {object} copy of the input object
     *
     * @private
     */
    function clone(oObject) {
        if (oObject === undefined) {
            return undefined;
        }
        try {
            return JSON.parse(JSON.stringify(oObject));
        } catch (e) {
            return undefined;
        }
    }

    // "public class" -----------------------------------------------------------

    /**
     * Constructs a new representation (wrapper) of the user object as loaded by the
     * startup service.
     *
     * @param {object} oContainerAdapterConfig
     *    the result of the startup service call
     * @class A representation of a user
     * @constructor
     * @since 1.15.0
     */
    sap.ushell.User = function (oContainerAdapterConfig) {
        // actually the parameter contains the container adapter config

        // constructor code -------------------------------------------------------
        var aChangedProperties = [],
            sSystemThemeRoot = oContainerAdapterConfig.themeRoot || "",
            oCurrentTheme = oContainerAdapterConfig.bootTheme || {theme: "", root: ""},
            oNextStartupTheme = oCurrentTheme;


        /**
         * Returns this user's email address.
         *
         * @returns {string}
         *   this user's email address
         * @since 1.15.0
         */
        this.getEmail = function () {
            return oContainerAdapterConfig.email;
        };

        /**
         * Returns this user's first name.
         *
         * @returns {string}
         *   this user's first name
         * @since 1.15.0
         */
        this.getFirstName = function () {
            return oContainerAdapterConfig.firstName;
        };

        /**
         * Returns this user's full name.
         *
         * @returns {string}
         *   this user's full name
         * @since 1.15.0
         */
        this.getFullName = function () {
            return oContainerAdapterConfig.fullName;
        };

        /**
         * Returns this user's ID.
         *
         * @returns {string}
         *   this user's ID
         * @since 1.15.0
         */
        this.getId = function () {
            return oContainerAdapterConfig.id;
        };

        /**
         * Returns this user's language.
         *
         * @returns {string}
         *   this user's language
         * @since 1.15.0
         */
        this.getLanguage = function () {
            return oContainerAdapterConfig.language;
        };

        /**
         * Returns this user's language tag as defined by this
         * <a href="http://tools.ietf.org/html/bcp47">spec</a>.
         *
         * @returns {string}
         *   this user's language tag according to BCP 47
         * @since 1.15.0
         */
        this.getLanguageBcp47 = function () {
            return oContainerAdapterConfig.languageBcp47;
        };

        /**
         * Returns this user's last name.
         *
         * @returns {string}
         *   this user's last name
         * @since 1.15.0
         */
        this.getLastName = function () {
            return oContainerAdapterConfig.lastName;
        };

        /**
         * Returns a URI to this user's image.
         *
         * @returns {string}
         *   a URI to this user's image
         * @since 1.21.1
         */
        this.getImage = function () {
            return oContainerAdapterConfig.image;
        };

        /**
         * Returns <code>true</code> if SAP Jam is active for this user.
         *
         * @returns {boolean}
         *   <code>true</code> if SAP Jam is active for this user
         * @since 1.15.0
         */
        this.isJamActive = function () {
            return oContainerAdapterConfig.isJamActive === true;
        };

        /**
         * Returns this user's selected theme.
         *
         * @returns {string}
         *   this user's selected theme
         * @since 1.15.0
         */
        this.getTheme = function () {
            return oCurrentTheme.theme;
        };

        /**
         * Sets this user's selected theme and applies it.
         * Also the theme is prepared to be stored as next start theme on the front-end server.
         * The save itself has to be triggered by method updateUserPreferences of the UserInfo service.
         * The theme root where the theme to be applied is read from is determined considering the
         * theme name. If the theme starts with sap_ the theme is read from the standard UI5
         * theme path. For all other themes the front-end server's system theme root is used.
         *
         * @since 1.15.0
         */
        this.setTheme = function (sNewTheme) {
            if (this.isSetThemePermitted() === false) {
                var sErrorMsg = "setTheme not permitted";
                jQuery.sap.log.error(sErrorMsg);
                throw new Error(sErrorMsg);
            }
            if (sNewTheme !== oNextStartupTheme.theme) {
                // The current theme is not relevant here
                this.setChangedProperties("THEME", oNextStartupTheme.theme, sNewTheme);
                oNextStartupTheme.theme = sNewTheme;
                // This leads to a consistent state only if UserInfo.updateUserPreferences is called!
            }
            oCurrentTheme.theme = sNewTheme;
            oCurrentTheme.root = determineThemeRoot(sNewTheme, sSystemThemeRoot);
            // Apply the selected theme in UI5
            if (oCurrentTheme.root) {
                sap.ui.getCore().applyTheme(oCurrentTheme.theme, oCurrentTheme.root + "/UI5/");
            } else {
                sap.ui.getCore().applyTheme(oCurrentTheme.theme);
            }
        };

        /**
         * Returns <code>true</code> if accessibility is active for this user.
         *
         * @returns {boolean}
         *   <code>true</code> if accessibility is active for this user
         * @since 1.15.0
         */
        this.getAccessibilityMode = function () {
            return oContainerAdapterConfig.accessibility;
        };

        /**
         * Set this user's Accessibility mode.
         *
         * @since 1.15.0
         */
        this.setAccessibilityMode = function (accessibility) {
            if (this.isSetAccessibilityPermitted() === false) {
                var sErrorMsg = "setAccessibilityMode not permitted";
                jQuery.sap.log.error(sErrorMsg);
                throw new Error(sErrorMsg);
            }

            oContainerAdapterConfig.accessibility = accessibility;
        };

        /**
         * Return <code>true</code> if user is permitted to modify accessibility property.
         *
         * @returns {boolean}
         *   <code>true</code> if user is permitted to modify accessibility property.
         * @since 1.15.0
         */
        this.isSetAccessibilityPermitted = function () {
            return oContainerAdapterConfig.setAccessibilityPermitted;
        };

        /**
         * Return <code>true</code> if user is permitted to modify theme property.
         *
         * @returns {boolean}
         *   <code>true</code> if user is permitted to modify theme property.
         * @since 1.15.0
         */
        this.isSetThemePermitted = function () {
            return oContainerAdapterConfig.setThemePermitted;
        };

        /**
         * Returns the content density mode for this user.
         *
         * @returns {string}
         *   the content density mode for this user
         * @see #setContentDensity
         * @since 1.30.0
         */
        this.getContentDensity = function () {
            return oContainerAdapterConfig.contentDensity;
        };

        /**
         * Set the user's content density mode (e.g. "cozy", "compact"...)
         * @param {string} sContentDensity content density mode (e.g. "cozy", "compact"...)
         *
         * @throws Throws {sErrorMsg} if the configuration of ContentDensity for the user is not permitted
         * @see #isSetContentDensityPermitted
         * @since 1.30.0
         */
        this.setContentDensity = function (sContentDensity) {
            if (this.isSetContentDensityPermitted() === false) {
                var sErrorMsg = "setContentDensity not permitted";
                jQuery.sap.log.error(sErrorMsg);
                throw new Error(sErrorMsg);
            }
            this.setChangedProperties("CONTENT_DENSITY", oContainerAdapterConfig.contentDensity, sContentDensity);// test that setChangedProperties is called if it is allowed to change contentDensity
            //
            oContainerAdapterConfig.contentDensity = sContentDensity;
        };


        /**
         * Returns <code>true</code> if user has the permission to modify
         * content density property.
         *
         * @returns {boolean}
         *   <code>true</code> if user is permitted to modify content density property.
         *
         * @see #setContentDensity
         *
         * @since 1.30.0
         */
        this.isSetContentDensityPermitted = function () {
            return oContainerAdapterConfig.setContentDensityPermitted;
        };

        /**
         * Returns this user's array of changed properties.
         *
         * @returns {string}
         *   this user's array of changed properties
         * @since 1.23.0
         */
        this.getChangedProperties = function () {
            return clone(aChangedProperties);
        };

        /**
         * Updates the ChangedProperties attributes array on each setter invocation
         *
         * @since 1.23.0
         */
        this.setChangedProperties = function (propertyName, currentValue, newValue) {
            aChangedProperties.push({ name : propertyName, oldValue : currentValue, newValue : newValue });
        };

        /**
         * Cleans the ChangedProperties array
         *
         * @since 1.23.0
         */
        this.resetChangedProperties = function () {
            aChangedProperties = [];
        };
        // TO DO Would a resetChangedProperty - reset a specific property instead of the whole array -  not make more sense?
    };
}());

}; // end of sap/ushell/User.js
if ( !jQuery.sap.isDeclared('sap.ushell.UserActivityLog') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
* @fileOverview Implementation of FLP User Activity Log.
* Records the User's last _maxLoggedMessages (currently set to 30) Actions and Errors,
*  and last Navigation action details.
* Implementing API for adding a message (either ACTION or ERROR) and retrieving the logged data
*  or the enhanced logged data.
*
* The data is kept on localStorage, hence it is session-based and is cleaned on browser refresh action
*
* Logged Errors and actions:
* Kept on the localStorage in sap.ushell.UserActivityLog.loggingQueue
*  - Any call to jQuery.sap.log is logged using a LogListener
*  - Any Error Message is logged using jQuery.sap.log.error call in the "error" function of Message Service
*  - User Actions that invoke any of the events in _observedLaunchpadActions or _observedGeneralActions are logged
*     using and additional listener (i.e. _handleAction) that is subscribed to those events
*  - Failure in functions of LaunchPage that return Deffered.promise are logged using an additional fail handler
*     that call jQuery.sap.log.error
*
*  Last navigation action's details are kept on the localStorage in sap.ushell.UserActivityLog.lastNavigationActionData
*  and collected using:
*   - Decorator function (i.e. _tileOnTapDecorator) of sap.ushell.ui.tile.TileBase.prototype.ontap event of TileBase
*   - Event handler subscribed to openApp event
*
* Created by I305848 on 2/18/14.
*/

(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.UserActivityLog");
    

    //Constructor
    var UserActivityLogClass =  function () {};

    //Prototype for constructor
    UserActivityLogClass.prototype = {
        _maxLoggedMessages : 30,
        _maxMessageByteSize : 2048,
        _maxQueueByteSize : 30720,
        _isActive : false,

        // Launchpad action events that should trigger logging 
        _observedLaunchpadActions: ["createGroup",
                                    "deleteGroup",
                                    "resetGroup",
                                    "changeGroupTitle",
                                    "moveGroup",
                                    "addTile",
                                    "deleteTile",
                                    "moveTile",
                                    "externalSearch",
                                    "openApp",
                                    "addBookmarkTile"],

        _observedGeneralActions: ["showCatalog",
                                     "openApp"],

        // API - Begin
        messageType : {ACTION: 0, ERROR : 1},

        _tileOntapOrigFunc : undefined,

        activate: function (clean) {
            if (this._isActive) {
                return;
            }

            this._isActive = true;

            var oEventBus = sap.ui.getCore().getEventBus(),
                that = this;

            // Action logging: Subscribe to all the events in  _observedLaunchpadActions - User actions 
            this._observedLaunchpadActions.forEach(function (item, i, arr) {
                oEventBus.subscribe("launchpad", item, that._handleAction, that);
            });

            // Action logging: Subscribe to all the events in  _observedGeneralActions - User actions 
            this._observedGeneralActions.forEach(function (item, i, arr) {
                oEventBus.subscribe(item, that._handleAction, that);
            });

            // Error logging: Add listener to jQuery.sap.log
            jQuery.sap.log.addLogListener(this);
            setTimeout(function () {
                jQuery.sap.require("sap.ushell.ui.launchpad.Tile");
                that._tileOntapOrigFunc = sap.ushell.ui.launchpad.Tile.prototype.ontap;
                sap.ushell.ui.launchpad.Tile.prototype.ontap = that._tileOnTapDecorator(that._tileOntapOrigFunc);
            }, 0);
        },

        deactivate: function () {
            if (!this._isActive) {
                return;
            }

            this._isActive = false;

            var oEventBus = sap.ui.getCore().getEventBus(),
                that = this;

            // Action logging: Unsubscribe to all the events in  _observedLaunchpadActions - User actions
            this._observedLaunchpadActions.forEach(function (item, i, arr) {
                oEventBus.unsubscribe("launchpad", item, that._handleAction, that);
            });

            // Action logging: Unsubscribe to all the events in  _observedGeneralActions - User actions
            this._observedGeneralActions.forEach(function (item, i, arr) {
                oEventBus.unsubscribe(item, that._handleAction, that);
            });

            // Error logging: Remove listener to jQuery.sap.log
            jQuery.sap.log.removeLogListener(this);

            sap.ushell.ui.launchpad.Tile.prototype.ontap = this._tileOntapOrigFunc;
        },

        addMessage : function (type, messageText, messageID) {
            if (this._isActive) {
                this._addMessageInternal(type, messageText, messageID);
            }
        },

        /**
         * Returns the queue that contains the last _maxLoggedMessages (currently - 30) user actions and errors
         */
        getLog: function () {
            // return this._loggingQueue;
            return this._getLoggingQueueFromStorage();
        },

        /**
         * Returns a JSON that contains the last _maxLoggedMessages (currently - 30) user actions and errors,
         * the details of the last navigation actions, user details and shell state
         */
        getMessageInfo : function (sUserText) {
            var result = {
                userDetails: this._getUserDetails(),
                shellState: this._getShellState(),
                navigationData: this._getLastNavActionFromStorage(),
                userLog: this.getLog(),
                formFactor: sap.ushell.utils.getFormFactor()
            };
            return result;
        },

        /**
         * Returns a JSON as String that contains the last _maxLoggedMessages (currently - 30) user actions and errors,
         * the details of the last navigation actions, user details and shell state
         */
        getMessageInfoAsString : function (sUserText) {
            return JSON.stringify(this.getMessageInfo(sUserText));
        },

        // API - End

        // Functions for log listener - Begin
        onLogEntry : function (oData) {
            var sErrorMes = (typeof oData.details != "undefined" && (oData.details !== "")) ? (oData.message + " , " + oData.details) : oData.message;
            this.addMessage(this.messageType.ERROR, sErrorMes);
        },
        onAttachToLog: function () {

        },
        onDetachFromLog: function () {

        },
        // For log listener - End

        // Navigation/ClickOnTile action listener - Begin

        /**
         * Decorator for click-on-Tile action for getting Navigation and Tile details
         */
        _tileOnTapDecorator : function (origFunc) {
            var that = this,
                navigationHash,
                lastNavigationActionData,
                tileObj,
                tileModel,
                bindingCtx,
                tileModelPath;

            return function (event, ui) {
                var tileTypeName = this.getMetadata().getName();

                // If the Tile that was clicked is a PlusTile
                if (tileTypeName == "sap.ushell.ui.launchpad.PlusTile") {
                    that.addMessage(that.messageType.ACTION, "Open Catalog for empty group " + this.getGroupId());

                // If the Tile that was clicked is a regular Tile
                } else if (tileTypeName == "sap.ushell.ui.launchpad.Tile") {
                    // Get the href of the anchor of the clicked tile
                    navigationHash = jQuery(event.currentTarget).find('a').first().attr('href');

                    /*
                    according to wiki PSSEC/SEC-222
                    we need to make sure we don't store sensitive data in the
                    localStorage, therefore we remove the application parameters
                    which might contains sensitive data like account number
                     */
                    if (navigationHash){
                        var urlParsingSvc = sap.ushell.Container.getService("URLParsing");
                        var navObj = urlParsingSvc.parseShellHash(navigationHash);
                        navigationHash = '#' + urlParsingSvc.constructShellHash({
                            target : {
                                semanticObject : navObj.semanticObject,
                                action : navObj.action
                            }
                        });
                    }

                    lastNavigationActionData = that._getLastNavActionFromStorage();
                    lastNavigationActionData.time = new Date();
                    lastNavigationActionData.navigationHash = navigationHash;
                    lastNavigationActionData.tileDebugInfo = this.getDebugInfo();

                    // Get tile title
                    tileObj = sap.ui.getCore().byId(this.getId());
                    tileModel = tileObj.getModel();
                    bindingCtx = this.getBindingContext();
                    tileModelPath = bindingCtx.getPath();

                    lastNavigationActionData.tileTitle = bindingCtx.getModel().getProperty(tileModelPath).title;
                    /*try {
                    	lastNavigationActionData.tileTitle = bindingCtx.getModel().getProperty(tileModelPath).object.title;

                    } catch (e) {
                        lastNavigationActionData.tileTitle = "Tile title";
                    }*/

                    that._putInLocalStorage("sap.ushell.UserActivityLog.lastNavigationActionData", JSON.stringify(lastNavigationActionData));

                    that.addMessage(that.messageType.ACTION, "Click on Tile: " + tileModel.getData().title + " Tile debugInfo: " + this.getDebugInfo());
                }
                origFunc.apply(this, arguments);
            };
        },
        // Navigation/ClickOnTile action listener - End

        /**
         * Adds a new message to the localStorage (sap.ushell.UserActivityLog.loggingQueue)
         *  after validating the message Type and keeping the queue's size limitations
         */
        _addMessageInternal : function (type, messageText, messageID) {
            var loggingQueue = this._getLoggingQueueFromStorage(),
                loggedMessage = {type: null},
                prop;
            for (prop in this.messageType) {
                if (type == this.messageType[prop]) {
                    loggedMessage.type = prop;
                    break;
                }
            }
            if (loggedMessage.type === null) {
                return;
            }
            jQuery.extend(loggedMessage, {
                messageID : messageID,
                messageText : messageText,
                time : new Date(),
                toString : function () {
                    var arr = [this.type, this.time];
                    if (typeof this.messageID !== "undefined") {
                        arr.push(this.messageID);
                    }
                    arr.push(this.messageText);
                    return arr.join(" :: ");
                }
            });
            loggingQueue.push(loggedMessage);
            if (loggingQueue.length > this._maxLoggedMessages) {
                loggingQueue.shift();
            }
            this._putInLocalStorage("sap.ushell.UserActivityLog.loggingQueue", JSON.stringify(loggingQueue));
        },

        /**
         * Handler for user actions.
         * For each action - preparing the appropriate message that is passed to addMessag
         */
        _handleAction : function (sChannelId, sEventId, oData) {
            var sMessage;
            switch (sEventId) {
                case 'deleteTile':
                    sMessage = "Delete Tile " + (oData.tileId || "");
                    break;
                case 'moveTile':
                    sMessage = "Move Tile " + (oData.sTileId || "") + " to Group " + (oData.toGroupId || "");
                    break;
                case 'createGroup':
                    sMessage = "Create Group";
                    break;
                case 'changeGroupTitle':
                    sMessage = "Change Group Title of "  + (oData.groupId || "") + " to " + (oData.newTitle || "");
                    break;
                case 'deleteGroup':
                    sMessage = "Delete Group "  + (oData.groupId || "");
                    break;
                case 'addTile':
                    var oTilesModel = oData.catalogTileContext.oModel.oData,
                        sTilesPath = oData.catalogTileContext.sPath,
                        tile = this._findInModel(sTilesPath, oTilesModel),
                        tileID = tile.id,

                        oGroupsModel = oData.groupContext.oModel.oData,
                        sGroupsPath = oData.groupContext.sPath,
                        group = this._findInModel(sGroupsPath, oGroupsModel),
                        groupID = group.groupId;
                    sMessage = "Add Tile " + (tileID || "") + " to Group " + (groupID || "");
                    break;
                case 'moveGroup':
                    sMessage = "Move Group from index " + (oData.fromIndex || "") + " to index " + (oData.toIndex || "");
                    break;
                case 'openApp':
                    sMessage = "Open application " + oData.action;
                    var lastNavigationActionData = this._getLastNavActionFromStorage();

                    // Add the applicationInformation to the navigation data that was collected before the openApp event
                    lastNavigationActionData.applicationInformation = oData.oApplication;

                    // Check if the hash kept in lastNavigationActionData (the hash of the last app launching action)
                    // equals the current hash.
                    // If the application was launched as a result of clicking on a tile - then the hashes should match,
                    // but if the application was launched by right_click + open_in_new _tab -
                    // then the hashed probably don't match since the hash in lastNavigationActionData is from previous launching action
                    // of a different application, in this case tileDebugInfo does not match the current opened tile/application
                    // because it describes the tile. so it should be removed
                    if (!this._hashSegmentsEqual(lastNavigationActionData.navigationHash, oData.sShellHash)) {
                        lastNavigationActionData.tileDebugInfo = "";
                    }
                    // Anyway the hash of the current opened application is the most relevant one
                    // and should be in lastNavigationActionData.navigationHash
                    lastNavigationActionData.navigationHash = oData.sShellHash;
                    this._putInLocalStorage("sap.ushell.UserActivityLog.lastNavigationActionData", JSON.stringify(lastNavigationActionData));
                    break;
                case 'addBookmarkTile':
                    sMessage = "Add Bookmark " + (oData.title || "") + " " + (oData.subtitle || "") + " for URL: " + (oData.url || "");
                    break;
                case 'showCatalog':
                    sMessage = "Show Catalog";
                    break;
                default :
                    break;
            } // End of switch

            this.addMessage(this.messageType.ACTION, sMessage);
        },

        _findInModel: function (sPath, oModel) {
            var pathArr,
                pointer = oModel,
                i,
                curPath;
            try {
                pathArr = sPath.split("/");
                for (i = 0; i < pathArr.length; i = i + 1) {
                    if (curPath !== pathArr[i]) {
                        continue;
                    }
                    pointer = pointer[curPath];
                }
            } catch (e) {
                return undefined;
            }
            return pointer;
        },

        _getUserDetails : function (sUserText) {
            var user = sap.ushell.Container.getUser();
            return {
                fullName : user.getFullName() || "",
                userId : user.getId() || "",
                eMail : user.getEmail() || "",
                Language : user.getLanguage() || ""
            };
        },

        _getShellState: function () {
            var oNavContainerObj = sap.ui.getCore().byId("navContainer"),
                oModel,
                result = "";
            if (oNavContainerObj !== undefined) {
                oModel = oNavContainerObj.getModel();
                result = oModel.getProperty("/currentState/stateName");
            }
            return result;
        },

        _getLoggingQueueFromStorage : function () {
            var loggingQueue = this._getFromLocalStorage("sap.ushell.UserActivityLog.loggingQueue");
            var queue = [];
            if (loggingQueue){
                try {
                    queue = JSON.parse(loggingQueue);
                } catch(e){
                    //ignore cases where its not a valid JSON
                }
            }
            return queue;
        },

        _getLastNavActionFromStorage : function () {
            var lastNavigationActionData = this._getFromLocalStorage("sap.ushell.UserActivityLog.lastNavigationActionData");
            return (lastNavigationActionData ? JSON.parse(lastNavigationActionData) : {});
        },

        _hashSegmentsEqual : function (url1, url2) {
            // Check if both URLs are not empty
            if ( (!url1) || (!url2) ) {
                return false;
            }
            return (this._getHashSegment(url1) == this._getHashSegment(url2)) ? true : false;
        },

        /**
         * Gets a url (or hash part of a url) and returns the intent,
         * which is the section between the hash and the "~" or the "?" (the first between the two)
         */
        _getHashSegment : function (url) {
            var indexOfTilde = url.indexOf("~"),
                indexOfQuestionMark;
            if (indexOfTilde > -1){
                return url.substring(0, indexOfTilde);
            }

            indexOfQuestionMark = url.indexOf("?");
            if (indexOfQuestionMark > -1){
                return url.substring(0, indexOfQuestionMark);
            }
            return url;
        },

        _getFromLocalStorage : function (key) {
            var returnedValue = null;
            try {
                returnedValue = localStorage.getItem(key);
            } catch (err) {

            }
            return returnedValue;
            },

            _putInLocalStorage : function (key, value) {
            try {
                localStorage.setItem(key, value);
            } catch (err) {
            }
        }
    };

    sap.ushell.UserActivityLog = new UserActivityLogClass();
})();

}; // end of sap/ushell/UserActivityLog.js
if ( !jQuery.sap.isDeclared('sap.ushell.adapters.local.ContainerAdapter') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview The Unified Shell's container adapter for standalone demos.
 *
 * @version 1.32.6
 */
/**
 * @namespace Default namespace for Unified Shell adapters for standalone demos. They can usually
 * be placed directly into this namespace, e.g.
 * <code>sap.ushell.adapters.local.ContainerAdapter</code>.
 *
 * @name sap.ushell.adapters.local
 * @see sap.ushell.adapters.local.ContainerAdapter
 * @since 1.15.0
 */
(function () {
    "use strict";
    /*global jQuery, location, sap, window */
    jQuery.sap.declare("sap.ushell.adapters.local.ContainerAdapter");

    
    


    /**
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.services.initializeContainer("local")</code>.
     * Constructs a new instance of the container adapter for standalone demos.
     *
     * @param {sap.ushell.System} oSystem
     *     the logon system (alias, platform, base URL)
     *
     * @class The Unified Shell's container adapter which does the bootstrap for standalone demos.
     *
     * @constructor
     * @see sap.ushell.services.initializeContainer
     * @since 1.15.0
     */
    sap.ushell.adapters.local.ContainerAdapter = function (oSystem, sParameter, oAdapterConfiguration) {

        var oAdapterConfig,
            oUserConfig,
            oUser,
            sKey;

        oAdapterConfig = jQuery.sap.getObject("config", 0, oAdapterConfiguration);
        oUserConfig = { // default values
            id: "DEFAULT_USER",
            firstName: "Default",
            lastName: "User",
            fullName: "Default User",
            accessibility: false,
            isJamActive: false,
            language: "en",
            bootTheme: {
                theme: "sap_bluecrystal",
                root: ""
            },
            setAccessibilityPermitted: true,
            setThemePermitted: true
        };
        for (sKey in oAdapterConfig) {
            if (oAdapterConfig.hasOwnProperty(sKey)) {
                oUserConfig[sKey] = oAdapterConfig[sKey];
            }
        }


        /**
         * Returns the logon system.
         *
         * @returns {sap.ushell.System}
         *     object providing information about the system where the container is logged in
         *
         * @since 1.15.0
         */
        this.getSystem = function () {
            return oSystem;
        };

        /**
         * Returns the logged-in user.
         *
         * @returns {sap.ushell.User}
         *      object providing information about the logged-in user
         *
         * @since 1.15.0
         */
        this.getUser = function () {
            return oUser;
        };

        /**
         * Does the bootstrap for the demo platform (and loads the container's configuration).
         *
         * @returns {jQuery.Deferred}
         *     a promise that is resolved once the bootstrap is done
         *
         * @since 1.15.0
         */
        this.load = function () {
            var aUserCallbackNamespace,
                sUserCallback,
                oUserCallback,
                oDeferredUserCallback,
                oDeferredLoad = new jQuery.Deferred();

            if (oAdapterConfig && typeof oAdapterConfig.setUserCallback === "string") {
                // enables a delayed setting of the displayed user name
                oDeferredUserCallback = new jQuery.Deferred();
                aUserCallbackNamespace = oAdapterConfig.setUserCallback.split(".");
                sUserCallback = aUserCallbackNamespace.pop();
                if (aUserCallbackNamespace.length === 0) {
                    oUserCallback = window;
                } else {
                    oUserCallback = jQuery.sap.getObject(aUserCallbackNamespace.join("."));
                }
                if (oUserCallback && typeof oUserCallback[sUserCallback] === "function") {
                    oUserCallback[sUserCallback](oDeferredUserCallback);
                } else {
                    throw new sap.ushell.utils.Error("ContainerAdapter local platform: Cannot execute setUserCallback - " +
                            oAdapterConfig.setUserCallback);
                }
                oDeferredUserCallback.done(function (oUserNames) {
                    ["id", "firstName", "lastName", "fullName"].forEach(function (val) {
                        if (oUserNames[val] && typeof oAdapterConfig.setUserCallback !== "function") {
                            oUserConfig[val] = oUserNames[val];
                        }
                    });
                    oUser = new sap.ushell.User(oUserConfig);
                    oDeferredLoad.resolve();
                });
            } else {
                oUser = new sap.ushell.User(oUserConfig);
                oDeferredLoad.resolve();
            }
            return oDeferredLoad.promise();
        };

        /**
         * Logs out the current user from this adapter's systems backend system.
         *
         * @param {boolean} bLogonSystem
         *      <code>true</code> if this system is the logon system
         * @returns {jQuery.Deferred}
         *      a <code>jQuery.Deferred</code> object's promise to be resolved when logout is
         *      finished, even when it failed
         * @since 1.15.0
         * @public
         */
        this.logout = function (bLogonSystem) {
            jQuery.sap.log.info("Demo system logged out: " + oSystem.getAlias(), null,
                "sap.ushell.adapters.local.ContainerAdapter");
            reload();
            return (new jQuery.Deferred()).resolve().promise();
        };
    };

    /**
     * For a demo platform logout no redirect happens but a reload is made
     * to take care that the progress indicator is gone.
     *
     * @private
     */
    sap.ushell.utils.testPublishAt(sap.ushell.adapters.local.ContainerAdapter);
    function reload() {
        location.reload();
    }
}());

}; // end of sap/ushell/adapters/local/ContainerAdapter.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.container.ApplicationContainer') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview The UI integration's SAPUI5 control which supports application embedding.
 * @version 1.32.6
 */
(function () {
    "use strict";
    /*jslint nomen:true */
    /*global  addEventListener, removeEventListener, document, localStorage, jQuery, sap, URI*/

    var sPREFIX = "sap.ushell.components.container.",
        sCOMPONENT = sPREFIX + "ApplicationContainer",
        sDIRTY_STATE_PREFIX = "sap.ushell.Container.dirtyState.",
        mLogouts, /* {sap.ushell.utils.Map} */
        oResourceBundle,
        bFirstLoadOfApplicationContainer = true;

    // Do not use the variables so that UI5 optimizers recognize this declaration
    jQuery.sap.declare("sap.ushell.components.container.ApplicationContainer");

    
    
    jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained

    jQuery.sap.require('sap.m.MessagePopover'); // unlisted dependency retained


    /**
     * Method to adapt the CrossApplicationNavigation service method
     * isUrlSupported to the request as issued by the SAP UI5 MessagePopover control
     *
     * @param {object} an object defined by the MessagePopover control containing the URL
     *  which should be validated and an ES6 promise object which has to be used to receive the validation results.
     *  This promise always needs to be resolved expecting { allowed: true|false } as a an argument to the resolve function.
     *
     * @since 1.30.0
     * @private
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function adaptIsUrlSupportedResultForMessagePopover (oToBeValidated) {
        var oCAService = sap.ushell.Container.getService("CrossApplicationNavigation");
        oCAService.isUrlSupported(oToBeValidated.url).done(function () {
            oToBeValidated.promise.resolve({ "allowed" : true, "id" : oToBeValidated.id });
        }).fail(function () {
            oToBeValidated.promise.resolve({ "allowed" : false, "id" : oToBeValidated.id });
        });
    }

    mLogouts = new sap.ushell.utils.Map();

    /**
     * @namespace The application types supported by the embedding container.
     *
     * @since 1.15.0
     * @private
     */
    sap.ushell.components.container.ApplicationType = {
//          UI5: "UI5", // SAP UI development toolkit for HTML5
        /**
         * This type represents web applications identified by any uniform resource locator. They
         * will be embedded into an <code>IFRAME</code>.
         *
         * @constant
         * @default "URL"
         * @name sap.ushell.components.container.ApplicationType.URL
         * @since 1.15.0
         * @type string
         */
        URL: "URL",
        /**
         * This type represents applications built with Web Dynpro for ABAP. The embedding
         * container knows how to embed such applications in a smart way.
         *
         * @constant
         * @default "WDA"
         * @name sap.ushell.components.container.ApplicationType.WDA
         * @since 1.15.0
         * @type string
         */
        WDA: "WDA",
        /**
         * This type represents applications embedded via NetWeaver Business Client.
         * The embedding container knows how to embed such applications in a smart way.
         *
         * @constant
         * @default "NWBC"
         * @name sap.ushell.components.container.ApplicationType.NWBC
         * @since 1.19.0
         * @type string
         */
        NWBC: "NWBC"
    };

    /**
     * Returns the logout handler function for the given container object.
     *
     * @param {sap.ushell.components.container.ApplicationContainer} oContainer
     *   the container object for which the logout handler is of interest
     * @returns {function}
     *   the logout handler function for the given container. If no handler is registered
     *   <code>undefined</code> is returned.
     * @private
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function getLogoutHandler(oContainer) {
        return mLogouts.get(oContainer.getId());
    }

    /**
     * Returns a map of all search parameters present in the search string of the given URL.
     *
     * @param {string} sUrl
     *   the URL
     * @returns {object}
     *   in member <code>startupParameters</code> <code>map&lt;string, string[]}></code> from key to array of values,
     *   in members <code>sap-xapp-state</code> an array of Cross application Navigation state keys, if present
     *   Note that this key is removed from startupParameters!
     * @private
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function getParameterMap(sUrl) {
        var mParams = jQuery.sap.getUriParameters(sUrl).mParams,
            xAppState = mParams["sap-xapp-state"];
        delete mParams["sap-xapp-state"];
        return {
            startupParameters : mParams,
            "sap-xapp-state" : xAppState
        };
    }

    /**
     * Returns a translated text from the resource bundle.
     *
     * @param {string} sKey
     *   the key in the resource bundle
     * @param {string[]} [aArgs]
     *   arguments to replace {0}..{9}
     * @returns {string}
     *   the translated text
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function getTranslatedText(sKey, aArgs) {
        if (!oResourceBundle) {
            oResourceBundle = jQuery.sap.resources({
                url: jQuery.sap.getModulePath(sPREFIX) + "/resources/resources.properties",
                language: sap.ui.getCore().getConfiguration().getLanguage()
            });
        }
        return oResourceBundle.getText(sKey, aArgs);
    }

    /**
     * Creates some SAPUI5 control telling the user that an error has occured.
     *
     * @returns {sap.ui.core.Control}
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function createErrorControl() {
        return new sap.ui.core.Icon({
            size: "2rem",
            src: "sap-icon://error",
            tooltip: getTranslatedText("an_error_has_occured")
        });
    }

    /**
     * Destroys the child aggregation.
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function destroyChild(oContainer) {
        var oChild = oContainer.getAggregation("child"),
            sComponentName;

        if (oChild instanceof sap.ui.core.ComponentContainer) {
            // name contains .Component - must be trimmed
            sComponentName = oChild.getComponentInstance().getMetadata().getName()
                .replace(/\.Component$/, "");
            jQuery.sap.log.debug("unloading component " + sComponentName, null, sCOMPONENT);
        }
        oContainer.destroyAggregation("child");
    }

    /**
     * Creates a new SAPUI5 view or component for the given container and makes it a child. A view
     * is created if the name ends with ".view.(viewType)".
     * @param {sap.ushell.components.container.ApplicationContainer} oContainer
     *   the container
     * @param {string} sUrl
     *   the base URL
     * @param {string} sAdditionalInformation
     *   the additional information in the form "SAPUI5=<view_or_component_name>"
     * @returns {sap.ui.core.mvc.View|sap.ui.core.Control}
     *   the view, or some "error" control
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function createUi5View(oContainer, sUrl, sAdditionalInformation) {
        /*jslint regexp: true */
        var oComponent,
            oControl,
            iIndex,
            iLast,
            aMatches,
            oUrlData,
            sNamespace,
            oViewData = {},
            sViewName,
            sViewType;

        iIndex = sUrl.indexOf("?");
        if (iIndex >= 0) {
            // pass GET parameters of URL via view data
            oUrlData = getParameterMap(sUrl);
            oViewData = oUrlData.startupParameters;
            sUrl = sUrl.slice(0, iIndex);
        }

        if (sUrl.slice(-1) !== '/') {
            sUrl += '/'; // ensure URL ends with a slash
        }

        if (/\.view\.(\w+)$/i.test(sAdditionalInformation)) {
            // ends with ".view.(viewType)": a view description
            // /SAPUI5=(namespace)/(viewName).view.(viewType)/
            aMatches = /^SAPUI5=(?:([^\/]+)\/)?([^\/]+)\.view\.(\w+)$/i.exec(sAdditionalInformation);
            if (!aMatches) {
                jQuery.sap.log.error("Invalid SAPUI5 URL", sAdditionalInformation, sCOMPONENT);
                return createErrorControl();
            }
            // determine namespace, view name, and view type
            sNamespace = aMatches[1];
            sViewName = aMatches[2];
            sViewType = aMatches[3].toUpperCase(); // @see sap.ui.core.mvc.ViewType

            if (sNamespace) {
                // prefix view name with namespace
                sViewName = sNamespace + "." + sViewName;
            } else {
                // derive namespace from view name's "package"
                iLast = sViewName.lastIndexOf(".");
                if (iLast < 1) {
                    jQuery.sap.log.error("Missing namespace", sAdditionalInformation, sCOMPONENT);
                    return createErrorControl();
                }
                sNamespace = sViewName.slice(0, iLast);
            }
        } else {
            // a component
            sNamespace = sAdditionalInformation.replace(/^SAPUI5=/, "");
        }

        jQuery.sap.registerModulePath(sNamespace, sUrl + sNamespace.replace(/\./g, '/'));

        // destroy the child control before creating a new control with the same ID
        destroyChild(oContainer);
        if (sViewName) {
            if (oContainer.getApplicationConfiguration()) {
                oViewData.config = oContainer.getApplicationConfiguration();
            }
            oControl = sap.ui.view({
                id: oContainer.getId() + "-content",
                type: sViewType,
                viewData: oViewData || {},
                viewName: sViewName
            });
            oContainer.fireEvent("applicationConfiguration");
        } else {
            jQuery.sap.log.debug("loading component " + sNamespace, null, sCOMPONENT);
            // presence of startupParameters member indicates root component, thus
            // we assure it's always filled with at least empty object
            var componentData = oUrlData ? {
                startupParameters: oUrlData.startupParameters,
                "sap-xapp-state" : oUrlData["sap-xapp-state"]
            } : { startupParameters : {}};

            if (oContainer.getApplicationConfiguration()) {
                componentData.config = oContainer.getApplicationConfiguration();
            }

            oComponent = sap.ui.component({
                id: oContainer.getId() + "-component",
                componentData: componentData,
                name: sNamespace
            });
            //TODO ensure event is fired even in error case (try/catch)
            oContainer.fireEvent("applicationConfiguration",
                {"configuration": oComponent.getMetadata().getConfig()});
            oControl = new sap.ui.core.ComponentContainer({
                id: oContainer.getId() + "-content",
                component: oComponent
            });
        }
        oControl.setWidth(oContainer.getWidth());
        oControl.setHeight(oContainer.getHeight());
        oControl.addStyleClass("sapUShellApplicationContainer");
        // Note: As a composite control, we need to aggregate our children (at least internally)!
        oContainer.setAggregation("child", oControl, true);
        return oControl;
    }

    /**
     * publish an external event asynchronously via the event bus
     * The channel id is hard coded to sap.ushell.components.container.ApplicationContainer
     * @param {string} sEventName event name
     * @param {object} oData event parameters
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function publishExternalEvent(sEventName, oData) {
        setTimeout(function () {
            sap.ui.getCore().getEventBus().publish("sap.ushell.components.container.ApplicationContainer", sEventName, oData);
        }, 0);
    }

    /**
     * Creates a new SAPUI5 component for the given container and makes it a child.
     * @param {sap.ushell.components.container.ApplicationContainer} oContainer
     *   the container
     * @param {string} sUrl
     *   the base URL
     * @param {string} sComponentName the component name
     * @returns {sap.ui.core.ComponentContainer|sap.ui.core.Control}
     *   a componentContainer for the component or or some "error" control
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function createUi5Component(oContainer, sUrl, sComponentName) {
        /*jslint regexp: true */
        var iIndex,
            oComponent,
            oComponentContainer,
            oUrlData,
            oComponentData = { startupParameters : {}};

        iIndex = sUrl.indexOf("?");
        if (iIndex >= 0) {
            // pass GET parameters of URL via component data as member startupParameters and as xAppState
            // (to allow blending with other oComponentData usage, e.g. extensibility use case)
            oUrlData = getParameterMap(sUrl);
            oComponentData = {
                startupParameters : oUrlData.startupParameters,
                "sap-xapp-state" : oUrlData["sap-xapp-state"]
            };
            sUrl = sUrl.slice(0, iIndex);
        }

        if (oContainer.getApplicationConfiguration()) {
            oComponentData.config = oContainer.getApplicationConfiguration();
        }

        if (sUrl.slice(-1) !== '/') {
            sUrl += '/'; // ensure URL ends with a slash
        }
        // the root component's name is also the namespace for all component-internal modules; so
        // we register the URL (which must point to the component's folder) as module path;
        // TODO: clarify if there are requirements for additional path components
        jQuery.sap.registerModulePath(sComponentName, sUrl);

        // applications require these but should not load it, to degrade carefully
        // when running outside of the shell, so we must require this
        jQuery.sap.require("sap.ushell.services.CrossApplicationNavigation");

        // destroy the child control before creating a new control with the same ID
        destroyChild(oContainer);

        jQuery.sap.log.debug("loading component " + sComponentName, null, sCOMPONENT);
        sap.ui.getCore().getEventBus().publish("sap.ushell.components.container.ApplicationContainer", "_prior.newUI5ComponentInstantion",
            {
                name : sComponentName
            }
        );

        oComponent = sap.ui.component({
            id: oContainer.getId() + "-component",
            name: sComponentName,
            componentData: oComponentData
        });
        //TODO ensure event is fired even in error case (try/catch)
        oContainer.fireEvent("applicationConfiguration",
                {"configuration": oComponent.getMetadata().getConfig()});
        oComponentContainer = new sap.ui.core.ComponentContainer({
            id: oContainer.getId() + "-content",
            component: oComponent
        });
        oComponentContainer.setHeight(oContainer.getHeight());
        oComponentContainer.setWidth(oContainer.getWidth());
        oComponentContainer.addStyleClass("sapUShellApplicationContainer");
        oContainer._disableRouterEventHandler = disableRouter.bind(this, oComponent);
        sap.ui.getCore().getEventBus().subscribe("sap.ushell.components.container.ApplicationContainer","_prior.newUI5ComponentInstantion", oContainer._disableRouterEventHandler);

        // Note: As a composite control, we need to aggregate our children (at least internally)!
        oContainer.setAggregation("child", oComponentContainer, true);
        publishExternalEvent("componentCreated", { component: oComponent });
        return oComponentContainer;
    }


    /**
     * Invoke <code>getRouter.stop()<code> on the oComponentAn event handler for the onNewAppInstantiated event
     * @param {object} oComponent
     *   a SAPUI5 Component instance
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function disableRouter(oComponent) {
        var rt;
        if ((oComponent instanceof sap.ui.core.Component) && (typeof oComponent.getRouter === "function")) {
            rt = oComponent.getRouter();
            if (rt && (typeof rt.stop === "function")) {
                jQuery.sap.log.info("router stopped for instance " + oComponent.getId());
                rt.stop();
            }
        }
    }

    /**
     * Creates a system object that describes the URL's server.
     * @param {string} sUrl
     *   the URL
     * @param {object}
     *   the system object with <code>alias</code>, <code>baseUrl</code> describing the URL's
     *   server and <code>client</code> the client from the request property
     *   <code>sap-client</code>.
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function createSystemForUrl(sUrl) {
        var oAnchor = document.createElement("a"),
            sClient = jQuery.sap.getUriParameters(sUrl).get("sap-client"),
            sBase;

        oAnchor.href = sUrl;
        sBase = oAnchor.protocol + "//" + oAnchor.host;
        return new sap.ushell.System({
            alias: sClient ? sBase + "?sap-client=" + sClient : sBase,
            baseUrl: sBase,
            client: sClient || undefined,
            platform: "abap"
        });
    }

    /**
     * Determine if the source of a received postMessage can be considered as trusted. We consider
     * the content window of the application container's iframe as trusted, plus any other window
     * with the same origin in case of application type NWBC.
     *
     * @param {object} oContainer
     *   the application container instance
     * @param {object} oMessage
     *   the postMessage event object
     * @returns {boolean}
     *   true if source is considered to be trustworthy
     * @private
     * @since 1.24
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function isTrustedPostMessageSource(oContainer, oMessage) {
        var bTrusted = false,
            oDomRef = oContainer.getDomRef(),
            sApplicationType = oContainer.getApplicationType(),
            oUri,
            sOrigin;

        if (oDomRef) {
            if (sApplicationType === sap.ushell.components.container.ApplicationType.NWBC) {
                // if our frame embeds an NWBC application, we trust the frame itself and all frames from the same origin
                // this is required to support the WDA intent-based navigation scenario
                oUri = URI(oDomRef.src);
                sOrigin = oUri.protocol() + "://" + oUri.host();

                bTrusted = (oMessage.source === oDomRef.contentWindow) || (oMessage.origin === sOrigin);
            } else if (sApplicationType === sap.ushell.components.container.ApplicationType.URL) {
                // if our frame embeds an arbitrary URL application, we only trust it if it's from the same origin than our own page
                // for generalization of the feature, we would need some white list check here; right now, we need application type URL
                // only for testing
                oUri = URI();
                sOrigin = oUri.protocol() + "://" + oUri.host();

                bTrusted = (oMessage.origin === sOrigin);
            }
        }

        return bTrusted;
    }


    /**
     * Helper method for handling CrossApplicationNavigation service invocation via post message events
     * <p>
     * This feature is disabled by default, because it is not consumed by WebDynpro ABAP in version 1.24 (UI Add-on SP10).
     * It can be enabled via launchpad configuration as follows (not a public option, might be changed later):
     * <code>
     *  {
     *      services: {
     *          PostMessage: {
     *              config: {
     *                  enabled: true
     *              }
     *          }
     *      }
     *  }
     * </code>
     *
     * @param {object} oContainer the ApplicationContainer instance
     * @param {Event} oMessage
     *   the received postMessage event
     * @param {object] oMessageData the parsed message data
     *
     * @private
     * @since 1.24
     *
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function handleCrossApplicationNavigationMessageEvent(oContainer, oMessage, oMessageData) {
        // we anticipate the PostMessage service for the configuration although it's not there
        // (if it doesn't come, we'll just remove the configuration option)
        var oPostMessageServiceConfig = jQuery.sap.getObject("sap-ushell-config.services.PostMessage.config", 0),
            sService = oMessageData && oMessageData.service;

        if (!sService ||
                sService.indexOf("sap.ushell.services.CrossApplicationNavigation") !== 0 ||
                oMessageData.type !== "request") {
            // silently ignore any other messages
            return;
        }

        if (oPostMessageServiceConfig && oPostMessageServiceConfig.enabled === false) {
            jQuery.sap.log.warning("Received message for CrossApplicationNavigation, but this " +
                    "feature is disabled. It can be enabled via launchpad configuration " +
                    "property 'services.PostMessage.config.enabled: true'",
                    undefined, "sap.ushell.components.container.ApplicationContainer");
            return;
        }

        if (!isTrustedPostMessageSource(oContainer, oMessage)) {
            // log w/ warning level, message would normally processed by us
            jQuery.sap.log.warning("Received message from untrusted origin: " + oMessage.origin,
                    oMessage.data, "sap.ushell.components.container.ApplicationContainer");
            return;
        }

        /**
         * Sends the response message in the expected format
         */
        function sendResponseMessage(sStatus, oBody) {
            oMessage.source.postMessage(JSON.stringify({
                type: "response",
                service: oMessageData.service,
                request_id: oMessageData.request_id,
                status: sStatus,
                body: oBody
            }), oMessage.origin);
        }

        /**
         * Executes the service call and returns a promise. In case that the service call is
         * not asynchronous the promise will be resolved immediately.
         * This function maps a semantic service name on a concrete service implementation
         * @param {string} sServiceName the service name of the post mes{sage exposed services
         * @returns {object} promise or undefined, if invalid service name
         */
        function executeServiceCall(sServiceName) {
            switch (sServiceName) {
            case "sap.ushell.services.CrossApplicationNavigation.hrefForExternal":
                return new jQuery.Deferred().resolve(sap.ushell.Container.getService("CrossApplicationNavigation").hrefForExternal(oMessageData.body.oArgs)).promise();
            case "sap.ushell.services.CrossApplicationNavigation.getSemanticObjectLinks":
                // beware sSemanticObject may also be an array of argument arrays
                // {sSemanticObject, mParameters, bIgnoreFormFactors }
                return sap.ushell.Container.getService("CrossApplicationNavigation").getSemanticObjectLinks(oMessageData.body.sSemanticObject, oMessageData.body.mParameters, oMessageData.body.bIgnoreFormFactors, undefined, undefined, oMessageData.body.bCompactIntents);
            case "sap.ushell.services.CrossApplicationNavigation.isIntentSupported":
                return sap.ushell.Container.getService("CrossApplicationNavigation").isIntentSupported(oMessageData.body.aIntents);
            case "sap.ushell.services.CrossApplicationNavigation.isNavigationSupported":
                return sap.ushell.Container.getService("CrossApplicationNavigation").isNavigationSupported(oMessageData.body.aIntents);
            case "sap.ushell.services.CrossApplicationNavigation.toExternal":
                return new jQuery.Deferred().resolve(sap.ushell.Container.getService("CrossApplicationNavigation").toExternal(oMessageData.body.oArgs)).promise();
            case "sap.ushell.services.CrossApplicationNavigation.getAppStateData":
                // note: sAppStateKey may be an array of argument arrays
                return sap.ushell.Container.getService("CrossApplicationNavigation").getAppStateData(oMessageData.body.sAppStateKey);
            default:
                return undefined;
            }
        }

        try {
            executeServiceCall(oMessageData.service)
                .done(function (oResult) {
                    sendResponseMessage("success", {result: oResult});
                })
                .fail(function (sMessage) {
                    sendResponseMessage("error", {message: sMessage});
                });
        } catch (oError) {
            sendResponseMessage("error", {message: oError.message});
        }
    }

    /**
     * Event handler receiving post message events
     *
     * @param {Event} oMessage
     *   the received postMessage event
     *
     * @private
     * @since 1.21.2
     *
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function handleMessageEvent(oContainer, oMessage) {
        var oMessageData = oMessage.data;


        if (typeof oMessageData === "string") {
            // it's possible that the data attribute is passed as string (IE9)
            try {
                oMessageData = JSON.parse(oMessage.data);
            } catch (e) {
                // could be some message which is not meant for us, so we just log with debug level
                jQuery.sap.log.debug(
                    "Message received from origin '" + oMessage.origin + "' cannot be parsed: " + e,
                    oMessageData,
                    "sap.ushell.components.container.ApplicationContainer"
                );
                return;
            }
        }
        if (oMessageData.action === "pro54_setGlobalDirty" &&
                localStorage.getItem(oContainer.globalDirtyStorageKey) ===
                sap.ushell.Container.DirtyState.PENDING) {
            if (!isTrustedPostMessageSource(oContainer, oMessage)) {
                // log w/ warning level, message would normally processed by us
                jQuery.sap.log.warning("Received message from untrusted origin: " + oMessage.origin,
                        oMessageData, "sap.ushell.components.container.ApplicationContainer");
                return;
            }
            jQuery.sap.log.debug("getGlobalDirty() pro54_setGlobalDirty SetItem key:" +
                oContainer.globalDirtyStorageKey + " value: " +
                oMessageData.parameters.globalDirty,
                null,
                "sap.ushell.components.container.ApplicationContainer"
                );
            sap.ushell.utils.localStorageSetItem(oContainer.globalDirtyStorageKey,
                oMessageData.parameters.globalDirty, true);
        } else {
            // delegate to separate method for CrossAppNavigation invocation
            handleCrossApplicationNavigationMessageEvent(oContainer, oMessage, oMessageData);
        }
    }

    /**
     * Logout Event Handler.
     * Calls the logout URL when the NWBC is used in the canvas.
     *
     * @param {sap.ushell.components.container.ApplicationContainer} oContainer
     *   application container having the NWBC iframe
     * @param {sap.ui.base.Event} oEvent
     *   oEvent.preventDefault() is called to let the caller know that the
     *   following redirect has to be deferred in order get the NWBC logout done.
     *
     * @private
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function logout(oContainer, oEvent) {
        var oIframe = oContainer.getDomRef();

        if (oContainer.getApplicationType() === sap.ushell.components.container.ApplicationType.NWBC &&
                oIframe && oIframe.tagName === "IFRAME") {
            oIframe.contentWindow.postMessage(JSON.stringify(
                { action: "pro54_disableDirtyHandler"}
            ), '*');
            // tell caller that at least one NWBC needs some time to receive a message
            oEvent.preventDefault();
        }
    }

    /**
     * Renders the given child control inside a DIV representing the given container.
     *
     * @param {sap.ui.core.RenderManager} oRenderManager
     * @param {sap.ushell.components.container.ApplicationContainer} oContainer
     *     the application container which is "replaced" by the error control
     * @param {sap.ui.core.Control} [oChild]
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function renderControlInDiv(oRenderManager, oContainer, oChild) {
        oRenderManager
            .write("<div")
            .writeControlData(oContainer)
            .writeAccessibilityState(oContainer)
            .addClass("sapUShellApplicationContainer")
            .writeClasses(oContainer)
            .addStyle("height", oContainer.getHeight())
            .addStyle("width", oContainer.getWidth())
            .writeStyles()
            .write(">")
            .renderControl(oChild);
        oRenderManager
            .write("</div>");
    }

    /**
     * Amends the NavTargetResolution response with theme, sap-ushell-version, accessibility and post parameters if present.
     * Theme and accessibility information is only added for the NWBC application type.
     *
     * @param {string} sUrl
     *   Already resolved url (NavTargetResolution response)
     * @returns {string}
     *   Modified url having additional parameters
     * @private
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function adjustNwbcUrl(sUrl) {
        var sTheme,
            getTheme = function () {
                return jQuery.sap.getUriParameters().get("sap-theme")
                    || sap.ushell.Container.getUser().getTheme()
                    || sap.ui.getCore().getConfiguration().getTheme();
            },
            getAccessibility = function () {
                var vUrl = sap.ushell.utils.getParameterValueBoolean("sap-accessibility");
                if (vUrl !== undefined) {
                    return vUrl;
                }
                return sap.ushell.Container.getUser().getAccessibilityMode();
            },
            sVersion,
            getVersion = function () {
                var sVersion = sap.ui.getVersionInfo().version,
                    oMatch = /\d+\.\d+\.\d+/.exec(sVersion);
                if (oMatch && oMatch[0]) {
                    sVersion = oMatch[0];
                }
                return sVersion;
            };
        // force IE to edge mode
        sUrl += sUrl.indexOf("?") >= 0 ? "&" : "?";
        sUrl += "sap-ie=edge";
        // transport sap-theme to NWBC HTML 3.6
        sTheme = getTheme();
        if (sTheme) {
            // NWBC and embedded WDA/WebGui share the sap-theme parameter!
            // WDA does not support sap_bluecrystal, let default be used
            // then! (NWBC defaults to sap_bluecrystal)
            sUrl += sUrl.indexOf("?") >= 0 ? "&" : "?";
            sUrl += "sap-theme=" + encodeURIComponent(sTheme);
            //TODO replace existing URL parameter?
        }
        if (getAccessibility()) {
            // propagate accessibility mode
            sUrl += sUrl.indexOf("?") >= 0 ? "&" : "?";
            sUrl += "sap-accessibility=X";
            //TODO replace existing URL parameter?
        }
        sVersion = getVersion();
        if (sVersion) {
            // we pass it either completely or not at all
            sUrl += sUrl.indexOf("?") >= 0 ? "&" : "?";
            sUrl += "sap-shell=" + encodeURIComponent("FLP" + sVersion + "-NWBC");
        }
        return sUrl;
    }

    /**
     * Renders the SAPUI5 component with the given name and URL. If the child aggregation is already set and no properties have changed,
     * the component is not recreated.
     */
    function renderUi5Component(oRenderManager, oContainer, sUrl, sComponentName) {
        var oChild = oContainer.getAggregation("child");

        if (!oChild || oContainer._bRecreateChild) {
            oChild = createUi5Component(oContainer, sUrl, sComponentName);
            oContainer._bRecreateChild = false;
        }

        renderControlInDiv(oRenderManager, oContainer, oChild);
    }

    /**
     * Sets the property with the specified key and value and sets the flag _bPropertyChanged to true
     */
    function setProperty(oContainer, sKey, vValue) {
        var vOldValue = oContainer.getProperty(sKey);

        if (jQuery.sap.equal(vOldValue, vValue)) {
            return;
        }

        oContainer.setProperty(sKey, vValue);
        oContainer._bRecreateChild = true;
    }

    /**
     * Renders the given container control with the help of the given render manager using the given
     * attributes.
     *
     * @param {sap.ui.core.RenderManager} oRenderManager
     * @param {sap.ushell.components.container.ApplicationContainer} oContainer
     * @param {sap.ushell.components.container.ApplicationType} sApplicationType
     *   the application type
     * @param {string} sUrl
     *   the base URL
     * @param {string} sAdditionalInformation
     *   the additional information in the form "SAPUI5=&lt;view name&gt;"
     */
    sap.ushell.utils.testPublishAt(sap.ushell.components.container);
    function render(oRenderManager, oContainer, sApplicationType, sUrl, sAdditionalInformation) {
        var fnLogout;

        // remove container from list of NWBC-containing containers
        // (if this container was an NWBC container before)
        localStorage.removeItem(oContainer.globalDirtyStorageKey);

        // render as SAPUI5 component if specified in additionalInformation
        if (sAdditionalInformation &&
                sAdditionalInformation.indexOf("SAPUI5.Component=") === 0 &&
                sApplicationType === sap.ushell.components.container.ApplicationType.URL) {

            renderUi5Component(oRenderManager, oContainer, sUrl, sAdditionalInformation.replace(/^SAPUI5\.Component=/, ""));
            return;
        }

        // render as SAPUI5 view if specified in additionalInformation
        if (sAdditionalInformation
                && sAdditionalInformation.indexOf("SAPUI5=") === 0
                && sApplicationType === sap.ushell.components.container.ApplicationType.URL) {
            renderControlInDiv(oRenderManager, oContainer,
                createUi5View(oContainer, sUrl, sAdditionalInformation));
            return;
        }
        jQuery.sap.log.debug("Not resolved as \"SAPUI5.Component=\" or \"SAPUI5=\" , " +
            "will attempt to load into iframe " + sAdditionalInformation);

        try {
            sUrl = oContainer.getFrameSource(sApplicationType, sUrl, sAdditionalInformation);
        } catch (ex) {
            jQuery.sap.log.error(ex.message || ex, null, sCOMPONENT);
            oContainer.fireEvent("applicationConfiguration");
            oRenderManager.renderControl(createErrorControl());
            return;
        }

        if (sap.ushell.Container) {
            fnLogout = getLogoutHandler(oContainer);
            if (!fnLogout) {
                if (sApplicationType === sap.ushell.components.container.ApplicationType.NWBC) {
                    // create only for NWBC if not already existing
                    fnLogout = logout.bind(null, oContainer);
                    mLogouts.put(oContainer.getId(), fnLogout);
                    sap.ushell.Container.attachLogoutEvent(fnLogout);
                    sap.ushell.Container.addRemoteSystem(createSystemForUrl(sUrl));
                }
            } else {
                if (sApplicationType !== sap.ushell.components.container.ApplicationType.NWBC) {
                    // detach if not used *anymore*
                    sap.ushell.Container.detachLogoutEvent(fnLogout);
                    mLogouts.remove(oContainer.getId());
                }
            }
        }

        if (sApplicationType === sap.ushell.components.container.ApplicationType.NWBC) {
            // amend already resolved url with additional parameters
            sUrl = adjustNwbcUrl(sUrl);
            // add this container to list of NWBC-containing containers
            sap.ushell.utils.localStorageSetItem(oContainer.globalDirtyStorageKey,
                sap.ushell.Container.DirtyState.INITIAL);
        }

        // embed URL via <IFRAME>
        oContainer.fireEvent("applicationConfiguration");
        oRenderManager
            .write("<iframe")
            .writeControlData(oContainer)
            .writeAccessibilityState(oContainer)
            .writeAttributeEscaped("src", sUrl)
            .addClass("sapUShellApplicationContainer")
            .writeClasses(oContainer)
            .addStyle("height", oContainer.getHeight())
            .addStyle("width", oContainer.getWidth())
            .writeStyles()
            .write("></iframe>");
    }

    /**
     * Creates a new container control embedding the application with the given URL. The default
     * application type is "URL" and allows to embed web applications into an <code>IFRAME</code>.
     * By default, the container is visible and occupies the whole width and height of its parent.
     *
     * @class A container control capable of embedding a variety of application types.
     * <p>
     * <strong>Experimental API: This container is still under construction, so some
     * implementation details can be changed in future.</strong>
     * </p><p>
     * <b>Note:</b> The browser does not allow to move an <code>IFRAME</code> around in the DOM
     * while keeping its state. Thus every rerendering of this control necessarily resets the
     * embedded web application to its initial state!
     * </p><p>
     * <b>Note:</b> You <b>must</b> <code>exit</code> the control when you no longer need it.
     *
     * </p><p>
     * <b>Embedding SAPUI5 Components:</b>
     * </p><p>
     * The container is able to embed an SAPUI5 component. It is embedded directly into the page,
     * no <code>IFRAME</code> is used.
     * </p><p>
     * SAPUI5 components are described with <code>applicationType</code> "URL", a base URL and the
     * component name in <code>additionalInformation</code>. The format is
     * <code>SAPUI5=<i>componentNamespace</i></code>. The application container will register a
     * module path for the URL with the component's namespace.
     * </p><p>
     * The query parameters from the URL will be passed into the component. They can be retrieved
     * using the method <code>getComponentData()</code>. Query parameters are always passed as
     * arrays (see example 2 below).
     * </p><p>
     * <b>Example 1:</b> Let <code>url</code> be "http://anyhost:1234/path/to/app" and
     * <code>additionalInformation</code> be "SAPUI5=some.random.package". Then the
     * container registers the path "http://anyhost:1234/path/to/app/some/random/package" for the
     * namespace "some.random.package", loads and creates "some.random.package.Component".
     * </p><p>
     * <b>Example 2:</b> Let <code>url</code> be "http://anyhost:1234/?foo=bar&foo=baz&bar=baz".
     * Then the <code>componentData</code> object will be
     * <code>{foo: ["bar", "baz"], bar: ["baz"]}</code>.
     * </p><p>
     * <b>Warning:</b> The container control embeds a <i>component</i> only. This can only work if
     * this component is fully encapsulated and properly declares all dependencies in its metadata
     * object. If you want to support that your component can be embedded into a shell using this
     * container, you have to prepare it accordingly:
     * <ul>
     * <li>The container control can only embed components that originate on the same server as the
     * shell due to the browser's same origin policy. Consider using an SAP Web Dispatcher if this
     * is not the case.
     * <li>If your component relies on some additional Javascript, declare the dependencies to
     * libraries or other components in the component's metadata object.
     * <li>Do <i>not</i> use <code>jQuery.sap.registerModulePath()</code> with a relative URL. The
     * base for this relative URL is the web page. And this page is the shell when embedding the
     * component via the container, not the page you used when developing the component.
     * <li>If your component needs additional styles, declare them using the <code>includes</code>
     * property of the component metadata object.
     * <li> Consider calling <code>jQuery.sap.getModulePath(&lt;componentName&gt;)</code> to
     * determine the root path of your component.
     * <li>If any of these requirements is not met, it is still possible to embed this view with
     * its own page using <code>applicationType="URL"</code>, no <code>additionalInformation</code>
     * and the URL of the web page in <code>url</code>. Then of course it is embedded using an
     * <code>IFRAME</code>. This has many limitations, especially the resource-based navigation
     * using hash changes will not be supported.
     * </ul>
     *
     * </p><p>
     * <b>Embedding SAPUI5 Views</b>
     * <p>
     * Embedding views is <strong>deprecated</strong> and might not be supported in future versions.
     * </p>
     * <p>
     * It is also possible to embed a SAPUI5 view. It is embedded directly into the page, no
     * <code>IFRAME</code> is used.
     * </p><p>
     * SAPUI5 views are described with <code>applicationType</code> "URL", a base URL and the view
     * description in <code>additionalInformation</code>. The format is
     * <code>SAPUI5=<i>namespace</i>.<i>viewName</i>.view.<i>viewType</i></code>. From
     * this information the module path and the view URL is determined. Request parameters present
     * in the URL will be passed to the created view and can be accessed via
     * <code>sap.ui.core.mvc.View#getViewData()</code>. The object passed to the view data is the
     * same as describe for the component data above.
     * </p><p>
     * <b>Warning:</b> The container control embeds a <i>view</i> only. So similar restrictions
     * as for components apply. Since the view has no metadata object to describe dependencies you
     * will have to use <code>jQuery.sap.require()</code> to load needed modules and
     * <code>jQuery.sap.includeStyleSheet()</code> to load additional styles.
     *
     * @extends sap.ui.core.Control
     * @name sap.ushell.components.container.ApplicationContainer
     * @since 1.15.0
     *
     * @property {string} [additionalInformation=""]
     *   Additional information about the application. Currently this is used to describe a SAPUI5
     *   component or a view in a SAPUI5 application.
     * @property {object} [application]
     *   The application descriptor as received from the start-up service. If an application is
     *   given the properties <code>url</code>, <code>applicationType</code> and
     *   <code>additionalInformation</code> are taken from the application and <i>not</i> from the
     *   control properties.
     * @property {object} [applicationConfiguration]
     *   The configuration data of this application as defined in the application descriptor
     *    or in the flexible configuration object.
     * @property {sap.ushell.components.container.ApplicationType} [applicationType="URL"]
     *   The type of the embedded application.
     * @property {sap.ui.core.CSSSize} [height="100%"]
     *   The container's height as a CSS size. This attribute is provided to the browser "as is"!
     *   <b>Note:</b> The HTML 4.01 specification allows pixels and percentages,
     *   but the HTML 5 specification allows pixels only!
     * @property {string} url
     *   The URL to the embedded application.
     * @property {boolean} [visible="true"]
     *   Whether the container control is visible at all. <b>Note:</b> An invisible container does
     *   not render any DOM content. Changing the visibility leads to rerendering!
     * @property {sap.ui.core.CSSSize} [width="100%"]
     *   The container's width as a CSS size. This attribute is provided to the browser "as is"!
     *   <b>Note:</b> The HTML 4.01 specification allows pixels and percentages,
     *   but the HTML 5 specification allows pixels only!
     */
    /**
     * Event which is fired when the <code>ApplicationContainer</code> control is rendered. The
     * event holds a technology specific configuration object for the embedded application.
     * As of now, only configuration for an embedded <em>SAPUI5 component</em> is supported.
     *
     * @event
     * @name sap.ushell.components.container.ApplicationContainer.applicationConfiguration
     * @param {object} configuration
     *     The technology specific configuration object of the embedded application.
     *     <code>undefined</code>, if the <code>ApplicationContainer</code> control does not
     *     provide a configuration for the technology of the embedded application or if there is a
     *     rendering issue with the application.<br/>
     *     For SAPUI5 components, the <code>config</code> property of the component metadata is
     *     provided.
     *
     * @public
     */
    sap.ui.core.Control.extend(sCOMPONENT, {
        metadata: {
            properties: {
                additionalInformation: {defaultValue: "", type: "string"},
                application: {type: "object"},
                applicationConfiguration: {type: "object"},
                applicationType: {defaultValue: "URL", type: sPREFIX + "ApplicationType"},
                height: {defaultValue: "100%", type: "sap.ui.core.CSSSize"},
                navigationMode: {defaultValue : "", type: "string"},
                text: {defaultValue : "", type: "string"},
                url: {defaultValue: "", type: "string"},
                visible: {defaultValue: true, type: "boolean"},
                width: {defaultValue: "100%", type: "sap.ui.core.CSSSize"}
            },
            events: {
                "applicationConfiguration": {}
            },
            aggregations: {
                child: {multiple: false, type: "sap.ui.core.Control", visibility: "hidden"}
            },
            library: "sap.ushell"
        },

        exit: function () {
            var fnLogout;
            if (sap.ushell.Container) {
                fnLogout = getLogoutHandler(this);
                if (fnLogout) {
                    sap.ushell.Container.detachLogoutEvent(fnLogout);
                    mLogouts.remove(this.getId());
                }
            }
            // remove container from list of NWBC-containing containers
            // (if this container was an NWBC container before)
            localStorage.removeItem(this.globalDirtyStorageKey);

            // remove all event listeners
            if (this._unloadEventListener) {
                removeEventListener("unload", this._unloadEventListener);
            }

            if (this._disableRouterEventHandler) {
                sap.ui.getCore().getEventBus().unsubscribe("sap.ushell.components.container.ApplicationContainer", "_prior.newUI5ComponentInstantion", this._disableRouterEventHandler);//{ sValue : sServiceUrl }
            }

            if (this._storageEventListener) {
                removeEventListener("storage", this._storageEventListener);
            }

            if (this._messageEventListener) {
                removeEventListener("message", this._messageEventListener);
            }

            destroyChild(this);

            // just to be sure in case it will be added some time
            if (sap.ui.core.Control.exit) {
                sap.ui.core.Control.exit.apply(this);
            }
        },

        /**
         * Initialization of <code>ApplicationContainer</code> instance.
         */
        init: function () {
            var that = this;
            this.globalDirtyStorageKey = sDIRTY_STATE_PREFIX + jQuery.sap.uid();

            // be sure to remove entry from list of NWBC-containing containers
            // when the window is closed
            this._unloadEventListener = this.exit.bind(this);
            addEventListener("unload", this._unloadEventListener); //TODO doesn't work in IE9 when F5 is pressed?!

            this._storageEventListener =  function (oStorageEvent) {
                if (oStorageEvent.key === that.globalDirtyStorageKey
                        && oStorageEvent.newValue ===  sap.ushell.Container.DirtyState.PENDING
                        && that.getApplicationType() ===
                            sap.ushell.components.container.ApplicationType.NWBC) {
                    var oIframe = that.getDomRef();
                    if (oIframe && oIframe.tagName === "IFRAME") {
                        jQuery.sap.log.debug(
                            "getGlobalDirty() send pro54_getGlobalDirty ",
                            null,
                            "sap.ushell.components.container.ApplicationContainer"
                        );
                        oIframe.contentWindow.postMessage(
                            JSON.stringify({action: "pro54_getGlobalDirty"}),
                            '*'
                        );
                    }
                }
            };
            addEventListener('storage', this._storageEventListener);

            this._messageEventListener = handleMessageEvent.bind(null, this);
            addEventListener('message', this._messageEventListener);

            if (bFirstLoadOfApplicationContainer) {
                //Hook CrossApplicationNavigation URL validation logic into the sap.m.MessagePopover control
                var oMessageConceptDefaultHandlers = {
                    "asyncURLHandler" : adaptIsUrlSupportedResultForMessagePopover
                };
                if (sap.m.MessagePopover && sap.m.MessagePopover.setDefaultHandlers) {
                    sap.m.MessagePopover.setDefaultHandlers(oMessageConceptDefaultHandlers);
                }
                bFirstLoadOfApplicationContainer = false;
            }
        },

        /**
         * Renders the given container control with the help of the given render manager.
         *
         * @param {sap.ui.core.RenderManager} oRenderManager
         * @param {sap.ushell.components.container.ApplicationContainer} oContainer
         *
         * @private
         */
        renderer: function (oRenderManager, oContainer) {
            // Note: "this" refers to the renderer instance, which does not matter here!
            var oApplication = oContainer.getApplication(),
                oLaunchpadData = oContainer.launchpadData,
                oLoadingIndicator;

            if (!oContainer.getVisible()) {
                // Note: even invisible controls need to render their ID for later re-rendering
                renderControlInDiv(oRenderManager, oContainer);
                return;
            }

            if (oContainer.error) {
                delete oContainer.error;
                renderControlInDiv(oRenderManager, oContainer, createErrorControl());
            } else if (!oApplication) {
                // the standard properties
                render(oRenderManager, oContainer, oContainer.getApplicationType(),
                    oContainer.getUrl(), oContainer.getAdditionalInformation());
            } else if (!oApplication.isResolvable()) {
                // the standard application data
                render(oRenderManager, oContainer, oApplication.getType(),
                    oApplication.getUrl(), "");
            } else if (oLaunchpadData) {
                // the application, already resolved
                // Note that ResolveLink appends a "?" to the URL if additionalData (aka
                // additionalInformation) is supplied.
                render(oRenderManager, oContainer, oLaunchpadData.applicationType,
                    oLaunchpadData.Absolute.url.replace(/\?$/, ""),
                    oLaunchpadData.applicationData);
            } else {
                jQuery.sap.log.debug("Resolving " + oApplication.getUrl(), null,
                    sCOMPONENT);

                oApplication.resolve(function (oResolved) {
                    jQuery.sap.log.debug("Resolved " + oApplication.getUrl(),
                        JSON.stringify(oResolved),
                        sCOMPONENT);
                    // TODO where to keep the internal property launchpadData? At the Application!
                    oContainer.launchpadData = oResolved;
                    destroyChild(oContainer);
                }, function (sError) {
                    var fnApplicationErrorHandler = oApplication.getMenu().getDefaultErrorHandler();
                    if (fnApplicationErrorHandler) {
                        fnApplicationErrorHandler(sError);
                    }
                    destroyChild(oContainer);
                    oContainer.error = sError;
                });
                oLoadingIndicator = new sap.m.Text({
                    text: getTranslatedText("loading", [oApplication.getText()])
                });
                destroyChild(oContainer);
                oContainer.setAggregation("child", oLoadingIndicator);
                renderControlInDiv(oRenderManager, oContainer, oLoadingIndicator);
            }
        }
    });

    /**
     * Returns the resulting source URL for the (internal) frame used to embed the given application.
     * This hook method may be overridden; we recommend to replace it per object, not at the
     * prototype.
     * <p>
     * The default implementation returns the URL "as is", but checks that the given application
     * type is one of <code>sap.ushell.components.container.ApplicationType</code> and throws
     * an error in case it is not. It ignores the additional information.
     * <p>
     * You may want to end your implementation with
     * <code>return
     * sap.ushell.components.container.ApplicationContainer.prototype.getFrameSource.call(this,
     * sApplicationType, sUrl, sAdditionalInformation);</code> in order to reuse the default
     * behavior. To override the error checks, simply replace any additional application types you
     * wish to support with <code>sap.ushell.components.container.ApplicationType.URL</code>.
     *
     * @param {sap.ushell.components.container.ApplicationType} sApplicationType
     *   the application type
     * @param {string} sUrl
     *   the base URL
     * @param {string} sAdditionalInformation
     *   the additional information
     * @returns {string}
     * @since 1.15.0
     */
    sap.ushell.components.container.ApplicationContainer.prototype.getFrameSource
        = function (sApplicationType, sUrl, sAdditionalInformation) {
            if (!Object.prototype.hasOwnProperty.call(
                    sap.ushell.components.container.ApplicationType,
                    sApplicationType
                )) {
                // Note: do not use sap.ushell.utils.Error here as the exception is already caught
                // and logged in render()
                throw new Error("Illegal application type: " + sApplicationType);
            }
            return sUrl;
        };

    // overwrite setters to trigger component recreation only if relevant properties have changed
    sap.ushell.components.container.ApplicationContainer.prototype.setUrl = function (sValue) {
        setProperty(this, "url", sValue);
    };

    sap.ushell.components.container.ApplicationContainer.prototype.setAdditionalInformation = function (sValue) {
        setProperty(this, "additionalInformation", sValue);
    };

    sap.ushell.components.container.ApplicationContainer.prototype.setApplicationType = function (sValue) {
        setProperty(this, "applicationType", sValue);
    };
}());

}; // end of sap/ushell/components/container/ApplicationContainer.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.factsheet.controls.PictureTile') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.components.factsheet.controls.PictureTile.
jQuery.sap.declare("sap.ushell.components.factsheet.controls.PictureTile");

jQuery.sap.require('sap.m.CustomTile'); // unlisted dependency retained



/**
 * Constructor for a new components/factsheet/controls/PictureTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeight height} : sap.ui.core.CSSSize (default: '32px')</li>
 * <li>{@link #getWidth width} : sap.ui.core.CSSSize (default: '32px')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul>
 * <li>{@link #getTileContent tileContent} : string | sap.ushell.components.factsheet.controls.PictureViewerItem</li></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.components.factsheet.controls.PictureTile#event:pictureDelete pictureDelete} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.CustomTile#constructor sap.m.CustomTile}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Tile control embedding an image and allowing custom sizing
 * @extends sap.m.CustomTile
 * @version 1.32.6
 *
 * @constructor
 * @public
 * @deprecated Since version 1.22. 
 * 
 * PictureTile is used in PictureViewer control and is not meant to be consumed outside of PictureViewer usage.
 * PictureViewer was replacing the sap.m.Carousel as it wasn't supporting some versions of MS Internet Explorer.
 * Now, the sap.m.Carousel is fully functional, please use sap.m.Carousel instead. This control will not be supported anymore.
 * @name sap.ushell.components.factsheet.controls.PictureTile
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.CustomTile.extend("sap.ushell.components.factsheet.controls.PictureTile", { metadata : {

	deprecated : true,
	library : "sap.ushell",
	properties : {
		"height" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '32px'},
		"width" : {type : "sap.ui.core.CSSSize", group : "Dimension", defaultValue : '32px'}
	},
	associations : {
		"tileContent" : {type : "sap.ushell.components.factsheet.controls.PictureViewerItem", multiple : false}
	},
	events : {
		"pictureDelete" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.components.factsheet.controls.PictureTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.components.factsheet.controls.PictureTile.extend
 * @function
 */

sap.ushell.components.factsheet.controls.PictureTile.M_EVENTS = {'pictureDelete':'pictureDelete'};


/**
 * Getter for property <code>height</code>.
 * height (in pixels) of the picture viewer control.
 *
 * Default value is <code>32px</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>height</code>
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureTile#getHeight
 * @function
 */

/**
 * Setter for property <code>height</code>.
 *
 * Default value is <code>32px</code> 
 *
 * @param {sap.ui.core.CSSSize} sHeight  new value for property <code>height</code>
 * @return {sap.ushell.components.factsheet.controls.PictureTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureTile#setHeight
 * @function
 */


/**
 * Getter for property <code>width</code>.
 * width (in pixels) of the picture viewer control.
 *
 * Default value is <code>32px</code>
 *
 * @return {sap.ui.core.CSSSize} the value of property <code>width</code>
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureTile#getWidth
 * @function
 */

/**
 * Setter for property <code>width</code>.
 *
 * Default value is <code>32px</code> 
 *
 * @param {sap.ui.core.CSSSize} sWidth  new value for property <code>width</code>
 * @return {sap.ushell.components.factsheet.controls.PictureTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureTile#setWidth
 * @function
 */


/**
 * Reference to one PictureViewerItem coming from the PictureViewer.
 *
 * @return {string} Id of the element which is the current target of the <code>tileContent</code> association, or null
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureTile#getTileContent
 * @function
 */

/**
 * Reference to one PictureViewerItem coming from the PictureViewer.
 *
 * @param {string | sap.ushell.components.factsheet.controls.PictureViewerItem} vTileContent 
 *    Id of an element which becomes the new target of this <code>tileContent</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ushell.components.factsheet.controls.PictureTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureTile#setTileContent
 * @function
 */


	
/**
 * Fired when the user deletes a picture
 *
 * @name sap.ushell.components.factsheet.controls.PictureTile#pictureDelete
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'pictureDelete' event of this <code>sap.ushell.components.factsheet.controls.PictureTile</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.components.factsheet.controls.PictureTile</code>.<br/> itself. 
 *  
 * Fired when the user deletes a picture
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.components.factsheet.controls.PictureTile</code>.<br/> itself.
 *
 * @return {sap.ushell.components.factsheet.controls.PictureTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureTile#attachPictureDelete
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'pictureDelete' event of this <code>sap.ushell.components.factsheet.controls.PictureTile</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.components.factsheet.controls.PictureTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureTile#detachPictureDelete
 * @function
 */

/**
 * Fire event pictureDelete to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.components.factsheet.controls.PictureTile} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.components.factsheet.controls.PictureTile#firePictureDelete
 * @function
 */

// Start of sap/ushell/components/factsheet/controls/PictureTile.js

sap.ushell.components.factsheet.controls.PictureTile.prototype.init = function(oTileContent) {
	
	this._oDeletePictureButton = new sap.m.Button({
        icon:"sap-icon://sys-cancel",
        press: jQuery.proxy(this._deletePictureRequestHandler, this),
        type: sap.m.ButtonType.Transparent
    }).addStyleClass("sapCaUiPTDeleteButton");
	
	if (!sap.ui.Device.system.desktop) {
		 this.attachPress(this._tilePressedHandler);
		 this.attachBrowserEvent("swipe", jQuery.proxy(this._tileSwipedHandler, this));
		 this._oDeletePictureButton.addStyleClass("hide");
	}
};

    
/**
 * Reference to one PictureViewerItem coming from the PictureViewer.
 *
 * @override
 * @param {string | sap.ushell.components.factsheet.controls.PictureViewerItem} vTileContent
 *    Id of an element which becomes the new target of this <code>tileContent</code> association.
 *    Alternatively, an element instance may be given.
 * @return {sap.ushell.components.factsheet.controls.PictureTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureTile#setTileContent
 * @function
 */
sap.ushell.components.factsheet.controls.PictureTile.prototype.setTileContent = function(oTileContent) {
	this.setContent(null);
	if (oTileContent) {
        var image = oTileContent.getImage();
        
//		if (sap.ui.Device.system.desktop) {
			this.setContent(image);
//		} else {
//			this.setContent(new sap.ca.ui.ZoomableScrollContainer({
//				content : oTileContent.getImage()
//			}));
//		}
		
	} else {
		this.setContent(null);
	}
	this.setAssociation("tileContent", oTileContent);
};



/**
 * Sets the pixel size of the tile 
 * @param {int} iWidth width
 * @param {int} iHeight height
 * @private
 */ 
sap.ushell.components.factsheet.controls.PictureTile.prototype.setSize = function(iWidth,iHeight){

	this._width = iWidth;
	this._height = iHeight;
	
	var $this = this.$();
	if ($this){
		$this.css({width: iWidth + "px", height: iHeight + "px"});
		
		// adding this class later because display: inline-block is causing issue for width/height calculation
		jQuery.sap.byId(this.getId() + "-wrapper").addClass("sapCaUiPTWrapper");
	}
};


sap.ushell.components.factsheet.controls.PictureTile.prototype._tilePressedHandler = function (oEvent) {	
    this.switchVisibility();
};

sap.ushell.components.factsheet.controls.PictureTile.prototype.switchVisibility = function (bVisible) {
	var $delBtn = this._oDeletePictureButton.$();
	if (bVisible === undefined){
		$delBtn.toggleClass("hide");
	} else {
		$delBtn.toggleClass("hide", !bVisible);	
	}
	
	
};

sap.ushell.components.factsheet.controls.PictureTile.prototype._tileSwipedHandler = function (oEvent) {
    var $deleteBtn = this._oDeletePictureButton.$();
    if ($deleteBtn && !$deleteBtn.hasClass("hide")){
		$deleteBtn.addClass("hide");
    }	
};

/**
 * 
 */
sap.ushell.components.factsheet.controls.PictureTile.prototype._deletePictureRequestHandler = function () {

	this.firePictureDelete();
    
};


}; // end of sap/ushell/components/factsheet/controls/PictureTile.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.factsheet.controls.PictureViewer') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.components.factsheet.controls.PictureViewer.
jQuery.sap.declare("sap.ushell.components.factsheet.controls.PictureViewer");

jQuery.sap.require('sap.m.TileContainer'); // unlisted dependency retained



/**
 * Constructor for a new components/factsheet/controls/PictureViewer.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getTileScaling tileScaling} : float (default: 0.95)</li>
 * <li>{@link #getRemovable removable} : boolean (default: false)</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getItems items} <strong>(default aggregation)</strong> : sap.ushell.components.factsheet.controls.PictureViewerItem[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.components.factsheet.controls.PictureViewer#event:pictureDeleted pictureDeleted} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.TileContainer#constructor sap.m.TileContainer}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Picture viewer control relying on the TileContainer control
 * @extends sap.m.TileContainer
 * @version 1.32.6
 *
 * @constructor
 * @public
 * @deprecated Since version 1.22. 
 * PictureViewer was replacing the Carousel as it wasn't supporting some versions of MS Internet Explorer.
 * Now, the sap.m.Carousel is fully functional, please use sap.m.Carousel instead.
 * This control will not be supported anymore.
 * @name sap.ushell.components.factsheet.controls.PictureViewer
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.TileContainer.extend("sap.ushell.components.factsheet.controls.PictureViewer", { metadata : {

	deprecated : true,
	library : "sap.ushell",
	properties : {
		"tileScaling" : {type : "float", group : "Misc", defaultValue : 0.95},
		"removable" : {type : "boolean", group : "Misc", defaultValue : false}
	},
	defaultAggregation : "items",
	aggregations : {
		"items" : {type : "sap.ushell.components.factsheet.controls.PictureViewerItem", multiple : true, singularName : "item"}
	},
	events : {
		"pictureDeleted" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.components.factsheet.controls.PictureViewer with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.components.factsheet.controls.PictureViewer.extend
 * @function
 */

sap.ushell.components.factsheet.controls.PictureViewer.M_EVENTS = {'pictureDeleted':'pictureDeleted'};


/**
 * Getter for property <code>tileScaling</code>.
 * Percentage of the space occupied by the image in the picture viewer control. Please note that if the factor is too close to 1, the navigation arrows usually displayed in desktop mode will not be available
 *
 * Default value is <code>0.95</code>
 *
 * @return {float} the value of property <code>tileScaling</code>
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#getTileScaling
 * @function
 */

/**
 * Setter for property <code>tileScaling</code>.
 *
 * Default value is <code>0.95</code> 
 *
 * @param {float} fTileScaling  new value for property <code>tileScaling</code>
 * @return {sap.ushell.components.factsheet.controls.PictureViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#setTileScaling
 * @function
 */


/**
 * Getter for property <code>removable</code>.
 * Defines whether or not you can remove a picture
 *
 * Default value is <code>false</code>
 *
 * @return {boolean} the value of property <code>removable</code>
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#getRemovable
 * @function
 */

/**
 * Setter for property <code>removable</code>.
 *
 * Default value is <code>false</code> 
 *
 * @param {boolean} bRemovable  new value for property <code>removable</code>
 * @return {sap.ushell.components.factsheet.controls.PictureViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#setRemovable
 * @function
 */


/**
 * Getter for aggregation <code>items</code>.<br/>
 * Aggregation of PictureViewerItem that contains either a picture URI or the actual Image control.
 * 
 * <strong>Note</strong>: this is the default aggregation for components/factsheet/controls/PictureViewer.
 * @return {sap.ushell.components.factsheet.controls.PictureViewerItem[]}
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#getItems
 * @function
 */


/**
 * Inserts a item into the aggregation named <code>items</code>.
 *
 * @param {sap.ushell.components.factsheet.controls.PictureViewerItem}
 *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the item should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the item is inserted at 
 *             the last position        
 * @return {sap.ushell.components.factsheet.controls.PictureViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#insertItem
 * @function
 */

/**
 * Adds some item <code>oItem</code> 
 * to the aggregation named <code>items</code>.
 *
 * @param {sap.ushell.components.factsheet.controls.PictureViewerItem}
 *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.ushell.components.factsheet.controls.PictureViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#addItem
 * @function
 */

/**
 * Removes an item from the aggregation named <code>items</code>.
 *
 * @param {int | string | sap.ushell.components.factsheet.controls.PictureViewerItem} vItem the item to remove or its index or id
 * @return {sap.ushell.components.factsheet.controls.PictureViewerItem} the removed item or null
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#removeItem
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>items</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ushell.components.factsheet.controls.PictureViewerItem[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#removeAllItems
 * @function
 */

/**
 * Checks for the provided <code>sap.ushell.components.factsheet.controls.PictureViewerItem</code> in the aggregation named <code>items</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ushell.components.factsheet.controls.PictureViewerItem}
 *            oItem the item whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#indexOfItem
 * @function
 */
	

/**
 * Destroys all the items in the aggregation 
 * named <code>items</code>.
 * @return {sap.ushell.components.factsheet.controls.PictureViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#destroyItems
 * @function
 */


/**
 * Thrown when user delete an image
 *
 * @name sap.ushell.components.factsheet.controls.PictureViewer#pictureDeleted
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'pictureDeleted' event of this <code>sap.ushell.components.factsheet.controls.PictureViewer</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.components.factsheet.controls.PictureViewer</code>.<br/> itself. 
 *  
 * Thrown when user delete an image
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.components.factsheet.controls.PictureViewer</code>.<br/> itself.
 *
 * @return {sap.ushell.components.factsheet.controls.PictureViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#attachPictureDeleted
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'pictureDeleted' event of this <code>sap.ushell.components.factsheet.controls.PictureViewer</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.components.factsheet.controls.PictureViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#detachPictureDeleted
 * @function
 */

/**
 * Fire event pictureDeleted to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.components.factsheet.controls.PictureViewer} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.components.factsheet.controls.PictureViewer#firePictureDeleted
 * @function
 */

// Start of sap/ushell/components/factsheet/controls/PictureViewer.js
jQuery.sap.declare("sap.ushell.components.factsheet.controls.PictureViewer");
jQuery.sap.require('sap.ui.core.ResizeHandler'); // unlisted dependency retained

jQuery.sap.require('sap.m.TileContainer'); // unlisted dependency retained


sap.ushell.components.factsheet.controls.PictureViewer.prototype.init = function () {

    sap.m.TileContainer.prototype.init.apply(this);
    this.setEditable(false);

    if (sap.ui.getCore().isMobile()) {
        jQuery(window).bind("tap", jQuery.proxy(this._reset, this));
        var oStaticArea = sap.ui.getCore().getStaticAreaRef();
        this.$blocker = jQuery("<div class='sapCaPVBly sapUiBLy'></div>").css("visibility", "hidden");
        jQuery(oStaticArea).append(this.$blocker);
    }
    if (!sap.ui.getCore().isMobile()) {
        jQuery(window).bind("resize", jQuery.proxy(this._resize, this));
    }

    this.addStyleClass("sapCaPW");
    
    // onBeforeRendering() is not called the first time
    this.addStyleClass("sapCaPWRendering");


};

/**
 * Handles the resize event for the tile container.
 * This is called whenever the orientation of browser size changes.
 * @private
 */
sap.ushell.components.factsheet.controls.PictureViewer.prototype._resize = function() {
    if (this._oDragSession) {
        return;
    }

    setTimeout(jQuery.proxy(function() {
        this._applyDimension();
        this._update(false);
        delete this._iInitialResizeTimeout;
    },this),
        this._iInitialResizeTimeout);

    this._iInitialResizeTimeout = 0; //now we do not need to wait
};

sap.ushell.components.factsheet.controls.PictureViewer.prototype.exit = function () {

    this.$blocker.remove();

    if (!sap.ui.getCore().isMobile()) {
        jQuery(window).unbind("resize", jQuery.proxy(this._resize, this));
    }

    sap.m.TileContainer.prototype.exit.apply(this);

	if (!sap.ui.Device.system.desktop){
		jQuery(window).unbind("tap", jQuery.proxy(this._reset, this));	
	}
};

/**
 * Set the percentage of the space occupied by the image in the picture viewer control.
 * Please note that if the factor is too close to 1, the navigation arrows usually displayed in desktop mode will not be available
 * @override
 * @public
 * @param fTileScale
 */
sap.ushell.components.factsheet.controls.PictureViewer.prototype.setTileScaling = function (fTileScale) {
    if (fTileScale < 0 || fTileScale > 1) {
        fTileScale = 0.75;
        jQuery.sap.log.error("Tile Scaling should be a float value between 0 and 1 and not " + fTileScale
            + ". Setting it to 0.75 by default.");
    }
    this.setProperty('tileScaling', fTileScale);
};

/**
 * Adds some item <code>oItem</code>
 * to the aggregation named <code>items</code>.
 *
 * @override
 * @param {sap.ushell.components.factsheet.controls.PictureViewerItem}
    *            oItem the item to add; if empty, nothing is inserted
 * @return {sap.ushell.components.factsheet.controls.PictureViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#addItem
 * @function
 *
 * @deprecated Use aggregation "tiles"
 */
sap.ushell.components.factsheet.controls.PictureViewer.prototype.addItem = function (oItem) {
    this.insertItem(oItem, this.getItems().length);
};

/**
 * Inserts a item into the aggregation named <code>items</code>.
 * When adding a new item to the aggregation, a sap.ca.ui.PictureTile is actually created
 * with its own ID and added to the internal TileContainer.
 *
 * @override
 * @param {sap.ushell.components.factsheet.controls.PictureViewerItem}
    *          oItem the item to insert; if empty, nothing is inserted
 * @param {int}
    *             iIndex the <code>0</code>-based index the item should be inserted at; for
 *             a negative value of <code>iIndex</code>, the item is inserted at position 0; for a value
 *             greater than the current size of the aggregation, the item is inserted at
 *             the last position
 * @return {sap.ushell.components.factsheet.controls.PictureViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#insertItem
 * @function
 *
 * @deprecated Use aggregation "tiles"
 */
sap.ushell.components.factsheet.controls.PictureViewer.prototype.insertItem = function (oItem, iIndex) {

    var tileToAdd = new sap.ushell.components.factsheet.controls.PictureTile({
        tileContent:oItem
    });
    tileToAdd.attachPictureDelete(jQuery.proxy(this._deletePictureRequestHandler, this));

    this.insertTile(tileToAdd, iIndex);
    this.insertAggregation("items", oItem, iIndex);

    return this;
};



sap.ushell.components.factsheet.controls.PictureViewer.prototype.insertTile = function (oTile, iIndex) {

	oTile.attachPictureDelete(jQuery.proxy(this._deletePictureRequestHandler, this));
	sap.m.TileContainer.prototype.insertTile.apply(this, arguments);
};


sap.ushell.components.factsheet.controls.PictureViewer.prototype.deleteTile = function (oTile) {
	sap.m.TileContainer.prototype.deleteTile.apply(this, arguments);
	
	oTile.destroy();
};


/**
 * Removes the picture at index <code>iIndex</code> from the <code>items</code> aggregation.
 *
 * @override
 * @param {sap.ushell.components.factsheet.controls.PictureViewerItem}
    *          iIndex the index of the picture to delete; if empty, the current picture is deleted
 * @param {int}
    *             iIndex the <code>0</code>-based index of the picture collection to delete;
 *             if <code>iIndex</code> is out of range or empty, the current image will be deleted.
 * @return {sap.ushell.components.factsheet.controls.PictureViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#deletePicture
 * @function
 */
sap.ushell.components.factsheet.controls.PictureViewer.prototype.deletePicture = function (iIndex) {

    var pictureTileIndexToDelete, pictureTileToDelete, numberOfPictures;
    numberOfPictures = this.getTiles().length;

    if (typeof iIndex != "number" || iIndex < 0 || iIndex >= numberOfPictures) {
        pictureTileIndexToDelete = this.getPageFirstTileIndex();
    } else {
        pictureTileIndexToDelete = iIndex;
    }

    if (pictureTileIndexToDelete > -1) {
        pictureTileToDelete = this.getTiles()[pictureTileIndexToDelete];
        pictureTileToDelete.detachPictureDelete(jQuery.proxy(this._deletePictureRequestHandler, this));
        this.deleteTile(pictureTileToDelete);
        this.removeAggregation("items", pictureTileIndexToDelete, true);
    } else {
        jQuery.sap.log.warning("Cannot find and delete a picture at index : " + iIndex);
    }

    return this;
};

/**
 * Select the picture at index <code>iIndex</code> from the <code>items</code> aggregation.
 *
 * @override
 * @param {sap.ushell.components.factsheet.controls.PictureViewerItem}
    *          iIndex the index of the picture to select; if empty, the first picture is selected
 * @param {int}
    *             iIndex the <code>0</code>-based index of the aggregation to select; for
 *             a negative value of <code>iIndex</code>, the picture at position 0 is selected; for a value
 *             greater than the current size of the aggregation, the selected picture at the last position is selected
 * @return {sap.ushell.components.factsheet.controls.PictureViewer} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#selectPicture
 * @function
 */
sap.ushell.components.factsheet.controls.PictureViewer.prototype.selectPicture = function (iIndex) {

    var numberOfPictures = this.getTiles().length;

    if (typeof iIndex != "number") {
        iIndex = 0;
    } else if (iIndex < 0) {
        iIndex = 0;
    } else if (iIndex >= numberOfPictures) {
        iIndex = numberOfPictures - 1;
    }

    if (this._bRendered) {
        this.addStyleClass("sapCaPWRendering");
    }
    this._selectedIndex = iIndex;
    
    
    return this;
};
sap.ushell.components.factsheet.controls.PictureViewer.prototype.setSelectedIndex = function (iIndex) {
	this.selectPicture(iIndex);
};

/**
 * Gets the current picture index.
 *
 * @override
 * @return {sap.ushell.components.factsheet.controls.PictureViewer} the current picture index
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewer#getCurrentPictureIndex
 * @function
 */
sap.ushell.components.factsheet.controls.PictureViewer.prototype.getCurrentPictureIndex = function () {
    return this.getPageFirstTileIndex();
};

/**
 * Gets the image index from the TileContainer and fires an event
 */
sap.ushell.components.factsheet.controls.PictureViewer.prototype._deletePictureRequestHandler = function (oEvent) {

	var pictureTileIndexToDelete = this.indexOfTile(oEvent.getSource());
	
	this.deleteTile(oEvent.getSource());
	
	this.firePictureDeleted({
        index:pictureTileIndexToDelete
    });
	
	
};



/**
 * Get rid of potential visible "delete" button 
 * 
 * Only used on mobile devices
 * 
 */
sap.ushell.components.factsheet.controls.PictureViewer.prototype._reset = function (oEvent) {
	var i = this.getCurrentPictureIndex();
	
	var aTiles = this.getTiles();
	if (i > -1 && aTiles && aTiles.length > i){
		var oTile = aTiles[i];
		if (oTile){
			
			var $target = jQuery(oEvent.target);
			var $this = this.$();
			if ($this.length > 0 && $target.length > 0){
				
				
				var $parent = $target.closest(this.$());
				
				if ($parent.length === 0){ // the "tap" was outside the PictureViewer
					oTile.switchVisibility(false);
				}
				
			}
		}
		
	}
};

/**
 * Specify whether or not you can delete a picture.
 * If FALSE the delete button will never be visible. Default value is TRUE
 * @override
 * @public
 */
sap.ushell.components.factsheet.controls.PictureViewer.prototype.setRemovable = function (bValue) {
	
	this.setProperty("removable",bValue,true);	
	this.toggleStyleClass("sapCaPWEditable",bValue);
	
};

sap.ushell.components.factsheet.controls.PictureViewer.prototype.setEditable = function(bValue){
	// set Editable to false no matter what
	sap.m.TileContainer.prototype.setEditable.call(this, false);	
};


/**
 * Returns the dimension (width and height) of a tile
 * @returns {object} width and height of a tile
 * @private
 */
sap.ushell.components.factsheet.controls.PictureViewer.prototype._getTileDimension = function() {

    if (!this._bRendered){
        return;
    }


    var $scroller = jQuery.sap.byId(this.getId() + "-scrl");
    var oTileDim = {
        width  : $scroller.width(),
        height : $scroller.height()
    };
    return oTileDim;
};


sap.ushell.components.factsheet.controls.PictureViewer.prototype.onBeforeRendering = function() {

    this.addStyleClass("sapCaPWRendering");
    
};

/**
 * Handles the internal event onAfterRendering
 * @private
 */
sap.ushell.components.factsheet.controls.PictureViewer.prototype.onAfterRendering = function() {
	
	var that = this;
	this._bRendered = true;
	//init resizing
	//this._sResizeListenerId = sap.ui.core.ResizeHandler.register(this.getDomRef().parentElement,  jQuery.proxy(this._resize, this));
    

	//init the dimensions to the container scoll area 
	this._applyDimension();
	this.$().toggleClass("sapCaPWEditable",this.getRemovable() === true);
	this._sInitialResizeTimeoutId = setTimeout(function() {			
			that.addStyleClass("sapCaPWRendering");
			that._applyPageStartIndex(that._selectedIndex);
			
			that._update(false);
			
		}, this._iInitialResizeTimeout);
	
	//Set initial focus
	if (sap.ui.Device.system.desktop) {
		var oFocusTile = this.getTiles()[0],
			iTimeout = this._iInitialResizeTimeout;
		if (!!oFocusTile) {
			
			setTimeout(jQuery.proxy(function() {
				this._findTile(oFocusTile.$()).focus();
			},this),iTimeout); 
		}
	}
	
};


/**
 * @override
 */
sap.ushell.components.factsheet.controls.PictureViewer.prototype._update = function(bAnimated) {
	
	sap.m.TileContainer.prototype._update.apply(this, arguments);
	
	this.removeStyleClass("sapCaPWRendering");
	if (sap.ui.getCore().isMobile()){
		var that = this;
		var thatBlocker = this.$blocker;
		setTimeout(jQuery.proxy(function() {
			thatBlocker.fadeOut(200, function(){that.css("visibility", "hidden").css("z-index", 0);});	
		},this),250); 
		
	}
	
};


/**
 * Applies the containers dimensions
 * @private
 */
sap.ushell.components.factsheet.controls.PictureViewer.prototype._applyDimension = function() {
    var oDim = this._getContainerDimension(),
        sId = this.getId(),
        $this = this.$(),
        oThisPos,
        iOffset = 10,
        iTopOffset = 60,
        $Content = jQuery.sap.byId( sId + "-cnt"),
        contentPos,
        contentOuterHeight,
        pagerHeight = jQuery.sap.byId( sId + "-pager").outerHeight();

    jQuery.sap.byId( sId + "-scrl").css({
        width : oDim.outerwidth + "px",
        height : (oDim.outerheight - pagerHeight) + "px"
    });

    $Content.css({
        height : (oDim.outerheight - pagerHeight) + "px",
        visibility : "visible"
    });

    $this.css("visibility","visible");
    oThisPos = $this.position();

    contentPos  = $Content.position();
    contentOuterHeight = $Content.outerHeight();

    if (jQuery.device.is.phone) {
        iOffset = 2;        
    } else if (sap.ui.Device.system.desktop) {
        iOffset = 0;        
    }

    jQuery.sap.byId( sId + "-blind").css({
        top : (contentPos.top + iOffset) + "px",
        left : (contentPos.left + iOffset) + "px",
        width : ($Content.outerWidth() - iOffset) + "px",
        height : (contentOuterHeight - iOffset) + "px"
    });

    jQuery.sap.byId( sId + "-rightedge").css({
        top : (oThisPos.top + iOffset + iTopOffset) + "px",
        right : iOffset + "px",
        height : (contentOuterHeight - iOffset - iTopOffset) + "px"
    });

    jQuery.sap.byId( sId + "-leftedge").css({
        top : (oThisPos.top + iOffset + iTopOffset) + "px",
        left : (oThisPos.left + iOffset) + "px",
        height : (contentOuterHeight - iOffset - iTopOffset) + "px"
    });
};


/**
 *
 * Adding overlay to hide blinking while switching orientation
 *
 * @private
 */
sap.ushell.components.factsheet.controls.PictureViewer.prototype.showBlockerLayer = function(callback) {

	// get higher z-index
	if (sap.ui.getCore().isMobile()){
		var zindex = 20;
		jQuery(sap.ui.getCore().getStaticAreaRef()).children().each(function(index, value){
			var z = parseInt(jQuery(value).css("z-index"), 10);
			if (!isNaN(z)){
				zindex = Math.max(zindex, z);	
			}		
		});	
		jQuery.sap.log.debug("blocker layer z-index calculated : " + zindex + 1);
	    this.$blocker.css("z-index", zindex + 1).css("visibility", "visible").fadeIn(200, function(){
            if (callback) {
                callback.call();
            }});
	} else {
		if (callback) {
            callback.call();
        }
	}
	

};



}; // end of sap/ushell/components/factsheet/controls/PictureViewer.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.factsheet.controls.PictureViewerItem') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.components.factsheet.controls.PictureViewerItem.
jQuery.sap.declare("sap.ushell.components.factsheet.controls.PictureViewerItem");

jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained



/**
 * Constructor for a new components/factsheet/controls/PictureViewerItem.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getSrc src} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getImage image} : sap.m.Image</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 

 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Picture viewer control relying on the TileContainer control
 * @extends sap.ui.core.Control
 * @version 1.32.6
 *
 * @constructor
 * @public
 * @deprecated Since version 1.22. 
 * 
 * PictureViewerItem is used in PictureViewer control and is not meant to be consumed outside of PictureViewer usage.
 * PictureViewer was replacing the Carousel as it wasn't supporting some versions of MS Internet Explorer. Now, the
 * sap.m.Carousel is fully functional, please use sap.m.Carousel instead. This control will not be supported anymore.
 * @name sap.ushell.components.factsheet.controls.PictureViewerItem
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ui.core.Control.extend("sap.ushell.components.factsheet.controls.PictureViewerItem", { metadata : {

	deprecated : true,
	library : "sap.ushell",
	properties : {
		"src" : {type : "string", group : "Misc", defaultValue : null}
	},
	aggregations : {
		"image" : {type : "sap.m.Image", multiple : false}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.components.factsheet.controls.PictureViewerItem with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.components.factsheet.controls.PictureViewerItem.extend
 * @function
 */


/**
 * Getter for property <code>src</code>.
 * Image source url.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>src</code>
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewerItem#getSrc
 * @function
 */

/**
 * Setter for property <code>src</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sSrc  new value for property <code>src</code>
 * @return {sap.ushell.components.factsheet.controls.PictureViewerItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewerItem#setSrc
 * @function
 */


/**
 * Getter for aggregation <code>image</code>.<br/>
 * Pass in an existing Image control to be used inside the PictureViewer
 * 
 * @return {sap.m.Image}
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewerItem#getImage
 * @function
 */


/**
 * Setter for the aggregated <code>image</code>.
 * @param {sap.m.Image} oImage
 * @return {sap.ushell.components.factsheet.controls.PictureViewerItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewerItem#setImage
 * @function
 */
	

/**
 * Destroys the image in the aggregation 
 * named <code>image</code>.
 * @return {sap.ushell.components.factsheet.controls.PictureViewerItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewerItem#destroyImage
 * @function
 */

// Start of sap/ushell/components/factsheet/controls/PictureViewerItem.js
/*!
 * @copyright@
*/

/**
 * Setter for property <code>src</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @param {string} sSrc  new value for property <code>src</code>
 * @return {sap.ushell.components.factsheet.controls.PictureViewerItem} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.components.factsheet.controls.PictureViewerItem#setSrc
 * @function
 */
sap.ushell.components.factsheet.controls.PictureViewerItem.prototype.setSrc = function(sSrc) {
	this.setProperty("src", sSrc);
	// Also create or update the internal image
	var oImage = this.getImage();
	if (oImage == null) {
		oImage = new sap.m.Image();
	}
	oImage.setSrc(sSrc);
	this.setImage(oImage);
	return this;
};

/**
 * Called when the control is destroyed
 */
sap.ushell.components.factsheet.controls.PictureViewerItem.prototype.exit = function() {
    var oImage = this.getImage();
    if (oImage) {
        oImage.destroy();
    }
};
}; // end of sap/ushell/components/factsheet/controls/PictureViewerItem.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.flp.Component') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
jQuery.sap.declare("sap.ushell.components.flp.Component");
if (!window['sap-ui-debug']) {
    try {
        jQuery.sap.require('sap.fiori.flp-controls');
    } catch (e) {
        jQuery.sap.log.warning('flp-controls failed to load: ' + e.message);
    }
}
jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained


/* global hasher */


sap.ui.core.UIComponent.extend("sap.ushell.components.flp.Component", {

    metadata: {
        routing : {
            config: {
                viewType: "JS",
                controlAggregation : "pages",
                controlId : "navContainerFlp",
                clearAggregation: false,
                routerClass : sap.ushell.components.flp.CustomRouter
            },
            targets: {
                catalog: {
                    viewName : "sap.ushell.components.flp.launchpad.catalog.Catalog"
                },
                home: {
                    viewName : "sap.ushell.components.flp.launchpad.dashboard.DashboardContent"
                }
            },
            routes : [
                {
                    name : "home",
                    target: 'home',
                    pattern : "home"
                }
            ]
        },

        version: "1.32.6",

        library: "sap.ushell.components.flp",

        dependencies: {
            libs: ["sap.m"]
        },
        config: {
            semanticObject: 'Shell',
            action: 'home',
            title: sap.ushell.resources.i18n.getText("homeBtn_tooltip"),
            fullWidth: true,
            hideLightBackground: true,
            compactContentDensity: true,
            cozyContentDensity: true
        }
    },

    parseOldCatalogParams: function (sUrl) {
        var mParameters = jQuery.sap.getUriParameters(sUrl).mParams,
            sValue;
        for (var sKey in mParameters) {
            if (mParameters.hasOwnProperty(sKey)) {
                sValue = mParameters[sKey][0];
                mParameters[sKey] = sValue.indexOf('/') !== -1 ? encodeURIComponent(sValue) : sValue;
            }
        }
        return mParameters;
    },

    handleNavigationFilter: function (sNewHash) {
        "use strict";
        var oShellHash =  sap.ushell.Container.getService("URLParsing").parseShellHash(sNewHash);
        if (oShellHash && oShellHash.semanticObject === 'shell' && oShellHash.action === 'catalog') {
            var mParameters = this.parseOldCatalogParams(sNewHash);
            setTimeout(function () {
                this.getRouter().navTo('catalog', {filters : JSON.stringify(mParameters)});
            }.bind(this), 0);
            return this.oShellNavigation.NavigationFilterStatus.Abandon;
        }
        return this.oShellNavigation.NavigationFilterStatus.Continue;
    },

    createContent: function () {
        "use strict";
        this.oRouter = this.getRouter();
        this.oModel = new sap.ui.model.json.JSONModel({
            groups : [],
            animationRendered : false,
            tagFiltering: true,
            catalogSelection: true,
            tileActionModeEnabled: false,
            tileActionModeActive: false,
            isInDrag: false,
            rtl: sap.ui.getCore().getConfiguration().getRTL(),
            personalization: true,
            editTitle: false,
            tagList : [],
            selectedTags : [],
            userPreferences : {
                entries : []
            }
        });

        this.oModel.setSizeLimit(10000); // override default of 100 UI elements on list bindings
        this.setModel(this.oModel);
        this.oConfig = this.getComponentData().config;
        //check the personalization flag in the Component configuration and in the Renderer configuration
        this.oShellConfig = sap.ushell.renderers.fiori2.RendererExtensions.getConfiguration();
        var bPersonalizationActive = (this.oConfig && (this.oConfig.enablePersonalization || this.oConfig.enablePersonalization === undefined))
            && (this.oShellConfig && this.oShellConfig.enablePersonalization || this.oShellConfig.enablePersonalization === undefined);
        //the catalog route should be added only if personalization is active
        if (bPersonalizationActive) {
            this.oRouter.addRoute({
                name : "catalog",
                target: 'catalog',
                pattern : "catalog/:filters:"
            });
        }
        //add the "all" route after the catalog route was added
        this.oRouter.addRoute({
            name : "all",
            target: 'home',
            pattern : ":all*:"
        });
        this._setConfigurationToModel(this.oConfig);
        jQuery.sap.require("sap.ushell.components.flp.launchpad.DashboardManager");
        this.oDashboardManager = new sap.ushell.components.flp.launchpad.DashboardManager("dashboardMgr", {
            model : this.oModel,
            config : this.oConfig,
            router : this.oRouter
        });

        jQuery.sap.require("sap.ushell.resources");
        this.setModel(sap.ushell.resources.i18nModel, "i18n");

        var oNavContainer,
            mediaQ = window.matchMedia("(min-width: 800px)"),
            handleMedia = function (mq) {
                this.oModel.setProperty("/isPhoneWidth", !mq.matches);
            }.bind(this);
        if (mediaQ.addListener) {// condition check if mediaMatch supported(Not supported on IE9)
            mediaQ.addListener(handleMedia);
            handleMedia(mediaQ);
        }

        sap.ui.getCore().getEventBus().subscribe("showCatalog", this.showCatalog, this);
        sap.ui.getCore().getEventBus().subscribe("launchpad", "togglePane", this._createAndAddGroupList, this);

        this.bContactSupportEnabled = sap.ushell.Container.getService("SupportTicket").isEnabled();
        if (this.bContactSupportEnabled) {
            jQuery.sap.require("sap.ushell.UserActivityLog");
            sap.ushell.UserActivityLog.activate();
        }
        oNavContainer = this.initNavContainer();

        this.setInitialConfiguration();

        this.oShellNavigation = sap.ushell.Container.getService("ShellNavigation");
        this.oShellNavigation.registerNavigationFilter(jQuery.proxy(this.handleNavigationFilter, this));
        //handle direct navigation with the old catalog intent format
        var sHash = hasher.getHash();
        var oShellHash =  sap.ushell.Container.getService("URLParsing").parseShellHash(sHash);
        if (oShellHash && oShellHash.semanticObject === 'shell' && oShellHash.action === 'catalog') {
            var mParameters = this.parseOldCatalogParams(sHash);
            var oComponentConfig = this.getMetadata().getConfig();
            this.oShellNavigation.toExternal({
                target: {
                    semanticObject: oComponentConfig.semanticObject,
                    action: oComponentConfig.action
                }
            });
            this.getRouter().navTo('catalog', {filters : JSON.stringify(mParameters)});
        }



        return oNavContainer;
    },

    _createAndAddGroupList: function (sChannel, sEventName, oData) {
        if (oData.currentContent && (oData.currentContent.indexOf('groupList') !== -1 || !oData.currentContent.length)) {
            var oConfig = this.oConfig,
                oGroupListData = this.runAsOwner(function () {
                    return this.oDashboardManager.getGroupListView(oConfig);
                }.bind(this));

            if (!oGroupListData.alreadyCreated) {
                oGroupListData.groupList.setModel(this.oModel);
                oGroupListData.groupList.setModel(sap.ushell.resources.i18nModel, "i18n");
                sap.ushell.renderers.fiori2.RendererExtensions.setLeftPaneContent(oGroupListData.groupList, "home");
            }
        }
    },

    _setConfigurationToModel : function (oConfig) {
        var oModel = this.oModel,
            tileActionModeEnabled;
        if (oConfig) {
            if (oConfig.enablePersonalization !== undefined && this.oShellConfig.enablePersonalization !== undefined) {
                oModel.setProperty("/personalization", oConfig.enablePersonalization && this.oShellConfig.enablePersonalization);
            } else if (oConfig.enablePersonalization !== undefined) {
                oModel.setProperty("/personalization", oConfig.enablePersonalization);
            } else if (this.oShellConfig.enablePersonalization !== undefined) {
                oModel.setProperty("/personalization", this.oShellConfig.enablePersonalization);
            }
            if (oConfig.enableTagFiltering !== undefined) {
                oModel.setProperty("/tagFiltering", oConfig.enableTagFiltering);
            }
            if (oConfig.enableLockedGroupsCompactLayout !== undefined) {
                oModel.setProperty("/enableLockedGroupsCompactLayout", oConfig.enableLockedGroupsCompactLayout);
            }
            if (oConfig.enableCatalogSelection !== undefined) {
                oModel.setProperty("/catalogSelection", oConfig.enableCatalogSelection);
            }
            if (oConfig.enableSearchFiltering !== undefined) {
                oModel.setProperty("/searchFiltering", oConfig.enableSearchFiltering);
            }
            if (oConfig.enableTilesOpacity !== undefined) {
                oModel.setProperty("/tilesOpacity", oConfig.enableTilesOpacity);
            }
            if (oConfig.enableDragIndicator !== undefined) {
                oModel.setProperty("/enableDragIndicator", oConfig.enableDragIndicator);
            }
            tileActionModeEnabled = false;
            if (oConfig.enableActionModeMenuButton !== undefined) {
                oModel.setProperty("/actionModeMenuButtonEnabled", oConfig.enableActionModeMenuButton);
                tileActionModeEnabled = oConfig.enableActionModeMenuButton;
            }
            if (oConfig.enableRenameLockedGroup !== undefined) {
                oModel.setProperty("/enableRenameLockedGroup", oConfig.enableRenameLockedGroup);
            } else {
                oModel.setProperty("/enableRenameLockedGroup", false);
            }

            if (oConfig.enableActionModeFloatingButton !== undefined) {
                oModel.setProperty("/actionModeFloatingButtonEnabled", oConfig.enableActionModeFloatingButton);
                tileActionModeEnabled = tileActionModeEnabled || oConfig.enableActionModeFloatingButton;
            }
            oModel.setProperty("/tileActionModeEnabled", tileActionModeEnabled);
            if (oConfig.enableTileActionsIcon !== undefined) {
                //Available only for desktop
                oModel.setProperty("/tileActionsIconEnabled", sap.ui.Device.system.desktop ? oConfig.enableTileActionsIcon : false);
            }
            if (oConfig.enableHideGroups !== undefined) {
                oModel.setProperty("/enableHideGroups", oConfig.enableHideGroups);
            }
            // check for title
            if (oConfig.title) {
                oModel.setProperty("/title", oConfig.title);
            }

            // xRay enablement configuration
            oModel.setProperty("/enableHelp", !!this.oShellConfig.enableHelp);
            oModel.setProperty("/disableSortedLockedGroups", !!oConfig.disableSortedLockedGroups);

        }
    },

    initNavContainer: function (oController) {
        var oNavContainer = new sap.m.NavContainer({
            id: "navContainerFlp"
        });
        oNavContainer.addCustomTransition(
            "slideBack",
            sap.m.NavContainer.transitions.slide.back,
            sap.m.NavContainer.transitions.slide.back
        );
        return oNavContainer;
    },

    setInitialConfiguration: function() {
        this.oRouter.initialize();

        // set keyboard navigation handler
        sap.ushell.components.flp.ComponentKeysHandler.init(this.oModel, this.oRouter);
        sap.ushell.renderers.fiori2.AccessKeysHandler.registerAppKeysHandler(sap.ushell.components.flp.ComponentKeysHandler.handleFocusOnMe);
        var translationBundle = sap.ushell.resources.i18n,
            aShortcutsDescriptions = [];

        aShortcutsDescriptions.push({text: "Alt+H", description: translationBundle.getText("actionHomePage")});

        if (this.oModel.getProperty("/personalization")) {
            aShortcutsDescriptions.push({text: "Alt+C", description: translationBundle.getText("actionCatalog")});
        }

        sap.ushell.renderers.fiori2.AccessKeysHandler.registerAppShortcuts(sap.ushell.components.flp.ComponentKeysHandler.handleShortcuts, aShortcutsDescriptions);
    },

    exit : function () {
        this.oDashboardManager.destroy();
    }
});

}; // end of sap/ushell/components/flp/Component.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.flp.launchpad.DashboardManager') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, document, $, setTimeout, window */
    /*jslint plusplus: true, nomen: true, bitwise: true */

    jQuery.sap.declare("sap.ushell.components.flp.launchpad.DashboardManager");
    

    /**
     * Return translated text. Private function in this module.
     * @param sMsgId
     *      Id of the text that is to be translated.
     * @param aParams
     *      Array of parameters to be included in the resulted string instead of place holders.
     */
    var getLocalizedText = function (sMsgId, aParams) {
            return aParams ? sap.ushell.resources.i18n.getText(sMsgId, aParams) : sap.ushell.resources.i18n.getText(sMsgId);
        },

        /**
         * This function returns the number of tiles which are supported on the current device in the current catalog.
         * The catalog is identified by its title, so if several catalogs exists with the same title -
         * the returned value is the number of the intent-supported-tiles in all of them.
         * @param oCatalogModel
         * @returns {Number}
         * @private
         */
        getNumIntentSupportedTiles = function (oCatalogModel) {
            var aCatalogTiles = this.oModel.getProperty('/catalogTiles'),
                aCurrentCatalogSupportedTiles = aCatalogTiles.filter(function (oTile) {
                    return oTile.catalog === oCatalogModel.title && oTile.isTileIntentSupported === true;
                });

            return aCurrentCatalogSupportedTiles.length;
        };

    sap.ui.base.EventProvider.extend("sap.ushell.components.flp.launchpad.DashboardManager", {
        metadata: {
            publicMethods: ["getModel", "getDashboardView", "getGroupListView", "isGroupListViewCreated", "loadPersonalizedGroups", "attachEvent", "detachEvent", "attachEventOnce", "createTile", "deleteCatalogTileFromGroup", "resetGroupsOnFailure", "createGroupAndSaveTile"]
        },
        analyticsConstants: {
            PERSONALIZATION: "FLP: Personalization",
            RENAME_GROUP: "FLP: Rename Group",
            MOVE_GROUP: "FLP: Move Group",
            DELETE_GROUP: "FLP: Delete Group",
            RESET_GROUP: "FLP: Reset Group",
            DELETE_TILE: "FLP: Delete Tile",
            ADD_TILE: "FLP: Add Tile",
            MOVE_TILE: "FLP: Move Tile"
        },
        constructor: function (sId, mSettings) {
            //make this class only available once
            if (sap.ushell.components.flp.launchpad.getDashboardManager && sap.ushell.components.flp.launchpad.getDashboardManager()) {
                return sap.ushell.components.flp.launchpad.getDashboardManager();
            }
            sap.ushell.components.flp.launchpad.getDashboardManager = jQuery.sap.getter(this.getInterface());
            this.oPageBuilderService = sap.ushell.Container.getService("LaunchPage");
            this.oModel = mSettings.model;
            this.oConfig = mSettings.config;
            this.oRouter = mSettings.router;
            this.oSortableDeferred = $.Deferred();
            this.oSortableDeferred.resolve();
            this.aRequestQueue = [];
            this.bRequestRunning = false;
            this.tagsPool = [];
            this.registerEvents();
            this.oTileCatalogToGroupsMap = {};
            this.tileViewUpdateQueue = [];
            this.tileViewUpdateTimeoutID = 0;
            this.oPopover = null;
            this.tileUuid = null;
            this.oGroupNotLockedFilter = new sap.ui.model.Filter("isGroupLocked", sap.ui.model.FilterOperator.EQ, false);
            //get 'home' view from the router
            if (this.oRouter) {
                var oTarget = this.oRouter.getTarget('home');
                oTarget.attachDisplay(function (oEvent) {
                    this.oDashboardView = oEvent.getParameter('view');
                }.bind(this));
            }
        },

        createMoveActionDialog: function () {
            var oGroupFilter = this.oGroupNotLockedFilter;

            this.moveDialog = new sap.m.SelectDialog("moveDialog", {
                title: sap.ushell.resources.i18n.getText('moveTileDialog_title'),
                rememberSelections: false,
                search: function (oEvent) {
                    var sValue = oEvent.getParameter("value"),
                        oFilter = new sap.ui.model.Filter("title", sap.ui.model.FilterOperator.Contains, sValue),
                        oBinding = oEvent.getSource().getBinding("items");
                    oBinding.filter([oFilter, oGroupFilter]);
                },
                contentWidth: '400px',
                confirm: function (oEvent) {
                    var aContexts = oEvent.getParameter("selectedContexts"),
                        oEventBus = sap.ui.getCore().getEventBus();
                    if (aContexts.length) {
                        oEventBus.publish("launchpad", "moveTile", {
                            sTileId: this.tileUuid,
                            toGroupId: aContexts[0].getObject().groupId,
                            toIndex: aContexts[0].getObject().tiles.length,
                            source: this.moveDialog.getId()
                        });

                        oEventBus.publish("launchpad", "scrollToGroup", {
                            groupId: aContexts[0].getObject().groupId,
                            groupChanged: false,
                            focus: false
                        });

                    }
                }.bind(this),
                items: {
                    path: "/groups",
                    filters: [oGroupFilter],
                    template: new sap.m.StandardListItem({
                        title: "{title}"
                    })
                }
            });

            this.moveDialog.setModel(this.oModel);
        },

        registerEvents: function () {
            var oEventBus = sap.ui.getCore().getEventBus(),
                that = this;
            oEventBus.subscribe("launchpad", "addBookmarkTile", this._createBookmark, this);
            oEventBus.subscribe("sap.ushell.services.Bookmark", "bookmarkTileAdded", this._addBookmarkToModel, this);
            oEventBus.subscribe("sap.ushell.services.Bookmark", "catalogTileAdded", this._refreshGroupInModel, this);
            oEventBus.subscribe("sap.ushell.services.Bookmark", "bookmarkTileDeleted", this.loadPersonalizedGroups, this);
            oEventBus.subscribe("launchpad", "loadDashboardGroups", this.loadPersonalizedGroups, this);
            oEventBus.subscribe("launchpad", "createGroupAt", this._createGroupAt, this);
            oEventBus.subscribe("launchpad", "createGroup", this._createGroup, this);
            oEventBus.subscribe("launchpad", "deleteGroup", this._deleteGroup, this);
            oEventBus.subscribe("launchpad", "resetGroup", this._resetGroup, this);
            oEventBus.subscribe("launchpad", "changeGroupTitle", this._changeGroupTitle, this);
            oEventBus.subscribe("launchpad", "moveGroup", this._moveGroup, this);
            oEventBus.subscribe("launchpad", "deleteTile", this._deleteTile, this);
            oEventBus.subscribe("launchpad", "moveTile", this._moveTile, this);
            oEventBus.subscribe("launchpad", "sortableStart", this._sortableStart, this);
            oEventBus.subscribe("launchpad", "sortableStop", this._sortableStop, this);
            oEventBus.subscribe("showCatalog", this.loadAllCatalogs, this);

            //add Remove action for all tiles
            this.oPageBuilderService.registerTileActionsProvider(function (oTile) {

//  This check had been removed, as in the ActionMode._openActionsMenu we have a check if the related group is a locked group
//  then we do not show any action. This is the current bahviour as the Action of Tile-Settings is added by the tiles themselves
//  (Dynamin/StaticTile.controller.doInit) and they are not aware of the group being locked, so we do the check in one central place.
//
//                var oModelTile = that.getModelTileById(that.oPageBuilderService.getTileId(oTile));
//                if (oModelTile.isLocked) {
//                    return;
//                }

                jQuery.sap.require("sap.m.MessageBox");
                return [{
                    text: sap.ushell.resources.i18n.getText('moveTileDialog_action'),
                    press: function (oEvent) {
                        that.tileUuid = that.getModelTileById(that.oPageBuilderService.getTileId(oTile)).uuid;
                        if (!that.moveDialog) {
                            that.createMoveActionDialog();
                        }
                        that.moveDialog.getBinding("items").filter([that.oGroupNotLockedFilter]);
                        that.moveDialog.open();
                    }
                }];
            });
        },

        destroy: function () {
            var oEventBus = sap.ui.getCore().getEventBus();
            oEventBus.unsubscribe("launchpad", "addBookmarkTile", this._createBookmark, this);
            oEventBus.unsubscribe("launchpad", "loadDashboardGroups", this.loadPersonalizedGroups, this);
            oEventBus.unsubscribe("launchpad", "createGroupAt", this._createGroupAt, this);
            oEventBus.unsubscribe("launchpad", "createGroup", this._createGroup, this);
            oEventBus.unsubscribe("launchpad", "deleteGroup", this._deleteGroup, this);
            oEventBus.unsubscribe("launchpad", "resetGroup", this._resetGroup, this);
            oEventBus.unsubscribe("launchpad", "changeGroupTitle", this._changeGroupTitle, this);
            oEventBus.unsubscribe("launchpad", "moveGroup", this._moveGroup, this);
            oEventBus.unsubscribe("launchpad", "deleteTile", this._deleteTile, this);
            oEventBus.unsubscribe("launchpad", "moveTile", this._moveTile, this);
            oEventBus.unsubscribe("launchpad", "sortableStart", this._sortableStart, this);
            oEventBus.unsubscribe("launchpad", "sortableStop", this._sortableStop, this);
            oEventBus.unsubscribe("showCatalog", this.loadAllCatalogs, this);

            sap.ushell.components.flp.launchpad.getDashboardManager = undefined;
        },


        _refreshTiles: function () {
            var that = this,
                aGroups = this.oModel.getProperty("/groups");

            jQuery.each(aGroups, function (nIndex, oGroup) {
                jQuery.each(oGroup.tiles, function (nIndex, oTile) {
                    that.oPageBuilderService.refreshTile(oTile.object);
                });
            });
        },

        _sortableStart: function () {
            this.oSortableDeferred = $.Deferred();
        },

        _createBookmark: function (sChannelId, sEventId, oData) {
            var tileGroup = oData.group ? oData.group.object : "";

            delete oData.group;

            this._addRequest($.proxy(function () {
                var oResultPromise = sap.ushell.Container.getService("Bookmark").addBookmark(oData, tileGroup),
                    oResourceBundle = sap.ushell.resources.i18n;
                oResultPromise.always($.proxy(this._checkRequestQueue, this));
                oResultPromise.done(function () {
                    //the tile is added to our model in "_addBookmarkToModel" here we just show the
                    //success toast.
                    if (sap.ushell.Container) {
                        sap.ushell.Container.getService('Message').info(oResourceBundle.getText('tile_created_msg'));
                    }
                });
                oResultPromise.fail(function (sMsg) {
                    jQuery.sap.log.error(
                        "Failed to add bookmark",
                        sMsg,
                        "sap.ushell.ui.footerbar.AddBookmarkButton"
                    );
                    if (sap.ushell.Container) {
                        sap.ushell.Container.getService('Message').error(oResourceBundle.getText('fail_to_add_tile_msg'));
                    }
                });
            }, this));
        },

        //this function will be called also if an application used the bookmark service directly
        //to add a bookmark. the bookmark service publishes an event so that we will be able to
        //update the model. this method doesn't display a success toast since the application
        //should show success or failure messages
        _addBookmarkToModel: function (sChannelId, sEventId, oData) {
            var oTile = oData.tile,
                oGroup = oData.group,
                isGroupLocked,
                srvc,
                sTileType,
                newTile,
                indexOfGroup,
                targetGroup;


            if (!oData || !oTile) {
                this.loadPersonalizedGroups();
                return;
            }

            //if the service was called directly, the
            isGroupLocked = oGroup ? oGroup.isGroupLocked : false; //oData.group is our model group
            //The create bookmark popup should not contain the locked groups anyway,
            //so this call not suppose to happen for a target locked group (we may as well always send false)
            srvc = this.oPageBuilderService;
            sTileType = srvc.getTileType(oTile);
            newTile = this._getTileModel(oTile, isGroupLocked, sTileType);
            indexOfGroup = oGroup ? this._getIndexOfGroupByObject(oGroup) : 0;
            targetGroup = this.oModel.getProperty("/groups/" + indexOfGroup);

            targetGroup.tiles.push(newTile);

            this.oModel.setProperty("/groups/" + indexOfGroup, targetGroup);
        },

        _refreshGroupInModel: function (sChannelId, sEventId, sGroupId) {
            var oLaunchPageService = sap.ushell.Container.getService("LaunchPage"),
                sErrorMsg = 'Failed to refresh group with id:' + sGroupId + ' in the model',
                that = this;

            oLaunchPageService.getGroups()
                .fail(jQuery.sap.log.error(sErrorMsg, null, "sap.ushell.components.flp.launchpad.DashboardManager"))
                .done(function (aGroups) {
                    aGroups.some(function (oGroup) {
                        if (oLaunchPageService.getGroupId(oGroup) === sGroupId) {
                            oLaunchPageService.getDefaultGroup().done(function (oDefaultGroup) {
                                var bIsDefaultGroup = sGroupId === oDefaultGroup.getId() ? true : false,
                                    oGroupModel = that._getGroupModel(oGroup, bIsDefaultGroup),
                                    indexOfGroup = that._getIndexOfGroupByObject(oGroupModel.object);

                                that.oModel.setProperty("/groups/" + indexOfGroup, oGroupModel);
                            });
                            return true;
                        }
                    });
                });
        },

        _sortableStop: function () {
            this.oSortableDeferred.resolve();
        },

        _handleAfterSortable: function (fFunc) {
            return $.proxy(function () {
                var outerArgs = Array.prototype.slice.call(arguments);
                this.oSortableDeferred.done(function () {
                    fFunc.apply(null, outerArgs);
                });
            }, this);
        },

        _addRequest: function (fRequest) {
            this.aRequestQueue.push(fRequest);
            if (!this.bRequestRunning) {
                this.bRequestRunning = true;
                this.aRequestQueue.shift()();
            }
        },

        _checkRequestQueue: function () {
            if (this.aRequestQueue.length === 0) {
                this.bRequestRunning = false;
            } else {
                this.aRequestQueue.shift()();
            }
        },

        _requestFailed: function () {
            this.aRequestQueue = [];
            this.bRequestRunning = false;
        },

        /*
         * oData should have the following parameters:
         * title
         */
        _createGroup: function (sChannelId, sEventId, oData) {
            var oGroup = this._getGroupModel(null),
                aGroups = this.oModel.getProperty("/groups"),
                oModel = this.oModel;

            oModel.setProperty("/groupList-skipScrollToGroup", true);
            window.setTimeout(function () {
                oModel.setProperty("/groups/" + aGroups.length, oGroup);
            }, 500);
            window.setTimeout(function () {
                oModel.setProperty("/groupList-skipScrollToGroup", false);
            }, 1000);

            // We don't call the backend here as the user hasn't had the opportunity to give the group a name yet.
            // The group will be persisted after it got a name, in the changeGroupTitle handler.
            // TODO: This depends on the behaviour of the GroupList, which enters edit-mode immediately after creating a group.
            //       It would be better if this event would be fired after the group has a name.
        },

        /*
         * oData should have the following parameters:
         * title
         * location
         */
        _createGroupAt: function (sChannelId, sEventId, oData) {
            var newGroupIndex = parseInt(oData.location, 10),
                aGroups = this.oModel.getProperty("/groups"),
                oGroup = this._getGroupModel(null, false, newGroupIndex === aGroups.length),
                oModel = this.oModel,
                i;

            oGroup.index = newGroupIndex;
            aGroups.splice(newGroupIndex, 0, oGroup);
            for (i = 0; i < aGroups.length - 1; i++) {
                aGroups[i].isLastGroup = false;
            }

            //set new groups index
            for (i = newGroupIndex + 1; i < aGroups.length; i++) {
                aGroups[i].index++;
            }
            oModel.setProperty("/groups", aGroups);
        },

        _getIndexOfGroup: function (sGroupId) {
            var nGroupIndex = null,
                aGroups = this.oModel.getProperty("/groups");
            jQuery.each(aGroups, function (nIndex, oGroup) {
                if (oGroup.groupId === sGroupId) {
                    nGroupIndex = nIndex;
                    return false;
                }
            });
            return nGroupIndex;
        },

        _getIndexOfGroupByObject: function (oGroup) {
            var nGroupIndex = null,
                aGroups = this.oModel.getProperty("/groups"),
                sGroupId = this.oPageBuilderService.getGroupId(oGroup);
            aGroups.forEach(function (oModelGroup, nIndex) {
                var sCurrentGroupId = this.oPageBuilderService.getGroupId(oModelGroup.object);
                if (sCurrentGroupId === sGroupId) {
                    nGroupIndex = nIndex;
                    return false;
                }
            }.bind(this));
            return nGroupIndex;
        },

        _getPathOfGroup: function (sGroupId) {
            return "/groups/" + this._getIndexOfGroup(sGroupId);
        },

        _getPathOfTile: function (sTileId) {
            var aGroups = this.oModel.getProperty("/groups"),
                nResGroupIndex = null,
                nResTileIndex = null;

            jQuery.each(aGroups, function (nGroupIndex, oGroup) {
                jQuery.each(oGroup.tiles, function (nTileIndex, oTile) {
                    if (oTile.uuid === sTileId) {
                        nResGroupIndex = nGroupIndex;
                        nResTileIndex = nTileIndex;
                        return false;
                    }
                });

                if (nResGroupIndex !== null) {
                    return false;
                }
            });

            return nResGroupIndex !== null ? "/groups/" + nResGroupIndex + "/tiles/" + nResTileIndex : null;
        },

        // see http://stackoverflow.com/questions/5306680/move-an-array-element-from-one-array-position-to-another
        _moveInArray: function (aArray, nFromIndex, nToIndex) {
            if (nToIndex >= aArray.length) {
                var k = nToIndex - aArray.length;
                while ((k--) + 1) {
                    aArray.push(undefined);
                }
            }
            aArray.splice(nToIndex, 0, aArray.splice(nFromIndex, 1)[0]);
        },

        _updateGroupIndices: function (aArray) {
            var k;
            for (k = 0; k < aArray.length; k++) {
                aArray[k].index = k;
            }
        },
        /*
         * oData should have the following parameters
         * groupId
         */
        _deleteGroup: function (sChannelId, sEventId, oData) {
            var that = this,
                sGroupId = oData.groupId,
                sGroupObjectId,
                aGroups = this.oModel.getProperty("/groups"),
                nGroupIndex = this._getIndexOfGroup(sGroupId),
                bIsLast = aGroups.length - 1 === nGroupIndex,
                oGroup = null,
                oResultPromise,
                oModel,
                nextSelectedItemIndex,
                oBus;

            nextSelectedItemIndex = bIsLast ? nGroupIndex - 1 : nGroupIndex;
            this._destroyGroupModel("/groups/" + nGroupIndex);
            oGroup = aGroups.splice(nGroupIndex, 1)[0].object;
            if (bIsLast) {
                this.oModel.setProperty("/groups/" + nextSelectedItemIndex + "/isLastGroup", bIsLast);
            }
            sGroupObjectId = sap.ushell.Container.getService("LaunchPage").getGroupId(oGroup);
            oModel = this.oModel;
            oModel.setProperty("/groupList-skipScrollToGroup", true);
            oModel.setProperty("/groups", aGroups);
            this._updateGroupIndices(aGroups);

            if (nextSelectedItemIndex >= 0) {
                oBus = sap.ui.getCore().getEventBus();
                window.setTimeout($.proxy(oBus.publish, oBus, "launchpad", "scrollToGroup", {groupId: this.oModel.getProperty("/groups")[nextSelectedItemIndex].groupId}), 200);
            }

            window.setTimeout(function () {
                oModel.setProperty("/groupList-skipScrollToGroup", false);
            }, 1000);

            this._addRequest($.proxy(function () {
                var groupName = sap.ushell.Container.getService("LaunchPage").getGroupTitle(oGroup);
                try {
                    oResultPromise = this.oPageBuilderService.removeGroup(oGroup);
                } catch (err) {
                    this._resetGroupsOnFailure("fail_to_delete_group_msg");
                    return;
                }

                oResultPromise.done(function () {
                    sap.ushell.Container.getService("UsageAnalytics").logCustomEvent(
                        this.analyticsConstants.PERSONALIZATION,
                        this.analyticsConstants.DELETE_GROUP,
                        [groupName, sGroupObjectId]
                    );
                    this._showLocalizedMessage("group_deleted_msg", [groupName]);
                }.bind(this));
                oResultPromise.fail(this._handleAfterSortable(that._resetGroupsOnFailureHelper("fail_to_delete_group_msg")));
                oResultPromise.always($.proxy(this._checkRequestQueue, this));
            }, this));
        },

        /*
         * oData should have the following parameters
         * groupId
         */
        _resetGroup: function (sChannelId, sEventId, oData) {
            var that = this,
                sGroupId = oData.groupId,
                nGroupIndex = this._getIndexOfGroup(sGroupId),
                oGroup = this.oModel.getProperty("/groups/" + nGroupIndex),
                sGroupTitle,
                sGroupObjectId,
                oResultPromise,
                oGroupControl;

            this.oModel.setProperty("/groups/" + nGroupIndex + "/sortable", false);
            sGroupObjectId = sap.ushell.Container.getService("LaunchPage").getGroupId(oGroup.object);
            sGroupTitle = sap.ushell.Container.getService("LaunchPage").getGroupTitle(oGroup.object);
            this._addRequest($.proxy(function () {
                try {
                    oResultPromise = this.oPageBuilderService.resetGroup(oGroup.object);
                } catch (err) {
                    this._resetGroupsOnFailure("fail_to_reset_group_msg");
                    return;
                }

                oResultPromise.done(this._handleAfterSortable($.proxy(function (sGroupId, oGroup, oResetedGroup) {
                    sap.ushell.Container.getService("UsageAnalytics").logCustomEvent(
                        this.analyticsConstants.PERSONALIZATION,
                        this.analyticsConstants.RESET_GROUP,
                        [sGroupTitle, sGroupObjectId]
                    );
                    var nGroupIndex = that._getIndexOfGroup(sGroupId);

                    this._loadGroup(nGroupIndex, oResetedGroup || oGroup.object);
                    this._showLocalizedMessage("group_reset_msg", [oGroup.title]);
                    this.oModel.setProperty("/groups/" + nGroupIndex + "/sortable", true);

                    oGroupControl = sap.ui.getCore().byId('dashboardGroups').getGroupControlByGroupId(sGroupId);
                    if (oGroupControl) {
                        oGroupControl.rerender();
                    }

                }, this, sGroupId, oGroup)));

                oResultPromise.fail(this._handleAfterSortable(that._resetGroupsOnFailureHelper("fail_to_reset_group_msg")));
                oResultPromise.always($.proxy(this._checkRequestQueue, this));
            }, this));
        },

        /*
         * oData should have the following parameters
         * fromIndex
         * toIndex
         */
        _moveGroup: function (sChannelId, sEventId, oData) {
            var iFromIndex = oData.fromIndex,
                iToIndex = oData.toIndex,
                aGroups = this.oModel.getProperty("/groups"),
                oModel = this.oModel,
                bActionMode = this.oModel.getProperty("/tileActionModeActive"),
                oResultPromise,
                oGroup,
                sGroupId,
                that = this,
                i;

            //Fix the indices to support hidden groups
            if (!bActionMode) {
                iFromIndex = this._adjustFromGroupIndex(iFromIndex, aGroups);
            }

            //Move var definition after fixing the from index.
            oGroup = aGroups[iFromIndex];
            sGroupId = oGroup.groupId;
            //Fix the to index accordingly
            if (!bActionMode) {
                iToIndex = this._adjustToGroupIndex(iToIndex, aGroups, sGroupId);
            }

            this._moveInArray(aGroups, iFromIndex, iToIndex);
            this._updateGroupIndices(aGroups);
            oModel.setProperty("/groupList-skipScrollToGroup", true);
            for (i = 0; i < aGroups.length - 1; i++) {
                aGroups[i].isLastGroup = false;
            }
            aGroups[aGroups.length - 1].isLastGroup = true;
            oModel.setProperty("/groups", aGroups);

            window.setTimeout(function () {
                oModel.setProperty("/groupList-skipScrollToGroup", false);
            }, 1000);

            this._addRequest($.proxy(function () {
                var oGroup = this.oModel.getProperty(this._getPathOfGroup(sGroupId));
                try {
                    oResultPromise = this.oPageBuilderService.moveGroup(oGroup.object, iToIndex);
                } catch (err) {
                    this._resetGroupsOnFailure("fail_to_move_group_msg");
                    return;
                }

                oResultPromise.done(function () {
                    sap.ushell.Container.getService("UsageAnalytics").logCustomEvent(
                        that.analyticsConstants.PERSONALIZATION,
                        that.analyticsConstants.MOVE_GROUP,
                        [oGroup.title, iFromIndex, iToIndex, sGroupId]
                    );
                });
                oResultPromise.fail(this._handleAfterSortable(this._resetGroupsOnFailureHelper("fail_to_move_group_msg")));
                oResultPromise.always($.proxy(this._checkRequestQueue, this));
            }, this));
        },

        /*
         * toIndex - The index in the UI of the required group new index. (it is not including the group itself)
         * groups - The list of groups in the model (including hidden and visible groups)
         * The function returns the new index to be used in the model - since there might be hidden groups that should be taken in account
         */
        _adjustToGroupIndex: function (toIndex, groups, groupId) {
            var visibleCounter = 0,
                bIsGroupIncluded = false,
                i = 0;
            // In order to get the new index, count all groups (visible+hidden) up to the new index received from the UI.
            for (i = 0; i < groups.length && visibleCounter < toIndex; i++) {
                if (groups[i].isGroupVisible) {
                    if (groups[i].groupId === groupId) {
                        bIsGroupIncluded = true;
                    } else {
                        visibleCounter++;
                    }
                }
            }
            if (bIsGroupIncluded) {
                return i - 1;
            }
            return i;
        },

        _adjustFromGroupIndex: function (index, groups) {
            var visibleGroupsCounter = 0,
                i;
            for (i = 0; i < groups.length; i++) {
                if (groups[i].isGroupVisible) {
                    visibleGroupsCounter++;
                }
                if (visibleGroupsCounter === index + 1) {
                    return i;
                }
            }
            //Not suppose to happen, but if not found return the input index
            return index;
        },
        /*
         * oData should have the following parameters
         * groupId
         * newTitle
         */
        _changeGroupTitle: function (sChannelId, sEventId, oData) {
            var sNewTitle = oData.newTitle,
                aGroups = this.oModel.getProperty("/groups"),
                sGroupId = oData.groupId,
                sGroupOriginalId = oData.groupId,
                nGroupIndex = this._getIndexOfGroup(sGroupId),
                oGroup = this.oModel.getProperty("/groups/" + nGroupIndex),
                sOldTitle = oGroup.title,
                oResultPromise,
                that = this;

            this.oModel.setProperty("/groups/" + nGroupIndex + "/title", sNewTitle);

            // Check, if the group has already been persisted.
            if (!oGroup.object) {
                // Add the group in the backend.
                this._addRequest($.proxy(function () {
                    try {
                        if (nGroupIndex === aGroups.length - 1) {
                            oResultPromise = this.oPageBuilderService.addGroup(sNewTitle, nGroupIndex);
                        } else {
                            oResultPromise = this.oPageBuilderService.addGroupAt(sNewTitle, nGroupIndex);
                        }
                    } catch (err) {
                        this._resetGroupsOnFailure("fail_to_create_group_msg");
                        return;
                    }

                    oResultPromise.done(this._handleAfterSortable($.proxy(function (sGroupId, oNewGroup) {
                        var nGroupIndex = this._getIndexOfGroup(sGroupId);
                        this._loadGroup(nGroupIndex, oNewGroup);
                        sap.ushell.Container.getService("UsageAnalytics").logCustomEvent(
                            that.analyticsConstants.PERSONALIZATION,
                            that.analyticsConstants.RENAME_GROUP,
                            [sOldTitle, sNewTitle, sGroupId]
                        );
                    }, this, sGroupId)));

                    oResultPromise.fail(this._handleAfterSortable(this._resetGroupsOnFailureHelper("fail_to_create_group_msg")));
                }, this));
            } else {
                // Rename the group in the backend.
                // model is already changed - it only has to be made persistent in the backend
                this._addRequest($.proxy(function () {
                    try {
                        oResultPromise = this.oPageBuilderService.setGroupTitle(oGroup.object, sNewTitle);
                    } catch (err) {
                        this._resetGroupsOnFailure("fail_to_rename_group_msg");
                        return;
                    }
                    oResultPromise.done(function () {
                        sGroupOriginalId = sap.ushell.Container.getService("LaunchPage").getGroupId(oGroup.object);
                        sap.ushell.Container.getService("UsageAnalytics").logCustomEvent(
                            that.analyticsConstants.PERSONALIZATION,
                            that.analyticsConstants.RENAME_GROUP,
                            [sOldTitle, sNewTitle, sGroupOriginalId]
                        );
                    });
                    // Revert to the old title.
                    oResultPromise.fail(this._handleAfterSortable($.proxy(function (sGroupId, sOldTitle) {
                        var sGroupPath = this._getPathOfGroup(sGroupId);
                        this._showLocalizedError("fail_to__msg");
                        this.oModel.setProperty(sGroupPath + "/title", sOldTitle);
                        this._requestFailed();
                    }, this, sGroupId)));
                }, this));
            }

            oResultPromise.always($.proxy(this._checkRequestQueue, this));
        },

        createTile: function (oData) {
            var oCatalogTileContext = oData.catalogTileContext,
                oContext = oData.groupContext,
                oGroup = this.oModel.getProperty(oContext.getPath()),
                sGroupId = oGroup.groupId,
                oResultPromise,
                deferred = jQuery.Deferred(),
                oResponseData = {},
                oBus;

            //publish event for UserActivityLog
            oBus = sap.ui.getCore().getEventBus();
            oBus = sap.ui.getCore().getEventBus();
            $.proxy(oBus.publish, oBus, "launchpad", "addTile", {
                catalogTileContext: oCatalogTileContext,
                groupContext: oContext
            });

            if (!oCatalogTileContext) {
                jQuery.sap.log.warning("DashboardManager: Did not receive catalog tile object. Abort.", this);
                return;
            }

            this._addRequest($.proxy(function () {
                try {
                    oResultPromise = this.oPageBuilderService.addTile(oCatalogTileContext.getProperty("src"), oContext.getProperty("object"));
                } catch (err) {
                    this._resetGroupsOnFailure("fail_to_add_tile_msg");
                    return;
                }

                var that = this;
                oResultPromise
                    .done(function (oTile) {
                        var sGroupPath = that._getPathOfGroup(sGroupId),
                            sTileTitle = sap.ushell.Container.getService("LaunchPage").getTileTitle(oTile);

                        that._addTileToGroup(sGroupPath, oTile);
                        oResponseData = {group: oGroup, status: 1, action: 'add'}; // 1 - success
                        sap.ushell.Container.getService("UsageAnalytics").logCustomEvent(
                            that.analyticsConstants.PERSONALIZATION,
                            that.analyticsConstants.ADD_TILE,
                            [oGroup.title, sTileTitle]
                        );
                        deferred.resolve(oResponseData);
                    })
                    .fail(function () {
                        oResponseData = {group: oGroup, status: 0, action: 'add'};  // 0 - failure
                        deferred.resolve(oResponseData);
                    })
                    .always(
                        function () {
                            that._checkRequestQueue();
                        }
                    );
            }, this));

            return deferred.promise();
        },

        createGroupAndSaveTile: function (oData) {
            var oCatalogTileContext = oData.catalogTileContext,
                sNewTitle = oData.newGroupName,
                oResultPromise,
                deferred = jQuery.Deferred(),
                oResponseData = {},
                oGroup,
                aGroups,
                sGroupId,
                index;

            if (sap.ushell.utils.validHash(sNewTitle) && oCatalogTileContext) {

                oGroup = this._getGroupModel(null, false, true);
                aGroups = this.oModel.getProperty("/groups");
                sGroupId = oGroup.groupId;
                index = aGroups.length;

                if (index > 0) {
                    aGroups[index - 1].isLastGroup = false;
                }
                oGroup.title = sNewTitle;
                oGroup.index = index;
                oGroup.editMode = false;
                aGroups.push(oGroup);
                this.oModel.setProperty("/groups/", aGroups);

                if (!oCatalogTileContext) {
                    jQuery.sap.log.warning("DashboardManager: Did not receive catalog tile object. Abort.", this);
                    return;
                }

                // Create new group
                this._addRequest($.proxy(function () {
                    try {
                        oResultPromise = this.oPageBuilderService.addGroup(sNewTitle);
                    } catch (err) {
                        this._resetGroupsOnFailure("fail_to_create_group_msg");
                        return;
                    }

                    oResultPromise.done(this._handleAfterSortable($.proxy(function (sGroupId, oNewGroup) {
                        var nGroupIndex = this._getIndexOfGroup(sGroupId),
                            oContext,
                            promise;

                        this._loadGroup(nGroupIndex, oNewGroup);

                        oContext = new sap.ui.model.Context(this.oModel, "/groups/" + nGroupIndex);
                        promise = this.createTile({
                            catalogTileContext: oCatalogTileContext,
                            groupContext: oContext
                        });

                        promise.done(function (data) {
                            oResponseData = {group: data.group, status: 1, action: 'addTileToNewGroup'}; // 1 - success
                            deferred.resolve(oResponseData);
                        }).fail(function (data) {
                            oResponseData = {group: data.group, status: 0, action: 'addTileToNewGroup'}; // 0 - failure
                            deferred.resolve(oResponseData);
                        });
                    }, this, sGroupId)));

                    oResultPromise.fail(function (data) {
                        this._handleAfterSortable(this._resetGroupsOnFailureHelper("fail_to_create_group_msg"));
                        oResponseData = {group: data.group, status: 0, action: 'createNewGroup'}; // 0 - failure
                        deferred.resolve(oResponseData); // 0 - failure
                    }.bind(this));

                    oResultPromise.always($.proxy(this._checkRequestQueue, this));
                }, this));
            }
            return deferred.promise();
        },

        /*
         * Dashboard
         * oData should have the following parameters
         * tileId
         * groupId
         */
        _deleteTile: function (sChannelId, sEventId, oData) {
            var that = this,
                sTileId = oData.tileId || oData.originalTileId,
                aGroups = this.oModel.getProperty("/groups");

            jQuery.each(aGroups, function (nGroupIndex, oGroup) {
                var bFoundFlag = false;
                jQuery.each(oGroup.tiles, function (nTileIndex, oTmpTile) {
                    if (oTmpTile.uuid === sTileId || oTmpTile.originalTileId === sTileId) {
                        // Remove tile from group.
                        that._destroyTileModel("/groups/" + nGroupIndex + "/tiles/" + nTileIndex);
                        var oTile = oGroup.tiles.splice(nTileIndex, 1)[0],
                            oResultPromise,
                            sTileName = sap.ushell.Container.getService("LaunchPage").getTileTitle(oTile.object),
                            sCatalogTileId = sap.ushell.Container.getService("LaunchPage").getCatalogTileId(oTile.object),
                            sCatalogTileTitle = sap.ushell.Container.getService("LaunchPage").getCatalogTileTitle(oTile.object),
                            sTileRealId = sap.ushell.Container.getService("LaunchPage").getTileId(oTile.object);

                        that.oModel.setProperty("/groups/" + nGroupIndex + "/tiles", oGroup.tiles);
                        that._addRequest(function () {
                            try {
                                oResultPromise = that.oPageBuilderService.removeTile(oGroup.object, oTile.object);
                            } catch (err) {
                                this._resetGroupsOnFailure("fail_to_remove_tile_msg");
                                return;
                            }

                            oResultPromise.done(that._handleAfterSortable(function () {

                                if (sTileName) {
                                    that._showLocalizedMessage("tile_deleted_msg", [sTileName, oGroup.title]);
                                } else {
                                    that._showLocalizedMessage("tile_deleted_msg", [sTileName, oGroup.title]);
                                }
                                sap.ushell.Container.getService("UsageAnalytics").logCustomEvent(
                                    that.analyticsConstants.PERSONALIZATION,
                                    that.analyticsConstants.DELETE_TILE,
                                    [sTileName || sTileRealId, sCatalogTileId, sCatalogTileTitle, oGroup.title]
                                );
                            }));
                            oResultPromise.fail(that._handleAfterSortable(that._resetGroupsOnFailureHelper("fail_to_remove_tile_msg")));
                            oResultPromise.always($.proxy(that._checkRequestQueue, that));
                        });
                        sap.ushell.utils.handleTilesVisibility();
                        bFoundFlag = true;
                        return false;
                    }
                });
                if (bFoundFlag) {
                    return false;
                }
            });
        },

        _sendDeleteTileRequest: function (oGroup, oTile) {
            var oResultPromise,
                tmpPageBuilderService = sap.ushell.Container.getService('LaunchPage');
            try {
                oResultPromise = tmpPageBuilderService.removeTile(oGroup, oTile.object);
            } catch (err) {
                jQuery.sap.log.error("deleteCatalogTileFromGroup ; removeTile ; Exception occurred: " + err);
            }

            return oResultPromise;
        },

        /*
         * Delete all instances of a catalog Tile from a Group
         */
        deleteCatalogTileFromGroup: function (oData) {
            var that = this,
                sDeletedTileCatalogId = decodeURIComponent(oData.tileId),
                iGroupIndex = oData.groupIndex,
                oGroup = this.oModel.getProperty("/groups/" + iGroupIndex),
                serv = sap.ushell.Container.getService("LaunchPage"),
                deferred = jQuery.Deferred(),
                aDeleteTilePromises = [],
                aFilteredTiles,
                oPositiveDeferred,
                oDeletePromise;

            aFilteredTiles = oGroup.tiles.filter(
                function (oTile) {
                    var sTmpTileCatalogId = serv.getCatalogTileId(oTile.object);
                    if (sTmpTileCatalogId !== sDeletedTileCatalogId) {
                        return true;
                    } else {
                        // Initialize oPositiveDeferred object that will later be resolved with the status of the delete request
                        oPositiveDeferred = jQuery.Deferred();
                        // Send the delete request to the server
                        oDeletePromise = that._sendDeleteTileRequest(oGroup.object, oTile);

                        oDeletePromise.done(
                            (function (deferred) {
                                return function () {
                                    deferred.resolve({status: true});
                                };
                            })(oPositiveDeferred));

                        oDeletePromise.fail(
                            (function (deferred) {
                                return function () {
                                    deferred.resolve({status: false});
                                };
                            })(oPositiveDeferred));

                        aDeleteTilePromises.push(oPositiveDeferred);

                        return false;
                    }
                }
            );

            oGroup.tiles = aFilteredTiles;

            // Wait for all of the delete requests before resolving the deferred
            jQuery.when.apply(jQuery, aDeleteTilePromises).
                done(
                    function (result) {
                        var bSuccess = true,
                            index = 0,
                            promisesLength = aDeleteTilePromises.length;

                        // Check if at least one deleteTilePromises has failure status
                        for (index; index < promisesLength; index++) {
                            if (!result.status) {
                                bSuccess = false;
                                break;
                            }
                        }
                        if (bSuccess) {
                            // that.oModel.setProperty("/groups/" + iGroupIndex + "/tiles/", oGroup.tiles);
                            that.oModel.setProperty("/groups/" + iGroupIndex, oGroup);
                        }
                        deferred.resolve({group: oGroup, status: bSuccess, action: 'remove'});
                    }
                );
            return deferred.promise();
        },

        /*
         * oData should have the following parameters:
         * fromGroupId
         * toGroupId
         * fromIndex
         * toIndex can be null => append as last tile in group
         */
        _moveTile : function (sChannelId, sEventId, oData) {
            var nNewIndex = oData.toIndex,
                sNewGroupId = oData.toGroupId,
                sTileId = oData.sTileId,
                sSource = oData.source,
                oTile,
                nTileIndex,
                oOldGroup,
                nOldGroupIndex,
                oNewGroup,
                nNewGroupIndex,
                srvc = sap.ushell.Container.getService("LaunchPage"),
                aGroups = this.oModel.getProperty("/groups"),
                oSourceGroup,
                oTargetGroup,
                oResultPromise;

            jQuery.each(aGroups, function (nTmpGroupIndex, oTmpGroup) {
                var bFoundFlag = false;
                jQuery.each(oTmpGroup.tiles, function (nTmpTileIndex, oTmpTile) {
                    if (oTmpTile.uuid === sTileId) {
                        oTile = oTmpTile;
                        nTileIndex = nTmpTileIndex;
                        oOldGroup = oTmpGroup;
                        nOldGroupIndex = nTmpGroupIndex;
                        bFoundFlag = true;
                        return false;
                    }
                });
                if (bFoundFlag) {
                    return false;
                }
            });
            jQuery.each(aGroups, function (nTmpGroupIndex, oTmpGroup) {
                if (oTmpGroup.groupId === sNewGroupId) {
                    oNewGroup = oTmpGroup;
                    nNewGroupIndex = nTmpGroupIndex;
                }
            });

            //When moving a tile to the group it is already in using the move dialog, there is no change
            if (oOldGroup.groupId == oNewGroup.groupId && (sSource === "moveDialog" || nNewIndex === null)) {
                return;
            }

            // When a tile is dragged into an empty group, the Plus-Tiles in the empty list cause
            // the new index to be off by one, i.e. 1 instead of 0, which causes an error.
            // This is a generic check which sanitizes the values if necessary.
            if (nNewIndex && nNewIndex > oNewGroup.tiles.length) {
                nNewIndex = oNewGroup.tiles.length;
            }

            if (oOldGroup.groupId === sNewGroupId) {
                if (nNewIndex === null || nNewIndex === undefined) {
                    // moved over group list to same group
                    oOldGroup.tiles.splice(nTileIndex, 1);
                    // Tile is appended. Set index accordingly.
                    nNewIndex = oOldGroup.tiles.length;
                    // append as last item
                    oOldGroup.tiles.push(oTile);
                } else {
                    nNewIndex = this._adjustTileIndex(nNewIndex, oTile, oOldGroup);
                    this._moveInArray(oOldGroup.tiles, nTileIndex, nNewIndex);
                }

                this.oModel.setProperty("/groups/" + nOldGroupIndex + "/tiles", oOldGroup.tiles);
            } else {
                // remove from old group
                oOldGroup.tiles.splice(nTileIndex, 1);
                this.oModel.setProperty("/groups/" + nOldGroupIndex + "/tiles", oOldGroup.tiles);

                // add to new group
                if (nNewIndex === null || nNewIndex === undefined) {
                    // Tile is appended. Set index accordingly.
                    nNewIndex = oNewGroup.tiles.length;
                    // append as last item
                    oNewGroup.tiles.push(oTile);
                } else {
                    nNewIndex = this._adjustTileIndex(nNewIndex, oTile, oNewGroup);
                    oNewGroup.tiles.splice(nNewIndex, 0, oTile);
                }
                this.oModel.setProperty("/groups/" + nNewGroupIndex + "/tiles", oNewGroup.tiles);
            }
            //recalculate the associated groups for catalog tiles
            this.mapCatalogTilesToGroups();
            this.updateCatalogTilesToGroupsMap();
            // Re-calculate the visibility of the Tiles
            sap.ushell.utils.handleTilesVisibility();

            // change in backend
            oSourceGroup = this.oModel.getProperty("/groups/" + nOldGroupIndex).object;
            oTargetGroup = this.oModel.getProperty("/groups/" + nNewGroupIndex).object;

            this._addRequest($.proxy(function () {
                try {
                    oResultPromise = this.oPageBuilderService.moveTile(oTile.object, nTileIndex, nNewIndex, oSourceGroup, oTargetGroup);
                } catch (err) {
                    this._resetGroupsOnFailure("fail_to_move_tile_msg");
                    return;
                }

                // Putting a special flag on the Tile's object
                // this enables us to disable opening the tile's action until it has been updated from the backend
                // (see in DashboardContent.view
                oTile.tileIsBeingMoved = true;

                oResultPromise.done(this._handleAfterSortable($.proxy(function (sTileId, oTargetTile) {
                    var sTilePath,
                        aUsageAnalyticsCustomProps = [
                            srvc.getTileTitle(oTile.object),
                            srvc.getGroupTitle(oSourceGroup),
                            srvc.getGroupTitle(oTargetGroup),
                            sTileId];

                    sap.ushell.Container.getService("UsageAnalytics").logCustomEvent(
                        this.analyticsConstants.PERSONALIZATION,
                        this.analyticsConstants.MOVE_TILE,
                        aUsageAnalyticsCustomProps
                    );
                    sTilePath = this._getPathOfTile(sTileId);

                    // If we cannot find the tile, it might have been deleted -> Check!
                    if (sTilePath) {
                        // Update the model with the new tile object and new Id.
                        this.oModel.setProperty(sTilePath + "/object", oTargetTile);
                        this.oModel.setProperty(sTilePath + "/originalTileId", this.oPageBuilderService.getTileId(oTargetTile));

                        // get the target-tile view and align the Model for consistency
                        this.oPageBuilderService.getTileView(oTargetTile).done(function (oView) {
                            // get the old view from tile's model
                            var oldViewContent = this.oModel.getProperty(sTilePath + "/content");
                            // first we set new view
                            this.oModel.setProperty(sTilePath + "/content", [oView]);
                            //now we destroy the old view
                            if (oldViewContent && oldViewContent[0]) {
                                oldViewContent[0].destroy();
                            }
                            // reset the move-scenario flag
                            this.oModel.setProperty(sTilePath + "/tileIsBeingMoved", false);
                        }.bind(this));
                    }
                }, this, sTileId)));

                oResultPromise.fail(this._handleAfterSortable(this._resetGroupsOnFailureHelper("fail_to_move_tile_msg")));
                oResultPromise.always($.proxy(this._checkRequestQueue, this));
            }, this));
        },

        // Adjust the moved-tile new index according to the visible+hidden tiles
        _adjustTileIndex: function (newLocationIndex, oTile, newGroup) {
            var visibleCounter = 0,
                bIsTileIncluded = false,
                i = 0;
            // In order to get the new index, count all tiles (visible+hidden) up to the new index received from the UI.
            for (i = 0; i < newGroup.tiles.length && visibleCounter < newLocationIndex; i++) {
                if (newGroup.tiles[i].isTileIntentSupported) {
                    if (newGroup.tiles[i] === oTile) {
                        bIsTileIncluded = true;
                    } else {
                        visibleCounter++;
                    }
                }
            }
            if (bIsTileIncluded) {
                return i - 1;
            }
            return i;
        },

        // temporary - should not be exposed
        getModel: function () {
            return this.oModel;
        },

        getDashboardView: function () {
            return this.oDashboardView;
        },

        getGroupListView: function (config) {
            var bAlreadyCreated = true;
            if (!sap.ui.getCore().byId('groupList')) {
                bAlreadyCreated = false;
                this.oGroupListView = sap.ui.view("groupList", {
                    viewName: "sap.ushell.components.flp.launchpad.group_list.GroupList",
                    type: 'JS',
                    viewData: config || {}
                });
            }
            return {groupList: this.oGroupListView, alreadyCreated: bAlreadyCreated};
        },

        isGroupListViewCreated: function () {
            return this.oGroupListView !== undefined;
        },

        // CATALOG LOADING
        loadAllCatalogs: function (sChannelId, sEventId, oData) {
            var oGroupsPromise = new jQuery.Deferred(),
                that = this,
                setDoneCBForGroups;

            // automatically resolving the group's promise for the scenario where the groups are
            // already loaded (so the group's promise Done callback will execute automatically is such a case)
            oGroupsPromise.resolve();

            // this is a local function (which could be invoked at 2 pointsin thie method).
            // this sets a Done callback on the promise object of the groups.
            setDoneCBForGroups = function () {
                oGroupsPromise.done(function () {
                    var aGroups = that.getModel().getProperty("/groups");
                    if (aGroups && aGroups.length !== 0) {
                        that.mapCatalogTilesToGroups();
                        // update the catalogTile model after mapCatalogTilesToGroups() was called
                        that.updateCatalogTilesToGroupsMap();
                    }
                });
            };

            if (!this.oModel.getProperty("/catalogs") || !sap.ushell.Container.getService("LaunchPage").isCatalogsValid()) {

                // catalog also needs groups
                if (!this.oModel.getProperty("/groups") || this.oModel.getProperty("/groups").length === 0) {
                    oGroupsPromise = this.loadPersonalizedGroups();
                }
                this._destroyAllGroupModels("/catalogs");
                this._destroyAllTileModels("/catalogTiles");
                // Clear existing Catalog items
                this.oModel.setProperty("/catalogs", []);
                this.oModel.setProperty("/catalogTiles", []);

                // Array of promise objects that are generated inside addCatalogToModel (the "progress" function of getCatalogs)
                this.aPromises = [];

                // Trigger loading of catalogs
                sap.ushell.Container.getService("LaunchPage").getCatalogs()
                    // There's a need to make sure that onDoneLoadingCatalogs is called only after all catalogs are loaded
                    // (i.e. all calls to addCatalogToModel are finished).
                    // For this, all the promise objects that are generated inside addCatalogToModel are generated into this.aPromises,
                    // and jQuery.when calls onDoneLoadingCatalogs only after all the promises are resolved
                    .done(function (catalogs) {
                        jQuery.when.apply(jQuery, this.aPromises).then(this.onDoneLoadingCatalogs(catalogs));
                        setDoneCBForGroups();
                    }.bind(this))
                    //in case of a severe error, show an error message
                    .fail(that._showLocalizedErrorHelper("fail_to_load_catalog_msg"))
                    //for each loaded catalog, add it to the model
                    .progress(this.addCatalogToModel.bind(this));
            } else {

                // when groups are loaded we can map the catalog tiles <-> groups map
                setDoneCBForGroups();
            }
        },

        updateCatalogTilesToGroupsMap: function () {
            var catalogTiles = this.getModel().getProperty("/catalogTiles"),
                tile,
                index,
                tileId,
                associatedGrps,
                aGroups,
                srvc = sap.ushell.Container.getService("LaunchPage");
            // if the catalogTile model doesn't exist, it will be updated in some time later
            if (catalogTiles) {
                for (index = 0; index < catalogTiles.length; index++) {
                    tile = catalogTiles[index];
                    tileId = encodeURIComponent(srvc.getCatalogTileId(tile.src));
                    associatedGrps = this.getModel().getProperty("/catalogTiles/" + index + "/associatedGroups");
                    aGroups = this.oTileCatalogToGroupsMap[tileId];
                    associatedGrps = aGroups ? aGroups : [];
                    catalogTiles[index].associatedGroups = associatedGrps;
                }
            }
            this.getModel().setProperty("/catalogTiles", catalogTiles);
        },

        /**
         * Adds a catalog object to the model including the catalog tiles.
         * The catalog is added to the "/catalogs" array in the model, and the tiles are added to "/catalogTiles".
         * If a catalog with the same title already exists - no new entry is added to the model for the new catalog,
         *  and the tiles are added to "/catalogTiles" with indexes that place them under the catalog (with the same title) that already exists
         *
         *  @param {object} catalog
         */
        addCatalogToModel: function (oCatalog) {
            var aCurrentCatalogs = this.oModel.getProperty('/catalogs'),
                srvc = sap.ushell.Container.getService("LaunchPage"),
                sCatalogId = srvc.getCatalogId(oCatalog),
                bCatalogExist = false,
                oCatalogModel,
                oPromise;

            // Check if the catalog already exist in the model, or catalog with similar title
            aCurrentCatalogs.forEach(function (oCat) {
                if (oCat.id === sCatalogId) {
                    bCatalogExist = true;
                }
            });

            if (!bCatalogExist) {
                oCatalogModel = {
                    title: srvc.getCatalogTitle(oCatalog),
                    id: srvc.getCatalogId(oCatalog),
                    "static": false,
                    tiles: [],
                    numberOfTiles: 0
                };
                oPromise = srvc.getCatalogTiles(oCatalog);
                this.aPromises.push(oPromise);

                oPromise.done(function (aTiles) {
                    //if this catalog has no tiles we do not need to add it to the model
                    if (!aTiles.length) {
                        return;
                    }
                    var oCatalogData = {
                        catalog: oCatalogModel.title,
                        id: oCatalogModel.id,
                        index: aCurrentCatalogs.length,
                        numberOfExistingTiles: 0
                    };

                        // In order to make sure that only one catalog is updated in the model at a given time -
                        //  the part of adding a catalog (+ catalog tiles) to the model is synchronized
                        var updateModelSynchronized = function () {

                            // Check if another catalog is currently being put in the model
                            if (!this.oModel.getProperty('/isCatalogInUpdate')) {

                                this.oModel.setProperty('/isCatalogInUpdate', true);

                                // Check if a catalog with the given title already exists in the model.
                                var oExistingCatalogInModel = this.searchModelCatalogByTitle(oCatalogModel.title),
                                    aCatalogs;

                                // If a catalog with similar title already exists in the model:
                                //  - Update the object catalogData before it is passed to setCatalogTiles
                                //  - Update the relevant catalog in the model with the updated amount of tiles it now has
                                if (oExistingCatalogInModel.result) {

                                    // Update /catalogTiles
                                    oCatalogData.index = oExistingCatalogInModel.indexOfPreviousInstanceInModel;
                                    oCatalogData.numberOfExistingTiles = oExistingCatalogInModel.numOfTilesInCatalog;
                                    this.setCatalogTiles("/catalogTiles", true, oCatalogData, aTiles);

                                    // Update /catalogs
                                    aCatalogs = this.oModel.getProperty('/catalogs');
                                    oCatalog = aCatalogs[oExistingCatalogInModel.indexOfPreviousInstanceInModel];
                                    oCatalog.numIntentSupportedTiles = getNumIntentSupportedTiles.call(this, oCatalogModel);
                                    oCatalog.numberOfTiles = oExistingCatalogInModel.numOfTilesInCatalog + aTiles.length;
                                    aCurrentCatalogs[oExistingCatalogInModel.indexOfPreviousInstanceInModel] = oCatalog;

                                } else {
                                    this.setCatalogTiles("/catalogTiles", true, oCatalogData, aTiles);
                                    oCatalogModel.numIntentSupportedTiles = getNumIntentSupportedTiles.call(this, oCatalogModel);

                                    oCatalogModel.numberOfTiles = aTiles.length;
                                    aCurrentCatalogs.push(oCatalogModel);
                                }

                                this.oModel.setProperty('/catalogs', aCurrentCatalogs);

                                // Update the model with the catalog - finished
                                this.oModel.setProperty('/isCatalogInUpdate', false);
                                return;
                            }
                            setTimeout(updateModelSynchronized, 50);
                        }.bind(this);

                    // Call the synchronized catalog update function
                    updateModelSynchronized();

                }.bind(this)
                    ).fail(this._showLocalizedErrorHelper("fail_to_load_catalog_tiles_msg")
                    );
            }
        },

        /**
         * check if a catalog with the given title already exists in the model.
         *
         *  @param {string} catalogTitle
         *
         *  @returns {object} - an object that includes:
         *  - result - a boolean value indicating whether the model already includes a catalog with the same title
         *  - indexOfPreviousInstanceInModel - the index in the model (in /catalogs) of the existing catalog with the given title
         *  - indexOfPreviousInstanceInPage - the index in the page of the existing  catalog with the given title,
         *     this value usually equals (indexOfPreviousInstanceInModel-1) since the model includes the dummy-catalog "All Cataslogs"
         *     that doesn't appear in the page
         *  - numOfTilesInCatalog - the number of tiles in the catalog with the given title
         */
        searchModelCatalogByTitle: function (catalogTitle) {
            var catalogs = this.oModel.getProperty('/catalogs'),
                catalogTitleExists = false,
                indexOfPreviousInstance,
                numOfTilesInCatalog = 0,
                bGeneralCatalogAppeared = false;

            $.each(catalogs, function (index, tempCatalog) {
                // If this is the catalogsLoading catalog - remember that it was read since the found index should be reduced by 1
                if (tempCatalog.title === sap.ushell.resources.i18n.getText('catalogsLoading')) {
                    bGeneralCatalogAppeared = true;
                } else if (catalogTitle == tempCatalog.title) {
                    indexOfPreviousInstance = index;
                    numOfTilesInCatalog = tempCatalog.numberOfTiles;
                    catalogTitleExists = true;
                    return false;
                }
            });
            return {
                result: catalogTitleExists,
                indexOfPreviousInstanceInModel: indexOfPreviousInstance,
                indexOfPreviousInstanceInPage: bGeneralCatalogAppeared ? indexOfPreviousInstance - 1 : indexOfPreviousInstance,
                numOfTilesInCatalog: numOfTilesInCatalog
            };
        },

        getTagList: function (maxTags) {
            var indexedTags = {},
                ind = 0,
                tempTagsLst = [],
                tag,
                oTag,
                sorted;

            for (ind = 0; ind < this.tagsPool.length; ind++) {
                oTag = this.tagsPool[ind];
                if (indexedTags[oTag]) {
                    indexedTags[oTag]++;
                } else {
                    indexedTags[oTag] = 1;
                }
            }

            //find the place in the sortedTopTiles.
            for (tag in indexedTags) {
                tempTagsLst.push({tag: tag, occ: indexedTags[tag]});
            }

            sorted = tempTagsLst.sort(function (a, b) {
                return b.occ - a.occ;
            });

            if (sorted.length === 0) {
                this.oModel.setProperty("/tagFiltering", false);
            }

            if (maxTags) {
                this.oModel.setProperty("/tagList", sorted.slice(0, maxTags));
            } else {
                this.oModel.setProperty("/tagList", sorted);
            }
        },

        onDoneLoadingCatalogs: function (aCatalogs) {
            if (!aCatalogs.length) {
                this.oModel.setProperty("/catalogsNoDataText", sap.ushell.resources.i18n.getText('noCatalogs'));
            }
            var srvc = sap.ushell.Container.getService("LaunchPage"),
                aLoadedCatalogs = aCatalogs.filter(function (oCatalog) {
                    return !srvc.getCatalogError(oCatalog);
                }),
                aCurrentCatalogs;
            //check if some of the catalogs failed to load
            if (aLoadedCatalogs.length !== aCatalogs.length) {
                this._showLocalizedError("partialCatalogFail");
            }

            // Check if filtering catalog tiles by tags is enabled
            if (this.oModel.getProperty("/tagFiltering") === true) {
                //create the tags menu
                this.getTagList();
            }

            aCurrentCatalogs = this.oModel.getProperty('/catalogs');
            //filter out the "Loading Catalogs..." menu item if exists
            if (aCurrentCatalogs[0] && aCurrentCatalogs[0].title === sap.ushell.resources.i18n.getText('catalogsLoading')) {
                aCurrentCatalogs.splice(0, 1);
            }
            //create the "All" static entry for the catalogSelect menu
            aCurrentCatalogs.splice(0, 0, {
                title: getLocalizedText("catalogSelect_initial_selection"),
                "static": true,
                tiles: [],
                numIntentSupportedTiles: -1//only in order to present this option in the Catalog.view (dropdown menu)since there is a filter there on this property
            });
            this.oModel.setProperty('/catalogs', aCurrentCatalogs);
            sap.ushell.utils.handleTilesVisibility();
        },

        setCatalogTiles: function (sPath, bAppend, oData, aCatalogTiles) {
            var srvc = sap.ushell.Container.getService("LaunchPage"),
                aUpdatedCatalogTiles = $.map(
                    aCatalogTiles,
                    function (oCatalogTile, iTile) {
                        var catalogTileId = encodeURIComponent(srvc.getCatalogTileId(oCatalogTile)),
                            associatedGrps = this.oTileCatalogToGroupsMap[catalogTileId] || [],
                            tileTags = srvc.getCatalogTileTags(oCatalogTile) || [];

                        if (tileTags.length > 0) {
                            this.tagsPool = this.tagsPool.concat(tileTags);
                        }

                        return {
                            associatedGroups: associatedGrps,
                            src: oCatalogTile,
                            catalog: oData.catalog,
                            catalogIndex: this.calculateCatalogTileIndex(oData.index, oData.numberOfExistingTiles, iTile),
                            catalogId: oData.id,
                            title: srvc.getCatalogTileTitle(oCatalogTile),
                            tags: tileTags,
                            keywords: (srvc.getCatalogTileKeywords(oCatalogTile) || []).join(','),
                            id: catalogTileId,
                            size: srvc.getCatalogTileSize(oCatalogTile),
                            content: [srvc.getCatalogTileView(oCatalogTile)],
                            isTileIntentSupported: srvc.isTileIntentSupported(oCatalogTile)
                        };
                    }.bind(this)
                );

            // Fill tile info for current catalog
            this.oModel.setProperty(sPath, $.merge((bAppend && this.oModel.getProperty(sPath)) || [], aUpdatedCatalogTiles));
        },

        /**
         * Calculate the index of a catalog tile in the catalog page.
         *  @param the index of the catalog
         *  @param the number of catalog tiles that were already loaded for previous catalog/s with the same title
         *  @param the index of the current catalog tile in the containing catalog
         */
        calculateCatalogTileIndex : function (catalogIndex, numberOfExistingTiles, iTile) {
            var result = parseInt(catalogIndex * 100000, 10);
            result += (numberOfExistingTiles !== undefined ? numberOfExistingTiles : 0) +  iTile;
            return result;
        },

        mapCatalogTilesToGroups: function () {

            this.oTileCatalogToGroupsMap = {};

            //Calculate the relation between the CatalogTile and the instances.
            var oGroups = this.oModel.getProperty("/groups"),
                srvc = sap.ushell.Container.getService("LaunchPage"),
                indexGrps = 0,
                oGroup,
                tileInd,
                oTiles,
                tileId,
                tileGroups,
                groupId;

            for (indexGrps = 0; indexGrps < oGroups.length; indexGrps++) {
                oGroup = oGroups[indexGrps];
                oTiles = oGroup.tiles;
                if (oTiles) {
                    for (tileInd = 0; tileInd < oTiles.length; ++tileInd) {
                        tileId = encodeURIComponent(srvc.getCatalogTileId(oTiles[tileInd].object));
                        tileGroups = this.oTileCatalogToGroupsMap[tileId] || [];
                        groupId = srvc.getGroupId(oGroup.object);
                        // We make sure the group is visible and not locked, otherwise we should not put it in the map it fills.
                        if (tileGroups.indexOf(groupId) === -1 && (typeof (oGroup.isGroupVisible) === 'undefined' || oGroup.isGroupVisible) && !oGroup.isGroupLocked) {
                            tileGroups.push(groupId);
                        }
                        this.oTileCatalogToGroupsMap[tileId] = tileGroups;
                    }
                }
            }
        },

        /**
         * Shows a localized message in the Message-Toast.
         * @param {string} sMsgId
         *      The localization id of the message
         * @param {object} oParams
         *      Additional parameters for the Message Toast showing the message. Can be undefined.
         * @param {sap.ushell.services.Message.Type} [iType=sap.ushell.services.Message.Type.INFO]
         *      The message type (optional)
         */
        _showLocalizedMessage: function (sMsgId, oParams, iType) {
            sap.ushell.Container.getService("Message").show(iType || sap.ushell.services.Message.Type.INFO, getLocalizedText(sMsgId, oParams), oParams);
        },
        /**
         * Shows a localized error message in the Message-Toast.
         * @param {string} sMsgId
         *      The localization id of the message
         * @param {object} oParams
         *      Additional parameters for the Message Toast showing the message. Can be undefined.
         *
         */
        _showLocalizedError: function (sMsgId, oParams) {
            this._showLocalizedMessage(sMsgId, oParams, sap.ushell.services.Message.Type.ERROR);
        },

        /**
         * A wrapper for _showLocalizedError to reduce boilerplate code in error handling.
         * @param {string} sMsgId
         *      The localization id of the message
         * @param {object} oParams
         *      Additional parameters for the Message Toast showing the message. Can be undefined.
         * @returns {Function}
         *      A function that will call _showLocalizedError with the given parameters.
         */
        _showLocalizedErrorHelper: function (sMsgId, oParams) {
            var that = this;
            return function () {
                that._showLocalizedError(sMsgId, oParams);
            };
        },

        /**
         * Helper function to bind an error message to a reset-function, which reloads all groups
         * from a group array when called.
         * @param {string} sMsgId
         *      The id of the localized string.
         * @returns {Function}
         *      The reset function, which returns the dashboard into an consistent state.
         */
        _resetGroupsOnFailureHelper: function (sMsgId) {
            var that = this;
            return function (aGroups) {
                that._showLocalizedError(sMsgId);
//                that._requestFailed();

                // Give the Toast a chance to be shown before the reload freezes the screen.
                setTimeout(function () {
                    that.loadGroupsFromArray(aGroups);
                });
            };
        },

        /**
         * Helper function to reset groups after a backend failure.
         * @param {string} sMsgId
         *      The id of the localized string.
         */
        _resetGroupsOnFailure: function (sMsgId, aParameters) {
            this._requestFailed();
            this._showLocalizedError(sMsgId, aParameters);
            this.loadPersonalizedGroups();
            this.oModel.updateBindings(true);
        },

        resetGroupsOnFailure: function () {
            this._resetGroupsOnFailure.apply(this, arguments);
        },

        /**
         * Load all groups in the given array. The default group will be loaded first.
         * @param aGroups
         *      The array containing all groups (including the default group).
         */
        loadGroupsFromArray: function (aGroups) {
            var that = this;

            this.oPageBuilderService.getDefaultGroup().done(function (oDefaultGroup) {
                // In case the user has no groups
                if (aGroups.length == 0 && oDefaultGroup == undefined) {
                    return;
                }
                var i = 0,
                    lockedGroups = [],
                    buildSortedGroups,
                    indexOfDefaultGroup = aGroups.indexOf(oDefaultGroup),
                    numOfLockedGroup,
                    oNewGroupModel,
                    aNewGroups = [],
                    oGroup,
                    isLocked,
                    groupLength,
                    modelGroupsLength;

                // remove default group from array
                aGroups.splice(indexOfDefaultGroup, 1);

                while (i < aGroups.length) {
                    oGroup = aGroups[i];
                    isLocked = that.oPageBuilderService.isGroupLocked(oGroup);

                    if (isLocked) {
                        lockedGroups.push(oGroup);
                        aGroups.splice(i, 1);
                    } else {
                        i++;
                    }
                }

                numOfLockedGroup = lockedGroups.length;
                // sort only locked groups
                if (!that.oModel.getProperty('/disableSortedLockedGroups')) {
                    lockedGroups.sort(function (x, y) {
                        var xTitle = that.oPageBuilderService.getGroupTitle(x).toLowerCase(),
                            yTitle = that.oPageBuilderService.getGroupTitle(y).toLowerCase();
                        return xTitle < yTitle ? -1 : 1;
                    });
                }
                // bring back default group to array
                buildSortedGroups = lockedGroups;
                buildSortedGroups.push(oDefaultGroup);
                buildSortedGroups.push.apply(buildSortedGroups, aGroups);
                aGroups = buildSortedGroups;
                groupLength = aGroups.length;
                modelGroupsLength = that.oModel.getProperty("/groups/length");
                // save default group index
                that.oModel.setProperty("/groups/indexOfDefaultGroup", numOfLockedGroup);

                for (i = groupLength; i < modelGroupsLength; ++i) {
                    that._destroyGroupModel("/groups/" + i);
                }

                for (i = 0; i < groupLength; ++i) {
                    oNewGroupModel = that._getGroupModel(aGroups[i], i === numOfLockedGroup, i === groupLength - 1);
                    oNewGroupModel.index = i;
                    aNewGroups.push(oNewGroupModel);
                }

                that.oModel.setProperty('/groups', aNewGroups);
                //set new length in case there are less new groups
                that.oModel.setProperty("/groups/length", groupLength);

                if (that.oModel.getProperty('/currentState/stateName') === "catalog") {
                    // update the catalogTile's groups mapping, and update the catalogTile
                    // model if nedded only when in the catalog flow
                    that.mapCatalogTilesToGroups();
                    that.updateCatalogTilesToGroupsMap();
                }
            }).fail(that._resetGroupsOnFailureHelper("fail_to_get_default_group_msg"));
        },

        /**
         * Load all tiles in a group and add the group to the internal model.
         * @param nIndex
         *      The index at which the group should be added. 0 is reserved for the default group.
         * @param oGroup
         *      The group as it is returned by the UI2 services.
         */
        _loadGroup: function (nIndex, oGroup) {
            var that = this,
                sGroupPath = "/groups/" + nIndex,
                defaultGroupIndex = that.oModel.getProperty("/groups/indexOfDefaultGroup"),
                bIsLast = that.oModel.getProperty(sGroupPath).isLastGroup,
                sOldGroupId,
                oNewGroupModel;

            this._destroyGroupModel(sGroupPath);
            // Set group on model
            sOldGroupId = this.oModel.getProperty(sGroupPath + "/groupId");
            oNewGroupModel = this._getGroupModel(oGroup, nIndex === defaultGroupIndex, bIsLast);

            // If the group already exists, keep the id. The backend-handlers relay on the id staying the same.
            if (sOldGroupId) {
                oNewGroupModel.groupId = sOldGroupId;
            }

            oNewGroupModel.index = nIndex;
            this.oModel.setProperty(sGroupPath, oNewGroupModel);
        },

        _getGroupModel: function (oGroup, bDefault, bLast) {
            var srvc = this.oPageBuilderService,
                aGroupTiles = (oGroup && srvc.getGroupTiles(oGroup)) || [],
                aModelTiles = [],
                aModelLinks = [],
                i,
                isSortable,
                oModel = this.getModel();

            isSortable = oModel.getProperty("/personalization");

            // in a new group scenario we create the group as null at first.
            var isGroupLocked = oGroup && srvc.isGroupLocked(oGroup) ? true : false;

            for (i = 0; i < aGroupTiles.length; ++i) {
                var oTile = aGroupTiles[i],
                    sTileType = srvc.getTileType(oTile).toLowerCase(); //lowercase to make comparison easier
                if (sTileType === "tile") {
                    aModelTiles.push(this._getTileModel(aGroupTiles[i], isGroupLocked, sTileType));
                } else if (sTileType === "link") {
                    aModelLinks.push(this._getTileModel(aGroupTiles[i], isGroupLocked, sTileType));
                } else {
                    jQuery.sap.log.error("Unknown tile type: '" + sTileType + "'",
                        undefined,
                        "sap.ushell.components.flp.launchpad.DashboardManager"
                    );
                }
            }

            return {
                title: (bDefault && getLocalizedText("my_group")) ||
                    (oGroup && srvc.getGroupTitle(oGroup)) ||
                    "",
                object: oGroup,
                groupId: jQuery.sap.uid(),
                links: aModelLinks,
                tiles: aModelTiles,
                isDefaultGroup: bDefault || false,
                editMode: !oGroup /*&& isStateHome*/,
                isGroupLocked: isGroupLocked,
                removable: !oGroup || srvc.isGroupRemovable(oGroup),
                sortable: isSortable,
                isGroupVisible: !oGroup || srvc.isGroupVisible(oGroup),
                isEnabled: !bDefault, //Currently only default groups is considered as locked
                isLastGroup: bLast || false
            };
        },

        _addTileToGroup: function (sGroupPath, oTile) {
            var sTilePath = sGroupPath + "/tiles",
                iNumTiles = this.oModel.getProperty(sTilePath).length,
                srvc = this.oPageBuilderService,
                sTileType = srvc.getTileType(oTile);

            //Locked groups cannot be added with tiles, so the target group will not be locked, however just for safety we will check the target group locking state
            var isGroupLocked = this.oModel.getProperty(sGroupPath + "/isGroupLocked");
            this.oModel.setProperty(sTilePath + "/" + iNumTiles, this._getTileModel(oTile, isGroupLocked, sTileType));
        },

        _updateModelWithTileView: function (sTileUUID, oTileView) {
            var that = this;

            //add the tile view to the update queue
            this.tileViewUpdateQueue.push({uuid: sTileUUID, view: oTileView});

            /*
             in order to avoid many updates to the model we wait to allow
             other tile update to accumulate in the queue.
             therefore we clear the previous call to update the model
             and create a new one
             */
            if (this.tileViewUpdateTimeoutID) {
                clearTimeout(this.tileViewUpdateTimeoutID);
            }
            this.tileViewUpdateTimeoutID = setTimeout(function () {
                that.tileViewUpdateTimeoutID = undefined;
                /*
                 we wait with the update till the personalization operation is done
                 to avoid the rendering of the tiles during D&D operation
                 */
                that.oSortableDeferred.done(function () {
                    that._updateModelWithTilesViews();
                });
            }, 50);
        },

        _updateModelWithTilesViews: function () {
            var aGroups = this.oModel.getProperty("/groups"),
                aTiles,
                aLinks,
                oTileModel,
                oUpdatedTile,
                sSize,
                bTall,
                bLong,
                oReLayoutGroups = {};

            if (!aGroups) {
                return;
            }

            /*
             go over the tiles in the model and search for tiles to update.
             tiles are identified using uuid
             */
            for (var i = 0; i < aGroups.length; i = i + 1) {
                //group loop - get the groups tiles
                aTiles = aGroups[i].tiles;
                aLinks = aGroups[i].links;
                aTiles = aTiles.concat(aLinks);

                for (var j = 0; j < aTiles.length; j = j + 1) {
                    //group tiles loop - get the tile model
                    oTileModel = aTiles[j];
                    for (var q = 0; q < this.tileViewUpdateQueue.length; q++) {
                        //updated tiles view queue loop - check if the current tile was updated
                        oUpdatedTile = this.tileViewUpdateQueue[q];
                        if (oTileModel.uuid == oUpdatedTile.uuid) {
                            if (oUpdatedTile.view) {
                                /*
                                 if view is provided then we destroy the current content
                                 (TileState control) and set the tile view
                                 */
                                oTileModel.content[0].destroy();
                                oTileModel.content = [oUpdatedTile.view];
                                /*
                                 in some cases tile size can be different then the initial value
                                 therefore we read and set the size again
                                 */
                                sSize = this.oPageBuilderService.getTileSize(oTileModel.object);
                                bLong = ((sSize !== null) && (sSize === "1x2" || sSize === "2x2")) || false;
                                bTall = ((sSize !== null) && (sSize === "2x1" || sSize === "2x2")) || false;
                                //bLong = true;
                                //bTall = true;
                                if (oTileModel['long'] !== bLong || oTileModel.tall !== bTall) {
                                    oTileModel['long'] = bLong;
                                    oTileModel.tall = bTall;
                                    oReLayoutGroups[aGroups[i].groupId] = true;
                                }
                            } else {
                                //some error on getTileView, therefore we set the state to 'Failed'
                                oTileModel.content[0].setState("Failed");
                            }
                            break;
                        }
                    }
                }
            }

            //clear the update queue and set the model
            this.tileViewUpdateQueue = [];
            this.oModel.setProperty("/groups", aGroups);
            var oDashboardView = this.getDashboardView();
            if (!jQuery.isEmptyObject(oReLayoutGroups) && oDashboardView) {
                if (oDashboardView && oDashboardView.oDashboardGroupsBox) {
                    var aGroupsControl = oDashboardView.oDashboardGroupsBox.getGroups();
                    for (var sGroupId in oReLayoutGroups) {
                        for (var i = 0; i < aGroupsControl.length; i++) {
                            if (aGroupsControl[i].getGroupId() === sGroupId) {
                                sap.ushell.Layout.reRenderGroupLayout(aGroupsControl[i]);
                                break;
                            }
                        }
                    }
                }
            }
        },

        getModelTileById: function (sId) {
            var aGroups = this.oModel.getProperty('/groups'),
                oModelTile;
            aGroups.forEach(function (oGroup) {
                oGroup.tiles.forEach(function (oTile) {
                    if (oTile.uuid === sId || oTile.originalTileId === sId) {
                        oModelTile = oTile;
                        return;
                    }
                });
            });
            return oModelTile;
        },

        _getTileModel: function (oTile, isGroupLocked, sTileType) {
            var srvc = this.oPageBuilderService,
                sTileUUID = jQuery.sap.uid(),
                oTileView,
                fUpdateModelWithView,
                that = this,
                oDfd,
                oTileModelData;

            this.sTileType = sTileType;

            // first we set visibility of tile to false
            // before we get the tile's model etc.
            srvc.setTileVisible(oTile, false);

            oDfd = srvc.getTileView(oTile);

            /*
             register done and fail handlers for the getTileView API.
             */
            oDfd.done(function (oView) {
                oTileView = oView;
                if (fUpdateModelWithView) {
                    //call to the '_updateModelWithTileView' with uuid and view
                    fUpdateModelWithView.apply(that, [sTileUUID, oTileView]);
                }
            });
            oDfd.fail(function () {
                if (fUpdateModelWithView) {
                    //call to the '_updateModelWithTileView' with uuid and no view to indicate failure
                    fUpdateModelWithView.apply(that, [sTileUUID]);
                } else {
                    jQuery.sap.require('sap.ushell.ui.launchpad.TileState');
                    // in case call is synchronise we set the view with 'TileState' control with 'Failed' status
                    if (that.sTileType === "link") {
                        oTileView = new sap.m.Link({text: sap.ushell.resources.i18n.getText('cannotLoadTile')});
                    } else {
                        oTileView = new sap.ushell.ui.launchpad.TileState({state: "Failed"});
                    }
                }
            });

            /*
             in case getTileView is asynchronous we set the 'fUpdateModelWithView' to handle the view
             update, and create a 'Loading' TileState control as the tile view
             */
            if (!oTileView) {
                fUpdateModelWithView = this._updateModelWithTileView;
                jQuery.sap.require('sap.ushell.ui.launchpad.TileState');
                oTileView = new sap.ushell.ui.launchpad.TileState({state: "Loading"});
            }

            if (sTileType === "link") {
                oTileModelData = {
                    "object": oTile,
                    "originalTileId": srvc.getTileId(oTile),
                    "uuid": sTileUUID,
                    "tileCatalogId": encodeURIComponent(srvc.getCatalogTileId(oTile)),
                    "content": [oTileView],
                    "target": srvc.getTileTarget(oTile) || "",
                    "debugInfo": srvc.getTileDebugInfo(oTile),
                    "isTileIntentSupported": srvc.isTileIntentSupported(oTile),
                    "isLocked": isGroupLocked
                };
            } else if (sTileType === "tile"){
                var sSize = srvc.getTileSize(oTile);

                oTileModelData = {
                    "object": oTile,
                    "originalTileId": srvc.getTileId(oTile),
                    "uuid": sTileUUID,
                    "tileCatalogId": encodeURIComponent(srvc.getCatalogTileId(oTile)),
                    "content": [oTileView],
                    "long": ((sSize !== null) && (sSize === "1x2" || sSize === "2x2")) || false,
                    "tall": ((sSize !== null) && (sSize === "2x1" || sSize === "2x2")) || false,
                    "target": srvc.getTileTarget(oTile) || "",
                    "debugInfo": srvc.getTileDebugInfo(oTile),
                    "isTileIntentSupported": srvc.isTileIntentSupported(oTile),
                    "rgba": "",
                    "isLocked": isGroupLocked,
                    "showActionsIcon": this.oModel.getProperty("/tileActionsIconEnabled") || false
                };
            }
            return oTileModelData;
        },

        _destroyAllGroupModels: function (oTarget) {
            var aGroups = (typeof oTarget === "string") ? this.oModel.getProperty(oTarget) : oTarget,
                i;
            if (aGroups) {
                for (i = 0; i < aGroups.length; i = i + 1) {
                    this._destroyGroupModel(aGroups[i]);
                }
            }
        },

        _destroyGroupModel: function (oTarget) {
            var oGroupModel = (typeof oTarget === "string") ? this.oModel.getProperty(oTarget) : oTarget;
            if (oGroupModel) {
                this._destroyAllTileModels(oGroupModel.tiles);
            }
        },

        _destroyAllTileModels: function (oTarget) {
            var aTiles = (typeof oTarget === "string") ? this.oModel.getProperty(oTarget) : oTarget,
                i;
            if (aTiles) {
                for (i = 0; i < aTiles.length; i = i + 1) {
                    this._destroyTileModel(aTiles[i]);
                }
            }
        },

        _destroyTileModel: function (oTarget) {
            var oTileModel = (typeof oTarget === "string") ? this.oModel.getProperty(oTarget) : oTarget,
                i;
            if (oTileModel && oTileModel.content) {
                for (i = 0; i < oTileModel.content.length; i = i + 1) {
                    oTileModel.content[i].destroy();
                }
            }
        },

        /**
         * Load all user groups from the backend. (Triggered on initial page load.)
         */
        loadPersonalizedGroups: function () {
            var that = this,
                oGroupsPromise = this.oPageBuilderService.getGroups(),
                oDeferred = new jQuery.Deferred();

            oGroupsPromise.done(function (aGroups) {
                that.loadGroupsFromArray(aGroups);
                oDeferred.resolve();
            });

            oGroupsPromise.fail(function() {
                that._showLocalizedErrorHelper("fail_to_load_groups_msg");
                oDeferred.reject();
            });

            return oDeferred;
        }
    });
}());

}; // end of sap/ushell/components/flp/launchpad/DashboardManager.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.flp.launchpad.catalog.Catalog.view') ) {
  jQuery.sap.declare('sap.ushell.components.flp.launchpad.catalog.Catalog.view');
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, $ */
    /*jslint nomen: true */

    jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

    
    
    

    sap.ui.jsview("sap.ushell.components.flp.launchpad.catalog.Catalog", {

        oController: null,

        createContent: function (oController) {
            this.parentComponent = sap.ui.core.Component.getOwnerComponentFor(this);
            var oModel = this.parentComponent.getModel();
            this.setModel(oModel);
            this.oController = oController;
            this.addEventDelegate({
                onAfterShow: function () {
                    var homeBtn = sap.ui.getCore().byId("homeBtn");
                    if (homeBtn) {
                        sap.ushell.renderers.fiori2.RendererExtensions.addHeaderItem(homeBtn, "home");
                    }
                },
                onBeforeShow: function () {
                    oModel.setProperty("/currentViewName", "catalog");
                    //hide header in mobile
                    var isMobile = sap.ui.Device.system.phone;
                    sap.ushell.renderers.fiori2.RendererExtensions.setHeaderHiding(isMobile);
                    //Close left panel if it is opened
                    sap.ushell.renderers.fiori2.RendererExtensions.setLeftPaneVisibility("home", false);

                },

                onAfterHide: function () {
                    var homeBtn = sap.ui.getCore().byId("homeBtn");
                    if (homeBtn) {
                        sap.ushell.renderers.fiori2.RendererExtensions.removeHeaderItem(homeBtn, "home");
                    }
                }
            });

            function iflong(sLong) {
                return ((sLong !== null) && (sLong === "1x2" || sLong === "2x2")) || false;
            }
            function iftall(size) {
                return ((size !== null) && (size === "2x2" || size === "2x1")) || false;
            }
            function to_int(v) {
                return parseInt(v, 10) || 0;
            }
            function get_icon(aGroupsIDs, sGroupContextModelPath, sGroupContextId) {
                var sIconName;

                if (sGroupContextModelPath) {

                   // If in group context - the icon is determined according to whether this catalog tile exists in the group or not   
                    var iCatalogTileInGroup = $.inArray(sGroupContextId, aGroupsIDs);
                    sIconName = iCatalogTileInGroup !== -1 ? "accept" : "add";
                } else {
                    sIconName = (aGroupsIDs && aGroupsIDs.length > 0) ? "accept" : "add";
                }
                return sap.ui.core.IconPool.getIconURI(sIconName);
            }

            function get_tooltip(sAddTileGroups, sAddTileToMoreGroups, aGroupsIDs, sGroupContextModelPath, sGroupContextId, sGroupContextTitle) {
                var sTooltip;

                if (sGroupContextModelPath) {
                    var oResourceBundle = sap.ushell.resources.i18n,
                        iCatalogTileInGroup = $.inArray(sGroupContextId, aGroupsIDs);

                    sTooltip = oResourceBundle.getText(iCatalogTileInGroup !== -1 ? "removeAssociatedTileFromContextGroup" : "addAssociatedTileToContextGroup", sGroupContextTitle);
                } else {
                    sTooltip = aGroupsIDs && aGroupsIDs.length ? sAddTileToMoreGroups : sAddTileGroups;
                }
                return sTooltip;
            }

            var oButton = new sap.m.Button({
                icon : {
                    // The "parts" array includes /groupContext/path and associatedGroups/length in order to support tile footer icon change in two cases:
                    //  1. When the catalog is in the context of a group, and the user navigates back to the dashboard  
                    //      and then opens the catalog again, but this time not in a context of a group.
                    //      In this case the footer icons should be changed  and the trigger is the change in /groupContext property in the model.    
                    //  2. When the catalog is in the context of a group, and the user clicks a tile's footer.
                    //     In this case the icon should be changed, and the trigger is the item that is added/removed to/from associatedGroups 
                    //     (i.e. the change in the length of associatedGroups of the relevant catalog tile model)
                    parts: ["associatedGroups", "associatedGroups/length", "/groupContext/path", "/groupContext/id"],
                    formatter : function (aAssociatedGroups, associatedGroupsLength, sGroupContextModelPath, sGroupContextId) {
                        return get_icon(aAssociatedGroups, sGroupContextModelPath, sGroupContextId);
                    }
                },
                tooltip: {
                    parts: ["i18n>addTileToGroup", "i18n>addAssociatedTileToGroup", "associatedGroups", "associatedGroups/length", "/groupContext/path", "/groupContext/id", "/groupContext/title"],
                    formatter : function (sAddTileGroups, sAddTileToMoreGroups, aGroupsIDs, associatedGroupsLength, sGroupContextModelPath, sGroupContextId, sGroupContextTitle) {
                        return get_tooltip(sAddTileGroups, sAddTileToMoreGroups, aGroupsIDs, sGroupContextModelPath, sGroupContextId, sGroupContextTitle);
                    }
                },
                press : [ oController.onTileFooterClick, oController ]
            }), oTileTemplate = new sap.ushell.ui.launchpad.Tile({
                afterRendering : [ oController.onTileAfterRendering, oController ],
                tileViews : {
                    path : "content",
                    factory : function (sId, oContext) { return oContext.getObject(); }
                },
                footItems : [oButton],
                "long" : {
                    path : "size",
                    formatter : iflong
                },
                "tall" : {
                    path : "size",
                    formatter : iftall
                },
                index: {
                    path : "id",
                    formatter : to_int
                },
                tileCatalogId : "{id}",
                press : [ oController.catalogTilePress, oController ]
            }), tilesContainer = new sap.ushell.ui.launchpad.TileContainer("catalogTiles", {
                showHeader : false,
                showPlaceholder : false,
                showGroupHeader : "{/showCatalogHeaders}",
                noDataText: "{/catalogsNoDataText}",
                groupHeaderLevel : sap.m.HeaderLevel.H3,
                showNoData : true,
                tiles : {
                    path : "/catalogTiles",
                    template : oTileTemplate,
                    sorter : new sap.ui.model.Sorter("catalogIndex", false, function (oContext) {
                        return (oContext && oContext.getProperty("catalog")) || "";
                    })
                },
                afterRendering : function (oEvent) {
                    var oModel = this.getModel(),
                        buttons,
                        i;
                    //because the catalog can be loaded with a filter in the URL we also have to
                    //check if tiles exist in the model, and not just in the UI control
                    if (this.getTiles().length || oModel.getProperty('/catalogTiles/length')) {
                        //Enable tiles search/filter only after tiles are rendered.
                        //Timeout needed because of some bug in UI5 that doesn't enable control on this point.
                        setTimeout(function () {
                            sap.ui.getCore().byId("catalogSearch").setEnabled(true);
                        });
                        oModel.setProperty("/catalogsNoDataText", sap.ushell.resources.i18n.getText('noFilteredItems'));
                        sap.ui.getCore().getEventBus().publish("launchpad", "contentRendered");
                        if (!sap.ui.Device.os.ios) {
                            sap.ui.getCore().getEventBus().publish("launchpad", "contentRefresh");
                        }
                    }
                    jQuery.sap.byId("catalogTiles").removeAttr("tabindex", 0);
                    jQuery.sap.byId("catalogTilesPage-intHeader-BarPH").removeAttr("tabindex", 0);

                    // disable '+/v' buttons tabindex so the won't be part of the TAB cycle
                    buttons = jQuery(".sapUshellTile button");
                    for (i = 0; i < buttons.length; i++) {
                        buttons[i].setAttribute("tabindex", -1);
                    }
                }
            });

            tilesContainer.addEventDelegate({
                onsapskipback: function (oEvent) {
                    try {
                        oEvent.preventDefault();
                        var nextElement = jQuery("#catalogSelect");
                        nextElement.focus();
                    } catch (e) {
                    }
                }
            });

            oButton.constructor.prototype.setIcon = function (v) {
                this.setProperty("icon", v, true);          // set property, but suppress rerendering
                if (v && this._image && this._image.setSrc) {
                    this._image.setSrc(v);                  // set property of internal control
                }
                return this;
            };

            var oFilterVisibleTiles = new sap.ui.model.Filter("numIntentSupportedTiles", sap.ui.model.FilterOperator.NE, 0),
                oCatalogSelect = new sap.m.Select("catalogSelect", {
                    visible: "{/catalogSelection}",
                    name : "Browse",
                    tooltip: "{i18n>catalogSelect_tooltip}",
                    width: "17rem",
                    items : {
                        path : "/catalogs",
                        template : new sap.ui.core.ListItem({
                            text : "{title}"
                        }),
                        filters: [oFilterVisibleTiles]
                    },
                    change : [ oController.onCategoryFilter, oController ]
                }),

            /*
             override original onAfterRendering as currently sap.m.Select
             does not support afterRendering handler in the constructor
             this is done to support tab order accessibility
             */
                origCatalogSelectOnAfterRendering = oCatalogSelect.onAfterRendering;
            oCatalogSelect.addEventDelegate({
                onsapskipforward: function (oEvent) {
                    try {
                        oEvent.preventDefault();
                        sap.ushell.renderers.fiori2.AccessKeysHandler.setIsFocusHandledByAnotherHandler(true);
                        sap.ushell.components.flp.ComponentKeysHandler.setFocusOnCatalogTile();
                        var firstTile = jQuery('#catalogTiles .sapUshellTile:visible:first');
                        firstTile.focus();
                    } catch (e) {
                    }
                },
                onsaptabprevious: function (oEvent) {
                    try {
                        oEvent.preventDefault();
                        sap.ushell.renderers.fiori2.AccessKeysHandler.setIsFocusHandledByAnotherHandler(true);
                        var nextElement = jQuery("#catalogTilesPage header button")[0];
                        nextElement.focus();
                    } catch (e) {
                    }
                },
                onsapskipback: function (oEvent) {
                    try {
                        oEvent.preventDefault();
                        sap.ushell.renderers.fiori2.AccessKeysHandler.setIsFocusHandledByAnotherHandler(true);
                        var nextElement = jQuery("#catalogTilesPage header button")[0];
                        nextElement.focus();
                    } catch (e) {
                    }
                }
            });
            // if xRay is enabled
            if (oModel.getProperty("/enableHelp")) {
                oCatalogSelect.addStyleClass('help-id-catalogCategorySelect');// xRay help ID
            }
            oCatalogSelect.onAfterRendering = function () {
                if (origCatalogSelectOnAfterRendering) {
                    origCatalogSelectOnAfterRendering.apply(this, arguments);
                }
                jQuery.sap.byId("catalogSelect").attr("tabindex", 0);
            };

            /*
             * setting followOf to false, so the popover won't close on IE.
             */
            var origOnAfterRenderingPopover = oCatalogSelect._onAfterRenderingPopover;
            oCatalogSelect._onAfterRenderingPopover = function () {
                if (this._oPopover) {
                    this._oPopover.setFollowOf(false);
                }
                if (origOnAfterRenderingPopover) {
                    origOnAfterRenderingPopover.apply(this, arguments);
                }
            };

            var oCatalogSearch = new sap.m.SearchField("catalogSearch", {
                    visible: "{/searchFiltering}",
                    tooltip: "{i18n>catalogSearch_tooltip}",
                    width: "17rem",
                    enabled: false, //we Disable search/filtering of tiles till they will be rendered, to avoid bugs.
                    value: {path: "/catalogSearchFilter"},
                    placeholder: "{i18n>search_catalog}",
                    liveChange : [ oController.onLiveFilter, oController ]
                }).addStyleClass("sapUshellCatalogSearch"),

                /*
                 override original onAfterRendering as currently sap.m.Select
                 does not support afterRendering handler in the constructor,
                 this is done to support tab order accessibility
                */
                origCatalogSearchOnAfterRendering = oCatalogSearch.onAfterRendering;

            // if xRay is enabled
            if (oModel.getProperty("/enableHelp")) {
                oCatalogSearch.addStyleClass('help-id-catalogSearch');// xRay help ID
            }
            oCatalogSearch.onAfterRendering = function () {
                origCatalogSearchOnAfterRendering.apply(this, arguments);
                jQuery.sap.byId("catalogSearch").find("input").attr("tabindex", 0);
                //set as large element for F6 keyboard navigation
                this.data("sap-ui-fastnavgroup", "true", true /*Write into DOM*/);
            };

            oCatalogSearch.addEventDelegate({
                onsapskipback: function (oEvent) {
                    try {
                        oEvent.preventDefault();
                        var nextElement = jQuery("#catalogTilesPage header button")[0];
                        nextElement.focus();
                    } catch (e) {
                    }
                },
                onsapskipforward: function (oEvent) {
                    try {
                        oEvent.preventDefault();
                        var firstTile = jQuery('#catalogTiles .sapUshellTile:visible:first');
                        sap.ushell.components.flp.ComponentKeysHandler.setTileFocus(firstTile);
                    } catch (e) {
                    }
                },
                onsaptabnext: function (oEvent) {
                    try {
                        if (!oCatalogTagFilter.getVisible()) {
                            oEvent.preventDefault();
                            var aVisibleTiles = jQuery(".sapUshellTile:visible"),
                                jqTile = jQuery(aVisibleTiles[0]);
                            sap.ushell.components.flp.ComponentKeysHandler.setFocusOnCatalogTile();
                            jqTile.focus();
                        }
                    } catch (e) {
                    }
                }
            });

            var oCatalogTagFilter = new sap.m.MultiComboBox("catalogTagFilter", {
                visible: "{/tagFiltering}",
                selectedKeys: {
                    path: "/selectedTags",
                    mode: sap.ui.model.BindingMode.TwoWay
                },
                tooltip: "{i18n>catalogTilesTagfilter_tooltip}",
                width: "17rem",
                placeholder: "{i18n>catalogTilesTagfilter_HintText}",
                //Use catalogs model as a demo content until the real model is implemented
                items : {
                    path : "/tagList",
                    sorter : new sap.ui.model.Sorter("tag", false, false),
                    template : new sap.ui.core.ListItem({
                        text : "{tag}",
                        key : "{tag}"
                    })
                },
                selectionChange : [ oController.onTagsFilter, oController ]
            });

            // if xRay is enabled
            if (oModel.getProperty("/enableHelp")) {
                oCatalogTagFilter.addStyleClass('help-id-catalogTagFilter');// xRay help ID
            }
            oCatalogTagFilter.addEventDelegate({
                onsaptabnext: function (oEvent) {
                    try {
                        oEvent.preventDefault();
                        var aVisibleTiles = jQuery(".sapUshellTile:visible"),
                            jqTile = jQuery(aVisibleTiles[0]);
                        sap.ushell.components.flp.ComponentKeysHandler.setFocusOnCatalogTile();
                        jqTile.focus();
                    } catch (e) {
                    }
                },
                onsapskipback: function (oEvent) {
                    try {
                        oEvent.preventDefault();
                        jQuery("#catalogSelect").focus();
                    } catch (e) {
                    }
                },
                onsapskipforward: function (oEvent) {
                    try {
                        oEvent.preventDefault();
                        var firstTile = jQuery('#catalogTiles .sapUshellTile:visible:first');
                        sap.ushell.components.flp.ComponentKeysHandler.setTileFocus(firstTile);
                    } catch (e) {
                    }
                }
            });

            var oDetailPage = new sap.m.Page("catalogTilesPage", {
                showHeader : true,
                showFooter : false,
                showNavButton : true,
                title : {
                    parts : ["/groupContext/title"],
                    formatter : function (title) {
                        var oResourceBundle = sap.ushell.resources.i18n;
                        return !title ? oResourceBundle.getText("tile_catalog") : oResourceBundle.getText("catalog_group_context_title", title);
                    }
                },
                content : [ new sap.ushell.ui.launchpad.Panel({
                    translucent : true,
                    headerText : "",
                    headerLevel : sap.m.HeaderLevel.H2,
                    headerBar : new sap.m.Bar("catalogHeader", {
                        translucent : true,
                        tooltip: "{i18n>tile_catalog_header_tooltip}",
                        contentLeft : [ oCatalogSelect, oCatalogSearch, oCatalogTagFilter]
                    }).addStyleClass("sapUshellCatalogHeaderBar"),
                    content : [ tilesContainer]
                }).addStyleClass("sapUshellCatalogPage")],
                navButtonPress : [oController.onNavButtonPress, oController]
            });

            oDetailPage.addDelegate({
                onAfterRendering: function () {
                    //set initial focus
                    jQuery("#catalogTilesPage header button").attr("tabindex", -1);
                }
            });

            return oDetailPage;
        },

        getControllerName: function () {
            return "sap.ushell.components.flp.launchpad.catalog.Catalog";
        }
    });
}());

}; // end of sap/ushell/components/flp/launchpad/catalog/Catalog.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.flp.launchpad.dashboard.DashboardContent.controller') ) {
  jQuery.sap.declare('sap.ushell.components.flp.launchpad.dashboard.DashboardContent.controller');
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, setTimeout, clearTimeout, $ */
    /*jslint plusplus: true, nomen: true */
    

    sap.ui.controller("sap.ushell.components.flp.launchpad.dashboard.DashboardContent", {

        onInit : function () {
            var oEventBus = sap.ui.getCore().getEventBus();
            this.handleDashboardScroll = this._handleDashboardScroll.bind(this);

            oEventBus.subscribe('launchpad', 'actionModeInactive', this._handleExitActionMode, this);
            oEventBus.subscribe('launchpad', 'actionModeActive', this._enableGroupsUIActions, this.oView);
            oEventBus.subscribe("launchpad", "appClosed", this._resizeHandler, this);
            oEventBus.subscribe("launchpad", "appOpened", this._appOpenedHandler, this);

            this.sViewId = "#" + this.oView.getId();
            //On Android 4.x, and Safari mobile in Chrome and Safari browsers sometimes we can see bug with screen rendering
            //so _webkitMobileRenderFix function meant to fix it after  `contentRefresh` event.
            if (sap.ui.Device.browser.mobile) {
                oEventBus.subscribe("launchpad", "contentRefresh", this._webkitMobileRenderFix, this);
            }
            this.isDesktop = (sap.ui.Device.system.desktop && (navigator.userAgent.toLowerCase().indexOf('tablet') < 0));
        },

        onExit: function () {
            var oEventBus = sap.ui.getCore().getEventBus();
            oEventBus.unsubscribe("launchpad", "contentRefresh", this._webkitMobileRenderFix, this);
            oEventBus.unsubscribe("launchpad", "appClosed", this._resizeHandler, this);
            oEventBus.unsubscribe("launchpad", "appOpened", this._appOpenedHandler, this);
        },

        onAfterRendering : function () {
            var oEventBus = sap.ui.getCore().getEventBus(),
                oView = this.getView(),
                oDomRef = oView.getDomRef(),
                oScrollableElement = oDomRef.getElementsByTagName('section'),
                timer;

            oScrollableElement[0].removeEventListener('scroll', this.handleDashboardScroll);
            oScrollableElement[0].addEventListener('scroll', this.handleDashboardScroll);

            //Bind launchpad event handlers
            oEventBus.unsubscribe("launchpad", "scrollToGroup", this._scrollToGroup, this);
            oEventBus.subscribe("launchpad", "scrollToGroup", this._scrollToGroup, this);
            oEventBus.unsubscribe("launchpad", "scrollToFirstVisibleGroup", this._scrollToFirstVisibleGroup, this);
            oEventBus.subscribe("launchpad", "scrollToFirstVisibleGroup", this._scrollToFirstVisibleGroup, this);

            sap.ui.Device.orientation.attachHandler(function () {
                var jqTileContainers = jQuery('#dashboardGroups').find('.sapUshellTileContainer:visible');
                if (jqTileContainers.length) {
                    var oModel = this.getView().getModel(),
                        topViewPortGroupIndex = oModel.getProperty('/topGroupInViewPortIndex'),
                        oGroup,
                        bIsInEditTitle;
                    if (jqTileContainers.get(topViewPortGroupIndex)) {
                        oGroup = sap.ui.getCore().byId(jqTileContainers.get(topViewPortGroupIndex).id);
                        bIsInEditTitle = oModel.getProperty('/editTitle');
                        this._publishAsync("launchpad", "scrollToGroup", {group: oGroup, isInEditTitle: bIsInEditTitle});
                    }
                }
            }, this);

            jQuery(window).bind("resize", function () {
                clearTimeout(timer);
                timer = setTimeout(this._resizeHandler.bind(this), 300);
            }.bind(this));

            if (this.getView().getModel().getProperty("/personalization") && !sap.ushell.components.flp.ActionMode) {
                jQuery.sap.require("sap.ushell.components.flp.ActionMode");
                sap.ushell.components.flp.ActionMode.init(this.getView().getModel());
            }
            this._updateTopGroupInModel();
        },

        dashboardTilePress : function () {
            sap.ui.getCore().getEventBus().publish("launchpad", "dashboardTileClick");
        },

        _updateTopGroupInModel : function () {
            var oModel = this.getView().getModel(),
                topViewPortGroupIndex = this._getIndexOfTopGroupInViewPort();

            oModel.setProperty('/topGroupInViewPortIndex', topViewPortGroupIndex);
        },

        _getIndexOfTopGroupInViewPort : function () {
            var oView = this.getView(),
                oDomRef = oView.getDomRef(),
                oScrollableElement = oDomRef.getElementsByTagName('section'),
                jqTileContainers = $(oScrollableElement).find('.sapUshellTileContainer'),
                oOffset = jqTileContainers.not('.sapUshellHidden').first().offset(),
                firstContainerOffset = (oOffset && oOffset.top) || 0,
                aTileContainersTopAndBottoms = [],
                nScrollTop = oScrollableElement[0].scrollTop,
                viewPortTop,
                topGroupIndex = 0;

            // In some weird corner cases, those may not be defined -> bail out.
            if (!jqTileContainers || !oOffset) {
                return topGroupIndex;
            }

            jqTileContainers.each(function () {
                if (!jQuery(this).hasClass("sapUshellHidden")) {
                    var nContainerTopPos = jQuery(this).parent().offset().top;
                    aTileContainersTopAndBottoms.push([nContainerTopPos, nContainerTopPos + jQuery(this).parent().height() + jQuery(this).parent()[0].offsetTop]);
                }
            });

            viewPortTop = nScrollTop + firstContainerOffset;
            jQuery.each(aTileContainersTopAndBottoms, function (index, currentTileContainerTopAndBottom) {
                var currentTileContainerTop = currentTileContainerTopAndBottom[0],
                    currentTileContainerBottom = currentTileContainerTopAndBottom[1];

                if (currentTileContainerTop <= viewPortTop && viewPortTop <= currentTileContainerBottom) {
                    topGroupIndex = index;
                    return;
                }
            });
            return topGroupIndex;
        },

        _handleDashboardScroll : function () {
            this._updateTopGroupInModel();
            sap.ushell.utils.handleTilesVisibility();
            sap.ui.getCore().getEventBus().publish("launchpad", "dashboardScroll");
        },

        _handleClick : function () {
            //Enable text selection in other scenarios than drag-and-drop
            if (sap.ui.Device.system.desktop) {
                jQuery('body').removeClass("sapUshellDisableUserSelect");
            }

        },

        _handleActionModeStartDrag : function (evt, ui) {
            this.uiActions.disable();
            var groupContainerClone = jQuery(".sapUshellDashboardGroupsContainerItem-clone"),
                groupContainerCloneTitle = groupContainerClone.find(".sapUshellContainerTitle"),
                titleHeight = groupContainerCloneTitle.height(),
                titleWidth = groupContainerCloneTitle.width();

            if (!sap.ui.Device.system.phone) {
                groupContainerClone.find(".sapUshellTileContainerEditMode").offset({
                    top: this.uiEditModeActions.getMove().y - titleHeight,
                    left: this.uiEditModeActions.getMove().x - (titleWidth / 2)
                });
                jQuery(".sapUshellTileContainerBeforeContent").addClass("sapUshellTileContainerHidden");
            } else {
                jQuery(".sapUshellTilesContainer-sortable").addClass("sapUshellTileContainerRemoveContent");
                jQuery(".sapUshellTileContainerBeforeContent").addClass("sapUshellTileContainerRemoveContent");
                jQuery(".sapUshellContainerHeaderActions").addClass("sapUshellTileContainerHidden");
            }
            jQuery(".sapUshellTileContainerAfterContent").addClass("sapUshellTileContainerHidden");

            jQuery(ui).find(".sapUshellContainerHeaderActions").addClass("sapUshellTileContainerHidden");

            this.getModel().setProperty('/isInDrag', true);
            jQuery(ui).attr('startPos', jQuery(ui).index());

            jQuery.sap.log.info('startPos - ' + jQuery(ui).index());
            setTimeout(function () {
                sap.ui.getCore().getEventBus().publish("launchpad", "sortableStart");
            }, 0);

            //scroll to group
            var groupsTop = jQuery("#dashboardGroups").offset().top,
                groupPlaceholder = jQuery(".sapUshellDashboardGroupsContainerItem-placeholder").offset().top,
                groupClone = jQuery(".sapUshellDashboardGroupsContainerItem-clone").offset().top,
                scrollY = groupPlaceholder - groupsTop - groupClone;
            jQuery('.sapUshellDashboardView section').animate({scrollTop : scrollY}, 0);

        },

        _handleActionModeUIStart : function (evt, ui) {
            jQuery(ui).find(".sapUshellTileContainerContent").css("outline-color", "transparent");
            jQuery('body').addClass("sapUshellDisableUserSelect");
        },

        _handleActionModeDrop : function (evt, ui) {
            if (sap.ui.Device.system.desktop) {
                jQuery('body').removeClass("sapUshellDisableUserSelect");
            }

            var oBus = sap.ui.getCore().getEventBus(),
                jQueryObj = jQuery(ui),
                firstChildId = jQuery(jQueryObj.children()[0]).attr("id"),
                oGroup = sap.ui.getCore().byId(firstChildId),
                oDashboardGroups = sap.ui.getCore().byId("dashboardGroups"),
                oData = {group : oGroup, groupChanged : false, focus : false},
                nNewIndex = jQueryObj.index();

            jQueryObj.startPos = window.parseInt(jQueryObj.attr('startPos'), 10);
            oDashboardGroups.removeAggregation('groups', oGroup, true);
            oDashboardGroups.insertAggregation('groups', oGroup, nNewIndex, true);

            this.oController._handleActionModeGroupMove(evt, {item : jQueryObj});
            jQueryObj.removeAttr('startPos');
            sap.ui.getCore().getEventBus().publish("launchpad", "sortableStop");

            // avoid tile to be clicked after group was dropped
            setTimeout(function () {
                jQuery(".sapUshellContainerHeaderActions").removeClass("sapUshellTileContainerHidden");
                jQuery(".sapUshellTileContainerBeforeContent").removeClass("sapUshellTileContainerHidden");
                jQuery(".sapUshellTileContainerBeforeContent").removeClass("sapUshellTileContainerRemoveContent");
                jQuery(".sapUshellTileContainerAfterContent").removeClass("sapUshellTileContainerHidden");
                jQuery(".sapUshellTilesContainer-sortable").removeClass("sapUshellTileContainerRemoveContent");
            }, 0);

            window.setTimeout(jQuery.proxy(oBus.publish, oBus, "launchpad", "scrollToGroup", oData), 1);
            this.uiActions.enable();
        },

        _handleActionModeGroupMove : function (evt, ui) {
            var fromIndex = ui.item.startPos,
                toIndex = ui.item.index(),
                oModel = this.getView().getModel();

            if (toIndex !== -1) {
                this._publishAsync("launchpad", "moveGroup", {
                    fromIndex  : fromIndex,
                    toIndex    : toIndex
                });
                setTimeout(function () {
                    oModel.setProperty('/isInDrag', false);
                }, 100);
            }
        },

        //Delete or Reset a given group according to the removable state.
        _handleGroupDeletion: function (oGroupBindingCtx) {
            jQuery.sap.require('sap.m.MessageBox');
            var oEventBus = sap.ui.getCore().getEventBus(),
                oGroup = oGroupBindingCtx.getObject(),
                bIsGroupRemovable = oGroup.removable,
                sGroupTitle = oGroup.title,
                sGroupId = oGroup.groupId,
                oResourceBundle = sap.ushell.resources.i18n,
                oMessageSrvc = sap.ushell.Container.getService("Message"),
                mActions = sap.m.MessageBox.Action,
                mCurrentAction = (bIsGroupRemovable ? mActions.DELETE : oResourceBundle.getText('ResetGroupBtn'));

            oMessageSrvc.confirm(oResourceBundle.getText(bIsGroupRemovable ? 'delete_group_msg' : 'reset_group_msg', sGroupTitle), function (oAction) {
                if (oAction === mCurrentAction) {
                    oEventBus.publish("launchpad", bIsGroupRemovable ? 'deleteGroup' : 'resetGroup', {
                        groupId: sGroupId
                    });
                }
            }, oResourceBundle.getText(bIsGroupRemovable ? 'delete_group' : 'reset_group'), [mCurrentAction, mActions.CANCEL]);
        },

        _enableGroupsUIActions: function () {
            if (this.uiEditModeActions) {
                this.uiEditModeActions.enable();
            }


        },

        _handleExitActionMode: function (ctx) {
            this.oView.uiEditModeActions.disable();
        },

        //force browser to repaint Body, by setting it `display` property to 'none' and to 'block' again
        _forceBrowserRerenderElement: function (element) {
            var animationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame;
            if (animationFrame) {
                animationFrame(function () {
                    var display = element.style.display;
                    element.style.display = 'none';
                    element.offsetHeight;
                    element.style.display = display;
                });
            } else {
                jQuery.sap.log.info('unsupported browser for animation frame');
            }
        },

        //function fixes Android 4.x Chrome, and Safari bug with poor rendering
        _webkitMobileRenderFix: function () {
            //force Chrome to repaint Body, by setting it `display` property to 'none' and to 'block' again
            if (sap.ui.Device.browser.chrome || sap.ui.Device.os.android) {
                // this includes almost all browsers and devices
                // if this is the IOS6 (as the previous fix causes double flickering
                // and this one only one flickering)
                this._forceBrowserRerenderElement(document.body);
            }
        },

        _resizeHandler : function () {
            this._addBottomSpace();
            sap.ushell.utils.handleTilesVisibility();

            //Layout calculation is relevant only when the dashboard is presented
            var oNavContainerFlp = this.getView().getParent(),
                oCurrentViewName = oNavContainerFlp && oNavContainerFlp.getCurrentPage().getViewName(),
                bInDahsboard = oCurrentViewName == this.getView().getViewName();

            if (sap.ushell.Layout && bInDahsboard) {
                sap.ushell.Layout.reRenderGroupsLayout(null, true);
            }
        },

        _appOpenedHandler : function (sChannelId, sEventId, oData) {
            // checking if application component opened is not the FLP App Component (e.g. navigation to an app, not 'Home')
            // call to set all tiles visibility off (so no tile calls will run in the background)
            var oParentComponent = this.getOwnerComponent(), sParentName = oParentComponent.getMetadata().getComponentName();
            if (oData.additionalInformation.indexOf(sParentName) === -1) {
                sap.ushell.utils.setTilesNoVisibility();// setting no visibility on all visible tiles
            }
        },

        _addBottomSpace : function () {
            sap.ushell.utils.addBottomSpace();
        },

        _scrollToFirstVisibleGroup : function (sChannelId, sEventId, oData) {
            var sGroupId,
                fromTop = 0,
                that = this;

            if (oData.group) {
                sGroupId = oData.group.getGroupId();
            } else {
                // in case of scroll after deletion, the oData contains only the groupId.
                sGroupId = oData.groupId;
            }

            if (oData.fromTop) {
                fromTop = oData.fromTop - 50;
            }

            jQuery.each(this.oView.oDashboardGroupsBox.getGroups(), function (nIndex, oGroup) {
                if (oGroup.getGroupId() === sGroupId) {
                    var iY;

                    iY =  -1 * (document.getElementById('dashboardGroups').getBoundingClientRect().top) + document.getElementById(oGroup.sId).getBoundingClientRect().top;
                    jQuery('.sapUshellDashboardView section').animate({scrollTop : iY - fromTop}, 0, that.fHandleScrollEnd);

                    //on press event we need to set the group in focus
                    if (oData.group && oData.focus) {
                        jQuery.sap.byId(oGroup.sId).focus();
                    }

                    return false;
                }
            });
            sap.ushell.utils.addBottomSpace();
        },

        _scrollToGroup : function (sChannelId, sEventId, oData) {
            var sGroupId,
                that = this,
                oModel = this.getView().getModel();

            if (oData.group) {
                sGroupId = oData.group.getGroupId();
            } else {
                // in case of scroll after deletion, the oData contains only the groupId.
                sGroupId = oData.groupId;
            }

            // The model flag /scrollingToGroup indicates a scroll-to-group action currently occurs,
            oModel.setProperty("/scrollingToGroup", true);
            jQuery.each(this.oView.oDashboardGroupsBox.getGroups(), function (nIndex, oGroup) {
                if (oGroup.getGroupId() === sGroupId) {
                    var iY;
                    setTimeout(function () {
                        iY =  -1 * (document.getElementById('dashboardGroups').getBoundingClientRect().top) + document.getElementById(oGroup.sId).getBoundingClientRect().top;
                        jQuery('.sapUshellDashboardView section').animate({scrollTop : iY}, 500, that.fHandleScrollEnd);
                        if (oData.isInEditTitle) {
                            oGroup.setEditMode(true);
                        }
                    }, 300);

                    //on press event we need to set the group in focus
                    if (oData.group && oData.focus) {
                        jQuery.sap.byId(oGroup.sId).focus();
                    //    jQuery.sap.byId(oGroup.sId).addClass('sapUshellSelected');
                    }
                    //fix bottom space, if this a deletion scenario the 'oData.groupId' will return true
                    if (oData.groupId || oData.groupChanged) {
                        that._addBottomSpace();
                    }

                    jQuery('#groupList li')
                        .removeClass('sapUshellSelected')
                        .eq(nIndex).addClass('sapUshellSelected');

                    // Recalculate tiles visibility
                    sap.ushell.utils.handleTilesVisibility();

                    return false;
                }
            });
        },

        fHandleScrollEnd : function () {

            //Notify groupList
            var oEventBus = sap.ui.getCore().getEventBus();
            oEventBus.publish("grouplist", "ScrollAnimationEnd");
        },

        /**
         *
         * @param event
         * @param ui : tile DOM Reference
         * @private
         */
        _handleDrop : function (event, ui) {
            //remove the disable-user-select class from body in case of desktop
            if (sap.ui.Device.system.desktop) {
                jQuery('body').removeClass("sapUshellDisableUserSelect");
            }
            var tileMoveInfo = sap.ushell.Layout.getLayoutEngine().layoutEndCallback(),
                oEventBus = sap.ui.getCore().getEventBus(),
                noRefreshSrc,
                noRefreshDst;

            if (!tileMoveInfo.tileMovedFlag) {
                return; //tile was not moved
            }
            noRefreshSrc = true;
            noRefreshDst = true; //Default - suppress re-rendering after drop
            //if src and destination groups differ - refresh src and dest groups
            //else if a tile has moved & dropped in a different position in the same group - only dest should refresh (dest == src)
            //if a tile was picked and dropped - but never moved - the previous if would have returned
            if ((tileMoveInfo.srcGroup !== tileMoveInfo.dstGroup)) {
                noRefreshSrc = noRefreshDst = false;
            } else if (tileMoveInfo.tile !== tileMoveInfo.dstGroup.getTiles()[tileMoveInfo.dstTileIndex]) {
                noRefreshDst = false;
            }
            tileMoveInfo.srcGroup.removeAggregation('tiles', tileMoveInfo.tile, noRefreshSrc);
            tileMoveInfo.dstGroup.insertAggregation('tiles', tileMoveInfo.tile, tileMoveInfo.dstTileIndex, noRefreshDst);

            oEventBus.publish("launchpad", "moveTile", {
                sTileId: tileMoveInfo.tile.getUuid(),
                toGroupId:  tileMoveInfo.dstGroup.getGroupId(),
                toIndex: tileMoveInfo.dstTileIndex
            });

            oEventBus.publish("launchpad", "sortableStop");
        },

        _publishAsync : function (sChannelId, sEventId, oData) {
            var oBus = sap.ui.getCore().getEventBus();
            window.setTimeout(jQuery.proxy(oBus.publish, oBus, sChannelId, sEventId, oData), 1);
        }
    });
}());

}; // end of sap/ushell/components/flp/launchpad/dashboard/DashboardContent.controller.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.flp.launchpad.dashboard.DashboardContent.view') ) {
  jQuery.sap.declare('sap.ushell.components.flp.launchpad.dashboard.DashboardContent.view');
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, document, self */
    /*jslint plusplus: true, nomen: true, vars: true */

    
    
    
    
    

    sap.ui.jsview("sap.ushell.components.flp.launchpad.dashboard.DashboardContent", {

        createContent: function (oController) {
            this.bFirstRendering = true;
            this.bAnimate = false; //@todo alex, sap.ui.Device.system.desktop;
            this.isTouch = !sap.ui.Device.system.desktop;
            this.parentComponent = sap.ui.core.Component.getOwnerComponentFor(this);
            this.addStyleClass("sapUshellDashboardView");
            this.bTileContainersContentAdded = false;
            var oModel = this.parentComponent.getModel(),
                that = this;
            this.oModel = oModel;

            this.ieHtml5DnD = !!(oModel.getProperty("/personalization") && sap.ui.Device.browser.msie && sap.ui.Device.browser.version >= 11 &&
                (sap.ui.Device.system.combi || sap.ui.Device.system.tablet));
            this.oDashboardGroupsBox = this._getDashboardGroupsBox(oController, oModel);
            sap.ui.getCore().getEventBus().subscribe("launchpad", "enterEditMode", this._addTileContainersContent, this);
            sap.ui.getCore().byId('navContainerFlp').attachAfterNavigate(this.onAfterNavigate, this);

            this.addEventDelegate({
                onAfterShow: function () {
                    //Add config button only if shell is running flp application
                    var sRoot = sap.ushell.renderers.fiori2.RendererExtensions.getConfiguration().rootIntent,
                        oConfigBtn;
                    if (sRoot === "Shell-home") {
                        oConfigBtn = sap.ui.getCore().byId("configBtn");
                        sap.ushell.renderers.fiori2.RendererExtensions.addHeaderItem(oConfigBtn, "home");
                    }
                },
                onBeforeFirstShow: function () {
                    var oDashboardManager = sap.ushell.components.flp.launchpad.getDashboardManager();
                    oDashboardManager.loadPersonalizedGroups();
                    that.onAfterNavigate();
                },
                onBeforeShow: function () {

                },
                onAfterHide: function (evt) {
                    //Remove config button
                    var configBtn = sap.ui.getCore().byId("configBtn");
                    if (configBtn) {
                        sap.ushell.renderers.fiori2.RendererExtensions.removeHeaderItem(configBtn, "home");
                    }

                    //Remove action menu items
                    this.oHideGroupsButton = sap.ui.getCore().byId("hideGroupsBtn");
                    if (this.oHideGroupsButton) {
                        sap.ushell.Container.getRenderer("fiori2").hideActionButton([this.oHideGroupsButton.getId()], true);
                        sap.ushell.renderers.fiori2.RendererExtensions.removeOptionsActionSheetButton(this.oHideGroupsButton, "home");
                    }
                    this.oActionModeBtn = sap.ui.getCore().byId("ActionModeBtn");
                    if (this.oActionModeBtn) {
                        sap.ushell.renderers.fiori2.RendererExtensions.removeOptionsActionSheetButton(this.oActionModeBtn, "home");
                    }

                    //Remove action mode floating button
                    var actionModeFloatingBtn = sap.ui.getCore().byId("floatingActionBtn");
                    if (actionModeFloatingBtn) {
                        sap.ushell.renderers.fiori2.RendererExtensions.removeFloatingActionButton(actionModeFloatingBtn, "home");
                        actionModeFloatingBtn.setVisible(false);
                    }
                }
            });
            var oPage = new sap.m.Page({
                showHeader: false,
                content: [this.oDashboardGroupsBox]
            });

            return [oPage];
        },

        onAfterNavigate: function(oEvent) {
            var oNavContainerFlp = sap.ui.getCore().byId('navContainerFlp'),
                oCurrentViewName = oNavContainerFlp.getCurrentPage().getViewName(),
                bInDashboard = oCurrentViewName == "sap.ushell.components.flp.launchpad.dashboard.DashboardContent";
            if (bInDashboard) {
                this.oModel.setProperty("/currentViewName", "home");
                sap.ushell.renderers.fiori2.RendererExtensions.setHeaderHiding(false);

                //Add action menu items
                this.oHideGroupsButton = sap.ui.getCore().byId("hideGroupsBtn");
                if (!this.oHideGroupsButton) {
                    this.oHideGroupsButton = sap.ushell.Container.getRenderer("fiori2").addActionButton("sap.ushell.ui.footerbar.HideGroupsButton", {
                        id: "hideGroupsBtn"
                    }, true, true);

                    this.oHideGroupsButton.setModel(this.oModel);
                    if (this.oModel.getProperty("/enableHelp")) {
                        this.oHideGroupsButton.addStyleClass('help-id-hideGroupsBtn');// xRay help ID
                    }
                    if (!this.oModel.getProperty('/enableHideGroups')) { //Decided to always add the button but in case the hideGroups feature is off- hide it.
                        this.oHideGroupsButton.setVisible(false);
                    }
                } else {
                    sap.ushell.Container.getRenderer("fiori2").showActionButton([this.oHideGroupsButton.getId()], true);
                }

                this.oActionModeBtn = sap.ui.getCore().byId("ActionModeBtn");
                if (this.oActionModeBtn) {
                    sap.ushell.renderers.fiori2.RendererExtensions.addOptionsActionSheetButton(this.oActionModeBtn, "home");
                    if (this.oModel.getProperty('/actionModeMenuButtonEnabled')) {
                        this.oActionModeBtn.setVisible(true);
                    }
                }

                //Add action mode floating button
                this.oActionModeFloatingBtn = sap.ui.getCore().byId("floatingActionBtn");
                if (this.oActionModeFloatingBtn) {
                    sap.ushell.renderers.fiori2.RendererExtensions.addFloatingActionButton(this.oActionModeFloatingBtn, "home");
                    if (this.oModel.getProperty('/actionModeFloatingButtonEnabled')) {
                        this.oActionModeFloatingBtn.setVisible(true);
                    }
                }
            }
        },

        _addTileContainersContent : function () {
            if (!this.bTileContainersContentAdded) {
                var aGroups = this.oDashboardGroupsBox.getGroups();

                aGroups.forEach(function (group, groupIndex) {
                    this._addTileContainerContent(groupIndex);
                }.bind(this));
                this.bTileContainersContentAdded = true;
            }
        },

        _addTileContainerContent: function (groupIndex) {
            var oGroup = this.oDashboardGroupsBox.getGroups()[groupIndex];

            if (oGroup) {
                var sBindingCtxPath = oGroup.getBindingContext().getPath() + '/';

                oGroup.addBeforeContent(this._getBeforeContent(this.oController, sBindingCtxPath));
                oGroup.addAfterContent(this._getAfterContent(this.oController, sBindingCtxPath));
                oGroup.addHeaderAction(this._getHeaderAction(this.oController, sBindingCtxPath));
            }
        },
        _getDashboardGroupsBox : function (oController, oModel) {
            var that = this;
            var oTilesContainerTemplate = this._getTileContainerTemplate(oController);

            var fnEnableLockedGroupCompactLayout = function () {
                return oModel.getProperty('/enableLockedGroupsCompactLayout') && !oModel.getProperty('/tileActionModeActive');
            };

            var getPlusTileFromGroup = function (oGroup) {
                var groupDomRef;
                var plusTileDomRef;

                if (oGroup && (groupDomRef = oGroup.getDomRef())) {
                    plusTileDomRef = groupDomRef.querySelector('.sapUshellPlusTile');
                    if (plusTileDomRef) {
                        return plusTileDomRef;
                    }
                }

                return null;
            };

            var reorderTilesCallback = function (layoutInfo) {
                var plusTileStartGroup = getPlusTileFromGroup(layoutInfo.currentGroup);
                var plusTileEndGroup = getPlusTileFromGroup(layoutInfo.endGroup);
                var isPlusTileVanishRequired = (layoutInfo.tiles[layoutInfo.tiles.length - 2] === layoutInfo.item) || (layoutInfo.endGroup.getTiles().length == 0);
                if (isPlusTileVanishRequired) {
                    that._hidePlusTile(plusTileEndGroup);
                } else {
                    that._showPlusTile(plusTileEndGroup);
                }

                if (layoutInfo.currentGroup != layoutInfo.endGroup) {
                    that._showPlusTile(plusTileStartGroup);
                }
            };

            //Since the layout initialization is async, we need to execute the below function after initialization is done
            var fAfterLayoutInit = function () {
                //Prevent Plus Tile influence on the tiles reordering by exclude it from the layout matrix calculations
                sap.ushell.Layout.getLayoutEngine().setExcludedControl(sap.ushell.ui.launchpad.PlusTile);
                //Hide plus tile when collision with it
                sap.ushell.Layout.getLayoutEngine().setReorderTilesCallback.call(sap.ushell.Layout.layoutEngine, reorderTilesCallback);
            };

            var fAfterRenderingHandler = function () {
                if (!sap.ushell.Layout.isInited) {
                    sap.ushell.Layout.init({
                        getGroups: this.getGroups.bind(this),
                        isLockedGroupsCompactLayoutEnabled: fnEnableLockedGroupCompactLayout
                    }).done(fAfterLayoutInit);

                    //when media is changed we need to rerender Layout
                    //media could be changed by SAPUI5 without resize, or any other events. look for internal Incident ID: 1580000668
                    sap.ui.Device.media.attachHandler(function () {
                        if (!this.bIsDestroyed) {
                            sap.ushell.Layout.reRenderGroupsLayout(null, true);
                        }
                    }, this, sap.ui.Device.media.RANGESETS.SAP_STANDARD);
                }
                sap.ushell.Layout.reRenderGroupsLayout(null, true);

                if (this.getGroups().length) {
                    if (this.getModel().getProperty("/personalization")) {
                        if (!oController.getView().ieHtml5DnD) {
                            jQuery.sap.require('sap.ushell.UIActions');
                            that._disableUIActions(); //disable the previous instance of UIActions
                            that._disableEditModeUIActions();
                            that.uiActions = new sap.ushell.UIActions({
                                containerSelector: '#dashboardGroups',
                                wrapperSelector: "#" + this.getDomRef().parentNode.id, // The id of the <section> that wraps dashboardGroups div: #__page0-cont
                                draggableSelector: ".sapUshellTile",
                                draggableSelectorExclude: ".sapUshellPlusTile",
                                rootSelector: "#shell-container",
                                placeHolderClass: "sapUshellTile-placeholder",
                                cloneClass: "sapUshellTile-clone",
                                scrollContainerSelector: that.bAnimate ? "#cloneArea" : undefined,
                                clickCallback: oController._handleClick.bind(that),
                                startCallback: that._handleTileUIStart.bind(that),
                                endCallback: that._handleDrop.bind(that),
                                dragCallback: that._handleStartDrag.bind(that),
                                dragAndScrollCallback: that._handleDragMove.bind(that),
                                moveTolerance: that.isTouch ? 10 : 3,
                                switchModeDelay: 1000,
                                isLayoutEngine: true,
                                isTouch: that.isTouch,
                                debug: false,
                                disabledDraggableSelector: 'sapUshellLockedTile',
                                onDragStartUIHandler: that.markDisableGroups.bind(that),
                                onDragEndUIHandler: that.unmarkDisableGroups.bind(that)
                            }).enable();

                            that.uiEditModeActions = new sap.ushell.UIActions({
                                containerSelector: '#dashboardGroups',
                                wrapperSelector: "#" + this.getDomRef().parentNode.id, // The id of the <section> that wraps dashboardGroups div: #__page0-cont
                                draggableSelector: ".sapUshellDashboardGroupsContainerItem:not(.sapUshellDisableDragAndDrop)",
                                draggableSelectorBlocker: ".sapUshellTilesContainer-sortable, .sapUshellTileContainerBeforeContent, .sapUshellTileContainerAfterContent",
                                rootSelector: "#shell-container",
                                placeHolderClass: "sapUshellDashboardGroupsContainerItem-placeholder",
                                cloneClass: "sapUshellDashboardGroupsContainerItem-clone",
                                clickCallback: oController._handleClick.bind(that),
                                startCallback: oController._handleActionModeUIStart.bind(that),
                                endCallback: oController._handleActionModeDrop.bind(that),
                                dragCallback: oController._handleActionModeStartDrag.bind(that),
                                moveTolerance: that.isTouch ? 10 : 0.1,
                                switchModeDelay: 1000,
                                isLayoutEngine: false,
                                isTouch: that.isTouch,
                                isVerticalDragOnly: true,
                                debug: false
                            });
                        } else {
                            jQuery.sap.require('sap.ushell.UIActionsWin8');
                            that._disableUIActions();
                            that._disableEditModeUIActions();
                            that.uiActions = sap.ushell.UIActionsWin8.getInstance({
                                containerSelector: '#dashboardGroups',
                                wrapperSelector: "#" + this.getDomRef().parentNode.id, // The id of the <section> that wraps dashboardGroups div: #__page0-cont
                                draggableSelector: ".sapUshellTile",
                                rootSelector : "#shell-container",
                                placeHolderClass : "sapUshellTile-placeholder",
                                startCallback : that._handleTileUIStart.bind(that),
                                endCallback : that._handleDrop.bind(that),
                                dragCallback : that._handleStartDrag.bind(that),
                                dragAndScrollCallback : that._handleDragMove.bind(that),
                                onDragStartUIHandler : that.markDisableGroups.bind(that),
                                onDragEndUIHandler : that.unmarkDisableGroups.bind(that)
                            }).enable();

                            that.uiEditModeActions = sap.ushell.UIActionsWin8.getInstance({
                                forGroups: true,
                                containerSelector: '#dashboardGroups',
                                wrapperSelector:  "#" + this.getDomRef().parentNode.id, // The id of the <section> that wraps dashboardGroups div: #__page0-cont
                                draggableSelector: ".sapUshellTileContainerHeader",
                                rootSelector : "#shell-container",
                                placeHolderClass : "sapUshellDashboardGroupsContainerItem-placeholder",
                                _publishAsync: oController._publishAsync
                            }).enable();
                        }
                    }


                    if (this.getModel().getProperty("/tileActionModeActive")) {
                        that.uiEditModeActions.enable();
                    }

                    sap.ui.getCore().getEventBus().publish("launchpad", "contentRendered");
                    sap.ui.getCore().getEventBus().publish("launchpad", "contentRefresh");

                    var oLoadingDialog = sap.ui.getCore().byId("loadingDialog");
                    oLoadingDialog.closeLoadingScreen();
                    oController._addBottomSpace();

                    //Tile opacity is enabled by default, therefore we handle tile opacity in all cases except
                    //case where flag is explicitly set to false
                    if (this.getModel().getProperty("/tilesOpacity")) {
                        sap.ushell.utils.handleTilesOpacity(this.getModel());
                    }
                }

                //Recheck tiles visibility on first load, and make visible tiles active
                try {
                    sap.ushell.utils.handleTilesVisibility();
                } catch (e) {
                    //nothing has to be done
                }

            };

            jQuery.sap.require("sap.ushell.ui.launchpad.DashboardGroupsContainer");
            var oGroupsContainer = new sap.ushell.ui.launchpad.DashboardGroupsContainer("dashboardGroups", {
                accessibilityLabel : sap.ushell.resources.i18n.getText("DashboardGroups_label"),
                groups : {
                    path: "/groups",
                    template : oTilesContainerTemplate
                },
                afterRendering : fAfterRenderingHandler
            });

            oGroupsContainer.addEventDelegate({
                onsapskipback: function (oEvent) {
                    oEvent.preventDefault();
                    sap.ushell.renderers.fiori2.AccessKeysHandler.setIsFocusHandledByAnotherHandler(true);
                    //sidePanelFirstGroup
                    var jqElement = jQuery(".sapUshellGroupLI:first:visible");
                    if (!jqElement.length) {
                        sap.ushell.renderers.fiori2.AccessKeysHandler.sendFocusBackToShell(oEvent);
                    }
                    jqElement.focus();
                },
                onsapskipforward: function (oEvent) {
                    oEvent.preventDefault();
                    sap.ushell.renderers.fiori2.AccessKeysHandler.setIsFocusHandledByAnotherHandler(true);
                    sap.ushell.renderers.fiori2.AccessKeysHandler.sendFocusBackToShell(oEvent);
                },
                onsaptabnext: function (oEvent) {
                    if (!that.getModel().getProperty("/tileActionModeActive")) {
                        oEvent.preventDefault();
                        sap.ushell.renderers.fiori2.AccessKeysHandler.setIsFocusHandledByAnotherHandler(true);
                        sap.ushell.renderers.fiori2.AccessKeysHandler.sendFocusBackToShell(oEvent);
                    }
                },
                onsaptabprevious: function (oEvent) {
                    sap.ushell.renderers.fiori2.AccessKeysHandler.setIsFocusHandledByAnotherHandler(true);
                    var jqFocused = jQuery(":focus");
                    if (jqFocused.hasClass("sapUshellTileContainerHeader")) {
                        oEvent.preventDefault();
                        //sidePanelFirstGroup
                        var jqElement = jQuery("#openCatalogActionItem:visible");
                        if (jqElement.length) {
                            jqElement.focus();
                        } else {
                            sap.ushell.renderers.fiori2.AccessKeysHandler.sendFocusBackToShell(oEvent);
                        }
                    }
                }
            });

            return oGroupsContainer;
        },

        //During drag action, locked groups should be mark with a locked icon and group opacity should be changed to grayish
        markDisableGroups : function () {
            this.getModel().setProperty('/isInDrag', true);
        },

        //once d&d ends, restore locked groups appearance and remove locked icons and grayscale
        unmarkDisableGroups : function () {
            if (this.getModel()) {
                this.getModel().setProperty('/isInDrag', false);
            }
        },

        _getBeforeContent: function (oController) {
            var addGrpBtn = new sap.m.Button({
                icon: "sap-icon://add",
                text : sap.ushell.resources.i18n.getText("add_group_at"),
                visible : {
                    parts: ["/tileActionModeActive"],
                    formatter : function (tileActionModeActive) {
                        return (!this.getParent().getIsGroupLocked() && !this.getParent().getDefaultGroup() && tileActionModeActive);
                    }
                },
                enabled: {
                    parts: ["/editTitle"],
                    formatter : function (isEditTitle) {
                        return !isEditTitle;
                    }
                },
                type: sap.m.ButtonType.Transparent,
                press : [ function (oData) {
                    var path = oData.getSource().getBindingContext().getPath(),
                        parsePath = path.split("/");
                    var index = window.parseInt(parsePath[parsePath.length - 1], 10);
                    sap.ui.getCore().getEventBus().publish("launchpad", "createGroupAt", {
                        title : sap.ushell.resources.i18n.getText("new_group_name"),
                        location : index
                    });
                }, oController]
            }).addStyleClass("sapUshellAddGroupButton");

            addGrpBtn.addDelegate({
                    onAfterRendering: function() {
                    jQuery(".sapUshellAddGroupButton").attr("tabindex", -1);
                }
            });

            return addGrpBtn;
        },

        _getAfterContent: function (oController) {
            var addGrpBtn = new sap.m.Button({
                icon: "sap-icon://add",
                text : sap.ushell.resources.i18n.getText("add_group_at"),
                visible : {
                    parts: ["isLastGroup", "/tileActionModeActive", "/isInDrag"],
                    formatter : function (isLast, tileActionModeActive, isInDrag) {
                        // Calculate the result only if isInDrag is false,
                        // meaning - if there was a drag-and-drop action - is it already ended
                        return (isLast && tileActionModeActive);
                    }
               },
               enabled: {
                   parts: ["/editTitle"],
                   formatter : function (isEditTitle) {
                       return !isEditTitle;
                   }
                },
                type: sap.m.ButtonType.Transparent,
                press : [ function (oData) {
                    var path = oData.getSource().getBindingContext().getPath(),
                        parsePath = path.split("/");
                    var index = window.parseInt(parsePath[parsePath.length - 1], 10);
                    sap.ui.getCore().getEventBus().publish("launchpad", "createGroupAt", {
                        title : sap.ushell.resources.i18n.getText("new_group_name"),
                        location : index + 1
                    });
                }, oController]
            }).addStyleClass("sapUshellAddGroupButton");

            addGrpBtn.addDelegate({
                onAfterRendering: function() {
                    jQuery(".sapUshellAddGroupButton").attr("tabindex", -1);
                }
            });

            return addGrpBtn;
        },

        _getHeaderAction: function (oController, sBindingCtxPath) {
            jQuery.sap.require("sap.ushell.ui.launchpad.GroupHeaderActions");

            return new sap.ushell.ui.launchpad.GroupHeaderActions({
                content : this._getHeaderActions(),
                tileActionModeActive: {
                    parts: ['/tileActionModeActive', sBindingCtxPath + 'isDefaultGroup'],
                    formatter: function (bIsActionModeActive, bIsDefaultGroup) {
                        return bIsActionModeActive && !bIsDefaultGroup;
                    }
                },
                isOverflow: '{/isPhoneWidth}'
            }).addStyleClass("sapUshellOverlayGroupActionPanel");
        },

        _getTileContainerTemplate : function () {
            var oFilter = new sap.ui.model.Filter("isTileIntentSupported", sap.ui.model.FilterOperator.EQ, true),
                that = this;

            var oTilesContainerTemplate = new sap.ushell.ui.launchpad.TileContainer({
                headerText: "{title}",
                tooltip: "{title}",
                tileActionModeActive: '{/tileActionModeActive}',
                ieHtml5DnD: this.ieHtml5DnD,
                enableHelp: '{/enableHelp}',
                groupId: "{groupId}",
                defaultGroup: "{isDefaultGroup}",
                isLastGroup: "{isLastGroup}",
                isGroupLocked: "{isGroupLocked}",
                showHeader: true,
                editMode: "{editMode}",
                titleChange: function (oEvent) {
                    sap.ui.getCore().getEventBus().publish("launchpad", "changeGroupTitle", {
                        groupId: oEvent.getSource().getGroupId(),
                        newTitle: oEvent.getParameter("newTitle")
                    });
                },
                showPlaceholder: {
                    parts: ["/tileActionModeActive", "tiles/length"],
                    formatter: function (tileActionModeActive) {
                        return (tileActionModeActive || !this.groupHasVisibleTiles()) && !this.getIsGroupLocked();
                    }
                },
                visible: {
                    parts: ["/tileActionModeActive", "isGroupVisible", "links/length", "tiles/length"],
                    formatter: function (tileActionModeActive, isGroupVisible, linksCount) {
                        //Empty groups should not be displayed when personalization is off or if they are locked or default group not in action mode
                        if (!this.groupHasVisibleTiles() && !linksCount && (!this.getModel().getProperty("/personalization") || (this.getIsGroupLocked() && !tileActionModeActive) || (this.getDefaultGroup() && !tileActionModeActive))) {
                            return false;
                        }
                        return isGroupVisible || tileActionModeActive;
                    }
                },
                links: {
                    path: "links",
                    templateShareable: true,
                    template: new sap.ushell.ui.launchpad.LinkTileWrapper({
                        uuid: "{uuid}",
                        tileCatalogId: "{tileCatalogId}",
                        target: "{target}",
                        isLocked: "{isLocked}",
                        animationRendered: false,
                        debugInfo: "{debugInfo}",
                        ieHtml5DnD: this.ieHtml5DnD,
                        afterRendering: function (oEvent) {
                            var oContext = oEvent.getSource().getBindingContext(),
                                oTileModel;
                            if (oContext) {
                                oTileModel = oContext.getObject();
                                sap.ui.getCore().getEventBus().publish("launchpad", "tileRendered", {
                                    tileId: oTileModel.originalTileId,
                                    tileDomElementId: oEvent.getSource().getId()
                                });
                            }
                        },
                        tileViews: {
                            path: "content",
                            factory: function (sId, oContext) {
                                return oContext.getObject();
                            }
                        }
                    }),
                    filters: [oFilter]
                },
                
                tiles: {
                    path: "tiles",
                    templateShareable: true,
                    template: new sap.ushell.ui.launchpad.Tile({
                        "long": "{long}",
                        "tall": "{tall}",
                        uuid: "{uuid}",
                        tileCatalogId: "{tileCatalogId}",
                        target: "{target}",
                        isLocked: "{isLocked}",
                        tileActionModeActive: "{/tileActionModeActive}",
                        showActionsIcon: "{showActionsIcon}",
                        rgba: "{rgba}",
                        animationRendered: false,
                        debugInfo: "{debugInfo}",
                        ieHtml5DnD: this.ieHtml5DnD,
                        afterRendering: function (oEvent) {
                            var oContext = oEvent.getSource().getBindingContext(),
                                oTileModel;
                            if (oContext) {
                                oTileModel = oContext.getObject();
                                sap.ui.getCore().getEventBus().publish("launchpad", "tileRendered", {
                                    tileId: oTileModel.originalTileId,
                                    tileDomElementId: oEvent.getSource().getId()
                                });
                            }
                        },
                        tileViews: {
                            path: "content",
                            factory: function (sId, oContext) {
                                return oContext.getObject();
                            }
                        },
                        coverDivPress: function (oEvent) {
                            // if this tile had just been moved and the move itself did not finish refreshing the tile's view
                            // we do not open the actions menu to avoid inconsistencies
                            if (!oEvent.oSource.getBindingContext().getObject().tileIsBeingMoved) {
                                sap.ushell.components.flp.ActionMode._openActionsMenu(oEvent);
                            }
                        },
                        showActions: function (oEvent) {
                            sap.ushell.components.flp.ActionMode._openActionsMenu(oEvent);
                        },
                        deletePress: function (oEvent) {
                            var oTileControl =  oEvent.getSource(), oTile = oTileControl.getBindingContext().getObject().object;
                            var oData = {originalTileId : sap.ushell.Container.getService("LaunchPage").getTileId(oTile)};
                            sap.ui.getCore().getEventBus().publish("launchpad", "deleteTile", oData, this);
                        },
                        press : [ this.oController.dashboardTilePress, this.oController ]
                    }),
                    filters: [oFilter]
                },
                add: function (oEvent) {
                    that.parentComponent.getRouter().navTo('catalog', {
                        filters: JSON.stringify({
                            targetGroup: encodeURIComponent(oEvent.getSource().getBindingContext().sPath)
                        })
                    });
                },
                afterRendering: function (oEvent) {
                    if (sap.ushell.Layout.isInited) {
                        sap.ushell.Layout.reRenderGroupLayout(oEvent.getSource());
                    }
                    this.bindProperty("showBackground", "/tileActionModeActive");
                    this.bindProperty("showDragIndicator", {
                        parts: ['/tileActionModeActive', '/enableDragIndicator'],
                        formatter: function (bIsActionModeActive, bDragIndicator) {
                            return bIsActionModeActive && bDragIndicator && !this.getIsGroupLocked() && !this.getDefaultGroup();
                        }
                    });
                    this.bindProperty("showMobileActions", {
                        parts: ['/tileActionModeActive'],
                        formatter: function (bIsActionModeActive) {
                            return bIsActionModeActive && !this.getDefaultGroup();
                        }
                    });
                    this.bindProperty("showIcon", {
                        parts: ['/isInDrag', '/tileActionModeActive'],
                        formatter: function (bIsInDrag, bIsActionModeActive) {
                            return (this.getIsGroupLocked() && (bIsInDrag || bIsActionModeActive)) || (this.getDefaultGroup() && bIsActionModeActive);
                        }
                    });
                    this.bindProperty("deluminate", {
                        parts: ['/isInDrag'],
                        formatter: function (bIsInDrag) {
                            return this.getIsGroupLocked() && bIsInDrag;
                        }
                    });

                    if (that.bTileContainersContentAdded && !this.getBeforeContent().length) {
                        var aGroups = this.getModel().getProperty("/groups");
                        var i;
                        for (i = 0; i < aGroups.length; i++) {
                            if (aGroups[i].groupId === this.getGroupId()) {
                                break;
                            }
                        }
                        that._addTileContainerContent(i);
                    }

                    if (that.bFirstRendering) {
                        that.bFirstRendering = false;
                        //set initial focus
                        if (!that.getModel().getProperty("/tileActionModeActive")) {
                            var firstTileInTileContainer = jQuery('.sapUshellDashboardGroupsContainer .sapUshellTile:first');
                            if (firstTileInTileContainer.length) {
                                firstTileInTileContainer.focus();
                            } else {
                                jQuery("#ConfigBtn").focus();
                            }
                        }
                    }

                    // Remove tabindex from links and group-header actions
                    //  so that the focus will not be automatically set on the first link or group action when returning to the launchpad
                    jQuery(".sapUshellLinksContainer a").attr("tabindex", -1);
                    jQuery(".sapUshellContainerHeaderActions button").attr("tabindex", -1);
                }
            });

            return oTilesContainerTemplate;
        },

        _getHeaderActions: function () {
            return new sap.m.Button({
                text: {
                    path: 'removable',
                    formatter: function (bIsRemovable) {
                        if (sap.ui.Device.system.phone) {
                            if (bIsRemovable) {
                                this.setIcon("sap-icon://delete");
                            } else {
                                this.setIcon("sap-icon://refresh");
                            }
                        }
                        return sap.ushell.resources.i18n.getText(bIsRemovable ? 'DeleteGroupBtn' : 'ResetGroupBtn');
                    }
                },
                type: sap.m.ButtonType.Transparent,
                visible: {
                    parts: ['/tileActionModeActive', 'isDefaultGroup'],
                    formatter: function (bIsActionModeActive, bIsDefaultGroup) {
                        return bIsActionModeActive && !bIsDefaultGroup;
                    }
                },
                enabled: {
                    parts: ["/editTitle"],
                    formatter : function (isEditTitle) {
                        return !isEditTitle;
                    }
                },
                press: function (oEvent) {
                    var oSource = oEvent.getSource(),
                        oGroupBindingCtx = oSource.getBindingContext();
                    this.oController._handleGroupDeletion(oGroupBindingCtx);
                }.bind(this)
            }).addStyleClass("sapUshellHeaderActionButton");
        },

        _handleTileUIStart : function (evt, ui) {
            if ((sap.ui.Device.browser.msie) &&
                ((navigator.msMaxTouchPoints > 0) || (navigator.maxTouchPoints > 0))) {
                //Remove title so tooltip will not be displayed while dragging tile (IE10 and above)
                this.titleElement = ui.querySelector("[title]");
                this.titleElement.setAttribute("data-title", this.titleElement.getAttribute("title"));
                this.titleElement.removeAttribute("title");
            }
            //Prevent the browser to mark any elements while dragging
            if (sap.ui.Device.system.desktop) {
                jQuery('body').addClass("sapUshellDisableUserSelect");
            }
        },

        /**
         *
         * @param ui : tile DOM reference
         * @private
         */
        _handleStartDrag : function (evt, tileElement) {
            //Prevent selection of text on tiles and groups
            if (window.getSelection) {
                var selection = window.getSelection();
                // fix IE9 issue (CSS 1580181391)
                try {
                    selection.removeAllRanges();
                } catch (e) {

                }
            }
            sap.ushell.Layout.getLayoutEngine().layoutStartCallback(tileElement);
            //Prevent the tile to be launched after drop
            jQuery(tileElement).find("a").removeAttr('href');
            this.placeHolderElement = jQuery(".sapUshellTile-placeholder");
            sap.ui.getCore().getEventBus().publish("launchpad", "sortableStart");
            if (this.bAnimate) {
                this._startDragNDropAnimate(evt, tileElement);
            }
        },

        /**
         *
         * @param ui : tile DOM reference
         * @private
         */
        _handleDrop : function (evt, tileElement) {
            jQuery('#dashboardGroups .sapUshellHidePlusTile').removeClass('sapUshellHidePlusTile');
            if ((sap.ui.Device.browser.msie) &&
                ((navigator.msMaxTouchPoints > 0) || (navigator.maxTouchPoints > 0))) {
                this.titleElement.setAttribute("title", this.titleElement.getAttribute("data-title"));
            }
            this.oController._handleDrop.call(this.oController, evt, tileElement);
            if (sap.ui.Device.desktop) {
                jQuery('body').removeClass("sapUshellDisableUserSelect");
            }
        },

        /**
         *
         * @param ui : tile DOM reference
         * @private
         */
        _handleDragMove : function (cfg) {
            if (!cfg.isScrolling) {
                sap.ushell.Layout.getLayoutEngine().moveDraggable(cfg.moveX, cfg.moveY);
            }

            if (!cfg.isScrolling && this.bAnimate) {
                this._changeDragNDropAnimate(cfg.evt, cfg.clone);
            }
        },

        _hidePlusTile : function (plusTileDomRef) {
            if (plusTileDomRef) {
                plusTileDomRef.className += " sapUshellHidePlusTile";
            }
        },

        _showPlusTile: function (plusTileDomRef) {
            if (plusTileDomRef) {
                plusTileDomRef.className = plusTileDomRef.className.split(' ' + 'sapUshellHidePlusTile').join('');
            }
        },

        _getTileTopOffset : function (oTile, tilePosition, dashboardScrollTop) {
            var iTileTopOffset = 0 + dashboardScrollTop;
            iTileTopOffset += oTile.closest(".sapUshellDashboardGroupsContainerItem").position().top;
            iTileTopOffset += tilePosition.top;
            return iTileTopOffset;
        },

        _startDragNDropAnimate : function (evt, ui) {
            this.dragNDropData = {};
            //Create a clone area and append it to oDashboardGroupsBox element
            this.dragNDropData.jqCloneArea = jQuery("<div id='cloneArea' class='sapUshellCloneArea sapUshellDashboardGroupsContainerItem'></div>");//TODO[Nir]: Check if we need those css classes
            var jqDashboardGroupsBox = jQuery.sap.byId(this.oDashboardGroupsBox.getId());
            var tilesFirstContainer = jqDashboardGroupsBox.find('.sapUshellTileContainer:visible:first');
            this.dragNDropData.jqDashboard = jQuery(".sapUshellDashboardView");
            var dashboardPageScrollTop = this.dragNDropData.jqDashboard.scrollTop();
            this.dragNDropData.containerLeftMargin = parseInt(tilesFirstContainer.css("margin-left"), 10);

            //Refresh the current margin (window scaling and opening the sidebar change the margin)
            var containerOffsetLeft = parseFloat(jQuery("#dashboardPage-scroll").offset().left);
            var dashboardOffsetLeft = jqDashboardGroupsBox.offset().left;

            this.dragNDropData.jqCloneArea.css("left", dashboardOffsetLeft - containerOffsetLeft);

            this.dragNDropData.jqDraggableElements = jQuery(".sapUshellTile[role='link'],.sapUshellPlusTile", jqDashboardGroupsBox);

            this.dragNDropData.jqGroupTitles = jQuery(".sapUshellContainerTitle:visible", jqDashboardGroupsBox);

            var jqTile,
                tile,
                sTileLeftOffset,
                oClonedTile,
                iTileTopOffset,
                i;

            for (i = 0; i < this.dragNDropData.jqDraggableElements.length; i++) {
                jqTile = this.dragNDropData.jqDraggableElements.eq(i);
                tile = jqTile[0];
                //Clone the current tile (including style)
                oClonedTile = jqTile.clone(true);
                tile.tilePosition = jqTile.position();
                tile.tileOffset = jqTile.offset();
                oClonedTile.attr("id", oClonedTile.attr("id") + '-clone');
                oClonedTile.css("font-size", jqTile.css("font-size"));
                oClonedTile.addClass("sapUshellClonedTile");

                //Save the clone and the current group (sapUshellDashboardGroupsContainerItem)
                jqTile.data("clone", oClonedTile);

                //Position the clone inside the cloneArea
                sTileLeftOffset = parseInt(tile.tilePosition.left, 10) + this.dragNDropData.containerLeftMargin + "px";
                iTileTopOffset = this._getTileTopOffset(jqTile, tile.tilePosition, dashboardPageScrollTop);

                //Set the new position
                oClonedTile.css("left", sTileLeftOffset);
                oClonedTile.css("top", iTileTopOffset + "px");

                //Append the clone
                this.dragNDropData.jqCloneArea.append(oClonedTile);

                jqTile.css("visibility", "hidden");
            }

            var jqGroupTitle,
                groupTitle,
                sGroupTitleLeftOffset,
                oClonedGroupTitle,
                iGroupTitleTopOffset;

            for (i = 0; i < this.dragNDropData.jqGroupTitles.length; i++) {
                jqGroupTitle = this.dragNDropData.jqGroupTitles.eq(i);
                groupTitle = jqGroupTitle[0];

                oClonedGroupTitle = jqGroupTitle.clone(true);
                groupTitle.titlePosition = jqGroupTitle.position();
                groupTitle.titleOffset = jqGroupTitle.offset();
                oClonedGroupTitle.attr("id", oClonedGroupTitle.attr("id") + '-clone');
                oClonedGroupTitle.css("font-size", jqGroupTitle.css("font-size"));
                oClonedGroupTitle.addClass("sapUshellClonedTile");

                //Save the clone and the current group (sapUshellDashboardGroupsContainerItem) //TODO[Nir]: do we need it?
                jqGroupTitle.data("clone", oClonedGroupTitle);

                //Position the clone inside the cloneArea
                sGroupTitleLeftOffset = parseInt(groupTitle.titlePosition.left, 10) + this.dragNDropData.containerLeftMargin + "px";
                iGroupTitleTopOffset = this._getTileTopOffset(jqGroupTitle, groupTitle.titlePosition, dashboardPageScrollTop);

                //Set the new position
                oClonedGroupTitle.css("left", sGroupTitleLeftOffset);
                oClonedGroupTitle.css("top", iGroupTitleTopOffset + "px");

                //Append the clone
                this.dragNDropData.jqCloneArea.append(oClonedGroupTitle);

                jqGroupTitle.css("visibility", "hidden");
            }

            this.dragNDropData.jqDashboard.append(this.dragNDropData.jqCloneArea);
        },

        _changeDragNDropAnimate : function (evt, ui) {
            var dashboardPageScrollTop = this.dragNDropData.jqDashboard.scrollTop();
            var jqTile,
                tile,
                currentTilePosition,
                currentTileOffset,
                tileLeftOffset,
                iTileTopOffset,
                i,
                oClonedTile;

            for (i = 0; i < this.dragNDropData.jqDraggableElements.length; i++) {
                jqTile = this.dragNDropData.jqDraggableElements.eq(i);
                tile = jqTile[0];
                //Get the original tile and its clone
                currentTilePosition = jqTile.position();
                currentTileOffset = jqTile.offset();
                if ((currentTileOffset.left === tile.tileOffset.left) && (currentTileOffset.top === tile.tileOffset.top)) {
                    continue;
                }
                tile.tilePosition = currentTilePosition;
                tile.tileOffset = currentTileOffset;
                oClonedTile = jqTile.data("clone");
                if (!oClonedTile) {
                    continue;
                }

                //Get the invisible tile that has snapped to the new
                //location, get its position, and animate the visible
                //clone to it
                tileLeftOffset = tile.tilePosition.left + this.dragNDropData.containerLeftMargin;
                iTileTopOffset = this._getTileTopOffset(jqTile, tile.tilePosition, dashboardPageScrollTop);

                //Stop currently running animations
                //Without this, animations would queue up
                oClonedTile.stop(true, false).animate({left: tileLeftOffset, top: iTileTopOffset}, {duration: 250}, {easing: "swing"});
            }
        },

        _stopDragNDropAnimation : function (evt, ui) {
            if (this.bAnimate) {
                //Show all original tiles and reset everything
                this.dragNDropData.jqDraggableElements.removeData("clone");
                this.dragNDropData.jqDraggableElements.css("visibility", "visible");
                this.dragNDropData.jqGroupTitles.css("visibility", "visible");

                //Delete all clones
                this.dragNDropData.jqCloneArea.empty();
                this.dragNDropData.jqCloneArea.remove();
            }
        },

        _disableUIActions : function () {
            if (this.uiActions) {
                this.uiActions.disable();
                this.uiActions = null;
            }
        },
        _disableEditModeUIActions : function () {
            if (this.uiEditModeActions) {
                this.uiEditModeActions.disable();
                this.uiEditModeActions = null;
            }
        },

        getControllerName: function () {
            return "sap.ushell.components.flp.launchpad.dashboard.DashboardContent";
        },

        exit: function () {
            sap.ui.core.mvc.View.prototype.exit.apply(this, arguments);
            if (sap.ui.getCore().byId("hideGroupsBtn")) {
                sap.ui.getCore().byId("hideGroupsBtn").destroy();
            }
            if (sap.ui.getCore().byId("ActionModeBtn")) {
                sap.ui.getCore().byId("ActionModeBtn").destroy();
            }

            if (sap.ui.getCore().byId("floatingActionBtn")) {
                sap.ui.getCore().byId("floatingActionBtn").destroy();
            }
        }
    });
}());

}; // end of sap/ushell/components/flp/launchpad/dashboard/DashboardContent.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.flp.launchpad.group_list.GroupList.view') ) {
  jQuery.sap.declare('sap.ushell.components.flp.launchpad.group_list.GroupList.view');
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, document */
    /*jslint plusplus: true, nomen: true */

    
    jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


    sap.ui.jsview("sap.ushell.components.flp.launchpad.group_list.GroupList", {
        createContent: function (oController) {
            this.parentComponent = sap.ui.core.Component.getOwnerComponentFor(this);
            this.oModel = this.parentComponent.getModel();
            var that = this,
                oOpenCatalogItem =  this._getOpenCatalogItem(oController),
                oGroupListItemTemplate = this._getGroupListItemTemplate(oController);
            this.bAnimate = sap.ui.Device.system.desktop;
            this.isTouch = !sap.ui.Device.system.desktop;
            this.oGroupList = new sap.m.List("groupListItems", {
                items : {
                    path     : "/groups",
                    template : oGroupListItemTemplate
                }
            }).addStyleClass("sapUshellGroupItemList");
            //This two functions overwrite methods from ListBase class
            // to avoid unpredicted behavior with F6
            jQuery.extend(this.oGroupList, {
                onsapskipforward: function (oEvent) {
                    oEvent.preventDefault();
                    sap.ushell.renderers.fiori2.AccessKeysHandler.setIsFocusHandledByAnotherHandler(true);
                    sap.ushell.components.flp.ComponentKeysHandler.goToTileContainer(oEvent);
                },
                onsapskipback: function (oEvent) {
                    oEvent.preventDefault();
                    sap.ushell.renderers.fiori2.AccessKeysHandler.setIsFocusHandledByAnotherHandler(true);
                    sap.ushell.renderers.fiori2.AccessKeysHandler.sendFocusBackToShell(oEvent);
                },
                onsaptabprevious: function (oEvent) {
                    oEvent.preventDefault();
                    sap.ushell.renderers.fiori2.AccessKeysHandler.setIsFocusHandledByAnotherHandler(true);
                    sap.ushell.renderers.fiori2.AccessKeysHandler.sendFocusBackToShell(oEvent);
                }
            });

            this.oGroupList.onAfterRendering = function () {
                //set not as large element for F6 keyboard navigation
                this.data("sap-ui-fastnavgroup", "false", false);
                jQuery("#groupListFooter").attr("data-sap-ui-fastnavgroup", "false");

                that.oController.handleScroll();
            };
            jQuery.sap.require("sap.ushell.override");
            this.oGroupList.updateItems = sap.ushell.override.updateAggregatesFactory("items");

            if (this.getViewData().enablePersonalization === undefined || this.getViewData().enablePersonalization !== false) {
                this.oActionList = new sap.m.List({
                    items : [ oOpenCatalogItem ]
                });

                /*
                 override original onAfterRendering as currently sap.m.List
                 does not support afterRendering handler in the constructor
                 this is done to support tab order accessibility
                 */
                var origOpenCatalogListOnAfterRendering = this.oActionList.onAfterRendering;
                this.oActionList.onAfterRendering = function (oEvent) {
                    origOpenCatalogListOnAfterRendering.call(this, oEvent);
                };

                var groupListFooter = new sap.m.Bar({
                    id: "groupListFooter",
                    contentMiddle: [this.oActionList/*, lastHiddenSidebarTabFocusHelper*/]
                });
                groupListFooter.addStyleClass("sapUshellPersonalizationOn");

                this.groupListPage = new sap.m.Page({
                    id: "groupListPage", // sap.ui.core.ID
                    showHeader: false,
                    showFooter: true,
                    content: [this.oGroupList], // sap.ui.core.Control
                    footer: groupListFooter
                });
                this.groupListPage.addStyleClass("sapUshellPersonalizationOn");
            } else {
                this.groupListPage = new sap.m.Page({
                    id: "groupListPage", // sap.ui.core.ID
                    showHeader: false,
                    showFooter: false,
                    content: [this.oGroupList] // sap.ui.core.Control
                });
            }
            this.addStyleClass("sapUshellGroupList");

            return [this.groupListPage];
        },

        _getOpenCatalogItem : function () {
            var that = this,
                fOpenCatalog = function () {
                    that.parentComponent.getRouter().navTo('catalog');
                },
                oOpenCatalogItem = new sap.m.ActionListItem("openCatalogActionItem", {
                    text: "{i18n>open_catalog}",
                    tooltip: "{i18n>openCatalog_tooltip}",
                    press: fOpenCatalog
                });

            oOpenCatalogItem.addEventDelegate({
                onsaptabnext: function (oEvent) {
                    oEvent.preventDefault();
                    sap.ushell.renderers.fiori2.AccessKeysHandler.setIsFocusHandledByAnotherHandler(true);
                    sap.ushell.components.flp.ComponentKeysHandler.goToTileContainer();
                },
                onsaptabprevious: function (oEvent) {
                    oEvent.preventDefault();
                    sap.ushell.renderers.fiori2.AccessKeysHandler.setIsFocusHandledByAnotherHandler(true);
                    //sidePanelFirstGroup
                    var jqElement = jQuery(".sapUshellGroupLI:first:visible");
                    if (!jqElement.length) {
                        sap.ushell.renderers.fiori2.AccessKeysHandler.sendFocusBackToShell(oEvent);
                    }
                    jqElement.focus();
                }
            });


            // if xRay is enabled
            if (this.oModel.getProperty("/enableHelp")) {
                oOpenCatalogItem.addStyleClass('help-id-openCatalogActionItem');// xRay help ID
            }
            return oOpenCatalogItem;
        },

        _getGroupListItemTemplate : function (oController) {
            var fOnAfterRenderingHandler = function (oEvent) {
                var xRayEnabled = this.getModel() && this.getModel().getProperty('/enableHelp');
                if (this.getDefaultGroup()) {
                    this.addStyleClass("sapUshellDefaultGroupItem");
                    // if xRay is enabled
                    if (xRayEnabled) {
                        this.addStyleClass("help-id-homeGroupListItem"); //xRay help ID
                    }
                } else {
                    this.addStyleClass("sapUshellGroupListItem");
                    // if xRay is enabled
                    if (xRayEnabled) {
                        this.addStyleClass("help-id-groupListItem"); //xRay help ID
                    }
                }

                jQuery(this.getDomRef()).attr("tabindex", "0");
            };

            return new sap.ushell.ui.launchpad.GroupListItem({
                index : "{index}",
                title : "{title}",
                tooltip : "{title}",
                defaultGroup : "{isDefaultGroup}",
                groupId : "{groupId}",
                numberOfTiles : "{tiles/length}",
                afterRendering : fOnAfterRenderingHandler,
                isGroupVisible: "{isGroupVisible}",
                press : [ function (oEvent) {
                    this._handleGroupListItemPress(oEvent);
                }, oController ],
                visible: {
                    parts: ["/tileActionModeActive", "isGroupVisible", "/personalization", "isGroupLocked", "tiles/length", "isDefaultGroup"],
                    formatter: function (tileActionModeActive, isGroupVisible, personalization, isGroupLocked, nTilesCount, isDefaultGroup) {
                        //Empty groups should not be displayed when personalization is off or if they are locked or default group not in action mode
                        if (!this.groupHasVisibleTiles() && (!personalization || (isGroupLocked && !tileActionModeActive) || (isDefaultGroup && !tileActionModeActive))) {
                            return false;
                        }
                        return isGroupVisible || tileActionModeActive;
                    }
                }
            });
        },

        getControllerName: function () {
            return "sap.ushell.components.flp.launchpad.group_list.GroupList";
        }
    });
}());

}; // end of sap/ushell/components/flp/launchpad/group_list/GroupList.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.action.ActionTile.controller') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.action.ActionTile.controller');
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
(function() {
    "use strict";
    /* global document, jQuery, sap */
    sap.ui.getCore().loadLibrary("sap.m");
    jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

    

    sap.ui.controller("sap.ushell.components.tiles.action.ActionTile", {
        onInit: function() {
            var oView = this.getView();
            var oViewData = oView.getViewData();
            var oResourceModel = sap.ushell.components.tiles.utils.getResourceBundleModel();
            var oTileApi = oViewData.chip; // instance                                                                                                                                                                    // API
            var oConfig = sap.ushell.components.tiles.utils.getActionConfiguration(oTileApi);
            var oModel;
            var that = this;

            function formatDisplayText(sSemanticObject, sSemanticAction) {
                var oBundle = oResourceModel.getResourceBundle(), sResult = oBundle.getText("configuration.semantic_object") + ":\n" + sSemanticObject + "\n\n" + oBundle.getText("configuration.semantic_action") + ":\n" + sSemanticAction;
                return sResult;
            }

            oView.setModel(oResourceModel, "i18n");
            oModel = new sap.ui.model.json.JSONModel({
                config: oConfig,
                displayText: formatDisplayText(oConfig.semantic_object, oConfig.semantic_action)
            });
            oView.setModel(oModel);

            // implement configurationUi contract: setup configuration UI
            if (oTileApi.configurationUi.isEnabled()) {
                // attach configuration UI provider, which is essentially a components.tiles.action.Configuration
                oTileApi.configurationUi.setUiProvider(function() {
                    var oConfigurationUi = sap.ushell.components.tiles.utils.getConfigurationUi(that.getView(), "sap.ushell.components.tiles.action.Configuration");
                    oTileApi.configurationUi.attachCancel(this.onCancelConfiguration.bind(null, oConfigurationUi));
                    oTileApi.configurationUi.attachSave(this.onSaveConfiguration.bind(this, oConfigurationUi, formatDisplayText)); // mind the
                                                                                                                                    // closure
                    return oConfigurationUi;
                }.bind(this));

                oView.byId("actionTile").setTooltip(oResourceModel.getResourceBundle().getText("edit_configuration.tooltip"));
            }
        },

        onPress: function(oEvent) {
            // trigger to show the configuration UI if the tile is pressed in Admin mode
            var oTileApi = this.getView().getViewData().chip;
            if (oTileApi.configurationUi.isEnabled()) {
                oTileApi.configurationUi.display();
            }
        },

        // configuration save handler
        // The target mapping tile is enhanced with mapping_signature and supported form_factors properties.
        onSaveConfiguration: function(oConfigurationView, fnFormatDisplayText) {
            var
            // the deferred object required from the configurationUi contract
            oDeferred = jQuery.Deferred(), oModel = oConfigurationView.getModel(),
            // tile model placed into configuration model by getConfigurationUi
            oTileModel = oModel.getProperty("/tileModel"), oTileApi = oConfigurationView.getViewData().chip;

            // error handler
            function logErrorAndReject(oError) {
                jQuery.sap.log.warning(oError, null, "sap.ushell.components.tiles.action.ActionTile.controller");
                oDeferred.reject(oError);
            }

            // If the input fields icon, semantic object and action are failing the input validations, then through an error message requesting the
            // user to enter/correct those fields
            var bReject = sap.ushell.components.tiles.utils.checkTMInputOnSaveConfig(oConfigurationView);
            if (bReject) {
                oDeferred.reject("mandatory_fields_missing");
                return oDeferred.promise();
            }

            // Before saving the model data, check if Mapping signature table contains duplicate parameter names
            // in this case the save will fail and all the data will be lost as this is the designer behavior.
            if (sap.ushell.components.tiles.utils.tableHasDuplicateParameterNames(oModel.getProperty("/config/rows"))) {
                var oBundle = sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle();
                oDeferred.reject(oBundle.getText("configuration.signature.uniqueParamMessage.text"));
            } else { // only if the data is valid proceed with the save operation
                // Decide according to special flag if the setting in form factor are default
                // if so , the configuration should not be saved - this is crucial for the backend checks
                var oFormFactor = oModel.getProperty("/config/formFactorConfigDefault") ? undefined : sap.ushell.components.tiles.utils.buildFormFactorsObject(oModel);
                var sMappingSignature = sap.ushell.components.tiles.utils.getMappingSignatureString(oModel.getProperty("/config/rows"), oModel.getProperty("/config/isUnknownAllowed"));
                // get the configuration to save from the model
                var configToSave = {
                    semantic_object: jQuery.trim(oModel.getProperty("/config/semantic_object")) || "",
                    semantic_action: jQuery.trim(oModel.getProperty("/config/semantic_action")) || "",
                    display_title_text: jQuery.trim(oModel.getProperty("/config/display_title_text")) || "",
                    url: jQuery.trim(oModel.getProperty("/config/url")) || "",
                    ui5_component: jQuery.trim(oModel.getProperty("/config/ui5_component")) || "",
                    navigation_provider: jQuery.trim(oModel.getProperty("/config/navigation_provider")),
                    navigation_provider_role: jQuery.trim(oModel.getProperty("/config/navigation_provider_role")) || "",
                    navigation_provider_instance: jQuery.trim(oModel.getProperty("/config/navigation_provider_instance")) || "",
                    target_application_id: jQuery.trim(oModel.getProperty("/config/target_application_id")) || "",
                    target_application_alias: jQuery.trim(oModel.getProperty("/config/target_application_alias")) || "",
                    transaction: {
                        code: jQuery.trim(oModel.getProperty("/config/transaction/code"))
                    },
                    web_dynpro: {
                      application: jQuery.trim(oModel.getProperty("/config/web_dynpro/application")),
                      configuration: jQuery.trim(oModel.getProperty("/config/web_dynpro/configuration"))
                    },
                    target_system_alias: jQuery.trim(oModel.getProperty("/config/target_system_alias")),
                    display_info_text: jQuery.trim(oModel.getProperty("/config/display_info_text")),
                    form_factors: oFormFactor, // retrieve a structure describing form factor's mode (from application or admin selection) + form
                                                // factors values.
                    mapping_signature: sMappingSignature
                };
                // use bag in order to store translatable properties
                var tilePropertiesBag = oTileApi.bag.getBag('tileProperties');
                tilePropertiesBag.setText('display_title_text', configToSave.display_title_text);

                // use configuration contract to write parameter values
                oTileApi.writeConfiguration.setParameterValues({
                    tileConfiguration: JSON.stringify(configToSave)
                },
                // success handler
                function() {
                    var oConfigurationConfig = sap.ushell.components.tiles.utils.getActionConfiguration(oTileApi, false);
                    var oTileConfig = sap.ushell.components.tiles.utils.getActionConfiguration(oTileApi, true);
                    // switching the model under the tile -> keep the tile model
                    oModel = new sap.ui.model.json.JSONModel({
                        config: oConfigurationConfig,
                        tileModel: oTileModel
                    });
                    oConfigurationView.setModel(oModel);
                    // update model (no merge)
                    oTileModel.setData({
                        config: oTileConfig,
                        displayText: fnFormatDisplayText(oTileConfig.semantic_object, oTileConfig.semantic_action)
                    }, false);
                    // Added for new LPD_CUST implementation
                    tilePropertiesBag.save(
                    // success handler
                    function() {
                        jQuery.sap.log.debug("property bag 'tileProperties' saved successfully");
                        // update possibly changed values via contracts
//                        if (oTileApi.title) {
//                            oTileApi.title.setTitle(configToSave.display_title_text,
//                            // success handler
//                            function() {
//                                oDeferred.resolve();
//                            }, logErrorAndReject // error handler
//                            );
//                        } else {
                            oDeferred.resolve();
//                        }
                    }, logErrorAndReject // error handler
                    );
                }, logErrorAndReject // error handler
                );
            }
            return oDeferred.promise();
        },

        // configuration cancel handler
        onCancelConfiguration: function(oConfigurationView) {
            // re-load old configuration and display
            var oViewData = oConfigurationView.getViewData();
            var oModel = oConfigurationView.getModel();
            // tile model placed into configuration model by getConfigurationUi
            var oTileModel = oModel.getProperty("/tileModel");
            var oTileApi = oViewData.chip;
            var oCurrentConfig = sap.ushell.components.tiles.utils.getActionConfiguration(oTileApi, false);
            oConfigurationView.getModel().setData({
                config: oCurrentConfig,
                tileModel: oTileModel
            }, false);
        }
    });
}());

}; // end of sap/ushell/components/tiles/action/ActionTile.controller.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.action.Configuration.controller') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.action.Configuration.controller');
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
(function() {
    "use strict";
    /* global jQuery, sap */

    
    sap.ui.controller("sap.ushell.components.tiles.action.Configuration", {

        sEnterValuePlaceHolder: "",
        sDuplicateErrorMsg: "",
        sDuplicateErrorTitle: "",
        sInvalidParmMsg: "",

        aDefaultObjects: [
            {
                obj: "",
                name: ""
            }, {
                obj: "*",
                name: "*"
            }
        ],

        onConfigurationInputChange: function(oControlEvent) {
            sap.ushell.components.tiles.utils.checkTMInput(this.getView(), oControlEvent);
        },
        onInit: function() {
            var oView = this.getView();
            var oSemanticObjectSelector = oView.byId("semantic_objectInput");
            var oRoleSelector = oView.byId("navigation_provider_roleInput");
            var oInstanceSelector = oView.byId("navigation_provider_instanceInput");
            var oAliasSelector = oView.byId("target_application_aliasInput");
            var oActionSelector = oView.byId("semantic_actionInput");
            var oTargetTypeSelector = oView.byId("targetTypeInput");
            var oResourceModel = sap.ushell.components.tiles.utils.getResourceBundleModel();

            oView.setModel(oResourceModel, "i18n");
            oView.setViewName("sap.ushell.components.tiles.action.Configuration");
            // initialize semantic object input field
            sap.ushell.components.tiles.utils.createSemanticObjectModel(this, oSemanticObjectSelector, this.aDefaultObjects);
            sap.ushell.components.tiles.utils.createRoleModel(this, oRoleSelector, oInstanceSelector);
            sap.ushell.components.tiles.utils.createAliasModel(this, oAliasSelector);
            sap.ushell.components.tiles.utils.createActionModel(this, oActionSelector);
            sap.ushell.components.tiles.utils.createNavigationProviderModel(this, oTargetTypeSelector);
            // make sure that the chose object is written back to the configuration
            oSemanticObjectSelector.attachChange(function(oControlEvent) {
                var sValue = oControlEvent.getSource().getValue();
                oView.getModel().setProperty("/config/semantic_object", sValue);
            });
            oRoleSelector.attachChange(function(oControlEvent) {
                var sValue = oControlEvent.getSource().getValue();
                oView.getModel().setProperty("/config/navigation_provider_role", sValue);
                sap.ushell.components.tiles.utils.updateAliasModel(oView, oAliasSelector);
            });
            oInstanceSelector.attachChange(function(oControlEvent) {
                var sValue = oControlEvent.getSource().getValue();
                oView.getModel().setProperty("/config/navigation_provider_instance", sValue);
            });
            oAliasSelector.attachChange(function(oControlEvent) {
                var sValue = oControlEvent.getSource().getValue();
                oView.getModel().setProperty("/config/target_application_alias", sValue);
            });

            var oBundle = oResourceModel.getResourceBundle();
            this.sEnterValuePlaceHolder = oBundle.getText("configuration.signature.table.valueFieldLbl");
            this.sDuplicateErrorMsg = oBundle.getText("configuration.signature.uniqueParamMessage.text");
            this.sDuplicateErrorTitle = oBundle.getText("configuration.signature.uniqueParamMessage.title");
            this.sInvalidParmMsg = oBundle.getText("configuration.signature.invalidParamMessage.text");

        },

        // This function applies table logic for the mapping signature structure according to the Mandatory check-box:
        // if mandatory is unselected: Value and isRegularExpression fields should be disabled and vice versa...
        handleMandatoryChange: function(oMandatoryCheckBox) {
            var sId = oMandatoryCheckBox.getParameter('id');
            var aParentCells = sap.ui.getCore().byId(sId).getParent().getCells();
            // var parentID = oMandatoryCheckBox.oSource.getParent().getId();

            var bIsMandatory = oMandatoryCheckBox.getParameter('checked');

            if (bIsMandatory) {
                aParentCells[2].setEnabled(true); // Value field
                aParentCells[2].setPlaceholder(this.sEnterValuePlaceHolder);
                aParentCells[4].setEnabled(false); // DefaultValue field
                aParentCells[4].setValue("");
                aParentCells[4].setPlaceholder("");
                aParentCells[3].setEnabled(true); // IsRegularExpression check-box field
            } else {
                aParentCells[2].setEnabled(false); // Value field
                aParentCells[2].setValue("");
                aParentCells[2].setPlaceholder(""); // Were requested that a disabled text field will not show the Enter Value
                aParentCells[4].setEnabled(true); // DefaultValue field
                aParentCells[4].setPlaceholder(this.sEnterValuePlaceHolder);
                aParentCells[3].setEnabled(false); // IsRegularExpression check-box field
                aParentCells[3].setChecked(false);
            }
        },

        addRow: function() {
            var oView = this.getView();
            var oModel = oView.getModel();
            var rows = oModel.getProperty('/config/rows');

            // Init a row template for adding new empty row to the params table (mapping signature)
            var newParamRow = sap.ushell.components.tiles.utils.getEmptyRowObj();
            rows.push(newParamRow);
            oModel.setProperty('/config/rows', rows);
        },

        deleteRow: function() {
            var oView = this.getView();
            var oModel = oView.getModel();
            var rows = oModel.getProperty('/config/rows');

            var table = oView.byId("mappingSignatureTable");
            var aSelectedItemsIndexes = table.getSelectedIndices();
            var aSortedDescending = aSelectedItemsIndexes.sort(function(a, b) {
                return b - a;
            }).slice();

            for (var i = 0; i < aSortedDescending.length; i++) {
                table.removeSelectionInterval(aSortedDescending[i], aSortedDescending[i]);// Make sure to turn off the selection or it will pass to
                // the next row.
                rows.splice(aSortedDescending[i], 1); // There is a major assumption here that the index in the model is identical to the index in
                // the table !!!
            }
            oModel.setProperty('/config/rows', rows);
        },
        // Will be called on change event of the name column in Parameters table.
        // 2 parameters cannot have the same name. (in case the user decide to ignore the error message, there is a second validation on the save)
        checkDuplicateNames: function(changeEvent) {

            var oModel = this.getView().getModel();
            var rows = oModel.getProperty('/config/rows');
            var nameCol = sap.ui.getCore().byId(changeEvent.getParameter('id'));
            var sNewValue = changeEvent.getParameter('newValue');

            if (sNewValue != "" && !(/^[\w-]+$/.test(sNewValue))) {
                nameCol.setValueState(sap.ui.core.ValueState.Error);
                sap.m.MessageBox.alert(this.sInvalidParmMsg, this.focusNameField.bind(nameCol), this.sDuplicateErrorTitle);
            }
            if (sap.ushell.components.tiles.utils.tableHasDuplicateParameterNames(rows)) {
                nameCol.setValueState(sap.ui.core.ValueState.Error);
                sap.m.MessageBox.alert(this.sDuplicateErrorMsg, this.focusNameField.bind(nameCol), this.sDuplicateErrorTitle);
            } else {
                nameCol.setValueState(sap.ui.core.ValueState.None);
            }
        },
        // a callback function for the duplicate error MessageBox
        focusNameField: function() {
            this.focus();
        },

        // forward value helper request to utils
        onValueHelpRequest: function(oEvent) {
            // Third parameter is to differentiate whether it's Tile Actions icon field or general icon field. If it's true, then it's tile actions
            // icon field, else general icon field.
            sap.ushell.components.tiles.utils.objectSelectOnValueHelpRequest(this, oEvent, false);
        },
        onActionValueHelpRequest: function(oEvent) {
            sap.ushell.components.tiles.utils.actionSelectOnValueHelpRequest(this, oEvent);
        },
        onRoleValueHelpRequest: function(oEvent) {
            sap.ushell.components.tiles.utils.roleSelectOnValueHelpRequest(this, oEvent);
        },
        onInstanceValueHelpRequest: function(oEvent) {
            sap.ushell.components.tiles.utils.instanceSelectOnValueHelpRequest(this, oEvent);
        },
        instanceSuggest: function(oEvent) {
            sap.ushell.components.tiles.utils.instanceSuggest(this, oEvent);
        },
        aliasSuggest: function(oEvent) {
            sap.ushell.components.tiles.utils.aliasSuggest(this, oEvent);
        },
        onAliasValueHelpRequest: function(oEvent) {
            sap.ushell.components.tiles.utils.applicationAliasSelectOnValueHelpRequest(this, oEvent);
        },
        onFormFactorChange: function() {
            var oModel = this.getView().getModel();
            oModel.setProperty('/config/formFactorConfigDefault', false);
        },

        // Will be called on change event of the application type radio buttons.
        onApplicationTypeChange: function(oEvent) {
            var oParameter = oEvent.getParameters();
            if (oParameter.selectedItem) {
                sap.ushell.components.tiles.utils.displayApplicationTypeFields(oParameter.selectedItem.getKey(), this.getView());
            }
        }
    });
}());

}; // end of sap/ushell/components/tiles/action/Configuration.controller.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.applauncher.Configuration.controller') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.applauncher.Configuration.controller');
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap */

    
    sap.ui.controller("sap.ushell.components.tiles.applauncher.Configuration", {

        // checks given inputs
        onConfigurationInputChange: function (oControlEvent) {
            sap.ushell.components.tiles.utils.checkInput(this.getView(), oControlEvent);
        },
        // default semantic objects for static applauncher: blank
        aDefaultObjects : [{obj: "", name: ""}],
        onInit: function () {
            var oView = this.getView(),
                oTargetUrl = oView.byId("targetUrl"),
                oSemanticObjectSelector = oView.byId("navigation_semantic_objectInput"),
                oActionSelector = oView.byId("navigation_semantic_actionInput"),
                oResourceModel = sap.ushell.components.tiles.utils.getResourceBundleModel();

            oView.setModel(oResourceModel, "i18n");
            var oBundle = oResourceModel.getResourceBundle();
            // set view name for identification in utils
            oView.setViewName("sap.ushell.components.tiles.applauncher.Configuration");
            sap.ushell.components.tiles.utils.createSemanticObjectModel(this, oSemanticObjectSelector, this.aDefaultObjects);
            sap.ushell.components.tiles.utils.createActionModel(this, oActionSelector);

            // make sure that the chose object is written back to the configuration
            oSemanticObjectSelector.attachChange(function (oControlEvent) {
                var sValue = oControlEvent.getSource().getValue();
                oView.getModel().setProperty("/config/navigation_semantic_object", sValue);
            });

            // toggle editable property of targetURL input field depending on navigation_use_semantic_object
            function targetUrlVisibilityFormatter(bUseLaunchpad) {
                return !bUseLaunchpad;
            }
            oTargetUrl.bindProperty("enabled", {
                formatter: targetUrlVisibilityFormatter,
                path: "/config/navigation_use_semantic_object"
            });
            //Adding list items URL and Intent to the Target Type in Tile Actions section
            var oItem = new sap.ui.core.ListItem({text:oBundle.getText("configuration.tile_actions.table.target_type.url")});
            oView.byId("targetTypeCB").addItem(oItem);
            oItem = new sap.ui.core.ListItem({text:oBundle.getText("configuration.tile_actions.table.target_type.intent")});
            oView.byId("targetTypeCB").addItem(oItem);

        },

        onAfterRendering: function(){
//            sap.ushell.components.tiles.utils.updateTooltipForDisabledProperties(this.getView());
            sap.ushell.components.tiles.utils.updateMessageStripForOriginalLanguage(this.getView());
        },

        // forward semantic object value helper request to utils
        onValueHelpRequest : function (oEvent) {
            //Third parameter is to differentiate whether it's Tile Actions icon field or general icon field. If it's true, then it's tile actions icon field, else general icon field.
            sap.ushell.components.tiles.utils.objectSelectOnValueHelpRequest(this, oEvent, false);
        },
        // forward semantic action value helper request to utils
        onActionValueHelpRequest : function (oEvent) {
            //Third parameter is to differentiate whether it's Tile Actions icon field or general icon field. If it's true, then it's tile actions icon field, else general icon field.
            sap.ushell.components.tiles.utils.actionSelectOnValueHelpRequest(this, oEvent, false);
        },
        // change handler for check box
        onCheckBoxChange : function (oEvent) {
            var oView = this.getView(),
                oSemanticObjectSelector = oView.byId("navigation_semantic_objectInput"),
                oModel = oSemanticObjectSelector.getModel(),
                value = oEvent.getSource().getSelected();
            oModel.setProperty("/enabled", value);
            sap.ushell.components.tiles.utils.checkInput(this.getView(), oEvent);
        },
        // forward icon value help request to utils
        onIconValueHelpRequest : function (oEvent) {
            //Third parameter is to differentiate whether it's Tile Actions icon field or general icon field. If it's true, then it's tile actions icon field, else general icon field.
            sap.ushell.components.tiles.utils.iconSelectOnValueHelpRequest(this, oEvent, false);
        },
        // forward icon close request to utils
        onSelectIconClose: function () {
            sap.ushell.components.tiles.utils.onSelectIconClose(this.getView());
        },
        // forward icon ok to utils
        onSelectIconOk: function () {
            sap.ushell.components.tiles.utils.onSelectIconOk(this.getView());
        },
      //This function applies table logic for the Action according to the Target Type:
        //if Taregt Type is URL, then Action field should be disabled else if it's Intent, then the Action field should be enabled.
        handleTargetTypeChange : function(oTargetTypeComboBox){
            sap.ushell.components.tiles.utils.onTargetTypeChange(oTargetTypeComboBox);
        },

        //forward tile actions semantic object value helper request to utils
        onTileActionValueHelp : function (oEvent) {
            //Third parameter is to differentiate whether it's Tile Actions icon field or general icon field. If it's true, then it's tile actions icon field, else general icon field.
            sap.ushell.components.tiles.utils.objectSelectOnValueHelpRequest(this, oEvent, true);
        },

        //forward icon value help request to utils
        onTileActionIconValueHelp : function (oEvent) {
            //Third parameter is to differentiate whether it's Tile Actions icon field or general icon field. If it's true, then it's tile actions icon field, else general icon field.
            sap.ushell.components.tiles.utils.iconSelectOnValueHelpRequest(this, oEvent, true);
        },
      //adds new row in the tile actions table
        addRow : function(){
            sap.ushell.components.tiles.utils.addTileActionsRow(this.getView());
        },
        //delets row in the tile actions table
        deleteRow : function(){
            sap.ushell.components.tiles.utils.deleteTileActionsRow(this.getView());
        }
    });
}());

}; // end of sap/ushell/components/tiles/applauncher/Configuration.controller.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.applauncher.StaticTile.controller') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.applauncher.StaticTile.controller');
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
(function () {
    "use strict";
    /*global document, jQuery, sap, hasher */
    sap.ui.getCore().loadLibrary("sap.m");
    jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

    

    sap.ui.controller("sap.ushell.components.tiles.applauncher.StaticTile", {

        onInit : function () {
            var oStaticTileView = this.getView(),
                oViewData = oStaticTileView.getViewData(),
                oTileApi = oViewData.chip, // instance specific CHIP API
                oConfig = sap.ushell.components.tiles.utils.getConfiguration(oTileApi, oTileApi.configurationUi.isEnabled(), false),
                oModel,
                sKeywords,
                aKeywords,
                that = this,
                sNavigationTargetUrl = oConfig.navigation_target_url,
                sSystem;

            sSystem = oTileApi.url.getApplicationSystem();
            if (sSystem) { // propagate system to target application
                sNavigationTargetUrl += ((sNavigationTargetUrl.indexOf("?") < 0) ? "?" : "&")
                    + "sap-system=" + sSystem;
            }
            this.navigationTargetUrl = sNavigationTargetUrl;
            /*
             * Model of the applauncher tile consisting of config (tile configuration), nav (target URL set to '' in case of Admin UI), and search (highlight terms)
             */
            oModel = new sap.ui.model.json.JSONModel({
                config : oConfig,
                nav: {navigation_target_url: (oTileApi.configurationUi && oTileApi.configurationUi.isEnabled() ? "" : sNavigationTargetUrl)},
                search: {
                    display_highlight_terms: []
                }
            });
            oStaticTileView.setModel(oModel);

            // implement types contact
            // default is Tile
            var oTileControl = this.getView().getTileControl();
            this.getView().addContent(oTileControl);
            if (oTileApi.types) {
                oTileApi.types.attachSetType(function (sType) {
                    if (sType === 'link') {
                        that.getView().removeAllContent();
                        var oLinkControl = that.getView().getLinkControl();
                        that.getView().addContent(oLinkControl);
                    } else {
                        that.getView().removeAllContent();
                        var oTileControl = that.getView().getTileControl();
                        that.getView().addContent(oTileControl);
                    }
                });
            }

            // implement search contract
            if (oTileApi.search) {
                // split and clean keyword string (may be comma + space delimited)
                sKeywords = oStaticTileView.getModel().getProperty("/config/display_search_keywords");
                aKeywords = jQuery.grep(sKeywords.split(/[, ]+/), function (n, i) { return n && n !== ""; });
                // defined in search contract:
                oTileApi.search.setKeywords(aKeywords);
                oTileApi.search.attachHighlight(
                    function (aHighlightWords) {
                        oStaticTileView.getModel().setProperty("/search/display_highlight_terms", aHighlightWords);
                    }
                );
            }

            // implement preview contract
            if (oTileApi.preview) {
                oTileApi.preview.setTargetUrl(sNavigationTargetUrl);
                oTileApi.preview.setPreviewIcon(oConfig.display_icon_url);
                oTileApi.preview.setPreviewTitle(oConfig.display_title_text);
            }

            // implement configurationUi contract: setup configuration UI
            if (oTileApi.configurationUi.isEnabled()) {
                oTileApi.configurationUi.setUiProvider(function () {
                    // attach configuration UI provider, which is essentially a components.tiles.applauncher.Configuration
                    var oConfigurationUi = sap.ushell.components.tiles.utils.getConfigurationUi(oStaticTileView, "sap.ushell.components.tiles.applauncher.Configuration");
                    oTileApi.configurationUi.attachCancel(that.onCancelConfiguration.bind(null, oConfigurationUi));
                    oTileApi.configurationUi.attachSave(that.onSaveConfiguration.bind(null, oConfigurationUi));
                    return oConfigurationUi;
                });

                this.getView().getContent()[0].setTooltip(
                        sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle()
                        .getText("edit_configuration.tooltip")
                );
            }

            // attach the tile actions provider for the actions contract
            if (oTileApi.actions) {
                //TODO check new property name with designer dudes
                var aActions = oConfig.actions, aExtendedActions;
                if (aActions) {
                    aExtendedActions = aActions.slice();
                } else {
                    aExtendedActions = [];
                }

                var tileSettingsAction = sap.ushell.components.tiles.utils.getTileSettingsAction(oModel, this.onSaveRuntimeSettings.bind(this));
                aExtendedActions.push(tileSettingsAction);

                oTileApi.actions.setActionsProvider(function (){
                    return aExtendedActions;
                });
            }


        },
        // trigger to show the configuration UI if the tile is pressed in Admin mode
        onPress: function (oEvent) {
            var oStaticTileView = this.getView(),
                oViewData = oStaticTileView.getViewData(),
                oTileApi = oViewData.chip;

            if (oTileApi.configurationUi.isEnabled()) {
                oTileApi.configurationUi.display();
            } else if (this.navigationTargetUrl){
                if (this.navigationTargetUrl[0] === '#') {
                    hasher.setHash(this.navigationTargetUrl);
                } else {
                    window.open(this.navigationTargetUrl, '_blank');
                }
            }
        },
     // tile settings action UI save handler
        onSaveRuntimeSettings: function(oSettingsView) {
            var oViewModel = oSettingsView.getModel(),
                oTileApi = this.getView().getViewData().chip,
                oConfigToSave = this.getView().getModel().getProperty("/config");

            oConfigToSave.display_title_text = oViewModel.getProperty('/title');
            oConfigToSave.display_subtitle_text = oViewModel.getProperty('/subtitle');
            oConfigToSave.display_info_text = oViewModel.getProperty('/info');
            oConfigToSave.display_search_keywords = oViewModel.getProperty('/keywords');

            // use bag contract in order to store translatable properties
            var tilePropertiesBag = oTileApi.bag.getBag('tileProperties');
            tilePropertiesBag.setText('display_title_text',       oConfigToSave.display_title_text);
            tilePropertiesBag.setText('display_subtitle_text',    oConfigToSave.display_subtitle_text);
            tilePropertiesBag.setText('display_info_text',        oConfigToSave.display_info_text);
            tilePropertiesBag.setText('display_search_keywords',  oConfigToSave.display_search_keywords);

            function logErrorAndReject(oError) {
                jQuery.sap.log.error(oError, null, "sap.ushell.components.tiles.applauncher.StaticTile.controller");
            }

            // saving the relevant properteis
            tilePropertiesBag.save(
                    // success handler
                function () {
                    jQuery.sap.log.debug("property bag 'tileProperties' saved successfully");

                    // update tile's model
                    this.getView().getModel().setProperty('/config/display_title_text',      oConfigToSave.display_title_text);
                    this.getView().getModel().setProperty('/config/display_subtitle_text',   oConfigToSave.display_subtitle_text);
                    this.getView().getModel().setProperty('/config/display_info_text',       oConfigToSave.display_info_text);
                    this.getView().getModel().setProperty('/config/display_search_keywords', oConfigToSave.display_search_keywords);

                    // call to refresh model which (due to the binding) will refresh the tile
                    this.getView().getModel().refresh();
                }.bind(this),
                logErrorAndReject // error handler
            );
        },
        // configuration save handler
        onSaveConfiguration: function (oConfigurationView) {
            var
                // the deferred object required from the configurationUi contract
                oDeferred = jQuery.Deferred(),
                oModel = oConfigurationView.getModel(),
                // tile model placed into configuration model by getConfigurationUi
                oTileModel = oModel.getProperty("/tileModel"),
                oTileApi = oConfigurationView.getViewData().chip,
                aTileNavigationActions = sap.ushell.components.tiles.utils.tileActionsRows2TileActionsArray(oModel.getProperty("/config/tile_actions_rows")),
                // get the configuration to save from the model
                configToSave = {
                    display_icon_url : oModel.getProperty("/config/display_icon_url"),
                    navigation_use_semantic_object : oModel.getProperty("/config/navigation_use_semantic_object"),
                    navigation_target_url : oModel.getProperty("/config/navigation_target_url"),
                    navigation_semantic_object : jQuery.trim(oModel.getProperty("/config/navigation_semantic_object")) || "",
                    navigation_semantic_action : jQuery.trim(oModel.getProperty("/config/navigation_semantic_action")) || "",
                    navigation_semantic_parameters : jQuery.trim(oModel.getProperty("/config/navigation_semantic_parameters")),
                    display_search_keywords: oModel.getProperty("/config/display_search_keywords")
                };
            //If the input fields icon, semantic object and action are failing the input validations, then through an error message requesting the user to enter/correct those fields
            var bReject = sap.ushell.components.tiles.utils.checkInputOnSaveConfig(oConfigurationView);
            if (bReject) {
                oDeferred.reject("mandatory_fields_missing");
                return oDeferred.promise();
            }
            // overwrite target URL in case of semantic object navigation
            if (configToSave.navigation_use_semantic_object) {
                configToSave.navigation_target_url = sap.ushell.components.tiles.utils.getSemanticNavigationUrl(configToSave);
                oModel.setProperty("/config/navigation_target_url", configToSave.navigation_target_url);
            }

            // use bag in order to store translatable properties
            var tilePropertiesBag = oTileApi.bag.getBag('tileProperties');
            tilePropertiesBag.setText('display_title_text', oModel.getProperty("/config/display_title_text"));
            tilePropertiesBag.setText('display_subtitle_text', oModel.getProperty("/config/display_subtitle_text"));
            tilePropertiesBag.setText('display_info_text', oModel.getProperty("/config/display_info_text"));
            tilePropertiesBag.setText('display_search_keywords', configToSave.display_search_keywords);

            var tileNavigationActionsBag = oTileApi.bag.getBag('tileNavigationActions');
            //forward populating of tile navigation actions array into the bag, to Utils
            sap.ushell.components.tiles.utils.populateTileNavigationActionsBag(tileNavigationActionsBag, aTileNavigationActions);

            function logErrorAndReject(oError, oErrorInfo) {
                jQuery.sap.log.error(oError, null, "sap.ushell.components.tiles.applauncher.StaticTile.controller");
                oDeferred.reject(oError, oErrorInfo);
            }

            // use configuration contract to write parameter values
            oTileApi.writeConfiguration.setParameterValues(
                {tileConfiguration : JSON.stringify(configToSave)},
                // success handler
                function () {
                    var oConfigurationConfig = sap.ushell.components.tiles.utils.getConfiguration(oTileApi, false, false),
                        oTileConfig = sap.ushell.components.tiles.utils.getConfiguration(oTileApi, true, false),
                        // switching the model under the tile -> keep the tile model
                        oModel = new sap.ui.model.json.JSONModel({
                            config : oConfigurationConfig,
                            // set empty target url in configuration mode
                            nav: {navigation_target_url: ""},
                            // keep tile model
                            tileModel: oTileModel
                        });
                    oConfigurationView.setModel(oModel);
                    // update tile model
                    oTileModel.setData({config: oTileConfig, nav: {navigation_target_url: ""}}, false);

                    // update tile model
                    if (oTileApi.preview) {
                        oTileApi.preview.setTargetUrl(oConfigurationConfig.navigation_target_url);
                        oTileApi.preview.setPreviewIcon(oConfigurationConfig.display_icon_url);
                        oTileApi.preview.setPreviewTitle(oConfigurationConfig.display_title_text);
                    }

                    tilePropertiesBag.save(
                        // success handler
                        function () {
                            jQuery.sap.log.debug("property bag 'tileProperties' saved successfully");
                            // update possibly changed values via contracts
                            if (oTileApi.title) {
                                oTileApi.title.setTitle(
                                    configToSave.display_title_text,
                                    // success handler
                                    function () {
                                        oDeferred.resolve();
                                    },
                                    logErrorAndReject // error handler
                                );
                            } else {
                                oDeferred.resolve();
                            }
                        },
                        logErrorAndReject // error handler
                    );

                    tileNavigationActionsBag.save(
                            // success handler
                            function () {
                                jQuery.sap.log.debug("property bag 'navigationProperties' saved successfully");
                            },
                            logErrorAndReject // error handler
                    );
                },
                logErrorAndReject // error handler
            );

            return oDeferred.promise();
        },

        // configuration cancel handler
        onCancelConfiguration: function (oConfigurationView) {
            // re-load old configuration and display
            var oViewData = oConfigurationView.getViewData(),
                oModel = oConfigurationView.getModel(),
                // tile model placed into configuration model by getConfigurationUi
                oTileModel = oModel.getProperty("/tileModel"),
                oTileApi = oViewData.chip,

                oCurrentConfig = sap.ushell.components.tiles.utils.getConfiguration(oTileApi, oTileApi.configurationUi.isEnabled(), false);

            oConfigurationView.getModel().setData({
                config: oCurrentConfig,
                // set empty target url in configuration mode
                nav: {navigation_target_url: ""},
                tileModel: oTileModel
            }, false);
        }
    });
}());

}; // end of sap/ushell/components/tiles/applauncher/StaticTile.controller.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.applauncherdynamic.Configuration.controller') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.applauncherdynamic.Configuration.controller');
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap */

    
    sap.ui.controller("sap.ushell.components.tiles.applauncherdynamic.Configuration", {

        // checks given inputs
        onConfigurationInputChange: function (oControlEvent) {
            sap.ushell.components.tiles.utils.checkInput(this.getView(), oControlEvent);
        },
        // default semantic objects for dynamic applauncher: blank
        aDefaultObjects : [{obj: "", name: ""}],
        onInit: function () {
            var oView = this.getView(),
                oSemanticObjectSelector = oView.byId("navigation_semantic_objectInput"),
                oActionSelector = oView.byId("navigation_semantic_actionInput"),
                oResourceModel = sap.ushell.components.tiles.utils.getResourceBundleModel();

            oView.setModel(oResourceModel, "i18n");
            var oBundle = oResourceModel.getResourceBundle();
            // set view name for identification in utils
            oView.setViewName("sap.ushell.components.tiles.applauncherdynamic.Configuration");
            sap.ushell.components.tiles.utils.createSemanticObjectModel(this, oSemanticObjectSelector, this.aDefaultObjects);
            sap.ushell.components.tiles.utils.createActionModel(this, oActionSelector, this.aDefaultObjects);

            // make sure that the chose object is written back to the configuration
            oSemanticObjectSelector.attachChange(function (oControlEvent) {
                var sValue = oControlEvent.getSource().getValue();
                oView.getModel().setProperty("/config/navigation_semantic_object", sValue);
            });
            oActionSelector.attachChange(function (oControlEvent) {
                var sValue = oControlEvent.getSource().getValue();
                oView.getModel().setProperty("/config/navigation_semantic_action", sValue);
            });
            // toggle editable property of targetURL input field depending on navigation_use_semantic_object
            oView.byId("targetUrl").bindProperty("enabled", {
                formatter: function (bUseLaunchpad) {
                    return !bUseLaunchpad;
                },
                path: "/config/navigation_use_semantic_object"
            });
            //Adding list items URL and Intent to the Target Type in Tile Actions section
            var oItem = new sap.ui.core.ListItem({text:oBundle.getText("configuration.tile_actions.table.target_type.url")});
            oView.byId("targetTypeCB").addItem(oItem);
            oItem = new sap.ui.core.ListItem({text:oBundle.getText("configuration.tile_actions.table.target_type.intent")});
            oView.byId("targetTypeCB").addItem(oItem);

        },

        onAfterRendering: function(){
//            sap.ushell.components.tiles.utils.updateTooltipForDisabledProperties(this.getView());
            sap.ushell.components.tiles.utils.updateMessageStripForOriginalLanguage(this.getView());
        },

        // forward semantic object value helper request to utils
        onValueHelpRequest : function (oEvent) {
            //Third parameter is to differentiate whether it's Tile Actions icon field or general icon field. If it's true, then it's tile actions icon field, else general icon field.
            sap.ushell.components.tiles.utils.objectSelectOnValueHelpRequest(this, oEvent, false);
        },
        // forward semantic action value helper request to utils
        onActionValueHelpRequest : function (oEvent) {
            //Third parameter is to differentiate whether it's Tile Actions icon field or general icon field. If it's true, then it's tile actions icon field, else general icon field.
            sap.ushell.components.tiles.utils.actionSelectOnValueHelpRequest(this, oEvent, false);
        },
        // change handler for check box
        onCheckBoxChange : function (oEvent) {
            var oView = this.getView(),
                oSemanticObjectSelector = oView.byId("navigation_semantic_objectInput"),
                oModel = oSemanticObjectSelector.getModel(),
                value = oEvent.getSource().getSelected();
            oModel.setProperty("/enabled", value);
            sap.ushell.components.tiles.utils.checkInput(this.getView(), oEvent);
        },
        // forward icon value help request to utils
        onIconValueHelpRequest : function (oEvent) {
            //Third parameter is to differentiate whether it's Tile Actions icon field or general icon field. If it's true, then it's tile actions icon field, else general icon field.
            sap.ushell.components.tiles.utils.iconSelectOnValueHelpRequest(this, oEvent, false);
        },
        // forward icon close request to utils
        onSelectIconClose: function () {
            sap.ushell.components.tiles.utils.onSelectIconClose(this.getView());
        },
        // forward icon ok to utils
        onSelectIconOk: function () {
            sap.ushell.components.tiles.utils.onSelectIconOk(this.getView());
        },
        //This function applies table logic for the Action according to the Target Type:
        //if Taregt Type is URL, then Action field should be disabled else if it's Intent, then the Action field should be enabled.
        handleTargetTypeChange : function(oTargetTypeComboBox){
            sap.ushell.components.tiles.utils.onTargetTypeChange(oTargetTypeComboBox);
        },
        //forward tile actions semantic object value helper request to utils
        onTileActionValueHelp : function (oEvent) {
            //Third parameter is to differentiate whether it's Tile Actions icon field or general icon field. If it's true, then it's tile actions icon field, else general icon field.
            sap.ushell.components.tiles.utils.objectSelectOnValueHelpRequest(this, oEvent, true);
        },
        //forward icon value help request to utils
        onTileActionIconValueHelp : function (oEvent) {
            //Third parameter is to differentiate whether it's Tile Actions icon field or general icon field. If it's true, then it's tile actions icon field, else general icon field.
            sap.ushell.components.tiles.utils.iconSelectOnValueHelpRequest(this, oEvent, true);
        },
        //adds new row in the tile actions table
        addRow : function(){
            sap.ushell.components.tiles.utils.addTileActionsRow(this.getView());
        },
        //delets row in the tile actions table
        deleteRow : function(){
            sap.ushell.components.tiles.utils.deleteTileActionsRow(this.getView());
        }
    });
}());

}; // end of sap/ushell/components/tiles/applauncherdynamic/Configuration.controller.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.applauncherdynamic.DynamicTile.controller') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.applauncherdynamic.DynamicTile.controller');
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, OData, sap, setTimeout, hasher */
    sap.ui.getCore().loadLibrary("sap.m");
    jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.thirdparty.datajs'); // unlisted dependency retained

    

    sap.ui.controller("sap.ushell.components.tiles.applauncherdynamic.DynamicTile", {
        // handle to control/cancel browser's setTimeout()
        timer : null,
        // handle to control/cancel data.js OData.read()
        oDataRequest : null,
        onInit : function () {
            var oView = this.getView(),
                oViewData = oView.getViewData(),
                oTileApi = oViewData.chip,
                oConfig = sap.ushell.components.tiles.utils.getConfiguration(oTileApi, oTileApi.configurationUi.isEnabled(), false),
                oModel,
                sKeywords,
                aKeywords,
                that = this,
                sNavigationTargetUrl = oConfig.navigation_target_url,
                sSystem;

            sSystem = oTileApi.url.getApplicationSystem();
            if (sSystem) { // propagate system to target application
                sNavigationTargetUrl += ((sNavigationTargetUrl.indexOf("?") < 0) ? "?" : "&")
                + "sap-system=" + sSystem;
            }
            this.navigationTargetUrl = sNavigationTargetUrl;
            /*
             * Model of the applauncher tile consisting of
             *          config (tile configuration),
             *          data (dyanmic data read from a data source)
             *          nav (target URL set to '' in case of Admin UI), and
             *          search (highlight terms)
             */
            oModel = new sap.ui.model.json.JSONModel({
                config: oConfig,
                data: sap.ushell.components.tiles.utils.getDataToDisplay(oConfig, {
                    number: (oTileApi.configurationUi.isEnabled() ? 1234 : "...")
                }),
                nav: {navigation_target_url: (oTileApi.configurationUi && oTileApi.configurationUi.isEnabled() ? "" : sNavigationTargetUrl)},
                search: {
                    display_highlight_terms: []
                }
            });
            oView.setModel(oModel);

            // implement types contact
            // default is Tile
            var oTileControl = this.getView().getTileControl();
            this.getView().addContent(oTileControl);
            if (oTileApi.types) {
                oTileApi.types.attachSetType(function (sType) {
                    if (sType === 'link') {
                        that.getView().removeAllContent();
                        var oLinkControl = that.getView().getLinkControl();
                        that.getView().addContent(oLinkControl);
                    } else {
                        that.getView().removeAllContent();
                        var oTileControl = that.getView().getTileControl();
                        that.getView().addContent(oTileControl);
                    }
                });
            }

            // implement search contract
            if (oTileApi.search) {
                // split and clean keyword string (may be comma + space delimited)
                sKeywords = oView.getModel().getProperty("/config/display_search_keywords");
                aKeywords = jQuery.grep(sKeywords.split(/[, ]+/), function (n, i) { return n && n !== ""; });
                // defined in search contract:
                oTileApi.search.setKeywords(aKeywords);
                oTileApi.search.attachHighlight(
                    function (aHighlightWords) {
                        // update model for highlighted search term
                        oView.getModel().setProperty("/search/display_highlight_terms", aHighlightWords);
                    }
                );
            }

            // implement preview contract
            if (oTileApi.preview) {
                oTileApi.preview.setTargetUrl(sNavigationTargetUrl);
                oTileApi.preview.setPreviewIcon(oConfig.display_icon_url);
                oTileApi.preview.setPreviewTitle(oConfig.display_title_text);
            }

            // implement refresh contract
            if (oTileApi.refresh) {
                oTileApi.refresh.attachRefresh(this.refreshHandler.bind(null, this));
            }

            // attach the refresh handler also for the visible contract, as we would like
            // on setting visible to true, to directly go and call the oData call
            if (oTileApi.visible) {
                oTileApi.visible.attachVisible(this.visibleHandler.bind(this));
            }

            // implement configurationUi contract: setup configuration UI
            if (oTileApi.configurationUi.isEnabled()) {
                oTileApi.configurationUi.setUiProvider(function () {
                    // attach configuration UI provider, which is essentially a components.tiles.dynamicapplauncher.Configuration
                    var oConfigurationUi = sap.ushell.components.tiles.utils.getConfigurationUi(oView, "sap.ushell.components.tiles.applauncherdynamic.Configuration");
                    oTileApi.configurationUi.attachCancel(that.onCancelConfiguration.bind(null, oConfigurationUi));
                    oTileApi.configurationUi.attachSave(that.onSaveConfiguration.bind(null, oConfigurationUi));
                    return oConfigurationUi;
                });

                this.getView().getContent()[0].setTooltip(
                    sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle()
                        .getText("edit_configuration.tooltip")
                );
            } else {
                if (!oTileApi.preview || !oTileApi.preview.isEnabled()) {
                    if (!sSystem) {
                        sap.ushell.Container.addRemoteSystemForServiceUrl(oConfig.service_url);
                    } // else registration is skipped because registration has been done already
                      // outside this controller (e.g. remote catalog registration)

                    // start fetching data from backend service if not in preview or admin mode
                    this.onUpdateDynamicData();
                }
            }

            // attach the tile actions provider for the actions contract
            if (oTileApi.actions) {
                //TODO check new property name with designer dudes
                var aActions = oConfig.actions, aExtendedActions;
                if (aActions) {
                    aExtendedActions = aActions.slice();
                } else {
                    aExtendedActions = [];
                }

                var tileSettingsAction = sap.ushell.components.tiles.utils.getTileSettingsAction(oModel, this.onSaveRuntimeSettings.bind(this));
                aExtendedActions.push(tileSettingsAction);

                oTileApi.actions.setActionsProvider(function (){
                    return aExtendedActions;
                });
            }

        },
        // convenience function to stop browser's timeout and OData calls
        stopRequests: function () {
            if (this.timer) {
                clearTimeout(this.timer);
            }
            if (this.oDataRequest) {
                try {
                    this.oDataRequest.abort();
                }catch (e){
                    jQuery.sap.log.warning(e.name,e.message);
                }
            }
        },
        // destroy handler stops requests
        onExit: function () {
            this.stopRequests();
        },
        // trigger to show the configuration UI if the tile is pressed in Admin mode
        onPress: function () {
            var oView = this.getView(),
                oViewData = oView.getViewData(),
                oModel = oView.getModel(),
                sTargetUrl = oModel.getProperty("/nav/navigation_target_url"),
                oTileApi = oViewData.chip;
            if (oTileApi.configurationUi.isEnabled()) {
                oTileApi.configurationUi.display();
            } else if (sTargetUrl) {
                if (sTargetUrl[0] === '#') {
                    hasher.setHash(sTargetUrl);
                } else {
                    window.open(sTargetUrl, '_blank');
                }
            }
        },
        // dynamic data updater
        onUpdateDynamicData: function () {
            var oView = this.getView(),
                oConfig = oView.getModel().getProperty("/config"),
                nservice_refresh_interval = oConfig.service_refresh_interval;
            if (!nservice_refresh_interval) {
                nservice_refresh_interval = 0;
            } else if (nservice_refresh_interval < 10) {
                // log in English only
                jQuery.sap.log.warning(
                    "Refresh Interval " + nservice_refresh_interval
                    + " seconds for service URL " + oConfig.service_url
                    + " is less than 10 seconds, which is not supported. "
                    + "Increased to 10 seconds automatically.",
                    null,
                    "sap.ushell.components.tiles.applauncherdynamic.DynamicTile.controller"
                );
                nservice_refresh_interval = 10;
            }
            if (oConfig.service_url) {
                this.loadData(nservice_refresh_interval);
            }
        },
        extractData : function (oData) {
            var name,
                aKeys = ["results", "icon", "title", "number", "numberUnit", "info", "infoState", "infoStatus", "targetParams", "subtitle", "stateArrow", "numberState", "numberDigits", "numberFactor"];

            if (typeof oData === "object" && Object.keys(oData).length === 1) {
                name = Object.keys(oData)[0];
                if (jQuery.inArray(name, aKeys) === -1) {
                    return oData[name];
                }
            }
            return oData;
        },
        // tile settings action UI save handler
        onSaveRuntimeSettings: function (oSettingsView) {
            var
                oViewModel = oSettingsView.getModel(),
                oTileApi = this.getView().getViewData().chip,
                oConfigToSave = this.getView().getModel().getProperty("/config");

            oConfigToSave.display_title_text = oViewModel.getProperty('/title');
            oConfigToSave.display_subtitle_text = oViewModel.getProperty('/subtitle');
            oConfigToSave.display_info_text = oViewModel.getProperty('/info');
            oConfigToSave.display_search_keywords = oViewModel.getProperty('/keywords');

            // use bag contract in order to store translatable properties
            var tilePropertiesBag = oTileApi.bag.getBag('tileProperties');
            tilePropertiesBag.setText('display_title_text',       oConfigToSave.display_title_text);
            tilePropertiesBag.setText('display_subtitle_text',    oConfigToSave.display_subtitle_text);
            tilePropertiesBag.setText('display_info_text',        oConfigToSave.display_info_text);
            tilePropertiesBag.setText('display_search_keywords',  oConfigToSave.display_search_keywords);

            function logErrorAndReject(oError) {
                jQuery.sap.log.error(oError, null, "sap.ushell.components.tiles.applauncherdynamic.DynamicTile.controller");
            }

            // saving the relevant properteis
            tilePropertiesBag.save(
                // success handler
                function () {
                    jQuery.sap.log.debug("property bag 'tileProperties' saved successfully");

                    // update the local tile's config - saving changes on the Model
                    this.getView().getModel().setProperty("/config", oConfigToSave);

                    // update tile's model for changes to appear immediately
                    // (and not wait for the refresh handler which happens every 10 seconds)
                    this.getView().getModel().setProperty('/data/display_title_text',     oConfigToSave.display_title_text);
                    this.getView().getModel().setProperty('/data/display_subtitle_text',  oConfigToSave.display_subtitle_text);
                    this.getView().getModel().setProperty('/data/display_info_text',      oConfigToSave.display_info_text);

                    // call to refresh model which (due to the binding) will refresh the tile
                    this.getView().getModel().refresh();
                }.bind(this),
                logErrorAndReject // error handler
            );
        },
        // configuration save handler
        onSaveConfiguration: function (oConfigurationView) {
            var
            // the deferred object required from the configurationUi contract
                oDeferred = jQuery.Deferred(),
                oModel = oConfigurationView.getModel(),
            // tile model placed into configuration model by getConfigurationUi
                oTileModel = oModel.getProperty("/tileModel"),
                oTileApi = oConfigurationView.getViewData().chip,
                aTileNavigationActions = sap.ushell.components.tiles.utils.tileActionsRows2TileActionsArray(oModel.getProperty("/config/tile_actions_rows")),
            // get the configuration to save from the model
                configToSave = {
                    display_icon_url : oModel.getProperty("/config/display_icon_url"),
                    display_number_unit : oModel.getProperty("/config/display_number_unit"),
                    service_url: oModel.getProperty("/config/service_url"),
                    service_refresh_interval: oModel.getProperty("/config/service_refresh_interval"),
                    navigation_use_semantic_object : oModel.getProperty("/config/navigation_use_semantic_object"),
                    navigation_target_url : oModel.getProperty("/config/navigation_target_url"),
                    navigation_semantic_object : jQuery.trim(oModel.getProperty("/config/navigation_semantic_object")) || "",
                    navigation_semantic_action : jQuery.trim(oModel.getProperty("/config/navigation_semantic_action")) || "",
                    navigation_semantic_parameters : jQuery.trim(oModel.getProperty("/config/navigation_semantic_parameters")),
                    display_search_keywords: oModel.getProperty("/config/display_search_keywords")
                };
            //If the input fields icon, semantic object and action are failing the input validations, then through an error message requesting the user to enter/correct those fields
            var bReject = sap.ushell.components.tiles.utils.checkInputOnSaveConfig(oConfigurationView);
            if (bReject) {
                oDeferred.reject("mandatory_fields_missing");
                return oDeferred.promise();
            }
            // overwrite target URL in case of semantic object navigation
            if (configToSave.navigation_use_semantic_object) {
                configToSave.navigation_target_url = sap.ushell.components.tiles.utils.getSemanticNavigationUrl(configToSave);
                oModel.setProperty("/config/navigation_target_url", configToSave.navigation_target_url);
            }

            // use bag contract in order to store translatable properties
            var tilePropertiesBag = oTileApi.bag.getBag('tileProperties');
            tilePropertiesBag.setText('display_title_text', oModel.getProperty("/config/display_title_text"));
            tilePropertiesBag.setText('display_subtitle_text', oModel.getProperty("/config/display_subtitle_text"));
            tilePropertiesBag.setText('display_info_text', oModel.getProperty("/config/display_info_text"));
            tilePropertiesBag.setText('display_search_keywords', configToSave.display_search_keywords);

            var tileNavigationActionsBag = oTileApi.bag.getBag('tileNavigationActions');
            //forward populating of tile navigation actions array into the bag, to Utils
            sap.ushell.components.tiles.utils.populateTileNavigationActionsBag(tileNavigationActionsBag, aTileNavigationActions);

            function logErrorAndReject(oError, oErrorInfo) {
                jQuery.sap.log.error(oError, null, "sap.ushell.components.tiles.applauncherdynamic.DynamicTile.controller");
                oDeferred.reject(oError, oErrorInfo);
            }

            // use configuration contract to write parameter values
            oTileApi.writeConfiguration.setParameterValues(
                {tileConfiguration : JSON.stringify(configToSave)},
                // success handler
                function () {
                    var oConfigurationConfig = sap.ushell.components.tiles.utils.getConfiguration(oTileApi, false, false),
                    // get tile config data in admin mode
                        oTileConfig = sap.ushell.components.tiles.utils.getConfiguration(oTileApi, true, false),
                    // switching the model under the tile -> keep the tile model
                        oModel = new sap.ui.model.json.JSONModel({
                            config: oConfigurationConfig,
                            // keep tile model
                            tileModel: oTileModel
                        });
                    oConfigurationView.setModel(oModel);

                    // update tile model
                    oTileModel.setData({data: oTileConfig, nav: {navigation_target_url: ""}}, false);
                    if (oTileApi.preview) {
                        oTileApi.preview.setTargetUrl(oConfigurationConfig.navigation_target_url);
                        oTileApi.preview.setPreviewIcon(oConfigurationConfig.display_icon_url);
                        oTileApi.preview.setPreviewTitle(oConfigurationConfig.display_title_text);
                    }

                    tilePropertiesBag.save(
                        // success handler
                        function () {
                            jQuery.sap.log.debug("property bag 'tileProperties' saved successfully");
                            // update possibly changed values via contracts
                            if (oTileApi.title) {
                                oTileApi.title.setTitle(
                                    configToSave.display_title_text,
                                    // success handler
                                    function () {
                                        oDeferred.resolve();
                                    },
                                    logErrorAndReject // error handler
                                );
                            } else {
                                oDeferred.resolve();
                            }
                        },
                        logErrorAndReject // error handler
                    );

                    tileNavigationActionsBag.save(
                        // success handler
                        function () {
                            jQuery.sap.log.debug("property bag 'navigationProperties' saved successfully");
                        },
                        logErrorAndReject // error handler
                    );
                },
                logErrorAndReject // error handler
            );

            return oDeferred.promise();
        },

        successHandleFn: function (oResult) {
            var oConfig = this.getView().getModel().getProperty("/config");
            this.oDataRequest = undefined;
            var oData = oResult,
                oDataToDisplay;
            if (typeof oResult === "object") {
                var uriParamInlinecount = jQuery.sap.getUriParameters(oConfig.service_url).get("$inlinecount");
                if (uriParamInlinecount && uriParamInlinecount === "allpages") {
                    oData = {number: oResult.__count};
                } else {
                    oData = this.extractData(oData);
                }
            } else if (typeof oResult === "string") {
                oData = {number: oResult};
            }
            oDataToDisplay = sap.ushell.components.tiles.utils.getDataToDisplay(oConfig, oData);

            // set data to display
            this.getView().getModel().setProperty("/data", oDataToDisplay);

            // rewrite target URL
            this.getView().getModel().setProperty("/nav/navigation_target_url",
                sap.ushell.components.tiles.utils.addParamsToUrl(
                    this.navigationTargetUrl,
                    oDataToDisplay
                ));
        },

        // error handler
        errorHandlerFn: function (oMessage) {
            var oConfig = this.getView().getModel().getProperty("/config");
            this.oDataRequest = undefined;
            var sMessage = oMessage && oMessage.message ? oMessage.message : oMessage,
                oResourceBundle = sap.ushell.components.tiles.utils.getResourceBundleModel()
                    .getResourceBundle();
            if (oMessage.response) {
                sMessage += " - " + oMessage.response.statusCode + " "
                    + oMessage.response.statusText;
            }
            // log in English only
            jQuery.sap.log.error(
                "Failed to update data via service "
                    + oConfig.service_url
                    + ": " + sMessage,
                null,
                "sap.ushell.components.tiles.applauncherdynamic.DynamicTile"
            );
            this.getView().getModel().setProperty("/data",
                sap.ushell.components.tiles.utils.getDataToDisplay(oConfig, {
                    number: "???",
                    info: oResourceBundle.getText("dynamic_data.error"),
                    infoState: "Critical"
                })
            );
        },

        // configuration cancel handler
        onCancelConfiguration: function (oConfigurationView, successHandler, errorHandle) {
            // re-load old configuration and display
            var oViewData = oConfigurationView.getViewData(),
                oModel = oConfigurationView.getModel(),
            // tile model placed into configuration model by getConfigurationUi
                oTileModel = oModel.getProperty("/tileModel"),
                oTileApi = oViewData.chip,
                oCurrentConfig = sap.ushell.components.tiles.utils.getConfiguration(oTileApi, false, false);
            oConfigurationView.getModel().setData({config: oCurrentConfig, tileModel: oTileModel}, false);
        },
        // loads data from backend service
        loadData: function (nservice_refresh_interval) {
            var oDynamicTileView = this.getView(),
                oConfig = oDynamicTileView.getModel().getProperty("/config"),
                sUrl = oConfig.service_url,
                that = this;
            var oTileApi = this.getView().getViewData().chip;
            if (!sUrl) {
                return;
            }
            if (/;o=([;\/?]|$)/.test(sUrl)) { // URL has placeholder segment parameter ;o=
                sUrl = oTileApi.url.addSystemToServiceUrl(sUrl);
            }
            //set the timer if required
            if (nservice_refresh_interval > 0) {
                // log in English only
                jQuery.sap.log.info(
                    "Wait " + nservice_refresh_interval + " seconds before calling "
                    + oConfig.service_url + " again",
                    null,
                    "sap.ushell.components.tiles.applauncherdynamic.DynamicTile.controller"
                );
                // call again later
                this.timer = setTimeout(that.loadData.bind(that, nservice_refresh_interval, false), (nservice_refresh_interval * 1000));
            }

            // Verify the the Tile visibility is "true" in order to issue an oData request
            if (oTileApi.visible.isVisible() && !that.oDataRequest) {
                that.oDataRequest = OData.read(
                    {
                        requestUri: sUrl,
                        headers: {
                            "Cache-Control": "no-cache, no-store, must-revalidate",
                            "Pragma": "no-cache",
                            "Expires": "0"
                        }
                    },
                    // sucess handler
                    this.successHandleFn.bind(this),
                    this.errorHandlerFn.bind(this)
                ); // End of oData.read
            }
        },
        // loads data once if not in configuration mode
        refreshHandler: function (oDynamicTileController) {
            var oTileApi = oDynamicTileController.getView().getViewData().chip;
            if (!oTileApi.configurationUi.isEnabled()) {
                oDynamicTileController.loadData(0);
            } else {
                oDynamicTileController.stopRequests();
            }
        },

        // load data in place in case setting visibility from false to true
        // with no additional timer registered
        visibleHandler: function (isVisible) {
            if (isVisible) {
                this.refreshHandler(this);
            }
        }

    });
}());

}; // end of sap/ushell/components/tiles/applauncherdynamic/DynamicTile.controller.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.generic') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.generic');

jQuery.sap.require('sap.ui.model.analytics.odata4analytics'); // unlisted dependency retained

jQuery.sap.require('sap.ui.core.mvc.Controller'); // unlisted dependency retained

sap.ui.core.mvc.Controller.extend("sap.ushell.components.tiles.generic", {

    onAfterRendering : function () {

        var that = this;
        this.firstTimeVisible = false;
        this.oKpiTileView = this.getView();
        this.oViewData = this.oKpiTileView.getViewData();
        if (!sap.ushell.components.tiles.utils) {
            jQuery.sap.require("sap.ushell.components.tiles.utils");
        }
        this.oResourceBundle = sap.ushell.components.tiles.utils.getResourceBundleModel().getResourceBundle();
        this.oTileApi = this.oViewData.chip; // instance specific CHIP API
        if (this.oTileApi.visible) {
            this.oTileApi.visible.attachVisible(this.visibleHandler.bind(this));
        }
        this.system = this.oTileApi.url.getApplicationSystem();
        this.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loading);

        this.getChipConfiguration( function(){
            if (that.oTileApi.preview.isEnabled()) {
                that.doDummyProcess();
            } else {

                that.oKpiTileView.oGenericTile.attachPress(function(){
                    sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(that.queryServiceUriODataReadRef);
                    sap.ushell.components.tiles.indicatorTileUtils.cache.setKpivalueById(that.oConfig.TILE_PROPERTIES.id, null);
                    window.location.hash = sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system);
                });
                that.fetchEvaluation(that.oConfig,  function(){
                    that.DEFINITION_DATA = that.oConfig;
                    if (that.KPI_VALUE_REQUIRED){
                        that.fetchKpiValue( function(kpiValue,sThresholdObject){
                            this.KPIVALUE = kpiValue;
                            that.doProcess(kpiValue,sThresholdObject);
                        },that.logError);
                    } else {
                        that.doProcess();
                    }
                });
            }
        });

    },

    getChipConfiguration : function(callback){

        var that = this;
        try {
            sap.ushell.components.tiles.indicatorTileUtils.util.getParsedChip(
                    that.oTileApi.configuration.getParameterValueAsString("tileConfiguration"), function(config){
                        that.oConfig = config;
                        var title = sap.ushell.components.tiles.indicatorTileUtils.util.getChipTitle(that.oConfig);
                        var subtitle = sap.ushell.components.tiles.indicatorTileUtils.util.getChipSubTitle(that.oConfig);
                        if (that.oTileApi.search) {
                            that.oTileApi.search.setKeywords([title, subtitle]);
                        }
                        if (that.oTileApi.preview) {
                            that.oTileApi.preview.setTargetUrl(sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system));
                        }
                        callback.call();
                    });
        } catch(e) {
            that.logError(e.message);
        }
    },

    fetchEvaluation : function(chipConfig,callback){
        var that = this;
        var sPlatform = this.oConfig.TILE_PROPERTIES.sb_metadata || "HANA";
        if (Number(that.oTileApi.configuration.getParameterValueAsString("isSufficient"))){
            sap.ushell.components.tiles.indicatorTileUtils.cache.setEvaluationById(that.oConfig.TILE_PROPERTIES.id,that.oConfig);
            that.DEFINITION_DATA = chipConfig;
            that._updateTileModel(this.DEFINITION_DATA);
            if (that.oTileApi.visible.isVisible() && !that.firstTimeVisible){
                that.firstTimeVisible = true;
                var evaluationData = sap.ushell.components.tiles.indicatorTileUtils.cache.getEvaluationById(that.oConfig.TILE_PROPERTIES.id);
                if (evaluationData) {
                    that.oConfig.EVALUATION_FILTERS = evaluationData.EVALUATION_FILTERS;
                    callback.call(evaluationData);

                } else {
                    try {
                        sap.ushell.components.tiles.indicatorTileUtils.util.getFilterFromRunTimeService(that.oConfig,that.oTileApi,function(filter){
                            that.oConfig.EVALUATION_FILTERS = filter;
                            if (sPlatform.toUpperCase() === "HANA") {
                                that.parse_sapclient();
                            }
                            sap.ushell.components.tiles.indicatorTileUtils.cache.setEvaluationById(that.oConfig.TILE_PROPERTIES.id,that.oConfig);
                            callback.call(filter);
                        });

                    } catch(e) {
                        that.logError("no evaluation data");
                    }
                }
            } else {
                try {
                    var evaluationData = sap.ushell.components.tiles.indicatorTileUtils.cache.getEvaluationById(that.oConfig.TILE_PROPERTIES.id);
                    if (evaluationData) {
                        that.oConfig.EVALUATION_FILTERS = evaluationData.EVALUATION_FILTERS;
                        callback.call(evaluationData);

                    } else {
                        sap.ushell.components.tiles.indicatorTileUtils.util.getFilterFromRunTimeService(that.oConfig,that.oTileApi,function(filter){
                            that.oConfig.EVALUATION_FILTERS = filter;
                            if (sPlatform.toUpperCase() === "HANA") {
                                that.parse_sapclient();
                            }
                            sap.ushell.components.tiles.indicatorTileUtils.cache.setEvaluationById(that.oConfig.TILE_PROPERTIES.id,that.oConfig);
                            callback.call(filter);
                        });
                    }

                } catch(e) {
                    that.logError("no evaluation data");
                }
            }
        } else {
            try {
                var evaluationData = sap.ushell.components.tiles.indicatorTileUtils.cache.getEvaluationById(that.oConfig.TILE_PROPERTIES.id);
                if (evaluationData) {
                    that.oConfig.EVALUATION_FILTERS = evaluationData.EVALUATION_FILTERS;
                    callback.call(evaluationData);

                } else {
                    sap.ushell.components.tiles.indicatorTileUtils.util.getFilterFromRunTimeService(that.oConfig,that.oTileApi,function(filter){
                        that.oConfig.EVALUATION_FILTERS = filter;
                        if (sPlatform.toUpperCase() === "HANA") {
                            that.parse_sapclient();
                        }
                        sap.ushell.components.tiles.indicatorTileUtils.cache.setEvaluationById(that.oConfig.TILE_PROPERTIES.id,that.oConfig);
                        callback.call(filter);
                    });
                }

            } catch(e) {
                that.logError("no evaluation data");
            }
        }

    },
    fetchKpiValue : function(callback , fnError){
        var that = this;
        var kpiValue = 0;
//      var targetValue = 0;
//      var criticalHighValue = 0;
//      var criticalLowValue = 0;
//      var warningHighValue = 0;
//      var warningLowValue = 0;
//      var trendValue = 0;
        try {
            var sUri = this.DEFINITION_DATA.EVALUATION.ODATA_URL;
            var sEntitySet = this.DEFINITION_DATA.EVALUATION.ODATA_ENTITYSET;
            var sThresholdObject = this.setThresholdValues();
            var sMeasure = sThresholdObject.fullyFormedMeasure;
            var cachedValue = sap.ushell.components.tiles.indicatorTileUtils.cache.getKpivalueById(that.oConfig.TILE_PROPERTIES.id);
            if (!cachedValue){
                var variantData = sap.ushell.components.tiles.indicatorTileUtils.util.prepareFilterStructure(
                        this.DEFINITION_DATA.EVALUATION_FILTERS,this.DEFINITION_DATA.ADDITIONAL_FILTERS);
                var oQuery = sap.ushell.components.tiles.indicatorTileUtils.util.prepareQueryServiceUri(
                        that.oTileApi.url.addSystemToServiceUrl(sUri), sEntitySet, sMeasure, null, variantData);
                if (oQuery) {
                    this.QUERY_SERVICE_MODEL = oQuery.model;
                    this.queryUriForKpiValue = oQuery.uri;
                    this.queryServiceUriODataReadRef = this.QUERY_SERVICE_MODEL.read(oQuery.uri, null, null, true, function(data) {
                        if (data && data.results && data.results.length && data.results[0][that.DEFINITION_DATA.EVALUATION.COLUMN_NAME] != null) {
                            kpiValue = data.results[0][that.DEFINITION_DATA.EVALUATION.COLUMN_NAME];
                            var writeData = {};
                            if (oQuery.unit[0]){
                                that._updateTileModel({
                                    unit : data.results[0][oQuery.unit[0].name]
                                });
                                writeData.unit = oQuery.unit[0];
                                writeData.unit.name = oQuery.unit[0].name;
                            }
                            if (that.oConfig.TILE_PROPERTIES.frameType == "TwoByOne"){
                                if (sap.ushell.components.tiles.indicatorTileUtils.cache.getKpivalueById(that.oConfig.TILE_PROPERTIES.id)){
                                    writeData = sap.ushell.components.tiles.indicatorTileUtils.cache.getKpivalueById(that.oConfig.TILE_PROPERTIES.id);
                                }
                                writeData.numericData = data;
                            } else {
                                writeData.data = data;
                            }

                            sap.ushell.components.tiles.indicatorTileUtils.cache.setKpivalueById(that.oConfig.TILE_PROPERTIES.id, writeData);
                            if (that.DEFINITION_DATA.EVALUATION.VALUES_SOURCE == "MEASURE"){
                                sThresholdObject.criticalHighValue = data.results[0][sThresholdObject.sCriticalHigh];
                                sThresholdObject.criticalLowValue = data.results[0][sThresholdObject.sCriticalLow];
                                sThresholdObject.warningHighValue = data.results[0][sThresholdObject.sWarningHigh];
                                sThresholdObject.warningLowValue = data.results[0][sThresholdObject.sWarningLow];
                                sThresholdObject.targetValue = data.results[0][sThresholdObject.sTarget];
                                sThresholdObject.trendValue = data.results[0][sThresholdObject.sTrend];
                            } else if (that.DEFINITION_DATA.EVALUATION.VALUES_SOURCE == "RELATIVE"){
                                sThresholdObject.targetValue = Number(data.results[0][sThresholdObject.sTarget]);
                                sThresholdObject.criticalHighValue = sThresholdObject.targetValue * sThresholdObject.criticalHighValue / 100;
                                sThresholdObject.criticalLowValue = sThresholdObject.targetValue * sThresholdObject.criticalLowValue / 100;
                                sThresholdObject.warningHighValue = sThresholdObject.targetValue * sThresholdObject.warningHighValue / 100;
                                sThresholdObject.warningLowValue = sThresholdObject.targetValue * sThresholdObject.warningLowValue / 100;
                                sThresholdObject.trendValue = Number(data.results[0][sThresholdObject.sTrend]);
                            }
                            callback.call(that, kpiValue,sThresholdObject );
                        } else {
                            that.setNoData();
                        }
                    },function(eObject) {
                        if (eObject && eObject.response) {
                            jQuery.sap.log.error(eObject.message + " : " + eObject.request.requestUri);
                            fnError.call(that,eObject);
                        }
                    });
                } else {
                    that.logError("Error Preparing Query Service URI");
                }
            } else {
                if (that.DEFINITION_DATA.TILE_PROPERTIES.frameType == sap.suite.ui.commons.FrameType.OneByOne){
                    if (cachedValue.data.results && cachedValue.data.results.length && cachedValue.data.results[0][that.DEFINITION_DATA.EVALUATION.COLUMN_NAME] != null){
                        kpiValue = cachedValue.data.results[0][that.DEFINITION_DATA.EVALUATION.COLUMN_NAME];
                        if (cachedValue.unit){
                            that._updateTileModel({
                                unit : cachedValue.data.results[0][cachedValue.unit.name]
                            });
                        }
                        if (that.DEFINITION_DATA.EVALUATION.VALUES_SOURCE == "MEASURE"){
                            sThresholdObject.criticalHighValue = cachedValue.data.results[0][sThresholdObject.sCriticalHigh];
                            sThresholdObject.criticalLowValue = cachedValue.data.results[0][sThresholdObject.sCriticalLow];
                            sThresholdObject.warningHighValue = cachedValue.data.results[0][sThresholdObject.sWarningHigh];
                            sThresholdObject.warningLowValue = cachedValue.data.results[0][sThresholdObject.sWarningLow];
                            sThresholdObject.targetValue = cachedValue.data.results[0][sThresholdObject.sTarget];
                            sThresholdObject.trendValue = cachedValue.data.results[0][sThresholdObject.sTrend];
                        } else if (that.DEFINITION_DATA.EVALUATION.VALUES_SOURCE == "RELATIVE"){
                            sThresholdObject.targetValue = Number(cachedValue.data.results[0][sThresholdObject.sTarget]);
                            sThresholdObject.criticalHighValue = sThresholdObject.targetValue * sThresholdObject.criticalHighValue / 100;
                            sThresholdObject.criticalLowValue = sThresholdObject.targetValue * sThresholdObject.criticalLowValue / 100;
                            sThresholdObject.warningHighValue = sThresholdObject.targetValue * sThresholdObject.warningHighValue / 100;
                            sThresholdObject.warningLowValue = sThresholdObject.targetValue * sThresholdObject.warningLowValue / 100;
                            sThresholdObject.trendValue = Number(cachedValue.data.results[0][sThresholdObject.sTrend]);
                        }
                        callback.call(that, kpiValue, sThresholdObject);
                    } else {
                        that.setNoData();
                    }
                } else {
                    if (cachedValue.numericData && cachedValue.numericData.results && cachedValue.numericData.results.length && cachedValue.numericData.results[0][that.DEFINITION_DATA.EVALUATION.COLUMN_NAME] != null) {
                        kpiValue = cachedValue.numericData.results[0][that.DEFINITION_DATA.EVALUATION.COLUMN_NAME];
                        if (cachedValue.unit){
                            that._updateTileModel({
                                unit : cachedValue.numericData.results[0][cachedValue.unit.name]
                            });
                        }
                        if (that.DEFINITION_DATA.EVALUATION.VALUES_SOURCE == "MEASURE"){
                            sThresholdObject.criticalHighValue = cachedValue.numericData.results[0][sThresholdObject.sCriticalHigh];
                            sThresholdObject.criticalLowValue = cachedValue.numericData.results[0][sThresholdObject.sCriticalLow];
                            sThresholdObject.warningHighValue = cachedValue.numericData.results[0][sThresholdObject.sWarningHigh];
                            sThresholdObject.warningLowValue = cachedValue.numericData.results[0][sThresholdObject.sWarningLow];
                            sThresholdObject.targetValue = cachedValue.numericData.results[0][sThresholdObject.sTarget];
                            sThresholdObject.trendValue = cachedValue.numericData.results[0][sThresholdObject.sTrend];
                        } else if (that.DEFINITION_DATA.EVALUATION.VALUES_SOURCE == "RELATIVE"){
                            sThresholdObject.targetValue = Number(cachedValue.numericData.results[0][sThresholdObject.sTarget]);
                            sThresholdObject.criticalHighValue = sThresholdObject.targetValue * sThresholdObject.criticalHighValue / 100;
                            sThresholdObject.criticalLowValue = sThresholdObject.targetValue * sThresholdObject.criticalLowValue / 100;
                            sThresholdObject.warningHighValue = sThresholdObject.targetValue * sThresholdObject.warningHighValue / 100;
                            sThresholdObject.warningLowValue = sThresholdObject.targetValue * sThresholdObject.warningLowValue / 100;
                            sThresholdObject.trendValue = Number(cachedValue.numericData.results[0][sThresholdObject.sTrend]);
                        }
                        callback.call(that, kpiValue,sThresholdObject);
                    } else {
                        that.setNoData();
                    }
                }
            }
        }catch(e) {
            that.logError(e);
        }

    },

    _setLocalModelToTile : function() {
        if (!this.getTile().getModel()) {
            this.getTile().setModel(new sap.ui.model.json.JSONModel({}));
        }
    },

    getTile : function() {
        return this.oKpiTileView.oGenericTile;
    },

    _updateTileModel : function(newData) {
        var modelData  = this.getTile().getModel().getData();
        jQuery.extend(modelData,newData);
        this.getTile().getModel().setData(modelData);
    },

    isACurrencyMeasure : function(measure) {
        var sUri = this.DEFINITION_DATA.EVALUATION.ODATA_URL;
        var entitySet = this.DEFINITION_DATA.EVALUATION.ODATA_ENTITYSET;
        return sap.ushell.components.tiles.indicatorTileUtils.util.getFormattingMetadata(this.oTileApi.url.addSystemToServiceUrl(sUri), entitySet, measure)._hasCurrency;
    },

    autoFormatter: function(n, isACurrencyMeasure) {
        isACurrencyMeasure = isACurrencyMeasure || false;
        if (!n) {
            return "";
        }
        return sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(
                Number(n),
                this.oConfig.EVALUATION.SCALING,
                this.oConfig.EVALUATION.DECIMAL_PRECISION,
                isACurrencyMeasure
        );
    },

    setToolTip : function(applyColor,calculatedValueForScaling,tileType){

        var that = this;
        var oControl;
        var sThresholdObject = this.setThresholdValues();
        var measure = this.oConfig.EVALUATION.COLUMN_NAME;
        var isACurrencyMeasure = this.isACurrencyMeasure(measure);
        if (tileType == "CONT" || tileType == "COMP"){
            if (this.oKpiTileView.getContent()[0].getTileContent().length){
                //var oControl = this.oKpiTileView.oGenericTile.getTileContent()[0].getContent();
                oControl = that.oKpiTileView.getContent()[0].getTileContent()[0].getContent();
                var m1,m2,m3,v1,v2,v3,c1,c2,c3;
                if (calculatedValueForScaling && calculatedValueForScaling[0]){
                    m1 = calculatedValueForScaling[0].title;
                    v1 = this.autoFormatter(calculatedValueForScaling[0].value, isACurrencyMeasure);
                    c1 = sap.ushell.components.tiles.indicatorTileUtils.util.getSemanticColorName(calculatedValueForScaling[0].color);
                }
                if (calculatedValueForScaling && calculatedValueForScaling[1]){
                    m2 = calculatedValueForScaling[1].title;
                    v2 = this.autoFormatter(calculatedValueForScaling[1].value, isACurrencyMeasure);
                    c2 = sap.ushell.components.tiles.indicatorTileUtils.util.getSemanticColorName(calculatedValueForScaling[1].color);
                }
                if (calculatedValueForScaling && calculatedValueForScaling[2]){
                    m3 = calculatedValueForScaling[2].title;
                    v3 = this.autoFormatter(calculatedValueForScaling[2].value, isACurrencyMeasure);
                    c3 = sap.ushell.components.tiles.indicatorTileUtils.util.getSemanticColorName(calculatedValueForScaling[2].color);
                }
                var valueObj = {
                        measure: this.oConfig.EVALUATION.COLUMN_NAME,
                        m1 : m1,
                        v1 : v1,
                        c1 : c1,
                        m2 : m2,
                        v2 : v2,
                        c2 : c2,
                        m3 : m3,
                        v3 : v3,
                        c3 : c3
                };
                sap.ushell.components.tiles.indicatorTileUtils.util.setTooltipInTile(oControl,tileType,valueObj);

            }

        } else {

            var status = "";
            if (applyColor == "Error") {
                status = "sb.error";
            }
            if (applyColor == "Neutral") {
                status = "sb.neutral";
            }
            if (applyColor == "Critical") {
                status = "sb.critical";
            }
            if (applyColor == "Good") {
                status = "sb.good";
            }
            var valueObj = {
                    status : status,
                    actual : this.autoFormatter(calculatedValueForScaling, isACurrencyMeasure),
                    target : this.autoFormatter(sThresholdObject.targetValue, isACurrencyMeasure),
                    cH : this.autoFormatter(sThresholdObject.criticalHighValue, isACurrencyMeasure),
                    wH : this.autoFormatter(sThresholdObject.warningHighValue, isACurrencyMeasure),
                    wL : this.autoFormatter(sThresholdObject.warningLowValue, isACurrencyMeasure),
                    cL : this.autoFormatter(sThresholdObject.criticalLowValue, isACurrencyMeasure)
            };
            //var oControl = that.oKpiTileView.oGenericTile.getTileContent()[0].getContent();
            var oControl = that.oKpiTileView.getContent()[0].getTileContent()[0].getContent();
            sap.ushell.components.tiles.indicatorTileUtils.util.setTooltipInTile(oControl,tileType,valueObj);
//          if(parseFloat(calculatedValueForScaling)!=0 && !calculatedValueForScaling){
//          this.logError("no data");
//          }
        }
    },

    getTrendColor : function(sThresholdObj){
        var that = this,
        warningLowValue,
        criticalLowValue,
        warningHighValue,
        criticalHighValue;
        try {
            var improvementDirection = this.DEFINITION_DATA.EVALUATION.GOAL_TYPE;
            /*var evalValue =*/ this.DEFINITION_DATA.EVALUATION_VALUES;
            var returnColor = sap.suite.ui.commons.InfoTileValueColor.Neutral;
            if (improvementDirection === "MI") {
                if (sThresholdObj.criticalHighValue && sThresholdObj.warningHighValue) {
                    criticalHighValue = Number(sThresholdObj.criticalHighValue);
                    warningHighValue = Number(sThresholdObj.warningHighValue);
                    if (this.CALCULATED_KPI_VALUE < warningHighValue) {
                        returnColor = sap.suite.ui.commons.InfoTileValueColor.Good;
                    } else if (this.CALCULATED_KPI_VALUE <= criticalHighValue) {
                        returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
                    } else {
                        returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
                    }
                }
            } else if (improvementDirection === "MA") {
                if (sThresholdObj.criticalLowValue && sThresholdObj.warningLowValue) {
                    criticalLowValue = Number(sThresholdObj.criticalLowValue);
                    warningLowValue = Number(sThresholdObj.warningLowValue);
                    if (this.CALCULATED_KPI_VALUE < criticalLowValue) {
                        returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
                    } else if (this.CALCULATED_KPI_VALUE <= warningLowValue) {
                        returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
                    } else {
                        returnColor = sap.suite.ui.commons.InfoTileValueColor.Good;
                    }
                }
            } else {
                if (sThresholdObj.warningLowValue && sThresholdObj.warningHighValue && sThresholdObj.criticalLowValue && sThresholdObj.criticalHighValue) {
                    criticalHighValue = Number(sThresholdObj.criticalHighValue);
                    warningHighValue = Number(sThresholdObj.warningHighValue);
                    warningLowValue = Number(sThresholdObj.warningLowValue);
                    criticalLowValue = Number(sThresholdObj.criticalLowValue);
                    if (this.CALCULATED_KPI_VALUE < criticalLowValue || this.CALCULATED_KPI_VALUE > criticalHighValue) {
                        returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
                    } else if ((this.CALCULATED_KPI_VALUE >= criticalLowValue && this.CALCULATED_KPI_VALUE <= warningLowValue) ||
                            (this.CALCULATED_KPI_VALUE >= warningHighValue && this.CALCULATED_KPI_VALUE <= criticalHighValue)
                    ) {
                        returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
                    } else {
                        returnColor = sap.suite.ui.commons.InfoTileValueColor.Good;
                    }
                }
            }
            return returnColor;
        } catch(e) {
            that.logError(e);
        }
    },

    getTrendIndicator : function(trendValue) {
        var that = this;
        trendValue = Number(trendValue);
        try {
            var trendIndicator = sap.suite.ui.commons.DeviationIndicator.None;
            if (trendValue > this.CALCULATED_KPI_VALUE){
                trendIndicator = sap.suite.ui.commons.DeviationIndicator.Down;
            } else if (trendValue < this.CALCULATED_KPI_VALUE){
                trendIndicator = sap.suite.ui.commons.DeviationIndicator.Up;
            }
            return trendIndicator;
        } catch(e) {
            that.logError(e);
        }
    },


    setThresholdValues : function(){
        var that = this;
        try {
            var oThresholdObject = {};
            oThresholdObject.fullyFormedMeasure = this.DEFINITION_DATA.EVALUATION.COLUMN_NAME;
            if (this.DEFINITION_DATA.EVALUATION.VALUES_SOURCE == "MEASURE"){
                var cacheData = sap.ushell.components.tiles.indicatorTileUtils.cache.getKpivalueById(that.oConfig.TILE_PROPERTIES.id);
                switch (this.DEFINITION_DATA.EVALUATION.GOAL_TYPE){
                case "MI" :
                    oThresholdObject.sWarningHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WH", "MEASURE");
                    oThresholdObject.sCriticalHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CH", "MEASURE");
                    oThresholdObject.sTarget =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
                    oThresholdObject.sTrend =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
                    oThresholdObject.fullyFormedMeasure += that.formSelectStatement(oThresholdObject);
                    if (cacheData && cacheData.data && cacheData.data.results && cacheData.data.results.length){
                        oThresholdObject.trendValue = Number(cacheData.data.results[0][oThresholdObject.sTrend]);
                        oThresholdObject.targetValue = Number(cacheData.data.results[0][oThresholdObject.sTarget]);
                        oThresholdObject.criticalHighValue =  Number(cacheData.data.results[0][oThresholdObject.sCriticalHigh]);
                        oThresholdObject.warningHighValue = Number(cacheData.data.results[0][oThresholdObject.sWarningHigh]);
                    }
                    break;
                case "MA" :
                    oThresholdObject.sWarningLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WL", "MEASURE");
                    oThresholdObject.sCriticalLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CL", "MEASURE");
                    oThresholdObject.sTarget =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
                    oThresholdObject.sTrend =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
                    oThresholdObject.fullyFormedMeasure += that.formSelectStatement(oThresholdObject);
                    if (cacheData && cacheData.data && cacheData.data.results && cacheData.data.results.length){
                        oThresholdObject.criticalLowValue = Number(cacheData.data.results[0][oThresholdObject.sCriticalLow]);
                        oThresholdObject.warningLowValue = Number(cacheData.data.results[0][oThresholdObject.sWarningLow]);
                        oThresholdObject.trendValue = Number(cacheData.data.results[0][oThresholdObject.sTrend]);
                        oThresholdObject.targetValue = Number(cacheData.data.results[0][oThresholdObject.sTarget]);
                    }
                    break;
                case "RA" :
                    oThresholdObject.sWarningHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WH", "MEASURE");
                    oThresholdObject.sCriticalHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CH", "MEASURE");
                    oThresholdObject.sTarget =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
                    oThresholdObject.sTrend =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
                    oThresholdObject.sWarningLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WL", "MEASURE");
                    oThresholdObject.sCriticalLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CL", "MEASURE");
                    oThresholdObject.fullyFormedMeasure += that.formSelectStatement(oThresholdObject);
                    if (cacheData && cacheData.data && cacheData.data.results && cacheData.data.results.length){
                        oThresholdObject.criticalLowValue = Number(cacheData.data.results[0][oThresholdObject.sCriticalLow]);
                        oThresholdObject.warningLowValue = Number(cacheData.data.results[0][oThresholdObject.sWarningLow]);
                        oThresholdObject.trendValue = Number(cacheData.data.results[0][oThresholdObject.sTrend]);
                        oThresholdObject.targetValue = Number(cacheData.data.results[0][oThresholdObject.sTarget]);
                        oThresholdObject.criticalHighValue =  Number(cacheData.data.results[0][oThresholdObject.sCriticalHigh]);
                        oThresholdObject.warningHighValue = Number(cacheData.data.results[0][oThresholdObject.sWarningHigh]);
                    }
                    break;
                }
            } else if (this.DEFINITION_DATA.EVALUATION.VALUES_SOURCE == "RELATIVE"){
                oThresholdObject.sTarget = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
                oThresholdObject.sTrend =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
                oThresholdObject.fullyFormedMeasure += that.formSelectStatement(oThresholdObject);
                oThresholdObject.criticalHighValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CH", "FIXED");
                oThresholdObject.criticalLowValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CL", "FIXED");
                oThresholdObject.warningHighValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WH", "FIXED");
                oThresholdObject.warningLowValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WL", "FIXED");
            } else {
                oThresholdObject.criticalHighValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CH", "FIXED");
                oThresholdObject.criticalLowValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CL", "FIXED");
                oThresholdObject.warningHighValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WH", "FIXED");
                oThresholdObject.warningLowValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WL", "FIXED");
                oThresholdObject.targetValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "FIXED");
                oThresholdObject.trendValue = sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "FIXED");
            }
            return oThresholdObject;
        } catch(e) {
            that.logError(e);
        }
    },

    formSelectStatement : function(object) {
        var tmpArray = Object.keys(object);
        var sFormedMeasure = "";
        for (var i = 0; i < tmpArray.length; i++) {
            if ((object[tmpArray[i]] !== undefined) && (object.fullyFormedMeasure)) {
                sFormedMeasure = sFormedMeasure + "," + object[tmpArray[i]];
            }
        }
        return sFormedMeasure;
    },

    parse_sapclient : function() {
        var i, SAP_CLIENT, reserved_placeholder, filters, filter; //, HANA_USER_CLIENT;
        //var HANA_USER_CLIENT = "ERR_parsing_sapclient";
        SAP_CLIENT = "P_SAPClient";
        reserved_placeholder = "$$$";
        filters = this.oConfig.EVALUATION_FILTERS;

        /* expected syntax
         *  evaluationData
         *	|-- FILTERS
         *	|   |-- results[]
         *	|   	|-- NAME
         *	|   	|-- VALUE_1
         */

        if (filters.constructor !== Array) {
            return;
        }

        if (filters.length < 1) {
            return;
        }
        for (i in filters) {
            filter = filters[i];
            if (filter["NAME"] === SAP_CLIENT && filter["VALUE_1"] === reserved_placeholder) {
                break;
            }
            filter = null;
        }
        if (filter) {
            jQuery.when(sap.ushell.components.tiles.indicatorTileUtils.util.getHanaClient()).done(function (client) {
                filter["VALUE_1"] = client;
            });

        }
    },

    setTextInTile : function(){

        var that = this;
        var titleObj = sap.ushell.components.tiles.indicatorTileUtils.util.getTileTitleSubtitle(this.oTileApi);
        this._updateTileModel({

            header : titleObj.title || sap.ushell.components.tiles.indicatorTileUtils.util.getChipTitle(that.oConfig ),
            subheader : titleObj.subTitle || sap.ushell.components.tiles.indicatorTileUtils.util.getChipSubTitle(that.oConfig )
        });
    },

    logError : function(err){
        this._updateTileModel({
            value : "",
            scale : "",
            unit: ""
        });
        if (this.getView().getViewData().deferredObj){
            this.getView().getViewData().deferredObj.reject();
        } else {
            this.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Failed);
        }
    },
    setNoData : function(){
        var viewData = this.getView().getViewData();
        if (viewData.parentController) {
            viewData.parentController.setNoData();
            if (viewData.deferredObj) {
                viewData.deferredObj.resolve();
            }
        } else {
            try {
                this._updateTileModel({
                    value : "",
                    scale : "",
                    unit: "",
                    footerNum : this.oResourceBundle.getText("sb.noDataAvailable"),
                    footerComp : this.oResourceBundle.getText("sb.noDataAvailable") // in case of comparison( and mm) tiles 

                });
                this.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);
            } catch(e){
                //do nothing 
            }
        }
    },
    refreshHandler : function () {    	
        var that = this;
        var cacheData = {};
        if (this.firstTimeVisible){
            if (Number(this.oTileApi.configuration.getParameterValueAsString("isSufficient"))){
                if (this.KPI_VALUE_REQUIRED){
                    var sThresholdObject = this.setThresholdValues();
                    cacheData = sap.ushell.components.tiles.indicatorTileUtils.cache.getKpivalueById(that.oConfig.TILE_PROPERTIES.id);
                    if (that.DEFINITION_DATA.EVALUATION.VALUES_SOURCE == "MEASURE"){
                        sThresholdObject.criticalHighValue = cacheData.data.results[0][sThresholdObject.sCriticalHigh];
                        sThresholdObject.criticalLowValue = cacheData.data.results[0][sThresholdObject.sCriticalLow];
                        sThresholdObject.warningHighValue = cacheData.data.results[0][sThresholdObject.sWarningHigh];
                        sThresholdObject.warningLowValue = cacheData.data.results[0][sThresholdObject.sWarningLow];
                        sThresholdObject.targetValue = cacheData.data.results[0][sThresholdObject.sTarget];
                        sThresholdObject.trendValue = cacheData.data.results[0][sThresholdObject.sTrend];
                    } else if (that.DEFINITION_DATA.EVALUATION.VALUES_SOURCE == "RELATIVE"){
                        sThresholdObject.targetValue = Number(cacheData.data.results[0][sThresholdObject.sTarget]);
                        sThresholdObject.criticalHighValue = sThresholdObject.targetValue * sThresholdObject.criticalHighValue / 100;
                        sThresholdObject.criticalLowValue = sThresholdObject.targetValue * sThresholdObject.criticalLowValue / 100;
                        sThresholdObject.warningHighValue = sThresholdObject.targetValue * sThresholdObject.warningHighValue / 100;
                        sThresholdObject.warningLowValue = sThresholdObject.targetValue * sThresholdObject.warningLowValue / 100;
                        sThresholdObject.trendValue = Number(cacheData.data.results[0][sThresholdObject.sTrend]);
                    }
                    this.doProcess(this.KPIVALUE,sThresholdObject);

                } else {
                    this.doProcess();
                }
            } else {
                this.fetchEvaluation(this.oConfig, function(){
                    if (this.KPI_VALUE_REQUIRED){
                        var sThresholdObject = this.setThresholdValues();
                        cacheData = sap.ushell.components.tiles.indicatorTileUtils.cache.getKpivalueById(that.oConfig.TILE_PROPERTIES.id);
                        if (that.DEFINITION_DATA.EVALUATION.VALUES_SOURCE == "MEASURE"){
                            sThresholdObject.criticalHighValue = cacheData.data.results[0][sThresholdObject.sCriticalHigh];
                            sThresholdObject.criticalLowValue = cacheData.data.results[0][sThresholdObject.sCriticalLow];
                            sThresholdObject.warningHighValue = cacheData.data.results[0][sThresholdObject.sWarningHigh];
                            sThresholdObject.warningLowValue = cacheData.data.results[0][sThresholdObject.sWarningLow];
                            sThresholdObject.targetValue = cacheData.data.results[0][sThresholdObject.sTarget];
                            sThresholdObject.trendValue = cacheData.data.results[0][sThresholdObject.sTrend];
                        } else if (that.DEFINITION_DATA.EVALUATION.VALUES_SOURCE == "RELATIVE"){
                            sThresholdObject.targetValue = Number(cacheData.data.results[0][sThresholdObject.sTarget]);
                            sThresholdObject.criticalHighValue = sThresholdObject.targetValue * sThresholdObject.criticalHighValue / 100;
                            sThresholdObject.criticalLowValue = sThresholdObject.targetValue * sThresholdObject.criticalLowValue / 100;
                            sThresholdObject.warningHighValue = sThresholdObject.targetValue * sThresholdObject.warningHighValue / 100;
                            sThresholdObject.warningLowValue = sThresholdObject.targetValue * sThresholdObject.warningLowValue / 100;
                            sThresholdObject.trendValue = Number(cacheData.data.results[0][sThresholdObject.sTrend]);
                        }
                        this.doProcess(this.KPIVALUE,sThresholdObject);
                    } else {
                        this.doProcess();
                    }
                });
            }
        }

    },

    visibleHandler : function (isVisible) {
        if (!isVisible) {
            //this.firstTimeVisible = false;
            sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(this.queryServiceUriODataReadRef);
            sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(this.trendChartODataReadRef);
            sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(this.comparisionChartODataRef);
        }
        if (isVisible) {
            this.refreshHandler(this);
        }
    },
    _getEvaluationThresholdMeasures : function(){
        var thresholdMeasuresArray = [];
        thresholdMeasuresArray.push(this.oConfig.EVALUATION.COLUMN_NAME);
        if (this.oConfig.EVALUATION.VALUES_SOURCE === "MEASURE") {
            var thresholdObjArray = this.oConfig.EVALUATION_VALUES;
            if (thresholdObjArray && thresholdObjArray.length) {
                for (var i = 0; i < thresholdObjArray.length; i++) {
                    if ((thresholdObjArray[i]).COLUMN_NAME && !((thresholdObjArray[i]).FIXED)) {
                        thresholdMeasuresArray.push((thresholdObjArray[i]).COLUMN_NAME);
                    }
                }
            }
        }
        return thresholdMeasuresArray;
    },
    onExit : function(){
        sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(this.queryServiceUriODataReadRef);
        sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(this.trendChartODataReadRef);
        sap.ushell.components.tiles.indicatorTileUtils.util.abortPendingODataCalls(this.comparisionChartODataRef);
    }

});

}; // end of sap/ushell/components/tiles/generic.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.indicatorArea.AreaChartTile.controller') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.indicatorArea.AreaChartTile.controller');
(function () {
    "use strict";
    
    sap.ushell.components.tiles.generic.extend("tiles.indicatorArea.AreaChartTile", {
        onInit :  function(){
            this.KPI_VALUE_REQUIRED = false;
        },

        doProcess : function () {
            this.onAfterFinalEvaluation();
        },

        onAfterFinalEvaluation: function () {
            var that = this;
            var sUri = this.DEFINITION_DATA.EVALUATION.ODATA_URL;
            var sEntitySet = this.DEFINITION_DATA.EVALUATION.ODATA_ENTITYSET;
            var sMeasure = this.DEFINITION_DATA.EVALUATION.COLUMN_NAME;
            var variantData = sap.ushell.components.tiles.indicatorTileUtils.util.prepareFilterStructure(this.DEFINITION_DATA.EVALUATION_FILTERS,this.DEFINITION_DATA.ADDITIONAL_FILTERS);
            var dimensionName = this.DEFINITION_DATA.TILE_PROPERTIES.dimension;
            if (dimensionName == undefined) {
                this.logError();
                return;
            }
            var goaltype = this.DEFINITION_DATA.EVALUATION.GOAL_TYPE;
            var evaluationValues = this.DEFINITION_DATA.EVALUATION_VALUES;
            if (this.DEFINITION_DATA.EVALUATION.VALUES_SOURCE == "MEASURE") {
                var fullyFormedMeasure = sMeasure;
                switch (goaltype) {
                case "MI" :
                    that.sWarningHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WH", "MEASURE");
                    that.sCriticalHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CH", "MEASURE");
                    that.sTarget =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
                    that.sTrend =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
                    if (that.sWarningHigh && that.sCriticalHigh && that.sTarget) {
                        fullyFormedMeasure += "," + that.sWarningHigh + "," + that.sCriticalHigh + "," + that.sTarget;
                    }
                    break;
                case "MA" :
                    that.sWarningLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WL", "MEASURE");
                    that.sCriticalLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CL", "MEASURE");
                    that.sTarget =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
                    that.sTrend =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
                    if (that.sWarningLow && that.sCriticalLow && that.sTarget) {
                        fullyFormedMeasure += "," + that.sWarningLow + "," + that.sCriticalLow + "," + that.sTarget;
                    }
                    break;
                case "RA" :
                    that.sWarningHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WH", "MEASURE");
                    that.sCriticalHigh =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CH", "MEASURE");
                    that.sTarget =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TA", "MEASURE");
                    that.sTrend =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "TC", "MEASURE");
                    that.sWarningLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "WL", "MEASURE");
                    that.sCriticalLow =  sap.ushell.components.tiles.indicatorTileUtils.util.getEvalValueMeasureName(that.oConfig, "CL", "MEASURE");
                    if (that.sWarningLow && that.sCriticalLow && that.sTarget && that.sWarningHigh && that.sCriticalHigh) {
                        fullyFormedMeasure += "," + that.sWarningLow + "," + that.sCriticalLow + "," + that.sTarget + "," + that.sWarningHigh + "," + that.sCriticalHigh;
                    }
                    break;
                }
                var oQuery = sap.ushell.components.tiles.indicatorTileUtils.util.prepareQueryServiceUri(that.oTileApi.url.addSystemToServiceUrl(sUri), sEntitySet, fullyFormedMeasure, dimensionName, variantData);
            } else {
                var oQuery = sap.ushell.components.tiles.indicatorTileUtils.util.prepareQueryServiceUri(that.oTileApi.url.addSystemToServiceUrl(sUri), sEntitySet, sMeasure, dimensionName, variantData);
            }
            var cachedValue = sap.ushell.components.tiles.indicatorTileUtils.cache.getKpivalueById(that.oConfig.TILE_PROPERTIES.id);
            if (!cachedValue) {
                if (oQuery) {
                    this.queryUriForTrendChart = oQuery.uri;
                    var writeData = {};
                    try {
                        this.trendChartODataReadRef = oQuery.model.read(oQuery.uri, null, null, true, function (data) {
                            if (data && data.results && data.results.length){
                                if (oQuery.unit[0]){
                                    that.unit = data.results[0][oQuery.unit[0].name];
                                    that.CURRENCY_CODE = that.unit;
                                    writeData.unit = oQuery.unit[0];
                                    writeData.unit.name = oQuery.unit[0].name;
                                }
                                that.queryUriResponseForTrendChart = data;
                                dimensionName = sap.ushell.components.tiles.indicatorTileUtils.util.findTextPropertyForDimension(that.oTileApi.url.addSystemToServiceUrl(sUri), sEntitySet, dimensionName);
                                data.firstXlabel = data.results[0][dimensionName];
                                data.lastXlabel = data.results[data.results.length - 1][dimensionName];

                                if (that.oConfig.TILE_PROPERTIES.frameType == sap.suite.ui.commons.FrameType.TwoByOne){
                                    if (sap.ushell.components.tiles.indicatorTileUtils.cache.getKpivalueById(that.oConfig.TILE_PROPERTIES.id)){
                                        writeData = sap.ushell.components.tiles.indicatorTileUtils.cache.getKpivalueById(that.oConfig.TILE_PROPERTIES.id);
                                    }
                                    writeData.data = data;
                                } else {
                                    writeData.data = data;
                                }
                                writeData.dimensionName = dimensionName;
                                sap.ushell.components.tiles.indicatorTileUtils.cache.setKpivalueById(that.oConfig.TILE_PROPERTIES.id, writeData);
                                _applyData(data,that.DEFINITION_DATA.EVALUATION.VALUES_SOURCE);
                                if (that.DEFINITION_DATA.TILE_PROPERTIES.frameType == sap.suite.ui.commons.FrameType.TwoByOne) {
                                    that.getView().getViewData().deferredObj.resolve();
                                } else {
                                    var navTarget = sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system);
                                    that.oKpiTileView.oGenericTile.$().wrap("<a href ='" + navTarget + "'/>");
                                    that.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);
                                }
                            } else {
                                that.setNoData();
                            }
                        },function(eObject) {
                            if (eObject && eObject.response) {
                                that.logError("Data call failed");
                            }
                        });
                    } catch(e) {
                        that.logError(e);
                    }
                } else {
                    that.logError();
                }
            } else {
                try {
                    if (cachedValue.unit){
                        that.unit = cachedValue.data.results[0][cachedValue.unit.name];
                        that.CURRENCY_CODE = that.unit;
                    }
                    that.queryUriResponseForTrendChart = cachedValue.data;
                    dimensionName = cachedValue.dimensionName;
                    _applyData(cachedValue.data,that.DEFINITION_DATA.EVALUATION.VALUES_SOURCE);
                    if (that.oConfig.TILE_PROPERTIES.frameType == sap.suite.ui.commons.FrameType.OneByOne){
                        that.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);
                    } else {
                        that.getView().getViewData().deferredObj.resolve();

                    }
                } catch(e) {
                    that.logError(e);
                }
            }
            function _applyData(data,type) {

                var dimensionArray = [];
                var measureArray = [];
                var wHArray = [];
                var cHArray = [];
                var cLArray = [];
                var wLArray = [];
                var firstXlabel = data.firstXlabel;
                var minThresholdMeasure, maxThresholdMeasure, innerMinThresholdMeasure, innerMaxThresholdMeasure, targetMeasure;
                var lastXlabel = data.lastXlabel;
                var firstYLabelValue = Number(data.results[0][sMeasure]);
                var lastYLabelValue = Number(data.results[data.results.length - 1][sMeasure]);
                var i;

                for (i in data.results) {
                    data.results[i][dimensionName] = Number(i);
                    data.results[i][sMeasure] = Number(data.results[i][sMeasure]);
                    that.sWarningHigh ? data.results[i][that.sWarningHigh] = Number(data.results[i][that.sWarningHigh]) : "";
                    that.sCriticalHigh ? data.results[i][that.sCriticalHigh] = Number(data.results[i][that.sCriticalHigh]) : "";
                    that.sCriticalLow ? data.results[i][that.sCriticalLow] = Number(data.results[i][that.sCriticalLow]) : "";
                    that.sWarningLow ? data.results[i][that.sWarningLow] = Number(data.results[i][that.sWarningLow]) : "";
                    that.sTarget ? data.results[i][that.sTarget] = Number(data.results[i][that.sTarget]) : "";
                    that.sWarningHigh ? wHArray.push(data.results[i][that.sWarningHigh]) : "";
                    that.sCriticalHigh ? cHArray.push(data.results[i][that.sCriticalHigh]) : "";
                    that.sCriticalLow ? cLArray.push(data.results[i][that.sCriticalLow]) : "";
                    that.sWarningLow ?  wLArray.push(data.results[i][that.sWarningLow]) : "";
                    dimensionArray.push(data.results[i][dimensionName]);
                    measureArray.push(data.results[i][sMeasure]);
                } try {
                    firstXlabel = sap.ushell.components.tiles.indicatorTileUtils.util.formatOdataObjectToString(firstXlabel);
                    lastXlabel = sap.ushell.components.tiles.indicatorTileUtils.util.formatOdataObjectToString(lastXlabel);
                } catch (e) {
                    that.logError(e);
                }
                var firstCalculatedValueForScaling = Number(firstYLabelValue);
                if (that.oConfig.EVALUATION.SCALING == -2) {
                    firstCalculatedValueForScaling *= 100;
                }
                var minMeasure = Math.min.apply(Math, measureArray); //to obtain the starting value
                var c = that.isACurrencyMeasure(that.oConfig.EVALUATION.COLUMN_NAME);
                var formattedFirstYLabel = sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(firstCalculatedValueForScaling, that.oConfig.EVALUATION.SCALING,that.oConfig.EVALUATION.DECIMAL_PRECISION, c, that.CURRENCY_CODE);
                if (that.oConfig.EVALUATION.SCALING == -2) {
                    formattedFirstYLabel += " %";
                }
                var firstYLabel = formattedFirstYLabel.toString();

                var lastCalculatedValueForScaling = Number(lastYLabelValue);
                if (that.oConfig.EVALUATION.SCALING == -2) {
                    lastCalculatedValueForScaling *= 100;
                }
                var maxMeasure = Math.max.apply(Math, measureArray); //to obtain the last value
                c = that.isACurrencyMeasure(that.oConfig.EVALUATION.COLUMN_NAME);
                var formattedLastYLabel = sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(lastCalculatedValueForScaling, that.oConfig.EVALUATION.SCALING,that.oConfig.EVALUATION.DECIMAL_PRECISION, c, that.CURRENCY_CODE);
                if (that.oConfig.EVALUATION.SCALING == -2) {
                    formattedLastYLabel += " %";
                }
                var lastYLabel = formattedLastYLabel.toString();

                try {
                    var minDimension = sap.ushell.components.tiles.indicatorTileUtils.util.formatOdataObjectToString(Math.min.apply(Math, dimensionArray)); //to obtain the starting value
                    var maxDimension = sap.ushell.components.tiles.indicatorTileUtils.util.formatOdataObjectToString(Math.max.apply(Math, dimensionArray)); //to obtain the last value
                } catch (e) {
                    that.logError(e);
                }
                if (type == "MEASURE"){
                    (wHArray.length != 0) ? (that.firstwH = wHArray[minDimension]) &&  (that.lastwH = wHArray[maxDimension]) : "";
                    (cHArray.length != 0) ? (that.firstcH = cHArray[minDimension]) && (that.lastcH = cHArray[maxDimension]) : "";
                    (cLArray.length != 0) ? (that.firstcL = cLArray[minDimension]) && (that.lastcL = cLArray[maxDimension]) : "";
                    (wLArray.length != 0) ? ( that.firstwL = wLArray[minDimension]) && (that.lastwL = wLArray[maxDimension]) : "";
                }
                var updatedModel = {
                        width: "100%",
                        height: "100%",
                        unit: that.unit || "",
                        chart: {
                            color: "Neutral",
                            data: data.results
                        },
                        size: "Auto",
                        minXValue: minDimension,
                        maxXValue: maxDimension,
                        minYValue: minMeasure,
                        maxYValue: maxMeasure,
                        firstXLabel: {
                            label: firstXlabel + "",
                            color: "Neutral"
                        },
                        lastXLabel: {
                            label: lastXlabel + "",
                            color: "Neutral"
                        },
                        firstYLabel: {
                            label: firstYLabel + "",
                            color: "Neutral"
                        },
                        lastYLabel: {
                            label: lastYLabel + "",
                            color: "Neutral"
                        },
                        minLabel: {},
                        maxLabel: {}
                };

                switch (goaltype) {
                case "MA":
                    for (i in evaluationValues) {
                        if (evaluationValues[i].TYPE == "CL") {
                            updatedModel.minThreshold = {
                                    color: "Error"
                            };
                            var newObj = {};
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            that.cl = Number(evaluationValues[i].FIXED);
                            updatedModel.minThreshold.data = (type  == "MEASURE") ? data.results : [newObj];
                            minThresholdMeasure = (type  == "MEASURE") ? that.sCriticalLow : sMeasure;

                        } else if (evaluationValues[i].TYPE == "WL") {
                            updatedModel.maxThreshold = {
                                    color: "Good"
                            };
                            var newObj = {};
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            updatedModel.maxThreshold.data = (type  == "MEASURE") ? data.results : [newObj];
                            maxThresholdMeasure = (type  == "MEASURE") ?  that.sWarningLow : sMeasure;
                            that.wl = Number(evaluationValues[i].FIXED);

                        } else if (evaluationValues[i].TYPE == "TA") {
                            var newObj = {};
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            updatedModel.target = {
                                    color: "Neutral"
                            };
                            updatedModel.target.data = (type  == "MEASURE") ? data.results : [newObj];
                            targetMeasure = (type  == "MEASURE") ? that.sTarget : sMeasure;
                        }
                    }
                    updatedModel.innerMinThreshold = {
                            data: [

                                   ]
                    };
                    updatedModel.innerMaxThreshold = {
                            data: [

                                   ]
                    };
                    /*eslint-disable no-nested-ternary*/
                    if (type  == "FIXED") {
                        updatedModel.firstYLabel.color =  firstYLabelValue < that.cl ? "Error" : ((that.cl <= firstYLabelValue) && (firstYLabelValue <= that.wl)) ? "Critical" : (firstYLabelValue > that.wl) ? "Good" : "Neutral";
                        updatedModel.lastYLabel.color = lastYLabelValue < that.cl ? "Error" : ((that.cl <= lastYLabelValue) && (lastYLabelValue <= that.wl)) ? "Critical" : (lastYLabelValue > that.wl) ? "Good" : "Neutral";
                    } else if (type == "MEASURE" && that.firstwL && that.lastwL && that.firstcL && that.lastcL) {
                        updatedModel.firstYLabel.color = firstYLabelValue < that.firstcL ? "Error" : ((that.firstcL <= firstYLabelValue) && (firstYLabelValue <= that.firstwL)) ? "Critical" : (firstYLabelValue > that.firstwL) ? "Good" : "Neutral";
                        updatedModel.lastYLabel.color = lastYLabelValue < that.lastcL ? "Error" : ((that.lastcL <= lastYLabelValue) && (lastYLabelValue <= that.lastwL)) ? "Critical" : (lastYLabelValue > that.lastwL) ? "Good" : "Neutral";
                    }
                    /*eslint-enable no-nested-ternary*/
                    break;
                case "MI":
                    for (i in evaluationValues) {

                        if (evaluationValues[i].TYPE == "CH") {
                            var newObj = {};
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            that.ch =  Number(evaluationValues[i].FIXED);
                            updatedModel.maxThreshold = {
                                    color: "Error"
                            };
                            updatedModel.maxThreshold.data = (type  == "MEASURE") ? data.results : [newObj];
                            maxThresholdMeasure = (type  == "MEASURE") ? that.sCriticalHigh : sMeasure;
                        } else if (evaluationValues[i].TYPE == "WH") {
                            var newObj = {};
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            that.wh = Number(evaluationValues[i].FIXED);
                            updatedModel.minThreshold = {
                                    color: "Good"
                            };
                            updatedModel.minThreshold.data = (type  == "MEASURE") ? data.results : [newObj];
                            minThresholdMeasure = (type  == "MEASURE") ? that.sWarningHigh : sMeasure;

                        } else if (evaluationValues[i].TYPE == "TA") {
                            var newObj = {};
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            updatedModel.target = {
                                    color: "Neutral"
                            };
                            updatedModel.target.data = (type  == "MEASURE") ? data.results : [newObj];
                            targetMeasure = (type  == "MEASURE") ? that.sTarget : sMeasure;
                        }


                    }
                    /*eslint-disable no-nested-ternary*/
                    if (type  == "FIXED"){
                        updatedModel.firstYLabel.color = firstYLabelValue > that.ch ? "Error" : ((that.wh <= firstYLabelValue) && (firstYLabelValue <= that.ch)) ? "Critical" : (firstYLabelValue < that.wh) ? "Good" : "Neutral";
                        updatedModel.lastYLabel.color = lastYLabelValue > that.ch ? "Error" : ((that.wh <= lastYLabelValue) && (lastYLabelValue <= that.ch)) ? "Critical" : (lastYLabelValue < that.wh) ? "Good" : "Neutral";
                    } else if (type == "MEASURE" && that.firstwH && that.lastwH && that.firstcH && that.lastcH) {
                        updatedModel.firstYLabel.color = firstYLabelValue > that.firstcH ? "Error" : ((that.firstwH <= firstYLabelValue) && (firstYLabelValue <= that.firstcH)) ? "Critical" : (firstYLabelValue < that.firstwH) ? "Good" : "Neutral";
                        updatedModel.lastYLabel.color = lastYLabelValue > that.lastcH ? "Error" : ((that.lastwH <= lastYLabelValue) && (lastYLabelValue <= that.lastcH)) ? "Critical" : (lastYLabelValue < that.lastwH) ? "Good" : "Neutral";

                    }
                    /*eslint-enable no-nested-ternary*/
                    updatedModel.innerMaxThreshold = {
                        data: []
                    };
                    updatedModel.innerMinThreshold = {
                        data: []
                    };
                    break;
                case "RA":
                    for (i in evaluationValues) {

                        if (evaluationValues[i].TYPE == "CH") {
                            var newObj = {};
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            that.ch = Number(evaluationValues[i].FIXED);
                            updatedModel.maxThreshold = {
                                    color: "Error"
                            };
                            updatedModel.maxThreshold.data = (type  == "MEASURE") ?  data.results : [newObj];
                            maxThresholdMeasure = (type  == "MEASURE") ? that.sCriticalHigh : sMeasure;
                        } else if (evaluationValues[i].TYPE == "WH") {
                            var newObj = {};
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            that.wh = Number(evaluationValues[i].FIXED);
                            updatedModel.innerMaxThreshold = {
                                    color: "Good"
                            };
                            updatedModel.innerMaxThreshold.data = (type  == "MEASURE") ? data.results : [newObj];
                            innerMaxThresholdMeasure = (type  == "MEASURE") ? that.sWarningHigh : sMeasure;
                        } else if (evaluationValues[i].TYPE == "WL") {
                            var newObj = {};
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            that.wl = Number(evaluationValues[i].FIXED);
                            updatedModel.innerMinThreshold = {
                                    color: "Good"
                            };
                            updatedModel.innerMinThreshold.data = (type  == "MEASURE") ?  data.results : [newObj];
                            innerMinThresholdMeasure = (type  == "MEASURE") ? that.sWarningLow : sMeasure;
                        } else if (evaluationValues[i].TYPE == "CL") {
                            var newObj = {};
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            that.cl = Number(evaluationValues[i].FIXED);
                            updatedModel.minThreshold = {
                                    color: "Error"
                            };
                            updatedModel.minThreshold.data = (type  == "MEASURE") ? data.results : [newObj];
                            minThresholdMeasure = (type  == "MEASURE") ? that.sCriticalLow : sMeasure;
                        } else if (evaluationValues[i].TYPE == "TA") {
                            var newObj = {};
                            newObj[dimensionName] = "";
                            newObj[sMeasure] = Number(evaluationValues[i].FIXED);
                            updatedModel.target = {
                                    color: "Neutral"
                            };
                            updatedModel.target.data = (type  == "MEASURE") ? data.results : [newObj];
                            targetMeasure = (type  == "MEASURE") ? that.sTarget : sMeasure;
                        }
                    }
                    /*eslint-disable no-nested-ternary*/
                    if (type  == "FIXED"){
                        updatedModel.firstYLabel.color = (firstYLabelValue > that.ch || firstYLabelValue < that.cl ) ? "Error" : ((that.wh <= firstYLabelValue) && (firstYLabelValue <= that.ch)) || ((that.cl <= firstYLabelValue) && (firstYLabelValue <= that.wl))  ? "Critical" : ((firstYLabelValue >= that.wl) && (firstYLabelValue <= that.wh)) ? "Good" : "Neutral";
                        updatedModel.lastYLabel.color = (lastYLabelValue > that.ch || lastYLabelValue < that.cl ) ? "Error" : ((that.wh <= lastYLabelValue) && (lastYLabelValue <= that.ch)) || ((that.cl <= lastYLabelValue) && (lastYLabelValue <= that.wl))  ? "Critical" : ((lastYLabelValue >= that.wl) && (lastYLabelValue <= that.wh)) ? "Good"  : "Neutral";
                    } else if (type == "MEASURE" && that.firstwL && that.lastwL && that.firstcL && that.lastcL && that.firstwH && that.lastwH && that.firstcH && that.lastcH){
                        updatedModel.firstYLabel.color = (firstYLabelValue > that.firstcH || firstYLabelValue < that.firstcL ) ? "Error" : ((that.firstwH <= firstYLabelValue) && (firstYLabelValue <= that.firstcH)) || ((that.firstcL <= firstYLabelValue) && (firstYLabelValue <= that.firstwL))  ? "Critical" : ((firstYLabelValue >= that.firstwL) && (firstYLabelValue <= that.firstwH)) ? "Good" : "Neutral";
                        updatedModel.lastYLabel.color = (lastYLabelValue > that.lastcH || lastYLabelValue < that.lastcL ) ? "Error" : ((that.lastwH <= lastYLabelValue) && (lastYLabelValue <= that.lastcH)) || ((that.lastcL <= lastYLabelValue) && (lastYLabelValue <= that.lastwL))  ? "Critical" : ((lastYLabelValue >= that.lastwL) && (lastYLabelValue <= that.lastwH)) ? "Good" : "Neutral";
                    }
                    /*eslint-enable no-nested-ternary*/
                    break;

                }

                var buildChartItem = function (sName, a, b, type) {
                    return new sap.suite.ui.commons.MicroAreaChartItem({
                        color: "{/" + sName + "/color}",
                        points: {
                            path: "/" + sName + "/data",
                            template: new sap.suite.ui.commons.MicroAreaChartPoint({
                                x: "{" + a + "}",
                                y: "{" + b + "}"

                            })
                        }
                    });
                };
                var TileRef = that.getTile().getTileContent()[0].getContent();
                TileRef.setTarget(buildChartItem("target", dimensionName, targetMeasure));
                TileRef.setInnerMinThreshold(buildChartItem("innerMinThreshold", dimensionName, innerMinThresholdMeasure));
                TileRef.setInnerMaxThreshold(buildChartItem("innerMaxThreshold", dimensionName, innerMaxThresholdMeasure));
                TileRef.setMinThreshold(buildChartItem("minThreshold", dimensionName, minThresholdMeasure));
                TileRef.setMaxThreshold(buildChartItem("maxThreshold", dimensionName, maxThresholdMeasure));
                TileRef.setChart(buildChartItem("chart", dimensionName, sMeasure));


                that.setTextInTile();
                if (that.getView().getViewData().parentController){
                    that.getView().getViewData().parentController._updateTileModel(updatedModel);
                } else {
                    that._updateTileModel(updatedModel);
                }

            }
        },

        doDummyProcess : function(){
            var that = this;
            this.setTextInTile();
            that._updateTileModel({
                footer : "",
                description: "",

                width: "100%",
                height: "100%",
                chart: {
                    color:"Good",
                    data: [
                           {day: 0, balance: 0},
                           {day: 30, balance: 20},
                           {day: 60, balance: 20},
                           {day: 100, balance: 80}
                           ]
                },
                target: {
                    color:"Error",
                    data: [
                           {day: 0, balance: 0},
                           {day: 30, balance: 30},
                           {day: 60, balance: 40},
                           {day: 100, balance: 90}
                           ]
                },
                maxThreshold: {
                    color: "Good",
                    data: [
                           {day: 0, balance: 0},
                           {day: 30, balance: 40},
                           {day: 60, balance: 50},
                           {day: 100, balance: 100}
                           ]
                },
                innerMaxThreshold: {
                    color: "Error",
                    data: []
                },
                innerMinThreshold: {
                    color: "Neutral",
                    data: []
                },
                minThreshold: {
                    color: "Error",
                    data: [
                       {day: 0, balance: 0},
                       {day: 30, balance: 20},
                       {day: 60, balance: 30},
                       {day: 100, balance: 70}
                   ]
                },
                minXValue: 0,
                maxXValue: 100,
                minYValue: 0,
                maxYValue: 100,
                firstXLabel: { label: "June 123", color: "Error"   },
                lastXLabel: { label: "June 30", color: "Error" },
                firstYLabel: { label: "0M", color: "Good" },
                lastYLabel: { label: "80M", color: "Critical" },
                minLabel: { },
                maxLabel: { }
            });
            this.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);
        }

    });
}());

}; // end of sap/ushell/components/tiles/indicatorArea/AreaChartTile.controller.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.indicatorArea.AreaChartTile.view') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.indicatorArea.AreaChartTile.view');
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap */
    /*jslint nomen: true */

    
    jQuery.sap.require('sap.ui.model.analytics.odata4analytics'); // unlisted dependency retained

    sap.ui.getCore().loadLibrary("sap.suite.ui.commons");

    sap.ui.jsview("tiles.indicatorArea.AreaChartTile", {
        getControllerName: function () {
            return "tiles.indicatorArea.AreaChartTile";
        },
        createContent: function (oController) {
            this.setHeight('100%');
            this.setWidth('100%');
            var header = "Lorem ipsum";
            var subheader =  "Lorem ipsum";

            var titleObj = sap.ushell.components.tiles.indicatorTileUtils.util.getTileTitleSubtitle(
                    this.getViewData().chip);
            if (titleObj.title && titleObj.subTitle){
                header = titleObj.title;
                subheader = titleObj.subTitle;
            }
            var buildChartItem = function(sName) {
                return new sap.suite.ui.commons.MicroAreaChartItem({
                    color: "Good",
                    points: {
                        path: "/" + sName + "/data",
                        template: new sap.suite.ui.commons.MicroAreaChartPoint({
                            x: "{day}",
                            y: "{balance}"

                        })
                    }
                });
            };




            var buildMACLabel = function(sName) {
                return new sap.suite.ui.commons.MicroAreaChartLabel({
                    label: "{/" + sName + "/label}",
                    color: "{/" + sName + "/color}"
                });
            };

            var oGenericTileData = {
                    subheader : subheader,
                    header : header,
                    footerNum : "",
                    footerComp : "",
                    scale: "",
                    unit: "",
                    value: 8888,
                    size:"Auto",
                    frameType:"OneByOne",
                    state: sap.suite.ui.commons.LoadState.Loading
                    /* valueColor:sap.suite.ui.commons.InfoTileValueColor.Error,
                    indicator: sap.suite.ui.commons.DeviationIndicator.None,*/
//                    title : "US Profit Margin",
//                    footer : "",
//                    description: "",

//                    width: "100%",
//                    height: "100%",
//                    chart: {
//                    color:"Good",
//                    data: [
//                    {day: 0, balance: 0},
//                    {day: 30, balance: 20},
//                    {day: 60, balance: 20},
//                    {day: 100, balance: 80}
//                    ]
//                    },
//                    target: {
//                    color:"Error",
//                    data: [
//                    {day: 0, balance: 0},
//                    {day: 30, balance: 30},
//                    {day: 60, balance: 40},
//                    {day: 100, balance: 90}
//                    ]
//                    },
//                    maxThreshold: {
//                    color: "Good",
//                    data: [
//                    {day: 0, balance: 0},
//                    {day: 30, balance: 40},
//                    {day: 60, balance: 50},
//                    {day: 100, balance: 100}
//                    ]
//                    },
//                    innerMaxThreshold: {
//                    color: "Error",
//                    data: [
//                    ]
//                    },
//                    innerMinThreshold: {
//                    color: "Neutral",
//                    data: [
//                    ]
//                    },
//                    minThreshold: {
//                    color: "Error",
//                    data: [
//                    {day: 0, balance: 0},
//                    {day: 30, balance: 20},
//                    {day: 60, balance: 30},
//                    {day: 100, balance: 70},
//                    ]
//                    },
//                    minXValue: 0,
//                    maxXValue: 100,
//                    minYValue: 0,
//                    maxYValue: 100,
//                    firstXLabel: { label: "June 123", color: "Error"   },
//                    lastXLabel: { label: "June 30", color: "Error" },
//                    firstYLabel: { label: "0M", color: "Good" },
//                    lastYLabel: { label: "80M", color: "Critical" },
//                    minLabel: { },
//                    maxLabel: { }
            };





            var oNVConfContS = new sap.suite.ui.commons.MicroAreaChart({
                width: "{/width}",
                height: "{/height}",
                size : "{/size}",
                target: buildChartItem("target"),
                innerMinThreshold: buildChartItem("innerMinThreshold"),
                innerMaxThreshold: buildChartItem("innerMaxThreshold"),
                minThreshold: buildChartItem("minThreshold"),
                maxThreshold: buildChartItem("maxThreshold"),
                chart: buildChartItem("chart"),
                minXValue: "{/minXValue}",
                maxXValue: "{/maxXValue}",
                minYValue: "{/minYValue}",
                maxYValue: "{/maxYValue}",
                firstXLabel: buildMACLabel("firstXLabel"),
                lastXLabel: buildMACLabel("lastXLabel"),
                firstYLabel: buildMACLabel("firstYLabel"),
                lastYLabel: buildMACLabel("lastYLabel"),
                minLabel: buildMACLabel("minLabel"),
                maxLabel: buildMACLabel("maxLabel")
            });

            var oNVConfS = new sap.suite.ui.commons.TileContent({
                unit : "{/unit}",
                size : "{/size}",
                footer : "{/footerNum}",
                content: oNVConfContS
            });

            this.oGenericTile = new sap.suite.ui.commons.GenericTile({
                subheader : "{/subheader}",
                frameType : "{/frameType}",
                size : "{/size}",
                header : "{/header}",
                tileContent : [oNVConfS]
            });

            var oGenericTileModel = new sap.ui.model.json.JSONModel();
            oGenericTileModel.setData(oGenericTileData);
            this.oGenericTile.setModel(oGenericTileModel);
            /* new tiles.indicatorArea.areaChartTileService({
                tile : oNVConfContS,
                kpiCode :'sap.hba.ecc.mm.pur.NonManagedSpend',// 'com.sap.PS.KPI10',
                variantId : 'sap.hba.ecc.mm.pur.NonManagedSpendLast7Days',//'com.sap.var2~I077920~2013-12-03 07:26:14.4960000',
            });
             */

            return this.oGenericTile;
        }
    });
}());

}; // end of sap/ushell/components/tiles/indicatorArea/AreaChartTile.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.indicatorDual.DualTile.view') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.indicatorDual.DualTile.view');
//Copyright (c) 2013 SAP AG, All Rights Reserved
//jQuery.sap.require("sap.ushell.components.tiles.Generic");
//Comparison Tile
(function () {
    "use strict";
    /*global jQuery, sap */
    /*jslint nomen: true */

    
    

    jQuery.sap.require('sap.ca.ui.model.format.NumberFormat'); // unlisted dependency retained

    sap.ui.getCore().loadLibrary("sap.suite.ui.commons");

    sap.ui.jsview("tiles.indicatorDual.DualTile", {
        getControllerName: function () {
            return "tiles.indicatorDual.DualTile";
        },
        createContent: function (oController) {

            this.setHeight('100%');
            this.setWidth('100%');

            var that = this;
            that.tileData;
            that.oGenericTileData = {

            };
            sap.ushell.components.tiles.indicatorTileUtils.util.getParsedChip(
                    that.getViewData().chip.configuration.getParameterValueAsString("tileConfiguration"), function(config){
                        that.oConfig = config;
                    });
            that.tileType = that.oConfig.TILE_PROPERTIES.tileType;

            that.oNumericContent = new sap.suite.ui.commons.NumericContent({
                value: "{/value}",
                scale: "{/scale}",
                unit: "{/unit}",
                indicator: "{/indicator}",
                size: "{/size}",
                formatterValue: "{/isFormatterValue}",
                truncateValueTo: 5,
                valueColor: "{/valueColor}",
                nullifyValue : false
            });

            that.oLeftTileContent = new sap.suite.ui.commons.TileContent({
                unit: "{/unit}",
                size: "{/size}",
                footer: "{/footerNum}",
                content: that.oNumericContent
            });

            switch (that.tileType) {

            case "DT-CM":
                var oCmprsData = new sap.suite.ui.commons.ComparisonData({

                    value : "{value}",
                    color : "{color}",
                    displayValue : "{displayValue}"
                });

                that.oComparisionContent = new sap.suite.ui.commons.ComparisonChart({
                    size : "{/size}",
                    scale : "{/scale}",
                    data : {
                        template : oCmprsData,
                        path : "/data"
                    }
                });
                
                that.oRightContent = new sap.suite.ui.commons.TileContent({
                    unit: "{/unit}",
                    size: "{/size}",
                    footer: "{/footerNum}",
                    content: that.oComparisionContent
                });
                break;

            case "DT-CT":
                var oCmprsData = new sap.suite.ui.commons.ComparisonData({

                    value : "{value}",
                    color : "{color}",
                    displayValue : "{displayValue}"
                });

                that.oContributionContent = new sap.suite.ui.commons.ComparisonChart({
                    size : "{/size}",
                    scale : "{/scale}",
                    data : {
                        template : oCmprsData,
                        path : "/data"
                    }
                });
                
                that.oRightContent = new sap.suite.ui.commons.TileContent({
                    unit: "{/unit}",
                    size: "{/size}",
                    footer: "{/footerNum}",
                    content: that.oContributionContent
                });
                break;

            case "DT-TT":

                var buildChartItem = function(sName){
                return new sap.suite.ui.commons.MicroAreaChartItem({
                    color: "Good",
                    points: {
                        path: "/" + sName + "/data",
                        template: new sap.suite.ui.commons.MicroAreaChartPoint({
                            x: "{day}",
                            y: "{balance}"

                        })
                    }
                });
            };

            var buildMACLabel = function(sName) {
                return new sap.suite.ui.commons.MicroAreaChartLabel({
                    label: "{/" + sName + "/label}",
                    color: "{/" + sName + "/color}"
                });
            };
            var areaChart = new sap.suite.ui.commons.MicroAreaChart({
                width: "{/width}",
                height: "{/height}",
                size : "{/size}",
                target: buildChartItem("target"),
                innerMinThreshold: buildChartItem("innerMinThreshold"),
                innerMaxThreshold: buildChartItem("innerMaxThreshold"),
                minThreshold: buildChartItem("minThreshold"),
                maxThreshold: buildChartItem("maxThreshold"),
                chart: buildChartItem("chart"),
                minXValue: "{/minXValue}",
                maxXValue: "{/maxXValue}",
                minYValue: "{/minYValue}",
                maxYValue: "{/maxYValue}",
                firstXLabel: buildMACLabel("firstXLabel"),
                lastXLabel: buildMACLabel("lastXLabel"),
                firstYLabel: buildMACLabel("firstYLabel"),
                lastYLabel: buildMACLabel("lastYLabel"),
                minLabel: buildMACLabel("minLabel"),
                maxLabel: buildMACLabel("maxLabel")
            });

            that.oRightContent = new sap.suite.ui.commons.TileContent({
                unit : "{/unit}",
                size : "{/size}",
                content: areaChart
            });
            break;

            case "DT-AT":
                var oBCDataTmpl = new sap.suite.ui.commons.BulletChartData({
                    value: "{value}",
                    color: "{color}"
                });

                var oBChart = new sap.suite.ui.commons.BulletChart({
                    size: sap.suite.ui.commons.InfoTileSize.Auto,
                    scale: "{/scale}",
                    actual: {
                        value: "{/actual/value}",
                        color: "{/actual/color}"
                    },
                    targetValue: "{/targetValue}",
                    actualValueLabel: "{/actualValueLabel}",
                    targetValueLabel: "{/targetValueLabel}",
                    thresholds: {
                        template: oBCDataTmpl,
                        path: "/thresholds"
                    },
                    state: "{/state}",
                    showActualValue: "{/showActualValue}",
                    showTargetValue: "{/showTargetValue}"
                });

                that.oRightContent = new sap.suite.ui.commons.TileContent({
                    unit : "{/unit}",
                    size : "{/size}",
                    footer : "{/footerNum}",
                    content: oBChart
                });
                break;

            }

            that.oGenericTile = new sap.suite.ui.commons.GenericTile({
                subheader : "{/subheader}",
                frameType : "TwoByOne",
                size : "{/size}",
                header : "{/header}",
                tileContent : [that.oLeftTileContent,that.oRightContent]
            });


            that.oGenericTileModel = new sap.ui.model.json.JSONModel();
            that.oGenericTileModel.setData(that.oGenericTileData);
            that.oGenericTile.setModel(that.oGenericTileModel);

            return that.oGenericTile;
        }
    });
}());

}; // end of sap/ushell/components/tiles/indicatorDual/DualTile.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.indicatorDualComparison.DualComparison.view') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.indicatorDualComparison.DualComparison.view');
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

//Comparison Tile
(function () {
    "use strict";
    /*global jQuery, sap */
    /*jslint nomen: true */

    
    jQuery.sap.require('sap.ui.model.analytics.odata4analytics'); // unlisted dependency retained

    jQuery.sap.require('sap.ca.ui.model.format.NumberFormat'); // unlisted dependency retained

    sap.ui.getCore().loadLibrary("sap.suite.ui.commons");

    sap.ui.jsview("tiles.indicatorDualComparison.DualComparison", {
        getControllerName: function () {
            return "tiles.indicatorDualComparison.DualComparison";
        },
        createContent: function (oController) {
            this.setHeight('100%');
            this.setWidth('100%');

            var that = this;
            that.tileData;

            that.oGenericTileData = {

            };

            that.oNumericContent = new sap.suite.ui.commons.NumericContent({
                value: "{/value}",
                scale: "{/scale}",
                unit: "{/unit}",
                indicator: "{/indicator}",
                size: "{/size}",
                formatterValue: true,
                truncateValueTo: 6,
                valueColor: "{/valueColor}"
            });

            that.oNumericTile = new sap.suite.ui.commons.TileContent({
                unit: "{/unit}",
                size: "{/size}",
                footer: "{/footerNum}",
                content: that.oNumericContent
            });

            that.oCmprsDataTmpl = new sap.suite.ui.commons.ComparisonData({
                title : "{title}",
                value : "{value}",
                color : "{color}",
                displayValue : "{displayValue}"
            });

            that.oCmprsChrtTmpl = new sap.suite.ui.commons.ComparisonChart({
                size : "{/size}",
                scale : "{/scale}",
                data : {
                    template : that.oCmprsDataTmpl,
                    path : "/data"
                }
            });

            that.oComparisonTile = new sap.suite.ui.commons.TileContent({
                unit : "{/unit}",
                size : "{/size}",
                footer : "{/footerComp}",
                content : that.oCmprsChrtTmpl
            });


            that.oGenericTile = new sap.suite.ui.commons.GenericTile({
                subheader : "{/subheader}",
                frameType : "{/frameType}",
                size : "{/size}",
                header : "{/header}",
                tileContent : [that.oNumericTile,that.oComparisonTile]//that.oComparisonTile]
            });


            that.oGenericTileModel = new sap.ui.model.json.JSONModel();
            that.oGenericTileModel.setData(that.oGenericTileData);
            that.oGenericTile.setModel(that.oGenericTileModel);

            return that.oGenericTile;


        }
    });
}());

}; // end of sap/ushell/components/tiles/indicatorDualComparison/DualComparison.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.indicatorDualContribution.DualContribution.view') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.indicatorDualContribution.DualContribution.view');
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

//Comparison Tile
(function () {
    "use strict";
    /*global jQuery, sap */
    /*jslint nomen: true */

    
    jQuery.sap.require('sap.ui.model.analytics.odata4analytics'); // unlisted dependency retained

    jQuery.sap.require('sap.ca.ui.model.format.NumberFormat'); // unlisted dependency retained

    sap.ui.getCore().loadLibrary("sap.suite.ui.commons");

    sap.ui.jsview("tiles.indicatorDualContribution.DualContribution", {
        getControllerName: function () {
            return "tiles.indicatorDualContribution.DualContribution";
        },
        createContent: function (oController) {
            this.setHeight('100%');
            this.setWidth('100%');

            var that = this;
            that.tileData;

            that.oGenericTileData = {
            };

            that.oNumericContent = new sap.suite.ui.commons.NumericContent({
                value: "{/value}",
                scale: "{/scale}",
                indicator: "{/indicator}",
                size: "{/size}",
                formatterValue: true,
                truncateValueTo: 6,
                valueColor: "{/valueColor}"
            });

            that.oNumericTile = new sap.suite.ui.commons.TileContent({
                unit: "{/unitNumeric}",
                size: "{/size}",
                footer: "{/footerNum}",
                content: that.oNumericContent
            });

            that.oCmprsDataTmpl = new sap.suite.ui.commons.ComparisonData({
                title : "{title}",
                value : "{value}",
                color : "{color}",
                displayValue : "{displayValue}"
            });

            that.oCmprsChrtTmpl = new sap.suite.ui.commons.ComparisonChart(
                    {
                        size : "{/size}",
                        scale : "{/scale}",
                        data : {
                            template : that.oCmprsDataTmpl,
                            path : "/data"
                        }
                    });

            that.oComparisonTile = new sap.suite.ui.commons.TileContent({
                unit : "{/unitContribution}",
                size : "{/size}",
                footer : "{/footerComp}",
                content : that.oCmprsChrtTmpl
            });


            that.oGenericTile = new sap.suite.ui.commons.GenericTile({
                subheader : "{/subheader}",
                frameType : "{/frameType}",
                size : "{/size}",
                header : "{/header}",
                tileContent : [that.oNumericTile, that.oComparisonTile]//that.oComparisonTile]
            });


            that.oGenericTileModel = new sap.ui.model.json.JSONModel();
            that.oGenericTileModel.setData(that.oGenericTileData);
            that.oGenericTile.setModel(that.oGenericTileModel);

            return that.oGenericTile;


        }
    });
}());

}; // end of sap/ushell/components/tiles/indicatorDualContribution/DualContribution.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.indicatorDualDeviation.DualDeviation.view') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.indicatorDualDeviation.DualDeviation.view');
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap */
    /*jslint nomen: true */

    
    jQuery.sap.require('sap.ui.model.analytics.odata4analytics'); // unlisted dependency retained

    jQuery.sap.require('sap.ca.ui.model.format.NumberFormat'); // unlisted dependency retained

    sap.ui.getCore().loadLibrary("sap.suite.ui.commons");

    sap.ui.jsview("tiles.indicatorDualDeviation.DualDeviation", {
        getControllerName: function () {
            return "tiles.indicatorDualDeviation.DualDeviation";
        },
        createContent: function (oController) {
            var that = this;
            this.setHeight('100%');
            this.setWidth('100%');
            /*var preview =*/ this.getViewData().chip.preview;
            var header = "Lorem ipsum";
            var subheader =  "Lorem ipsum";
            var titleObj = sap.ushell.components.tiles.indicatorTileUtils.util.getTileTitleSubtitle(this.getViewData().chip);
            if (titleObj.title && titleObj.subTitle){
                 header = titleObj.title;
                 subheader = titleObj.subTitle;
            }
            var deviationTileData = {
                    subheader : subheader,
                    header : header,
                    footerNum : "",
                    footerComp : "",
                    frameType:"TwoByOne",
                    state: sap.suite.ui.commons.LoadState.Loading,
                    scale: ""
//                    actual: { value: 120, color: sap.suite.ui.commons.InfoTileValueColor.Good},
//                    targetValue: 100,
//                    thresholds: [
//                                 { value: 0, color: sap.suite.ui.commons.InfoTileValueColor.Error },
//                                 { value: 50, color: sap.suite.ui.commons.InfoTileValueColor.Critical },
//                                 { value: 150, color: sap.suite.ui.commons.InfoTileValueColor.Critical },
//                                 { value: 200, color: sap.suite.ui.commons.InfoTileValueColor.Error }
//                                 ],
//                    showActualValue: true,
//                    showTargetValue: true
            };

            that.oNumericContent = new sap.suite.ui.commons.NumericContent({
                value: "{/value}",
                scale: "{/scale}",
                unit: "{/unit}",
                indicator: "{/indicator}",
                size: "{/size}",
                formatterValue: true,
                truncateValueTo: 6,
                valueColor: "{/valueColor}"
            });

            that.oNumericTile = new sap.suite.ui.commons.TileContent({
                unit: "{/unit}",
                size: "{/size}",
                footer: "{/footerNum}",
                content: that.oNumericContent
            });

            var oBCDataTmpl = new sap.suite.ui.commons.BulletChartData({
                value: "{value}",
                color: "{color}"
            });

            that.oBCTmpl = new sap.suite.ui.commons.BulletChart({
                size: sap.suite.ui.commons.InfoTileSize.Auto,
                scale: "{/scale}",
                actual: {
                    value: "{/actual/value}",
                    color: "{/actual/color}"
                },
                targetValue: "{/targetValue}",
                actualValueLabel: "{/actualValueLabel}",
                targetValueLabel: "{/targetValueLabel}",
                thresholds: {
                    template: oBCDataTmpl,
                    path: "/thresholds"
                },
                state: "{/state}",
                showActualValue: "{/showActualValue}",
                showTargetValue: "{/showTargetValue}"
            });

            var oNVConfS = new sap.suite.ui.commons.TileContent({
                unit : "{/unit}",
                size : "{/size}",
                footer : "{/footerNum}",
                content: that.oBCTmpl
            });

            that.oGenericTile = new sap.suite.ui.commons.GenericTile({
                subheader : "{/subheader}",
                frameType : "{/frameType}",
                size : "{/size}",
                header : "{/header}",
                tileContent : [that.oNumericTile,oNVConfS]
            });

            var oGenericTileModel = new sap.ui.model.json.JSONModel();
            oGenericTileModel.setData(deviationTileData);
            that.oGenericTile.setModel(oGenericTileModel);

            return that.oGenericTile;
        }
    });
}());

}; // end of sap/ushell/components/tiles/indicatorDualDeviation/DualDeviation.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.indicatorDualTrend.DualTrend.view') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.indicatorDualTrend.DualTrend.view');
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap */
    /*jslint nomen: true */

    
    jQuery.sap.require('sap.ui.model.analytics.odata4analytics'); // unlisted dependency retained

    jQuery.sap.require('sap.ca.ui.model.format.NumberFormat'); // unlisted dependency retained

    sap.ui.getCore().loadLibrary("sap.suite.ui.commons");

    sap.ui.jsview("tiles.indicatorDualTrend.DualTrend", {
        getControllerName: function () {
            return "tiles.indicatorDualTrend.DualTrend";
        },
        createContent: function (oController) {
            this.setHeight('100%');
            this.setWidth('100%');
//            var preview = this.getViewData().chip.preview;
////            var header = "Lorem ipsum";
////            var subheader =  "Lorem ipsum";
//            if (preview && preview.getTitle()){
//               /*header =*/ preview.getTitle();
//               /* subheader =*/ preview.getDescription();
//            }
            var buildChartItem = function(sName) {
                return new sap.suite.ui.commons.MicroAreaChartItem({
                    color: "Good",
                    points: {
                        path: "/" + sName + "/data",
                        template: new sap.suite.ui.commons.MicroAreaChartPoint({
                            x: "{day}",
                            y: "{balance}"

                        })
                    }
                });
            };




            var buildMACLabel = function(sName) {
                return new sap.suite.ui.commons.MicroAreaChartLabel({
                    label: "{/" + sName + "/label}",
                    color: "{/" + sName + "/color}"
                });
            };

            var oGenericTileData = {

                    footer : "",
                    header : "",
                    subheader : ""
//                    footerNum : "",
//                    footerComp : "",
//                    scale: "",
//                    unit: "",
//                    value: 8888,
//                    size:"Auto",
//                    frameType:"OneByOne",
//                    state: sap.suite.ui.commons.LoadState.Loading,
                    /* valueColor:sap.suite.ui.commons.InfoTileValueColor.Error,
                    indicator: sap.suite.ui.commons.DeviationIndicator.None,*/
//                    title : "US Profit Margin",
//                    footer : "",
//                    description: "",
//
//                    width: "100%",
//                    height: "100%",
//                    chart: {
//                        color:"Good",
//                        data: [
//                               {day: 0, balance: 0},
//                               {day: 30, balance: 20},
//                               {day: 60, balance: 20},
//                               {day: 100, balance: 80}
//                               ]
//                    },
//                    target: {
//                        color:"Error",
//                        data: [
//                               {day: 0, balance: 0},
//                               {day: 30, balance: 30},
//                               {day: 60, balance: 40},
//                               {day: 100, balance: 90}
//                               ]
//                    },
//                    maxThreshold: {
//                        color: "Good",
//                        data: [
//                               {day: 0, balance: 0},
//                               {day: 30, balance: 40},
//                               {day: 60, balance: 50},
//                               {day: 100, balance: 100}
//                               ]
//                    },
//                    innerMaxThreshold: {
//                        color: "Error",
//                        data: [
//                               ]
//                    },
//                    innerMinThreshold: {
//                        color: "Neutral",
//                        data: [
//                               ]
//                    },
//                    minThreshold: {
//                        color: "Error",
//                        data: [
//                               {day: 0, balance: 0},
//                               {day: 30, balance: 20},
//                               {day: 60, balance: 30},
//                               {day: 100, balance: 70},
//                               ]
//                    },
//                    minXValue: 0,
//                    maxXValue: 100,
//                    minYValue: 0,
//                    maxYValue: 100,
//                    firstXLabel: { label: "June 123", color: "Error"   },
//                    lastXLabel: { label: "June 30", color: "Error" },
//                    firstYLabel: { label: "0M", color: "Good" },
//                    lastYLabel: { label: "80M", color: "Critical" },
//                    minLabel: { },
//                    maxLabel: { }
            };





            var oNVConfContS = new sap.suite.ui.commons.MicroAreaChart({
                width: "{/width}",
                height: "{/height}",
                size : "{/size}",
                target: buildChartItem("target"),
                innerMinThreshold: buildChartItem("innerMinThreshold"),
                innerMaxThreshold: buildChartItem("innerMaxThreshold"),
                minThreshold: buildChartItem("minThreshold"),
                maxThreshold: buildChartItem("maxThreshold"),
                chart: buildChartItem("chart"),
                minXValue: "{/minXValue}",
                maxXValue: "{/maxXValue}",
                minYValue: "{/minYValue}",
                maxYValue: "{/maxYValue}",
                firstXLabel: buildMACLabel("firstXLabel"),
                lastXLabel: buildMACLabel("lastXLabel"),
                firstYLabel: buildMACLabel("firstYLabel"),
                lastYLabel: buildMACLabel("lastYLabel"),
                minLabel: buildMACLabel("minLabel"),
                maxLabel: buildMACLabel("maxLabel")
            });

            var oNVConfS = new sap.suite.ui.commons.TileContent({
                unit : "{/unit}",
                size : "{/size}",

                content: oNVConfContS
            });
            var oNumericContent = new sap.suite.ui.commons.NumericContent({


                value: "{/value}",
                scale: "{/scale}",
                unit: "{/unit}",
                indicator: "{/indicator}",
                size: "{/size}",
                formatterValue: true,
                truncateValueTo: 6,
                valueColor: "{/valueColor}"
            });

            var oNumericTile = new sap.suite.ui.commons.TileContent({
                unit: "{/unit}",
                size: "{/size}",
                content: oNumericContent
            });

            this.oGenericTile = new sap.suite.ui.commons.GenericTile({
                subheader : "{/subheader}",
                frameType : "TwoByOne",
                size : "{/size}",
                header : "{/header}",
                tileContent : [oNumericTile,oNVConfS]
            });

            var oGenericTileModel = new sap.ui.model.json.JSONModel();
            oGenericTileModel.setData(oGenericTileData);
            this.oGenericTile.setModel(oGenericTileModel);
            /* new tiles.indicatorArea.areaChartTileService({
                tile : oNVConfContS,
                kpiCode :'sap.hba.ecc.mm.pur.NonManagedSpend',// 'com.sap.PS.KPI10',
                variantId : 'sap.hba.ecc.mm.pur.NonManagedSpendLast7Days',//'com.sap.var2~I077920~2013-12-03 07:26:14.4960000',
            });
             */

            return this.oGenericTile;
        }
    });
}());

}; // end of sap/ushell/components/tiles/indicatorDualTrend/DualTrend.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.indicatorHarveyBall.HarveyBallTile.view') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.indicatorHarveyBall.HarveyBallTile.view');
(function () {
    "use strict";
    /*global jQuery, sap */
    /*jslint nomen: true */
    
    jQuery.sap.require('sap.ui.model.analytics.odata4analytics'); // unlisted dependency retained

    jQuery.sap.require('sap.ca.ui.model.format.NumberFormat'); // unlisted dependency retained

    sap.ui.getCore().loadLibrary("sap.suite.ui.commons");

    sap.ui.jsview("tiles.indicatorHarveyBall.HarveyBallTile", {
        getControllerName: function () {
            //return "tiles.indicatorHarveyBall.HarveyBallTile"; commented to prevent the tile from loading
        },
        createContent: function (oController) {
            var microChart = new sap.suite.ui.commons.HarveyBallMicroChart({
                total:"{/value}",
                size:"{/size}",
                totalLabel:"{/totalLabel}",
                items:[new sap.suite.ui.commons.HarveyBallMicroChartItem({
                           fraction:"{/fractionValue}",
                           fractionLabel:"{/fractionLabel}",
                           color: "{/color}"
                       })]
            });

            var tileContent = new sap.suite.ui.commons.TileContent({
                size : "{/size}",
                content: microChart
            });

            this.oTile = new sap.suite.ui.commons.GenericTile({
                subheader : "{/subheader}",
                frameType : "{/frameType}",
                size : "{/size}",
                header : "{/header}",
                tileContent : [tileContent]
            });
            //return this.oTile; commented to prevent the tile from loading
        }
    });
}());

}; // end of sap/ushell/components/tiles/indicatorHarveyBall/HarveyBallTile.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.indicatorcomparison.ComparisonTile.controller') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.indicatorcomparison.ComparisonTile.controller');


(function () {
    "use strict";
    sap.ushell.components.tiles.generic.extend("tiles.indicatorcomparison.ComparisonTile", {
        onInit :  function(){
            this.KPI_VALUE_REQUIRED = false;
        },

        doProcess : function(){

            var that = this;
            this.setTextInTile();
            this.fetchChartData(function(kpiValue){
                this.CALCULATED_KPI_VALUE = kpiValue;
                this._updateTileModel({
                    data : this.CALCULATED_KPI_VALUE
                });
                if (that.oConfig.TILE_PROPERTIES.frameType == sap.suite.ui.commons.FrameType.TwoByOne){
                    that.oKpiTileView.oGenericTile.setFrameType(sap.suite.ui.commons.FrameType.TwoByOne);
                    that.oKpiTileView.oGenericTile.removeAllTileContent();
                    that.oKpiTileView.oGenericTile.addTileContent(that.oKpiTileView.oComparisonTile);
                    var columnNames = {};
                    columnNames.data = this.CALCULATED_KPI_VALUE;
                    that.getView().getViewData().parentController._updateTileModel(columnNames);
                    that.getView().getViewData().deferredObj.resolve();
                } else {
                    that.oKpiTileView.oGenericTile.setFrameType(sap.suite.ui.commons.FrameType.OneByOne);
                    that.oKpiTileView.oGenericTile.removeAllTileContent();
                    that.oKpiTileView.oGenericTile.addTileContent(that.oKpiTileView.oComparisonTile);
                    var navTarget = sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system);
                    that.oKpiTileView.oGenericTile.$().wrap("<a href ='" + navTarget + "'/>");
                    this.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);
                }
                this.setToolTip(null,this.CALCULATED_KPI_VALUE,"COMP");
            }, this.logError);

        },


        fetchChartData: function(fnSuccess, fnError){
            function checkIfDataPresent(data,columnNames){
                var isPresent = false;
                if (data && data.results && data.results.length){
                    for (var i = 0, l = columnNames.length; i < l && !isPresent; i++) {
                        isPresent = data.results[0][columnNames[i].COLUMN_NAME] !== null;
                    }
                }
                return isPresent;
            }

            var that = this;

            try {
                /* Preparing arguments for the prepareQueryServiceUri function */
                var sUri = this.oConfig.EVALUATION.ODATA_URL;
                var entitySet = this.oConfig.EVALUATION.ODATA_ENTITYSET;
                var measure = this.oConfig.EVALUATION.COLUMN_NAME;
                var measures = measure;
                if (this.oConfig.TILE_PROPERTIES.COLUMN_NAMES){
                    for (var j = 0; j < this.oConfig.TILE_PROPERTIES.COLUMN_NAMES.length; j++){
                        if (this.oConfig.TILE_PROPERTIES.COLUMN_NAMES[j].COLUMN_NAME != this.oConfig.EVALUATION.COLUMN_NAME) {
                            measures = measures + "," + this.oConfig.TILE_PROPERTIES.COLUMN_NAMES[j].COLUMN_NAME;
                        }

                    }
                } else {
                    for (var j = 0; j < this.oConfig.EVALUATION.COLUMN_NAMES.length; j++){
                        if (this.oConfig.EVALUATION.COLUMN_NAMES[j].COLUMN_NAME != this.oConfig.EVALUATION.COLUMN_NAME) {
                            measures = measures + "," + this.oConfig.EVALUATION.COLUMN_NAMES[j].COLUMN_NAME;
                        }
                    }
                }

                //var data = this.oConfig.EVALUATION_VALUES;
                var cachedValue = sap.ushell.components.tiles.indicatorTileUtils.cache.getKpivalueById(that.oConfig.TILE_PROPERTIES.id);
                if (!cachedValue){
                    var variants = sap.ushell.components.tiles.indicatorTileUtils.util.prepareFilterStructure(this.oConfig.EVALUATION_FILTERS,this.oConfig.ADDITIONAL_FILTERS);

                   /* commented by chan i077843.. sorting is not required
                    * var orderByObject = {};
                    orderByObject["0"] = measure + ",asc";
                    orderByObject["1"] = measure + ",desc";

                    var orderByElement = orderByObject[this.oConfig.TILE_PROPERTIES.sortOrder || "0"].split(",");
                    */
                    var finalQuery = sap.ushell.components.tiles.indicatorTileUtils.util.prepareQueryServiceUri(that.oTileApi.url.addSystemToServiceUrl(sUri), entitySet, measures,null, variants, 3);
                    /*
                     *  commented by chan i077843.. sorting is not required
                     *
                     if (this.oConfig.TILE_PROPERTIES.semanticMeasure) {
                        finalQuery.uri += "&$orderby=" + orderByElement[0] + " " + orderByElement[2];
                    } else {
                        finalQuery.uri += "&$orderby=" + orderByElement[0] + " " + orderByElement[1];
                    }*/


                    this.comparisionChartODataRef = finalQuery.model.read(finalQuery.uri, null, null, true, function(data) {
                        var writeData = {};
                        if (finalQuery.unit){
                            writeData.unit = finalQuery.unit;

                        }

                        if (checkIfDataPresent(data,that.oConfig.TILE_PROPERTIES.COLUMN_NAMES || that.oConfig.EVALUATION.COLUMN_NAMES)) {


                            that.oConfig.TILE_PROPERTIES.FINALVALUE = data;
                            that.oConfig.TILE_PROPERTIES.FINALVALUE = that._processDataForComparisonChart(that.oConfig.TILE_PROPERTIES.FINALVALUE,measures.split(",")[0], finalQuery.unit);
                            if (sap.ushell.components.tiles.indicatorTileUtils.cache.getKpivalueById(that.oConfig.TILE_PROPERTIES.id)){
                                writeData = sap.ushell.components.tiles.indicatorTileUtils.cache.getKpivalueById(that.oConfig.TILE_PROPERTIES.id);
                                writeData.data = data;
                            } else {
                                writeData.data = data;
                            }
                            sap.ushell.components.tiles.indicatorTileUtils.cache.setKpivalueById(that.oConfig.TILE_PROPERTIES.id, writeData);
                            fnSuccess.call(that,that.oConfig.TILE_PROPERTIES.FINALVALUE);
                        } else if (data.results.length == 0){
                            that.oConfig.TILE_PROPERTIES.FINALVALUE = data;
                            if (sap.ushell.components.tiles.indicatorTileUtils.cache.getKpivalueById(that.oConfig.TILE_PROPERTIES.id)){
                                writeData = sap.ushell.components.tiles.indicatorTileUtils.cache.getKpivalueById(that.oConfig.TILE_PROPERTIES.id);
                                writeData.data = data;
                            } else {
                                writeData.data = data;
                            }
                            sap.ushell.components.tiles.indicatorTileUtils.cache.setKpivalueById(that.oConfig.TILE_PROPERTIES.id, writeData);
                            fnSuccess.call(that,that.oConfig.TILE_PROPERTIES.FINALVALUE);
                            that.setNoData();
                        } else {
                            that.setNoData();
                        }
                    },function(eObject) {
                        if (eObject && eObject.response) {
                            jQuery.sap.log.error(eObject.message  + " : " + eObject.request.requestUri);
                            fnError.call(that, eObject);
                        }
                    });
                } else {

                    if (cachedValue.data && checkIfDataPresent(cachedValue.data,that.oConfig.TILE_PROPERTIES.COLUMN_NAMES || that.oConfig.EVALUATION.COLUMN_NAMES)) {

                        that.oConfig.TILE_PROPERTIES.FINALVALUE = cachedValue.data;
                        that.oConfig.TILE_PROPERTIES.FINALVALUE = that._processDataForComparisonChart(that.oConfig.TILE_PROPERTIES.FINALVALUE, measures, cachedValue.unit);
                        fnSuccess.call(that,that.oConfig.TILE_PROPERTIES.FINALVALUE);
                    } else {
                        that.oConfig.TILE_PROPERTIES.FINALVALUE = cachedValue.data;
                        fnSuccess.call(that,that.oConfig.TILE_PROPERTIES.FINALVALUE);
                        that.setNoData();
                    }
                }
            } catch(e) {
                fnError.call(that,e);
            }
        },
        _processDataForComparisonChart: function(data, measure, unit) {

            var finalOutput = [], LABEL_MAPPING = {}, i, tempObject, l;
            var tempVar;
            var aTitles = [];
            var that = this;
            var unitValue = null;
            for (i = 0; i < data.results.length; i++) {
                var eachData = data.results[i];
            }
            aTitles = sap.ushell.components.tiles.indicatorTileUtils.util.getAllMeasuresWithLabelText(this.oConfig.EVALUATION.ODATA_URL, this.oConfig.EVALUATION.ODATA_ENTITYSET);
            for (i = 0 , l = aTitles.length; i < l; i++) {
                tempObject = aTitles[i];
                LABEL_MAPPING[tempObject.key] = tempObject.value;
            }

            var columnName = that.oConfig.TILE_PROPERTIES.COLUMN_NAMES ||  that.oConfig.EVALUATION.COLUMN_NAMES;
            for (i = 0; i < columnName.length; i++){
                var temp = {};
                var columnObject = columnName[i];
                temp.value = Number(eachData[columnObject.COLUMN_NAME]);
                var calculatedValueForScaling = Number(eachData[columnObject.COLUMN_NAME]);
                
                var isEvaluationThresholdMeasure = false;
                var scaling = 0;
                var tMeasures = that._getEvaluationThresholdMeasures();
                var mIndex = jQuery.inArray(columnObject.COLUMN_NAME, tMeasures);
                if (mIndex > -1 ) {
                   /* the measure is a kpi measure or a threshold measure */
                      isEvaluationThresholdMeasure = true;
                       scaling = that.oConfig.EVALUATION.SCALING;
                }
                
                if (that.oConfig.EVALUATION.SCALING == -2 && isEvaluationThresholdMeasure) {
                    calculatedValueForScaling *= 100;
                }
                var c = that.isACurrencyMeasure(columnObject.COLUMN_NAME);
                if (unit && unit[i] && eachData[unit[i].name]) {
                    unitValue = eachData[unit[i].name];
                }
                tempVar = sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(calculatedValueForScaling, scaling, that.oConfig.EVALUATION.SCALING,that.oConfig.EVALUATION.DECIMAL_PRECISION, c, unitValue);
                if (that.oConfig.EVALUATION.SCALING == -2 && isEvaluationThresholdMeasure) {
                    tempVar += " %";
                }
                temp.displayValue = tempVar.toString();
                if (unit) {
                    if (unit[i] && eachData[unit[i].name]){
                        temp.displayValue += " " + eachData[unit[i].name];
                    }
                }
                temp.color = columnObject.semanticColor;
                temp.title = LABEL_MAPPING[columnObject.COLUMN_NAME] || columnObject.COLUMN_NAME;

                finalOutput.push(temp);

            }

            return finalOutput;
        },

        doDummyProcess : function(){
            var that = this;
            this.setTextInTile();
            that._updateTileModel({
                value: 8888,
                size: sap.suite.ui.commons.InfoTileSize.Auto,
                frameType : sap.suite.ui.commons.FrameType.OneByOne,
                state: sap.suite.ui.commons.LoadState.Loading,
                valueColor:sap.suite.ui.commons.InfoTileValueColor.Error,
                indicator: sap.suite.ui.commons.DeviationIndicator.None,
                title : "Liquidity Structure",
                footer : "Current Quarter",
                description: "Apr 1st 2013 (B$)",
                data: [
                   { title: "Measure 1", value: 1.2, color: "Good" },
                   { title: "Measure 2", value: 0.78, color: "Good" },
                   { title: "Measure 3", value: 1.4, color: "Error" }
                ]
            });
            this.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);
        }

    });

}());

}; // end of sap/ushell/components/tiles/indicatorcomparison/ComparisonTile.controller.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.indicatorcontribution.ContributionTile.controller') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.indicatorcontribution.ContributionTile.controller');

(function () {
    "use strict";
    sap.ushell.components.tiles.generic.extend("tiles.indicatorcontribution.ContributionTile", {
        onInit :  function(){
            this.KPI_VALUE_REQUIRED = false;
        },

        doProcess : function(){
            var that = this;
            this.DEFINITION_DATA = this.oConfig;
            this._updateTileModel(this.DEFINITION_DATA);
            this.setTextInTile();
            this.fetchChartData(function(kpiValue){
                this.CALCULATED_KPI_VALUE = kpiValue;
                this._updateTileModel({
                    data : this.CALCULATED_KPI_VALUE
                });
                if (that.oConfig.TILE_PROPERTIES.frameType == sap.suite.ui.commons.FrameType.TwoByOne) {
                    that.oKpiTileView.oGenericTile.setFrameType(sap.suite.ui.commons.FrameType.TwoByOne);
                    that.oKpiTileView.oGenericTile.removeAllTileContent();
                    that.getView().getViewData().parentController._updateTileModel(this.getTile().getModel().getData());
                    that.getView().getViewData().deferredObj.resolve();
                } else {
                    that.oKpiTileView.oGenericTile.setFrameType(sap.suite.ui.commons.FrameType.OneByOne);
                    that.oKpiTileView.oGenericTile.removeAllTileContent();
                    that.oKpiTileView.oGenericTile.addTileContent(that.oKpiTileView.oComparisonTile);
                    var navTarget = sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system);
                    that.oKpiTileView.oGenericTile.$().wrap("<a href ='" + navTarget + "'/>");
                    this.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);
                }

                this.setToolTip(null,this.CALCULATED_KPI_VALUE,"CONT");
            }, this.logError);

        },


        fetchChartData : function(fnSuccess, fnError){

            var that = this;

            try {
                /* Preparing arguments for the prepareQueryServiceUri function */
                var sUri = this.oConfig.EVALUATION.ODATA_URL;
                var entitySet = this.oConfig.EVALUATION.ODATA_ENTITYSET;
                /*var sThresholdObject =*/ that.setThresholdValues();
                if (this.oConfig.TILE_PROPERTIES.semanticMeasure){
                    /*
                     * Semantic Measure Inclusion (for Future use)
                     * var measure = [];
                     * measure.push(this.oConfig.EVALUATION.COLUMN_NAME);
                     * measure.push(this.oConfig.TILE_PROPERTIES.semanticMeasure);
                     * */
                    var measure = this.oConfig.EVALUATION.COLUMN_NAME + "," + this.oConfig.TILE_PROPERTIES.semanticMeasure;
                } else {
                    var measure = this.oConfig.EVALUATION.COLUMN_NAME;
                }
                var unitProperty = null;
                var dimension = this.oConfig.TILE_PROPERTIES.dimension;
                /*var data =*/ this.oConfig.EVALUATION_VALUES;
                var cachedValue = sap.ushell.components.tiles.indicatorTileUtils.cache.getKpivalueById(that.oConfig.TILE_PROPERTIES.id);
                if (!cachedValue) {
                    var variants = sap.ushell.components.tiles.indicatorTileUtils.util.prepareFilterStructure(this.oConfig.EVALUATION_FILTERS,this.oConfig.ADDITIONAL_FILTERS);
                    var orderByObject = {};
                    orderByObject["0"] = measure + ",asc";
                    orderByObject["1"] = measure + ",desc";
                    orderByObject["2"] = dimension + ",asc";
                    orderByObject["3"] = dimension + ",desc";
                    var orderByElement = orderByObject[this.oConfig.TILE_PROPERTIES.sortOrder || "0"].split(",");
                    var finalQuery = sap.ushell.components.tiles.indicatorTileUtils.util.prepareQueryServiceUri(that.oTileApi.url.addSystemToServiceUrl(sUri), entitySet, measure, dimension, variants, 3);
                    if (this.oConfig.TILE_PROPERTIES.semanticMeasure) {
                        finalQuery.uri += "&$top=3&$orderby=" + orderByElement[0] + " " + orderByElement[2];
                    } else {
                        finalQuery.uri += "&$top=3&$orderby=" + orderByElement[0] + " " + orderByElement[1];
                    }

                    this.comparisionChartODataRef = finalQuery.model.read(finalQuery.uri, null, null, true, function(data) {
                        var writeData = {};
                        if (data && data.results && data.results.length) {
                            if (finalQuery.unit[0]) {
                                that._updateTileModel({
                                    unit : data.results[0][finalQuery.unit[0].name]
                                });
                                unitProperty = finalQuery.unit[0].name;
                                writeData.unit = finalQuery.unit[0];
                                writeData.unit.name = finalQuery.unit[0].name;
                            }
                            dimension = sap.ushell.components.tiles.indicatorTileUtils.util.findTextPropertyForDimension(that.oTileApi.url.addSystemToServiceUrl(sUri), entitySet, dimension);
                            writeData.dimension = dimension;
                            that.oConfig.TILE_PROPERTIES.FINALVALUE = data;
                            that.oConfig.TILE_PROPERTIES.FINALVALUE = that._processDataForComparisonChart(that.oConfig.TILE_PROPERTIES.FINALVALUE,measure.split(",")[0],dimension, unitProperty);
                            if (sap.ushell.components.tiles.indicatorTileUtils.cache.getKpivalueById(that.oConfig.TILE_PROPERTIES.id)){
                                writeData = sap.ushell.components.tiles.indicatorTileUtils.cache.getKpivalueById(that.oConfig.TILE_PROPERTIES.id);
                                writeData.data = data;
                            } else {
                                writeData.data = data;
                            }
                            sap.ushell.components.tiles.indicatorTileUtils.cache.setKpivalueById(that.oConfig.TILE_PROPERTIES.id, writeData);
                            fnSuccess.call(that,that.oConfig.TILE_PROPERTIES.FINALVALUE);
                        } else if (data.results.length == 0) {
                            that.oConfig.TILE_PROPERTIES.FINALVALUE = data;
                            if (sap.ushell.components.tiles.indicatorTileUtils.cache.getKpivalueById(that.oConfig.TILE_PROPERTIES.id)){
                                writeData = sap.ushell.components.tiles.indicatorTileUtils.cache.getKpivalueById(that.oConfig.TILE_PROPERTIES.id);
                                writeData.data = data;
                            } else {
                                writeData.data = data;
                            }
                            sap.ushell.components.tiles.indicatorTileUtils.cache.setKpivalueById(that.oConfig.TILE_PROPERTIES.id, writeData);
                            fnSuccess.call(that,that.oConfig.TILE_PROPERTIES.FINALVALUE);
                            that.setNoData();
                        } else {
                            that.setNoData();
                        }
                    },function(eObject) {
                        if (eObject && eObject.response) {
                            jQuery.sap.log.error(eObject.message + " : " + eObject.request.requestUri);
                            fnError.call(that, eObject);
                        }
                    });
                } else {
                    if (cachedValue.data && cachedValue.data.results && cachedValue.data.results.length) {
                        if (cachedValue.unit){
                            that._updateTileModel({
                                unit : cachedValue.data.results[0][cachedValue.unit.name]
                            });
                            unitProperty = cachedValue.unit.name;
                        }
                        dimension = cachedValue.dimension;
                        that.oConfig.TILE_PROPERTIES.FINALVALUE = cachedValue.data;
                        that.oConfig.TILE_PROPERTIES.FINALVALUE = that._processDataForComparisonChart(that.oConfig.TILE_PROPERTIES.FINALVALUE,measure.split(",")[0],dimension, unitProperty);
                        fnSuccess.call(that,that.oConfig.TILE_PROPERTIES.FINALVALUE);
                    } else if (cachedValue.data.results.length == 0){
                        that.oConfig.TILE_PROPERTIES.FINALVALUE = cachedValue.data;
                        fnSuccess.call(that,that.oConfig.TILE_PROPERTIES.FINALVALUE);
                        that.setNoData();
                    } else {
                        that.setNoData();
                    }
                }
            } catch(e) {
                fnError.call(that,e);
            }
        },

        _processDataForComparisonChart : function(data,measure,dimension, unitProperty){
            var semanticColor = this.oConfig.TILE_PROPERTIES.semanticColorContribution;
            var finalOutput = [];
            var tempVar;
            var unitValue;
            for (var i = 0; i < data.results.length; i++) {
                var eachData = data.results[i];
                var temp = {};
                try {
                    temp.title = eachData[dimension].toString();
                } catch(e) {
                    temp.title = "";
                }

                temp.value = Number(eachData[measure]);
                var calculatedValueForScaling = Number(eachData[measure]);
                if (this.oConfig.EVALUATION.SCALING == -2) {
                    calculatedValueForScaling *= 100;
                }
                var c = this.isACurrencyMeasure(measure);
                unitValue = eachData[unitProperty];
                tempVar = sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(calculatedValueForScaling,this.oConfig.EVALUATION.SCALING,this.oConfig.EVALUATION.DECIMAL_PRECISION, c, unitValue);
                if (this.oConfig.EVALUATION.SCALING == -2) {
                    tempVar += " %";
                }
                temp.displayValue = tempVar.toString();

                if (typeof semanticColor === 'undefined'){
                    temp.color = "Neutral";
                } else {
                    temp.color = semanticColor;
                    /*   if(this.oConfig.EVALUATION.GOAL_TYPE === "MA"){
                        if(temp.value > eachData[semanticMeasure]){
                            temp.color= "Good";
                        }
                        else {
                            temp.color= "Error";
                        }
                    }
                    else if(this.oConfig.EVALUATION.GOAL_TYPE === "MI"){
                        if(temp.value < eachData[semanticMeasure]){
                            temp.color= "Good";
                        }
                        else {
                            temp.color= "Error";
                        }
                    }
                    else {
                        temp.color= "Neutral";
                    }*/
                }
                finalOutput.push(temp);
            }
            return finalOutput;
        },

        doDummyProcess : function(){
            var that = this;
            that.setTextInTile();
            that._updateTileModel({
                value: 8888,
                size: sap.suite.ui.commons.InfoTileSize.Auto,
                frameType: sap.suite.ui.commons.FrameType.OneByOne,
                state: sap.suite.ui.commons.LoadState.Loading,
                valueColor:sap.suite.ui.commons.InfoTileValueColor.Error,
                indicator: sap.suite.ui.commons.DeviationIndicator.None,
                title : "US Profit Margin",
                footer : "Current Quarter",
                description: "Maximum deviation",
                data: [
                       { title: "Americas", value: 10, color: "Neutral" },
                       { title: "EMEA", value: 50, color: "Neutral" },
                       { title: "APAC", value: -20, color: "Neutral" }
                       ]

            });
            this.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);
        }


    });
}());

}; // end of sap/ushell/components/tiles/indicatorcontribution/ContributionTile.controller.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.indicatordeviation.DeviationTile.controller') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.indicatordeviation.DeviationTile.controller');
(function () {
    "use strict";
    
    sap.ushell.components.tiles.generic.extend("tiles.indicatordeviation.DeviationTile", {
        onInit :  function(){
            this.KPI_VALUE_REQUIRED = true;
        },

        doProcess : function(kpiValue, sThresholdObject) {
            var that = this;
            var formattedTargetvalue, formattedValue;
            var calculatedValueForScaling = Number(kpiValue);
            var thresholdObject = this.setThresholdValues();
            if (this.oConfig.EVALUATION.SCALING == -2){
                calculatedValueForScaling *= 100;
            }
            var c = this.isACurrencyMeasure(this.oConfig.EVALUATION.COLUMN_NAME);
            formattedValue = sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(Number(calculatedValueForScaling), this.oConfig.EVALUATION.SCALING,this.oConfig.EVALUATION.DECIMAL_PRECISION, c, this.CURRENCY_CODE);
//            if (this.oConfig.EVALUATION.SCALING == -2){
//                formattedValue += " %";
//            }

            this.CALCULATED_KPI_VALUE = Number(kpiValue);
            var deviationTileObj = {};
            var applyColor = this.getThresholdsObjAndColor(thresholdObject).returnColor;
            var actualKpiObj = {value: Number(kpiValue), color: applyColor};

            deviationTileObj.actualValueLabel = formattedValue.toString();
            deviationTileObj.actual = actualKpiObj;
            deviationTileObj.thresholds = [];
            deviationTileObj.thresholds = this.getThresholdsObjAndColor(thresholdObject).arrObj;
            var evalValue = this.DEFINITION_DATA.EVALUATION_VALUES;
            if (this.DEFINITION_DATA.EVALUATION.VALUES_SOURCE == "MEASURE"){
                var calculatedTargetValue = Number(thresholdObject.targetValue);
                if (this.oConfig.EVALUATION.SCALING == -2) {
                    calculatedTargetValue *= 100;
                }
                c = this.isACurrencyMeasure(this.oConfig.EVALUATION.COLUMN_NAME);
                formattedTargetvalue = sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(calculatedTargetValue, this.oConfig.EVALUATION.SCALING,this.oConfig.EVALUATION.DECIMAL_PRECISION, c, this.CURRENCY_CODE);
//                if (this.oConfig.EVALUATION.SCALING == -2) {
//                    formattedTargetvalue += "%";
//                }
                deviationTileObj.targetValue = Number(thresholdObject.targetValue);
                deviationTileObj.targetValueLabel = formattedTargetvalue.toString();
            } else {
                for (var itr = 0; itr < evalValue.length; itr++){
                    if (evalValue[itr].TYPE === "TA") {
                        var calculatedTargetValue = Number(evalValue[itr].FIXED);
                        if (this.oConfig.EVALUATION.SCALING == -2) {
                            calculatedTargetValue *= 100;
                        }
                        c = this.isACurrencyMeasure(this.oConfig.EVALUATION.COLUMN_NAME);
                        formattedTargetvalue = sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(calculatedTargetValue, this.oConfig.EVALUATION.SCALING,this.oConfig.EVALUATION.DECIMAL_PRECISION, c, this.CURRENCY_CODE);
//                        if (this.oConfig.EVALUATION.SCALING == -2) {
//                            formattedTargetvalue += "%";
//                        }
                        deviationTileObj.targetValue =  Number(evalValue[itr].FIXED);
                        deviationTileObj.targetValueLabel = formattedTargetvalue.toString();
                    }
                }
            }

            if (this.oConfig.EVALUATION.SCALING == -2) {
                deviationTileObj.scale = "%";
            }
            this._updateTileModel(deviationTileObj);
            if (this.DEFINITION_DATA.TILE_PROPERTIES.frameType == sap.suite.ui.commons.FrameType.TwoByOne){
                that.getView().getViewData().parentController._updateTileModel(this.getTile().getModel().getData());
                that.getView().getViewData().deferredObj.resolve();
            } else {
                var navTarget = sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system);
                that.oKpiTileView.oGenericTile.$().wrap("<a href ='" + navTarget + "'/>");
                this.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);
            }
            this.setToolTip(applyColor,calculatedValueForScaling,"DT");
        },

        getThresholdsObjAndColor : function(thresholdObject) {
            try {
                var oThresholdObjAndColor = {};
                oThresholdObjAndColor.arrObj = [];
                oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Neutral;
                var improvementDirection = this.DEFINITION_DATA.EVALUATION.GOAL_TYPE;
                //var evalValue = this.DEFINITION_DATA.EVALUATION_VALUES;
                var wL,cL,cH,wH;
                if (improvementDirection === "MI") {
                    cH = Number(thresholdObject.criticalHighValue) || 0;
                    wH = Number(thresholdObject.warningHighValue) || 0;
                    if (cH && wH) {
                        cH = window.parseFloat(cH);
                        wH = window.parseFloat(wH);
                        oThresholdObjAndColor.arrObj.push({value:cH,color:sap.suite.ui.commons.InfoTileValueColor.Error});
                        oThresholdObjAndColor.arrObj.push({value:wH,color:sap.suite.ui.commons.InfoTileValueColor.Critical});
                        if (this.CALCULATED_KPI_VALUE < wH) {
                            oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Good;
                        } else if (this.CALCULATED_KPI_VALUE <= cH) {
                            oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
                        } else {
                            oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
                        }
                    }

                } else if (improvementDirection === "MA") {
                    cL = Number(thresholdObject.criticalLowValue) || 0;
                    wL = Number(thresholdObject.warningLowValue) || 0;
                    if (cL && wL) {
                        cL = window.parseFloat(cL);
                        wL = window.parseFloat(wL);
                        oThresholdObjAndColor.arrObj.push({value:cL,color:sap.suite.ui.commons.InfoTileValueColor.Error});
                        oThresholdObjAndColor.arrObj.push({value:wL,color:sap.suite.ui.commons.InfoTileValueColor.Critical});
                        if (this.CALCULATED_KPI_VALUE < cL) {
                            oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
                        } else if (this.CALCULATED_KPI_VALUE <= wL) {
                            oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
                        } else {
                            oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Good;
                        }
                    }
                } else {
                    cH = Number(thresholdObject.criticalHighValue) || 0;
                    wH = Number(thresholdObject.warningHighValue) || 0;
                    cL = Number(thresholdObject.criticalLowValue) || 0;
                    wL = Number(thresholdObject.warningLowValue) || 0;
                    if (wL && wH && cL && cL) {
                        cH = window.parseFloat(cH);
                        wH = window.parseFloat(wH);
                        wL = window.parseFloat(wL);
                        cL = window.parseFloat(cL);
                        oThresholdObjAndColor.arrObj.push({value:cH,color:sap.suite.ui.commons.InfoTileValueColor.Error});
                        oThresholdObjAndColor.arrObj.push({value:wH,color:sap.suite.ui.commons.InfoTileValueColor.Critical});
                        oThresholdObjAndColor.arrObj.push({value:wL,color:sap.suite.ui.commons.InfoTileValueColor.Critical});
                        oThresholdObjAndColor.arrObj.push({value:cL,color:sap.suite.ui.commons.InfoTileValueColor.Error});
                        if (this.CALCULATED_KPI_VALUE < cL || this.CALCULATED_KPI_VALUE > cH) {
                            oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Error;
                        } else if ((this.CALCULATED_KPI_VALUE >= cL && this.CALCULATED_KPI_VALUE <= wL) ||
                                (this.CALCULATED_KPI_VALUE >= wH && this.CALCULATED_KPI_VALUE <= cH)
                        ) {
                            oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Critical;
                        } else {
                            oThresholdObjAndColor.returnColor = sap.suite.ui.commons.InfoTileValueColor.Good;
                        }
                    }
                }
                return oThresholdObjAndColor;

            } catch(e) {
                this.logError(e);
            }
        },
        doDummyProcess : function(){
            var that = this;
            this.setTextInTile();
            that._updateTileModel({
                actual: { value: 120, color: sap.suite.ui.commons.InfoTileValueColor.Good},
                targetValue: 100,
                thresholds: [
                             { value: 0, color: sap.suite.ui.commons.InfoTileValueColor.Error },
                             { value: 50, color: sap.suite.ui.commons.InfoTileValueColor.Critical },
                             { value: 150, color: sap.suite.ui.commons.InfoTileValueColor.Critical },
                             { value: 200, color: sap.suite.ui.commons.InfoTileValueColor.Error }
                             ],
                             showActualValue: true,
                             showTargetValue: true
            });
            this.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);
        }

    });
}());

}; // end of sap/ushell/components/tiles/indicatordeviation/DeviationTile.controller.js
if ( !jQuery.sap.isDeclared('sap.ushell.components.tiles.indicatornumeric.NumericTile.controller') ) {
  jQuery.sap.declare('sap.ushell.components.tiles.indicatornumeric.NumericTile.controller');
(function () {
    "use strict";
    
    sap.ushell.components.tiles.generic.extend("tiles.indicatornumeric.NumericTile", {

        onInit :  function(){
            this.KPI_VALUE_REQUIRED = true;
        },

        doProcess : function(kpiValue,sThresholdObject){

            var that = this;
            this.CALCULATED_KPI_VALUE = kpiValue;
            /*var evalValue =*/ this.DEFINITION_DATA.EVALUATION_VALUES;
            var applyColor = this.getTrendColor(sThresholdObject);
            var trendIndicator = this.getTrendIndicator(sThresholdObject.trendValue);
            var oScaledValue = "";
            var calculatedValueForScaling = this.CALCULATED_KPI_VALUE;
            if (this.oConfig.EVALUATION.SCALING == -2){
                calculatedValueForScaling *= 100;
                this.getView().oNVConfContS.setFormatterValue(false);
            }
            var c = this.isACurrencyMeasure(this.oConfig.EVALUATION.COLUMN_NAME);
            oScaledValue = sap.ushell.components.tiles.indicatorTileUtils.util.getLocaleFormattedValue(Number(calculatedValueForScaling),this.oConfig.EVALUATION.SCALING,this.oConfig.EVALUATION.DECIMAL_PRECISION, c, this.CURRENCY_CODE);
            if (this.oConfig.EVALUATION.SCALING == -2) {
                this._updateTileModel({
                    scale : "%"
                });
            }
            this._updateTileModel({
                value : oScaledValue.toString(),
                valueColor : applyColor,
                indicator : trendIndicator
            });
            if (that.oConfig.TILE_PROPERTIES.frameType == sap.suite.ui.commons.FrameType.OneByOne){
                var navTarget = sap.ushell.components.tiles.indicatorTileUtils.util.getNavigationTarget(that.oConfig,that.system);
                that.oKpiTileView.oGenericTile.$().wrap("<a href ='" + navTarget + "'/>");
                this.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);
                this.setToolTip(applyColor,calculatedValueForScaling,"NT");

            } else {
                that.getView().getViewData().parentController._updateTileModel(this.getTile().getModel().getData());
                that.getView().getViewData().deferredObj.resolve();
            }
            this.setToolTip(applyColor,calculatedValueForScaling,"NT");

        },
        doDummyProcess : function(){

            var that = this;
            this.setTextInTile();
            that._updateTileModel({
                value : "10.34",
                scale : "M",
                valueColor : sap.suite.ui.commons.InfoTileValueColor.Neutral,
                indicator : sap.suite.ui.commons.DeviationIndicator.None
            });
            this.oKpiTileView.oGenericTile.setState(sap.suite.ui.commons.LoadState.Loaded);

        }

    });
}());

}; // end of sap/ushell/components/tiles/indicatornumeric/NumericTile.controller.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.Shell.controller') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.Shell.controller');
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, window, document, setTimeout, hasher, confirm*/

    jQuery.sap.require('sap.ui.core.IconPool'); // unlisted dependency retained


    /* dont delay these cause they are needed for direct bookmarks */
    
    
    
    
    
    
    
    
    // create global model and add some demo data
    var closeAllDialogs = true,
        enableHashChange = true,
        isMobile = sap.ui.Device.system.phone,
        oUserRecentsService,
        bUserImageAlreadyLoaded,
        oModel = new sap.ui.model.json.JSONModel({
            searchAvailable: false,
            title: "", // no default value for title
            searchFiltering: true,
            showEndUserFeedback: false,
            searchTerm: "",
            isPhoneWidth: false,
            states : {
                "home" : {
                    "stateName" : "home",
                    "showCurtain" : false,
                    "headerHiding" : false,
                    "headerVisible" : true,
                    "showCatalog" : false,
                    "showPane" : false,
                    "headItems" : [],
                    "headEndItems" : ["sf"],
                    "search" : "",
                    "paneContent" : [],
                    "actions" : ["ContactSupportBtn", "EndUserFeedbackBtn", "userPreferencesButton", "logoutBtn"],
                    "floatingActions" : [],
                    "subHeaders" : [],
                    "toolAreaItems" : [],
                    "toolAreaVisible" : false
                },
                "app" : {
                    "stateName" : "app",
                    "showCurtain" : false,
                    "headerHiding" : isMobile,
                    "headerVisible" : true,
                    "headEndItems" : ["sf"],
                    "showCatalog" : false,
                    "showPane" : false,
                    "paneContent" : [],
                    "search" : "",
                    "headItems" : ["homeBtn"],
                    "actions" : ["ContactSupportBtn", "EndUserFeedbackBtn", "aboutBtn", "userPreferencesButton", "logoutBtn"],
                    "floatingActions" : [],
                    "subHeaders" : [],
                    "toolAreaItems" : [],
                    "toolAreaVisible" : false
                },
                "minimal" : {
                    "stateName" : "minimal",
                    "showCurtain" : false,
                    "headerHiding" : false,
                    "headerVisible" : true,
                    "headEndItems" : [],
                    "showCatalog" : false,
                    "showPane" : false,
                    "paneContent" : [],
                    "headItems" : [],
                    "actions" : ["ContactSupportBtn", "EndUserFeedbackBtn", "aboutBtn", "userPreferencesButton", "logoutBtn"],
                    "floatingActions" : [],
                    "subHeaders" : [],
                    "toolAreaItems" : [],
                    "toolAreaVisible" : false
                },
                "standalone" : {
                    "stateName" : "standalone",
                    "showCurtain" : false,
                    "headerHiding" : isMobile,
                    "headerVisible" : true,
                    "headEndItems" : [],
                    "showCatalog" : false,
                    "showPane" : false,
                    "paneContent" : [],
                    "headItems" : [],
                    "actions" : ["ContactSupportBtn", "EndUserFeedbackBtn", "aboutBtn"],
                    "floatingActions" : [],
                    "subHeaders" : [],
                    "toolAreaItems" : [],
                    "toolAreaVisible" : false
                },
                "embedded" : {
                    "stateName" : "embedded",
                    "showCurtain" : false,
                    "headerHiding" : isMobile,
                    "headerVisible" : true,
                    "headEndItems" : ["standardActionsBtn"],
                    "showCatalog" : false,
                    "showPane" : false,
                    "paneContent" : [],
                    "headItems" : [],
                    "actions" : ["ContactSupportBtn", "EndUserFeedbackBtn", "aboutBtn"],
                    "floatingActions" : [],
                    "subHeaders" : [],
                    "toolAreaItems" : [],
                    "toolAreaVisible" : false
                },
                "headerless" : {
                    "stateName" : "headerless",
                    "showCurtain" : false,
                    "headerHiding" : isMobile,
                    "headerVisible" : false,
                    "headEndItems" : [],
                    "showCatalog" : false,
                    "showPane" : false,
                    "paneContent" : [],
                    "headItems" : [],
                    "actions" : [],
                    "floatingActions" : [],
                    "subHeaders" : [],
                    "toolAreaItems" : [],
                    "toolAreaVisible" : false
                }
            },
            userPreferences : {
                entries : []
            }
        }),
        oNavigationMode = {
            embedded : "embedded",
            newWindowThenEmbedded : "newWindowThenEmbedded",
            newWindow : "newWindow",
            replace : "replace"
        },
        oConfig = {},

    //allowed application state list that are allowed to be configured by oConfig.appState property
        allowedAppStates = ['minimal', 'app', 'standalone', 'embedded', 'headerless', 'home'];
    /**
     * @name sap.ushell.renderers.fiori2.Shell
     * @extends sap.ui.core.mvc.Controller
     * @public
     */
    sap.ui.controller("sap.ushell.renderers.fiori2.Shell", {

        oCoreExtLoadingDeferred : undefined,

        /**
         * SAPUI5 lifecycle hook.
         * @public
         */
        onInit: function () {
            this.oEndUserFeedbackConfiguration = {
                showAnonymous: true,
                showLegalAgreement : true,
                showCustomUIContent: true,
                feedbackDialogTitle: true,
                textAreaPlaceholder: true,
                customUIContent: undefined
            };

            // Add global model to view
            this.getView().setModel(oModel);
          // Bind the translation model to this view
            this.getView().setModel(sap.ushell.resources.i18nModel, "i18n");
            this.managedElementsQueue = [];

            sap.ui.getCore().getEventBus().subscribe("externalSearch", this.externalSearchTriggered, this);
            // handling of configuration should is done before the code block below otherwise the doHashChange is
            // triggered before the personalization flag is disabled (URL may contain hash value which invokes navigation)
            this._setConfigurationToModel();
            sap.ui.getCore().getEventBus().subscribe("openApp", this.openApp, this);
            sap.ui.getCore().getEventBus().subscribe("launchpad", "contentRendered", this._loadCoreExt, this);
            sap.ui.getCore().getEventBus().subscribe("sap.ushell.renderers.fiori2.Renderer", "appOpened", this.loadUserImage, this);
            sap.ui.getCore().getEventBus().subscribe("launchpad", "contentRendered", this.checkEUFeedback, this);
            sap.ui.getCore().getEventBus().subscribe("sap.ushell.renderers.fiori2.Renderer", "appOpened", this.checkEUFeedback, this);
            sap.ui.getCore().getEventBus().subscribe("sap.ushell.renderers.fiori2.Renderer", "appOpened", this.closeLoadingScreen, this);
            sap.ui.getCore().getEventBus().subscribe("launchpad", "toggleContentDensity", this.toggleContentDensity, this);


            // set current state
            var oConfig = this.getView().getViewData() ? this.getView().getViewData().config : null,
                sRootIntent = oConfig ? oConfig.rootIntent : "",
                sCurrentHash = hasher.getHash(),
                oShellHash =  sap.ushell.Container.getService("URLParsing").parseShellHash(sCurrentHash);

            if (!sCurrentHash.length || sRootIntent === oShellHash.semanticObject + "-" + oShellHash.action) {
                this.switchViewState('home'); // home is the default state of the shell
            }


            if (sap.ushell.Container.getService("UsageAnalytics").isEnabled() === true) {
                sap.ushell.Container.getService("UsageAnalytics").init();
                jQuery.sap.require("sap.ushell.components.flp.FLPAnalytics");
            }

            oUserRecentsService = sap.ushell.Container.getService("UserRecents");
            this.history = new sap.ushell.renderers.fiori2.History();
            this.oNavContainer = sap.ui.getCore().byId("navContainer");
            this.oLoadingDialog = sap.ui.getCore().byId("loadingDialog");

            //   this.toggleRtlMode(sap.ui.getCore().getConfiguration().getRTL());
            this.oShellNavigation = sap.ushell.Container.getService("ShellNavigation");
            this.oShellNavigation.registerNavigationFilter(jQuery.proxy(this._handleEmptyHash, this));
            // must be after event registration (for synchronous navtarget resolver calls)
            this.oShellNavigation.init(jQuery.proxy(this.doHashChange, this));
            this.oShellNavigation.registerNavigationFilter(jQuery.proxy(this.handleDataLoss, this));
            sap.ushell.Container.getService("Message").init(jQuery.proxy(this.doShowMessage, this));
            sap.ushell.Container.setLogonFrameProvider(this._getLogonFrameProvider()); // TODO: TBD??????????
            this.bContactSupportEnabled = sap.ushell.Container.getService("SupportTicket").isEnabled();
            sap.ushell.renderers.fiori2.AccessKeysHandler.init(oModel);

            window.onbeforeunload = function () {
                if (sap.ushell.Container && sap.ushell.Container.getDirtyFlag()) {
                    if (!sap.ushell.resources.browserI18n) {
                        sap.ushell.resources.browserI18n = sap.ushell.resources.getTranslationModel(window.navigator.language).getResourceBundle();
                    }
                    return sap.ushell.resources.browserI18n.getText("dataLossExternalMessage");
                }
            };

            if (this.bContactSupportEnabled) {
                sap.ushell.UserActivityLog.activate();
            }
            if (oModel.getProperty("/contentDensity")) {
                this._applyContentDensity();
            }
        },

        _isCompactContentDensity: function(){
            var isCompact;
            if (!sap.ui.Device.support.touch) {
                isCompact = true;
            } else if (!sap.ui.Device.system.combi){
                isCompact = false;
            } else {
                var oUser;
                try {
                    var userInfoService = sap.ushell.Container.getService("UserInfo");
                    oUser = userInfoService.getUser();
                } catch (e) {
                    jQuery.sap.log.error("Getting UserInfo service failed.");
                    oUser = sap.ushell.Container.getUser();
                }
                isCompact = (oUser.getContentDensity() === 'compact') ? true : false;
            }

            return isCompact;
        },

        _applyContentDensity: function (isCompact) {
            if (!this.getModel().getProperty("/contentDensity")) {
                return;
            }

            if (isCompact === undefined){
                isCompact = this._isCompactContentDensity();
            }

            var appMetaData = sap.ushell.services.AppConfiguration.getMetadata();
            if (isCompact && !appMetaData.compactContentDensity){
                isCompact = false;
            } else if (appMetaData.compactContentDensity && !appMetaData.cozyContentDensity){
                isCompact = true;
            }

            if (isCompact) {
                jQuery('body').removeClass('sapUiSizeCozy');
                jQuery('body').addClass('sapUiSizeCompact');
            } else {
                jQuery('body').removeClass('sapUiSizeCompact');
                jQuery('body').addClass('sapUiSizeCozy');
            }

        },

        toggleContentDensity:  function (sChannelId, sEventId, oData) {
            var isCompact = oData.contentDensity === "compact";

            this._applyContentDensity(isCompact);
        },

        checkEUFeedback: function () {
            if (!this.bFeedbackServiceChecked) {
                this.bFeedbackServiceChecked = true;
                try {
                    sap.ushell.Container.getService("EndUserFeedback").isEnabled()
                        .done(function () {
                            oModel.setProperty('/showEndUserFeedback', true);
                        })
                        .fail(function () {
                            oModel.setProperty('/showEndUserFeedback', false);
                        });
                } catch (e) {
                    jQuery.sap.log.error("EndUserFeedback adapter is not found", e.message || e);
                    oModel.setProperty('/showEndUserFeedback', false);
                }
            }
        },

        _handleEmptyHash : function (sHash) {
            if (sHash.length === 0) {
                var oViewData = this.getView() ? this.getView().getViewData() : {};
                oConfig = oViewData.config || {};
                //Migration support:  we have to set rootIntent empty
                //And continue navigation in order to check if  empty hash is resolved locally
                if (oConfig.migrationConfig) {
                    return this.oShellNavigation.NavigationFilterStatus.Continue;
                }
                if (oConfig.rootIntent) {
                    setTimeout(function () {
                        hasher.setHash(oConfig.rootIntent);
                    }, 0);
                    return this.oShellNavigation.NavigationFilterStatus.Abandon;
                }
            }
            return this.oShellNavigation.NavigationFilterStatus.Continue;
        },

        _setConfigurationToModel : function () {
            var oViewData = this.getView().getViewData(),
                stateEntryKey,
                curStates;

            if (oViewData) {
                oConfig = oViewData.config || {};
            }
            if (oConfig) {
                if (oConfig.states) {
                    curStates = oModel.getProperty('/states');
                    for (stateEntryKey in oConfig.states) {
                        if (oConfig.states.hasOwnProperty(stateEntryKey)) {
                            curStates[stateEntryKey] = oConfig.states[stateEntryKey];
                        }
                    }
                    oModel.setProperty('/states', curStates);
                }

                if (oConfig.appState === "headerless") {
                    // when appState is headerless we also remove the header in home state and disable the personalization.
                    // this is needed in case headerless mode will be used to navigate to the dashboard and not directly to an application.
                    // As 'home' is the official state for the dash board, we change the header visibility property of this state
                    oModel.setProperty("/personalization", false);
                    oModel.setProperty("/states/home/headerVisible", false);
                    //update the configuration as well for the method "getModelConfiguration"
                    oConfig.enablePersonalization = false;
                } else if (oConfig.enablePersonalization !== undefined) {
                    oModel.setProperty("/personalization", oConfig.enablePersonalization);
                }

                //EU Feedback flexable configuration
                if (oConfig.changeEndUserFeedbackTitle !== undefined) {
                    this.oEndUserFeedbackConfiguration.feedbackDialogTitle = oConfig.changeEndUserFeedbackTitle;
                }

                if (oConfig.changeEndUserFeedbackPlaceholder !== undefined) {
                    this.oEndUserFeedbackConfiguration.textAreaPlaceholder = oConfig.changeEndUserFeedbackPlaceholder;
                }

                if (oConfig.showEndUserFeedbackAnonymousCheckbox !== undefined) {
                    this.oEndUserFeedbackConfiguration.showAnonymous = oConfig.showEndUserFeedbackAnonymousCheckbox;
                }

                if (oConfig.showEndUserFeedbackLegalAgreement !== undefined) {
                    this.oEndUserFeedbackConfiguration.showLegalAgreement = oConfig.showEndUserFeedbackLegalAgreement;
                }
                //EU Feedback configuration end.
                if (oConfig.enableSetTheme !== undefined) {
                    oModel.setProperty("/setTheme", oConfig.enableSetTheme);
                }
                // Compact Cozy mode
                if (oConfig.enableContentDensity !== undefined) {
                    oModel.setProperty("/contentDensity", oConfig.enableContentDensity);
                }
                // check for title
                if (oConfig.title) {
                    oModel.setProperty("/title", oConfig.title);
                }
                //Check if the configuration is passed by html of older version(1.28 and lower)
                if (oConfig.migrationConfig !== undefined) {
                    oModel.setProperty("/migrationConfig", oConfig.migrationConfig);
                }
                //User default parameters settings
                if (oConfig.enableUserDefaultParameters !== undefined) {
                    oModel.setProperty("/userDefaultParameters", oConfig.enableUserDefaultParameters);
                }

                if (oConfig.disableHomeAppCache !== undefined) {
                    oModel.setProperty("/disableHomeAppCache", oConfig.disableHomeAppCache);
                }

                // xRay enablement configuration
                oModel.setProperty("/enableHelp", !!oConfig.enableHelp);
                oModel.setProperty("/searchAvailable", (oConfig.enableSearch !== false));
            }
        },

        getModelConfiguration: function () {
            var oViewData = this.getView().getViewData(),
                oConfiguration,
                oShellConfig;

            if (oViewData) {
                oConfiguration = oViewData.config || {};
                oShellConfig = jQuery.extend({}, oConfiguration);
            }
            delete oShellConfig.applications;
            return oShellConfig;
        },
        /**
         * This method will be used by the Container service in order to create, show and destroy a Dialog control with an
         * inner iframe. The iframe will be used for rare scenarios in which additional authentication is required. This is
         * mainly related to SAML 2.0 flows.
         * The api sequence will be managed by UI2 services.
         * @returns {{create: Function, show: Function, destroy: Function}}
         * @private
         */
        _getLogonFrameProvider: function () {
            var oView = this.getView();

            return {
                /* @returns a DOM reference to a newly created iFrame. */
                create: function () {
                    return oView.createIFrameDialog();
                },

                /* make the current iFrame visible to user */
                show: function () {
                    oView.showIFrameDialog();
                },

                /* hide, close, and destroy the current iFrame */
                destroy: function () {
                    oView.destroyIFrameDialog();
                }
            };
        },

        onExit: function () {
            sap.ui.getCore().getEventBus().unsubscribe("externalSearch", this.externalSearchTriggered, this);
            sap.ui.getCore().getEventBus().unsubscribe("openApp", this.openApp, this);
            sap.ui.getCore().getEventBus().unsubscribe("toggleContentDensity", this.toggleContentDensity, this);

            this.oShellNavigation.hashChanger.destroy();
            this.getView().aDanglingControls.forEach(function (oControl) {
                if (oControl.destroyContent) {
                    oControl.destroyContent();
                }
                oControl.destroy();
            });
            sap.ushell.UserActivityLog.deactivate(); // TODO:
        },


        getAnimationType : function () {
            return sap.ui.Device.os.android ? "show" : "slide";
        },

        onCurtainClose : function (oEvent) {
            jQuery.sap.log.warning("Closing Curtain", oEvent);


        },

        /**
         * Navigation Filter function registered with ShellNavigation service.
         * Triggered on each navigation.
         * Aborts navigation if there are unsaved data inside app(getDirtyFlag returns true).
         *
         * @private
         */
        handleDataLoss: function (newHash, oldHash) {
            if (sap.ushell.Container.getDirtyFlag()) {
                if (!sap.ushell.resources.browserI18n) {
                    sap.ushell.resources.browserI18n = sap.ushell.resources.getTranslationModel(window.navigator.language).getResourceBundle();
                }
                /*eslint-disable no-alert*/
                if (confirm(sap.ushell.resources.browserI18n.getText("dataLossInternalMessage"))) {
                /*eslint-enable no-alert*/
                    sap.ushell.Container.setDirtyFlag(false);
                    return this.oShellNavigation.NavigationFilterStatus.Continue;
                } else {
                    return this.oShellNavigation.NavigationFilterStatus.Abandon;
                }
            }

            return this.oShellNavigation.NavigationFilterStatus.Continue;
        },
        /**
         * Callback registered with Message service. Triggered on message show request.
         *
         * @private
         */
        doShowMessage: function (iType, sMessage, oParameters) {
            jQuery.sap.require("sap.m.MessageToast");
            jQuery.sap.require("sap.m.MessageBox");
            if (iType === sap.ushell.services.Message.Type.ERROR) {
                //check that SupportTicket is enabled and verify that we are not in a flow in which Support ticket creation is failing,
                // if this is the case we don't want to show the user the contact support button again
                if (sap.ushell.Container.getService("SupportTicket").isEnabled() && sMessage !== sap.ushell.resources.i18n.getText("supportTicketCreationFailed")) {
                    try {
                        jQuery.sap.require("sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage");
                        var errorMsg = new sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage("EmbeddedSupportErrorMessage", {
                            title: oParameters.title || sap.ushell.resources.i18n.getText("error"),
                            content: new sap.m.Text({
                                text: sMessage
                            })
                        });
                        errorMsg.open();
                    } catch (e) {
                        sap.m.MessageBox.show(sMessage, sap.m.MessageBox.Icon.ERROR,
                            oParameters.title || sap.ushell.resources.i18n.getText("error"));
                    }
                } else {
                    sap.m.MessageBox.show(sMessage, sap.m.MessageBox.Icon.ERROR,
                        oParameters.title || sap.ushell.resources.i18n.getText("error"));
                }
            } else if (iType === sap.ushell.services.Message.Type.CONFIRM) {
                if (oParameters.actions) {
                    sap.m.MessageBox.show(sMessage, sap.m.MessageBox.Icon.QUESTION, oParameters.title, oParameters.actions, oParameters.callback);
                } else {
                    sap.m.MessageBox.confirm(sMessage, oParameters.callback, oParameters.title);
                }
            } else {
                sap.m.MessageToast.show(sMessage, { duration: oParameters.duration || 3000 });
            }
        },

        /**
         * Callback registered with NavService. Triggered on navigation requests
         *
         * A cold start state occurs whenever the user has previously opened the window.
         * - page is refreshed
         * - URL is pasted in an existing window
         * - user opens the page and pastes a URL
         *
         * @return {boolean} whether the application is in a cold start state
         */
        _isColdStart: function () {
            if (this.history.getHistoryLength() <= 1) {  // one navigation: coldstart!
                return true;
            }
            this._isColdStart = function () { return false; };
            return false;
        },


        _generateExpandedUrl: function (oResolvedHashFragment, oShellHash, sDefaultShellHash, sDefaultTitle) {
            /*
             * This invocation to hrefForExternal is conceptually flawed, as we
             * use oShellHash, which is the parsed *unexpanded* form of the
             * shell hash, thus it may already contain a *compacted* URL, which
             * cannot be compacted again after adding parameters here.  To fix,
             * one must use an *expanded* oShellHash!
             *
             * Note that the sDeaultShellHash/"original_intent" is correctly a
             * *compacted* received hash.  as we open a new window, there is a
             * race condition if URL compaction occurs now thus we use the
             * *asynchronous* generation.
             */
            return this.oShellNavigation.hrefForExternal({
                target: {
                    semanticObject : oShellHash.semanticObject,
                    action : oShellHash.action,
                    contextRaw : "navResCtx" // detect embedded URL in new window launchpad
                },
                params : jQuery.extend({
                    url: oResolvedHashFragment.url,
                    additionalInformation: oResolvedHashFragment.additionalInformation,
                    applicationType: oResolvedHashFragment.applicationType,
                    navigationMode: oResolvedHashFragment.navigationMode,
                    "original_intent": sDefaultShellHash,
                    title: sDefaultTitle
                }, oShellHash.params)
            }, true, undefined, true);
        },

        _logOpenAppAction: function (sFixedShellHash) {
            if (oConfig && oConfig.enableTilesOpacity) {
                // Triggering the app usage mechanism to log this openApp action.
                // Using setTimeout in order not to delay the openApp action
                setTimeout(function () {
                    if (sap.ushell.Container) {
                        oUserRecentsService.addAppUsage(sFixedShellHash);
                    }
                }, 700);
            }
        },

        _performTransition: function (oInnerControl) {
            if (this.history.backwards && this.oNavContainer.getInitialPage() !== this.oNavContainer.getCurrentPage().getId()) {
                this.oNavContainer.to(oInnerControl, "slideBack");
                return;
            }
            this.oNavContainer.to(oInnerControl, "slide");
        },

        /**
         * Sets application container based on information in URL hash.
         *
         * This is a callback registered with NavService. It's triggered
         * whenever the url (or the hash fragment in the url) changes.
         *
         * NOTE: when this method is called, the new URL is already in the
         *       address bar of the browser. Therefore back navigation is used
         *       to restore the URL in case of wrong navigation or errors.
         *
         * @public
         */
        doHashChange: function (sShellHash, sAppPart, sOldShellHash, sOldAppPart, oParseError) {
            var that = this,
                iOriginalHistoryLength,
                sFixedShellHash;

            if (!enableHashChange) {
                enableHashChange = true;
                this.closeLoadingScreen();
                return;
            }

            if (oParseError) {
                this.hashChangeFailure(this.history.getHistoryLength(), oParseError.message, null, "sap.ushell.renderers.fiori2.Shell.controller");
                return;
            }
            if (sap.m.InstanceManager && closeAllDialogs) {
                sap.m.InstanceManager.closeAllDialogs();
                sap.m.InstanceManager.closeAllPopovers();
            }

            closeAllDialogs = true;
            // navigation begins
            this.oLoadingDialog.setText("");
            this.oLoadingDialog.openLoadingScreen();

            // save current history length to handle errors (in case)
            iOriginalHistoryLength = this.history.getHistoryLength();

            sFixedShellHash = this.fixShellHash(sShellHash);

            // track hash change
            this.history.hashChange(sFixedShellHash, sOldShellHash);

            this._resolveHashFragment(sFixedShellHash).done(function (oResolvedHashFragment, oParsedShellHash) {

                // In case of empty hash, if there is a resolved target, set the flag to false, from now on the rootIntent will be an empty hash.
                // Otherwise, change hash to rootIntent to triger normal resolution
                if (that.getModel().getProperty("/migrationConfig")) {
                    var oConfig = that.getView().oViewData.config;
                    oConfig.migrationConfig = false;
                    that.getModel().setProperty("/migrationConfig", false);

                    if (oResolvedHashFragment && sFixedShellHash === '#') {
                        oConfig.rootIntent = "";
                    } else if (sFixedShellHash === '#') {
                        setTimeout(function () {
                            hasher.setHash(oConfig.rootIntent);
                        }, 0);
                        return;
                    }
                }

                /*
                 * Pre-navigation logic for library loading
                 *
                 * Before navigating to an app, we need to make sure:
                 *
                 * - the app component and its dependencies are loaded.
                 * - core-ext-light.js is loaded.
                 *
                 * NOTE:
                 *
                 * 1) if the first navigation to the application occurs, the
                 * resolveHashFragment promise will be resolved when
                 * core-ext-light **and** the app component dependencies are
                 * loaded.
                 *
                 * 2) Navigating to the home page does not require any further
                 * library preload. However, in this case we can try to
                 * anticipate the next app navigation, and load core-ext-light
                 * lazily **after** the navigation has occurred (via
                 * contentRendered event, see #onInit method).
                 *
                 * 3) should the navigation happen before the lazy
                 * initialization of core-ext-light at 2) occurs, we fall back
                 * on requiring core-ext-light.js synchronously (this should
                 * happen rarely).
                 */
                that._loadAppComponentDependencies(oResolvedHashFragment).done(function () {
                    // oCoreExtLoadingDeferred is resolved when core-ext-light finished being loaded by the shell (function _loadCoreExt).
                    // If oCoreExtLoadingDeferred is undefined (e.g. when launching a direct URL for an application)
                    // or if oCoreExtLoadingDeferred is rejected, then core.ext is loaded using jQuery.sap.require using function _requireCoreExt
                    if (that.oCoreExtLoadingDeferred !== undefined) {

                        that.oCoreExtLoadingDeferred.promise().fail(function () {
                            // no core-ext-light.js: try loading it synchronously via require if WebWorkers failed
                            jQuery.sap.log.warning("failed to load core-ext by web worker, performing require");

                            that._requireCoreExt(sFixedShellHash);

                        }).always(function () {
                            // reasonably assume core-ext-light.js is there and perform app navigation
                            that._initiateApplication(oResolvedHashFragment, sFixedShellHash, oParsedShellHash, iOriginalHistoryLength);
                        });

                    } else {
                        that._requireCoreExt(sFixedShellHash);
                        that._initiateApplication(oResolvedHashFragment, sFixedShellHash, oParsedShellHash, iOriginalHistoryLength);
                    }
                }).fail(function (sMsg) {
                    that.hashChangeFailure(iOriginalHistoryLength, "Failed to load U5 component from " + sFixedShellHash,
                    sMsg, "sap.ushell.renderers.fiori2.Shell.controller");
                });

            }).fail(function (sMsg) {
                that.hashChangeFailure(iOriginalHistoryLength, "Failed to resolve navigation target: " + sFixedShellHash,
                    sMsg, "sap.ushell.renderers.fiori2.Shell.controller");
            });
        },
        /**
         * Try loading the app UI5 component and its dependencies.
         *
         * @param {object} oResolvedHashFragment
         *    the hash fragment resolved via the NavTargetResolution service.
         *
         * @return {jQuery.Deferred.promise}
         *    a jQuery promise, always resolved after trying to load the app
         *    UI5 component and its dependencies.<br />
         *    Note, the promise also resolves when one or more UI5 components
         *    were not loaded to let the application open anyway, falling back
         *    to "require" the needed dependencies.
         */
        _loadAppComponentDependencies: function (oResolvedHashFragment) {
            var oUI5ComponentLoadDeferred = new jQuery.Deferred(),
                sComponentUrlWithoutParams,
                bMustLoadDependencies = oResolvedHashFragment && oResolvedHashFragment.ui5ComponentName,
                oAsyncHints;

            if (!bMustLoadDependencies) {
                oUI5ComponentLoadDeferred.resolve();

            } else {
                oAsyncHints = (oResolvedHashFragment.applicationDependencies && oResolvedHashFragment.applicationDependencies.asyncHints) ||
                    { "libs": ["sap.ca.scfld.md", "sap.ca.ui", "sap.me", "sap.ui.unified"] };
                oAsyncHints.preloadOnly = true;
                sComponentUrlWithoutParams = (typeof oResolvedHashFragment.url === "string")
                     ? oResolvedHashFragment.url.replace(/[?].*$/,"")
                     : oResolvedHashFragment.url;
                sap.ui.component.load({
                    name: oResolvedHashFragment.ui5ComponentName,
                    url: sComponentUrlWithoutParams,
                    async: true,
                    asyncHints: oAsyncHints
                }).then(
                    function () {  // ES6 promise resolved
                      oUI5ComponentLoadDeferred.resolve();
                    },
                    function (sMsg) {  // ES6 promise rejected
                        jQuery.sap.log.warning("Failed to preload component dependency before navigation",
                            sMsg, "sap.ushell.renderers.fiori2.Shell");

                        // Allow opening the application, needed components will be required.
                        oUI5ComponentLoadDeferred.resolve();
                    }
                );
            }

            return oUI5ComponentLoadDeferred.promise();
        },
        _initiateApplication : function (oResolvedHashFragment, sFixedShellHash, oParsedShellHash, iOriginalHistoryLength) {
            var oMetadata = sap.ushell.services.AppConfiguration.getMetadata(oResolvedHashFragment);

            this._logOpenAppAction(sFixedShellHash);

            try {
                this.navigate(oParsedShellHash, sFixedShellHash, oMetadata, oResolvedHashFragment);
            } catch (oExc) {
                if (oExc.stack) {
                    jQuery.sap.log.error("Application initialization failed due to an Exception:\n" + oExc.stack);
                }
                this.restoreNavContainerAfterFailure();
                this.hashChangeFailure(iOriginalHistoryLength, oExc.name, oExc.message, oMetadata ? oMetadata.title : "");
            }
        },

        /**
         * Callback registered with NavService. Triggered on navigation requests
         *
         * @param {string} sShellHash
         *     the hash fragment to parse (must start with "#")
         *
         * @returns {jQuery.Deferred.promise}
         *     a promise resolved with an object containing the resolved hash
         *     fragment (i.e., the result of {@link
         *     sap.ushell.services.NavTargetResolution#resolveHashFragment})
         *     and the parsed shell hash obtained via {@link
         *     sap.ushell.services.URLParsing#parseShellHash}. This promise is
         *     rejected with an error message in case errors occur.
         */
        _resolveHashFragment: function (sShellHash) {
            var oResolvedHashFragment,
                oParsedShellHashParams,
                oParsedShellHash = sap.ushell.Container.getService("URLParsing").parseShellHash(sShellHash),
                oDeferred = new jQuery.Deferred();

            /*
             * Optimization: reconstruct the result of resolveHashFragment if
             * navResCtx is found in the hash fragment.
             */
            if (oParsedShellHash && oParsedShellHash.contextRaw && oParsedShellHash.contextRaw === "navResCtx") {
                oParsedShellHashParams = oParsedShellHash.params || {};

                oResolvedHashFragment = {
                    additionalInformation: oParsedShellHashParams.additionalInformation[0],
                    applicationType: oParsedShellHashParams.applicationType[0],
                    url: oParsedShellHashParams.url[0],
                    navigationMode: oParsedShellHashParams.navigationMode[0]
                };

                if (oParsedShellHashParams.title) {
                    oResolvedHashFragment.text = oParsedShellHashParams.title[0];
                }

                oDeferred.resolve(oResolvedHashFragment, oParsedShellHash);
            } else {
                sap.ushell.Container.getService("NavTargetResolution").resolveHashFragment(sShellHash)
                    .done(function (oResolvedHashFragment) {

                        oDeferred.resolve(oResolvedHashFragment, oParsedShellHash);
                    })
                    .fail(function (sMsg) {
                        oDeferred.reject(sMsg);
                    });
            }

            return oDeferred.promise();
        },


        /**
         * Handles navigation modes that depend on current state such as the
         * history. In these cases of conditional navigation, this method calls
         * {@link #navigate}.
         *
         * @param {object} oParsedShellHash
         *     the parsed shell hash obtained via
         *     {@link sap.ushell.services.URLParsing} service
         * @param {string} sFixedShellHash
         *     the hash fragment to navigate to. It must start with "#" (i.e., fixed).<br />
         * @param {object} oMetadata
         *     the metadata object obtained via
         *     {@link sap.ushell.services.AppConfiguration#parseShellHash}
         * @param {object} oResolvedHashFragment
         *     the hash fragment resolved via
         *     {@link sap.ushell.services.NavTargetResolution#resolveHashFragment}
         *
         * @returns {boolean} whether conditional navigation was handled
         * @private
         */
        _handleConditionalNavigation: function (oParsedShellHash, sFixedShellHash, oMetadata, oResolvedHashFragment) {
            var that = this,
                sNavigationMode = oResolvedHashFragment.navigationMode;

            if (sNavigationMode === oNavigationMode.newWindowThenEmbedded) {
                /*
                 * Implement newWindowThenEmbedded based on current state.
                 */
                if (this._isColdStart() || (oParsedShellHash.contextRaw && oParsedShellHash.contextRaw === "navResCtx") || this.history.backwards) {
                    /*
                     * coldstart -> always open in place because the new window
                     *              was opened by the user
                     *
                     * navResCtx -> url was generated by us and opened in a new
                     *              window or pasted in an existing window
                     *
                     * history.backwards -> url was was previously opened in
                     *              embedded mode (at any point in the
                     *              history), and we need to navigate back to
                     *              it in the same mode.
                     */
                    oResolvedHashFragment.navigationMode = oNavigationMode.embedded;
                    this.navigate(oParsedShellHash, sFixedShellHash, oMetadata, oResolvedHashFragment);

                } else {
                    that._generateExpandedUrl(oResolvedHashFragment, oParsedShellHash, sFixedShellHash, oMetadata.title).done(function (oShellH) {
                        oResolvedHashFragment.navigationMode = oNavigationMode.newWindow;
                        if (oShellH.skippedParams || oShellH.hash.length >= 1023) {
                            // If the url already was compacted(contains sap-intent-param) it is not compacted further, but still too long)
                            // Also, we need encodeURI, as sFixedShellHash is in internal format
                            oResolvedHashFragment.url = encodeURI(sFixedShellHash);
                        } else {
                            // oShellH.hash was generated by hrefForExternal -> url in external format
                            oResolvedHashFragment.url = oShellH.hash;
                        }
                        that.navigate(oParsedShellHash, sFixedShellHash, oMetadata, oResolvedHashFragment);

                    }).fail(function (sMsg) {
                        throw new Error(sMsg);
                    });
                }

                return true;
            }

            if (sNavigationMode === oNavigationMode.newWindow && this._isColdStart()) {
                /*
                 * Replace the content of the current window if the user has
                 * already opened one.
                 */
                oResolvedHashFragment.navigationMode = oNavigationMode.replace;
                this.navigate(oParsedShellHash, sFixedShellHash, oMetadata, oResolvedHashFragment);

                return true;
            }

            return false;
        },

        /**
         * Performs navigation based on the given resolved hash fragment.
         *
         * @param {object} oParsedShellHash
         *     the parsed shell hash obtained via
         *     {@link sap.ushell.services.URLParsing} service
         * @param {string} sFixedShellHash
         *     the hash fragment to navigate to. It must start with "#" (i.e., fixed).<br />
         * @param {object} oMetadata
         *     the metadata object obtained via
         *     {@link sap.ushell.services.AppConfiguration#parseShellHash}
         * @param {object} oResolvedHashFragment
         *     the hash fragment resolved via
         *     {@link sap.ushell.services.NavTargetResolution#resolveHashFragment}
         */
        navigate: function (oParsedShellHash, sFixedShellHash, oMetadata, oResolvedHashFragment) {
            var sNavigationMode = oResolvedHashFragment.navigationMode,
                oEpcm;

            if (sap.ushell.utils.isNativeWebGuiNavigation(oResolvedHashFragment)) {
                // TODO: check coldstart/browser back: we would go to the homepage or close the window
                try {
                    oEpcm = window.external.getPrivateEpcm();
                    oEpcm.doNavigate(oResolvedHashFragment.url);
                    enableHashChange = false;
                    this.closeLoadingScreen();
                    this._windowHistoryBack(1);
                } catch (e) {
                    if (e.stack) {
                        jQuery.sap.log.error("Application initialization failed due to an Exception:\n" + e.stack);
                    }
                    this.restoreNavContainerAfterFailure();
                    this.hashChangeFailure(this.history.getHistoryLength(), e.name, e.message, oMetadata.title);
                }
                return;
            }

            if (this._handleConditionalNavigation.apply(this, arguments)) {
                return;
            }

            if (sNavigationMode === oNavigationMode.embedded) {
                this._handleEmbeddedNavMode(sFixedShellHash, oParsedShellHash, oMetadata, oResolvedHashFragment);

                // maybe restore hash...
                if (oParsedShellHash && oParsedShellHash.contextRaw === "navResCtx") {
                    // ... and we only do when URL was generated by us via
                    // navResCtx and opened in a new window or pasted in an
                    // existing window.
                    //
                    // In this case we are guaranteed that original_intent is
                    // among the parameters (as the only place we ever generate
                    // this url is in _generateExpandedUrl).
                    //
                    enableHashChange = false;
                    //replace tiny hash in window
                    hasher.replaceHash(oParsedShellHash.params.original_intent[0]);
                    //replace tiny hash in our history model
                    this.history._history[0] = oParsedShellHash.params.original_intent[0];
                }
                return;
            }

            if (sNavigationMode === oNavigationMode.replace) {
                // restore hash
                enableHashChange = false;
                this._changeWindowLocation(oResolvedHashFragment.url);
                return;
            }

            if (sNavigationMode === oNavigationMode.newWindow) {
                // restore hash
                enableHashChange = false;
                this._openAppNewWindow(oResolvedHashFragment.url);
                this.history.pop();
                this._windowHistoryBack(1);
                return;
            }

            // the navigation mode doesn't match any valid one.
            // In this case an error message is logged and previous hash is fetched
            this.hashChangeFailure(this.history.getHistoryLength(), "Navigation mode is not recognized", null, "sap.ushell.renderers.fiori2.Shell.controller");
        },

        _handleEmbeddedNavMode : function (sFixedShellHash, oParsedShellHash, oMetadata, oResolvedHashFragment) {
            var sAppId,
                oInnerControl,
                bNwbcApp,
                bIsNavToHome,
                sIntent;

            sap.ushell.services.AppConfiguration.setCurrentApplication(oResolvedHashFragment);

            this.setAppIcons(oMetadata);

            // obtain a unique id for the app (or the component)
            sAppId = '-' + oParsedShellHash.semanticObject + '-' + oParsedShellHash.action;

            bNwbcApp = oResolvedHashFragment.applicationType === "NWBC";
            bIsNavToHome = sFixedShellHash === "#" ||
                (oConfig.rootIntent && oConfig.rootIntent === oParsedShellHash.semanticObject + "-" + oParsedShellHash.action);

            if (bIsNavToHome && !this.oHomeApp && !oConfig.disableHomeAppCache) {
                //save the "home app" component so that we will be able to initialize its router
                //when navigating back to it
                this._saveHomePageComponent();
            }
            //Support migration from version 1.28 or lower in case local resolution for empty hash was used
            sIntent = oParsedShellHash ? oParsedShellHash.semanticObject + "-" + oParsedShellHash.action : "";


            this.oLoadingDialog.showAppInfo(oMetadata.title, oMetadata.icon || null);

            if (bNwbcApp) {
                this.switchViewState("minimal");

            } else if (bIsNavToHome) {
                this.switchViewState("home");
            } else {
                this.switchViewState(
                    allowedAppStates.indexOf(oConfig.appState) >= 0
                        ? oConfig.appState
                        : "app"
                );
            }
            oInnerControl = this.getWrappedApplication(
                sIntent,
                oMetadata,             // metadata
                oResolvedHashFragment, // the resolved Navigation Target
                sAppId,
                oResolvedHashFragment.fullWidth || oMetadata.fullWidth || bNwbcApp
            );
            //set the NavContainer intialPage
            if (bIsNavToHome && !oConfig.disableHomeAppCache) {
                if (!this.oNavContainer.getInitialPage()) {
                    this.oNavContainer.setInitialPage(oInnerControl);
                }
            }
            this._performTransition(oInnerControl);
        },

        getWrappedApplication: function (sIntent, oMetadata, oResolvedNavigationTarget, sAppId, bFullWidth) {
            var oInnerControl,
                oExistingPage,
                oAppContainer;

            oExistingPage = this.oNavContainer.getPage("application" + sAppId) || this.oNavContainer.getPage("applicationShellPage" + sAppId);
            //if the page/app we are about to create already exists, we need to destroy it before
            //we go on with the flow. we have to destroy the existing page since we need to avoid
            //duplicate ID's
            //in case that we are navigating to the root intent, we do not destroy the page.
            if (oExistingPage && sIntent !== oConfig.rootIntent) {
                oExistingPage.destroy();
            } else if (oExistingPage) {
                return oExistingPage;
            }

            jQuery.sap.require('sap.ushell.components.container.ApplicationContainer');
            setTimeout(function () {
                sap.ui.getCore().getEventBus().publish("launchpad", "appOpening", oResolvedNavigationTarget);
                jQuery.sap.log.info('app is being opened');
            }, 0);
            if (oConfig.applications) {
                oResolvedNavigationTarget.applicationConfiguration = oConfig.applications[sIntent];
            }

            oAppContainer = new sap.ushell.components.container.ApplicationContainer("application" + sAppId, oResolvedNavigationTarget);
            this.publishNavigationStateEvents(oAppContainer, oResolvedNavigationTarget);

            if (bFullWidth) {
                if (!oMetadata.hideLightBackground) {
                    //temporary solution for setting the light background for applications
                    oAppContainer.addStyleClass('sapMShellGlobalInnerBackground');
                }
                oInnerControl = oAppContainer;
            } else {
                jQuery.sap.require("sap.m.Shell");
                oInnerControl = new sap.m.Shell("applicationShellPage" + sAppId, {
                    logo: sap.ui.resource('sap.ui.core', 'themes/base/img/1x1.gif'),
                    title : oMetadata.title,
                    showLogout : false,
                    app : oAppContainer
                }).addStyleClass("sapUshellApplicationPage");
                if (!oMetadata.title) {
                    oInnerControl.addStyleClass("sapUshellApplicationPageNoHdr");
                }
            }

            this._applyContentDensity();

            oAppContainer.onfocusin = function () {
                //focus not in the shell
                sap.ushell.renderers.fiori2.AccessKeysHandler.bFocusOnShell = false;
                sap.ushell.renderers.fiori2.AccessKeysHandler.bFocusPassedToExternalHandlerFirstTime = false;
            };
            oAppContainer.onfocusout = function () {
                //focus in the shell
                sap.ushell.renderers.fiori2.AccessKeysHandler.bFocusOnShell = true;
                sap.ushell.renderers.fiori2.AccessKeysHandler.bFocusPassedToExternalHandlerFirstTime = true;
            };

            // Add inner control for next request
            this.oNavContainer.addPage(oInnerControl);

            return oInnerControl;
        },

        /**
         * adds a listener to the "componentCreated" Event that is published by the
         * "sap.ushell.components.container.ApplicationContainer".
         * once the "home app" Component is saved, the listener is removed, and this function
         * will not do anything.
         */
        _saveHomePageComponent: function () {
            if (this.oHomeApp) {
                return;
            }
            var that = this,
                sContainerNS = "sap.ushell.components.container.ApplicationContainer",
                fListener = function (oEvent, sChannel, oData) {
                    that.oHomeApp = oData.component;
                    sap.ui.getCore().getEventBus().unsubscribe(sContainerNS, 'componentCreated', fListener);
                };
            sap.ui.getCore().getEventBus().subscribe(sContainerNS, 'componentCreated', fListener);
        },

        /**
         * Shows an error message and navigates to the previous page.
         *
         * @param {number} iHistoryLength the length of the history
         *    <b>before</b> the navigation occurred.
         * @param {string} sMessage the error message
         * @param {string} sDetails the detailed error message
         * @param {string} sComponent the component that generated the error message
         */
        hashChangeFailure : function (iHistoryLength, sMessage, sDetails, sComponent) {
            this.reportError(sMessage, sDetails, sComponent);
            this.closeLoadingScreen();
            //use timeout to avoid "MessageService not initialized.: error
            this.delayedMessageError(sap.ushell.resources.i18n.getText("fail_to_start_app_try_later"));
            closeAllDialogs = false;

            if (iHistoryLength === 0) {
                // if started with an illegal shell hash (deep link), we just remove the hash
                hasher.setHash("");
            } else {
                // navigate to the previous URL since in this state the hash that has failed to load is in the URL.
                this._windowHistoryBack(1);
            }
        },

        reportError : function (sMessage, sDetails, sComponent) {
            jQuery.sap.log.error(sMessage, sDetails, sComponent);
        },

        delayedMessageError : function (sMsg) {
            setTimeout(function () {
                if (sap.ushell.Container !== undefined) {
                    sap.ushell.Container.getService("Message").error(sMsg);
                }
            }, 0);
        },

        fixShellHash : function (sShellHash) {
            if (!sShellHash) {
                sShellHash = '#';
            } else if (sShellHash.charAt(0) !== '#') {
                sShellHash = '#' + sShellHash;
            }
            return sShellHash;
        },

        restoreNavContainerAfterFailure: function () {
            // create a new navContainer because old one is in a irreparable state
            // save all other pages besides the page which causes the error
            var oCurrentPage = this.oNavContainer.getCurrentPage(),
                oUnifiedShell,
                aOldPages;

            if (oCurrentPage) {
                this.oNavContainer.removePage(oCurrentPage).destroy();
            }
            aOldPages = this.oNavContainer.removeAllPages();

            this.oNavContainer.destroy();
            this.oNavContainer = this.getView().initNavContainer(this);
            oUnifiedShell = this.getView().getOUnifiedShell();
            oUnifiedShell.addContent(this.oNavContainer);

            jQuery.each(aOldPages, jQuery.proxy(function (i, v) {
                if (!this.oNavContainer.getPage(v.getId())) {
                    this.oNavContainer.addPage(v);
                }
                if (v.getId() === this.oNavContainer.getInitialPage()) {
                    v.removeStyleClass("sapMNavItemHidden"); // still there because of old navContainer
                }
            }, this));
        },

        publishNavigationStateEvents : function (oAppContainer, oApplication) {
            //after the app container is rendered, publish an event to notify
            //that an app was opened
            var origAfterRendering = oAppContainer.onAfterRendering,
                origExit,
                that = this;

            oAppContainer.onAfterRendering = function () {
                if (origAfterRendering) {
                    origAfterRendering.apply(this, arguments);
                }
                //wrapped in setTimeout since "pubilsh" is not async
                setTimeout(function () {
                    sap.ui.getCore().getEventBus().publish("launchpad", "appOpened", oApplication);
                    jQuery.sap.log.info('app was opened');
                }, 0);

                //publish the event externally
                sap.ushell.renderers.fiori2.utils.publishExternalEvent("appOpened", oApplication);
            };
            //after the app container exit, publish an event to notify
            //that an app was closed
            origExit = oAppContainer.exit;
            oAppContainer.exit = function () {
                if (origExit) {
                    origExit.apply(this, arguments);
                }
                //apply the original density settings
                that._applyContentDensity();

                //wrapped in setTimeout since "pubilsh" is not async
                setTimeout(function () {
                    sap.ui.getCore().getEventBus().publish("launchpad", "appClosed", oApplication);
                    jQuery.sap.log.info('app was closed');
                }, 0);

                //publish the event externally
                sap.ushell.renderers.fiori2.utils.publishExternalEvent("appClosed", oApplication);
            };
        },

        _openAppNewWindow : function (sUrl) {
            var newWin = window.open(sUrl);

            if (!newWin) {
                var msg = sap.ushell.resources.i18n.getText("fail_to_start_app_popup_blocker");
                this.delayedMessageError(msg);
            }
        },

        _windowHistoryBack : function (iStepsBack) {
            window.history.back(iStepsBack);
        },

        _changeWindowLocation : function (sUrl) {
            window.location.href = sUrl;
        },

        setAppIcons: function (oMetadataConfig) {
            var sModulePath = jQuery.sap.getModulePath("sap.ushell"),
                oLaunchIconPhone = (oMetadataConfig && oMetadataConfig.homeScreenIconPhone) ||
                    (sModulePath + '/themes/base/img/launchicons/57_iPhone_Desktop_Launch.png'),
                oLaunchIconPhone2 = (oMetadataConfig && oMetadataConfig["homeScreenIconPhone@2"]) ||
                    (sModulePath + '/themes/base/img/launchicons/114_iPhone-Retina_Web_Clip.png'),
                oLaunchIconTablet = (oMetadataConfig && oMetadataConfig.homeScreenIconTablet) ||
                    (sModulePath + '/themes/base/img/launchicons/72_iPad_Desktop_Launch.png'),
                oLaunchIconTablet2 = (oMetadataConfig && oMetadataConfig["homeScreenIconTablet@2"]) ||
                    (sModulePath + '/themes/base/img/launchicons/144_iPad_Retina_Web_Clip.png'),
                oFavIcon = (oMetadataConfig && oMetadataConfig.favIcon) ||
                    (sModulePath + '/themes/base/img/launchpad_favicon.ico'),
                sTitle = (oMetadataConfig && oMetadataConfig.title) || "",
                sCurrentFavIconHref = this.getFavIconHref();
            if (sap.ui.Device.os.ios) {
                jQuery.sap.setIcons({
                    'phone': oLaunchIconPhone,
                    'phone@2': oLaunchIconPhone2,
                    'tablet': oLaunchIconTablet,
                    'tablet@2': oLaunchIconTablet2,
                    'favicon': oFavIcon,
                    'precomposed': true
                });
            } else if (sCurrentFavIconHref !== oFavIcon) {
                jQuery.sap.setIcons({
                    'phone': '',
                    'phone@2': '',
                    'tablet': '',
                    'tablet@2': '',
                    'favicon': oFavIcon,
                    'precomposed': true
                });
            }

            window.document.title = sTitle;
        },

        getFavIconHref: function () {
            return jQuery('link').filter('[rel="shortcut icon"]').attr('href') || '';
        },

        externalSearchTriggered: function (sChannelId, sEventId, oData) {
            oModel.setProperty("/searchTerm", oData.searchTerm);
            oData.query = oData.searchTerm;
        },
        onAfterNavigate: function (oEvent) {
            var sHome = this.oNavContainer.getInitialPage(), //DashboardPage
                sFrom = oEvent.getParameter("fromId");


            if (sFrom && sFrom !== sHome) {
                this.oNavContainer.removePage(sap.ui.getCore().byId(sFrom));
                sap.ui.getCore().byId(sFrom).destroy();
            }
            this.closeLoadingScreen();

            if (oEvent.mParameters && oEvent.mParameters.toId === sHome) {
                sap.ui.getCore().byId("configBtn").focus();
                if (this.oHomeApp && this.oHomeApp.setInitialConfiguration) {
                    this.oHomeApp.setInitialConfiguration();
                }
            }
        },

        closeLoadingScreen: function () {
            this.oLoadingDialog.closeLoadingScreen();
        },

        togglePane : function (oEvent) {
            var oSource = oEvent.getSource(),
                bState = oSource.getSelected();

            sap.ui.getCore().getEventBus().publish("launchpad", "togglePane", {currentContent: oSource.getModel().getProperty("/currentState/paneContent")});

            if (oEvent.getParameter("id") === "categoriesBtn") {
                oSource.getModel().setProperty("/currentState/showCurtainPane", !bState);
            } else {
                oSource.getModel().setProperty("/currentState/showPane", !bState);
            }
        },

        loadUserImage: function () {
            if (!bUserImageAlreadyLoaded) {
                this.getView().loadUserImage();
                bUserImageAlreadyLoaded = true;
            }
        },

        _requireCoreExt : function (sFixedShellHash) {
            // check if we need to load core-ext-light.
            // we load core-ext-light if the flag is true or undefined, or if the intent to be opened is not the root intent
            if ((oConfig.preloadLibrariesForRootIntent || oConfig.preloadLibrariesForRootIntent === undefined) ||
                    (sFixedShellHash !== '#' + oConfig.rootIntent && sFixedShellHash)) {
                try {
                    jQuery.sap.require('sap.fiori.core-ext-light');
                } catch (error) {
                    jQuery.sap.log.warning("failed to load sap.fiori.core-ext-light!");
                }
            }
        },

        _loadCoreExt: function () {
            //if sap.fiori.core or sap.fiori.core-ext-light are loaded, we do not need to load core-ext-light
            var bAlreadyLoaded = jQuery.sap.isDeclared('sap.fiori.core', true) || jQuery.sap.isDeclared('sap.fiori.core-ext-light', true),
                sModuleName = window['sap-ui-debug'] ? 'sap/fiori/core-ext-light-dbg.js' : 'sap/fiori/core-ext-light.js',
                that = this;

            if (bAlreadyLoaded) {
                return;
            }
            this.oCoreExtLoadingDeferred = new jQuery.Deferred();
            jQuery.sap._loadJSResourceAsync(sModuleName)
                .then(function () {
                    that.oCoreExtLoadingDeferred.resolve();
                    setTimeout(function () {
                        sap.ui.getCore().getEventBus().publish("launchpad", "coreExtLoaded");
                    }, 0);
            })
                .catch(function () {
                    jQuery.sap.log.warning('failed to load sap.fiori.core-ext-light');
                    that.oCoreExtLoadingDeferred.reject();
                });
        },


        /*--Strat new RE Code-------------------------------------------------------------------------*/
        /*-----------Signitures--Remove--------------------*/
        removeHeaderItem: function (aIds, bCurrentState, aStates) {
            this._removeShellItem("headItems", aIds, bCurrentState, aStates);
        },

        removeToolAreaItem: function (aIds, bCurrentState, aStates) {
            this._removeShellItem("toolAreaItems", aIds, bCurrentState, aStates);
        },

        removeHeaderEndItem: function (aIds, bCurrentState, aStates) {
            this._removeShellItem("headEndItems", aIds, bCurrentState, aStates);
        },

        removeSubHeader: function (aIds, bCurrentState, aStates) {
            this._removeShellItem("subHeaders", aIds, bCurrentState, aStates);
        },

        removeActionButton: function (aIds, bCurrentState, aStates) {
            this._removeShellItem("actions", aIds, bCurrentState, aStates);
        },

        removeLeftPaneContent: function (aIds, bCurrentState, aStates) {
            this._removeShellItem("paneContent", aIds, bCurrentState, aStates);
        },

        removeFloatingActionButton: function (aIds, bCurrentState, aStates) {
            this._removeShellItem("floatingActions", aIds, bCurrentState, aStates);
        },

        /*-----------Signitures--Add--------------------*/

        addHeaderItem: function (aIds, bCurrentState, aStates) {
            this._addUpToThreeItem("headItems", aIds, bCurrentState, aStates);
        },

        addToolAreaItem: function (sId, bCurrentState, aStates) {
            this._addToolAreaItem("toolAreaItems", sId, bCurrentState, aStates);
        },

        addHeaderEndItem: function (aIds, bCurrentState, aStates) {
            this._addUpToThreeItem("headEndItems", aIds, bCurrentState, aStates);
        },

        addSubHeader: function (aIds, bCurrentState, aStates) {
            this._addShellItem("subHeaders", aIds, bCurrentState, aStates);
        },

        addActionButton: function (aIds, bCurrentState, aStates, bIsFirst) {
            if (bIsFirst) {
                this._addActionButtonAtStart("actions", aIds, bCurrentState, aStates);
            } else {
                this._addActionButton("actions", aIds, bCurrentState, aStates);
            }
        },

        addLeftPaneContent: function (aIds, bCurrentState, aStates) {
            this._addShellItem("paneContent", aIds, bCurrentState, aStates);
        },

        addFloatingActionButton: function (aIds, bCurrentState, aStates) {
            this._addShellItem("floatingActions", aIds, bCurrentState, aStates);
        },


        /*-----------------------------Handlers----------------------------------------------------------------*/
        _addActionButtonAtStart: function (sPropertyString, aId, bCurrentState, aStates) {
            var fnValidation = function (aActionItems, aId, sState) {
                return true;
            }, fnUpdate = function (modelPropertyString, aIds) {
                var aActions = oModel.getProperty(modelPropertyString),
                    cAIds = aIds.slice(0);

                oModel.setProperty(modelPropertyString, cAIds.concat(aActions));
            };
            this._setShellItem(sPropertyString, aId, bCurrentState, aStates, fnValidation, fnUpdate);
        },

        _addActionButton: function (sPropertyString, aId, bCurrentState, aStates) {
            var fnValidation = function (aActionItems, aId, sState) {
                return true;
            }, fnUpdate = function (modelPropertyString, aIds) {
                var aActions = oModel.getProperty(modelPropertyString);

                var iLogoutButtonIndex = aActions.indexOf("logoutBtn");
                if (iLogoutButtonIndex > -1) {
                    aActions.splice(iLogoutButtonIndex, 0, aIds[0]);
                } else {
                    aActions.push(aIds[0]);
                }

                oModel.setProperty(modelPropertyString, aActions);
            };
            this._setShellItem(sPropertyString, aId, bCurrentState, aStates, fnValidation, fnUpdate);
        },

        _addUpToThreeItem: function (sPropertyString, aId, bCurrentState, aStates) {
            var fnValidation = function (aItems, aIds, sState) {
                var allocatedItemSpace = 0,
                    index,
                    sId;

                for (index = 0; index < aItems.length; index++) {
                    sId = aItems[index];
                    if (sId === 'actionsBtn') {
                        allocatedItemSpace += 2;
                    } else {
                        allocatedItemSpace++;
                    }

                    if (allocatedItemSpace + aIds.length > 3) {
                        jQuery.sap.log.warning("maximum of three items has reached, cannot add more items.");
                        return false;
                    }
                }

                return true;
            }, fnUpdate = function (modelPropertyString, aIds) {
                var aItems = oModel.getProperty(modelPropertyString),
                    aCopyItems = aItems.slice(0);
                oModel.setProperty(modelPropertyString, aCopyItems.concat(aIds));
            };
            this._setShellItem(sPropertyString, aId, bCurrentState, aStates, fnValidation, fnUpdate);
        },

        _addShellItem: function (sPropertyString, aId, bCurrentState, aStates) {
            var fnValidation = function (aItems, aId, sState) {
                if (aItems.length > 0) {
                    jQuery.sap.log.warning("You can only add one item. Replacing existing item: " + aItems[0] + " in state: " + sState + ", with the new item: " + aId[0] + ".");
                }
                return true;
            }, fnUpdate = function (modelPropertyString, aIds) {
                oModel.setProperty(modelPropertyString, aId.slice(0));
            };
            this._setShellItem(sPropertyString, aId, bCurrentState, aStates, fnValidation, fnUpdate);
        },

        _addToolAreaItem: function (sPropertyString, sId, bCurrentState, aStates) {
            var fnValidation = function () {
                return true;
            }, fnUpdate = function (modelPropertyString, sId) {
                var aItems = oModel.getProperty(modelPropertyString);
                aItems.push(sId);

                oModel.setProperty(modelPropertyString, aItems);

            };

            var index,
                aPassStates = this._getPassStates(aStates);

            for (index = 0; index < aPassStates.length; index++) {
                this.showShellItem("/toolAreaVisible", aPassStates[index], true);
            }

            this._setShellItem(sPropertyString, sId, bCurrentState, aStates, fnValidation, fnUpdate);
        },

        _removeShellItem: function (sPropertyString, sId, bCurrentState, aStates) {
            var fnValidation = function (aItems, aIds) {
                var location,
                    sId,
                    index;

                for (index = 0; index < aIds.length; index++) {
                    sId = aIds[index];
                    location = aItems.indexOf(sId);
                    if (location < 0) {
                        jQuery.sap.log.warning("You cannot remove Item: " + sId + ", the headItem does not exists.");
                        return false;
                    }
                }

                return true;
            }, fnUpdate = function (modelPropertyString, aIds) {
                var aItems = oModel.getProperty(modelPropertyString),
                    location,
                    sId,
                    index;

                for (index = 0; index < aIds.length; index++) {
                    sId = aIds[index];
                    location = aItems.indexOf(sId);
                    if (location > -1) {
                        aItems.splice(location, 1);
                    }
                }

                oModel.setProperty(modelPropertyString, aItems);
            };
            this._setShellItem(sPropertyString, sId, bCurrentState, aStates, fnValidation, fnUpdate);
        },

        _setShellItem: function (sPropertyString, aId, bCurrentState, aStates, fnValidation, fnUpdate) {
            var modelPropertyString,
                aItems;
            if (bCurrentState === true) {
                modelPropertyString = "/currentState/" + sPropertyString;
                aItems = oModel.getProperty(modelPropertyString);

                //make validations
                if (fnValidation(aItems, aId, "currentState") === false) {
                    return;
                }
                fnUpdate(modelPropertyString, aId);
            } else {
                var aPassStates = this._getPassStates(aStates),
                    i,
                    oCurrentStateName = oModel.getProperty("/currentState/stateName");

                for (i = 0; i < aPassStates.length; i++) {
                    var sState = aPassStates[i],
                        j;
                    modelPropertyString = "/states/" + sState + "/" + sPropertyString;
                    aItems = oModel.getProperty(modelPropertyString);

                    //make validations
                    if (fnValidation(aItems, aId, sState) === false) {
                        return;
                    }

                    var aModelStates = this._getModelStates(sState);
                    for (j = 0; j < aModelStates.length; j++) {
                        modelPropertyString = "/states/" + aModelStates[j] + "/" + sPropertyString;
                        fnUpdate(modelPropertyString, aId);
                        if (oCurrentStateName === aModelStates[j]) {
                            modelPropertyString = "/currentState/" + sPropertyString;
                            fnUpdate(modelPropertyString, aId);
                        }
                    }
                }
            }
        },

        //gets the array of the valid states that need to be update according to the arguments that were passed
        _getPassStates: function (aStates) {
            //an array with the relevant states that were pass as argument
            var aPassStates = [],
                i;
            aStates = aStates || [];

            for (i = 0; i < aStates.length; i++) {
                if (aStates[i] !== undefined) {
                    if (aStates[i] !== "home" && aStates[i] !== "app") {
                        throw new Error("sLaunchpadState value is invalid");
                    }
                    aPassStates.push(aStates[i]);
                }
            }

            if (!aPassStates.length) {
                aPassStates = ["app", "home"];
            }

            return aPassStates;
        },

        //gets all the models states that need to be update according to the state that was pass as argument
        _getModelStates: function (sStates) {

            //an array with the relevant states that need to updated in the model
            var aModelStates = [];

            //in case we need to update to the "app" state, need to update all app states
            if (sStates === "app") {
                var appStates = ["app", "minimal", "standalone", "embedded"];
                aModelStates = aModelStates.concat(appStates);
            } else {
                aModelStates.push(sStates);
            }
            return aModelStates;
        },

        /*---------------------------general purpose-------------------------*/

        showShellItem : function (sProperty, sState, bVisible) {

            var sModelStateProperty = "/states/" + sState + sProperty,
                sModelCurrentStateProperty = "/currentState" + sProperty;
            oModel.setProperty(sModelStateProperty, bVisible);
            if (oModel.getProperty("/currentState/stateName") === sState) {
                oModel.setProperty(sModelCurrentStateProperty, bVisible);
            }
        },

        _setHeaderTitle: function (sTitle, oInnerControl) {
            if (typeof sTitle !== "string") {
                throw new Error("sTitle type is invalid");
            }

            this.getView().getOUnifiedShell().setTitle(sTitle, oInnerControl);
        },

        _setHeaderHiding: function (bHiding) {
            if (typeof bHiding !== "boolean") {
                throw new Error("bHiding type is invalid");
            }
            oModel.setProperty("/currentState/headerHiding", bHiding);
        },

        addEndUserFeedbackCustomUI: function (oCustomUIContent, bShowCustomUIContent) {
            if (oCustomUIContent) {
                this.oEndUserFeedbackConfiguration.customUIContent = oCustomUIContent;
            }
            if (bShowCustomUIContent === false) {
                this.oEndUserFeedbackConfiguration.showCustomUIContent = bShowCustomUIContent;
            }
        },


        /*--End new RE Code-------------------------------------------------------------------------*/

        setFooter: function (oFooter) {
            if (typeof oFooter !== "object" || !oFooter.getId) {
                throw new Error("oFooter value is invalid");
            }
            if (this.getView().oShellPage.getFooter() !== null) { //there can be only 1 footer
                jQuery.sap.log.warning("You can only set one footer. Replacing existing footer: " + this.getView().oShellPage.getFooter().getId() + ", with the new footer: " + oFooter.getId() + ".");
            }
            this.getView().oShellPage.setFooter(oFooter);
        },

        removeFooter: function () {
            if (this.getView().oShellPage.getFooter() === null) {
                jQuery.sap.log.warning("There is no footer to remove.");
                return;
            }
            this.getView().oShellPage.setFooter(null);
        },

        addUserPreferencesEntry: function (entryObject) {
            this._validateUserPrefEntryConfiguration(entryObject);
            this._updateUserPrefModel(entryObject);
        },


        _validateUserPrefEntryConfiguration: function (entryObject) {
            if ((!entryObject) || (typeof entryObject !== "object")) {
                throw new Error("object oConfig was not provided");
            }
            if (!entryObject.title) {
                throw new Error("title was not provided");
            }

            if (!entryObject.value) {
                throw new Error("value was not provided");
            }

            if (typeof entryObject.entryHelpID !== "undefined") {
                if (typeof entryObject.entryHelpID !== "string") {
                    throw new Error("entryHelpID type is invalid");
                } else {
                    if (entryObject.entryHelpID === "") {
                        throw new Error("entryHelpID type is invalid");
                    }
                }
            }

            if (entryObject.title && typeof entryObject.title !== "string") {
                throw new Error("title type is invalid");
            }

            if (typeof entryObject.value !== "function" && typeof entryObject.value !== "string" && typeof entryObject.value !== "number") {
                throw new Error("value type is invalid");
            }

            if (entryObject.onSave && typeof entryObject.onSave !== "function") {
                throw new Error("onSave type is invalid");
            }

            if (entryObject.content && typeof entryObject.content !== "function") {
                throw new Error("content type is invalid");
            }

            if (entryObject.onCancel && typeof entryObject.onCancel !== "function") {
                throw new Error("onCancel type is invalid");
            }
        },
        addElementToManagedQueue: function (oItem) {
            this.managedElementsQueue.push(oItem);
        },
        destroyManageQueue: function () {
            var oItem;
            if (this.managedElementsQueue) {
                oItem = this.managedElementsQueue.pop();

                while (oItem) {
                    oItem.destroy();
                    oItem = this.managedElementsQueue.pop();
                }
            }
        },
        switchViewState: function (sState, bSaveLastState) {

            var sPath = sState[0] === "/" ? sState : "/states/" + sState,
                oState = oModel.getProperty(sPath),
                oCurrentState = oModel.getProperty("/currentState") || {};

            if (!!bSaveLastState) {
                oModel.setProperty("/lastState", oCurrentState);
            }

            // Change "currentState" property in the model to the new state
            oModel.setProperty("/currentState", jQuery.extend(true, {}, {}, oState));
            this.destroyManageQueue();

            if (sState === "searchResults") {
                oModel.setProperty("/lastSearchScreen", '');
                if (!hasher.getHash().indexOf("Action-search") === 0) {
                    var searchModel = sap.ui.getCore().getModel("searchModel");
                    hasher.setHash("Action-search&/searchTerm=" + searchModel.getProperty("/searchBoxTerm") + "&dataSource=" + JSON.stringify(searchModel.getDataSourceJson()));
                }
            }

            sap.ushell.renderers.fiori2.AccessKeysHandler.resetAppKeysHandler();
        },

        _updateUserPrefModel: function (entryObject) {
            var newEntry = {
                "entryHelpID": entryObject.entryHelpID,
                "title": entryObject.title,
                "editable": entryObject.content ? true : false,
                "valueArgument" : entryObject.value,
                "valueResult" : null,
                "onSave": entryObject.onSave,
                "onCancel": entryObject.onCancel,
                "contentFunc": entryObject.content,
                "contentResult": null
            };
            var userPreferencesEntryArray = oModel.getProperty("/userPreferences/entries");
            userPreferencesEntryArray.push(newEntry);
            oModel.setProperty("/userPreferences/entries", userPreferencesEntryArray);
        },

        pressActionBtn: function (oEvent) {
            // don't hide the shell header when the action sheet is open on mobile devices only
            if (!sap.ui.Device.system.desktop) {
                //keep original header hiding value for reset after action sheet close
                var origHeaderHiding = oModel.getProperty("/currentState").headerHiding;
                oModel.setProperty("/currentState/headerHiding", false);
            }
            var oActionSheet = sap.ui.getCore().byId('headActions');
            if (!oActionSheet) {
                var oUserPrefButton = sap.ui.getCore().byId("userPreferencesButton"),
                    oLogoutButton = new sap.ushell.ui.footerbar.LogoutButton("logoutBtn"),
                    oAboutButton = new sap.ushell.ui.footerbar.AboutButton("aboutBtn");
                if (!oUserPrefButton) {
                    oUserPrefButton = new sap.ushell.ui.footerbar.UserPreferencesButton("userPreferencesButton");
                    this._setUserPrefModel(); // set the "/userPreference" property in the model
                }

                jQuery.sap.require('sap.ushell.ui.footerbar.ContactSupportButton');
                jQuery.sap.require('sap.ushell.ui.footerbar.EndUserFeedback');
                var oContactSupport = new sap.ushell.ui.footerbar.ContactSupportButton("ContactSupportBtn", {
                        visible: this.bContactSupportEnabled
                    }),
                    oEndUserFeedback,
                    oEndUserFeedbackEnabled = oModel.getProperty('/showEndUserFeedback');

                if (oEndUserFeedbackEnabled) {
                    oEndUserFeedback = new sap.ushell.ui.footerbar.EndUserFeedback("EndUserFeedbackBtn", {
                        showAnonymous: this.oEndUserFeedbackConfiguration.showAnonymous,
                        showLegalAgreement: this.oEndUserFeedbackConfiguration.showLegalAgreement,
                        showCustomUIContent: this.oEndUserFeedbackConfiguration.showCustomUIContent,
                        feedbackDialogTitle: this.oEndUserFeedbackConfiguration.feedbackDialogTitle,
                        textAreaPlaceholder: this.oEndUserFeedbackConfiguration.textAreaPlaceholder,
                        customUIContent: this.oEndUserFeedbackConfiguration.customUIContent
                    });
                }
                // if xRay is enabled
                if (oModel.getProperty("/enableHelp")) {
                    oUserPrefButton.addStyleClass('help-id-loginDetails');// xRay help ID
                    oLogoutButton.addStyleClass('help-id-logoutBtn');// xRay help ID
                    oAboutButton.addStyleClass('help-id-aboutBtn');// xRay help ID
                    if (oEndUserFeedbackEnabled) {
                        oEndUserFeedback.addStyleClass('help-id-EndUserFeedbackBtn'); // xRay help ID
                    }
                    oContactSupport.addStyleClass('help-id-contactSupportBtn');// xRay help ID
                }

                // Filtering out buttons that does not exist.
                // i.e. when the button's name is included in the array /currentState/actions but the actual control was not created.
                // For example EndUserFeedback button is not created when EndUserFeedbackAdapter is not implemented,
                //  but its name ("EndUserFeedbackBtn") appears in the actions array for several states.
                var oFilter = new sap.ui.model.Filter('', 'EQ', 'a');
                oFilter.fnTest = function (sButtonNameInUpperCase) {
                    var aButtonsNames = oModel.getProperty("/currentState/actions"),
                        sButtonName,
                        index;
                    for (index = 0; index < aButtonsNames.length; index++) {
                       sButtonName = aButtonsNames[index];
                       if (sButtonName.toUpperCase() == sButtonNameInUpperCase) {
                           return !!sap.ui.getCore().byId(sButtonName);
                       }
                    }
                };

                oActionSheet = new sap.m.ActionSheet("headActions", {
                    placement: sap.m.PlacementType.Bottom,
                    buttons: {
                        path: "/currentState/actions",
                        filters:[oFilter],
                        factory: function (sId, oContext) {
                            return sap.ui.getCore().byId(oContext.getObject());
                        }
                    }
                });
                oActionSheet.updateAggregation = this.getView().updateShellAggregation;
                oActionSheet.setModel(oModel);
                this.getView().aDanglingControls.push(oActionSheet, oUserPrefButton, oLogoutButton, oAboutButton, oContactSupport);
                if (oEndUserFeedbackEnabled) {
                    this.getView().aDanglingControls.push(oEndUserFeedback);
                }
                oActionSheet.attachAfterClose(oActionSheet, function () {
                    // reset header hiding according to the current state (on mobile devices only)
                    if (!sap.ui.Device.system.desktop) {
                        oModel.setProperty("/currentState/headerHiding", origHeaderHiding);
                    }
                });
            }
            oActionSheet.openBy(oEvent.getSource());
        },
        _setUserPrefModel: function () {
            var userPreferencesEntryArray = oModel.getProperty("/userPreferences/entries");
            var oDefaultUserPrefModel =  this._getUserPrefDefaultModel();
            oDefaultUserPrefModel.entries = oDefaultUserPrefModel.entries.concat(userPreferencesEntryArray);

            oModel.setProperty("/userPreferences", oDefaultUserPrefModel);
        },

        _getUserPrefDefaultModel: function () {
            var that = this;
            var oUser = sap.ushell.Container.getUser();
            var language = oUser.getLanguage();
            var server = window.location.host;
            var languageTitle = sap.ushell.resources.i18n.getText("languageFld");
            var serverTitle = sap.ushell.resources.i18n.getText("serverFld");

            // search preferences (user profiling, concept of me)
            // entry is added async only if search is active
            jQuery.sap.require('sap.ushell.renderers.fiori2.search.userpref.SearchPrefs');
            var SearchPreferences = sap.ushell.renderers.fiori2.search.userpref.SearchPrefs;
            var searchPreferencesEntry = SearchPreferences.getEntry();
            searchPreferencesEntry.isSearchPrefsActive().done(function(isSearchPrefsActive){
                if (!isSearchPrefsActive){
                    return;
                }
                that.addUserPreferencesEntry(searchPreferencesEntry);
            });

            function ThemeSelectorEntry() {
                this.view = null;

                this.getView = function () {
                    if (!this.view || !sap.ui.getCore().byId('userPrefThemeSelector')) {
                        this.view = sap.ui.jsview("userPrefThemeSelector", "sap.ushell.renderers.fiori2.theme_selector.ThemeSelector");
                    }
                    return this.view;
                };

                var onSaveFunc = function () {
                    var dfd = this.getView().getController().onSave();
                    dfd.done(function () {
                        // re-calculate tiles background color according to the selected theme
                        if (oModel.getProperty("/tilesOpacity") === true) {
                            sap.ushell.utils.handleTilesOpacity();
                        }
                    });
                    return dfd;
                }.bind(this);

                var onCancelFunc = function () {
                    return this.getView().getController().onCancel();
                }.bind(this);

                var getContentFunc = function () {
                    return this.getView().getController().getContent();
                }.bind(this);

                var getValueFunc = function () {
                    return this.getView().getController().getValue();
                }.bind(this);

                var isThemeEditable;
                if (oModel.getProperty("/setTheme") !== undefined) {
                    isThemeEditable =   oModel.getProperty("/setTheme") && oUser.isSetThemePermitted();
                } else {
                    isThemeEditable = oUser.isSetThemePermitted();
                }

                return {
                    entryHelpID: "themes",
                    title: sap.ushell.resources.i18n.getText("theme"),
                    editable: isThemeEditable,
                    valueArgument: getValueFunc,// the function which will be called to get the entry value
                    valueResult: null,
                    onSave: onSaveFunc,
                    onCancel: onCancelFunc, // the function which will be called when canceling entry changes
                    contentFunc: getContentFunc,// the function which will be called to get the content of the detailed entry
                    contentResult: null
                };
            }

            var themeSelectorEntry = new ThemeSelectorEntry();
            function CompactCozySelectorEntry() {
                this.view = null;

                this.getView = function() {
                    if (!this.view || !sap.ui.getCore().byId('userPrefCompactCozySelector')){
                        this.view = sap.ui.jsview("userPrefCompactCozySelector", "sap.ushell.renderers.fiori2.compactCozy_selector.CompactCozySelector");
                    }
                    return this.view;
                };

                var onSaveFunc = function() {
                    return  this.getView().getController().onSave();
                }.bind(this);

                var onCancelFunc = function () {
                    return this.getView().getController().onCancel();
                }.bind(this);

                var getContentFunc = function () {
                    return this.getView().getController().getContent();
                }.bind(this);

                var getValueFunc = function () {
                    return this.getView().getController().getValue();
                }.bind(this);

                return {
                    entryHelpID: "contentDensity",
                    title: sap.ushell.resources.i18n.getText("displayDensity"),
                    editable: true,
                    valueArgument: getValueFunc,// the function which will be called to get the entry value
                    valueResult: null,
                    onSave: onSaveFunc,
                    onCancel: onCancelFunc, // the function which will be called when canceling entry changes
                    contentFunc: getContentFunc,// the function which will be called to get the content of the detailed entry
                    contentResult: null
                };
            }

            function DefaultParametersEntry() {
                this.view = null;

                this.getView = function () {
                    if (!this.view || !sap.ui.getCore().byId('defaultParametersSelector')) {
                        this.view = sap.ui.jsview("defaultParametersSelector", "sap.ushell.renderers.fiori2.defaultParameters_selector.DefaultParameters");
                    }
                    return this.view;
                };

                var onSaveFunc = function () {
                    return this.getView().getController().onSave();
                }.bind(this);

                var onCancelFunc = function () {
                    return this.getView().getController().onCancel();
                }.bind(this);

                var getContentFunc = function () {
                    return this.getView().getController().getContent();
                }.bind(this);

                var getValueFunc = function () {
                    return this.getView().getController().getValue();
                }.bind(this);

                return {
                    //entryHelpID: "themes",
                    title: sap.ushell.resources.i18n.getText("userDefaults"),
                    editable: true,
                    visible: false,
                    valueArgument: getValueFunc,// the function which will be called to get the entry value
                    valueResult: null,
                    onSave: onSaveFunc,
                    onCancel: onCancelFunc, // the function which will be called when canceling entry changes
                    contentFunc: getContentFunc,// the function which will be called to get the content of the detailed entry
                    contentResult: null
                };
            }

            var entries =
                [
                    {entryHelpID: "serverName", title: serverTitle, editable: false, valueArgument: server, valueResult: null},
                    {entryHelpID: "language", title: languageTitle, editable: false, valueArgument: language, valueResult: null},
                    //Old theme is initialized to be the current theme
                    themeSelectorEntry
                ];

            //if FLP is running on combi device AND compactCozy flag is on then create the view for user preferences
            if (sap.ui.Device.system.combi && oModel.getProperty("/contentDensity")) {
                entries.push(new CompactCozySelectorEntry());
            }

            if (oModel.getProperty("/userDefaultParameters")) {
                entries.push(new DefaultParametersEntry());
            }

            return {
                dialogTitle: sap.ushell.resources.i18n.getText("userPreferences"),
                isDetailedEntryMode: false,
                activeEntryPath: null, //the entry that is currently modified
                entries: entries
            };
        },

        getModel: function () {
            return oModel;
        }
    });

}());

}; // end of sap/ushell/renderers/fiori2/Shell.controller.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.compactCozy_selector.CompactCozySelector.view') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.compactCozy_selector.CompactCozySelector.view');
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, document, self */
    /*jslint plusplus: true, nomen: true, vars: true */

    
    

    sap.ui.jsview("sap.ushell.renderers.fiori2.compactCozy_selector.CompactCozySelector", {

        createContent: function (oController) {
            var oCompactCozyListItem = this._getCompactCozyListItemTemplate();
            this.translationBundle = sap.ushell.resources.i18n;
            this.oList = new sap.m.List('compactCozySelectorList', {
                includeItemInSelection: true,
                mode: "SingleSelectLeft",
                items: {
                    path: "/options",
                    template: oCompactCozyListItem
                }
            });

            this.info = new sap.m.Text({text:this.translationBundle.getText("displayDensityInfo")}).addStyleClass("sapUiSmallMargin");

            return [this.oList, this.info];
        },

        getControllerName: function () {
            return "sap.ushell.renderers.fiori2.compactCozy_selector.CompactCozySelector";
        },

        _getCompactCozyListItemTemplate : function () {
            var that = this;
            var onSelectHandler = function (e) {
                var item = e.srcControl;
                that.oController.setCurrentContentDensity(item.getBindingContext().getProperty("id"));
            };
            var item = new sap.m.StandardListItem({
                title: "{name}",
                selected: "{isSelected}"
            });
            item.addEventDelegate({
                onclick: onSelectHandler
            });
            return item;
        }

    });

}());
}; // end of sap/ushell/renderers/fiori2/compactCozy_selector/CompactCozySelector.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.defaultParameters_selector.DefaultParameters.view') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.defaultParameters_selector.DefaultParameters.view');
(function () {
    "use strict";
    /*global jQuery, sap, document, self */
    /*jslint plusplus: true, nomen: true, vars: true */

    
    
    jQuery.sap.require('sap.ui.comp.smartform.SmartForm'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.comp.smartfield.SmartField'); // unlisted dependency retained


    sap.ui.jsview("sap.ushell.renderers.fiori2.defaultParameters_selector.DefaultParameters", {

        createContent: function (oController) {

        },

        getControllerName: function () {
            return "sap.ushell.renderers.fiori2.defaultParameters_selector.DefaultParameters";
        }


    });

}());
}; // end of sap/ushell/renderers/fiori2/defaultParameters_selector/DefaultParameters.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.controls.SearchFacet') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.controls.SearchFacet');
/* global jQuery, sap, window */
(function() {
    "use strict";

    jQuery.sap.require('sap.m.List'); // unlisted dependency retained

    

    sap.m.List.extend('sap.ushell.renderers.fiori2.search.controls.SearchFacet', {

        metadata: {
            properties: {
                eshRole: {
                    type: "string",
                    defaultValue: "datasource" //"datasource" or "attribute"
                }
            }
        },

        constructor: function(sId, options) {
            var that = this;
            options = jQuery.extend({}, {
                mode: sap.m.ListMode.SingleSelectMaster,
                showSeparators: sap.m.ListSeparators.None,
                includeItemInSelection: true,
                selectionChange: function(event) {
                    if (this.getEshRole() === "attribute") {
                        this.handleItemPress(event);
                    }
                },
                itemPress: function(event) {
                    if (this.getEshRole() === "datasource") {
                        this.handleItemPress(event);
                    }
                }
            }, options);
            sap.m.List.prototype.constructor.apply(this, [sId, options]);
            this.addStyleClass('sapUshellSearchFacet');
            this.addEventDelegate({
                onAfterRendering: function() {
                    if (that.getEshRole() === "datasource") {
                        jQuery(that.getDomRef()).append("<hr>");
                    }
                }
            });
        },

        handleItemPress: function(event) {
            var listItem = event.mParameters.listItem;
            var oSelectedItem = listItem.getBindingContext().getObject();
            if (listItem.getSelected()) {
                this.getModel().addFilterCondition(oSelectedItem);
            } else {
                this.getModel().removeFilterCondition(oSelectedItem);
            }
        },

        renderer: 'sap.m.ListRenderer',

        setEshRole: function(role) {
            var items = {
                path: "items",
                template: new sap.ushell.renderers.fiori2.search.controls.SearchFacetItem(),
                groupHeaderFactory: function(oGroup) {
                    return new sap.m.GroupHeaderListItem({
                        title: oGroup.key,
                        upperCase: false
                    });
                }
            };
            switch (role.toLowerCase()) {
                default:
                    case "datasource":
                    this.setMode(sap.m.ListMode.SingleSelectMaster);
                this.setHeaderText(sap.ushell.resources.i18n.getText("searchIn"));
                break;
                case "attribute":
                        this.setMode(sap.m.ListMode.MultiSelect);
                    this.setHeaderText("");
                    items.sorter = new sap.ui.model.Sorter("facetTitle", false, true);
                    break;
            }
            this.bindAggregation("items", items);
            this.setProperty("eshRole", role); // this validates and stores the new value
            return this; // return "this" to allow method chaining
        }

    });

})();

}; // end of sap/ushell/renderers/fiori2/search/controls/SearchFacet.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.controls.SearchInput') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.controls.SearchInput');
/* global jQuery, sap, window */
(function() {
    "use strict";

    jQuery.sap.require('sap.m.Input'); // unlisted dependency retained


    
    var searchHelper = sap.ushell.renderers.fiori2.search.SearchHelper;

    
    var SuggestionTypes = sap.ushell.renderers.fiori2.search.suggestions.SuggestionTypes;

    // start search
    // event               desktop+tablet         phone
    // change              fired/not used a)d)   fired/used
    // sapenter            fired/used            not fired/not used

    // request suggestions
    // event               desktop/tablet   phone
    // liveChange          fired/used       fired/used

    // mouseclick on suggestion
    // sequence  event                         desktop/table        phone
    // 1         change                        fired/not used a)    fired/not used b)
    // 2         suggestionItemSelected        fired/used           fired/used
    // 3         sapenter                      not fired            not fired

    // enter on suggestion
    // sequence  event                         desktop/table       phone (action not possible)
    // 1         change                        fired/not used a)
    // 2         suggestionItemSelected        fired/used
    // 3         sapenter                      fired/not used c)

    // a) prevented by if in change event handler
    // b) prevented by time shift logic (setTimeout in handleChangeSearchInput)
    // c) prevented by checks for changing searchTerm/datasource/paging/filterCondition in searchFireQuery method of searchModel
    // d) search input looses focus -> triggers change -> not wanted on desktop: do not register on change event instead register on sapenter event

    sap.m.Input.extend('sap.ushell.renderers.fiori2.search.controls.SearchInput', {

        constructor: function(sId, oOptions) {
            var that = this;
            oOptions = jQuery.extend({}, {
                showValueStateMessage: false,
                showTableSuggestionValueHelp: false,
                showSuggestion: true,
                filterSuggests: false,
                suggestionColumns: [new sap.m.Column({})],
                placeholder: {
                    path: '/searchTermPlaceholder',
                    mode: sap.ui.model.BindingMode.OneWay
                }
            }, oOptions);
            sap.m.Input.prototype.constructor.apply(this, [sId, oOptions]);
            this.addEventDelegate({
                onsapenter: function(oEvent) {
                    if (that.getValue() !== '') {
                        that.triggerSearch(oEvent);
                    }
                }
            });
            this.bindAggregation("suggestionRows", "/suggestions", function(sId, oContext) {
                return that.suggestionItemFactory(sId, oContext);
            });
            this.addStyleClass('searchInput');

            // disable fullscreen input on mobile
            this._bUseDialog = false;
            this._bFullScreen = false;
        },

        renderer: 'sap.m.InputRenderer',

        fireChange: function(oEvent) {
            sap.m.Input.prototype.fireChange.apply(this, arguments);
            if (sap.ui.Device.system.phone) {
                this.triggerSearch(oEvent);
            }
        },

        triggerSearch: function(oEvent) {
            var that = this;
            // workaround: when selecting a suggestion two events are fired:
            // 1) fireChange
            // 2) doHandleSuggestionItemSelected
            // we want to have only one event (the suggestion doHandleSuggestionItemSelected event)
            // because only one query shall be executed
            // --> shift fireChange to the future so that
            // doHandleSuggestionItemSelected handler can abort fireChange
            this.changeTimer = window.setTimeout(function() {
                that.changeTimer = null;

                searchHelper.subscribeOnlyOnce('triggerSearch', 'allSearchFinished', function() {
                    that.getModel().autoStartApp();
                }, that);
                that.getModel().setSearchBoxTerm(that.getValue(), false);
                that.navigateToSearchApp();

                that.destroySuggestionRows();
                that.getModel().abortSuggestions();
            }, 100);
        },

        fireLiveChange: function() {
            sap.m.Input.prototype.fireLiveChange.apply(this, arguments);
            var suggestTerm = this.getValue();
            var oModel = this.getModel();
            oModel.setSearchBoxTerm(suggestTerm, false);
            if (oModel.getSearchBoxTerm().length > 0 && !sap.ui.Device.system.phone) {
                oModel.doSuggestion();
            } else {
                this.destroySuggestionRows();
                oModel.abortSuggestions();
            }
        },

        fireSuggestionItemSelected: function(oEvent) {
            sap.m.Input.prototype.fireSuggestionItemSelected.apply(this, arguments);
            if (this.changeTimer) {
                window.clearTimeout(this.changeTimer);
                this.changeTimer = null;
            }
            this.doHandleSuggestionItemSelected(oEvent);
        },

        doHandleSuggestionItemSelected: function(oEvent) {
            var oModel = this.getModel();
            var searchBoxTerm = oModel.getSearchBoxTerm();
            var suggestion = oEvent.selectedRow.getBindingContext().getObject();
            var searchTerm = suggestion.labelRaw;
            var dataSource = suggestion.dataSource;
            var targetURL = suggestion.url;
            var type = suggestion.type;

            switch (type) {
                case SuggestionTypes.SUGGESTION_TYPE_APPS:
                    // app suggestions -> start app
                    oModel.analytics.logCustomEvent('FLP: Search', 'Suggestion Select App', [suggestion.title, targetURL, searchBoxTerm]);
                    oModel.analytics.logCustomEvent('FLP: Application Launch point', 'Search Suggestions', [suggestion.title, targetURL, searchBoxTerm]);
                    if (targetURL[0] === '#') {
                        window.location.href = targetURL;
                    } else {
                        window.open(targetURL, '_blank');
                    }
                    break;
                case SuggestionTypes.SUGGESTION_TYPE_DATASOURCE:
                    // data source suggestions
                    // -> change datasource in dropdown
                    // -> do not start search
                    oModel.analytics.logCustomEvent('FLP: Search', 'Suggestion Select Datasource', [dataSource.key, searchBoxTerm]);
                    oModel.setDataSource(dataSource, false);
                    oModel.setSearchBoxTerm('', false);
                    this.focus();
                    break;
                case SuggestionTypes.SUGGESTION_TYPE_OBJECT_DATA:
                    // object data suggestion
                    // -> change search term + change datasource + start search
                    oModel.analytics.logCustomEvent('FLP: Search', 'Suggestion Select Object Data', [searchTerm, dataSource.key, searchBoxTerm]);
                    oModel.setDataSource(dataSource, false);
                    oModel.setSearchBoxTerm(searchTerm, false);
                    this.navigateToSearchApp();
                    this.setValue(searchTerm);
                    break;
                case SuggestionTypes.SUGGESTION_TYPE_HISTORY:
                    // history
                    // -> change search term + change datasource + start search
                    oModel.analytics.logCustomEvent('FLP: Search', 'Suggestion Select History', [searchTerm, dataSource.key, searchBoxTerm]);
                    oModel.setDataSource(dataSource, false);
                    oModel.setSearchBoxTerm(searchTerm, false);
                    this.navigateToSearchApp();
                    this.setValue(searchTerm);
                    break;
                default:
                    break;
            }
        },

        suggestionItemFactory: function(sId, oContext) {

            // prefix App only for app suggestions
            var app = new sap.m.Label({
                text: {
                    path: "icon",
                    formatter: function(sValue) {
                        if (sValue) {
                            return "<i>" + sap.ushell.resources.i18n.getText("label_app") + "</i>";
                        }
                        return "";
                    }
                }
            }).addStyleClass('suggestText').addStyleClass('suggestNavItem');
            app.addEventDelegate({
                onAfterRendering: function() {
                    searchHelper.boldTagUnescaper(this.getDomRef());
                }
            }, app);

            // suggestion icon (only filled for app suggestions)
            var icon = new sap.ui.core.Icon({
                src: "{icon}"
            }).addStyleClass('suggestIcon').addStyleClass('sapUshellSearchSuggestAppIcon');

            // create label with suggestions term
            var label = new sap.m.Label({
                text: "{label}"
            }).addStyleClass('suggestText').addStyleClass('suggestNavItem');
            label.addEventDelegate({
                onAfterRendering: function() {
                    searchHelper.boldTagUnescaper(this.getDomRef());
                }
            }, label);

            // combine app, icon and label into cell
            var cell = new sap.m.CustomListItem({
                type: sap.m.ListType.Active,
                content: [app, icon, label]
            });
            var suggestion = oContext.oModel.getProperty(oContext.sPath);
            cell.getText = function() {
                return suggestion.labelRaw ? suggestion.labelRaw : '';
            };
            var listItem = new sap.m.ColumnListItem({
                cells: [cell],
                type: "Active"
            });
            if (suggestion.type === SuggestionTypes.SUGGESTION_TYPE_APPS) {
                listItem.addStyleClass('searchAppSuggestion');
            }
            if (suggestion.type === SuggestionTypes.SUGGESTION_TYPE_DATASOURCE) {
                listItem.addStyleClass('searchDataSourceSuggestion');
            }
            if (suggestion.type === SuggestionTypes.SUGGESTION_TYPE_OBJECT_DATA) {
                listItem.addStyleClass('searchBOSuggestion');
            }
            if (suggestion.type === SuggestionTypes.SUGGESTION_TYPE_HISTORY) {
                listItem.addStyleClass('searchHistorySuggestion');
            }
            listItem.addStyleClass('searchSuggestion');
            return listItem;
        },

        navigateToSearchApp: function() {

            // continue?
            if (this.getModel().getProperty('/searchBoxTerm') === "") {
                return;
            }

            if (window.location.hash.indexOf('#Action-search') === 0) {
                // app running -> just fire query
                this.getModel()._searchFireQuery();
            } else {
                // app not running -> start via hash
                // change hash:
                // -do not use Searchhelper.hasher here
                // -this is starting the search app from outside
                var sHash = this.getModel().createSearchURL();
                window.location.hash = sHash;
            }

        }


    });

})();

}; // end of sap/ushell/renderers/fiori2/search/controls/SearchInput.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.controls.SearchResultListItem') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.controls.SearchResultListItem');
// iteration 0 : Holger
/* global sap,window,$, jQuery */

(function() {
    "use strict";

    
    
    
    
    

    var SearchText = sap.ushell.renderers.fiori2.search.controls.SearchText;
    var SearchLink = sap.ushell.renderers.fiori2.search.controls.SearchLink;
    var SearchHelper = sap.ushell.renderers.fiori2.search.SearchHelper;
    var SearchLogger = sap.ushell.renderers.fiori2.search.SearchLogger;
    var SearchRelatedObjectsToolbar = sap.ushell.renderers.fiori2.search.controls.SearchRelatedObjectsToolbar;

    var noValue = '\u2013'; // dash

    sap.ui.core.Control.extend("sap.ushell.renderers.fiori2.search.controls.SearchResultListItem", {
        // the control API:
        metadata: {
            properties: {
                title: "string",
                titleUrl: "string",
                type: "string",
                imageUrl: "string",
                previewButton: "string", // true (default) or false, implemented for tablet only acc. to. visual design
                data: "object"
            }
        },



        // the part creating the HTML:
        renderer: function(oRm, oControl) { // static function, so use the given "oControl" instance instead of "this" in the renderer function

            oControl._resetPrecalculatedValues();

            oControl._renderOuterContainer(oRm);
        },



        // render Outer Container
        // ===================================================================
        _renderOuterContainer: function(oRm) {
            var that = this;

            /// outer div
            oRm.write("<div");
            //             oRm.writeAttribute("tabindex", "-1");
            oRm.writeControlData(that); // writes the Control ID
            if (that.status === "open" || that.getData().selected === true) {
                oRm.addClass("sapUshellSearchResultListItem-open");
            }
            oRm.addClass("sapUshellSearchResultListItem-content");
            oRm.writeClasses(); // this call writes the above class plus enables support for Square.addStyleClass(...)
            oRm.write(">");

            that._renderIntermediateContainer(oRm);

            that._renderExpandButton(oRm);

            /// close outer div
            oRm.write("</div>"); // end of the complete control
        },



        // render Intermediate Container
        // ===================================================================
        _renderIntermediateContainer: function(oRm) {
            var that = this;

            oRm.write('<div class="sapUshellSearchResultListItem-main">'); //<div>');

            that._renderInnerContainer(oRm);

            oRm.write("</div>"); //</div>"); // close main
        },



        // render InnerContainer
        // ===================================================================
        _renderInnerContainer: function(oRm) {
            var that = this;

            //             oRm.write('<div class="sapUshellSearchResultListItem-left">');

            oRm.write('<div class="sapUshellSearchResultListItem-titleContainer">');

            /// Image for Phone
            that._renderImageForPhone(oRm);

            /// Main Title and Object Type
            that._renderTitle(oRm);

            oRm.write('</div>');

            /// Attributes (Summary, Detail and WhyFound)
            var itemAttributes = that.getData().itemattributes;
            that._renderAllAttributes(oRm, itemAttributes);

            //             oRm.write("</div>");
        },


        // render Title and Object Type
        // ===================================================================
        _renderTitle: function(oRm) {
            var that = this;

            /// /// Title
            var titleURL = that._titleUrl;
            that.title = new SearchLink({
                href: titleURL,
                press: function() {
                    // logging for enterprise search concept of me
                    var oNavEventLog = new SearchLogger.NavigationEvent();
                    oNavEventLog.addUserHistoryEntry(titleURL);
                    // logging for usage analytics
                    var model = sap.ushell.renderers.fiori2.search.getModelSingleton();
                    model.analytics.logCustomEvent('FLP: Search', 'Launch Object', [titleURL]);
                }
            });
            that.title.setText(that.getTitle());
            that.title.setTooltip((sap.ushell.resources.i18n.getText('linkTo_tooltip') + ' ' + that.getTitle()).replace(/<b>/gi, '').replace(/<\/b>/gi, ''));
            that.title.addStyleClass("sapUshellSearchResultListItem-title");
            oRm.renderControl(that.title);
            //that._setSaveText(title.getDomRef(), that.getTitle());


            /// /// Object Type
            var type = new SearchText();
            type.setText(that.getType());
            type.setTooltip(('' + that.getType()).replace(/<b>/gi, '').replace(/<\/b>/gi, ''));
            type.addStyleClass("sapUshellSearchResultListItem-type");
            oRm.renderControl(type);
        },



        // render Image for Desktop and Tablet
        // ===================================================================
        _renderImage: function(oRm) {
            var that = this;
            if (that.getImageUrl()) {
                oRm.write('<div class="sapUshellSearchResultListItem-attribute sapUshellSearchResultListItem-imageDesktop-outerContainer">');
                oRm.write('<div class="sapUshellSearchResultListItem-imageDesktop-innerContainer">');
                oRm.write('<div class="sapUshellSearchResultListItem-imageDesktop-alignmentHelper">');
                oRm.write('</div>');
                oRm.write('<img class="sapUshellSearchResultListItem-imageDesktop" src="');
                oRm.write(that.getImageUrl());
                oRm.write('">');
                oRm.write('</div>');
                oRm.write('</div>');
            }
        },



        // render Image for Phone
        // ===================================================================
        _renderImageForPhone: function(oRm) {
            var that = this;
            if (that.getImageUrl()) {
                oRm.write('<div class="sapUshellSearchResultListItem-imagePhone-container">');
                oRm.write('<img class="sapUshellSearchResultListItem-imagePhone" src="');
                oRm.write(that.getImageUrl());
                oRm.write('">');
                oRm.write('</div>');
            }
        },



        // render Attributes
        // ===================================================================
        _renderAllAttributes: function(oRm, itemAttributes) {
            var that = this;

            var pos = 0;

            /// Summary Attributes
            oRm.write('<div class="sapUshellSearchResultListItem-attributes">');

            oRm.write('<div class="sapUshellSearchResultListItem-visibleAttributes">');

            pos = that._renderSummaryAttributes(oRm, itemAttributes, pos);

            /// Image for Phone and Desktop
            that._renderImage(oRm);

            oRm.write("</div>");

            /// Detail Attributes
            pos = that._renderDetailAttributes(oRm, itemAttributes, pos);

            // attributes close
            oRm.write("</div>");

            return pos;
        },



        // render Summary Attributes
        // ===================================================================
        _renderSummaryAttributes: function(oRm, itemAttributes, pos) {
            var that = this;

            var summaryAttributes = [];

            var visibleAttributes = that._getNumberOfVisibleAttributes();
            for (; pos < itemAttributes.length && pos < visibleAttributes; pos++) {
                summaryAttributes.push(itemAttributes[pos]);
            }

            that._renderAttributes(oRm, summaryAttributes);

            return pos;
        },



        // render Detail Attributes
        // ===================================================================
        _renderDetailAttributes: function(oRm, itemAttributes, pos) {
            var that = this;
            var detailAttribute;

            if (that._isPhoneSize()) {
                return pos;
            }

            var labelText, valueText;

            var numberOfDetailAttributes = 8;

            var detailAttributes = [];

            var end = pos + numberOfDetailAttributes;
            for (; pos < end && pos < itemAttributes.length; pos++) {
                var itemAttribute = itemAttributes[pos];
                labelText = itemAttribute.name;
                valueText = itemAttribute.value;
                if (labelText === undefined || valueText === undefined) {
                    continue;
                }
                if (!valueText || valueText === "") {
                    valueText = noValue;
                }

                detailAttribute = {
                    name: labelText,
                    value: valueText
                };

                detailAttributes.push(detailAttribute);
            }

            if (detailAttributes.length > 0) {
                that._showExpandButton = true;
            }

            oRm.write('<div class="sapUshellSearchResultListItemDetails2"');
            if (that.status !== "open") {
                //oRm.write(' style="display:none"');
                // set the height as 0 at first, it will be rollbacked and display:none 
                // in OnAfterRendering after measuring of offsetWidth and scrollWidth
                oRm.write(' style="height:0; overflow:hidden" ');

            }
            oRm.write('>');

            oRm.write('<div class="sapUshellSearchResultListItem-detailsAttributes">');

            //             for (var i = 0; i < detailAttributes.length; i++) {
            //                 detailAttribute = detailAttributes[i];
            //                 that._renderAttribute(oRm, detailAttribute);
            //             }
            that._renderAttributes(oRm, detailAttributes);

            oRm.write('</div>');

            pos = that._renderWhyFoundAttributes(oRm, itemAttributes, pos);

            that._renderRelatedObjectsToolbar(oRm);

            oRm.write('</div>');

            return pos;
        },




        // render why found attributes
        // ===================================================================
        _renderWhyFoundAttributes: function(oRm, itemAttributes, pos) {
            var that = this;

            var labelText, valueText;

            //////////////////////////////////////////////////////////////////////////
            /// Prepare WhyFound Attributes
            var whyFoundAttributes = [];
            var whyFoundAttribute;
            for (; pos < itemAttributes.length; pos++) {
                var itemAttribute = itemAttributes[pos];

                if (!itemAttribute.whyfound) {
                    continue;
                }

                labelText = itemAttribute.name;
                valueText = itemAttribute.value;
                if (labelText === undefined || valueText === undefined) {
                    continue;
                }
                if (!valueText || valueText === "") {
                    valueText = noValue;
                }

                whyFoundAttribute = {
                    name: labelText,
                    value: valueText
                };

                whyFoundAttributes.push(whyFoundAttribute);
            }

            if (whyFoundAttributes.length > 0) {

                that._showExpandButton = true;

                oRm.write('<div class="sapUshellSearchResultListItem-whyFoundContainer">');
                //                 for (var i = 0; i < whyFoundAttributes.length; i++) {
                //                     whyFoundAttribute = whyFoundAttributes[i];
                //                     that._renderAttribute(oRm, whyFoundAttribute);
                //                 }
                that._renderAttributes(oRm, whyFoundAttributes);
                oRm.write("</div>");
            }

            return pos;
        },



        // render generic Attribute List
        // ===================================================================
        _renderAttributes: function(oRm, itemAttributes, length) {

            length = length || itemAttributes.length;

            for (var i = 0; i < length; i++) {
                var itemAttribute = itemAttributes[i];

                var labelText = itemAttribute.name;
                var valueText = itemAttribute.value;

                if (labelText === undefined || valueText === undefined) {
                    return;
                }
                if (!valueText || valueText === "") {
                    valueText = noValue;
                }

                oRm.write('<div class="sapUshellSearchResultListItem-attribute">');
                var label = new sap.m.Label();
                label.setText(labelText);
                label.setTooltip(('' + labelText).replace(/<b>/gi, '').replace(/<\/b>/gi, ''));
                label.addStyleClass("sapUshellSearchResultListItem-attribute-label");

                var value = new SearchText();
                value.setText(valueText);
                value.setTooltip(('' + valueText).replace(/<b>/gi, '').replace(/<\/b>/gi, ''));
                value.addStyleClass("sapUshellSearchResultListItem-attribute-value");

                label.setLabelFor(value);

                oRm.renderControl(label);
                oRm.renderControl(value);

                oRm.write("</div>");
            }
        },



        // render Related Objects Toolbar
        // ===================================================================
        _renderRelatedObjectsToolbar: function(oRm) {
            var that = this;

            if (!that._intents || that._intents.length == 0) {
                return;
            }

            that._showExpandButton = true;

            var relatedActions = [];
            for (var i = 0; i < that._intents.length; i++) {
                var intent = that._intents[i];
                relatedActions.push({
                    label: intent.text,
                    href: intent.externalHash,
                    target: intent.target
                });
            }

            that.relatedObjectActionsToolbar = new SearchRelatedObjectsToolbar({
                relatedObjects: relatedActions
            });

            that.relatedObjectActionsToolbar.addStyleClass("sapUshellSearchResultListItem-RelatedObjectsToolbar");

            oRm.renderControl(that.relatedObjectActionsToolbar);
        },



        // render expand button
        // ===================================================================
        _renderExpandButton: function(oRm) {
            var that = this;

            var showExpandButton = (that._showExpandButton && that.getPreviewButton() !== "false");

            oRm.write('<div class="sapUshellSearchResultListItemButton">'); //background-color:red">');
            oRm.write('<div class="sapUshellSearchResultListItemButtonContainer');
            if (!showExpandButton) {
                oRm.write(' sapUshellSearchResultListItemButtonContainer-hidden');
            }
            oRm.write('">');

            var iconArrowDown = sap.ui.core.IconPool.getIconURI("slim-arrow-down");
            that.button = new sap.m.Button({
                icon: iconArrowDown,
                type: sap.m.ButtonType.Transparent,
                tooltip: sap.ushell.resources.i18n.getText("showDetailBtn_tooltip"),
                press: function() {
                    that.toggleDetails();
                }
            });
            oRm.renderControl(that.button);

            oRm.write('</div>');
            oRm.write('</div>');
        },


        _getDetailsArea: function() {
            if (!this._detailsArea) {
                var detailsArea = $(this.getDomRef()).find('.sapUshellSearchResultListItemDetails2');
                if (detailsArea && detailsArea.length === 1) {
                    this._detailsArea = detailsArea;
                }
            }
            return this._detailsArea;
        },

        isShowingDetails: function() {
            var isShowingDetails = false;
            var detailsArea = this._getDetailsArea();
            if (detailsArea) {
                isShowingDetails = detailsArea.css('display') !== "none";
            }
            return isShowingDetails;
        },



        showDetails: function(animated) {
            var that = this;

            if (that.isShowingDetails()) {
                return;
            }

            var detailsArea = that._getDetailsArea();
            if (detailsArea) {
                var doShowDetails = function() {
                    var iconArrowUp = sap.ui.core.IconPool.getIconURI("slim-arrow-up");
                    that.button.setTooltip(sap.ushell.resources.i18n.getText("hideDetailBtn_tooltip"));
                    that.button.setIcon(iconArrowUp);
                    that.button.rerender();
                    // before opening, the value text control has width of 0
                    //that.forwardEllipsis(detailsArea.find(".sapUshellSearchResultListItem-attribute-value"));
                };

                animated = typeof animated === 'undefined' ? true : animated;

                if (animated) {
                    detailsArea.slideDown({
                        start: function() {
                            if (that.relatedObjectActionsToolbar) {
                                that.relatedObjectActionsToolbar._layoutToolbarElements();
                            }
                        },
                        duration: "fast",
                        complete: doShowDetails
                    });
                } else {
                    detailsArea.css("display", "");
                    doShowDetails();
                    if (that.relatedObjectActionsToolbar) {
                        that.relatedObjectActionsToolbar._layoutToolbarElements();
                    }
                }
            }
        },



        hideDetails: function(animated) {
            var that = this;

            if (!that.isShowingDetails()) {
                return;
            }

            var detailsArea = that._getDetailsArea();
            if (detailsArea) {
                var doHideDetails = function() {
                    var iconArrowDown = sap.ui.core.IconPool.getIconURI("slim-arrow-down");
                    that.button.setTooltip(sap.ushell.resources.i18n.getText("showDetailBtn_tooltip"));
                    that.button.setIcon(iconArrowDown);
                    that.button.rerender();
                };

                animated = typeof animated === 'undefined' ? true : animated;

                if (animated) {
                    detailsArea.slideUp("fast", doHideDetails);
                } else {
                    detailsArea.css("display", "none");
                    doHideDetails();
                }
            }
        },


        toggleDetails: function(animated) {
            if (this.isShowingDetails()) {
                this.hideDetails(animated);
            } else {
                this.showDetails(animated);
            }
        },



        // after rendering
        // ===================================================================
        onAfterRendering: function() {
            var that = this;

            // re-render is triggered by event listener in SearchResultList
            var phoneSize = 767;
            // var tabletSize = 1150;
            var windowWidth = $(window).width();
            if (windowWidth <= phoneSize) {
                var titleUrl = that._titleUrl;
                if (titleUrl && titleUrl.length > 0) {
                    titleUrl = encodeURI(titleUrl);
                    $(that.getDomRef()).find(".sapUshellSearchResultListItem-left").bind('click', that.fireNavigate(titleUrl));
                }
            }

            //$('.sapUshellSearchResultListItemButton .sapUshellSearchResultListItemButtonContainer').attr('role', 'button');
            //             var $attributeValue = $('.sapUshellSearchResultListItem-attribute-value');
            //             $attributeValue.each(function() {
            //                 if ($(this).prev().hasClass('sapUshellSearchResultListItem-attribute-label')) {
            //                     $(this).attr('aria-label', $(this).prev().text());
            //                 }
            //             });

            // use boldtagunescape like in highlighting for suggestions //TODO
            // allow <b> in title and attributes
            that.forwardEllipsis($(that.getDomRef())
                .find(".sapUshellSearchResultListItem-title, .sapUshellSearchResultListItem-attribute-value, .sapUshellSearchResultListItem-type"));
            var $detailsContainer = $(that.getDomRef()).find('.sapUshellSearchResultListItemDetails2');
            $detailsContainer.css("display", "none");
            $detailsContainer.css("height", "auto");
            $detailsContainer.css("overflow", "visible");

        },



        // ===================================================================
        // Some Helper Functions
        // ===================================================================

        _isDesktopSize: function() {
            //            var windowWidth = jQuery(window).width();
            if (!(this._isTabletSize() || this._isPhoneSize())) {
                return true;
            }
            return false;
        },

        _isTabletSize: function() {
            var windowWidth = $(window).width();
            if (windowWidth <= 1150 && !this._isPhoneSize()) { // @searchTabletSize
                return true;
            }
            return false;
        },

        _isPhoneSize: function() {
            var windowWidth = $(window).width();
            if (windowWidth <= 767) { // @searchPhoneSize
                return true;
            }
            return false;
        },

        _getNumberOfVisibleAttributes: function() {
            var that = this;
            if (!that._visibleAttributes) {
                var visibleAttributes = 4;

                if (!that._isDesktopSize()) {
                    visibleAttributes = 3;
                }

                if (!that._isPhoneSize() && that.getImageUrl()) {
                    visibleAttributes--;
                }
                that._visibleAttributes = visibleAttributes;
            }
            return that._visibleAttributes;
        },

        _resetPrecalculatedValues: function() {
            this._visibleAttributes = undefined;
            this._detailsArea = undefined;
            this._showExpandButton = false;
            this._titleUrl = this.getTitleUrl();
            this._intents = this.getData().intents;
        },






        // handler of  result list item left and image column
        // ===================================================================        
        fireNavigate: function(uri) {
            return function() {
                if (uri) {
                    //                	sap.ui.getCore().byId("shellOverlay").close();
                    window.location.href = uri;
                }
                //                else {
                //                	window.location.href = "/sap/bc/ui5_ui5/ui2/ushell/shells/abap/FioriLaunchpad.html?sap-client=111#SalesOrder-DisplayFactSheet?SalesOrder=27"
                //                }      		
            };

        },

        // allow <b> in title and attributes
        //        onAfterRendering: function() {
        //            var that = this;
        //            $(this.getDomRef()).find(".sapUshellSearchResultListItem-main").bind('click', that.fireNavigate(that.getTitleUrl()));
        //            this._setSafeText(
        //                $(this.getDomRef()).find(".sapUshellSearchResultListItem-title, .sapUshellSearchResultListItem-attribute-value, .sapUshellSearchResultListItem-type"));
        //        },


        forwardEllipsis: function(objs) {
            objs.each(function(i, d) {
                // recover bold tag with the help of text() in a safe way
                SearchHelper.forwardEllipsis4Whyfound(d);
            });
        }

    });


})();

}; // end of sap/ushell/renderers/fiori2/search/controls/SearchResultListItem.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.controls.SearchTilesContainer') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.controls.SearchTilesContainer');
/* global jQuery, sap, console, window  */
(function() {
    "use strict";

    // =======================================================================
    // Import packages
    // =======================================================================
    jQuery.sap.require('sap.m.Button'); // unlisted dependency retained

    
    
    var KeyHandler = sap.ushell.renderers.fiori2.search.controls.SearchTilesContainerKeyHandler;
    var TileHighlighter = sap.ushell.renderers.fiori2.search.controls.SearchTileHighlighter;

    // =======================================================================
    // Tiles Container
    // =======================================================================
    sap.ui.core.Control.extend('sap.ushell.renderers.fiori2.search.controls.SearchTilesContainer', {

        // metadata
        // ===================================================================
        metadata: {
            properties: {
                'totalLength': {
                    type: 'int',
                    defaultValue: 0
                },
                'maxRows': {
                    type: 'int',
                    defaultValue: 1
                },
                'highlightTerms': {
                    type: 'string',
                    defaultValue: ''
                },
                'enableKeyHandler': {
                    type: 'boolean',
                    defaultValue: true
                }
            },
            aggregations: {
                'tiles': {
                    type: 'sap.ui.core.Control',
                    multiple: true
                }
            },
            events: {
                showMore: {}
            }
        },

        // constructor
        // ===================================================================                
        constructor: function() {
            sap.ui.core.Control.prototype.constructor.apply(this, arguments);
            if (this.getEnableKeyHandler()) {
                this.addEventDelegate(new KeyHandler(this));
            }
            this.tileHighlighter = new TileHighlighter();
        },

        // setter for highlight terms
        // ===================================================================        
        setHighlightTerms: function(sTermsToHighlight) {
            // suppress rerendering since highlighting will be done
            // during _onAfterRendering()
            this.setProperty('highlightTerms', sTermsToHighlight, true);
        },

        // delayed rerender
        // ===================================================================        
        delayedRerender: function() {
            var that = this;
            setTimeout(function() {
                that.rerender();
            }, 0);
        },

        // renderer
        // ===================================================================        
        renderer: function(oRm, oControl) {

            // do we have tiles?
            var tiles = oControl.getTiles();
            if (!tiles || tiles.length === 0) {
                return;
            }

            // render start of tile container
            oRm.write('<div');
            oRm.writeControlData(oControl);
            oRm.addClass('sapUshellSearchTileContainer');
            oRm.writeClasses();
            oRm.write('>');

            // render tiles
            oControl.renderTiles(oRm, oControl);

            // render end of tile container
            oRm.write('</div>');
        },

        // process usage analytics
        // ===================================================================        
        logUsageAnalytics: function(tile) {
            var content = tile.getContent(),
                innerTile,
                model;

            if (tile.attachPress) {
                tile.attachPress(function() {
                    model = sap.ushell.renderers.fiori2.search.getModelSingleton();
                    model.analytics.logCustomEvent('FLP: Search', 'Launch App', [tile.usageAnalyticsTitle, tile.getTargetURL()]);
                    model.analytics.logCustomEvent('FLP: Application Launch point', 'Search Results', [tile.usageAnalyticsTitle, tile.getTargetURL()]);

                });
                return;
            }
            if (content.length !== 1) {
                return;
            }
            innerTile = content[0];
            if (!innerTile.attachPress) {
                return;
            }
            innerTile.attachPress(function() {
                model = sap.ushell.renderers.fiori2.search.getModelSingleton();
                model.analytics.logCustomEvent('FLP: Search', 'Launch App', [tile.usageAnalyticsTitle, innerTile.getTargetURL()]);
                model.analytics.logCustomEvent('FLP: Application Launch point', 'Search Results', [tile.usageAnalyticsTitle, innerTile.getTargetURL()]);

            });
        },

        // render tiles
        // ===================================================================        
        renderTiles: function(oRm, oControl) {

            var tiles = oControl.getTiles();

            // render tiles
            for (var i = 0; i < tiles.length; i++) {
                var tile = tiles[i];
                oControl.logUsageAnalytics(tile);
                oControl.registerAfterRenderingForTile(tile);
                oRm.write('<div');
                oRm.addClass('sapUshellSearchTileWrapper');
                oRm.writeClasses();
                oRm.writeAttribute("title", sap.ushell.resources.i18n.getText("launchTile_tooltip"));
                oRm.writeAttribute("tabindex", 0);
                oRm.write('>');
                oRm.renderControl(tile);
                oRm.write('</div>');
            }
            oControl.renderPlusTile(oRm, oControl);

            oControl.tileHighlighter.setHighlightTerms(oControl.getHighlightTerms());

        },

        // render plus tile
        // ===================================================================        
        renderPlusTile: function(oRm, oControl) {

            oRm.write('<div');
            oRm.addClass('sapUshellSearchTileWrapper');
            oRm.addClass('sapUshellSearchShowMoreTile');
            oRm.writeClasses();
            oRm.writeAttribute('style', 'display:none'); // invisible
            oRm.writeAttribute("tabindex", 0);
            oRm.write('>');
            var button = new sap.m.Button({
                text: sap.ushell.resources.i18n.getText('showMoreApps'),
                //  styled: false,
                //  lite: true,
                tooltip: sap.ushell.resources.i18n.getText('showMoreApps'),
                press: function() {
                    oControl.fireShowMore();
                }
            });
            oRm.renderControl(button);
            oRm.write('</div>');

        },

        // after rendering
        // ===================================================================        
        onAfterRendering: function(oEvent) {

            // limit rows
            while (this.getNumberRows() > this.getMaxRows()) {
                this.removeLastTile();
            }

            // check whether plus tile is needed
            var container = this.getDomRef();
            var numberTiles = container.children.length - 1;
            if (this.getTotalLength() > numberTiles) {
                this.makePlusTileVisible();
                this.cutAtRow();
            }

            // accessibility
            jQuery('.sapUshellSearchTileWrapper .sapUshellTileBase').attr('role', 'button');

        },

        // after rendering for tiles
        // ===================================================================        
        registerAfterRenderingForTile: function(tileView) {
            var that = this;
            tileView.addEventDelegate({
                onAfterRendering: function() {
                    that.tileHighlighter.highlight(tileView);
                    //tabindex is on searchTileWrapper layer
                    window.$(tileView.getDomRef()).find(".sapUshellTileBase, .sapUiCockpitReportTile").removeAttr("tabindex");
                }
            });
        },

        // make plus tile visible
        // ===================================================================                
        makePlusTileVisible: function() {
            var container = this.getDomRef();
            var plusTile = container.children.item(container.children.length - 1);
            plusTile.style.display = 'inline-block';
        },

        // remove last tile
        // ===================================================================                
        removeLastTile: function() {
            // last tile in container is always plus tile which may be visible or not:
            // index of last tile -> container.children.length - 2
            var container = this.getDomRef();
            var lastTile = container.children.item(container.children.length - 2);
            lastTile.parentNode.removeChild(lastTile);
        },

        // cut at row
        // ===================================================================                        
        cutAtRow: function() {
            var container = this.getDomRef();
            while (!this.isLastRowCompletelyFilled() || this.getNumberRows() > this.getMaxRows()) {
                if (container.children.length <= 2) {
                    break;
                }
                this.removeLastTile();
            }
        },

        // check whether last row is completely filled
        // ===================================================================                
        isLastRowCompletelyFilled: function() {
            var container = this.getDomRef();
            var tpr = this.getTilesPerRow();
            var tileXPosition = -1;
            for (var i = 0; i < tpr; ++i) {
                var tileWrapper = container.children.item(container.children.length - 1 - i);
                if (tileWrapper.style.display === 'none') {
                    tpr++;
                    continue;
                }
                if (tileXPosition < 0) {
                    tileXPosition = tileWrapper.offsetLeft;
                    continue;
                }
                if (tileWrapper.offsetLeft > tileXPosition) {
                    return false;
                }
            }
            return true;
        },

        // get number of lines
        // ===================================================================                
        getNumberRows: function() {
            var container = this.getDomRef();
            var tileXPosition = -1;
            var counter = 0;
            for (var i = 0; i < container.children.length - 1; ++i) {
                var tileWrapper = container.children.item(i);
                if (tileWrapper.style.display === 'none') {
                    continue;
                }
                if (tileXPosition < 0 || tileWrapper.offsetLeft <= tileXPosition) {
                    counter++;
                }
                tileXPosition = tileWrapper.offsetLeft;
            }
            return counter;
        },

        // get number tiles per lines
        // ===================================================================        
        getTilesPerRow: function() {
            var container = this.getDomRef();
            var tileXPosition = -1;
            var counter = 0;
            for (var i = 0; i < container.children.length; ++i) {
                var tileWrapper = container.children.item(i);
                if (tileWrapper.style.display === 'none') {
                    continue;
                }
                if (tileWrapper.offsetLeft <= tileXPosition) {
                    return counter;
                }
                counter++;
                tileXPosition = tileWrapper.offsetLeft;
            }
            return counter;
        }

    });





})();

}; // end of sap/ushell/renderers/fiori2/search/controls/SearchTilesContainer.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.suggestions.AppSuggestionProvider') ) {
(function() {
    "use strict";

    // =======================================================================
    // import packages
    // =======================================================================
    
    var SearchHelper = sap.ushell.renderers.fiori2.search.SearchHelper;

    
    var SuggestionProvider = sap.ushell.renderers.fiori2.search.suggestions.SuggestionProvider;

    
    var SuggestionTypes = sap.ushell.renderers.fiori2.search.suggestions.SuggestionTypes;

    // =======================================================================
    // declare package
    // =======================================================================
    jQuery.sap.declare('sap.ushell.renderers.fiori2.search.suggestions.AppSuggestionProvider');

    // =======================================================================
    // apps suggestions provider
    // =======================================================================
    var module = sap.ushell.renderers.fiori2.search.suggestions.AppSuggestionProvider = function() {
        this.init.apply(this, arguments);
    };

    module.prototype = jQuery.extend(new SuggestionProvider(), {

        init: function(params) {
            // call super constructor
            SuggestionProvider.prototype.init.apply(this, arguments);
            // decorate suggestion methods (decorator prevents request overtaking)
            this.suggestApplications = SearchHelper.refuseOutdatedRequests(this.suggestApplications);
        },

        abortSuggestions: function() {
            this.suggestApplications.abort();
        },

        getSuggestions: function() {
            var that = this;

            // check that datasource is all or apps
            var dataSource = that.model.getDataSource();
            if (!dataSource.equals(that.model.allDataSource) &&
                !dataSource.equals(that.model.appDataSource)) {
                return jQuery.when([]);
            }

            // get suggestions
            var suggestionTerm = that.model.getProperty('/searchBoxTerm');
            return that.suggestApplications(suggestionTerm)
                .then(function(resultset) {
                    // search for duplicate app titles and combine them into one
                    var appSuggestions = resultset.getElements();
                    var appSuggestionsTitleDict = {};
                    for (var i = 0; i < appSuggestions.length; i++) {
                        if (appSuggestionsTitleDict[appSuggestions[i].title]) {
                            if (!appSuggestionsTitleDict[appSuggestions[i].title].alreadyFound) {
                                var appSearchUrl = "#Action-search&/searchterm=" + appSuggestions[i].title + "&datasource=" + JSON.stringify(that.model.appDataSource);
                                appSuggestionsTitleDict[appSuggestions[i].title].url = appSearchUrl;
                                var combinedAppLabel = sap.ushell.resources.i18n.getText("suggestion_in_apps", appSuggestionsTitleDict[appSuggestions[i].title].label);
                                appSuggestionsTitleDict[appSuggestions[i].title].label = combinedAppLabel;
                                appSuggestionsTitleDict[appSuggestions[i].title].alreadyFound = true;
                                var combinedAppTitle = sap.ushell.resources.i18n.getText("suggestion_in_apps", appSuggestions[i].title);
                                appSuggestionsTitleDict[combinedAppTitle] = appSuggestionsTitleDict[appSuggestions[i].title];
                                delete appSuggestionsTitleDict[appSuggestions[i].title];
                            }
                        } else {
                            appSuggestionsTitleDict[appSuggestions[i].title] = appSuggestions[i];
                        }
                    }
                    appSuggestions = [];
                    for (var appSuggestion in appSuggestionsTitleDict) {
                        if (appSuggestionsTitleDict.hasOwnProperty(appSuggestion)) {
                            appSuggestions.push(appSuggestionsTitleDict[appSuggestion]);
                        }
                    }
                    return [appSuggestions, resultset.totalResults];
                })
                .then(function(resultset) {
                    var appSuggestions = resultset[0];
                    var totalResults = resultset[1];
                    // get app suggestions
                    // var appSuggestions = resultset.getElements();

                    // set type, datasource and position
                    jQuery.each(appSuggestions, function(index, appSuggestion) {
                        appSuggestion.type = SuggestionTypes.SUGGESTION_TYPE_APPS;
                        appSuggestion.dataSource = that.model.appDataSource;
                        appSuggestion.position = SuggestionTypes.apps.position;
                    });

                    // limit app suggestions
                    var appSuggestionLimit;
                    if (that.model.isBusinessObjSearchEnabled() && that.model.isAllCategory()) {
                        appSuggestionLimit = SuggestionTypes.apps.limitDsAll;
                    } else {
                        appSuggestionLimit = SuggestionTypes.apps.limitDsApps;
                    }
                    appSuggestions = appSuggestions.slice(0, appSuggestionLimit);

                    if (totalResults > appSuggestionLimit) {
                        // if there are more apps available, add a "show all apps" suggestion at the end
                        if (dataSource.equals(that.model.appDataSource) ||  that.model.getProperty("/businessObjSearchEnabled") === false) {
                            // but only if datasource is apps or only app search is enabled (nestle changes)
                            var title = sap.ushell.resources.i18n.getText("showAllNApps", totalResults);
                            title = title.replace(/"/g, ""); //remove trailing ""
                            var tooltip = title;
                            var label = "<i>" + title + "</i>";
                            appSuggestions.push({
                                title: title,
                                tooltip: tooltip,
                                label: label,
                                dataSource: that.model.appDataSource,
                                labelRaw: that.model.getProperty("/searchBoxTerm"),
                                type: SuggestionTypes.SUGGESTION_TYPE_OBJECT_DATA
                            });
                        }
                    }
                    return appSuggestions;
                });
        },

        suggestApplications: function(searchTerm) {
            return sap.ushell.Container.getService("Search").queryApplications({
                searchTerm: searchTerm,
                searchInKeywords: true
            });
        }

    });

})();

}; // end of sap/ushell/renderers/fiori2/search/suggestions/AppSuggestionProvider.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.suggestions.DataSourceSuggestionProvider') ) {
(function() {
    "use strict";

    // =======================================================================
    // import packages
    // =======================================================================
    
    var SearchHelper = sap.ushell.renderers.fiori2.search.SearchHelper;

    
    var SuggestionProvider = sap.ushell.renderers.fiori2.search.suggestions.SuggestionProvider;

    
    var SuggestionTypes = sap.ushell.renderers.fiori2.search.suggestions.SuggestionTypes;

    // =======================================================================
    // declare package
    // =======================================================================
    jQuery.sap.declare('sap.ushell.renderers.fiori2.search.suggestions.DataSourceSuggestionProvider');

    // =======================================================================
    // data source suggestions provider
    // =======================================================================
    var module = sap.ushell.renderers.fiori2.search.suggestions.DataSourceSuggestionProvider = function() {
        this.init.apply(this, arguments);
    };

    module.prototype = jQuery.extend(new SuggestionProvider(), {

        init: function(params) {
            // call super constructor
            SuggestionProvider.prototype.init.apply(this, arguments);
            // decorate method for preventing request overtaking
            this.suggestDataSources = SearchHelper.refuseOutdatedRequests(this.suggestDataSources);
        },

        abortSuggestions: function() {
            this.suggestDataSources.abort();
        },

        getSuggestions: function() {

            // check that business object search is enabled
            if (!this.model.isBusinessObjSearchEnabled()) {
                return jQuery.when([]);
            }

            // suggestions only if datasource is all
            if (!this.model.getDataSource().equals(this.model.allDataSource)) {
                return jQuery.when([]);
            }

            // get suggestions
            return this.suggestDataSources();
        },

        suggestDataSources: function() {

            var that = this;

            return that.model.getServerDataSources().then(function(dataSources) {

                //add all and app DataSource so that it can also be suggested like server datasources       
                if (jQuery.inArray(that.model.appDataSource, dataSources) < 0) {
                    dataSources.unshift(that.model.appDataSource);
                }
                if (jQuery.inArray(that.model.allDataSource, dataSources) < 0) {
                    dataSources.unshift(that.model.allDataSource);
                }

                // check all data sources for matching
                // instantiate Tester with search terms
                var suggestionTerms = that.model.getProperty('/searchBoxTerm');
                // suggestion shall ignore stars
                var suggestionTermsIgnoreStar = suggestionTerms.replace(/\*/g, '');
                var oTester = new SearchHelper.Tester(suggestionTermsIgnoreStar);
                var oTestResult;
                var suggestion;
                var dsSuggestions = [];
                for (var i = 0; i < dataSources.length; ++i) {
                    var dataSource = dataSources[i];
                    if (dataSource.equals(that.model.getDataSource())) {
                        continue;
                    }
                    oTestResult = oTester.test(dataSource.label);

                    // match
                    if (oTestResult.bMatch === true) {
                        suggestion = {};
                        suggestion.label = '<i>' + sap.ushell.resources.i18n.getText("searchInPlaceholder",
                            oTestResult.sHighlightedText) + '</i>';
                        suggestion.labelRaw = '';
                        suggestion.dataSource = dataSource;
                        suggestion.type = SuggestionTypes.SUGGESTION_TYPE_DATASOURCE;
                        suggestion.position = SuggestionTypes.datasource.position;
                        dsSuggestions.push(suggestion);
                        if (dsSuggestions.length === SuggestionTypes.datasource.limit) {
                            break;
                        }
                    }
                }
                return dsSuggestions;
            });

        }

    });

})();

}; // end of sap/ushell/renderers/fiori2/search/suggestions/DataSourceSuggestionProvider.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.suggestions.InABaseSuggestionProvider') ) {
(function() {
    "use strict";

    // =======================================================================
    // import packages
    // =======================================================================
    
    var SuggestionProvider = sap.ushell.renderers.fiori2.search.suggestions.SuggestionProvider;

    // =======================================================================
    // declare package
    // =======================================================================
    jQuery.sap.declare('sap.ushell.renderers.fiori2.search.suggestions.InABaseSuggestionProvider');

    // =======================================================================
    // base class for ina based suggestion providers
    // =======================================================================
    var module = sap.ushell.renderers.fiori2.search.suggestions.InABaseSuggestionProvider = function() {
        this.init.apply(this, arguments);
    };

    module.prototype = jQuery.extend(new SuggestionProvider(), {

        // init
        // ===================================================================
        init: function() {
            // call super constructor
            SuggestionProvider.prototype.init.apply(this, arguments);
        },

        // split suggestion term
        // ===================================================================        
        splitSuggestionTerm: function(term) {

            // split suggestions term into 
            // prefix = which is used as search term filter
            // suffix = which is actually used as thes suggestion term
            // split position is last space
            // reason:
            // document contains: "Sally Spring"
            // search input box: sally  s-> suggestion sally spring
            //                   spring s-> suggestion spring sally
            // last suggestion would not happend when just using
            // "spring s " as suggestion term            

            // check for last blank
            var splitPos = term.lastIndexOf(' ');
            if (splitPos < 0) {
                return {
                    searchTerm: null,
                    suggestionTerm: term
                };
            }

            // split search term
            var searchTerm = term.slice(0, splitPos);
            searchTerm = searchTerm.replace(/\s+$/, ""); // right trim
            if (searchTerm.length === 0) {
                return {
                    searchTerm: null,
                    suggestionTerm: term
                };
            }

            // split suggestion term
            var suggestionTerm = term.slice(splitPos);
            suggestionTerm = suggestionTerm.replace(/^\s+/, ""); // left trim
            if (suggestionTerm.length === 0) {
                return {
                    searchTerm: null,
                    suggestionTerm: term
                };
            }

            // return result
            return {
                searchTerm: searchTerm,
                suggestionTerm: suggestionTerm
            };

        },

        // regexp escaping
        // ===================================================================        
        escapeRegExp: function(str) {
            return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
        },

        // concatenate suggestion term
        // ===================================================================        
        concatenateSearchTerm: function(suggestions, splittedSuggestionTerm) {

            // reason: see splitSuggestionTerm       

            // no search term -> nothing to do
            var that = this;
            if (!splittedSuggestionTerm.searchTerm) {
                return;
            }

            // split search terms
            var searchTerms = jQuery.map(splittedSuggestionTerm.searchTerm.split(' '), function(term) {
                term = term.trim();
                return {
                    term: term,
                    regExp: new RegExp(that.escapeRegExp(term), 'i')
                };
            });

            // process all suggestions
            for (var i = 0; i < suggestions.length; ++i) {
                var suggestion = suggestions[i];

                // identify all search terms not included in suggestion
                var notFoundSearchTerms = [];
                for (var j = 0; j < searchTerms.length; ++j) {
                    var searchTerm = searchTerms[j];
                    if (!searchTerm.regExp.test(suggestion.labelRaw)) {
                        notFoundSearchTerms.push(searchTerm.term);
                    }
                }

                // prefix for suggestion = all search terms not included in suggestions
                var prefix = notFoundSearchTerms.join(' ');
                var prefixBold = jQuery.map(notFoundSearchTerms, function(term) {
                    /* eslint no-loop-func:0 */
                    return '<b>' + term + '</b>';
                }).join(' ');
                suggestion.label = prefixBold + ' ' + suggestion.label;
                suggestion.labelRaw = prefix + ' ' + suggestion.labelRaw;
            }
        }


    });

})();

}; // end of sap/ushell/renderers/fiori2/search/suggestions/InABaseSuggestionProvider.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.userpref.SearchPrefs') ) {
(function() {
    "use strict";

    // import modules
    // =======================================================================    
    
    var SearchPrefsModel = sap.ushell.renderers.fiori2.search.userpref.SearchPrefsModel;


    // search preferences administration functions
    // =======================================================================    
    jQuery.sap.declare('sap.ushell.renderers.fiori2.search.userpref.SearchPrefs');
    var module = sap.ushell.renderers.fiori2.search.userpref.SearchPrefs = {};
    jQuery.extend(module, {

        model: new SearchPrefsModel(),

        getEntry: function() {

            var that = this;

            return {

                title: sap.ushell.resources.i18n.getText('sp.userProfiling'),
                editable: true,
                isSearchPrefsActive: that.model.isSearchPrefsActive.bind(that.model),

                // determines status to be shown in list of all user prefs
                value: function() {
                    that.model.reset(); // force data reload
                    return that.model.asyncInit().then(function() {
                        return that.model.getProperty('/sessionUserActive') ?
                            sap.ushell.resources.i18n.getText('sp.on') :
                            sap.ushell.resources.i18n.getText('sp.off');
                    });
                },

                // save prefs
                onSave: function() {
                    return that.model.savePreferences();
                },

                // cancel dialog
                onCancel: function() {},

                // assemble dialog
                content: function() {
                    return that.model.asyncInit().then(function() {
                        var userProfilingView = sap.ui.view({
                            id: 'searchPrefsView',
                            type: sap.ui.core.mvc.ViewType.JS,
                            viewName: 'sap.ushell.renderers.fiori2.search.userpref.SearchPrefsDialog'
                        });
                        userProfilingView.setModel(that.model);
                        return userProfilingView;
                    });
                }

            };
        }

    });

})();

}; // end of sap/ushell/renderers/fiori2/search/userpref/SearchPrefs.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.theme_selector.ThemeSelector.view') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.theme_selector.ThemeSelector.view');
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function () {
    "use strict";
    /*global jQuery, sap, document, self */
    /*jslint plusplus: true, nomen: true, vars: true */

    
    

    sap.ui.jsview("sap.ushell.renderers.fiori2.theme_selector.ThemeSelector", {

        createContent: function (oController) {
            var oThemeListItem = this._getThemeListItemTemplate(),
                that = this,
                onSelectHandler = function (oEvent) {
                var oItem = oEvent.getParameters().listItem;
                that.oController.setCurrentThemeId(oItem.getBindingContext().getProperty("id"));
            };
            this.oList = new sap.m.List('themeSelectorList', {
                includeItemInSelection: true,
                mode: "SingleSelectLeft",
                items: {
                    path: "/options",
                    template: oThemeListItem
                },
                selectionChange: onSelectHandler
            });
            return this.oList;
        },

        getControllerName: function () {
            return "sap.ushell.renderers.fiori2.theme_selector.ThemeSelector";
        },

        _getThemeListItemTemplate : function () {
            return new sap.m.StandardListItem({
                title: "{name}",
                selected: "{isSelected}"
            });
        }
    });

}());
}; // end of sap/ushell/renderers/fiori2/theme_selector/ThemeSelector.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.AppState') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview The Unified Shell's AppState service provides
 *               read and write access to a cross user storage driven by a
 *               generated key.
 *               This is *not* an application facing service, but for Shell
 *               Internal usage.
 *               This service should be accessed by the application
 *               via the CrossApplicationNavigation service.
 *
 * @version
 * 1.32.6
 */
(function () {
    "use strict";
    /*jslint nomen: true, bitwise: false */
    /*jshint bitwise: false */
    /*global jQuery, sap, setTimeout, clearTimeout, window */
    jQuery.sap.declare("sap.ushell.services.AppState");
    
    

    // Determines the allowed number of saved application states in the JavaScript window object
    var Sequentializer,
        save,
        WINDOW_APPSTATE_CAPACITY = 50;


    /**
     * The Unified Shell's AppState service
     * This method MUST be called by the Unified Shell's container only, others
     * MUST call <code>sap.ushell.Container.getService("AppState")</code>.
     * Constructs a new instance of the AppState service.
     *
     * @param {object} oAdapter
     *   The service adapter for the AppState service,
     *   as already provided by the container
     * @param {object} oContainerInterface interface
     * @param {string} sParameter Service instantiation
     * @param {object} oConfig service configuration (not in use)
     *
     *
     * @private
     * @constructor
     * @class
     * @see sap.ushell.services.Container#getService
     *
     * @since 1.28.0
     */
    sap.ushell.services.AppState = function (oAdapter, oContainerInterface, sParameter, oConfig) {
        this._oConfig = oConfig;
        this._sSessionKey = "";
        this._oAdapter = new sap.ushell.services.AppState.SequentializingAdapter(oAdapter);
        this._oAdapter = new sap.ushell.services.AppState.WindowAdapter(this, this._oAdapter);
    };

    /**
     * Method to obtain a session key
     *
     * @returns {string} session key
     *
     * @private
     * @since 1.28.0
     */
    sap.ushell.services.AppState.prototype._getSessionKey = function () {
        if (!this._sSessionKey) {
            this._sSessionKey = this._getGeneratedKey();
        }
        return this._sSessionKey;
    };

    /**
     * Factory method to obtain an AppState object
     *
     * @param {string} sKey
     *            Identifies the container
     *            The string length is restricted to 40 characters
     * @returns {object} Promise object whose done function returns an unmodifiable
     *            {@link sap.ushell.services.AppState.AppState} object
     *            as parameter. The object's getData method
     *            can be used to retrieve the data synchronously.
     * @private Usage by other shell services (CrossApplicationNavigation) only!
     * @since 1.28.0
     */
    sap.ushell.services.AppState.prototype.getAppState = function (sKey) {
        var oDeferred = new jQuery.Deferred(),
            that = this,
            oAppState;
        this._loadAppState(sKey).done(function (sKey, sData) {
            oAppState = new sap.ushell.services.AppState.AppState(that, sKey, false, sData);
            oDeferred.resolve(oAppState);
        }).fail(function (sMsg) {
            oAppState = new sap.ushell.services.AppState.AppState(that, sKey);
            oDeferred.resolve(oAppState);
        });
        return oDeferred.promise();
    };

    /**
     * Method to obtain a generated key
     *
     * All AppState containers start with the prefix AS
     * @returns {string} generated key
     * @private
     * @since 1.28.0
     */
    sap.ushell.services.AppState.prototype._getGeneratedKey = function () {
        var s = sap.ushell.Container.getService("Personalization").getGeneratedKey();
        s = ("AS" + s).substring(0, 40);
        return s;
    };

    /**
    * Factory method to obtain an empty data context object.
    * When data is present in a prior context, this is not relevant
    * (e.g. when using a "uniquely" generated key and planning to
    * overwrite any colliding front-end server data).
    *
    * The call always returns a cleared container.
    *
    * Note that an existing container at the front-end server is not actually deleted or overwritten
    * unless a save operation is executed.
    *
    * @param {object} oComponent
    *   A SAP UI5 Component, mandatory.
    *   An initial object is returned.
    * @returns {object} promise
    *   The promise's done function returns a
    *   {@link sap.ushell.services.AppState.AppState} object
    *   as parameter. The returned AppState object is mutable.
    * @private Only ushell internal usage
    * @since 1.28.0
    */
    sap.ushell.services.AppState.prototype.createEmptyAppState = function (oComponent) {
        var sKey = this._getGeneratedKey(),
            oAppState,
            sAppName = "",
            sACHComponent = "";
        if (oComponent) {
            if (!(oComponent instanceof sap.ui.core.UIComponent)) {
                throw new Error("oComponent passed must be a UI5 Component");
            }
            if (oComponent.getMetadata && oComponent.getMetadata() && typeof oComponent.getMetadata().getName === "function") {
                sAppName = oComponent.getMetadata().getName() || "";
            }
            if (!sAppName && oComponent.getMetadata && oComponent.getMetadata().getLibraryName) {
                sAppName = oComponent.getMetadata().getLibraryName();
            }
            if (oComponent.getMetadata && oComponent.getMetadata() &&
                typeof oComponent.getMetadata().getManifest === "function" &&
                typeof oComponent.getMetadata().getManifest() === "object" &&
                typeof oComponent.getMetadata().getManifest()["sap.app"] === "object") {
                sACHComponent = oComponent.getMetadata().getManifest()["sap.app"].ach || "";
            }
        }
        oAppState = new sap.ushell.services.AppState.AppState(this, sKey, true, undefined, sAppName, sACHComponent);
        return oAppState;
    };

    /**
     * Factory method to obtain an empty data context object which is unmodifiable.
     * This is used if no valid key is present.
     * A new generated key is constructed.
     *
     * @param {object} oComponent
     *   A SAP UI5 Component, mandatory.
     *   An initial object is returned.
     * @returns {object} An unmodifiable container
     * @private
     * @since 1.28.0
     */
    sap.ushell.services.AppState.prototype.createEmptyUnmodifiableAppState = function (oComponent) {
        var sKey = this._getGeneratedKey(),
            oAppState;
        oAppState = new sap.ushell.services.AppState.AppState(this, sKey, false);
        return oAppState;
    };


    save = function () {
        var oDeferred = new jQuery.Deferred();
        this._oServiceInstance._saveAppState(this._sKey, this._sData, this._sAppName, this._sACHComponent).done(function () {
            oDeferred.resolve();
        }).fail(function (sMsg) {
            oDeferred.reject(sMsg);
        });
        return oDeferred.promise();
    };
    /**
     * Container for an application state
     * @param {object} oServiceInstance
     *   Ignored
     * @param {string} sKey
     *   Application state key
     * @param {boolean} bModifiable
     *   Distinguishes whether an application state is modifiable or not
     * @param {string} sData
     *   Application state data
     * @param {string} sAppName the frontend component name
     * @param {string} sACHComponent the application component (e.g. CA-UI2-INT-FE)
     *
     * @private
     */
    sap.ushell.services.AppState.AppState = function (oServiceInstance, sKey, bModifiable, sData, sAppName, sACHComponent) {
        this._oServiceInstance = oServiceInstance;
        this._sKey = sKey;
        this._sData = sData;
        this._sAppName = sAppName;
        this._sACHComponent = sACHComponent;

        if (bModifiable) {
            this.setData = function (oData) {
                try {
                    this._sData = JSON.stringify(oData);
                } catch (e) {
                    jQuery.sap.log.error("Data can not be serialized", "sap.ushell.services.AppState.AppState");
                    this._sData = undefined;
                }
            };
            this.save = save.bind(this);
        }
    };

    /**
     * Method to get the data of an application state
     *
     * @returns {object} Application state data
     * @private
     * @since 1.28.0
     */
    sap.ushell.services.AppState.AppState.prototype.getData = function () {
        var o;
        if (this._sData === undefined || this._sData === "") {
            return undefined;
        }
        try {
            o = JSON.parse(this._sData);
        } catch (ex) {
            jQuery.sap.log.error("Could not parse [" + this._sData + "]" + ex);
        }
        return o;
    };

    /**
     * Method to get the application state key
     *
     * @returns {string} Application state key
     * @private
     * @since 1.28.0
     */
    sap.ushell.services.AppState.AppState.prototype.getKey = function () {
        return this._sKey;
    };

    /**
     * Method to save an application state
     * @param {string} sKey
     *   Application state key
     * @param {string} sData
     *   Application state data
     * @param {string} sAppName
     *   Application name
     * @param {string} sComponent ui 5 component name
     *
     * @returns {object} promise
     * @private
     * @since 1.28.0
     */
    sap.ushell.services.AppState.prototype._saveAppState = function (sKey, sData, sAppName, sComponent) {
        var sSessionKey = this._getSessionKey();
        return this._oAdapter.saveAppState(sKey, sSessionKey, sData, sAppName, sComponent);
    };

    /**
     * Method to load an application state
     * @param {string} sKey
     *            Application State key
     *
     * @returns {object} promise
     * @private
     * @since 1.28.0
     */
    sap.ushell.services.AppState.prototype._loadAppState = function (sKey) {
        return this._oAdapter.loadAppState(sKey);
    };

    /**
     * Creates a limited buffer of iCapacity entries
     *
     * LimitedBuffer A collection implemented as a circular array
     * for storing key, value tuples.
     *
     * Values are added at the "end" of the circular buffer,
     * overwriting present values.
     * Lookup by key is done in reverse order.
     * @param {integer} iCapacity The capacity
     * @constructor
     * @class
     * @since 1.28.0
     * @private
     */
    function LimitedBuffer(iCapacity) {
        this.index = -1;
        this.capacity = iCapacity;
        this.array = [];
    }

    /**
     * Method to clear the buffer, only for testing!
     *
     * @private
     * @since 1.28.0
     */
    LimitedBuffer.prototype._clear = function () {
        this.array = [];
        this.index = -1;
    };

    /**
     * Method to add a specific key, value pair to the LimitedBuffer
     *
     * @param {string} sKey the key
     * @param {string} sValue the value
     *
     * @private
     * @since 1.28.0
     */
    LimitedBuffer.prototype.addAsHead = function (sKey, sValue) {
        this.index = (this.index + 1) % this.capacity;
        this.array[this.index] = { key : sKey, value : sValue};
    };

    /**
     * Method to get the value by a specific key.
     *
     * Lookup is in reverse order of creation
     *
     * @param {string} sKey
     *  Key of the specific node
     * @returns {object}  { key, value }
     * if found, otherwise undefined
     * @private
     * @since 1.28.0
     */
    LimitedBuffer.prototype.getByKey = function (sKey) {
        var i,
            effectiveIdx;
        // we search backward from index.
        // As we add a new application state as a new head element,
        // it's to be assumed that we find the required application state rather
        // in the beginning of the LinkedList
        for (i = 0; i <= this.capacity - 1; i = i + 1) {
            effectiveIdx = (this.capacity + this.index  - i) % this.capacity;
            if (this.array[effectiveIdx] && this.array[effectiveIdx].key === sKey) {
                return this.array[effectiveIdx];
            }
        }
        return undefined;
    };

    /**
     * Adapter which is responsible for the storing the application state
     * in the JavaScript window object.
     * The data is stored in sap.ushell.services.AppState.WindowAdapter.prototype.data
     *
     * @param {string} oServiceInstance
     *            Current service instance
     * @param {object} oBackendAdapter
     *            BackendAdapter -> may be undefined
     * @private
     * @since 1.28.0
     */
    sap.ushell.services.AppState.WindowAdapter = function (oServiceInstance, oBackendAdapter) {
        this._oServiceInstance = oServiceInstance;
        this._oBackendAdapter = oBackendAdapter;
        // prepare window storage
        if (!sap.ushell.services.AppState.WindowAdapter.prototype.data) {
            sap.ushell.services.AppState.WindowAdapter.prototype.data = new LimitedBuffer(WINDOW_APPSTATE_CAPACITY);
        }
    };

    /**
     * Method to save an application state in the window object.
     * If a backend adapter is defined, the application state
     * will be also saved in the backend system.
     *
     * @param {string} sKey
     *   Application state key
     * @param {string} sSessionKey
     *   Current session key
     * @param {string} sData
     *   Application state data
     * @param {string} sAppname
     *   Application name
     * @param {string} sComponent
     *   UI5 component name
     *
     * @returns {object} promise
     * @private
     * @since 1.28.0
     */
    sap.ushell.services.AppState.WindowAdapter.prototype.saveAppState = function (sKey, sSessionKey, sData, sAppname, sComponent) {
        this.sComponent = sComponent;
        var oDeferred = new jQuery.Deferred();
        // save application state in the window object (key and data)
        sap.ushell.services.AppState.WindowAdapter.prototype.data.addAsHead(sKey, sData);
        // save application state via backend adapter if available
        if (this._oBackendAdapter) {
            return this._oBackendAdapter.saveAppState(sKey, sSessionKey, sData, sAppname, sComponent);
        }
        oDeferred.resolve();
        return oDeferred.promise();
    };

    /**
     * Method to load an application state from the window object.
     * If the respective application state is not found there,
     * it will be loaded from the backend system.
     *
     * @param {string} sKey
     *   Application state key
     *
     * @returns {object} promise
     * @private
     * @since 1.28.0
     */
    sap.ushell.services.AppState.WindowAdapter.prototype.loadAppState = function (sKey) {
        var oDeferred = new jQuery.Deferred(),
            appStateFromWindow = sap.ushell.services.AppState.WindowAdapter.prototype.data.getByKey(sKey);
        if (appStateFromWindow) {
            setTimeout(function () {
                oDeferred.resolve(sKey, appStateFromWindow.value);
            }, 0);
            return oDeferred.promise();
        }
        // load application state via backend adapter if available
        if (this._oBackendAdapter) {
            return this._oBackendAdapter.loadAppState(sKey);
        }
        oDeferred.reject("AppState.js loadAppState: Application State could not be loaded");
        return oDeferred.promise();
    };

    /**
     * The Sequentializer assures requests are executed in sequence,
     * subsequent requests issued with addToQueue are only executed if
     * all prior statements have been executed
     * @private
     */
    Sequentializer = function () {
        this.oLastPromise = new jQuery.Deferred();
        this.oLastPromise.resolve();
    };


    /**
     * Given a function object without parameters which must return a promise, add it to the
     * execution queue,
     * functions will be invoked sequentially, only after a prior function promise is
     * done or failed, the next function will be invoked.
     *
     * (note you may use obj.function.bind(obj, arg1, ...,  argN) to obtain a parameterless function)
     *
     * @param {function} fFn function to add to queue
     * @return {object} next promise
     * @private
     */
    Sequentializer.prototype.addToQueue = function (fFn) {
        // given  a function object which returns a promise
        // assure queue this function
        var oNextPromise = new jQuery.Deferred();
        this.oLastPromise.always(function () {
            var res = fFn();
            res.done(function () {
                oNextPromise.resolve.apply(oNextPromise, arguments);
            }).fail(function () {
                oNextPromise.reject.apply(oNextPromise, arguments);
            });
        });
        this.oLastPromise = oNextPromise;
        return oNextPromise.promise();
    };

    /**
     * Method to get a sequentializer object
     * (For testing only)
     * @returns {object} Sequentializer
     * @private
     */
    sap.ushell.services.AppState._getSequentializer = function () {
        return new Sequentializer();
    };

    /**
     * Adapter which is responsible for serializing access to the underlying adapter methods
     *
     * @param {object} oUnderlyingAdapter underlying adapter
     * @private
     * @since 1.28.0
     */
    sap.ushell.services.AppState.SequentializingAdapter = function (oUnderlyingAdapter) {
        this._oSequentializer = new Sequentializer();
        this._oUnderlyingAdapter = oUnderlyingAdapter;
    };

    /**
     * Method to save an application state (sequentialized)
     * delegating to the underlying adapter, but using a sequentialized implementation
     *
     * @param {string} sKey
     *   Application state key
     * @param {string} sSessionKey
     *   Current session key
     * @param {string} sData
     *   Application state data
     * @param {string} sAppname
     *   Application name
     * @param {string} sComponent
     *   UI5 component name
     *
     * @returns {object} promise
     * @private
     * @since 1.28.0
     */
    sap.ushell.services.AppState.SequentializingAdapter.prototype.saveAppState = function (sKey, sSessionKey, sData, sAppname, sComponent) {
        var fn;
        fn = this._oUnderlyingAdapter.saveAppState.bind(this._oUnderlyingAdapter, sKey, sSessionKey, sData, sAppname, sComponent);
        return this._oSequentializer.addToQueue(fn);
    };

    /**
     * Method to load an application state
     * delegating directly to the underlying adapter
     *
     * @param {string} sKey
     *   Application state key
     *
     * @returns {object} promise
     *   Resolve handler has args (key, value)
     * @private
     * @since 1.28.0
     */
    sap.ushell.services.AppState.SequentializingAdapter.prototype.loadAppState = function (sKey) {
        return this._oUnderlyingAdapter.loadAppState(sKey);
    };
}());

}; // end of sap/ushell/services/AppState.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.ClientSideTargetResolution') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview
 *
 * <p>This module performs client side navigation target resolution.</p>
 *
 * <p>This Module focuses on the core algorithm of matching an intent against a
 * list of AppDescriptor signature objects (aka TargetMappings in AppDescriptor
 * V3 format), which in addition have a property resolutionResult representing
 * an "opaque" resolutionResult.</p>
 *
 * <p>getSemanticObjectLinks should be called with already expanded hash fragment.
 * The output of getSemanticObjectLinks should then be postprocessed for
 * compaction, outside this service.</p>
 *
 * <p>
 *   Missing:
 *   <ul>
 *   <li>Scope mechanism</li>
 *   <li>Parameter expansion with dynamic parameters</li>
 *   </ul>
 * </p>
 *
 * <p><b>NOTE:</b> Currently the ABAP adapter also delegates isIntentSupported
 * <b>only</b> (=erroneously) to the resolveHashFragment adapter implementation,
 * missing intents injected via custom resolver plug-ins.  The custom resolver
 * hook functionality is currently outside of this method (only affecting
 * resolveHashFragment), as before. The future architecture should handle this
 * consistently.</p>
 *
 * <p><b>NOTE:</b> Old implementations also gave inconsistent results. For example
 * the ABAP adapter on isIntentSupported did call directly the adapter, not the
 * service, thus missing additional targets added only via a custom resolver.</p>
 *
 * <p> In the future, the custom resolver mechanism should be probably moved
 * towards modifying (or only adding to the list of TargetMappings), this way a
 * single data source has to be altered to support consistently
 * getSemanticObjectLinks, isIntentSupported.</p>
 *
 * @version
 * 1.32.6
 */
(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.services.ClientSideTargetResolution");

    

    /**
     * <p>A module to perform client side target resolution where possible, based
     * on a complete list of Target Mappings.</p>
     *
     * <p>This list defines a common strategy for selecting <b>one</b> appropriate
     * target (even in case of conflicts) across all platforms.</p>
     *
     * <p>The interface assumes a <b>complete</b> list of target mappings has been
     * passed, including parameter signatures. The array of signatures is to be
     * injected by the <code>oAdapter.getInbounds()</code> function, which is invoked by the
     * <code>_ensureTargetMappings()</code> function.</p>
     *
     * <p>Note that the resolution results (e.g. targets and descriptions) may
     * <b>not</b> be present on the client.</p>
     *
     * <p>All interfaces shall still be asynchronous interfaces w.r.t client
     * invocation.</p>
     *
     * The following request can be served from the client:
     * <ol>
     * <li>isIntentSupported</li>
     * <li>getSemanticObjectLinks</li>
     * </ol>
     *
     * <p>This module does <b>not</b> perform hash expansion or compaction.</p> This
     * is performed by respective preprocessing of the hash (see
     * {@link sap.ushell.services.NavTargetResolution#resolveHashFragment}) and:</p>
     *
     * <ul>
     * <li>resolveHashFragment    (expansion, NavTargetResolution.isIntentSupported)</li>
     * <li>isIntentSupported
     * <li>getSemanticObjectLinks   (post processing, Service)</li>
     * </ul>
     *
     * Usage:
     *
     * <pre>
     * var oSrvc = sap.ushell.Container.getService("ClientSideTargetResolution");
     * oSrvc.isIntentSupported("#SemanticObject-action");
     * </pre>
     *
     * @param {object} oAdapter
     *   Adapter, provides TargetMapping/Signature array
     * @param {object} oContainerInterface
     *   Not in use
     * @param {string} sParameters
     *   Parameter string, not in use
     * @param {object} oServiceConfiguration
     *   The service configuration not in use
     *
     * @constructor
     * @class
     * @see {@link sap.ushell.services.Container#getService}
     * @since 1.32.0
     */
    sap.ushell.services.ClientSideTargetResolution = function (oAdapter, oContainerInterface, sParameters, oServiceConfiguration) {
        var _aTargetMappings = [],       // keeps an array of target mappings
            oHaveTargetMappingsDeferred, // deferred object resolved once TMs are obtained
            oURLParsing;                 // the URLParsing service

        /**
         * Makes sure that the <code>_aTargetMappings</code> array is filled
         * with target mappings.
         *
         * A target mapping in the list has a structure like the following:
         *
         * <pre>
         * {
         *     semanticObject: {string},
         *     action: {string},
         *     signature: {
         *         parameters: {
         *             "parameter1" {
         *                 "defaultValue": {
         *                     value: "abc"
         *                 },
         *                 "filter": {
         *                     value: "(abc)|(def)",
         *                     format: "regexp"
         *                 },
         *                 "required": true
         *             },
         *             ... more parameters
         *         }
         *         additionalParameters: "nomatch", // "allowed", "ignored"
         *    }
         * }
         * </pre>
         *
         * @returns {jQuery.Deferred.promise}
         *    a jQuery promise that is resolved with the list of target
         *    mappings obtained.
         * @private
         */
        this._ensureTargetMappings = function() {
            var fnGetInbounds = oAdapter.getInbounds;
            if (!fnGetInbounds) {
                fnGetInbounds = oAdapter.getTMs;
            }
            if (!oHaveTargetMappingsDeferred) {
                oHaveTargetMappingsDeferred = new jQuery.Deferred();

                fnGetInbounds.call(oAdapter).done(function (aTargetMappings) {
                    _aTargetMappings = aTargetMappings;
                    oHaveTargetMappingsDeferred.resolve(_aTargetMappings);
                }).fail(
                    oHaveTargetMappingsDeferred.reject.bind(oHaveTargetMappingsDeferred)
                );
            }

            return oHaveTargetMappingsDeferred.promise();
        };

        this._getURLParsing = function () {
            if (oURLParsing) {
                return oURLParsing;
            }
            return sap.ushell.Container.getService("URLParsing");
        };

        /**
         * Construct the effective parameter list. This is the union of:
         * <ul>
         *   <li>Intent parameters minus the sap-ushell-defaultedParameterNames
         *   if present (it's a output only reserved parameter).</li>
         *   <li>Any target mapping parameter with a known (resolved reference
         *   or plain value) <code>defaultValue</code> specified.</li>
         * </ul>
         *
         * <p>Reference default values will not be part of the effective parameter
         * list if their value is yet to be determined.</p>
         *
         * @param {object} oIntentParams
         *    Intent parameter object (not modified!)
         * @param {object} oSignatureParams
         *    Signature structure
         * @param {object} oKnownUserDefaultRefsIn
         *    The input user default reference object. See {@link #_matchToTargetMapping}
         * @param {string[]} aMissingUserDefaultRefsIfMatch
         *    Parameters that should be added as missing parameters in case the match is successful
         * @param {string[]} aDefaultedParamNames
         *    Output array of parameters that were not present in the signature
         *
         * @returns {object}
         *    The effective parameter list.
         * <p>
         * NOTE: may be a shallow copy of actual parameter arrays!
         * </p>
         *
         * @private
         * @since 1.32.0
         */
        this._addDefaultParameterValues = function (oIntentParams, oSignatureParams, oKnownUserDefaultRefsIn, aMissingUserDefaultRefsIfMatch, aDefaultedParamNames) {
            var oIntentParamsPlusDefaults = {},
                oDefaultedParameters = {}; // keeps unique entries

            // add the intent parameters first (exclude the sap-ushell-defaultedParamNames)
            Object.keys(oIntentParams).forEach(function (sParamName) {
                // this parameter is output only, and must be ignored during resolveHashFragment
                if (sParamName !== "sap-ushell-defaultedParameterNames") {
                    oIntentParamsPlusDefaults[sParamName] = oIntentParams[sParamName];
                }
            });

            if (!oSignatureParams) {
               return oIntentParamsPlusDefaults;
            }

            // add default parameters on top
            Object.keys(oSignatureParams).forEach(function (sParamName) {
                var oTmSignatureParam = oSignatureParams[sParamName],
                    sTmSignatureParamDefaultValue,
                    bValueKnown = false;

                if (!oIntentParamsPlusDefaults[sParamName] && oTmSignatureParam.hasOwnProperty("defaultValue")) {

                    if (oTmSignatureParam.defaultValue.format &&
                        oTmSignatureParam.defaultValue.format === "reference") {

                        // is there a known value for this reference?
                        sTmSignatureParamDefaultValue = oTmSignatureParam.defaultValue.value;
                        if (oKnownUserDefaultRefsIn.hasOwnProperty(sTmSignatureParamDefaultValue)) {

                            if (typeof oKnownUserDefaultRefsIn[sTmSignatureParamDefaultValue] === "string") {
                                // ... user default value was found
                                oIntentParamsPlusDefaults[sParamName] = [ oKnownUserDefaultRefsIn[sTmSignatureParamDefaultValue] ];
                                bValueKnown = true;
                            }
                            // else discard this default parameter
                        } else {
                            // ... no user default value found
                            oIntentParamsPlusDefaults[sParamName] = [ oTmSignatureParam.defaultValue ]; // NOTE: ref

                            aMissingUserDefaultRefsIfMatch.push(oTmSignatureParam.defaultValue.value);
                        }
                    } else {
                        oIntentParamsPlusDefaults[sParamName] = [ oTmSignatureParam.defaultValue.value ];
                        bValueKnown = true;
                    }

                    // Important, only add known values!
                    if (bValueKnown) {
                        oDefaultedParameters[sParamName] = true;
                    }
                }
            });

            Object.keys(oDefaultedParameters).forEach(function (sParam) {
                aDefaultedParamNames.push(sParam);
            });

            return oIntentParamsPlusDefaults;
        };


        /**
         * Checks that a value matches a filter.
         *
         * @param {string} sValue
         *    Filter value to test, may be undefined or string
         * @param {object} oFilter
         *    Filter object as defined in app descriptor input signature, may
         *    be undefined.
         * @param {object} oKnownUserDefaultRefsIn
         *    The set of known reference values. See {@link #_matchToTargetMapping}
         * @param {object} oMissingUserDefaultRefsOut
         *    The set of missing references. See {@link #_matchToTargetMapping}
         *
         * @returns {boolean}
         *    Match result
         *
         * @private
         * @since 1.32.0
         */
        this._matchesFilter = function(sValue, oFilter, oKnownUserDefaultRefsIn, oMissingUserDefaultRefsOut) {
            var sFilterValue;

            if (!oFilter) {
                return true; // no filter -> match
            }
            if (!sValue && sValue !== "") {
                return false;
            }

            sFilterValue = oFilter.value;

            if (oFilter.format === "reference") {
                // if we have this value, check if it matches...
                if (oKnownUserDefaultRefsIn.hasOwnProperty(sFilterValue)) {
                    return sValue === oKnownUserDefaultRefsIn[sFilterValue];
                }

                // ...or save reference if found for the first time
                oMissingUserDefaultRefsOut[sFilterValue] = true;

                return true;
            }
            if (oFilter.format === "value" || oFilter.format === "plain" || oFilter.format === undefined) {
                return sValue === oFilter.value;

            } else if (oFilter.format === "regexp") {
                return !!sValue.match("^" + oFilter.value + "$");

            } else {
                jQuery.sap.log.error("illegal oFilter format");
                return false;
            }
        };

        this._addSortString = function(oMatchResult) {
            function addLeadingZeros(iNumber) {
                var s = "000" + iNumber;
                return s.substr(s.length - 3);
            }

            oMatchResult.priorityString = [
                /*
                 * General idea: the target mapping that fits best to the
                 * intent has priority.
                 *
                 * NOTE1: when it comes to the digits, we later sort from large
                 *        to small. So a higher number 005 has precedence over
                 *        a lower number 003.
                 *
                 * NOTE2: all intent parameters are matching the target mapping
                 *         at this point.
                 *
                 * Terminology:
                 *
                 * - Required parameter: a parameter that appears in the TM
                 *   signature with the flag "required = true".
                 *
                 * - Filter parameter: a parameter that appears in the TM
                 *   signature in the form "filter: { value: ... }" or
                 *   "filter: {}".
                 *
                 * - Default parameter: a parameter that appears in the TM
                 *   signature in the form "defaultValue: { value: ... }" or
                 *   "defaultValue: {}".
                 *
                 * - Defaulted parameter: a default parameter with a specified
                 *   value that will be added to the intent parameter if match
                 *   occurred.
                 *
                 * - Free parameter: a parameter of the Target Mapping
                 *   signature that is not an intent parameter.
                 *
                 * NOTE: a certain parameter can specify
                 * filter/default/required at the same time. E.g., {
                 *    "param": {
                 *       required: true,
                 *       filter: {}, // param must exist
                 *       defaultValue: {
                 *          value: "apple" // will be defaulted to "apple" if not specified
                 *       }
                 *    }
                 *
                 * }
                 */

                /*
                 * Exact SemanticObject matches have priority
                 *
                 * g: generic  x: explicit/exact semantic object (NOTE: "x" > "g")
                 */
                oMatchResult.genericSO ? "g" : "x",

                /*
                 * Number of matching parameters.
                 *
                 * Number target mapping parameters that match the intent. For
                 * filter parameters, the corresponding intent parameter must
                 * have a matching value specified.
                 */
                "MTCH=" + addLeadingZeros(oMatchResult.countMatchingParams),
                /*
                 * Number of matching required parameters.
                 *
                 * Number target mapping parameters that match the intent and
                 * are required.
                 */
                "MREQ=" + addLeadingZeros(oMatchResult.countMatchingRequiredParams),
                /*
                 * Number of Matching filter parameters.
                 *
                 * Number target mapping parameters that match the intent and
                 * specify a filter value.
                 */
                "NFIL=" + addLeadingZeros(oMatchResult.countMatchingFilterParams),
                /*
                 * Number of Defaulted parameters
                 *
                 * Target mapping parameters that are not part of the intent
                 * but specify a default value (defaulted parameters).
                 */
                "NDEF=" + addLeadingZeros(oMatchResult.countDefaultedParams),
                /*
                 * Number of Potentially matching parameters
                 *
                 * Intent parameters that can potentially match the target mapping.
                 */
                "POT=" + addLeadingZeros(oMatchResult.countPotentiallyMatchingParams),
                /*
                 * Reverse number of target mapping parameters that were not
                 * found in the intent (free parameters).
                 */
                "RFRE=" + addLeadingZeros(999 - oMatchResult.countFreeTargetMappingParams)
            ].join(" ");
        };

        /**
         * Checks whether additional intent parameter (plus defaults) conform
         * to the signature expectation regarding additionalParameters.
         *
         * @param {object} oTM
         *    The target mapping
         * @param {object} oIntentParamsPlusDefaults
         *    The intent parameters (plus defaults)
         *
         * @returns {boolean}
         *    Whether additional intent parameters conform to the signature
         *    expectations.
         *
         * @private
         */
        this._checkAdditionalParameters = function(oTM, oIntentParamsPlusDefaults) {
            var bAdditionalParametersMatchExpectation = false;

            if (oTM.signature.additionalParameters === "allowed" ||
                oTM.signature.additionalParameters === "ignored") {

                return true;
            }

            if (oTM.signature.additionalParameters === "nomatch" ||
                oTM.signature.additionalParameters === undefined ) {

                bAdditionalParametersMatchExpectation =
                    Object.keys(oIntentParamsPlusDefaults).every(function (sParamName) {
                        return (!oTM.signature.parameters[sParamName] && sParamName.indexOf("sap-") !== 0)
                            ? false  // parameter not in TM signature and not sap- parameter
                            : true;
                    });

            } else {
                jQuery.sap.log.error("Unexpected value of target mapping for signature.additionalParameters");
            }

            return bAdditionalParametersMatchExpectation;
        };

        /**
         * Update oMissingUserDefaultRefsOut (containing filter user defaults)
         * with any default parameters that were found during defaulting.
         *
         * @param {array} aUserDefaultRefsIfMatch
         *     The user default references that must be added to
         *     <code>oUserDefaultRefsOut</code> if the match occurred
         * @param {object} oMissingUserDefaultRefsOut
         *     The user default references required to perform a
         *     non-approximate matching
         *
         * @private
         * @since 1.32.0
         */
        this._addFoundParametersToUserDefaultRefs = function (aUserDefaultRefsIfMatch, oMissingUserDefaultRefsOut) {
            aUserDefaultRefsIfMatch.forEach(function (sRefValue) {
                oMissingUserDefaultRefsOut[sRefValue] = true;
            });
        };

        /**
         * Extract an integer value from a parameter "sap-priority" if present
         * among the intent parameters, and adds it to the passed mutated
         * object.
         *
         * @param {object} oIntentParams
         *    The intent parameters that may contain the "sap-priority" to be
         *    parsed.
         * @param {object} oMutated
         *    The mutated object to write the parsed "sap-priority" parameter
         *    to.
         *
         * @private
         * @since 1.32.0
         */
        this._extractSapPriority = function (oIntentParams, oMutated) {
            var iSapPriority;
            if (oIntentParams && oIntentParams["sap-priority"] && oIntentParams["sap-priority"][0] ) {
                iSapPriority = parseInt(oIntentParams["sap-priority"][0], 10);
                if (!isNaN(iSapPriority)) {
                    oMutated["sap-priority"] = iSapPriority;
                }
            }
            return;
        };

        /**
         * Perform matching between an intent and the given target mapping. The
         * matching procedure takes into account references (to user default
         * values) in filters and default values.<br />
         *
         * <ul>
         *   <li>A target mapping with a filter reference (to a user default)
         *     is matched against a given intent if the intent specifies the
         *     filter (name) among its parameters. Otherwise a match does
         *     not occur.
         *   </li>
         *   <li>A target mapping with a default reference (to a user default)
         *     is matched as if such default value was not specified in the
         *     target mapping signature.
         *   </li>
         * </ul>
         *
         * Any reference value involved in the match will be added to the
         * output parameter aMissingUserDefaultRefsOut array, indicating that
         * the returned result is a "potential" match. To obtain a certain
         * result, this method must be called again with resolved references
         * (supplied via the oKnownUserDefaultRefsIn parameter).
         *
         * @param {object} oIntent
         *    The parsed shell hash representing an intent.<br />
         *    <br />
         *    NOTE: this method treats the semantic object/action/formFactor
         *    inside the intent literally, as any other semantic
         *    object/action/formFactor string. It is possible, however, to
         *    specify wildcards for semantic object action and formFactor by
         *    setting them to undefined.
         *
         * @param {object} oTM
         *    A target mapping (inbound of a signature)
         * @param {object} oKnownUserDefaultRefsIn
         *    An input parameter used during the matching procedure to resolve
         *    reference values of defaults and filters.
         * @param {object} oMissingUserDefaultRefsOut
         *    <p>An output object containing missing references to user
         *    default values that must be resolved. This is not an array for
         *    optimization reasons, for example, when providing unique user
         *    default values across multiple calls of this method or for
         *    quickly finding out when a reference value was alrady missing in
         *    a previous call.</p>
         *
         *    This object has the form:
         * <pre>
         *     {
         *        "UserDefault.Value1": true,
         *        "UserDefault.Value2": true  // never false
         *        ...
         *     }
         * </pre>
         *     NOTE: it cannot be undefined, must be supplied as an object.
         *
         * @returns {object}
         *    the match result. When a match occurs, this is an object like:
         *
         * <pre>
         *    {
         *        matches: {boolean},
         *        genericSO: {boolean},
         *        targetMapping: {object},
         *        intentParamsPlusDefaults: {object},
         *        countMatchingParams: {number},
         *        countMatchingRequiredParams: {number},
         *        countMatchingFilterParams: {number},
         *        countDefaultedParams: {number},
         *        countPotentiallyMatchingParams: {number},
         *        countFreeTargetMappingParams: {number},
         *        resolutionResult: {object}
         *    }
         * </pre>
         *
         * When no matching occurs, the returned object looks like:
         * <pre>
         *    {
         *        matches: false,
         *        noMatchReason: "...",
         *        noMatchDebug: "...",     // interpret this in combination with noMatchReason
         *        targetMapping: {object},
         *        [one or more count* keys]: {number}
         *    }
         * </pre>
         *
         * @private
         * @since 1.32.0
         */
        this._matchToTargetMapping = function (oIntent, oTM, oKnownUserDefaultRefsIn, oMissingUserDefaultRefsOut) {
            function fnNoMatch(oResult, sReason, sDebugInfo) {
                oResult.matches = false;
                oResult.noMatchReason = sReason;
                oResult.noMatchDebug = sDebugInfo;
                return oResult;
            }

            function fnMatch(oResult) {
                oResult.matches = true;
                return oResult;
            }

            var that = this,
                oMatchResult = {
                    targetMapping: oTM
                };

            // test the semantic object
            oMatchResult.genericSO = (oTM.semanticObject === "*");
            if (!(oIntent.semanticObject === undefined || oIntent.semanticObject === oTM.semanticObject || oTM.semanticObject === '*')) {
                return fnNoMatch(oMatchResult, "Semantic object did not match", oTM.semanticObject);
            }
            // test the action
            if (!(oIntent.action === undefined || oIntent.action === oTM.action || oTM.action === '*')) {
                return fnNoMatch(oMatchResult, "Action did not match", "Intent:" + oIntent.action + " TM:" + oTM.action);
            }
            // test the form factor
            if (oTM.deviceTypes && !(oIntent.formFactor === undefined || oTM.deviceTypes[oIntent.formFactor])) {
                return fnNoMatch(oMatchResult, "Form factor did not match", "Intent:" + oIntent.formFactor + " TM:" + JSON.stringify(oTM.deviceTypes));
            }

            // An array like: [{ refValue: <string>}, ... ] later used to
            // augment oMissingUserDefaultRefsOut *if* a match occurs.
            var aUserDefaultRefsIfMatch = [],
                aDefaultedParamNames = [],
                oIntentParams = oIntent.params;

            // Expand default values into intent parameters
            var oIntentParamsPlusDefaults = this._addDefaultParameterValues(
                oIntentParams,
                oTM.signature && oTM.signature.parameters,
                oKnownUserDefaultRefsIn,
                aUserDefaultRefsIfMatch,
                aDefaultedParamNames
            );
            oMatchResult.intentParamsPlusDefaults = oIntentParamsPlusDefaults;
            oMatchResult.defaultedParamNames = aDefaultedParamNames;

            // extractSapPriority
            this._extractSapPriority(oIntentParamsPlusDefaults, oMatchResult);

            // check whether the parameter signature matches
            var countMatchingParams = 0,
                countMatchingRequiredParams = 0,
                countMatchingFilterParams = 0,
                countFreeTargetMappingParams = 0;

            var bSignatureMatches = Object.keys(oTM.signature.parameters).every(function (sParameterName) {
                var aValues = oIntentParamsPlusDefaults[sParameterName],
                    sValue = aValues && aValues[0],
                    oSignature = oTM.signature.parameters[sParameterName],
                    bIntentHasParam = oIntentParams.hasOwnProperty(sParameterName);

                if (oSignature.required && (sValue === null || sValue === undefined)) {
                    // no required parameter present -> fatal
                    return false;
                }

                if (oSignature.filter) {

                    if (!that._matchesFilter(sValue, oSignature.filter, oKnownUserDefaultRefsIn, oMissingUserDefaultRefsOut)) {
                        // filter does not match -> fatal
                        return false;
                    }

                    if (bIntentHasParam) {
                        ++countMatchingFilterParams;
                    }
                }

                if (bIntentHasParam && oSignature.required) {
                    ++countMatchingRequiredParams;
                }

                if (bIntentHasParam) {
                    ++countMatchingParams;
                }
                if (!bIntentHasParam && (sValue === null || sValue === undefined)) {
                    ++countFreeTargetMappingParams;
                }

                return true;
            });

            oMatchResult.countMatchingParams = countMatchingParams;
            oMatchResult.countMatchingRequiredParams = countMatchingRequiredParams;
            oMatchResult.countMatchingFilterParams = countMatchingFilterParams;
            oMatchResult.countDefaultedParams = aDefaultedParamNames.length;
            oMatchResult.countPotentiallyMatchingParams = Object.keys(oIntent.params).length;
            oMatchResult.countFreeTargetMappingParams = countFreeTargetMappingParams;

            if (!bSignatureMatches) {
                return fnNoMatch(oMatchResult, "Target mapping parameter signature did not match",
                    this._compactSignatureNotation(oTM.signature));
            }

            if (!this._checkAdditionalParameters(oTM, oIntentParamsPlusDefaults)) {
                return fnNoMatch(oMatchResult, "Additional parameters not allowed",
                    this._compactSignatureNotation(oTM.signature));
            }

            if (oTM.signature.additionalParameters === "ignored") {
                this._filterObjectKeys(oIntentParamsPlusDefaults, function (sKey) {
                    if (sKey.indexOf("sap-") === 0) {
                        return true; // keep sap params
                    }
                    if (oTM.signature.parameters.hasOwnProperty(sKey)) {
                        return true; // keep parameters in the TM signature
                    }
                    return false;
                }, true /* bInPlace */);

                // count is reduced in case of ignored additional parameters
                oMatchResult.countPotentiallyMatchingParams = Object.keys(oIntent.params).filter(function (sIntentParam) {
                    return oTM.signature.parameters.hasOwnProperty(sIntentParam);
                }).length;
            }

            this._constructEffectiveResolutionResult(oMatchResult, oTM);
            this._addSortString(oMatchResult);
            this._addFoundParametersToUserDefaultRefs(aUserDefaultRefsIfMatch, oMissingUserDefaultRefsOut);

            return fnMatch(oMatchResult);
        };

        /**
         * Deletes keys from an object based on a given filter function.
         *
         * @param {object} oObject
         *    The object to be filtered (modified in place)
         * @param {object} fnFilterFunction
         *    The filter function to decide which keys to delete
         * @param {boolean} bInPlace
         *    Modifies the the given object in place
         *
         * @returns {object}
         *    The filtered object
         *
         * @private
         * @since 1.32.0
         */
        this._filterObjectKeys = function (oObject, fnFilterFunction, bInPlace) {
            var oObjectToFilter = bInPlace ? oObject : jQuery.extend(true, {}, oObject);

            Object.keys(oObjectToFilter).forEach(function (sKey) {
                if (fnFilterFunction(sKey) === false) {
                    delete oObjectToFilter[sKey];
                }
            });

            return oObjectToFilter;
        };

        /**
         * Extract and prepare a client side resolution result, if possible
         * append the intent parameters (including defaults) to the URL.
         *
         * @param {object} oMatchResult
         *   An object representing a match result
         * @param {object} oTM
         *   The inbound
         *
         * @private
         * @since 1.32.0
         */
        this._constructEffectiveResolutionResult = function(oMatchResult, oTM) {
            var sUrlParams,
                oResolutionResult = oTM && oTM.resolutionResult;

            oMatchResult.resolutionResult = {};

            // NOTE: always include this
            if (oTM && oTM.hasOwnProperty("hideIntentLink")) {
                oMatchResult.resolutionResult.hideIntentLink = oTM.hideIntentLink;
            }

            oMatchResult.resolutionResult.requiresFallback = !!( // booleanize
                !oTM ||
                !oResolutionResult ||
                (oResolutionResult.applicationType !== "URL" && oResolutionResult.applicationType !== "SAPUI5") ||
                oResolutionResult.additionalInformation.indexOf("SAPUI5.Component") === -1 ||
                (oTM.parameterMapping && Object.keys(oTM.parameterMapping).length > 0)
            );

            if (!oMatchResult.resolutionResult.requiresFallback) {
                ["applicationType", "additionalInformation", "url", "applicationDependencies"].forEach(function (sPropName) {
                    if (oTM.resolutionResult.hasOwnProperty(sPropName)) {
                        oMatchResult.resolutionResult[sPropName] = oTM.resolutionResult[sPropName];
                    }
                });

                // prepare a proper URL!
                sUrlParams = this._getURLParsing().paramsToString(oMatchResult.intentParamsPlusDefaults);

                if (sUrlParams) {
                    // append parameters to URL
                    oMatchResult.resolutionResult.url = oTM.resolutionResult.url + ((oTM.resolutionResult.url.indexOf("?") < 0) ? "?" : "&") + sUrlParams;
                }

                if (typeof oTM.resolutionResult.ui5ComponentName !== "undefined") {
                    oMatchResult.resolutionResult.ui5ComponentName = oTM.resolutionResult.ui5ComponentName;
                }

                if (typeof oTM.resolutionResult.text !== "undefined") {
                    oMatchResult.resolutionResult.text = oTM.resolutionResult.text;
                }
            }
        };

        /**
         * Resolves the URL hash fragment.
         * <p> The hash fragment is resolved with the
         * <code>/sap/opu/odata/UI2/INTEROP/ResolveLink</code> OData function
         * import. This is an asynchronous operation. The form factor of the
         * current device is used to filter the navigation targets returned.
         * </p>
         * @param {string} sHashFragment
         *   The URL hash fragment in internal format (as obtained by the hasher service from SAPUI5,
         *   not as given in <code>location.hash</code>)
         * @param {function} fnFallback
         *   Fallback will be invoked if local <b>result</b> is not esteemed
         *   complete. This function is called with three arguments in
         *   respective order:
         *   <ol>
         *      <li>A string representing the hash fragment to be resolved
         *      (includes leading '#')</li>
         *      <li>An deep copy of the target mapping object that was matched
         *      during target resolution</li>
         *      <li>An object representing the set of intent and default parameters</li>
         *   </ol>
         *
         * @returns {object}
         *   A <code>jQuery.Promise</code>. Its <code>done()</code> function
         *   gets an object that you can use to create a {@link
         *   sap.ushell.components.container.ApplicationContainer} or
         *   <code>undefined</code> in case the hash fragment was empty.
         *
         * @private
         * @since 1.32.0
         */
        this.resolveHashFragment = function (sHashFragment, fnFallback) {
            var that = this,
                oDeferred = new jQuery.Deferred();

            this._ensureTargetMappings().done(function() {
                that._resolveHashFragment(sHashFragment, fnFallback)
                    .done(oDeferred.resolve.bind(oDeferred))
                    .fail(oDeferred.reject.bind(oDeferred));
            }).fail(
                oDeferred.reject.bind(oDeferred)
            );

            return oDeferred.promise();
        };

        this._resolveHashFragment = function (sHashFragment, fnFallback) {
            var oUrlParsing = this._getURLParsing(),
                oDeferred = new jQuery.Deferred(),
                sFixedHashFragment = sHashFragment.indexOf("#") === 0 ? sHashFragment : "#" + sHashFragment,
                oShellHash = oUrlParsing.parseShellHash(sFixedHashFragment);

            if (oShellHash === undefined) {
                jQuery.sap.log.error("Could not parse shell hash '" + sHashFragment + "'",
                    "please specify a valid shell hash",
                    "sap.ushell.services.ClientSideTargetResolution");
                return oDeferred.reject().promise();
            }

            /*
             * This Deferred is always called when a resolution result is found
             * independently on how it is found. If resolved, it will (must)
             * resolve oDeferred.
             */
            var oGotResolutionResultDeferred = new jQuery.Deferred();

            oShellHash.formFactor = sap.ushell.utils.getFormFactor();

            this._getMatchingTargets(oShellHash, _aTargetMappings)
                .fail(function (sError) {
                    jQuery.sap.log.error("Could not resolve " + sHashFragment,
                        "_getMatchingTargets promise rejected with: " + sError,
                        "sap.ushell.services.ClientSideTargetResolution");
                    oDeferred.reject(sError);
                })
                .done(function (aMatchingTargets) {
                    if (aMatchingTargets.length === 0) {
                        jQuery.sap.log.warning("Could not resolve " + sHashFragment,
                            "rejecting promise",
                            "sap.ushell.services.ClientSideTargetResolution");
                        oDeferred.reject("Could not resolve navigation target");
                        return;
                    }

                    /*
                     * We have results
                     */

                    var oMatchingTarget = aMatchingTargets[0],
                        oResolutionResult = oMatchingTarget.resolutionResult;

                    if (!oResolutionResult.requiresFallback) {
                        oGotResolutionResultDeferred.resolve(oMatchingTarget, oResolutionResult);
                        return;
                    }

                    /*
                     * We must fall back
                     */

                    if (typeof fnFallback !== "function") {
                        // no fallback logic available
                        jQuery.sap.log.error(
                            "Cannot resolve hash fragment",
                            sFixedHashFragment + " has matched a target mapping that cannot be resolved client side and no fallback logic can be used",
                            "sap.ushell.services.ClientSideTargetResolution"
                        );

                        oDeferred.reject("client side resolution without valid result");
                        return;
                    }

                    // fallback
                    jQuery.sap.log.warning(
                        "Cannot resolve hash fragment client side",
                        sFixedHashFragment + " has matched a target mapping that cannot be resolved client side. Using fallback logic",
                        "sap.ushell.services.ClientSideTargetResolution"
                    );
                    fnFallback(
                        sFixedHashFragment,
                        jQuery.extend(true, {}, oMatchingTarget.targetMapping),
                        oMatchingTarget.intentParamsPlusDefaults
                    )
                    .done(oGotResolutionResultDeferred.resolve.bind(oGotResolutionResultDeferred, oMatchingTarget))
                    .fail(oDeferred.reject.bind(oDeferred));
                });

            /*
             * Post-resolution amendments.
             *
             * this deferred is guaranteed to be resolved, and <b>must</b> resolve
             * oDeferred.
             */
            oGotResolutionResultDeferred.done(function (oMatchingTarget, oResolutionResult) {
                // add sap-ushell-defaultedParameterNames
                if (oResolutionResult && typeof oResolutionResult.url === "string" &&
                    oMatchingTarget.defaultedParamNames.length > 0) {

                    var sDefaultParameterNames = oUrlParsing.paramsToString({
                        "sap-ushell-defaultedParameterNames": [ JSON.stringify(oMatchingTarget.defaultedParamNames) ]
                    });
                    oResolutionResult.url += (oResolutionResult.url.indexOf("?") < 0 ? "?" : "&") + sDefaultParameterNames;
                }
                oDeferred.resolve(oResolutionResult);
            });

            return oDeferred.promise();
        };

        /**
         * Resolves a given semantic object and business parameters to a list
         * of links, taking into account the form factor of the current device.
         *
         * @param {string} sSemanticObject
         *   The semantic object such as <code>"AnObject"</code><br />
         *   <br />
         *   NOTE: the empty string can be used to obtain all the target
         *   mappings, but strings with one or more spaces are not considered a
         *   valid input and will cause the returned promise to be rejected.
         * @param {object} [mParameters]
         *   The map of business parameters with values, for instance
         *   <pre>
         *   {
         *     A: "B",
         *     C: ["e", "j"]
         *   }
         *   </pre>
         * @param {boolean} [bIgnoreFormFactor=false]
         *   When set to <code>true</code> the form factor of the current device is ignored
         *
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which is resolved with an array of
         *   link objects containing (at least) the following properties:
         * <pre>
         * {
         *   intent: "#AnObject-Action?A=B&C=e&C=j",
         *   text: "Perform action"
         * }
         * </pre>
         *
         * @private
         * @since 1.32.0
         */
        this.getSemanticObjectLinks = function (sSemanticObject, mParameters, bIgnoreFormFactor) {
            var that = this,
                oDeferred = new jQuery.Deferred();

            this._ensureTargetMappings().done(function (){
                that._getSemanticObjectLinks(sSemanticObject, mParameters, bIgnoreFormFactor)
                    .done(oDeferred.resolve.bind(oDeferred))
                    .fail(oDeferred.reject.bind(oDeferred));
            }).fail(oDeferred.reject.bind(oDeferred));

            return oDeferred.promise();
        };

        this._getSemanticObjectLinks = function (sSemanticObject, mParameters, bIgnoreFormFactor) {
            /*
             * Input validation
             */
            if (typeof sSemanticObject !== "string") {
                jQuery.sap.log.error("invalid input for _getSemanticObjectLinks",
                    "the semantic object must be a string, got " + Object.prototype.toString.call(sSemanticObject) + " instead",
                    "sap.ushell.services.ClientSideTargetResolution");
                return new jQuery.Deferred().reject("invalid semantic object").promise();
            }
            if (sSemanticObject.match(/^\s+$/)) {
                jQuery.sap.log.error("invalid input for _getSemanticObjectLinks",
                    "the semantic object must be a non-empty string, got '" + sSemanticObject + "' instead",
                    "sap.ushell.services.ClientSideTargetResolution");
                return new jQuery.Deferred().reject("invalid semantic object").promise();
            }
            if (sSemanticObject === "*") {
                // shortcut: skip matching target mappings and return directly.
                // It can only match "*" and we don't return it anyway.
                return new jQuery.Deferred().resolve([]).promise();
            }

            /*
             * Returns ?-prefixed business parameters
             */
            function fnConstructBusinessParamsString(oUrlParsing, mParameters) {
                var sBusinessParams = oUrlParsing.paramsToString(mParameters);
                return sBusinessParams ? "?" + sBusinessParams : "";
            }

            var that = this,
                oUrlParsing = this._getURLParsing(),
                oDeferred = new jQuery.Deferred(),
                sFormFactor = sap.ushell.utils.getFormFactor(),
                oAllIntentParams = oUrlParsing.parseParameters(fnConstructBusinessParamsString(oUrlParsing, mParameters)),
                oShellHash = {
                    semanticObject: (sSemanticObject === "" ? undefined : sSemanticObject),
                    action: undefined,  // match all actions
                    formFactor: (bIgnoreFormFactor ? undefined : sFormFactor),
                    params: oAllIntentParams
                };

            this._getMatchingTargets(oShellHash, _aTargetMappings)
                .done(function (aMatchingTargets) {
                    var oUniqueIntents = {},
                        aResults = aMatchingTargets
                            .map(function (oMatchResult) {
                                var sAdjustedSemanticObject = sSemanticObject || oMatchResult.targetMapping.semanticObject,
                                    sIntent = "#" + sAdjustedSemanticObject + "-" + oMatchResult.targetMapping.action,
                                    oNeededParameters;

                                // we never return "*" semantic objects from
                                // getSemanticObjectLinks as they are not parsable links
                                if (sAdjustedSemanticObject === "*") {
                                    return undefined;
                                }

                                // we hide based on hideIntentLink
                                if (oMatchResult.resolutionResult.hideIntentLink === true) {
                                    return undefined;
                                }

                                if (!oUniqueIntents.hasOwnProperty(sIntent)) {
                                    oUniqueIntents[sIntent] = 1;

                                    if (oMatchResult.targetMapping.signature.additionalParameters === "ignored") {
                                        /*
                                         * In the result do not show all intent
                                         * parameters, but only those mentioned by
                                         * the target mapping.
                                         */
                                        oNeededParameters = that._filterObjectKeys(oAllIntentParams, function (sIntentParam) {
                                            return (sIntentParam.indexOf("sap-") === 0) ||
                                                oMatchResult.targetMapping.signature.parameters.hasOwnProperty(sIntentParam);
                                        }, false);
                                    } else {
                                        oNeededParameters = oAllIntentParams;
                                    }

                                    return {
                                        "intent": sIntent + fnConstructBusinessParamsString(oUrlParsing, oNeededParameters),
                                        "text": oMatchResult.targetMapping.resolutionResult._original.text
                                    };
                                } else {
                                    // for debugging purposes
                                    oUniqueIntents[sIntent]++;
                                }
                                return undefined;
                            })
                            .filter(function (oSemanticObjectLink) {
                                return typeof oSemanticObjectLink === "object";
                            })
                            .sort(function (oGetSoLinksResult1, oGetSoLinksResult2) {
                                return oGetSoLinksResult1.intent < oGetSoLinksResult2.intent ? -1 : 1;
                            });

                        jQuery.sap.log.debug(
                            "_getSemanticObjectLinks filtered to unique intents.",
                            "Reporting histogram: " + JSON.stringify(oUniqueIntents, null, "   "),
                            "sap.ushell.services.ClientSideTargetResolution"
                        );
                    oDeferred.resolve(aResults);
                })
                .fail(oDeferred.reject.bind(oDeferred));

            return oDeferred.promise();
        };

        /**
         * Transform a matching result into a string for tie-breaking during sort.
         *
         * @param {object} oMatchResult
         *    The match result
         * @returns {string}
         *    The serialized match result
         *
         * @see {@link #_getMatchingTargets}
         * @private
         * @since 1.32.0
         */
        this._serializeMatchingResult = function (oMatchResult) {
            var oResolutionResult = oMatchResult.targetMapping.resolutionResult;
            return [
                "applicationType",
                "ui5ComponentName",
                "url",
                "additionalInformation",
                "text"
            ].map(function (sKey) {
                return oResolutionResult.hasOwnProperty(sKey) ? oResolutionResult[sKey] : "";
            }).join("");
        };

        /**
         * This resolves (finds the value of) all the given reference names.
         *
         * @param {string[]} aReferences
         *    An array of reference names, like <code>["UserDefault.currency", ... ]</code>.
         *
         * @returns {jQuery.Deferred.promise}
         *    <p>A promise that resolves with an object containing all the
         *    resolved references, or is rejected with an error message if it
         *    was not possible to resolve all the references.</p>
         *
         *    <p>The object this promise resolves to maps the full (with prefix)
         *    reference name to its value:</p>
         *    <pre>
         *    {
         *        UserDefault.name: "Alice",
         *        UserDefault.currency: "EUR"
         *        ...
         *    }
         *    </pre>
         *
         * @private
         * @since 1.32.0
         */
        this._resolveAllReferences = function (aReferences) {
            var that = this,
                oDeferred = new jQuery.Deferred(),
                oUserDefaultParametersSrvc,
                aReferencePromises,
                bAllRefsResolvable = true,
                aRichRefs = aReferences
                    .map(function (sRefWithPrefix) {
                        var sRefName = that._extractUserDefaultReferenceName(sRefWithPrefix);

                        /*
                         * This method does not assume aReferences are user defaults,
                         * although we only know how to resolve user default refs at the
                         * moment.
                         */
                        if (typeof sRefName !== "string") {
                            bAllRefsResolvable = false;
                        }

                        return {
                            full: sRefWithPrefix,
                            name: sRefName
                        };
                    });

            if (!bAllRefsResolvable) {
                return oDeferred
                    .reject("Cannot determine value for all references " + aReferences.join(", "))
                    .promise();
            }

            oUserDefaultParametersSrvc = sap.ushell.Container.getService("UserDefaultParameters");
            aReferencePromises = aRichRefs.map(function (oRef) {
                return oUserDefaultParametersSrvc.getValue(oRef.name);
            });

            jQuery.when.apply(jQuery, aReferencePromises)
                .done(function () {
                    /*
                     * All parameters retrieved successfully and
                     * stored in arguments.
                     */
                    var oKnownRefs = {},
                        aRefValues = arguments,
                        i = 0;

                    aRichRefs.forEach(function (oRef) {
                        oKnownRefs[oRef.full] = aRefValues[i].value;
                        ++i;
                    });

                    oDeferred.resolve(oKnownRefs);
                });

            return oDeferred.promise();
        };

        /**
         * Matches the given resolved shell hash against all the target
         * mappings.
         *
         * @param {object} oShellHash
         *     The resolved hash fragment
         * @param {array} aTargetMappings
         *     An array of target mappings to match the shell hash against
         *
         * @returns {jQuery.Promise[]}
         *     a sorted array of targets. A target is a matching result
         *     obtained via {@link #_matchToTargetMapping} that in addition has
         *     a specific priority with respect to other matching targets.
         *
         * @private
         * @since 1.32.0
         */
        this._getMatchingTargets = function(oShellHash, aTargetMappings) {
            var that = this,
                oDeferred = new jQuery.Deferred(),
                oReadyToSortDeferred = new jQuery.Deferred(),
                oReadyToRematchDeferred = new jQuery.Deferred();

            function fnWhenDebugEnabled(fn) {
                if (jQuery.sap.log.getLevel() >= jQuery.sap.log.Level.INFO) {
                    fn();
                }
            }

            setTimeout(function () {

                var aMatchingTargets = [],
                    oMissingUserDefaults = {},
                    aPotentiallyMatchingTargets = [],
                    oNoMatchReasons = {};

                    jQuery.sap.log.debug(
                        "Matching intent to target mappings (first round)",
                        JSON.stringify(oShellHash, null, "   "),
                        "sap.ushell.services.ClientSideTargetResolution"
                    );

                    // match without known values first
                    aTargetMappings.forEach(function (oTM) {
                        var oMatchResult = that._matchToTargetMapping(oShellHash, oTM,
                            {} /* no known references the first time */, oMissingUserDefaults);

                        if (oMatchResult.matches) {
                            aMatchingTargets.push(oMatchResult);

                            // may be useful for re-matching
                            aPotentiallyMatchingTargets.push(oTM);
                        } else {
                            fnWhenDebugEnabled(function () {
                                // collect no match reasons and log (debugging purposes)
                                if (!oNoMatchReasons[oMatchResult.noMatchReason]) {
                                    oNoMatchReasons[oMatchResult.noMatchReason] = [];
                                }

                                oNoMatchReasons[oMatchResult.noMatchReason].push(
                                    "#"  + (oMatchResult.targetMapping || {}).semanticObject +
                                    "-"  + (oMatchResult.targetMapping || {}).action +
                                    "|" + oMatchResult.noMatchDebug
                                );
                            });
                        }
                    });

                    // output no match reasons (debugging)
                    fnWhenDebugEnabled(function () {
                        Object.keys(oNoMatchReasons).forEach(function (sReason) {
                            jQuery.sap.log.debug(
                                sReason + ": " + oNoMatchReasons[sReason].join("; "),
                                null,
                                "sap.ushell.services.ClientSideTargetResolution"
                            );

                        });
                    });

                    if (jQuery.isEmptyObject(oMissingUserDefaults)) {
                        // aMatchingTargets represents a "precise" match, that
                        // is, it was carried out without references to unknown
                        // user default values.
                        oReadyToSortDeferred.resolve(aMatchingTargets);
                    } else {
                        // unknown values were found during the matching
                        // procedure: must get these default values from
                        // UserDefaultService.

                        that._resolveAllReferences(Object.keys(oMissingUserDefaults))
                            .done(function (oResolvedRefs) {
                                oReadyToRematchDeferred.resolve(oResolvedRefs, aPotentiallyMatchingTargets);
                            })
                            .fail(function (sError) {
                                jQuery.sap.log.error("Failed to resolve all references",
                                    sError, "sap.ushell.services.ClientSideTargetResolution");

                                oReadyToSortDeferred.resolve([]);
                            });
                    }

            }, 0);

            // triggered in case of re-match
            oReadyToRematchDeferred.done(function (oKnownUserDefaultRefs, aPotentiallyMatchingTargets) {
                jQuery.sap.log.debug(
                    "Matching intent to target mappings (rematch)",
                    "Known References:" + JSON.stringify(oKnownUserDefaultRefs, null, "   "),
                    "sap.ushell.services.ClientSideTargetResolution"
                );

                var aPreciseMatchingTargets = [],
                    oMissingUserDefaults = {};

                aPotentiallyMatchingTargets.forEach(function (oTM) {
                    var oMatchResult = that._matchToTargetMapping(oShellHash, oTM, oKnownUserDefaultRefs, oMissingUserDefaults);
                    if (oMatchResult.matches) {
                        aPreciseMatchingTargets.push(oMatchResult);
                    }
                });

                if (jQuery.isEmptyObject(oMissingUserDefaults)) {
                    oReadyToSortDeferred.resolve(aPreciseMatchingTargets);
                } else {
                    jQuery.sap.log.error(
                        "Still obtained unknown references during rematch",
                        JSON.stringify(oMissingUserDefaults, null, "   "),
                        "sap.ushell.services.ClientSideTargetResolution"
                    );
                    oDeferred.reject("Rematching returned unknown references!");
                }
            });

            // triggered when a precise match set is obtained
            oReadyToSortDeferred.done(function (aPreciseMatchingTargets) {

                that._sortMatchingResultsDeterministic(aPreciseMatchingTargets);

                fnWhenDebugEnabled(function () {
                    jQuery.sap.log.debug(
                        "Returning sorted results",
                        "\n" + aPreciseMatchingTargets.map(function (oMatchResult) {
                            return "#" + (oMatchResult.targetMapping || {}).semanticObject +
                                   "-" + (oMatchResult.targetMapping || {}).action +
                                   " " + (oMatchResult["sap-priority"] || "") +
                                   " Priority: " + (oMatchResult["sap-priority"] ? "sap-priority : " + oMatchResult["sap-priority"] : "") +
                                   oMatchResult.priorityString +
                                   " Signature: " + that._compactSignatureNotation((oMatchResult.targetMapping || {}).signature) +
                                   " Deterministic: " + that._serializeMatchingResult(oMatchResult);
                        }).join("\n") + "\nwith first Result being:" + JSON.stringify(aPreciseMatchingTargets[0], null, "   "),
                        "sap.ushell.services.ClientSideTargetResolution");
                });

                oDeferred.resolve(aPreciseMatchingTargets);
            });


            return oDeferred.promise();
        };

        /**
         * Sorts the matching results deterministically, using the priority
         * string in the match result and an integer sap-priority if present.
         *
         * @param {object[]} aMatchingResults
         *    The matching results
         *
         * @private
         * @since 1.32.0
         */
        this._sortMatchingResultsDeterministic = function (aMatchingResults) {
            var that = this;
            // deterministic sorting
            aMatchingResults.sort(function (oMatchResult1, oMatchResult2) {
                if ((oMatchResult1["sap-priority"] || 0) - (oMatchResult2["sap-priority"] || 0) !== 0) {
                    return -((oMatchResult1["sap-priority"] || 0) - (oMatchResult2["sap-priority"] || 0));
                }
                if (oMatchResult1.priorityString < oMatchResult2.priorityString) { return 1; }
                if (oMatchResult1.priorityString > oMatchResult2.priorityString) { return -1; }

                // make it deterministic
                return (that._serializeMatchingResult(oMatchResult1) < that._serializeMatchingResult(oMatchResult2))
                    ? 1   // NOTE: inverted result, longer matches come first
                    : -1;
            });
        };

        /**
         *
         * Determines whether a single intent matches one or more navigation
         * targets.
         *
         * @param {string}
         *    sIntent the intent to be matched
         *
         * @returns {jQuery.Deferred.promise}
         *     a promise that is resolved with a boolean if the intent is
         *     supported and rejected if not. The promise resolves to true
         *     if only one target matches the intent, and false if multiple
         *     targets match the intent.
         *
         * @private
         * @since 1.32.0
         */
        this._isIntentSupportedOne = function(sIntent) {
            var oDeferred = new jQuery.Deferred(),
                oShellHash = this._getURLParsing().parseShellHash(sIntent);

            if (oShellHash === undefined) {
                jQuery.sap.log.error("Could not parse shell hash '" + sIntent + "'",
                    "please specify a valid shell hash",
                    "sap.ushell.services.ClientSideTargetResolution");
                return oDeferred.reject().promise();
            }

            oShellHash.formFactor = sap.ushell.utils.getFormFactor();

            this._getMatchingTargets(oShellHash, _aTargetMappings)
                .done(function (aTargets) {
                    oDeferred.resolve(aTargets.length > 0);
                })
                .fail(function () {
                    oDeferred.reject();
                });

            return oDeferred.promise();
        };

        /**
         * Tells whether the given intent(s) are supported, taking into account
         * the form factor of the current device. "Supported" means that
         * navigation to the intent is possible.
         *
         * @param {string[]} aIntents
         *   The intents (such as <code>"#AnObject-Action?A=B&C=e&C=j"</code>) to be checked
         *
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which is resolved with a map
         *   containing the intents from <code>aIntents</code> as keys. The map values are
         *   objects with a property <code>supported</code> of type <code>boolean</code>.<br/>
         *   Example:
         * <pre>
         * {
         *   "#AnObject-Action?A=B&C=e&C=j": { supported: false },
         *   "#AnotherObject-Action2": { supported: true }
         * }
         * </pre>
         *
         * @private
         * @since 1.32.0
         */
        this.isIntentSupported = function (aIntents) {
            var that = this,
                oDeferred = new jQuery.Deferred();

            this._ensureTargetMappings().done(function () {
                that._isIntentSupported(aIntents)
                    .done(oDeferred.resolve.bind(oDeferred))
                    .fail(oDeferred.reject.bind(oDeferred));
            }).fail(oDeferred.reject.bind(oDeferred));

            return oDeferred.promise();
        };

        this._isIntentSupported = function (aIntents) {
            var that = this,
                oDeferred = new jQuery.Deferred(),
                mSupportedByIntent = {};

            oDeferred.resolve();

            /*
             * Sets the result for the given intent as indicated.
             * @params {string} sIntent
             * @params {boolean} bSupported
             */
            function setResult(sIntent, bSupported) {
                mSupportedByIntent[sIntent] = {
                    supported: bSupported
                };
            }

            aIntents.forEach(function (sIntent) {
                var oNextPromise = that._isIntentSupportedOne(sIntent);
                oNextPromise.fail(function (sErrorMessage) {
                    setResult(sIntent, false);
                });
                oNextPromise.done(function (bResult) {
                    setResult(sIntent, bResult);
                });
                oDeferred = jQuery.when(oDeferred, oNextPromise);
            });

            var oRes = new jQuery.Deferred();
            oDeferred.done(function () {
                oRes.resolve(mSupportedByIntent);
            }).fail(function(){
                oRes.reject.bind(oDeferred);
            });

            return oRes.promise();
        };

        /**
         * Extracts the user default reference name from a reference parameter
         * name. For example, returns <code>value</code> from
         * <code>UserDefault.value</code>, but returns <code>undefined</code>
         * for <code>MachineDefault.value</code>.
         *
         * @param {string} sRefParamName
         *    Name of a reference parameter
         * @returns {string}
         *    The name of the user default parameter extracted from
         *    sRefParamName, or undefined in case this cannot be extracted.
         *
         * @private
         * @since 1.32.0
         */
        this._extractUserDefaultReferenceName = function (sRefParamName) {
            if (typeof sRefParamName !== "string" || sRefParamName.indexOf("UserDefault.") !== 0) {
                return undefined;
            }
            return sRefParamName.replace(/^UserDefault[.]/, "");
        };

        /**
         * Finds and returns all unique user default parameter names referenced
         * in target mappings.
         *
         * @returns {jQuery.Deferred.promise}
         *    <p>A promise that resolves to an array of strings. Each string is
         *    the name of a user default parameter referenced in a target
         *    mapping.</p>
         *
         *    <p>
         *    NOTE: the parameter names do not include surrounding special
         *    syntax. Only the inner part is returned. For example:
         *    <pre>
         *    "{{UserDefaultParameterName}}" -> "UserDefaultParameterName"
         *    </pre>
         *    </p>
         *
         * @private
         * @since 1.32.0
         */
        this.getUserDefaultParameterNames = function () {
            var that = this,
                oDeferred = new jQuery.Deferred();

            this._ensureTargetMappings().done(function (aTargetMappings) {
                try {
                    oDeferred.resolve(that._getUserDefaultParameterNames());
                } catch (e) {
                    oDeferred.reject("Cannot get user default parameters from target mappings: " + e);
                }
            }).fail(oDeferred.reject.bind(oDeferred));

            return oDeferred.promise();
        };

        this._getUserDefaultParameterNames = function () {
            var oUniqueRefs = {},
                that = this;

            _aTargetMappings.forEach(function (oTm) {
                var oSignatureParams = oTm.signature && oTm.signature.parameters || [];

                Object.keys(oSignatureParams).forEach(function (sParamName) {
                    var oParam = oSignatureParams[sParamName],
                        sUserDefaultParamName;

                    if (oParam) {
                        // first try to get the user default value from the filter

                        if (oParam.filter && oParam.filter.format === "reference") {
                            sUserDefaultParamName = oParam.filter.value;

                        } else if (oParam.defaultValue && oParam.defaultValue.format === "reference") {
                            sUserDefaultParamName = oParam.defaultValue.value;
                        }

                        if (typeof sUserDefaultParamName === "string") {
                            // only extract user defaults
                            var sRefName = that._extractUserDefaultReferenceName(sUserDefaultParamName);
                            if (typeof sRefName === "string") {
                                oUniqueRefs[sRefName] = 1;
                            }
                        }
                    }
                });
            });

            return Object.keys(oUniqueRefs);
        };

        /**
         * Returns a compact string representation of a Target Mapping
         * signature.
         *
         * @param {object} oSignature
         *    The input parameters in app descriptor format
         * @returns {string}
         *    The input parameters in compact notation
         *
         * @private
         * @since 1.32.0
         */
        this._compactSignatureNotation = function (oSignature) {
            var oFixedSignature = oSignature || {};
            var mParams = oFixedSignature.parameters || {},
                oTypeNotation = {
                    optional: "[FORMAT]",
                    required: "FORMAT"
                },
                oFormatNotation = {
                    regexp: "/VALUE/",
                    reference: "@VALUE",
                    value: "VALUE",
                    plain: "VALUE",
                    _unknown: "?VALUE" // unknown format specified
                },
                oAdditionalParametersSymbol = {
                    allowed: "<+>",
                    nomatch: "<->",
                    ignored: "<o>",
                    _unknown: "<?>"
                };

            if (jQuery.isEmptyObject(mParams)) {
                return "<no params>" + (
                    oAdditionalParametersSymbol[oFixedSignature.additionalParameters || "_unknown"]
                );
            }

            var aResults = [];

            Object.keys(mParams).forEach(function (sParamName) {
                var oParamDefinition = mParams[sParamName],
                    sParamType = oParamDefinition.required ? "required" : "optional",
                    sParamFilterValue = oParamDefinition.filter && oParamDefinition.filter.value,
                    sParamDefaultValue = oParamDefinition.defaultValue && oParamDefinition.defaultValue.value,
                    sParamFilterFormat = (oParamDefinition.filter && oParamDefinition.filter.format) || "plain",
                    sParamDefaultFormat = (oParamDefinition.defaultValue && oParamDefinition.defaultValue.format) || "plain";

                var aValueRepr = [],
                    sParamFilterFormatNotation = oFormatNotation[sParamFilterFormat] || oFormatNotation._unknown,
                    sParamDefaultFormatNotation = oFormatNotation[sParamDefaultFormat] || oFormatNotation._unknown;

                if (sParamFilterValue) {
                    aValueRepr.push(
                        oTypeNotation["required"].replace("FORMAT",
                            sParamFilterFormatNotation.replace("VALUE", sParamFilterValue)
                        )
                    );
                }
                if (sParamDefaultValue) {
                    aValueRepr.push(
                        oTypeNotation["optional"].replace("FORMAT",
                            sParamDefaultFormatNotation.replace("VALUE", sParamDefaultValue)
                        )
                    );
                }
                aResults.push(
                    oTypeNotation[sParamType].replace("FORMAT",
                        sParamName + ":" + aValueRepr.join("")
                    )
                );
            });

            return aResults.join(";") + (
                oAdditionalParametersSymbol[oFixedSignature.additionalParameters || "_unknown"]
            );
        };

    };
    sap.ushell.services.ClientSideTargetResolution.hasNoAdapter = false;
}());

}; // end of sap/ushell/services/ClientSideTargetResolution.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.Personalization') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview The Unified Shell's personalization service, which provides
 *               generic read and write access to the currently logged on user's
 *               personalization settings for the app currently executed in the
 *               shell.
 *
 * @version
 * 1.32.6
 */
(function () {
    "use strict";
    /*jslint nomen: true, bitwise: false */
    /*jshint bitwise: false */
    /*global jQuery, sap, setTimeout, clearTimeout, window */
    jQuery.sap.declare("sap.ushell.services.Personalization");
    // this file introduces
    // jQuery.sap.declare("sap.ushell.services.Personalization.WindowAdapter");
    
    jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained

    // TODO conditional loading

    var sCONTAINER_PREFIX = "sap.ushell.personalization#",
        sITEM_PREFIX = "ITEM#",
        sVARIANT_PREFIX = "VARIANTSET#",
        sABAPTIMESTAMPFORMAT = "yyyyMMddHHmmss",
        sADMIN_PREFIX = "ADMIN#",
        sITEMKEY_SCOPE = "sap-ushell-container-scope",
        sITEMKEY_STORAGE = "sap-ushell-container-storageUTCTimestamp",
        sITEMKEY_EXPIRE = "sap-ushell-container-expireUTCTimestamp";
    function addContainerPrefix(sContainerKey) {
        return sCONTAINER_PREFIX + sContainerKey;
    }


    /*
     * Implementation note:
     *
     * ITEM#<itemkey>
     * VARIANTSET#<variantset>
     * sap-ushell-container-scope : {   }
     * sap-ushell-container-
     */


    // ---------------------
    // ------ Service ------
    // ---------------------
    /**
     * This method MUST be called by the Unified Shell's container only, others
     * MUST call <code>sap.ushell.Container.getService("Personalization")</code>.
     * Constructs a new instance of the personalization service.
     *
     * @param {object} oAdapter
     *            the service adapter for the personalization service,
     *            as already provided by the container
     *
     * @class The Unified Shell's personalization service, which provides a
     *        personalizer object that handles all personalization operations.
     *
     * @public
     * @constructor
     * @see sap.ushell.services.Container#getService
     *
     * @since 1.15.0
     */
    sap.ushell.services.Personalization = function (oAdapter, oContainerInterface, sParameter, oConfig) {
        this._oConfig = oConfig;
        this._sSeed = jQuery.sap.getObject("config.seed", undefined, oConfig) || "ABC";
        this._oAdapterWithBackendAdapter = new sap.ushell.services.Personalization.WindowAdapter(this, oAdapter);
        this._oAdapterWindowOnly =  new sap.ushell.services.Personalization.WindowAdapter(this, undefined);
        this._supportsGetWithoutSubsequentLoad = (oAdapter && oAdapter.supportsGetWithoutSubsequentLoad === true);
        this._oContainerMap = new sap.ushell.utils.Map();
        // map: sPrefixedContainerKey -> promise object of getPersonalizationContainer
        this._oPendingOperationsMap = new sap.ushell.utils.Map();
        // map: sContainerKey -> pending operation (deferred object, potentially extended with _sapTimeoutId, _sapFnSave)
    };

    sap.ushell.services.Personalization.prototype.SAVE_DEFERRED_DROPPED = "Deferred save dropped (OK) - Data superseeded by subsequent save";
    //constants for scope of personalization service
    sap.ushell.services.Personalization.prototype.constants = {
        keyCategory : {
            "FIXED_KEY" : "FIXED_KEY",
            "GENERATED_KEY" : "GENERATED_KEY"
        },
        writeFrequency : {
            "HIGH" : "HIGH",
            "LOW" : "LOW"
        }
    };

    /**
     * Returns a generated key
     *
     * @returns {string}
     *            40 character string consisting of A-Z and 0-9 which can be used as a generated key for personalization
     *            container. Every invocation returns a new key.
     *            NOTE: Don't use substrings of this key as random keys
     *
     * @public
     * @since 1.28.0
     */
    sap.ushell.services.Personalization.prototype.getGeneratedKey = function () {
        var CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
            sDate = new Date().getTime().toString(),
            sResult = "",
            sConcatResult,
            nHash = 0,
            i;
        // assure _sSeed is longer than 40 characters
        while (this._sSeed.length < 40) {
            this._sSeed = this._sSeed + Math.random().toString().substring(2);
        }
        // use the random seed for the first 3 characters
        for (i = 0; i < 3; i = i + 1) {
            nHash = this._sSeed.charCodeAt(i) + 31 * nHash;
            nHash = nHash & nHash; // Convert to 32bit integer
            sResult = sResult + CHARS[Math.abs(nHash % 36)];
        }
        //to make sure there are at least 40 characters
        sConcatResult = Math.random().toString().substring(2) + sDate + Math.random().toString().substring(2) + sDate + "1234523413542345698772";
        for (i = 0; i < 37; i = i + 1) {
            nHash = this._sSeed.charCodeAt(i) + parseInt(sConcatResult[i], 10) + 31 * nHash;
            nHash = nHash & nHash; // Convert to 32bit integer
            sResult = sResult + CHARS[Math.abs(nHash % 36)];
        }
        return sResult.substring(0, 40);
    };

    /**
     * Returns a personalizer object which handles personalization by
     * asynchronous operations storing the personalization data immediately via
     * the connected adapter. For each operation a round trip is executed.
     *
     * Do not mix the usage of a personalizer and a personalization container
     * for one containerKey.
     *
     * @param {object} oPersId
     *            JSON object consisting of the following parts:
     *            container - Identifies the set of personalization data that is
     *            loaded/saved as one bundle from the front-end server. item - The
     *            name of the object the personalization is applied to.
     * @param {object} oScope - scope object<br/>
     *            currently the validity property of the scope object is relevant:
     *            oScope.validity : validity of the container persistence in minutes<br/>
     *            oScope.keyCategory : Type or category of key<br/>
     *            oScope.writeFrequency : Expected frequency how often users will use this container to store data inside<br/>
     *            oScope.clientStorageAllowed : Defines if storage on client side should be allowed or not<br/>
     *            E.g. <code> { validity : 30}</code> indicates a validity of the data for 30 minutes.
     * @param {sap.ui.component} oComponent
     *           Since 1.27.0.
     *           SAPUI5 component which uses the personalizer. This allows to associate the stored
     *           data with the application.
     *
     * @returns {object}
     *            {@link sap.ushell.services.Personalizer} which provides generic read and
     *            write access to the currently logged on user's personalization
     *            settings.
     *
     * @public
     * @since 1.15.0
     */
    sap.ushell.services.Personalization.prototype.getPersonalizer = function (oPersId, oScope, oComponent) {
        return new sap.ushell.services.Personalizer(this, this._oAdapterWithBackendAdapter, oPersId, oScope, oComponent);
    };

    /**
     * Returns a transient personalizer object which handles personalization by
     * asynchronous operations storing the personalization data transiently as
     * an object property. Primary usage of the transient personalizer is a
     * personalization scenario with variants where the transient personalizer
     * is used as a buffer for table personalization data.
     *
     * @returns {object}
     *            {@link sap.ushell.services.TransientPersonalizer} which
     *            provides asynchronous read and write access to a transient personalization data storage.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.Personalization.prototype.getTransientPersonalizer = function () {
        return new sap.ushell.services.TransientPersonalizer();
    };


    /**
     * Checks if given value is part of enum
     * @returns {boolean}
     * @private
     */
    function checkIfEntryExistsInEnum(entry, passedEnum) {
        var enumElement;
        for (enumElement in passedEnum) {
            if (typeof passedEnum[enumElement] !== 'function') {
                if (passedEnum.hasOwnProperty(enumElement)) {
                    if (enumElement === entry) {
                        return true;
                    }
                }
            }
        }
        return false;
    }

    /**
     * construct a cleansed scope object, returning only valid recognized parameters
     * This functionality is used to cleanse user input
     * @private
     */
    sap.ushell.utils.testPublishAt(sap.ushell.services.Personalization);
    function rectifyScope(oScope) {
        var oConstants = sap.ushell.services.Personalization.prototype.constants,
            // default scope values
            oDefaultScope = {
                validity : Infinity,
                keyCategory : oConstants.keyCategory.GENERATED_KEY,
                writeFrequency: oConstants.writeFrequency.HIGH,
                clientStorageAllowed: false
            };
        if (!oScope) {
            return oDefaultScope;
        }
        oDefaultScope.validity = oScope && oScope.validity;
        if (oDefaultScope.validity === null || oDefaultScope.validity === undefined || typeof oDefaultScope.validity !== "number") {
            oDefaultScope.validity = Infinity;
        }
        if (!(typeof oDefaultScope.validity === "number" &&  ((oDefaultScope.validity >= 0 && oDefaultScope.validity < 1000) || oDefaultScope.validity === Infinity))) {
            oDefaultScope.liftime = Infinity;
        }

        oDefaultScope.keyCategory = checkIfEntryExistsInEnum(oScope.keyCategory, oConstants.keyCategory) ? oScope.keyCategory : oDefaultScope.keyCategory;
        oDefaultScope.writeFrequency = checkIfEntryExistsInEnum(oScope.writeFrequency, oConstants.writeFrequency) ? oScope.writeFrequency : oDefaultScope.writeFrequency;
        if (typeof oScope.clientStorageAllowed === 'boolean' && (oScope.clientStorageAllowed === true || oScope.clientStorageAllowed === false)) {
            oDefaultScope.clientStorageAllowed = oScope.clientStorageAllowed;
        }

        //Combination of FixKey & CrossUserRead is an illegal combination because the user who was creating the container is no longer available
        //The other users have no chance to write on that container
        //if (oDefaultScope.keyCategory === oConstants.keyCategory.FIXED_KEY && oDefaultScope.access === oConstants.access.CROSS_USER_READ) {
        //    throw new sap.ushell.utils.Error("Wrong defined scope. FixKey and CrossUserRead is an illegal combination: sap.ushell.services.Personalization");
        // }
        return oDefaultScope;
    }


    sap.ushell.utils.testPublishAt(sap.ushell.services.Personalization);
    function rectifyScopePickAdapter(sContainerKey, oScope, _oAdapterWithBackendAdapter, _oAdapterWindowOnly) {
        var sPrefixedContainerKey = "",
            bLaunchpadReload,
            oAdapterForScope;
        if (typeof sContainerKey !== "string") {
            throw new sap.ushell.utils.Error("sContainerKey is not a string: sap.ushell.services.Personalization");
        }
        if (sContainerKey.length > 40) {
            jQuery.sap.log.error("Personalization Service container key (\"" + sContainerKey + "\") should be less than 40 characters [current :" + sContainerKey.length + "]");
        }
        oScope = rectifyScope(oScope);
        sPrefixedContainerKey = addContainerPrefix(sContainerKey);
        bLaunchpadReload = window["sap-ushell-config"] && window["sap-ushell-config"].services &&
            window["sap-ushell-config"].services.ShellNavigation &&
            window["sap-ushell-config"].services.ShellNavigation.config &&
            window["sap-ushell-config"].services.ShellNavigation.config.reload;
            // default = false
        oAdapterForScope = _oAdapterWithBackendAdapter;
        if (oScope && oScope.validity === 0) {
            if (bLaunchpadReload) {
                oScope.validity = 1440; // 24h
                                        // reason: balance between risk of loosing parameters while navigation and
                                        // data amount per user
            } else {
                oAdapterForScope = _oAdapterWindowOnly;
            }
        }
        return { oAdapterForScope : oAdapterForScope,
            oScope : oScope,
            sPrefixedContainerKey : sPrefixedContainerKey
            };
    }

    /**
     * Factory method to obtain a Data Context object,
     * which is a local copy of the persistence layer data.
     * The Container data is asynchronously read on creation if present,
     * otherwise an initial object is created.
     * The Container data can then be *synchronously* modified (getItemValue, setItemValue).
     * Only on invoking  the save()/saveDeferred() method the data is transferred to the persistence.
     * This allows the application to perform multiple local modifications and
     * delay the save operation.
     *
     * Every getContainer operation returns a new local copy, containing the full data at the point of creation.
     *
     * Executing load() on the container reloads the data from the persistence, discarding local changes.
     *
     * Note that the container allows the application to
     * control the round trips to the front-end server persistence. The factory method
     * getContainer is asynchronous and loads the container via
     * the connected adapter from the front-end server. All operations (but for the
     * save operation) are executed synchronously, operating on the local data.
     * This allows the application to control the round trips to the front-end server
     * persistence.
     *
     * A container can contain a set of items, identified by a key.
     *
     * You can wrap a container in a VariantSetAdapter to read and write
     * a more complex structure (with multiple keys (variantSet,variant,item)).
     *
     * Do not mix up the usage of a personalizer and a container
     * for one containerKey.
     * Do not use a PersonalizationContainer and a Container for the same key except for migration scenarios.
     *
     * scope / validity parameter (@since 1.22.0):
     *   An unspecified (undefined validity) or infinite (Infinity) validity indicates that data is persisted in the
     *   Personalization data of the front-end server. A round trip is executed on an initial get and at least every save operation.
     *   Data is stored per user and retained indefinitely at the front-end server.
     *
     *   The validity parameter allows a designated storage validity for the created container.
     *   A 0 validity indicates the data is only persisted within the Fiori Launchpad window.
     *   No round trips to the front-end server are executed. Data is lost if the Fiori Launchpad window state is lost
     *   (e.g. by navigating to a different page, pressing F5 (reload page) or duplicating the window).
     *
     *   For versions > 1.24 it may happen that for cross-app navigation a reload of the Fiori Launchpad is triggered.
     *   In this case a storage of the personalization data in the Fiori lauchpad window would lead to data loss.
     *   To overcome this a validity 0 is automatically changed to a validity 1440 (24h; storage on the front-end server).
     *   This is only done if a relaod of the Fiori Launchpad is triggered for a cross-app navigation.
     *
     * Security: It is the responsibility of the application to not persist information relevant to auditing or security
     * using the PersonalizationService with inappropriate validity models. No mechanisms exist
     * to destroy or selectively destroy application-specific data in the front-end server persistence (especially for validity Infinity).
     *
     * For non-zero validity scopes, data will be transmitted and persisted in the front-end server system.
     *
     * For limited validity, actual deletion of data on the front-end server is subject to explicit cleanup execution of front-end server jobs
     * and not guaranteed. The data may still be persisted and retrievable. The interface only assures that expired data is no longer
     * exposed to the application code in the Fiori Launchpad.
     *
     * The ContainerKey uniquely defines the Container, validity is not part of the key (there are no separate
     * namespaces per validity).
     *
     * In general, mixing different validity models for a given container key is not supported.
     * Fast chaining of different methods may source arbitrary persistence layers.
     * The validity of the resulting object in the done function of a promise is the last get validity.
     *
     * The validity associated with the last getContainer or createEmptyContainer determines
     * the current validity of the container and the validity used during the next save operation.
     *
     * Naturally, if a delete or get with validity 0 is issued, it will *not* delete or retrieve a front-end server persistent
     * storage
     * Thus a sequence  delete( [validity 0])/wait for promise, getContainer(sKey,{ validity : Infinity}) may return a valid dataset.
     *
     * @param {string}
     *            sContainerKey - identifies the container
     *            The string length is restricted to 40 characters
     * @param {Object} oScope - scope object<br/>
     *            currently the validity property of the scope object is relevant:
     *            E.g. <code> { validity : 30}</code> indicates a validity of the data for 30 minutes.<br/>
     *            oScope.validity : validity of the container persistence in minutes<br/>
     *              valid values include 0 ( per FLP Window), <br/>
     *                           Infinity, undefined  (front-end server persistence per user ) [Default] <br/>
     *                           nn Minutes (front-end server persistence per user, ignored if older than nn minutes)
     * @param {sap.ui.component} oComponent
     *           Since 1.27.0.
     *           SAPUI5 component which uses the container. This allows to associate the stored
     *           data with the application.
     *
     * @returns {object} Promise object whose done function returns a
     *            {@link sap.ushell.services.Personalization.ContextContainer} object
     *            as parameter. The container provides setItemValue / getItemValue methods
     *            to synchronously operate on personalization data.
     *            By wrapping it in a VariantSetAdapter, an alternate interface to maintain variants can be obtained.
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.prototype.getContainer = function (sContainerKey, oScope, oComponent) {
        return this._createContainer(sContainerKey, oScope, false, oComponent);
    };

    /**
    * Factory method to obtain an empty Data Context object.
    * When data present in a prior context is not relevant
    * (e.g. when using a "uniquely" generated key and planning to
    * overwrite any colliding front-end server data).
    *
    * The call always returns an cleared container().
    *
    * Note that an existing container at the front-end server is not actually deleted or overwritten
    * unless a save operation is executed.
    *
    *
    * An initial object is returned.
    * @param {string}
    *            sContainerKey - identifies the container
     *            The string length is restricted to 40 characters
    * @param {Object} oScope - scope object
    *            currently the validity property of the scope object is relevant:
    *            E.g. <code> { validity : 30}</code> indicates a validity of the data for 30 minutes.<br/>
    *            oScope.validity : validity of the container persistence in minutes
    *              valid values include 0 ( per FLP Window),
    *                           Infinity, undefined  ( Backend persistence per user ) [Default]
    *                           nn Minutes ( Backend persistence per user, ignored if older than nn minutes)
    * @param {sap.ui.component} oComponent
    *           Since 1.27.0.
    *           SAPUI5 component which uses the container. This allows to associate the stored
    *           data with the application.
    *
    * @returns {object} Promise object whose done function returns a
    *            {@link sap.ushell.services.Personalization.ContextContainer} object
    *            as parameter. The personalization container provides two different
    *            interfaces to synchronously operate on personalization data.
    *            In the item mode the container contains items as name value pairs for
    *            personalization data.
    *            In the variant mode the container contains variant sets which contain
    *            variants containing items.
    * @public
    * @since 1.22.0
    */
    sap.ushell.services.Personalization.prototype.createEmptyContainer = function (sContainerKey, oScope, oComponent) {
        return this._createContainer(sContainerKey, oScope, true, oComponent);
    };

    sap.ushell.services.Personalization.prototype._createContainer = function (sContainerKey, oScope, bCreateEmpty, oComponent) {
        var oDeferred = new jQuery.Deferred(),
            res,
            oLoadPromise,
            oContainer;
        res = rectifyScopePickAdapter(sContainerKey, oScope, this._oAdapterWithBackendAdapter,
            this._oAdapterWindowOnly);
        oContainer = new sap.ushell.services.Personalization.ContextContainer(this,
            res.oAdapterForScope, res.sPrefixedContainerKey, res.oScope, oComponent);
        // historically, a sequence getContainer / load was always called
        // if an adapter supports returning an initialized container without
        // requiring an subsequent load,
        // he can set the flag supportsGetWithoutSubsequentLoad and the load call will be omitted if
        // an empty container is required
        if (bCreateEmpty && this._supportsGetWithoutSubsequentLoad) {
            oLoadPromise = new jQuery.Deferred();
            oLoadPromise.resolve(oContainer);
        } else {
            oLoadPromise = oContainer.load();
        }
        // TODO force asynchronous response
        // requires unit test adaptation which relies on synchronous reponse
        //setTimeout(function () {
            // must do load and clear ...
        oLoadPromise.fail(function () {
            oDeferred.reject();
        }).done(function () {
            if (bCreateEmpty || oContainer._isExpired()) {
                oContainer.clear();
            }
            oDeferred.resolve(oContainer);
        });
        //}, 0);
        return oDeferred.promise();
    };


    /**
     * Asynchronously starts a deletion request for the given container identified by
     * sContainerKey. Can be called without having ever called getContainer with the corresponding key
     *
     * Note: After invoking this operation, the state of other Containers
     * obtained for the same key is undefined!
     * If you want to use the container after deletion, it is strongly recommended to obtain
     * a new instance of a container for the given key *after* the promise has returned.
     *
     * Note: Invoking this operation while another save or load operation is under way may result in failure.
     *
     * @param {string} sContainerKey
     *           identifies the container
     *
     * @returns {object}
     *          promise for the deletion operation
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.prototype.delContainer = function (sContainerKey, oScope) {
        // delete the bag, the adapter container & the container
        var oDeferred = {},
            oPrior,
            sPrefixedContainerKey = "",
            that = this;
        oScope = rectifyScope(oScope);
        sPrefixedContainerKey = addContainerPrefix(sContainerKey);
        oDeferred = new jQuery.Deferred();

        oPrior = that._pendingContainerOperations_cancelAddNext(sContainerKey, null);
        oPrior.always(function () {
            that.getContainer(sContainerKey, oScope)  // delays to oPrior! registers a new op!
                .fail(function () {
                    that._pendingContainerOperations_cancelAddNext(sContainerKey, oDeferred); // reinstall oPrior (!)
                    oDeferred.reject();
                })
                .done(function (oContainer) {
                    var oAdapter;
                    // install the "latest" deferred
                    that._pendingContainerOperations_cancelAddNext(sContainerKey, oDeferred); // the getContainer above executed a load --> no flush required
                    if (oScope.validity === 0) {
                        oAdapter = that._oAdapterWindowOnly;
                    } else {
                        oAdapter = that._oAdapterWithBackendAdapter;
                    }
                    oAdapter.delAdapterContainer(sPrefixedContainerKey, oScope)
                        .fail(function () {
                            oDeferred.reject();
                        })
                        .done(function () {
                            oDeferred.resolve();
                        });
                });
        });
        return oDeferred.promise();
    };


    // return old promise,
    // add oDeferred as new, if null , retain old!
    sap.ushell.services.Personalization.prototype._pendingContainerOperations_flushAddNext = function (sContainerKey, oDeferred) {
        var oPendingOpDeferred,
            fnSave;
        oPendingOpDeferred = this._oPendingOperationsMap.get(sContainerKey);
        if (!oPendingOpDeferred) {
            oPendingOpDeferred = new jQuery.Deferred();
            oPendingOpDeferred.resolve();
        }
        if (oDeferred !== null) {
            this._oPendingOperationsMap.put(sContainerKey, oDeferred);
        }
        if (!oPendingOpDeferred || oPendingOpDeferred.state() !== "pending") {
            return oPendingOpDeferred;
        }
        clearTimeout(oPendingOpDeferred._sapTimeoutId); //system function!
        oPendingOpDeferred._sapTimeoutId = undefined;
        if (typeof oPendingOpDeferred._sapFnSave === "function") {
            fnSave = oPendingOpDeferred._sapFnSave;
            oPendingOpDeferred._sapFnSave = undefined; // function can only be triggered at most one time
            fnSave();
        }
        return oPendingOpDeferred;
    };


    sap.ushell.services.Personalization.prototype._pendingContainerOperations_cancelAddNext = function (sContainerKey, oDeferred) {
        var oPendingOpDeferred;
        oPendingOpDeferred = this._oPendingOperationsMap.get(sContainerKey);
        if (!oPendingOpDeferred) {
            oPendingOpDeferred = new jQuery.Deferred();
            oPendingOpDeferred.resolve();
        }
        if (oDeferred !== null) {
            this._oPendingOperationsMap.put(sContainerKey, oDeferred);
        }
        if (!oPendingOpDeferred || oPendingOpDeferred.state() !== "pending") {
            return oPendingOpDeferred;
        }
        if (oPendingOpDeferred._sapTimeoutId) {
            clearTimeout(oPendingOpDeferred._sapTimeoutId);
            oPendingOpDeferred._sapTimeoutId = undefined;
            oPendingOpDeferred.resolve(sap.ushell.services.Personalization.prototype.SAVE_DEFERRED_DROPPED);
        }
        return oPendingOpDeferred;
    };

     /**
     * This interface is deprecated since 1.22,
     * please use getContainer / delContainer.
     *
     * Note: the underlying storage model for Objects stored with getContainer / getPersonalizationContainer
     * is identical.<br/>
     * Thus you can safely migrate your client implementation from the deprecated getContainer to
     * getPersonalizationContainer without loss of data.
     * One may even run mixed set of applications on the same container keys.
     * The sole differences are w.r.t. client side handling of the Context data within one session.
     *
     * If you want to use the variant interface, use the following pattern
     * <code>
     *  getContainer(sContainerKey).done(function(oContainer) {
     *     var variantSetAdapter = new sap.ushell.services.Personalization.VariantSetAdapter(oContainer);
     * }
     * </code>
     *
     *
     * Factory method to obtain a personalization container
     * object which is a client-local buffer for personalization data.
     * The Container data is asynchronously read on creation (if present,
     * otherwise an initial object is created).
     * The Container data can then be *synchronously* modified (read/write/delete).
     * Only on invoking  the save() method the data is persisted at the front-end server.
     * This allows the application to perform multiple local modifications and
     * delay the save operation.
     * Note that the personalization container allows the application to
     * control the round trips to the front-end server persistence. The factory method
     * getPersonalizationContainer is asynchronous and loads the container via
     * the connected adapter from the front-end server. All operations (but for the
     * save operation) are executed synchronously, operating on the local data.
     * This allows the application to control the round trips to the front-end server
     * persistence.
     *
     * A personalization container can contain items as well as variant sets.
     * Variant sets have the following structure:
     * variantSet.variant.item
     * A variant set is enclosing several variants of the same data.
     *
     * Example: An application has two types of variants.
     * Variant type 1 contains filter values for a query, which are stored in item 1 of
     * the variant, and personalization data for a table, which are stored in item 2
     * of the variant.
     * Variant type 2 contains a setting (item 3) that is independent of
     * the filtering and the table settings. It might be used for a different
     * screen than the variants of type 1.
     * In this example you would have 2 variant sets, one for each variant type.
     *
     * Do not mix up the usage of a personalizer and a personalization container
     * for one containerKey.
     *
     * @param {string}
     *            sContainerKey - identifies the container
     *
     * @returns {object} Promise object whose done function returns a
     *            {@link sap.ushell.services.PersonalizationContainer} object
     *            as parameter. The personalization container provides two different
     *            interfaces to synchronously operate on personalization data.
     *            In the item mode the container contains items as name-value pairs for
     *            personalization data.
     *            In the variant mode the container contains variant sets which contain
     *            variants containing items.
     *
     * @deprecated use getContainer()
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.Personalization.prototype.getPersonalizationContainer = function (sContainerKey) {
        var sPrefixedContainerKey = "",
            oPromiseContainer = {},
            oDeferred = {};

        if (typeof sContainerKey !== "string") {
            throw new sap.ushell.utils.Error("sContainerKey is not a string: sap.ushell.services.Personalization");
        }
        sPrefixedContainerKey = addContainerPrefix(sContainerKey);
        if (this._oContainerMap.containsKey(sPrefixedContainerKey)) {
            return this._oContainerMap.get(sPrefixedContainerKey).promise();
        }
        oDeferred = new jQuery.Deferred();
        oPromiseContainer = new sap.ushell.services.PersonalizationContainer(this._oAdapterWithBackendAdapter, sPrefixedContainerKey);
        oPromiseContainer
            .done(function (oContainer) {
                oDeferred.resolve(oContainer);
            })
            .fail(function (oContainer) {
                oDeferred.reject(oContainer);
            });
        this._oContainerMap.put(sPrefixedContainerKey, oDeferred);
        return oDeferred.promise();
    };

    /**
     * @deprecated Please use getContainer / delContainer
     * Asynchronously starts a deletion request for the given container identified by
     * sContainerKey. Can be called without having ever created a personalization container.
     *
     * Note: After invoking this operation, the state of other PersonalizationContainers
     * obtained for the same key is undefined!
     * If you want to use the container after deletion, it is strongly recommended to obtain
     * a new instance of PersonalizationContainer for the given key *after* the promise has returned.
     *
     * Note: Invoking this operation while another save or load operation is under way may result in failure.
     *
     * @param {string} sContainerKey
     *           identifies the container
     *
     * @returns {object}
     *          promise for the deletion operation
     *
     * @deprecated
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.Personalization.prototype.delPersonalizationContainer = function (sContainerKey) {
        // delete the bag, the adapter container & the container
        var oDeferred = {},
            sPrefixedContainerKey = "",
            that = this;

        sPrefixedContainerKey = addContainerPrefix(sContainerKey);
        oDeferred = new jQuery.Deferred();
        this.getPersonalizationContainer(sContainerKey)
            .fail(function () {
                oDeferred.reject();
            })
            .done(function (oContainer) {
                that._oAdapterWithBackendAdapter.delAdapterContainer(sPrefixedContainerKey)
                    .fail(function () {
                        oDeferred.reject();
                    })
                    .done(function () {
                        that._oContainerMap.remove(sPrefixedContainerKey);
                        oDeferred.resolve();
                    });
            });
        return oDeferred.promise();
    };

    // --------------------------
    // ------ Personalizer ------
    // --------------------------
    /**
     * To be called by the personalization service getPersonalizer method.
     *
     * @class The Unified Shell personalizer providing set get delete
     *        methods to access the persisted personalization data in direct mode.
     *
     * @public
     * @since 1.15.0
     */
    sap.ushell.services.Personalizer = function (oService, oAdapter, oPersId, oScope, oComponent) {
        this._sPersContainer = "";
        this._sPersItem = "";
        this._sPersVariant = null;
        this._oAdapter = oAdapter;
        this._oService = oService;
        this._oScope = oScope;
        this._oComponent = oComponent;

        if (!oPersId || !oPersId.container || !oPersId.item ||
                typeof oPersId.container !== "string" || typeof oPersId.item !== "string") {
            throw new sap.ushell.utils.Error("Invalid input for oPersId: sap.ushell.services.Personalization");
        }
        this._sPersContainer = oPersId.container; // prefix is added in container constructor
        this._sPersItem = oPersId.item;
    };

    sap.ushell.services.Personalizer.prototype._getContainer = function (sPersContainer) {
        if (!this._oGetContainerPromise) {
            this._oGetContainerPromise = this._oService.getContainer(sPersContainer, this._oScope, this._oComponent);
        }
        return this._oGetContainerPromise;
    };

    /**
     * Gets a personalization data value.
     *
     * @returns {object}
     *          Promise object which provides the personalization value.
     *          Promise object done function: param {object} oValue JSON
     *          object containing the personalization value. If there is no
     *          personalization data for the item, undefined is returned. Promise
     *          object fail function: param {string} sMessage Error message.
     *
     * @public
     * @since 1.15.0
     */
    sap.ushell.services.Personalizer.prototype.getPersData = function () {
        // async
        var oDeferred = {},
            that = this;

        oDeferred = new jQuery.Deferred();
        this._getContainer(this._sPersContainer)
            .fail(function () {
                // TODO
                oDeferred.reject();
            })
            .done(function (oContainer) {
                oDeferred.resolve(oContainer.getItemValue(that._sPersItem));
            });

        oDeferred.fail(function () {
            jQuery.sap.log.error("Fail to get Personalization data for Personalizer container: " + that._sPersContainer);
        });
        return oDeferred.promise();
    };

    /**
     * Sets a personalization data value.
     *
     * @param {object} oValue
     *          JSON object containing the personalization value.
     * @returns {object}
     *          Promise object which returns if the saving was
     *          successful or erroneous. Promise object done function: no
     *          params. Promise object fail function: param {string} sMessage
     *          Error message
     *
     * @public
     * @since 1.15.0
     */
    sap.ushell.services.Personalizer.prototype.setPersData = function (oValue) {
        // async
        var oDeferred = {},
            that = this;

        oDeferred = new jQuery.Deferred();
        this._getContainer(this._sPersContainer)
            .fail(function () {
                // TODO
                oDeferred.reject();
            })
            .done(function (oContainer) {
                oContainer.setItemValue(that._sPersItem, oValue);
                oContainer.save()
                    .fail(function () {
                        // TODO
                        oDeferred.reject();
                    })
                    .done(function () {
                        oDeferred.resolve();
                    });
            });

        oDeferred.fail(function () {
            jQuery.sap.log.error("Fail to set Personalization data for Personalizer container: " + that._sPersContainer);
        });
        return oDeferred.promise();
    };
    /**
     * Deletes a personalization data value.
     *
     * @returns {object}
     *          Promise object which returns if the deletion was
     *          successful or erroneous. Promise object done function: no
     *          params. Promise object fail function: param {string} sMessage
     *          Error message.
     *
     * @public
     * @since 1.15.0
     */
    sap.ushell.services.Personalizer.prototype.delPersData = function () {
        // async
        var oDeferred = {},
            that = this,
            oMessagingPromise;

        oDeferred = new jQuery.Deferred();
        this._oService.getPersonalizationContainer(this._sPersContainer)
            .fail(function () {
                // TODO
                oDeferred.reject();
            })
            .done(function (oContainer) {
                oContainer.delItem(that._sPersItem);
                oContainer.save()
                    .fail(function () {
                        // TODO
                        oDeferred.reject();
                    })
                    .done(function () {
                        oDeferred.resolve();
                    });
            });

        oMessagingPromise = oDeferred.promise();
        oMessagingPromise.fail(function () {
            jQuery.sap.log.error("Fail to delete Personalization data for Personalizer container: " + this._sPersContainer);
        });
        return oMessagingPromise;
    };

    // -----------------------------------
    // ------ TransientPersonalizer ------
    // -----------------------------------
    /**
     * To be called by the personalization service getTransientPersonalizer method.
     *
     * @class The transient personalizer shall be used
     *        in container mode for table personalization.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.TransientPersonalizer = function () {
        this._oValue = undefined;
    };

    /**
     * Gets a personalization data value.
     *
     * @returns {object}
     *          Promise object which provides the personalization
     *          value. Promise object done function: param {object} oValue JSON
     *          object containing the personalization value. If there is no
     *          personalization data for the item, undefined is returned.
     *          Promise object fail function ins never triggered.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.TransientPersonalizer.prototype.getPersData = function () {
        var oDeferred;

        oDeferred = new jQuery.Deferred();
        oDeferred.resolve(this._oValue);
        return oDeferred.promise();
    };

    /**
     * Sets a personalization data value.
     *
     * @param {object} oValue
     *          JSON object containing the personalization value.
     * @returns {object}
     *          Promise object which returns if the saving was
     *          successful or erroneous. Promise object done function: no
     *          params. Promise fail function ins never triggered.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.TransientPersonalizer.prototype.setPersData = function (oValue) {
        var oDeferred;

        oDeferred = new jQuery.Deferred();
        this._oValue = oValue;
        oDeferred.resolve();
        return oDeferred.promise();
    };

    /**
     * Deletes a personalization data value.
     *
     * @returns {object}
     *          Promise object which returns if the deletion was
     *          successful or erroneous. Promise object done function: no
     *          params. Promise object fail function ins never triggered.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.TransientPersonalizer.prototype.delPersData = function () {
        var oDeferred;

        oDeferred = new jQuery.Deferred();
        this._oValue = undefined;
        oDeferred.resolve();
        return oDeferred.promise();
    };

    /**
     * Synchronously sets a personalization data value.
     *
     * @param {object} oValue
     *            JSON object containing the personalization value.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.TransientPersonalizer.prototype.setValue = function (oValue) {
        this._oValue = oValue;
    };

    /**
     * Synchronously gets a personalization data value.
     *
     * @returns {object}
     *            JSON object containing the personalization value.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.TransientPersonalizer.prototype.getValue = function () {
        return this._oValue;
    };

    // -----------------------
    // ------ Container ------
    // -----------------------
    /**
     * To be called by the personalization service getPersonalizationContainer method.
     *
     * @class The personalization container is the anchor object of the unified shell
     *        personalization in container mode.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainer = function (oAdapter, sContainerKey) {
        this._sContainerKey = sContainerKey;
        this._oAdapterContainer = {};
        this._aLoadedVariantSetKeys = [];
        this._aLoadedItemKeys = [];
        var oDeferred = {},
            that = this;

        this._init();
        oDeferred = new jQuery.Deferred();
        if (!this._sContainerKey || typeof this._sContainerKey !== "string") {
            throw new sap.ushell.utils.Error("Invalid container key: sap.ushell.services.Personalization");
        }
        // get adapter container & load
        this._oAdapterContainer = oAdapter.getAdapterContainer(this._sContainerKey);
        this.load()
            .fail(function () {
                oDeferred.reject();
            })
            .done(function () {
                oDeferred.resolve(that);
            });
        return oDeferred.promise();
    };

    sap.ushell.services.PersonalizationContainer.prototype._init = function () {
        // resets all member variables of the personalization container
        this._oVariantSetMap = {};
        this._oItemMap = {};
        this._aLoadedVariantSetKeys = [];
        this._aLoadedItemKeys = [];
        this._oVariantSetMap = new sap.ushell.utils.Map();
        this._oItemMap = new sap.ushell.utils.Map();
    };

    function clone(oObject) {
        if (oObject === undefined) {
            return undefined;
        }
        try {
            return JSON.parse(JSON.stringify(oObject));
        } catch (e) {
            return undefined;
        }
    }

    function cloneToObject(oObject) {
        if (oObject === undefined) {
            return undefined;
        }
        try {
            return JSON.parse(oObject);
        } catch (e) {
            return undefined;
        }
    }

/**
 * (Re)loads the current container data from the underlying storage asynchronously.
 * The current local data is discarded.
 *
 * Returns a promise for the load operation.
 * If another save/load/delete operation is not completed, the  operation may fail!
 * (wait for the other promise).
 *
 * Synchronous read and write operations before the load is done have undefined
 * effects.
 *
 * @returns {object}
 *          Promise object
 *
 * @public
 * @since 1.18.0
 */
    sap.ushell.services.PersonalizationContainer.prototype.load = function () {
        var oDeferred = {},
            aItemAndVaraintSetKeys = [],
            aVariantSetKeys = [],
            aItemKeys = [],
            aMigratedItemKeys = [],
            that = this;
        function migrateItemsToPrefix(aItemKeys) {
            // aItemKeys contains prefixed keys and unprefixed keys
            var aNonPrefixKeys = [],
                aPrefixKeys = [];

            aNonPrefixKeys = aItemKeys.filter(function (s) {
                return s.indexOf(sITEM_PREFIX) !== 0;
                // match at first character -> index = 0 -> false -> filter out
                // match inside the string -> index > 0 -> true -> keep
                // no match -> index = -1 -> true -> keep
            });
            if (aNonPrefixKeys.length === 0) {
                return aItemKeys;
            }
            aPrefixKeys = aItemKeys.filter(function (s) {
                return s.indexOf(sITEM_PREFIX) === 0;
                // match at first character -> index = 0 -> true -> keep
                // match inside the string -> index > 0 -> false -> filter out
                // no match -> index = -1 -> false -> filter out
            });
            aNonPrefixKeys.forEach(function (sItemKey) {
                var oItemValue = {},
                    sPrefixedItemKey = "";
                sPrefixedItemKey = sITEM_PREFIX + sItemKey;
                oItemValue = clone(that._oAdapterContainer.getItemValue(sItemKey));
                // create a new prefixed item at the container
                that._oAdapterContainer.setItemValue(sPrefixedItemKey, oItemValue);
                    // delete the non prefixed item at the container
                that._oAdapterContainer.delItem(sItemKey);
                if (jQuery.inArray(sPrefixedItemKey, aPrefixKeys) === -1) {
                    aPrefixKeys.push(sPrefixedItemKey);
                }
            });
            return aPrefixKeys;
        }

        oDeferred = new jQuery.Deferred();
        if (!this._sContainerKey) {
            throw new sap.ushell.utils.Error("Invalid container key: sap.ushell.services.Personalization");
        }
        // delete local data
        this._init();
        // get adapter container & load
        this._oAdapterContainer.load()
            .fail(function () {
                // TODO
                oDeferred.reject();
            })
            .done(function () {
                aItemAndVaraintSetKeys = that._oAdapterContainer.getItemKeys().splice(0);
                aVariantSetKeys = aItemAndVaraintSetKeys.filter(function (s) {
                    return s.indexOf(sVARIANT_PREFIX) === 0;
                    // match at first character -> index = 0 -> true -> keep
                    // match inside the string -> index > 0 -> false -> filter out
                    // no match -> index = -1 -> false -> filter out
                });
                aVariantSetKeys.forEach(function (sVariantSetKey) {
                    var oVariantSet = {};
                    oVariantSet = new sap.ushell.services.PersonalizationContainerVariantSet(sVariantSetKey, that._oAdapterContainer);
                    that._oVariantSetMap.put(sVariantSetKey, oVariantSet);
                });
                aItemKeys = aItemAndVaraintSetKeys.filter(function (s) {
                    return s.indexOf(sVARIANT_PREFIX) !== 0;
                    // match at first character -> index = 0 -> false -> filter out
                    // match inside the string -> index > 0 -> true -> keep
                    // no match -> index = -1 -> true -> keep
                });
                aMigratedItemKeys = migrateItemsToPrefix(aItemKeys);
                aMigratedItemKeys.forEach(function (sItemKey) {
                    that._oItemMap.put(sItemKey, clone(that._oAdapterContainer.getItemValue(sItemKey)));
                });
                that._aLoadedVariantSetKeys = that._oVariantSetMap.keys().splice(0);
                that._aLoadedItemKeys = that._oItemMap.keys().splice(0);
                oDeferred.resolve();
            });
        return oDeferred.promise();
    };

    // -- common interface --
    /**
     * Attempts to save the current container data at the underlying storage asynchronously.
     * The current state is serialized.
     * @returns {object}
     *             Promise object
     *
     * If another save/load/delete operation is not completed, the  operation may fail!
     * (wait for the other promise).
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainer.prototype.save = function () {
        // async
        var oSaveContainer,
            oInnerPromise;
        this._serializeVariantSets();
        this._serializeItems();

        oSaveContainer = new jQuery.Deferred();
        function fnSaveSuccess() {
            oSaveContainer.resolve();
        }
        function fnSaveError() {
            oSaveContainer.reject();
        }
        try {
            oInnerPromise = this._oAdapterContainer.save(); // promise
            oInnerPromise.fail(fnSaveError);
            oInnerPromise.done(fnSaveSuccess);
        } catch (e) {
            oSaveContainer.reject();
        }
        return oSaveContainer.promise();
    };

    // -- item interface --
    /**
     * Returns an array with the keys of direct items in the container.
     * @returns {array}
     *             item keys
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainer.prototype.getItemKeys = function () {
        return this._oItemMap.keys().map(function (sEntry) {
            return sEntry.replace(sITEM_PREFIX, "", "");
        });
    };

    /**
     * Returns the value for a direct item from the container.
     * @param {string} sItemKey
     *            item key
     * @returns {object}
     *            item value (JSON object). In case the container does not contain a direct item with this key
     * <code>undefined</code> is returned.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainer.prototype.getItemValue = function (sItemKey) {
        if (typeof sItemKey !== "string") {
            return undefined;
        }
        return this._oItemMap.get(sITEM_PREFIX + sItemKey);
    };

    /**
     * Checks if a specific direct item is contained in the container.
     * @param {string} sItemKey
     *            item key
     * @returns {boolean}
     *            <tt>true</tt> if the container contains a direct item with the key
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainer.prototype.containsItem = function (sItemKey) {
        if (typeof sItemKey !== "string") {
            return undefined;
        }
        return this._oItemMap.containsKey(sITEM_PREFIX + sItemKey);
    };

    /**
     * Sets the value of a direct item in the container.
     * In case the item is already existing its value is overwritten. In case it is not
     * existing a new item with this key and value is created.
     * @param {string} sItemKey
     *            item key
     * @param {object} sItemValue
     *            item value (JSON object)
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainer.prototype.setItemValue = function (sItemKey, oItemValue) {
        if (typeof sItemKey !== "string") {
            throw new sap.ushell.utils.Error("Parameter value of sItemKey is not a string: sap.ushell.services.Personalization");
        }
        this._oItemMap.put(sITEM_PREFIX + sItemKey, oItemValue);
    };

    /**
     * Deletes a direct item from the container.
     * In case the item does not exist, nothing happens.
     * @param {string} sItemKey
     *            item key
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainer.prototype.delItem = function (sItemKey) {
        if (typeof sItemKey !== "string") {
            return undefined;
        }
        if (this.containsItem(sItemKey)) {
            this._oItemMap.remove(sITEM_PREFIX + sItemKey);
        }
    };

    sap.ushell.services.PersonalizationContainer.prototype._serializeItems = function () {
        var aItemKeys = [],
            aDiff = [],
            that = this;

        aItemKeys = this._oItemMap.keys();
        aItemKeys.forEach(function (sItemKey) {
            that._oAdapterContainer.setItemValue(sItemKey, clone(that._oItemMap.get(sItemKey)));
        });
        aDiff = this._aLoadedItemKeys.filter(function (sItemKey) {return !(aItemKeys.indexOf(sItemKey) > -1); });
        aDiff.forEach(function (sItemKey) {
            that._oAdapterContainer.delItem(sItemKey);
        });
    };

    // -- variant interface --
    /**
     * Returns an array with the keys of the variant sets in the container.
     * @returns {array}
     *             variant set keys
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainer.prototype.getVariantSetKeys = function () {
        var aVariantSetKeys = [],
            aPrefixVariantSetKeys = [];

        aPrefixVariantSetKeys = this._oVariantSetMap.keys();
        aVariantSetKeys = aPrefixVariantSetKeys.map(function (sEntry) {
            return sEntry.replace(sVARIANT_PREFIX, "", "");
        });
        return aVariantSetKeys;
    };
    /**
     * Checks if a specific variant set is contained in the container.
     * @param {string} sVariantSetKey
     *            variant set key
     * @returns {boolean}
     *            <tt>true</tt> if the container contains a variant set with the key
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainer.prototype.containsVariantSet = function (sVariantSetKey) {
        return this._oVariantSetMap.containsKey(sVARIANT_PREFIX
                + sVariantSetKey);
    };
    /**
     * Returns the variant set object from the container.
     * @param {string} sVariantSetKey
     *            variant set key
     * @returns {object}
     *            {@link sap.ushell.services.PersonalizationContainerVariantSet}.
     *            In case the container does not contain a variant set with this key
     *            <code>undefined</code> is returned.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainer.prototype.getVariantSet = function (sVariantSetKey) {
        var sPrefixedVariantSetKey,
            oVariantSet = {};

        sPrefixedVariantSetKey = sVARIANT_PREFIX + sVariantSetKey;
        oVariantSet = this._oVariantSetMap.get(sPrefixedVariantSetKey);
        return oVariantSet;
    };
    /**
     * Creates a new variant set in the container.
     * In case a variant set with this key is already existing an exception is thrown.
     * @param {string} sVariantSetKey
     *            variant set key
     * @returns {object}
     *            {@link sap.ushell.services.PersonalizationContainerVariantSet}
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainer.prototype.addVariantSet = function (sVariantSetKey) {
        var oEmptyValue = {},
            oVariantSet = {},
            sPrefixedVariantSetKey = "";

        if (this.containsVariantSet(sVariantSetKey)) {
            throw new sap.ushell.utils.Error("Container already contains a variant set with key '"
                            + sVariantSetKey
                            + "': sap.ushell.services.Personalization");
        }
        sPrefixedVariantSetKey = sVARIANT_PREFIX + sVariantSetKey;
        oEmptyValue = {
            currentVariant : null,
            variants : {}
        };
        this._oAdapterContainer.setItemValue(sPrefixedVariantSetKey,
                oEmptyValue);

        oVariantSet = new sap.ushell.services.PersonalizationContainerVariantSet(sPrefixedVariantSetKey, this._oAdapterContainer);
        this._oVariantSetMap.put(sPrefixedVariantSetKey, oVariantSet);
        return oVariantSet;
    };

    sap.ushell.services.PersonalizationContainer.prototype._serializeVariantSets = function () {
        var aVariantSetKeys = [],
            aDiff = [],
            that = this;

        aVariantSetKeys = this._oVariantSetMap.keys();
        aVariantSetKeys.forEach(function (sVariantSetKey) {
            var oVariantSet = {},
                oVariantSetData = {};
            oVariantSet = that._oVariantSetMap.get(sVariantSetKey);
            // variant set object was instantiated -> serialize
            oVariantSetData = oVariantSet._serialize();
            that._oAdapterContainer.setItemValue(sVariantSetKey, clone(oVariantSetData));
        });
        aDiff = this._aLoadedVariantSetKeys.filter(function (sVariantSetKey) {return !(aVariantSetKeys.indexOf(sVariantSetKey) > -1); });
        aDiff.forEach(function (sVariantSetKey) {
            that._oAdapterContainer.delItem(sVariantSetKey);
        });
    };

    /**
     * Deletes a variant set from the container.
     * In case the variant set does not exist nothing happens.
     * @param {string} sVariantSetKey
     *            variant set key
     *
     * @public
     * @since 1.18.0
     */
    // TODO check if deleting a non-existing variant set goes through
    sap.ushell.services.PersonalizationContainer.prototype.delVariantSet = function (sVariantSetKey) {
        var sPrefixedVariantSetKey = "";

        sPrefixedVariantSetKey = sVARIANT_PREFIX + sVariantSetKey;
        this._oVariantSetMap.remove(sPrefixedVariantSetKey);
        return this._oAdapterContainer.delItem(sPrefixedVariantSetKey);
    };



    // -----------------------
    // ------ Container ------
    // -----------------------
    /**
     * To be called by the personalization service getContainer method.
     *
     * @class The container is the anchor object of the unified shell
     *        personalization in container mode.
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.ContextContainer = function (oService, oAdapter,
            sContainerKey, oScope, oComponent) {
        this._oService = oService;
        this._sContainerKey = sContainerKey;
        this._oAdapterContainer = {};
        this._oScope = oScope || rectifyScope(oScope);
        this._aLoadedKeys = [];
        this._oUnmodifiableContainer = undefined;
        var sAppName;

        if (!(oComponent instanceof sap.ui.core.UIComponent) && oComponent !== undefined) {
            throw new Error("oComponent passed must be a UI5 Component or must be undefined");
        }

        if (oComponent && oComponent.getMetadata && oComponent.getMetadata().getLibraryName) {
            sAppName = oComponent.getMetadata().getLibraryName();
        }

        this.clear();
        if (!this._sContainerKey || typeof this._sContainerKey !== "string") {
            throw new sap.ushell.utils.Error("Invalid container key: sap.ushell.services.Personalization");
        }
        this._oAdapterContainer = oAdapter.getAdapterContainer(this._sContainerKey, this._oScope,
            sAppName);
        return this;
    };

    /**
     * return the validity of this container
     * @deprecated only for testing!
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.ContextContainer.prototype.getValidity = function () {
        return this._oScope.validity;
    };

    /**
     * clears the local copy data of this container
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.ContextContainer.prototype.clear = function () {
        // resets all member variables of the personalization container
        this._oItemMap = {};
        this._aLoadedItemKeys = [];
        this._clear = true;
        this._oItemMap = new sap.ushell.utils.Map();
    };


    /**
    * (Re)loads the current container data from the underlying storage asynchronously.
    * The current local data is discarded.
    *
    * Returns a promise for the load operation.
    * If another save/load/delete operation is not completed, the  operation may fail!
    * (wait for the other promise).
    *
    * Synchronous read and write operations before the load is done have undefined
    * effects.
    *
    * @returns {object}
    *          Promise object
    *
    * @public
    * @since 1.22.0
    */
    sap.ushell.services.Personalization.ContextContainer.prototype.load = function () {
        var oDeferred = {},
            oPrior,
            that = this;

        oDeferred = new jQuery.Deferred();
        if (!this._sContainerKey) {
            throw new sap.ushell.utils.Error("Invalid container key: sap.ushell.services.Personalization");
        }
        // delete local data
        this.clear();
        oPrior = this._oService._pendingContainerOperations_flushAddNext(this._sContainerKey, oDeferred);
        // get adapter container & load
        oPrior.always(function () {
            that._oAdapterContainer.load().fail(function () {
                // TODO
                oDeferred.reject();
            }).done(function () {
                that._copyFromAdapter();
                if (that._isExpired()) {
                    that.clear();
                }
                oDeferred.resolve();
            });
        });
        return oDeferred.promise();
    };

    // copy data from adapter to local storage
    sap.ushell.services.Personalization.ContextContainer.prototype._copyFromAdapter = function () {
        var that = this,
            aAllKeys;
        aAllKeys = that._oAdapterContainer.getItemKeys().splice(0);
        aAllKeys.forEach(function (sItemKey) {
            that._oItemMap.put(sItemKey, JSON.stringify(that._oAdapterContainer.getItemValue(sItemKey)));
        });
        this._aLoadedItemKeys = that._oItemMap.keys().splice(0);
    };


    sap.ushell.services.Personalization.ContextContainer.prototype._isExpired = function () {
        var oFormatter,
            sTimestampExpire,
            sTimestampNow;
        if (this.getValidity() === Infinity || this.getValidity() === 0) {
            return false;
        }
        sTimestampExpire = this._getItemValueInternal(sADMIN_PREFIX, sITEMKEY_EXPIRE);
        oFormatter = sap.ui.core.format.DateFormat.getDateInstance({ pattern : sABAPTIMESTAMPFORMAT});
        sTimestampNow = oFormatter.format(this._getNow(), true);
        return sTimestampExpire && sTimestampNow > sTimestampExpire;
    };

    sap.ushell.services.Personalization.ContextContainer.prototype._getNow = function () {
        return new Date();
    };

    sap.ushell.services.Personalization.ContextContainer.prototype._copyToAdapterUpdatingValidity = function () {
        var aItemKeys = [],
            aDiff = [],
            that = this,
            oNow,
            oFormatter,
            sTimestampExpire,
            sTimestampStorage;
        if (this._clear) {
            aItemKeys = this._oAdapterContainer.getItemKeys().splice(0);
            aItemKeys.forEach(function (sItemKey) {
                that._oAdapterContainer.delItem(sItemKey);
            });
            this._clear = false;
        }
        if (this.getValidity() === Infinity || this.getValidity() === 0) {
            this._delItemInternal(sADMIN_PREFIX, sITEMKEY_SCOPE);
            this._delItemInternal(sADMIN_PREFIX, sITEMKEY_EXPIRE);
            this._delItemInternal(sADMIN_PREFIX, sITEMKEY_STORAGE);
        } else {
            oFormatter = sap.ui.core.format.DateFormat.getDateInstance({ pattern : sABAPTIMESTAMPFORMAT});
            oNow = this._getNow();
            sTimestampStorage = oFormatter.format(oNow, true); // true UTC times !
            sTimestampExpire = oFormatter.format(new Date(oNow.getTime() + this.getValidity() * 60000), /*UTC!*/ true);
            this._setItemValueInternal(sADMIN_PREFIX, sITEMKEY_SCOPE, this._oScope);
            this._setItemValueInternal(sADMIN_PREFIX, sITEMKEY_EXPIRE, sTimestampExpire);
            this._setItemValueInternal(sADMIN_PREFIX, sITEMKEY_STORAGE, sTimestampStorage);
        }
        aItemKeys = this._oItemMap.keys();
        aItemKeys.forEach(function (sItemKey) {
            that._oAdapterContainer.setItemValue(sItemKey, cloneToObject(that._oItemMap.get(sItemKey)));
        });
        aDiff = this._aLoadedItemKeys.filter(function (sItemKey) {return !(aItemKeys.indexOf(sItemKey) > -1); });
        aDiff.forEach(function (sItemKey) {
            that._oAdapterContainer.delItem(sItemKey);
        });
    };
    // -- common interface --
    /**
     * Attempts to save the current container data at the underlying storage asynchronously.
     * The current state is serialized.
     * @returns {object}
     *             Promise object
     *
     * If another save/load/delete operation is not completed, the  operation may fail!
     * (wait for the other promise).
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.ContextContainer.prototype.save = function () {
        // async
        var oSaveDeferred,
            oPrior,
            that = this;
        this._copyToAdapterUpdatingValidity();
        oSaveDeferred = new jQuery.Deferred();
        oPrior = this._oService._pendingContainerOperations_cancelAddNext(this._sContainerKey, oSaveDeferred);
        oPrior.always(function () {
            try {
                that._oAdapterContainer.save() // promise
                    .fail(function () { oSaveDeferred.reject(); })
                    .done(function () { oSaveDeferred.resolve(); });
            } catch (e) {
                oSaveDeferred.reject();
            }
        });
        return oSaveDeferred.promise();
    };

    /**
     * Save the current container data at the underlying storage asynchronously at the earlies
     * nDelayInMilliseconds seconds before.
     * The current state is serialized.
     *
     * @returns {object}
     *             Promise object
     *
     * The operation may wait for completion of another pending operation.
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.ContextContainer.prototype.saveDeferred = function (nDelayInMilliseconds) {
        // async
        var oSaveDeferred,
            oPrior,
            that = this;


        this._copyToAdapterUpdatingValidity();
        oSaveDeferred = new jQuery.Deferred();
        oPrior = this._oService._pendingContainerOperations_cancelAddNext(this._sContainerKey, oSaveDeferred);

        function fnDelayedSave() {
            oPrior.always(function () {
                try {
                    that._oAdapterContainer.save() // promise
                        .fail(function () { oSaveDeferred.reject(); })
                        .done(function () { oSaveDeferred.resolve(); });
                } catch (e) {
                    oSaveDeferred.reject();
                }
            });
        }

        oSaveDeferred._sapFnSave = fnDelayedSave;
        oSaveDeferred._sapTimeoutId = setTimeout(fnDelayedSave, nDelayInMilliseconds);
        // we want to delay at least 200 ms,
        return oSaveDeferred.promise();
    };

    /**
     * flush all pending request;
     * The result of the promise may reflect the last pending operation in the queue
     * @returns {object} promise
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.ContextContainer.prototype.flush = function () {
        // async
        var oSaveDeferred,
            oPrior;
        this._copyToAdapterUpdatingValidity();
        oSaveDeferred = new jQuery.Deferred();
        oPrior = this._oService._pendingContainerOperations_flushAddNext(this._sContainerKey, oSaveDeferred);
        oPrior.fail(function () { oSaveDeferred.reject(); })
              .done(function () { oSaveDeferred.resolve(); });
        return oSaveDeferred.promise();
    };

    // -- item interface --
    /**
     * Returns an array with the keys of direct items in the container.
     * @returns {array}
     *             item keys
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.ContextContainer.prototype.getItemKeys = function () {
        // return a list of the (prefix stripped)  "Item" keys.
        var aFilteredTrueItemKeys = this._oItemMap.keys().filter(function (s) {
                return s.indexOf(sITEM_PREFIX) === 0;
                // match at first character -> index = 0 -> true -> keep
                // match inside the string -> index > 0 -> false -> filter out
                // no match -> index = -1 -> false -> filter out
            });
        return aFilteredTrueItemKeys.map(function (sEntry) {
            return sEntry.replace(sITEM_PREFIX, "", "");
        });
    };

    /**
     * Returns an array with all internal  keys of direct items in the container.
     * @returns {array}
     *             item keys
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.ContextContainer.prototype._getInternalKeys = function () {
        return this._oItemMap.keys().splice(0);
    };
    /**
     * Returns the value for a direct item from the container.
     * (Value semantics, new copy is returned)
     * @param {string} sItemKey
     *            item key
     * @returns {object}
     *            item value (JSON object). In case the container does not contain a direct item with this key
     * <code>undefined</code> is returned.
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.ContextContainer.prototype.getItemValue = function (sItemKey) {
        return this._getItemValueInternal(sITEM_PREFIX, sItemKey);
    };

    sap.ushell.services.Personalization.ContextContainer.prototype._getItemValueInternal = function (sPrefix, sItemKey) {
        if (typeof sItemKey !== "string" || typeof sPrefix !== "string") {
            return undefined;
        }
        return cloneToObject(this._oItemMap.get(sPrefix + sItemKey));
    };
    /**
     * Checks if a specific direct item is contained in the container.
     * @param {string} sItemKey
     *            item key
     * @returns {boolean}
     *            <tt>true</tt> if the container contains a direct item with the key
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.ContextContainer.prototype.containsItem = function (sItemKey) {
        if (typeof sItemKey !== "string") {
            return undefined;
        }
        return this._oItemMap.containsKey(sITEM_PREFIX + sItemKey);
    };

    /**
     * Sets the value of a direct item in the container.
     * In case the item is already existing its value is overwritten. In case it is not
     * existing a new item with this key and value is created.
     * The value is serialized during set
     * @param {string} sItemKey
     *            item key
     *            The string length is restricted to 40 characters
     * @param {object} sItemValue
     *            item value (JSON object)
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.ContextContainer.prototype.setItemValue = function (sItemKey, oItemValue) {
        this._setItemValueInternal(sITEM_PREFIX, sItemKey, oItemValue);
    };



    sap.ushell.services.Personalization.ContextContainer.prototype._setItemValueInternal = function (sItemPrefix, sItemKey, oItemValue) {
        if (typeof sItemKey !== "string" || typeof sItemPrefix !== "string") {
            throw new sap.ushell.utils.Error("Parameter value of sItemKey or sItemValue is not a string: sap.ushell.services.Personalization");
        }
        if (sItemKey.length > 40) {
            jQuery.sap.log.error("Personalization Service item key/variant set name (\"" + sItemKey + "\") should be less than 40 characters [current :" + sItemKey.length + "]");
        }
        this._oItemMap.put(sItemPrefix + sItemKey, JSON.stringify(oItemValue));
    };

    /**
     * Deletes a direct item from the container.
     * In case the item does not exist, nothing happens.
     * @param {string} sItemKey
     *            item key
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.ContextContainer.prototype.delItem = function (sItemKey) {
        this._delItemInternal(sITEM_PREFIX, sItemKey);
    };

    sap.ushell.services.Personalization.ContextContainer.prototype._delItemInternal = function (sPrefix, sItemKey) {
        if (typeof sItemKey !== "string") {
            return undefined;
        }
        if (typeof sPrefix !== "string") {
            return undefined;
        }
        this._oItemMap.remove(sPrefix + sItemKey);
    };

    /**
     * return the container key as a string variable
     * @returns {string} the container key
     * @public
     * @since 1.28.0
     */
    sap.ushell.services.Personalization.ContextContainer.prototype.getKey = function () {
        return this._sContainerKey.substring(sCONTAINER_PREFIX.length);
    };


    /**
     * Return an instance unmodifiable container instance. There is one instance of this wrapper
     * per container. It will permit all read accesses to the container, but block all
     * modifying accesses.
     *
     * @returns {object}
     *      unmodifiable wrapper instance
     *
     * @public
     * @since 1.28.0
     */
    sap.ushell.services.Personalization.ContextContainer.prototype.getUnmodifiableContainer = function () {
        var that = this;

        if (!this._oUnmodifiableContainer) {
            this._oUnmodifiableContainer = (function () {
                var oUnmodifiableContainer = {};

                // blocked functions
                [ "clear",
                    "delItem",
                    "flush",
                    "load",
                    "save",
                    "saveDeferred",
                    "setItemValue" ].forEach(function (sFunctionName) {
                    oUnmodifiableContainer[sFunctionName] = function (sName) {
                        throw new sap.ushell.utils.Error("Function " + sName + " can't be called on unmodifiable container",
                            "sap.ushell.services.Personalization.ContextContainer");
                    }.bind(undefined, sFunctionName);
                });

                // permitted functions
                [ "containsItem",
                    "getItemKeys",
                    "getItemValue",
                    "getUnmodifiableContainer",
                    "getValidity" ].forEach(function (sFunctionName) {
                    if (that[sFunctionName]) {
                        oUnmodifiableContainer[sFunctionName] = that[sFunctionName].bind(that);
                    }
                });

                return oUnmodifiableContainer;
            }());
        }

        return this._oUnmodifiableContainer;
    };


    /** VariantSetAdapter
    * amends ContextContainer with functionality to
    *
    * Example: An application has two types of variants.
    * Variant type 1 contains filter values for a query, which are stored in item 1 of
    * the variant, and personalization data for a table, which are stored in item 2
    * of the variant.
    * Variant type 2 contains a setting (item 3) that is independent of
    * the filtering and the table settings. It might be used for a different
    * screen than the variants of type 1.
    * In this example you would have 2 variant sets, one for each variant type.
    *
    * @class Wrapper object to expose a variant interface on a
    *        ContextContainer object obtained from the Peronalization service:
    *        <code>
    *        getContainer(...).done( function(oContainer) {
    *           that.oVariantSetContainer = new sap.ushell.services.Personalization.VariantSetAdapater(oContainer);
    *           });
    *        </code>
    *
    * @public
    * @since 1.18.0
    */
    sap.ushell.services.Personalization.VariantSetAdapter = function (oContextContainer) {
        this._oContextContainer = oContextContainer;
    };

    sap.ushell.services.Personalization.VariantSetAdapter.prototype.save = function () {
        return this._oContextContainer.save();
    };

    // -- variant interface --
    /**
     * Returns an array with the keys of the variant sets in the container.
     * @returns {array}
     *             variant set keys
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.Personalization.VariantSetAdapter.prototype.getVariantSetKeys = function () {
        var aPrefixVariantSetKeys = this._oContextContainer._getInternalKeys(),
            aVariantSetKeys = [];
        aVariantSetKeys = aPrefixVariantSetKeys.map(function (sEntry) {
            return sEntry.replace(sVARIANT_PREFIX, "", "");
        });
        return aVariantSetKeys;
    };
    /**
     * Checks if a specific variant set is contained in the container.
     * @param {string} sVariantSetKey
     *            variant set key
     * @returns {boolean}
     *            <tt>true</tt> if the container contains a variant set with the key
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.Personalization.VariantSetAdapter.prototype.containsVariantSet = function (sVariantSetKey) {
        return this.getVariantSetKeys().indexOf(sVariantSetKey) >= 0;
    };

    /**
     * Returns the variant set object from the container.
     * @param {string} sVariantSetKey
     *            variant set key
     *            The string length is restricted to 40 characters
     * @returns {object}
     *            {@link sap.ushell.services.PersonalizationContainerVariantSet}.
     *            In case the container does not contain a variant set with this key
     *            <code>undefined</code> is returned.
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.VariantSetAdapter.prototype.getVariantSet = function (sVariantSetKey) {
        var oVariantSet = this._oContextContainer._getItemValueInternal(sVARIANT_PREFIX, sVariantSetKey);
        if (!oVariantSet) {
            return undefined;
        }
        return new sap.ushell.services.Personalization.VariantSet(sVariantSetKey, this._oContextContainer);
    };
    /**
     * Creates a new variant set in the container.
     * In case a variant set with this key is already existing an exception is thrown.
     * @param {string} sVariantSetKey
     *            variant set key
     * @returns {object}
     *            {@link sap.ushell.services.PersonalizationContainerVariantSet}
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.VariantSetAdapter.prototype.addVariantSet = function (sVariantSetKey) {
        var oEmptyValue = {},
            oVariantSet = {};

        if (this.containsVariantSet(sVariantSetKey)) {
            throw new sap.ushell.utils.Error("Container already contains a variant set with key '"
                            + sVariantSetKey
                            + "': sap.ushell.services.Personalization");
        }
        oEmptyValue = {
            currentVariant : null,
            variants : {}
        };
        this._oContextContainer._setItemValueInternal(sVARIANT_PREFIX, sVariantSetKey,
                oEmptyValue);
        oVariantSet = new sap.ushell.services.Personalization.VariantSet(sVariantSetKey, this._oContextContainer);
        return oVariantSet;
    };

    /**
     * Deletes a variant set from the container.
     * In case the variant set does not exist nothing happens.
     * @param {string} sVariantSetKey
     *            variant set key
     *
     * @public
     * @since 1.22.0
     */
    // TODO check if deleting a non-existing variant set goes through
    sap.ushell.services.Personalization.VariantSetAdapter.prototype.delVariantSet = function (sVariantSetKey) {
        this._oContextContainer._delItemInternal(sVARIANT_PREFIX, sVariantSetKey);
    };


    // --- Variant Set ---
    /**
     * A VariantSet is a class representing a collection of
     * Variants (identified by a key and name)
     * and a member variable indicating the
     * "current variable"
     *
     * When manipulating the underlying data, additional constraints are enforced.
     *
     * To be called by the personalization container.
     *
     * @class The personalization variant set contains variants of personalization data.
     *        It is used in the personalization container mode.
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.VariantSet = function (sVariantSetKey, oContextContainer) {
        var sVariantKey,
            sVariantName,
            oVariantNameMap = new sap.ushell.utils.Map(),
            oVariantMap = new sap.ushell.utils.Map(),
            oVariantData,
            oVariant;
        this._oContextContainer = oContextContainer;
        this._sVariantSetKey = sVariantSetKey;
        this._oVariantSetData = this._oContextContainer._getItemValueInternal(sVARIANT_PREFIX, this._sVariantSetKey);

        if (!Object.prototype.hasOwnProperty.call(this._oVariantSetData, "currentVariant")) {
            throw new sap.ushell.utils.Error("Corrupt variant set data: sap.ushell.services.Personalization");
            // TODO variant set name + container
        }
        if (Object.prototype.hasOwnProperty.call(this._oVariantSetData, "variants")) {
            for (sVariantKey in this._oVariantSetData.variants) {
                if (Object.prototype.hasOwnProperty.call(this._oVariantSetData.variants, sVariantKey)) {
                    sVariantName = this._oVariantSetData.variants[sVariantKey].name;
                    oVariantData = this._oVariantSetData.variants[sVariantKey].variantData;
                    if (oVariantNameMap.containsKey(sVariantName)) {
                        throw new sap.ushell.utils.Error("Variant name already exists: sap.ushell.services.Personalization");
                        // TODO skip? log instead error
                    } else {
                        oVariantNameMap.put(sVariantName, sVariantKey);
                        oVariant = new sap.ushell.services.PersonalizationContainerVariant(sVariantKey,
                                sVariantName, oVariantData);
                        oVariantMap.put(sVariantKey, oVariant);
                    }
                }
            }
        } else {
            throw new sap.ushell.utils.Error("Corrupt variant set data: sap.ushell.services.Personalization");
        }
        return this;
    };

    sap.ushell.services.Personalization.VariantSet.prototype._getVariantSet = function () {
        return this._oVariantSetData;
    };

    sap.ushell.services.Personalization.VariantSet.prototype._serialize = function () {
        this._oContextContainer._setItemValueInternal(sVARIANT_PREFIX, this._sVariantSetKey, this._oVariantSetData);
    };

    /**
     * Returns the current variant key.
     * @returns {string}
     *             current variant key. In case the current variant was never set <code>null</code> is returned.
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.VariantSet.prototype.getCurrentVariantKey = function () {
        return this._getVariantSet().currentVariant;
    };

    /**
     * Sets the current variant key.
     * @param {string} sVariantKey
     *            There is no validity check for the variant key.
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.VariantSet.prototype.setCurrentVariantKey = function (sVariantKey) {
        this._getVariantSet().currentVariant = sVariantKey;
        this._serialize();
    };

    /**
     * Returns an array with the keys of the variants in the variant set.
     * @returns {array}
     *             variant keys
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.VariantSet.prototype.getVariantKeys = function () {
        var oVariantMap = new sap.ushell.utils.Map(),
            oVariantSetData = this._getVariantSet(this._sVariantSetKey),
            sVariantKey;
        if (Object.prototype.hasOwnProperty.call(oVariantSetData, "variants")) {
            for (sVariantKey in oVariantSetData.variants) {
                if (Object.prototype.hasOwnProperty.call(oVariantSetData.variants, sVariantKey)) {
                    oVariantMap.put(sVariantKey, "dummy");
                }
            }
        } else {
            throw new sap.ushell.utils.Error("Corrupt variant set data: sap.ushell.services.Personalization");
        }
        return oVariantMap.keys();
    };

    sap.ushell.services.Personalization.VariantSet.prototype.getVariantNamesAndKeys = function () {
        var oVariantNameMap = new sap.ushell.utils.Map(),
            oVariantMap = new sap.ushell.utils.Map(),
            oVariantSetData = this._getVariantSet(this._sVariantSetKey),
            sVariantKey,
            sVariantName;
        if (Object.prototype.hasOwnProperty.call(oVariantSetData, "variants")) {
            for (sVariantKey in oVariantSetData.variants) {
                if (Object.prototype.hasOwnProperty.call(oVariantSetData.variants, sVariantKey)) {
                    sVariantName = oVariantSetData.variants[sVariantKey].name;
                    // oVariantData = oVariantSetData.variants[sVariantKey].variantData;
                    if (oVariantNameMap.containsKey(sVariantName)) {
                        throw new sap.ushell.utils.Error("Variant name already exists: sap.ushell.services.Personalization");
                        // TODO skip? log instead error
                    } else {
                        oVariantNameMap.put(sVariantName, sVariantKey);
                    }
                    oVariantMap.put(sVariantKey, "dummy");
                }
            }
        } else {
            throw new sap.ushell.utils.Error("Corrupt variant set data: sap.ushell.services.Personalization");
        }
        return oVariantNameMap.entries;
    };

    /**
     * Returns a variant object.
     * @param {string} sVariantKey
     *            variant key
     * @returns {object}
     *            {@link sap.ushell.services.PersonalizationContainerVariant}.
     *            In case the variant set does not contain a variant with this key
     *            <code>undefined</code> is returned.
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.VariantSet.prototype.getVariant = function (sVariantKey) {
        if (typeof sVariantKey !== "string") {
            return undefined;
        }
        var oVariantSetData = this._getVariantSet(this._sVariantSetKey),
            sVariantName,
            oVariant,
            oVariantData;
        if (Object.prototype.hasOwnProperty.call(oVariantSetData, "variants") && Object.prototype.hasOwnProperty.call(oVariantSetData.variants, sVariantKey)) {
            sVariantName = oVariantSetData.variants[sVariantKey].name;
            oVariantData = oVariantSetData.variants[sVariantKey].variantData;
            oVariant = new sap.ushell.services.Personalization.Variant(this,
                                                                        sVariantKey,
                    sVariantName, oVariantData);
            return oVariant;
        }
        return undefined;
    };

    /**
     * Returns the variant key corresponding to a variant name.
     * @param {string} sVariantName
     *            variant name
     * @returns {string}
     *            variant key. In case the variant set does not contain a variant with this name
     *            <code>undefined</code> is returned.
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.VariantSet.prototype.getVariantKeyByName = function (sVariantName) {
        if (typeof sVariantName !== "string") {
            return undefined;
        }
        var oVariantSetData = this._getVariantSet(this._sVariantSetKey),
            sVariantKey;
        if (Object.prototype.hasOwnProperty.call(oVariantSetData, "variants")) {
            for (sVariantKey in oVariantSetData.variants) {
                if (Object.prototype.hasOwnProperty.call(oVariantSetData.variants, sVariantKey)) {
                    if (sVariantName === oVariantSetData.variants[sVariantKey].name) {
                        return sVariantKey;
                    }
                }
            }
        } else {
            throw new sap.ushell.utils.Error("Corrupt variant set data: sap.ushell.services.Personalization");
        }
        return undefined;
    };

    /**
     * Checks if a specific variant is contained in the variant set.
     * @param {string} sVariantKey
     *            variant key
     * @returns {boolean}
     *            <tt>true</tt> if the variant set contains a variant with the key
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.VariantSet.prototype.containsVariant = function (sVariantKey) {
        var oVariantSetData = this._getVariantSet();
        if (typeof sVariantKey !== "string") {
            return undefined;
        }
        return Object.prototype.hasOwnProperty.call(oVariantSetData, "variants") && Object.prototype.hasOwnProperty.call(oVariantSetData.variants, sVariantKey);
    };

    /**
     * Creates a new variant in the variant set.
     * In case a variant with this name is already existing an exception is thrown.
     * @param {string} sVariantSetName
     *            variant set name
     * @returns {object}
     *            {@link sap.ushell.services.PersonalizationContainerVariant}
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.VariantSet.prototype.addVariant = function (sVariantName) {
        var aKeys = [],
            iMaxKey = 0,
            sVariantKey = "",
            oVariant = {};

        aKeys = this.getVariantKeys();
        // generate a new "unique" key not yet present in aKeys
        iMaxKey = parseInt(aKeys.sort(function (a, b) {
            return a - b;
        }).reverse()[0], 10); // get the highest key; in case of an empty
                              // variant set -> NaN
        sVariantKey = isNaN(iMaxKey) ? "0" : (iMaxKey + 1).toString();
            // tested for up to 1 mio variants
        if (aKeys.indexOf(sVariantKey) >= 0) {
            throw new sap.ushell.utils.Error("Variant key '" + sVariantKey
                    + "' already exists in variant set" + this._sVariantSetKey
                    + "': sap.ushell.services.Personalization");
        }
        if (typeof sVariantName !== "string") {
            throw new sap.ushell.utils.Error("Parameter value of sVariantName is not a string: sap.ushell.services.Personalization");
        }
        if (this.getVariantKeyByName(sVariantName) !== undefined) {
            throw new sap.ushell.utils.Error("Variant name '" + sVariantName
                    + "' already exists in variant set '"
                    + this._sVariantSetKey + "' (Old key: '"
                    + this.getVariantKeyByName(sVariantName) + "' New key: '"
                    + sVariantKey + "') ': sap.ushell.services.Personalization");
        }
        oVariant = new sap.ushell.services.Personalization.Variant(
            this,
            sVariantKey,
            sVariantName
        );
        this._getVariantSet(this._sVariantSetKey).variants[sVariantKey] = {
            name : sVariantName,
            variantData : {}
        };
        this._serialize();
        return oVariant;
    };



    /**
     * Deletes a variant from the variant set.
     * In case the variant does not exist nothing happens.
     * @param {string} sVariantKey
     *            variant key
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.VariantSet.prototype.delVariant = function (sVariantKey) {
        var oVariantSetData;
        if (typeof sVariantKey !== "string") {
            return undefined;
        }
        oVariantSetData = this._getVariantSet();
        if (oVariantSetData && oVariantSetData.variants) {
            delete this._oVariantSetData.variants[sVariantKey];
        }
        this._serialize();
    };

    // --- (Deprecated) Variant Set ---
    /**
     * To be called by the personalization container.
     *
     * @class The personalization variant set contains variants of personalization data.
     *        It is used in the personalization container mode.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariantSet = function (sVariantSetKey, oAdapterContainer) {
        var oVariantSetData,
            sVariantKey,
            sVariantName,
            oVariantData,
            oVariant;

        this._sVariantSetKey = sVariantSetKey;
        this._oAdapterContainer = oAdapterContainer;
        this._oVariantNameMap = new sap.ushell.utils.Map();
        this._oVariantMap = new sap.ushell.utils.Map();
        oVariantSetData = clone(this._oAdapterContainer.getItemValue(sVariantSetKey));
        if (oVariantSetData.hasOwnProperty("currentVariant")) {
            this._sCurrentVariantKey = oVariantSetData.currentVariant;
        } else {
            throw new sap.ushell.utils.Error("Corrupt variant set data: sap.ushell.services.Personalization");
            // TODO variant set name + container
        }
        if (oVariantSetData.hasOwnProperty("variants")) {
            for (sVariantKey in oVariantSetData.variants) {
                if (oVariantSetData.variants.hasOwnProperty(sVariantKey)) {
                    sVariantName = oVariantSetData.variants[sVariantKey].name;
                    oVariantData = oVariantSetData.variants[sVariantKey].variantData;
                    if (this._oVariantNameMap.containsKey(sVariantName)) {
                        throw new sap.ushell.utils.Error("Variant name already exists: sap.ushell.services.Personalization");
                        // TODO skip? log instead error
                    } else {
                        this._oVariantNameMap.put(sVariantName, sVariantKey);
                        oVariant = new sap.ushell.services.PersonalizationContainerVariant(sVariantKey,
                                sVariantName, oVariantData);
                        this._oVariantMap.put(sVariantKey, oVariant);
                    }
                }
            }
        } else {
            throw new sap.ushell.utils.Error("Corrupt variant set data: sap.ushell.services.Personalization");
        }
        return this;
    };

    /**
     * Returns the current variant key.
     * @returns {string}
     *             current variant key. In case the current variant was never set <code>null</code> is returned.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariantSet.prototype.getCurrentVariantKey = function () {
        return this._sCurrentVariantKey;
    };

    /**
     * Sets the current variant key.
     * @param {string} sVariantKey
     *            There is no validity check for the variant key.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariantSet.prototype.setCurrentVariantKey = function (sVariantKey) {
        this._sCurrentVariantKey = sVariantKey;
    };

    /**
     * Returns an array with the keys of the variants in the variant set.
     * @returns {array}
     *             variant keys
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariantSet.prototype.getVariantKeys = function () {
        return this._oVariantMap.keys();
    };

    sap.ushell.services.PersonalizationContainerVariantSet.prototype.getVariantNamesAndKeys = function () {
        return JSON.parse(JSON.stringify(this._oVariantNameMap.entries));
    };

    /**
     * Returns a variant object.
     * @param {string} sVariantKey
     *            variant key
     * @returns {object}
     *            {@link sap.ushell.services.PersonalizationContainerVariant}.
     *            In case the variant set does not contain a variant with this key
     *            <code>undefined</code> is returned.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariantSet.prototype.getVariant = function (sVariantKey) {
        if (typeof sVariantKey !== "string") {
            return undefined;
        }
        return this._oVariantMap.get(sVariantKey);
    };

    /**
     * Returns the variant key corresponding to a variant name.
     * @param {string} sVariantName
     *            variant name
     * @returns {object}
     *            variant key. In case the variant set does not contain a variant with this name
     *            <code>undefined</code> is returned.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariantSet.prototype.getVariantKeyByName = function (sVariantName) {
        if (typeof sVariantName !== "string") {
            return undefined;
        }
        return this._oVariantNameMap.get(sVariantName);
    };

    /**
     * Checks if a specific variant is contained in the variant set.
     * @param {string} sVariantKey
     *            variant key
     * @returns {boolean}
     *            <tt>true</tt> if the variant set contains a variant with the key
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariantSet.prototype.containsVariant = function (sVariantKey) {
        if (typeof sVariantKey !== "string") {
            return undefined;
        }
        return this._oVariantMap.containsKey(sVariantKey);
    };

    /**
     * Creates a new variant in the variant set.
     * In case a variant with this name is already existing an exception is thrown.
     * @param {string} sVariantSetName
     *            variant set name
     * @returns {object}
     *            {@link sap.ushell.services.PersonalizationContainerVariant}
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariantSet.prototype.addVariant = function (sVariantName) {
        var iMaxKey = 0,
            sVariantKey = "",
            oVariant = {};

        iMaxKey = parseInt(this._oVariantMap.keys().sort(function (a, b) {
            return a - b;
        }).reverse()[0], 10); // get the highest key; in case of an empty
                              // variant set -> NaN
        sVariantKey = isNaN(iMaxKey) ? "0" : (iMaxKey + 1).toString();
            // tested for up to 1 mio variants
        if (this._oVariantMap.containsKey(sVariantKey)) {
            throw new sap.ushell.utils.Error("Variant key '" + sVariantKey
                    + "' already exists in variant set" + this._sVariantSetKey
                    + "': sap.ushell.services.Personalization");
        }
        if (typeof sVariantName !== "string") {
            throw new sap.ushell.utils.Error("Parameter value of sVariantName is not a string: sap.ushell.services.Personalization");
        }
        if (this._oVariantNameMap.containsKey(sVariantName)) {
            throw new sap.ushell.utils.Error("Variant name '" + sVariantName
                    + "' already exists in variant set '"
                    + this._sVariantSetKey + "' (Old key: '"
                    + this._oVariantNameMap.get(sVariantName) + "' New key: '"
                    + sVariantKey + "') ': sap.ushell.services.Personalization");
        }
        oVariant = new sap.ushell.services.PersonalizationContainerVariant(sVariantKey, sVariantName);
        this._oVariantMap.put(sVariantKey, oVariant);
        this._oVariantNameMap.put(sVariantName, sVariantKey);
        return oVariant;
    };

    sap.ushell.services.PersonalizationContainerVariantSet.prototype._serialize = function () {
        var aVariantKeys = [],
            oVariantSetData = {},
            oVariantsData = {},
            that = this;

        oVariantSetData.currentVariant = this._sCurrentVariantKey;
        aVariantKeys = this.getVariantKeys();
        aVariantKeys.forEach(function (sVariantKey) {
            var oVariant = {};

            oVariant = that._oVariantMap.get(sVariantKey);
            oVariantsData[sVariantKey] = oVariant._serialize();
        });
        oVariantSetData.variants = oVariantsData;
        return oVariantSetData;
    };

    /**
     * Deletes a variant from the variant set.
     * In case the variant does not exist nothing happens.
     * @param {string} sVariantKey
     *            variant key
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariantSet.prototype.delVariant = function (sVariantKey) {
        var oVariant = this._oVariantMap.get(sVariantKey);
        if (oVariant) {
            this._oVariantNameMap.remove(oVariant.getVariantName());
            this._oVariantMap.remove(sVariantKey);
        }
    };


    // --- Variant ---
    /**
     * To be instantiated via Personalization.VariantSet  add / get Variant only
     *
     * @class The personalization variant contains personalization data.
     *        It is used in the personalization container mode.
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.Variant = function (oVariantSet, sVariantKey,
            sVariantName) {
        if (typeof sVariantKey !== "string") {
            throw new sap.ushell.utils.Error("Parameter value of sVariantKey is not a string: sap.ushell.services.Personalization");
        }
        if (typeof sVariantName !== "string") {
            throw new sap.ushell.utils.Error("Parameter value of sVariantName is not a string: sap.ushell.services.Personalization");
        }
        this._oVariantSet = oVariantSet;
        this._sVariantKey = sVariantKey;
        this._sVariantName = sVariantName;
    };

    /**
     * Returns the key of this variant.
     * @returns {string}
     *             variant key.
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.Variant.prototype.getVariantKey = function () {
        return this._sVariantKey;
    };

    /**
     * Returns the name of this variant.
     * @returns {string}
     *             variant name.
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.Variant.prototype.getVariantName = function () {
        return this._sVariantName;
    };

    /**
     * Sets the name of the variant.
     *
     * In case a variant with <code>sVariantName</code> is already existing in the corresponding variant set an exception is thrown.
     *
     * @param {string} sVariantName
     *          variant name
     *
     * @public
     * @since 1.24.0
     */
    sap.ushell.services.Personalization.Variant.prototype.setVariantName = function (sVariantName) {
        var oVariantSetData = this._oVariantSet._getVariantSet(),
            oVariantData;

        if (typeof sVariantName !== "string") {
            throw new sap.ushell.utils.Error("Parameter value of sVariantName is not a string: sap.ushell.services.Personalization");
        }
        if (this._oVariantSet.getVariantKeyByName(sVariantName) !== undefined) {
            throw new sap.ushell.utils.Error("Variant with name '" + sVariantName
                    + "' already exists in variant set '"
                    + this._oVariantSet._sVariantSetKey
                    + "': sap.ushell.services.Personalization");
        }

        if (Object.prototype.hasOwnProperty.call(oVariantSetData, "variants") && Object.prototype.hasOwnProperty.call(oVariantSetData.variants, this._sVariantKey)) {
            oVariantData = oVariantSetData.variants[this._sVariantKey];
            oVariantData.name = sVariantName;
            this._sVariantName = sVariantName;
            this._oVariantSet._serialize();
        } else {
            throw new sap.ushell.utils.Error("Variant does not longer exist");
        }
    };

    /**
     * Returns the value for an item in this variant.
     * @param {string} sItemKey
     *            item key
     * @returns {object}
     *            item value (JSON object). In case the variant does not contain an item with this key
     *            <code>undefined</code> is returned.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.Personalization.Variant.prototype.getItemValue = function (sItemKey) {
        if (typeof sItemKey !== "string") {
            return undefined;
        }
        var vd = this._oVariantSet._getVariantSet().variants[this._sVariantKey].variantData;
        return Object.prototype.hasOwnProperty.call(vd, sItemKey) && clone(vd[sItemKey]);
    };

    /**
     * Sets the value for an item in this variant.
     * @param {string} sItemKey
     *            item key
     * @param {object}
     *            item value (JSON object)
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.Personalization.Variant.prototype.setItemValue = function (sItemKey, oItemValue) {
        if (typeof sItemKey !== "string") {
            throw new sap.ushell.utils.Error("Parameter value of sItemKey is not a string: sap.ushell.services.Personalization");
        }
        var vd,
            variant = this._oVariantSet._getVariantSet().variants && this._oVariantSet._getVariantSet().variants[this._sVariantKey];
        if (!variant) {
            throw new sap.ushell.utils.Error("Variant does not longer exist");
        }
        if (!variant.variantData) {
            variant.variantData = {};
        }
        vd = variant.variantData;
        vd[sItemKey] = clone(oItemValue);
        this._oVariantSet._serialize();
    };

    /**
     * Checks if a specific item is contained in this variant.
     * @param {string} sItemKey
     *            item key
     * @returns {boolean}
     *            <tt>true</tt> if the variant contains an item with the key
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.Personalization.Variant.prototype.containsItem = function (sItemKey) {
        if (typeof sItemKey !== "string") {
            return undefined;
        }
        var vd = this.oAccess.variantSet._getVariantSet().variants[this._sVariantKey].variantData;
        return Object.prototype.hasOwnProperty.call(vd, sItemKey);
    };

    /**
     * Returns an array with the keys of all items in this variant.
     * @returns {array}
     *            item keys
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.Variant.prototype.getItemKeys = function () {
        var vd = this._oVariantSet._getVariantSet().variants[this._sVariantKey].variantData,
            sItemKey,
            oItemKeys = [];
        for (sItemKey in vd) {
            if (Object.prototype.hasOwnProperty.call(vd, sItemKey)) {
                oItemKeys.push(sItemKey);
            }
        }
        oItemKeys.sort();
        return oItemKeys;
    };

    /**
     * Deletes an item from this variant.
     * In case the item does not exist, nothing happens.
     * @param {string} sItemKey
     *            item key
     *
     * @public
     * @since 1.22.0
     */
    sap.ushell.services.Personalization.Variant.prototype.delItem = function (sItemKey) {
        if (typeof sItemKey !== "string") {
            return undefined;
        }
        var vd = this.oVariantSet._getVariantSet().variants[this._sVariantKey].variantData;
        delete vd[sItemKey];
        this.oVariantSet._serialize();
    };


    // --- Variant ---
    /**
     * To be called by the personalization variant set.
     *
     * @class The personalization variant contains personalization data.
     *        It is used in the personalization container mode.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariant = function (sVariantKey,
            sVariantName, oVariantData) {
        if (typeof sVariantKey !== "string") {
            throw new sap.ushell.utils.Error("Parameter value of sVariantKey is not a string: sap.ushell.services.Personalization");
        }
        if (typeof sVariantName !== "string") {
            throw new sap.ushell.utils.Error("Parameter value of sVariantName is not a string: sap.ushell.services.Personalization");
        }
        if (oVariantData && typeof oVariantData !== "object") {
            throw new sap.ushell.utils.Error("Parameter value of sVariantName is not a string: sap.ushell.services.Personalization");
        }
        this._oVariantKey = sVariantKey;
        this._oVariantName = sVariantName;
        this._oItemMap = new sap.ushell.utils.Map();
        this._oItemMap.entries = oVariantData || {}; // check if oVariantData
        // is a JSON object
    };

    /**
     * Returns the key of this variant.
     * @returns {string}
     *             variant key.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariant.prototype.getVariantKey = function () {
        return this._oVariantKey;
    };

    /**
     * Returns the name of this variant.
     * @returns {string}
     *             variant name.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariant.prototype.getVariantName = function () {
        return this._oVariantName;
    };

    /**
     * Returns the value for an item in this variant.
     * @param {string} sItemKey
     *            item key
     * @returns {object}
     *            item value (JSON object). In case the variant does not contain an item with this key
     *            <code>undefined</code> is returned.
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariant.prototype.getItemValue = function (sItemKey) {
        if (typeof sItemKey !== "string") {
            return undefined;
        }
        return this._oItemMap.get(sItemKey);
    };

    /**
     * Sets the value for an item in this variant.
     * @param {string} sItemKey
     *            item key
     * @param {object}
     *            item value (JSON object)
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariant.prototype.setItemValue = function (sItemKey, oItemValue) {
        if (typeof sItemKey !== "string") {
            throw new sap.ushell.utils.Error("Parameter value of sItemKey is not a string: sap.ushell.services.Personalization");
        }
        return this._oItemMap.put(sItemKey, oItemValue);
    };

    /**
     * Checks if a specific item is contained in this variant.
     * @param {string} sItemKey
     *            item key
     * @returns {boolean}
     *            <tt>true</tt> if the variant contains an item with the key
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariant.prototype.containsItem = function (sItemKey) {
        if (typeof sItemKey !== "string") {
            return undefined;
        }
        return this._oItemMap.containsKey(sItemKey);
    };

    /**
     * Returns an array with the keys of all items in this variant.
     * @returns {array}
     *            item keys
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariant.prototype.getItemKeys = function () {
        return this._oItemMap.keys();
    };

    /**
     * Deletes an item from this variant.
     * In case the item does not exist, nothing happens.
     * @param {string} sItemKey
     *            item key
     *
     * @public
     * @since 1.18.0
     */
    sap.ushell.services.PersonalizationContainerVariant.prototype.delItem = function (sItemKey) {
        if (typeof sItemKey !== "string") {
            return undefined;
        }
        return this._oItemMap.remove(sItemKey);
    };

    sap.ushell.services.PersonalizationContainerVariant.prototype._serialize = function () {
        var aItemKeys = [],
            oVariantData = {},
            oItemsData = {},
            that = this;

        oVariantData.name = this.getVariantName();
        aItemKeys = this._oItemMap.keys();
        aItemKeys.forEach(function (sItemKey) {
            oItemsData[sItemKey] = that.getItemValue(sItemKey);
        });
        oVariantData.variantData = oItemsData;
        return oVariantData;
    };


    /**
     * Container for storage with window validity, data is stored in sap.ushell.services.Personalization.WindowAdapter.prototype.data
     * @param {string} sServiceInstance
     *            ignored
     * @param {object} oBackendAdapter
     *            BackendAdapter -> may be undefined
     *
     * @private
     */
    sap.ushell.services.Personalization.WindowAdapter = function (sServiceInstance, oBackendAdapter) {
        this._oBackendAdapter = oBackendAdapter;
        if (!sap.ushell.services.Personalization.WindowAdapter.prototype.data) {
            sap.ushell.services.Personalization.WindowAdapter.prototype.data = {};
        }
    };


    sap.ushell.services.Personalization.WindowAdapter.prototype.getAdapterContainer = function (sContainerKey, oScope, sAppName) {
        var oBackendContainer = this._oBackendAdapter && this._oBackendAdapter.getAdapterContainer(sContainerKey, oScope, sAppName);
        return new sap.ushell.services.Personalization.WindowAdapterContainer(sContainerKey, oScope, oBackendContainer);
    };

    sap.ushell.services.Personalization.WindowAdapter.prototype.delAdapterContainer = function (sContainerKey, oScope) {
        var oDeferred = new jQuery.Deferred();
        delete sap.ushell.services.Personalization.WindowAdapter.prototype.data[sContainerKey];
        if (this._oBackendAdapter) {
            this._oBackendAdapter.delAdapterContainer(sContainerKey, oScope).done(function () {
                oDeferred.resolve();
            }).fail(function (sMsg) {
                oDeferred.reject(sMsg);
            });
        } else {
            oDeferred.resolve();
        }
        return oDeferred.promise();
    };


    // --- Container for storage with window validity, data is stored in sap.ushell.services.Personalization.WindowValidityPersistence  ---
    sap.ushell.services.Personalization.WindowAdapterContainer = function (sContainerKey, oScope, oBackendContainer) {
        this._oBackendContainer = oBackendContainer;
        this._oItemMap = new sap.ushell.utils.Map();
        this._sContainerKey = sContainerKey;
    };

    function clear(oContainer) {
        var i,
            keys = oContainer.getItemKeys();
        for (i = 0; i < keys.length; i = i + 1) {
            oContainer.delItem(keys[i]);
        }
    }

    sap.ushell.services.Personalization.WindowAdapterContainer.prototype.load = function () {
        var oDeferred = new jQuery.Deferred(),
            i,
            keys,
            that = this;
        //Check if found in window object
        if (sap.ushell.services.Personalization.WindowAdapter.prototype.data[this._sContainerKey]) {
            //load data from window
            this._oItemMap.entries = clone(sap.ushell.services.Personalization.WindowAdapter.prototype.data[this._sContainerKey]);

            if (this._oBackendContainer) {
                clear(this._oBackendContainer);

                //Copy all items to the backend container
                keys = this.getItemKeys();
                for (i = 0; i < keys.length; i = i + 1) {
                    this._oBackendContainer.setItemValue(keys[i], this._oItemMap.get(keys[i]));
                }
            }
            oDeferred.resolve();
        } else {
         // attempt load data from front-end server
            if (this._oBackendContainer) {
                this._oBackendContainer.load().done(function () {
                    //copy received data from oAdapter into this._oItemMap.entries
                    keys = that._oBackendContainer.getItemKeys();
                    for (i = 0; i < keys.length; i = i + 1) {
                        that.setItemValue(keys[i], that._oBackendContainer.getItemValue(keys[i]));
                    }
                    //store immediately in the window variable so that the second load is satisfied from the window
                    sap.ushell.services.Personalization.WindowAdapter.prototype.data[that._sContainerKey] = clone(that._oItemMap.entries);
                    oDeferred.resolve();
                }).fail(function (sMsg) {
                    oDeferred.reject(sMsg);
                });
            } else {
                sap.ushell.services.Personalization.WindowAdapter.prototype.data[this._sContainerKey] = {};
                oDeferred.resolve();
            }
        }
        return oDeferred.promise();
    };

    sap.ushell.services.Personalization.WindowAdapterContainer.prototype.save = function () {
        var oDeferred = new jQuery.Deferred();
        sap.ushell.services.Personalization.WindowAdapter.prototype.data[this._sContainerKey] = clone(this._oItemMap.entries);
        if (this._oBackendContainer) {
            this._oBackendContainer.save().done(function () {
                oDeferred.resolve();
            }).fail(function (sMsg) {
                oDeferred.reject(sMsg);
            });
        } else {
            oDeferred.resolve();
        }
        return oDeferred.promise();
    };

    sap.ushell.services.Personalization.WindowAdapterContainer.prototype.getItemKeys = function () {
        return this._oItemMap.keys();
    };

    sap.ushell.services.Personalization.WindowAdapterContainer.prototype.containsItem = function (sItemKey) {
        this._oItemMap.containsKey(sItemKey);
    };

    sap.ushell.services.Personalization.WindowAdapterContainer.prototype.getItemValue = function (sItemKey) {
        return this._oItemMap.get(sItemKey);
    };

    sap.ushell.services.Personalization.WindowAdapterContainer.prototype.setItemValue = function (sItemKey, oItemValue) {
        this._oItemMap.put(sItemKey, oItemValue);
        if (this._oBackendContainer) {
            this._oBackendContainer.setItemValue(sItemKey, oItemValue);
        }
    };

    sap.ushell.services.Personalization.WindowAdapterContainer.prototype.delItem = function (sItemKey) {
        this._oItemMap.remove(sItemKey);
        if (this._oBackendContainer) {
            this._oBackendContainer.delItem(sItemKey);
        }
    };

}());

}; // end of sap/ushell/services/Personalization.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.UserRecents') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview The Unified Shell's user activity service.
 *
 * @version 1.32.6
 */
(function () {
    "use strict";
    /*jslint nomen:true */
    /*global jQuery, sap, console */
    jQuery.sap.declare("sap.ushell.services.UserRecents");
    

    /**
     * This method is just for internal use within this service.
     * Constructs a new instance of a recent list, used for recent searches and recent apps.
     *
     * @param {integer} iMaxLength
     *     maximum number of entries in the list
     * @param {function} fnEquals
     *     used to decide whether an entry should be updated instead of inserting a new one
     * @param {function} fnCompare
     *     uesed to sort the list
     * @param {function} fnLoad
     *     called to load recent list from backend
     * @param {function} fnSave
     *     called to save current list into backend
     *
     * @constructor
     */
    function RecentList(iMaxLength, fnEquals, fnCompare, fnLoad, fnSave) {
        var aRecents = [],

        // private functions
            fnUpdateIfAlreadyIn = function (oItem, iTimestampNow) {
                return aRecents.some(function (oRecentEntry) {
                    var bFound;
                    if (fnEquals(oRecentEntry.oItem, oItem)) {
                        oRecentEntry.oItem = oItem;
                        oRecentEntry.iTimestamp = iTimestampNow;
                        oRecentEntry.iCount = oRecentEntry.iCount + 1;
                        bFound = true;
                    } else {
                        bFound = false;
                    }
                    return bFound;
                });
            },

            fnInsertNew = function (oItem, iTimestampNow) {
                var oNewEntry = {oItem: oItem,
                        iTimestamp: iTimestampNow,
                        iCount: 1};
                if (aRecents.length === iMaxLength) {
                    aRecents.sort(fnCompare);
                    aRecents.pop();
                }
                aRecents.push(oNewEntry);
            };

        // public interface
        this.newItem = function (oItem) {
            var iTimestampNow = +new Date(),  // timestamp: thanks to http://stackoverflow.com/a/221297
                bAlreadyIn;
            fnLoad().done(function (aLoadedRecents) {
                aRecents = aLoadedRecents || [];

                bAlreadyIn = fnUpdateIfAlreadyIn(oItem, iTimestampNow);
                if (!bAlreadyIn) {
                    fnInsertNew(oItem, iTimestampNow);
                }
                fnSave(aRecents);
            });
        };

        this.getRecentItems = function () {
            var oDeferred = new jQuery.Deferred();

            fnLoad().done(function (aLoadedRecents) {
                aLoadedRecents = aLoadedRecents || [];
                aLoadedRecents.sort(fnCompare);
                aRecents = aLoadedRecents.slice(0, iMaxLength);
                oDeferred.resolve(jQuery.map(aRecents, function (oRecentEntry) {
                    return oRecentEntry.oItem;
                }));
            });

            return oDeferred.promise();
        };
    }

    /**
     * User action collector counter of user usage of applications according to the URL hash
     *
     * @param {function} fnLoad
     *     called to load current list from backend
     *
     * @param {function} fnSave
     *     called to save current list into backend
     */
    function RecentAppsUsage(fnLoad, fnSave) {

        var oAppsUsageData,
            that = this,
            iMaximumDays = 30;

        /**
         * Initialization of RecentAppsUsage.
         * Called from shell.controller's <code>init</code> function
         * - Loads user personalized data
         * - Defines a new day is the data structure, if needed
         * - Cleans empty hash usage arrays
         * @param currentDate
         */
        this.init = function () {
            var that = this,
                promise,
                currentDay = this.getDayFromDateObj(this.getCurrentDate()),
                bDataLoadedTriggered = false;

            if (that._oInitDeferred === undefined) {
                that._oInitDeferred = jQuery.Deferred();
            }

            // Personalized data not loaded yet
            if (!bDataLoadedTriggered || currentDay !== oAppsUsageData.recentDay) {
                bDataLoadedTriggered = true;

                // Load data
                promise = fnLoad();

                // Load finished successfully
                promise.done(function (data) {

                    // Initialize structure from the loaded data, or define new
                    oAppsUsageData = data || {
                        recentDay : null,
                        recentAppsUsageMap : {}
                    };

                    // Update usage
                    that.calculateInitialUsage(currentDay);
                    that._oInitDeferred.resolve(oAppsUsageData);
                });
                promise.fail(function () {
                    jQuery.sap.log.error("UShell-lib ; RecentAppsUsage ; Load data in Init failed");
                    that._oInitDeferred.reject();
                });

            }
            return this._oInitDeferred.promise();
        };

        // API functions - Begin

        this.calculateInitialUsage = function (currentDay) {
            var that = this;
            // If the current day is different than the recent one -
            // add a new entry (for the current day's usage) to each hash usage array
            if (currentDay != oAppsUsageData.recentDay) {
                this.addNewDay();
                oAppsUsageData.recentDay = currentDay;

                // Remove hash entries that weren't touched lately
                // postpone to not delay main flow
                setTimeout( function(){
                    that.cleanUnusedHashes();
                }, 3000 );

                // Save the data after the "new day" routine
                this.saveAppsUsage(oAppsUsageData);
            }
        };

        /**
         * Records applications usage according to URL hashes
         *  - Check hash validity
         *  - Gets the relevant hash usage array
         *  - Add this usage (increment the value) or create a new array if needed
         *  - Save the data structure
         *  @param hash
         */
        this.addAppUsage = function (hash) {

            // Check hash validity
            if (!sap.ushell.utils.validHash(hash)) {
                return  jQuery.Deferred().
                        reject("Non valid hash").
                        promise();
            }

            var promise = this.init();

            promise.done( function() {
                // Get the data (usage per day) for the given hash
                var aAppUsageArray = oAppsUsageData.recentAppsUsageMap[hash] || [];

                // New app that wasn't opened so far. Insert "1" since this is the first time it is opened
                if (aAppUsageArray.length == 0) {
                    aAppUsageArray[0] = 1;
                } else {
                    // Increment the existing counter of this day for this hash (i.e. the last entry in the array)
                    aAppUsageArray[aAppUsageArray.length - 1] += 1;
                }
                oAppsUsageData.recentAppsUsageMap[hash] = aAppUsageArray;
                that.saveAppsUsage(oAppsUsageData);
            });
            promise.fail( function() {
                jQuery.sap.log.error("Ushell-lib ; addAppUsage ; Initialization falied!");
            });
            return promise;
        };

        /**
         * Summarises and returns the usage per hash and the minimum and maximum values
         */
        this.getAppsUsage = function () {
            var result,
                promise,
                that = this,
                oDeffered = jQuery.Deferred();

            promise = that.init();

            // After initialization - summarize the usage
            promise.done( function () {
                result = that.summarizeUsage();
                oDeffered.resolve(result);
            });
            promise.fail( function () {
                oDeffered.reject("Not initialized yet");
            });
            return oDeffered.promise();
        };

        // API functions - End

        this.summarizeUsage = function () {
            var usageMap = {},
            hash,
            maxUsage,
            minUsage,
            firstHashUsage = true;

            for (hash in oAppsUsageData.recentAppsUsageMap) {
                usageMap[hash] = this.getHashUsageSum(hash);
                if (firstHashUsage) {
                    maxUsage = minUsage = usageMap[hash];
                    firstHashUsage = false;
                } else {
                    if (usageMap[hash] < minUsage) {
                        minUsage = usageMap[hash];
                    } else if (usageMap[hash] > maxUsage) {
                        maxUsage = usageMap[hash];
                    }
                }
            }
            return {usageMap : usageMap, maxUsage : maxUsage, minUsage : minUsage};
        };

        this.addNewDay = function () {
            var hash,
                aAppUsageArray;
            for (hash in oAppsUsageData.recentAppsUsageMap) {
                // Get the array of app/hash usage
                aAppUsageArray = oAppsUsageData.recentAppsUsageMap[hash];

                // Add an item in the Array for the new day
                aAppUsageArray[aAppUsageArray.length] = 0;

                // If the array size is > iMaximumDays, remove the first (oldest) entry
                if (aAppUsageArray.length > iMaximumDays) {
                    aAppUsageArray = aAppUsageArray.shift();
                }
            }
        };

        this.cleanUnusedHashes = function () {
            var usage,
                hash;
            for (hash in oAppsUsageData.recentAppsUsageMap) {
                usage = that.getHashUsageSum(hash);
                if (usage == 0) {
                    delete (oAppsUsageData.recentAppsUsageMap[hash]);
                }
            }
        };

        this.getHashUsageSum = function (hash) {
            var sum = 0,
                dayIndex,
                appUsageArray = oAppsUsageData.recentAppsUsageMap[hash],
                length = appUsageArray.length;

            for (dayIndex = 0; dayIndex < length; dayIndex++) {
                sum  += appUsageArray[dayIndex];
            }
            return sum;
        };

        this.saveAppsUsage = function (obj) {
            var promise = fnSave(obj);
            promise.fail(function () {
                jQuery.sap.log.error("Ushell-lib ; saveAppsUsage ; Save action failed");
            });
            promise.done(function (data) {

            });
            return promise;
        };

        this.getCurrentDate = function () {
            return new Date();
        };

        this.getDayFromDateObj = function (dateObj) {
            return (dateObj.getUTCFullYear() + "/" + (dateObj.getUTCMonth() + 1) + "/" + dateObj.getUTCDate());
        };
    }

    // -------------------------------- RecentAppsUsage - End --------------------------------

    /**
     * @class The Unified Shell's page user recents service. It used for managing recent searches and recently viewed apps.
     *
     * @constructor
     * @see sap.ushell.services.Container#getService
     * @since 1.15.0
     */
    sap.ushell.services.UserRecents = function () {
        var oRecentSearches,
            oRecentApps,
            oAppsUsage,
            oRecentDataSources,
            oPersonalizationService,
            oAppPersonalizer,
            oSearchesPersonalizer,
            oDataSourcePersonalizer,
            oAppsUsagePersonalizer,
            fnLoad,
            fnSave,
            sRecentAppsKey = "RecentApps",
            sAppsUsageKey = "AppsUsage",
            sRecentSearchesKey = "RecentSearches",
            sRecentDataSourcesKey = "RecentDataSources",
            sPersContainer = "sap.ushell.services.UserRecents";

        // BEWARE: constructor code below!

        /**
         * Notification that the given datasources has just been used. Adds the search to the LRU
         * list of datasources.
         *
         * @param {object} oDataSource
         *     the datasource identified by the string parameter <code>objectName.value</code>
         * @returns {object[]}
         *     the updated LRU list
         * @since 1.19.0
         * @public
         */
        this.noticeDataSource = function (oDataSource) {

            //Don't save $$ALL$$
            if ( (oDataSource && oDataSource.objectName && oDataSource.objectName.value && oDataSource.objectName.value.toLowerCase() === "$$all$$") ||
                (oDataSource.objectName && oDataSource.objectName.toLowerCase && oDataSource.objectName.toLowerCase() === "$$all$$")) {

                return;
            }

            oRecentDataSources.newItem(oDataSource);
            return oRecentDataSources.getRecentItems();
        };

        /**
         * Returns the LRU list of datasources.
         *
         * @returns {object[]}
         *     the LRU list
         * @since 1.19.0
         * @public
         */
        this.getRecentDataSources = function () {
            return oRecentDataSources.getRecentItems();
        };

        /**
         * Notification that the given search item has just been used. Adds the search to the LRU
         * list of searches.
         *
         * @param {object} oSearchItem
         *     the searchItem identified by the string parameter <code>sTerm</code>
         * @returns {object[]}
         *     the updated LRU list
         * @since 1.15.0
         * @public
         */
        this.noticeSearch = function (oSearchItem) {
            oRecentSearches.newItem(oSearchItem);
            return oRecentSearches.getRecentItems();
        };

        /**
         * Returns the LRU list of searches.
         *
         * @returns {object[]}
         *     the LRU list
         * @since 1.15.0
         * @public
         */
        this.getRecentSearches = function () {
            return oRecentSearches.getRecentItems();
        };

        /**
         * Notification that the given app has just been used. Adds the app to the LRU list of apps.
         *
         * @param {object} oAppItem
         *     the searchItem identified by the string parameter <code>id</code>
         * @returns {object[]}
         *     the updated LRU list
         * @since 1.15.0
         * @public
         */
        this.noticeApp = function (oAppItem) {
            oRecentApps.newItem(oAppItem);
            return oRecentApps.getRecentItems();
        };

        /**
         * Returns the LRU list of apps.
         *
         * @returns {object[]}
         *     the LRU list
         * @since 1.15.0
         * @public
         */
        this.getRecentApps = function () {
            return oRecentApps.getRecentItems();
        };

        this.initAppsUsage = function () {
            oAppsUsage.init(new Date());
        };

        /**
         * API function for the New VD 1 - user action Collector
         * Increment usage count for the given hash. Currently called on openApp event
         * @param hash
         */
        this.addAppUsage = function (hash) {
            var relevantHash = sap.ushell.utils.getBasicHash(hash);
            oAppsUsage.addAppUsage(relevantHash);
        };

        /**
         * API function for the New VD 1 - user action Collector
         * Returns a map of total usage of all (used) applications, plus the maximum and minimum values.
         *
         * @returns promise object including the relevant data:
         *  In case of success - An object containing usage-per-hash map  and the minimum and maximum values
         *  In case of fail - Error message
         */
        this.getAppsUsage = function () {
            return oAppsUsage.getAppsUsage();
        };

        // constructor code -------------------------------------------------------

        oPersonalizationService = sap.ushell.Container.getService("Personalization");
        try {
            oAppPersonalizer = oPersonalizationService.getPersonalizer({container: sPersContainer, item: sRecentAppsKey});
            oSearchesPersonalizer = oPersonalizationService.getPersonalizer({container: sPersContainer, item: sRecentSearchesKey});
            oDataSourcePersonalizer = oPersonalizationService.getPersonalizer({container: sPersContainer, item: sRecentDataSourcesKey});
            oAppsUsagePersonalizer = oPersonalizationService.getPersonalizer({container: sPersContainer, item: sAppsUsageKey});

        } catch (err) {
            jQuery.sap.log.error("Personalization service does not work:");
            jQuery.sap.log.error(err.name + ": " + err.message);
        }

        fnLoad = function (oPersonalizer) {
            var oPromise,
                oDeferred;
            try {
                oPromise = oPersonalizer.getPersData();
            } catch (err) {
                jQuery.sap.log.error("Personalization service does not work:");
                jQuery.sap.log.error(err.name + ": " + err.message);
                oDeferred = new jQuery.Deferred();
                oDeferred.reject(err);
                oPromise = oDeferred.promise();
            }
            return oPromise;
        };

        fnSave = function (oPersonalizer, aList) {
            var promise;
            try {
                promise = oPersonalizer.setPersData(aList);
            } catch (err) {
                jQuery.sap.log.error("Personalization service does not work:");
                jQuery.sap.log.error(err.name + ": " + err.message);
            }
            return promise;
        };

        oRecentSearches = new RecentList(10, function (x, y) {
            var compare = false;
            if (x.oDataSource && y.oDataSource) {
                if (x.oDataSource.objectName && y.oDataSource.objectName) {
                    compare = ((x.sTerm === y.sTerm) && (x.oDataSource.objectName.value === y.oDataSource.objectName.value));
                }
                if (!x.oDataSource.objectName && !y.oDataSource.objectName) {
                    compare = (x.sTerm === y.sTerm);
                }
            }
            if (!x.oDataSource && !y.oDataSource) {
                compare = (x.sTerm === y.sTerm);
            }
            return compare;
        }, function (x, y) {
            return y.iTimestamp - x.iTimestamp; // youngest first
        },
            fnLoad.bind(this, oSearchesPersonalizer),
            fnSave.bind(this, oSearchesPersonalizer));

        oRecentDataSources = new RecentList(6, function (x, y) {
            if (x.objectName && y.objectName) {
                return x.objectName.value === y.objectName.value;
            }
            return false;
        }, function (x, y) {
            return y.iTimestamp - x.iTimestamp; // youngest first
        },  fnLoad.bind(this, oDataSourcePersonalizer),
            fnSave.bind(this, oDataSourcePersonalizer));


        oRecentApps = new RecentList(6, function (x, y) {
            return x.semanticObject === y.semanticObject && x.action === y.action;
        }, function (x, y) {
            return y.iTimestamp - x.iTimestamp;
        }, fnLoad.bind(this, oAppPersonalizer), fnSave.bind(this, oAppPersonalizer));

        oAppsUsage = new RecentAppsUsage(fnLoad.bind(this, oAppsUsagePersonalizer), fnSave.bind(this, oAppsUsagePersonalizer));
    };

    sap.ushell.services.UserRecents.hasNoAdapter = true;
}());

}; // end of sap/ushell/services/UserRecents.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.ContactSupportButton') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.footerbar.ContactSupportButton.
jQuery.sap.declare("sap.ushell.ui.footerbar.ContactSupportButton");

jQuery.sap.require('sap.m.Button'); // unlisted dependency retained



/**
 * Constructor for a new ui/footerbar/ContactSupportButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Button#constructor sap.m.Button}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/footerbar/CreateTicketButton
 * @extends sap.m.Button
 * @version 1.32.6
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.footerbar.ContactSupportButton
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.Button.extend("sap.ushell.ui.footerbar.ContactSupportButton", { metadata : {

	library : "sap.ushell"
}});


/**
 * Creates a new subclass of class sap.ushell.ui.footerbar.ContactSupportButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.footerbar.ContactSupportButton.extend
 * @function
 */

// Start of sap/ushell/ui/footerbar/ContactSupportButton.js
/*global jQuery, sap*/

(function () {
    "use strict";
    /*global jQuery, sap, window*/

    
    
    jQuery.sap.declare("sap.ushell.ui.footerbar.ContactSupportButton");

    /**
     * ContactSupportButton
     *
     * @name sap.ushell.ui.footerbar.ContactSupportButton
     * @private
     * @since 1.16.0
     */
    sap.ushell.ui.footerbar.ContactSupportButton.prototype.init = function () {
        this.setIcon('sap-icon://email');
        this.setWidth('100%');
        this.setText(sap.ushell.resources.i18n.getText("contactSupportBtn"));
        this.setTooltip(sap.ushell.resources.i18n.getText("contactSupportBtn_tooltip"));
        this.attachPress(this.showContactSupportDialog);
        this.setEnabled();// disables button if shell not initialized
    };

    sap.ushell.ui.footerbar.ContactSupportButton.prototype.showContactSupportDialog = function () {
        jQuery.sap.require("sap.ushell.services.Container");
        jQuery.sap.require("sap.ui.layout.form.SimpleForm");
        jQuery.sap.require("sap.m.TextArea");
        jQuery.sap.require("sap.m.Link");
        jQuery.sap.require("sap.m.Label");
        jQuery.sap.require("sap.m.Text");
        jQuery.sap.require("sap.m.Dialog");
        jQuery.sap.require("sap.m.Button");
        jQuery.sap.require("sap.ushell.UserActivityLog");

        this.translationBundle = sap.ushell.resources.i18n;
        this.oClientContext = sap.ushell.UserActivityLog.getMessageInfo();
        this.oLink = new sap.m.Link({text: this.translationBundle.getText("technicalDataLink")});
        this.oBottomSimpleForm = new sap.ui.layout.form.SimpleForm("bottomForm", {editable: false, content: [this.oLink]});
        this.sendButton = new sap.m.Button("contactSupportSendBtn", {
            text: this.translationBundle.getText("sendBtn"),
            enabled: false,
            press: function () {
                var oSupportTicketService = sap.ushell.Container.getService("SupportTicket"),
                    oText = this.oTextArea.getValue(),
                    oSupportTicketData = {text: oText, clientContext: this.oClientContext},
                    promise = oSupportTicketService.createTicket(oSupportTicketData);

                promise.done(function () {
                    sap.ushell.Container.getService("Message").info(this.translationBundle.getText("supportTicketCreationSuccess"));
                }.bind(this));
                promise.fail(function () {
                    sap.ushell.Container.getService("Message").error(this.translationBundle.getText("supportTicketCreationFailed"));
                }.bind(this));

                this.oDialog.close();
            }.bind(this)
        });
        this.cancelButton = new sap.m.Button("contactSupportCancelBtn", {
            text: this.translationBundle.getText("cancelBtn"),
            press: function () {
                this.oDialog.close();
            }.bind(this)
        });
        this.oTextArea = new sap.m.TextArea("textArea", {
            rows: 7,
            liveChange: function () {
                if (/\S/.test(this.oTextArea.getValue())) {
                    this.sendButton.setEnabled(true);
                } else {
                    this.sendButton.setEnabled(false);
                }
            }.bind(this)
        });

        this.oTopSimpleForm = new sap.ui.layout.form.SimpleForm("topForm", {editable: false, content: [this.oTextArea]});
        this.oDialog = new sap.m.Dialog({
            id: "ContactSupportDialog",
            title: this.translationBundle.getText("contactSupportBtn"),
            contentWidth : "29.6rem",
            leftButton: this.sendButton,
            rightButton: this.cancelButton,
            initialFocus: "textArea",
            afterOpen: function () {
                //Fix ios 7.1 bug in ipad4 where there is a gray box on the screen when you close the keyboards
                jQuery("#textArea").on("focusout", function () {
                    window.scrollTo(0, 0);
                });
            },
            afterClose: function () {
                this.oDialog.destroy();
            }.bind(this)
        }).addStyleClass("sapUshellContactSupportDialog");

        this.oTextArea.setPlaceholder(this.translationBundle.getText("txtAreaPlaceHolderHeader"));
        this.oLink.attachPress(this._embedLoginDetailsInBottomForm.bind(this));
        this.oDialog.addCustomData(new sap.ushell.ui.launchpad.AccessibilityCustomData({
            key: "aria-label",
            value: this.translationBundle.getText("ContactSupportArialLabel"),
            writeToDom: true
        }));
        this.oDialog.addContent(this.oTopSimpleForm);
        this.oDialog.addContent(this.oBottomSimpleForm);
        this.oDialog.open();
    };

    sap.ushell.ui.footerbar.ContactSupportButton.prototype._embedLoginDetailsInBottomForm = function () {
        this.oDialog.removeContent(this.oBottomSimpleForm.getId());
        this.oBottomSimpleForm.destroy();
        var applicationType = "",
            url = "",
            additionalInformation = "",
            aBotomFormContent = [];

        if (this.oClientContext.navigationData.applicationInformation) {
            applicationType = this.oClientContext.navigationData.applicationInformation.applicationType;
            url = this.oClientContext.navigationData.applicationInformation.url;
            additionalInformation = this.oClientContext.navigationData.applicationInformation.additionalInformation;
        }
        aBotomFormContent.push(new sap.m.Text({text: this.translationBundle.getText("loginDetails")}).addStyleClass('sapUshellContactSupportHeaderInfoText'));
        aBotomFormContent.push(new sap.m.Label({text: this.translationBundle.getText("userFld")}));
        aBotomFormContent.push(new sap.m.Text({text: this.oClientContext.userDetails.fullName || ''}));
        aBotomFormContent.push(new sap.m.Label({text: this.translationBundle.getText("serverFld")}));
        aBotomFormContent.push(new sap.m.Text({text: window.location.host }));
        if (this.oClientContext.userDetails.eMail && this.oClientContext.userDetails.eMail !== '') {
            aBotomFormContent.push(new sap.m.Label({text: this.translationBundle.getText("eMailFld")}));
            aBotomFormContent.push(new sap.m.Text({text: this.oClientContext.userDetails.eMail || ''}));
        }
        aBotomFormContent.push(new sap.m.Label({text: this.translationBundle.getText("languageFld")}));
        aBotomFormContent.push(new sap.m.Text({text: this.oClientContext.userDetails.Language || ''}));

        if (this.oClientContext.shellState === "app" || this.oClientContext.shellState === "standalone") {
            //Required to align the following Text under the same column.
            aBotomFormContent.push(new sap.m.Text({text: ''}));
            aBotomFormContent.push(new sap.m.Text({text: this.translationBundle.getText("navigationDataFld")}).addStyleClass('sapUshellContactSupportHeaderInfoText'));
            aBotomFormContent.push(new sap.m.Label({text: this.translationBundle.getText("hashFld")}));
            aBotomFormContent.push(new sap.m.Text({text: this.oClientContext.navigationData.navigationHash || ''}));
            //Required to align the following Text under the same column.
            aBotomFormContent.push(new sap.m.Text({text: ''}));
            aBotomFormContent.push(new sap.m.Text({text: this.translationBundle.getText("applicationInformationFld")}).addStyleClass('sapUshellContactSupportHeaderInfoText'));
            aBotomFormContent.push(new sap.m.Label({text: this.translationBundle.getText("applicationTypeFld")}));
            aBotomFormContent.push(new sap.m.Text({text: applicationType}));
            aBotomFormContent.push(new sap.m.Label({text: this.translationBundle.getText("urlFld")}));
            aBotomFormContent.push(new sap.m.Text({text: url}));
            aBotomFormContent.push(new sap.m.Label({text: this.translationBundle.getText("additionalInfoFld")}));
            aBotomFormContent.push(new sap.m.Text({text: additionalInformation}));
        }
        this.oBottomSimpleForm = new sap.ui.layout.form.SimpleForm('technicalInfoBox', {
            layout: sap.ui.layout.form.SimpleFormLayout.ResponsiveLayout,
            content: aBotomFormContent
        }).addStyleClass("sapUshellTechnicalInfoBox");
        if (sap.ui.Device.os.ios && sap.ui.Device.system.phone) {
            this.oBottomSimpleForm.addStyleClass("sapUshellContactSupportFixWidth");
        }

        var originalAfterRenderSimpleForm = this.oBottomSimpleForm.onAfterRendering;
        this.oBottomSimpleForm.onAfterRendering = function () {
            originalAfterRenderSimpleForm.apply(this, arguments);
            var node = jQuery(this.getDomRef());
            node.attr("tabIndex", 0);
            jQuery.sap.delayedCall(700, node, function () {
                this.focus();
            });
        };

        this.oDialog.addContent(this.oBottomSimpleForm);
    };

    sap.ushell.ui.footerbar.ContactSupportButton.prototype.setEnabled = function (bEnabled) {
        if (!sap.ushell.Container) {
            if (this.getEnabled()) {
                jQuery.sap.log.warning(
                    "Disabling 'Contact Support' button: unified shell container not initialized",
                    null,
                    "sap.ushell.ui.footerbar.ContactSupportButton"
                );
            }
            bEnabled = false;
        }
        sap.m.Button.prototype.setEnabled.call(this, bEnabled);
    };
}());

}; // end of sap/ushell/ui/footerbar/ContactSupportButton.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.EndUserFeedback') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.footerbar.EndUserFeedback.
jQuery.sap.declare("sap.ushell.ui.footerbar.EndUserFeedback");

jQuery.sap.require('sap.m.Button'); // unlisted dependency retained



/**
 * Constructor for a new ui/footerbar/EndUserFeedback.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getShowAnonymous showAnonymous} : boolean (default: true)</li>
 * <li>{@link #getShowLegalAgreement showLegalAgreement} : boolean (default: true)</li>
 * <li>{@link #getShowCustomUIContent showCustomUIContent} : boolean (default: true)</li>
 * <li>{@link #getFeedbackDialogTitle feedbackDialogTitle} : string</li>
 * <li>{@link #getTextAreaPlaceholder textAreaPlaceholder} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul>
 * <li>{@link #getCustomUIContent customUIContent} : sap.ui.core.Control[]</li></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Button#constructor sap.m.Button}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/footerbar/EndUserFeedback
 * @extends sap.m.Button
 * @version 1.32.6
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.footerbar.EndUserFeedback
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.Button.extend("sap.ushell.ui.footerbar.EndUserFeedback", { metadata : {

	library : "sap.ushell",
	properties : {
		"showAnonymous" : {type : "boolean", group : "Misc", defaultValue : true},
		"showLegalAgreement" : {type : "boolean", group : "Misc", defaultValue : true},
		"showCustomUIContent" : {type : "boolean", group : "Misc", defaultValue : true},
		"feedbackDialogTitle" : {type : "string", group : "Misc", defaultValue : null},
		"textAreaPlaceholder" : {type : "string", group : "Misc", defaultValue : null}
	},
	aggregations : {
		"customUIContent" : {type : "sap.ui.core.Control", multiple : true, singularName : "customUIContent"}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.footerbar.EndUserFeedback with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.footerbar.EndUserFeedback.extend
 * @function
 */


/**
 * Getter for property <code>showAnonymous</code>.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showAnonymous</code>
 * @public
 * @name sap.ushell.ui.footerbar.EndUserFeedback#getShowAnonymous
 * @function
 */

/**
 * Setter for property <code>showAnonymous</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowAnonymous  new value for property <code>showAnonymous</code>
 * @return {sap.ushell.ui.footerbar.EndUserFeedback} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.EndUserFeedback#setShowAnonymous
 * @function
 */


/**
 * Getter for property <code>showLegalAgreement</code>.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showLegalAgreement</code>
 * @public
 * @name sap.ushell.ui.footerbar.EndUserFeedback#getShowLegalAgreement
 * @function
 */

/**
 * Setter for property <code>showLegalAgreement</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowLegalAgreement  new value for property <code>showLegalAgreement</code>
 * @return {sap.ushell.ui.footerbar.EndUserFeedback} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.EndUserFeedback#setShowLegalAgreement
 * @function
 */


/**
 * Getter for property <code>showCustomUIContent</code>.
 *
 * Default value is <code>true</code>
 *
 * @return {boolean} the value of property <code>showCustomUIContent</code>
 * @public
 * @name sap.ushell.ui.footerbar.EndUserFeedback#getShowCustomUIContent
 * @function
 */

/**
 * Setter for property <code>showCustomUIContent</code>.
 *
 * Default value is <code>true</code> 
 *
 * @param {boolean} bShowCustomUIContent  new value for property <code>showCustomUIContent</code>
 * @return {sap.ushell.ui.footerbar.EndUserFeedback} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.EndUserFeedback#setShowCustomUIContent
 * @function
 */


/**
 * Getter for property <code>feedbackDialogTitle</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>feedbackDialogTitle</code>
 * @public
 * @name sap.ushell.ui.footerbar.EndUserFeedback#getFeedbackDialogTitle
 * @function
 */

/**
 * Setter for property <code>feedbackDialogTitle</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sFeedbackDialogTitle  new value for property <code>feedbackDialogTitle</code>
 * @return {sap.ushell.ui.footerbar.EndUserFeedback} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.EndUserFeedback#setFeedbackDialogTitle
 * @function
 */


/**
 * Getter for property <code>textAreaPlaceholder</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>textAreaPlaceholder</code>
 * @public
 * @name sap.ushell.ui.footerbar.EndUserFeedback#getTextAreaPlaceholder
 * @function
 */

/**
 * Setter for property <code>textAreaPlaceholder</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sTextAreaPlaceholder  new value for property <code>textAreaPlaceholder</code>
 * @return {sap.ushell.ui.footerbar.EndUserFeedback} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.EndUserFeedback#setTextAreaPlaceholder
 * @function
 */


/**
 * Getter for aggregation <code>customUIContent</code>.<br/>
 * 
 * @return {sap.ui.core.Control[]}
 * @public
 * @name sap.ushell.ui.footerbar.EndUserFeedback#getCustomUIContent
 * @function
 */


/**
 * Inserts a customUIContent into the aggregation named <code>customUIContent</code>.
 *
 * @param {sap.ui.core.Control}
 *          oCustomUIContent the customUIContent to insert; if empty, nothing is inserted
 * @param {int}
 *             iIndex the <code>0</code>-based index the customUIContent should be inserted at; for 
 *             a negative value of <code>iIndex</code>, the customUIContent is inserted at position 0; for a value 
 *             greater than the current size of the aggregation, the customUIContent is inserted at 
 *             the last position        
 * @return {sap.ushell.ui.footerbar.EndUserFeedback} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.EndUserFeedback#insertCustomUIContent
 * @function
 */

/**
 * Adds some customUIContent <code>oCustomUIContent</code> 
 * to the aggregation named <code>customUIContent</code>.
 *
 * @param {sap.ui.core.Control}
 *            oCustomUIContent the customUIContent to add; if empty, nothing is inserted
 * @return {sap.ushell.ui.footerbar.EndUserFeedback} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.EndUserFeedback#addCustomUIContent
 * @function
 */

/**
 * Removes an customUIContent from the aggregation named <code>customUIContent</code>.
 *
 * @param {int | string | sap.ui.core.Control} vCustomUIContent the customUIContent to remove or its index or id
 * @return {sap.ui.core.Control} the removed customUIContent or null
 * @public
 * @name sap.ushell.ui.footerbar.EndUserFeedback#removeCustomUIContent
 * @function
 */

/**
 * Removes all the controls in the aggregation named <code>customUIContent</code>.<br/>
 * Additionally unregisters them from the hosting UIArea.
 * @return {sap.ui.core.Control[]} an array of the removed elements (might be empty)
 * @public
 * @name sap.ushell.ui.footerbar.EndUserFeedback#removeAllCustomUIContent
 * @function
 */

/**
 * Checks for the provided <code>sap.ui.core.Control</code> in the aggregation named <code>customUIContent</code> 
 * and returns its index if found or -1 otherwise.
 *
 * @param {sap.ui.core.Control}
 *            oCustomUIContent the customUIContent whose index is looked for.
 * @return {int} the index of the provided control in the aggregation if found, or -1 otherwise
 * @public
 * @name sap.ushell.ui.footerbar.EndUserFeedback#indexOfCustomUIContent
 * @function
 */
	

/**
 * Destroys all the customUIContent in the aggregation 
 * named <code>customUIContent</code>.
 * @return {sap.ushell.ui.footerbar.EndUserFeedback} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.footerbar.EndUserFeedback#destroyCustomUIContent
 * @function
 */

// Start of sap/ushell/ui/footerbar/EndUserFeedback.js
(function () {
    "use strict";
    /*global jQuery, sap, window*/

    /**
     * EndUserFeedbackButton
     *
     * @name sap.ushell.ui.footerbar.EndUserFeedback
     * @private
     * @since 1.26.0
     */
    jQuery.sap.declare("sap.ushell.ui.footerbar.EndUserFeedback");
    
    



    sap.ushell.ui.footerbar.EndUserFeedback.prototype.init = function () {
        jQuery.sap.require("sap.ushell.services.Container");

        var userInfo = sap.ushell.Container.getUser(),
            sFormFactor = sap.ushell.utils.getFormFactor();

        this.oUserDetails = {
            userId: userInfo.getId(),
            eMail: userInfo.getEmail()
        };
        this.translationBundle = sap.ushell.resources.i18n;
        this.oEndUserFeedbackService = sap.ushell.Container.getService("EndUserFeedback");
        this.appConfiguration = sap.ushell.services.AppConfiguration;
        //Set RndUserFeedback model.
        this.oEndUserFeedbackModel = new sap.ui.model.json.JSONModel();
        this.oEndUserFeedbackModel.setData({
            feedbackViewTitle: this.translationBundle.getText("userFeedback_title"),
            legalAgreementViewTitle: this.translationBundle.getText("userFeedbackLegal_title"),
            textAreaPlaceholderText: this.translationBundle.getText("feedbackPlaceHolderHeader"),
            presentationStates: {
                //When in 'init', the getters retrieve only their default values.
                showAnonymous: this.getShowLegalAgreement(),
                showLegalAgreement: this.getShowLegalAgreement(),
                showCustomUIContent: this.getShowCustomUIContent()
            },
            clientContext: {
                userDetails: jQuery.extend(true, {}, this.oUserDetails),
                navigationData: {
                    formFactor: sFormFactor,
                    applicationInformation: {},
                    navigationHash: null
                }
            },
            isAnonymous: true,
            applicationIconPath: '',
            leftButton: {
                feedbackView: this.translationBundle.getText("sendBtn"),
                legalAgreementView: this.translationBundle.getText("approveBtn")
            },
            rightButton: {
                feedbackView: this.translationBundle.getText("cancelBtn"),
                legalAgreementView: this.translationBundle.getText("declineBtn")
            },
            states: {
                isLegalAgreementChecked: false,
                isRatingSelected: false,
                isInFeedbackView: true
            },
            technicalLink: {
                state: 0, // 0 - hidden, 1- visible
                title: [
                    this.translationBundle.getText("technicalDataLink"),
                    this.translationBundle.getText("technicalDataLinkHide")
                ]
            },
            textArea: {
                inputText: ''
            },
            contextText: '',
            ratingButtons: [
                {
                    text: sap.ushell.resources.i18n.getText("ratingExcellentText"),
                    color: 'sapUshellRatingLabelFeedbackPositiveText',
                    iconSymbol: 'sap-icon://BusinessSuiteInAppSymbols/icon-face-very-happy',
                    id: 'rateBtn1',
                    index: 1
                },
                {
                    text: sap.ushell.resources.i18n.getText("ratingGoodText"),
                    color: 'sapUshellRatingLabelFeedbackPositiveText',
                    iconSymbol: 'sap-icon://BusinessSuiteInAppSymbols/icon-face-happy',
                    id: 'rateBtn2',
                    index: 2
                },
                {
                    text: sap.ushell.resources.i18n.getText("ratingAverageText"),
                    color: 'sapUshellRatingLabelFeedbackNeutralText',
                    iconSymbol: 'sap-icon://BusinessSuiteInAppSymbols/icon-face-neutral',
                    id: 'rateBtn3',
                    index: 3
                },
                {
                    text: sap.ushell.resources.i18n.getText("ratingPoorText"),
                    color: 'sapUshellRatingLabelFeedbackCriticalText',
                    iconSymbol: 'sap-icon://BusinessSuiteInAppSymbols/icon-face-bad',
                    id: 'rateBtn4',
                    index: 4
                },
                {
                    text: sap.ushell.resources.i18n.getText("ratingVeyPoorText"),
                    color: 'sapUshellRatingLabelFeedbackNegativeText',
                    iconSymbol: 'sap-icon://BusinessSuiteInAppSymbols/icon-face-very-bad',
                    id: 'rateBtn5',
                    index: 5
                }
            ],
            selectedRating: {
                text: '',
                color: '',
                index: 0
            }
        });

        this.setIcon('sap-icon://marketing-campaign');
        this.setWidth('100%');
        this.setText(sap.ushell.resources.i18n.getText("endUserFeedbackBtn"));
        this.setTooltip(sap.ushell.resources.i18n.getText("endUserFeedbackBtn_tooltip"));
        this.attachPress(this.ShowEndUserFeedbackDialog);
        this.setEnabled();// disables button if shell not initialized
    };

    sap.ushell.ui.footerbar.EndUserFeedback.prototype.ShowEndUserFeedbackDialog = function () {
        this.updateModelContext();
        if (this.oDialog) {
            this.updateTechnicalInfo();
            this.oDialog.open();
            return;
        }
        jQuery.sap.require("sap.ui.layout.form.SimpleForm");
        jQuery.sap.require("sap.ui.layout.HorizontalLayout");
        jQuery.sap.require("sap.ui.layout.VerticalLayout");
        jQuery.sap.require("sap.m.TextArea");
        jQuery.sap.require("sap.m.Link");
        jQuery.sap.require("sap.m.Label");
        jQuery.sap.require("sap.m.Text");
        jQuery.sap.require("sap.m.Dialog");
        jQuery.sap.require("sap.m.Button");
        jQuery.sap.require("sap.m.Image");

        var sModulePath = jQuery.sap.getModulePath("sap.ushell"),
            sDefaultLogo = sModulePath + '/themes/base/img/launchpadDefaultIcon.jpg',
            bIsDesktop = this.oEndUserFeedbackModel.getProperty('/clientContext/navigationData/formFactor') === 'desktop';

        this.oLegalAgreementInfoLayout = null;
        this.oBackButton = new sap.m.Button('endUserFeedbackBackBtn', {
            visible: {
                path: "/states/isInFeedbackView",
                formatter: function (oIsInFeedbackView) {

                    return !oIsInFeedbackView;
                }
            },
            icon: sap.ui.core.IconPool.getIconURI("nav-back"),
            press: function () {
                this.oEndUserFeedbackModel.setProperty('/states/isInFeedbackView', true);
            }.bind(this),
            tooltip: sap.ushell.resources.i18n.getText("feedbackGoBackBtn_tooltip")
        });
        this.oPopoverTitle = new sap.m.Text("PopoverTitle", {
            text: {
                parts: [
                    {path: '/states/isInFeedbackView'},
                    {path: '/feedbackViewTitle'}
                ],
                formatter: function (bIsInFeedbackView) {
                    return this.oEndUserFeedbackModel.getProperty(bIsInFeedbackView ? "/feedbackViewTitle" : "/legalAgreementViewTitle");
                }.bind(this)
            }
        });
        this.oHeadBar = new sap.m.Bar({
            contentLeft: [this.oBackButton],
            contentMiddle: [this.oPopoverTitle]
        });
        this.oLogoImg = new sap.m.Image('sapFeedbackLogo', {
            src: sDefaultLogo,
            width: '4.5rem',
            height: '4.5rem',
            visible: {
                path: '/applicationIconPath',
                formatter: function (applicationIconPath) {
                    return !applicationIconPath;
                }
            }
        });
        this.oAppIcon = new sap.ui.core.Icon('sapFeedbackAppIcon', {
            src: '{/applicationIconPath}',
            width: '4.5rem',
            height: '4.5rem',
            visible: {
                path: '/applicationIconPath',
                formatter: function (applicationIconPath) {
                    return !!applicationIconPath;
                }
            }
        }).addStyleClass("sapUshellFeedbackAppIcon");
        this.oContextName = new sap.m.Text('contextName', {text: '{/contextText}'});
        this.oContextLayout = new sap.ui.layout.HorizontalLayout('contextLayout', {content: [this.oLogoImg, this.oAppIcon, this.oContextName]});
        this.oRatingLabel = new sap.m.Label('ratingLabel', {required: true, text: sap.ushell.resources.i18n.getText("ratingLabelText")});
        this.oRatingSelectionText = new sap.m.Text('ratingSelectionText', {
            text: {
                path: '/selectedRating',
                formatter: function (oSelectedRating) {
                    if (this.lastSelectedColor) {
                        this.removeStyleClass(this.lastSelectedColor);
                    }
                    if (oSelectedRating.color) {
                        this.addStyleClass(oSelectedRating.color);
                    }
                    this.lastSelectedColor = oSelectedRating.color;

                    return oSelectedRating.text;
                }
            }
        });
        this.oRatingButtonTemplate = new sap.m.Button({icon: '{iconSymbol}', height: '100%', width:'20%'});
        this.oRatingButtons = new sap.m.SegmentedButton('ratingButtons', {
            width: "98%",
            selectedButton: 'noDefalut',
            buttons: {
                path: "/ratingButtons",
                template: this.oRatingButtonTemplate
            },
            select: function (eObj) {
                var sId = eObj.mParameters.id,
                    sPath = sap.ui.getCore().byId(sId).getBindingContext().getPath(),
                    oButtonContext = this.oEndUserFeedbackModel.getProperty(sPath);

                this.oEndUserFeedbackModel.setProperty('/selectedRating', { text: oButtonContext.text, color: oButtonContext.color, index: oButtonContext.index});
                this.oEndUserFeedbackModel.setProperty('/states/isRatingSelected', true);
            }.bind(this)
        });
        this.oRatingButtons.addAriaLabelledBy("ratingLabel");
        if (bIsDesktop) {
            this.oRatingIndicationLayout = new sap.ui.layout.HorizontalLayout('ratingIndicationLayout', {content: [this.oRatingLabel, this.oRatingSelectionText]});
        } else {
            this.oRatingIndicationLayout = new sap.ui.layout.VerticalLayout('ratingIndicationLayoutMob', {content: [this.oRatingLabel, this.oRatingSelectionText]});
        }
        this.oRatingLayout = new sap.ui.layout.VerticalLayout('ratingLayout', {
            width: "100%",
            content: [this.oRatingIndicationLayout, this.oRatingButtons]
        });

        this.oAnonymousCheckbox = new sap.m.CheckBox('anonymousCheckbox', {
            name: 'anonymousCheckbox',
            visible: '{/presentationStates/showAnonymous}',
            text: sap.ushell.resources.i18n.getText("feedbackSendAnonymousText"),
            selected: '{/isAnonymous}',
            select: function (oEvent) {
                var bChecked = oEvent.getParameter("selected");
                this._handleAnonymousSelection(bChecked);
            }.bind(this)
        });
        var isAnonymous = (!this.oEndUserFeedbackModel.getProperty("/presentationStates/showAnonymous") || this.oEndUserFeedbackModel.getProperty("/isAnonymous"));
        this._handleAnonymousSelection(isAnonymous);

        this.oLegalAgrementCheckbox = new sap.m.CheckBox('legalAgreement', {
            name: 'legalAgreement',
            visible: '{/presentationStates/showLegalAgreement}',
            selected: '{/states/isLegalAgreementChecked}',
            text: this.translationBundle.getText("agreementAcceptanceText")
        });
        this.oLegalAgreeementLink = new sap.m.Link('legalAgreementLink', {
            text: this.translationBundle.getText("legalAgreementLinkText"),
            visible: '{/presentationStates/showLegalAgreement}',
            press: function () {
                var oPromise = this.oEndUserFeedbackService.getLegalText();

                oPromise.done(this._showLegalAgreementInfo.bind(this));
            }.bind(this)
        });
        this.aCustomUIContent = jQuery.extend([], this.getCustomUIContent());
        this.oCustomUILayout = new sap.ui.layout.VerticalLayout('customUILayout', {
            visible: {
                path: '/presentationStates/showCustomUIContent',
                formatter: function (bShowCustomUIContent) {
                    return (bShowCustomUIContent && this.aCustomUIContent.length) ? true : false;
                }.bind(this)
            },
            content: this.getCustomUIContent(),
            width: "100%"
        });
        this.oLegalLayout = new sap.ui.layout.VerticalLayout('legalLayout', {content: [this.oAnonymousCheckbox, this.oLegalAgrementCheckbox, this.oLegalAgreeementLink]});
        this.oTechnicalDataLink = new sap.m.Link('technicalDataLink', {
            text: {
                path: '/technicalLink/state',
                formatter: function (oState) {
                    return this.getModel().getProperty('/technicalLink/title/' + oState);
                }
            },
            press: function () {
                var _state = this.oEndUserFeedbackModel.getProperty("/technicalLink/state");

                this.oEndUserFeedbackModel.setProperty('/technicalLink/state', Math.abs(_state - 1));
            }.bind(this)
        });
        this.oTechnicalDataLayout = new sap.ui.layout.HorizontalLayout('technicalDataLayout', {content: [this.oTechnicalDataLink]});
        this.leftButton = new sap.m.Button("EndUserFeedbackLeftBtn", {
            text: {
                path: "/states/isInFeedbackView",
                formatter: function (bIsInFeedbackView) {
                    return this.getModel().getProperty('/leftButton/' + (bIsInFeedbackView ? 'feedbackView' : 'legalAgreementView'));
                }
            },
            enabled: {
                parts: [
                    {path: '/states/isInFeedbackView'},
                    {path: '/states/isLegalAgreementChecked'},
                    {path: '/states/isRatingSelected'},
                    {path: '/presentationStates/showLegalAgreement'}
                ],
                formatter: function (bIsInFeedbackView, bIsLegalAgreementChecked, bIsRatingSelected, bShowLegalAgreement) {
                    return !bIsInFeedbackView || (bIsRatingSelected && (bIsLegalAgreementChecked || !bShowLegalAgreement));
                }
            },
            press: function () {
                var bIsInFeedbackView = this.oEndUserFeedbackModel.getProperty("/states/isInFeedbackView");

                if (bIsInFeedbackView) {
                    var oFeedbackObject = {
                            feedbackText: this.oEndUserFeedbackModel.getProperty('/textArea/inputText'),
                            ratings: [
                                {
                                    questionId: "Q10",
                                    value: this.oEndUserFeedbackModel.getProperty('/selectedRating/index')
                                }
                            ],
                            clientContext: this.oEndUserFeedbackModel.getProperty('/clientContext'),
                            isAnonymous: this.oEndUserFeedbackModel.getProperty('/isAnonymous')
                        },
                        promise = this.oEndUserFeedbackService.sendFeedback(oFeedbackObject);

                    promise.done(function () {
                        sap.ushell.Container.getService("Message").info(this.translationBundle.getText('feedbackSendToastTxt'));
                    }.bind(this));
                    promise.fail(function () {
                        sap.ushell.Container.getService("Message").error(this.translationBundle.getText('feedbackFailedToastTxt'));
                    }.bind(this));
                    this.oDialog.close();
                } else {
                    this.oEndUserFeedbackModel.setProperty('/states/isInFeedbackView', true);
                    this.oEndUserFeedbackModel.setProperty('/states/isLegalAgreementChecked', true);
                }
            }.bind(this)
        });
        this.rightButton = new sap.m.Button("EndUserFeedbackRightBtn", {
            text: {
                path: "/states/isInFeedbackView",
                formatter: function (bIsInFeedbackView) {
                    return this.getModel().getProperty('/rightButton/' + (bIsInFeedbackView ? 'feedbackView' : 'legalAgreementView'));
                }
            },
            press: function () {
                var bIsInFeedbackView = this.oEndUserFeedbackModel.getProperty("/states/isInFeedbackView");
                if (bIsInFeedbackView) {
                    this.oDialog.close();
                } else {
                    this.oEndUserFeedbackModel.setProperty('/states/isInFeedbackView', true);
                    this.oEndUserFeedbackModel.setProperty('/states/isLegalAgreementChecked', false);
                }
            }.bind(this)
        });
        this.oTextArea = new sap.m.TextArea("feedbackTextArea", {
            rows: 6,
            value: '{/textArea/inputText}',
            placeholder: '{/textAreaPlaceholderText}'
        });
        //Add support for scren readers.
        this.oTextArea.addCustomData(new sap.ushell.ui.launchpad.AccessibilityCustomData({
            key: "aria-label",
            value: this.oEndUserFeedbackModel.getProperty('/textAreaPlaceholderText'),
            writeToDom: true
        }));
        this.oDialog = new sap.m.Dialog({
            id: "UserFeedbackDialog",
            contentWidth: "25rem",
            leftButton: this.leftButton,
            rightButton: this.rightButton,
            stretchOnPhone: true,
            initialFocus: "textArea",
            afterOpen: function () {
                //Fix ios 7.1 bug in ipad4 where there is a gray box on the screen when you close the keyboards
                jQuery("#textArea").on("focusout", function () {
                    window.scrollTo(0, 0);
                });
            }
        }).addStyleClass("sapUshellEndUserFeedbackDialog");
        this.oDialog.setModel(this.oEndUserFeedbackModel);
        this.oDialog.setCustomHeader(this.oHeadBar);
        this.oDialog.addCustomData(new sap.ushell.ui.launchpad.AccessibilityCustomData({
            key: "aria-label",
            value: this.translationBundle.getText("endUserFeedbackAreaLabel"),
            writeToDom: true
        }));
        this.oTechnicalInfoBoxLayout = this._createTechnicalDataContent();
        this.oFeedbackLayout = new sap.ui.layout.VerticalLayout('feedbackLayout', {
            visible: '{/states/isInFeedbackView}',
            content: [this.oContextLayout, this.oRatingLayout, this.oTextArea, this.oTechnicalDataLayout, this.oTechnicalInfoBoxLayout, this.oLegalLayout, this.oCustomUILayout]
        }).addStyleClass("sapUshellFeedbackLayout");
        this.oMainLayout = new sap.ui.layout.VerticalLayout("mainLayout", {editable: false, content: [this.oFeedbackLayout]});
        this.oDialog.addContent(this.oMainLayout);
        this.oDialog.open();
    };

    sap.ushell.ui.footerbar.EndUserFeedback.prototype._handleAnonymousSelection = function (bChecked) {
        var anonymousTxt = this.translationBundle.getText('feedbackAnonymousTechFld');

        this.oEndUserFeedbackModel.setProperty('/isAnonymous', bChecked);
        this.oEndUserFeedbackModel.setProperty('/clientContext/userDetails/eMail', bChecked ? anonymousTxt : this.oUserDetails.eMail);
        this.oEndUserFeedbackModel.setProperty('/clientContext/userDetails/userId', bChecked ? anonymousTxt : this.oUserDetails.userId);
    };

    sap.ushell.ui.footerbar.EndUserFeedback.prototype._createTechnicalDataContent = function () {
        this.oTechnicalInfoBox = new sap.ui.layout.form.SimpleForm('feedbackTechnicalInfoBox', {
            layout: sap.ui.layout.form.SimpleFormLayout.ResponsiveLayout,
            content: this.getTechnicalInfoContent()
        });
        if (sap.ui.Device.os.ios && sap.ui.Device.system.phone) {
            this.oTechnicalInfoBox.addStyleClass("sapUshellContactSupportFixWidth");
        }

        var originalAfterRenderSimpleForm = this.oTechnicalInfoBox.onAfterRendering;
        this.oTechnicalInfoBox.onAfterRendering = function () {
            originalAfterRenderSimpleForm.apply(this, arguments);
            var node = jQuery(this.getDomRef());
            node.attr("tabIndex", 0);
            jQuery.sap.delayedCall(700, node, function () {
                this.focus();
            });
        };
        return new sap.ui.layout.HorizontalLayout('technicalInfoBoxLayout', {
            visible: {
                path: '/technicalLink/state',
                formatter: function (state) {
                    return state === 1;
                }
            },
            content: [this.oTechnicalInfoBox]
        });
    };

    sap.ushell.ui.footerbar.EndUserFeedback.prototype._createLegalAgreementLayout = function (sLegalAgreementText) {
        this.oLegalText = new sap.m.TextArea('legalText', {cols: 50, rows: 22 });
        this.oLegalText.setValue([sLegalAgreementText]);
        this.oLegalText.setEditable(false);
        var origLegalTextOnAfterRendering = this.oLegalText.onAfterRendering;
        this.oLegalText.onAfterRendering = function () {
            if (origLegalTextOnAfterRendering) {
                origLegalTextOnAfterRendering.apply(this, arguments);
            }
            var jqLegalText = jQuery(this.getDomRef());
            jqLegalText.find("textarea").attr("tabindex", "0");
        };
        this.oLegalAgreementInfoLayout = new sap.ui.layout.VerticalLayout('legalAgreementInfoLayout', {
            visible: {
                path: "/states/isInFeedbackView",
                formatter: function (bIsInFeedbackView) {
                    return !bIsInFeedbackView;
                }
            },
            content: [this.oLegalText]
        });
        this.oMainLayout.addContent(this.oLegalAgreementInfoLayout);
    };

    sap.ushell.ui.footerbar.EndUserFeedback.prototype._showLegalAgreementInfo = function (sLegalAgreementText) {
        this.oEndUserFeedbackModel.setProperty('/states/isInFeedbackView', false);

        if (!this.oLegalAgreementInfoLayout) { // if not initialized yet
            this._createLegalAgreementLayout(sLegalAgreementText);
        }
    };

    sap.ushell.ui.footerbar.EndUserFeedback.prototype.addCustomUIContent = function (oControl) {
        var isLegalControl = oControl && oControl.getMetadata && oControl.getMetadata().getStereotype && oControl.getMetadata().getStereotype() === 'control';

        if (isLegalControl) {
            if (this.getShowCustomUIContent()) {
                this.oEndUserFeedbackModel.setProperty('/presentationStates/showCustomUIContent', true);
            }
            this.addAggregation('customUIContent', oControl);
        }
    };

    sap.ushell.ui.footerbar.EndUserFeedback.prototype.setShowAnonymous = function (bValue) {
        if (typeof bValue === 'boolean') {
            this.oEndUserFeedbackModel.setProperty('/presentationStates/showAnonymous', bValue);
            this.setProperty('showAnonymous', bValue, true);
        }
    };

    sap.ushell.ui.footerbar.EndUserFeedback.prototype.setShowLegalAgreement = function (bValue) {
        if (typeof bValue === 'boolean') {
            this.oEndUserFeedbackModel.setProperty('/presentationStates/showLegalAgreement', bValue);
            this.setProperty('showLegalAgreement', bValue, true);
        }
    };

    sap.ushell.ui.footerbar.EndUserFeedback.prototype.setShowCustomUIContent = function (bValue) {
        if (typeof bValue === 'boolean') {
            this.oEndUserFeedbackModel.setProperty('/presentationStates/showCustomUIContent', bValue);
            this.setProperty('showCustomUIContent', bValue, true);
        }
    };

    sap.ushell.ui.footerbar.EndUserFeedback.prototype.setFeedbackDialogTitle = function (sValue) {
        if (typeof sValue === 'string') {
            this.oEndUserFeedbackModel.setProperty('/feedbackViewTitle', sValue);
            this.setProperty('feedbackDialogTitle', sValue, true);
        }
    };

    sap.ushell.ui.footerbar.EndUserFeedback.prototype.setTextAreaPlaceholder = function (sValue) {
        if (typeof sValue === 'string') {
            this.oEndUserFeedbackModel.setProperty('/textAreaPlaceholderText', sValue);
            this.setProperty('textAreaPlaceholder', sValue, true);
        }
    };
    sap.ushell.ui.footerbar.EndUserFeedback.prototype.updateModelContext = function () {
        var oURLParsing = sap.ushell.Container.getService("URLParsing"),
            sHash,
            oParsedHash,
            sIntent,
            currentPage,
            sourcePage,
            sUrlText;

        // Extract the intent from the current URL.
        // If no hash exists then the intent is set to an empty string
        sHash = oURLParsing.getShellHash(window.location);
        oParsedHash = oURLParsing.parseShellHash(sHash);
        sIntent = (oParsedHash !== undefined) ? oParsedHash.semanticObject + "-" + oParsedHash.action : "";
        currentPage = this.getModel().getProperty("/currentState/stateName");
        if (currentPage === "home" || currentPage === "catalog") {
            sourcePage = this.translationBundle.getText(currentPage + '_title');
        }

        this.currentApp = this.appConfiguration.getCurrentAppliction();
        this.bHasAppName = (this.currentApp && this.appConfiguration.getMetadata(this.currentApp) && this.appConfiguration.getMetadata(this.currentApp).title);
        this.sAppIconPath = (this.currentApp && this.appConfiguration.getMetadata(this.currentApp) && this.appConfiguration.getMetadata(this.currentApp).icon);
        this.oEndUserFeedbackModel.setProperty('/contextText', this.bHasAppName ? this.appConfiguration.getMetadata(this.currentApp).title : this.translationBundle.getText('feedbackHeaderText'));


        sUrlText = null;
        if (this.currentApp && this.currentApp.url) {
            sUrlText = this.currentApp.url.split('?')[0];
        } else if (currentPage) {
            sUrlText = this.translationBundle.getText("flp_page_name");
        }
        this.oEndUserFeedbackModel.setProperty('/clientContext/navigationData/applicationInformation', {
            url: sUrlText,
            additionalInformation: (this.currentApp && this.currentApp.additionalInformation) ? this.currentApp.additionalInformation : null,
            applicationType: (this.currentApp && this.currentApp.applicationType) ? this.currentApp.applicationType : null
        });

        this.oEndUserFeedbackModel.setProperty('/clientContext/navigationData/navigationHash', sourcePage ? sourcePage : sIntent);
        this.oEndUserFeedbackModel.setProperty('/selectedRating', { text: '', color: '', index: 0});
        this.oEndUserFeedbackModel.setProperty('/states/isRatingSelected', false);
        this.oEndUserFeedbackModel.setProperty('/states/isLegalAgreementChecked', false);
        this.oEndUserFeedbackModel.setProperty('/technicalLink/state', 0);
        this.oEndUserFeedbackModel.setProperty('/textArea/inputText', '');
        this.oEndUserFeedbackModel.setProperty('/applicationIconPath', this.sAppIconPath);
        this._handleAnonymousSelection(true);

    };

    sap.ushell.ui.footerbar.EndUserFeedback.prototype.updateTechnicalInfo = function () {
        this.oTechnicalInfoBox.destroyContent();
        this.oTechnicalInfoBox.removeAllContent();
        var aTechnicalInfoContent = this.getTechnicalInfoContent(),
            contentIndex;

        for (contentIndex in aTechnicalInfoContent) {
            this.oTechnicalInfoBox.addContent(aTechnicalInfoContent[contentIndex]);
        }
        this.oRatingButtons.setSelectedButton('noDefalut');
    };

    sap.ushell.ui.footerbar.EndUserFeedback.prototype.getTechnicalInfoContent = function () {
        var aFormContent = [],
            sFormFactor = this.oEndUserFeedbackModel.getProperty('/clientContext/navigationData/formFactor'),
            sUserId = this.oEndUserFeedbackModel.getProperty('/clientContext/userDetails/userId'),
            sEmail = this.oEndUserFeedbackModel.getProperty('/clientContext/userDetails/eMail'),
            sAppUrl = this.oEndUserFeedbackModel.getProperty('/clientContext/navigationData/applicationInformation/url'),
            sAppType = this.oEndUserFeedbackModel.getProperty('/clientContext/navigationData/applicationInformation/applicationType'),
            sAppAdditionalInfo = this.oEndUserFeedbackModel.getProperty('/clientContext/navigationData/applicationInformation/additionalInformation'),
            sNavHash = this.oEndUserFeedbackModel.getProperty('/clientContext/navigationData/navigationHash'),
            currentPage = this.getModel().getProperty("/currentState/stateName"),
            bDisplayData = (currentPage === "home" || currentPage === "catalog") ? false : true;

        aFormContent.push(new sap.m.Text({text: this.translationBundle.getText("loginDetails")}).addStyleClass('sapUshellContactSupportHeaderInfoText'));
        aFormContent.push(sUserId ? new sap.m.Label({text: this.translationBundle.getText("userFld")}) : null);
        aFormContent.push(sUserId ? new sap.m.Text('technicalInfoUserIdTxt', {text: '{/clientContext/userDetails/userId}'}) : null);
        aFormContent.push(sEmail ? new sap.m.Label({text: this.translationBundle.getText("eMailFld")}) : null);
        aFormContent.push(sEmail ? new sap.m.Text({text: '{/clientContext/userDetails/eMail}'}) : null);
        aFormContent.push(sFormFactor ? new sap.m.Label({text: this.translationBundle.getText('formFactorFld')}) : null);
        aFormContent.push(sFormFactor ? new sap.m.Text({text: '{/clientContext/navigationData/formFactor}'}) : null);
        //Required to align the following Text under the same column.
        aFormContent.push(new sap.m.Text({text: ''}));
        aFormContent.push(new sap.m.Text({text: this.translationBundle.getText(this.currentApp ? 'applicationInformationFld' : 'feedbackHeaderText')}).addStyleClass('sapUshellEndUserFeedbackHeaderInfoText').addStyleClass("sapUshellEndUserFeedbackInfoTextSpacing"));
        aFormContent.push(sAppUrl && bDisplayData ? new sap.m.Label({text: this.translationBundle.getText("urlFld")}) : null);
        aFormContent.push(sAppUrl && bDisplayData ? new sap.m.Text({text: '{/clientContext/navigationData/applicationInformation/url}'}) : null);
        aFormContent.push(sAppType ? new sap.m.Label({text: this.translationBundle.getText("applicationTypeFld")}) : null);
        aFormContent.push(sAppType ? new sap.m.Text({text: '{/clientContext/navigationData/applicationInformation/applicationType}'}) : null);
        aFormContent.push(sAppAdditionalInfo ? new sap.m.Label({text: this.translationBundle.getText("additionalInfoFld")}) : null);
        aFormContent.push(sAppAdditionalInfo ? new sap.m.Text({text: '{/clientContext/navigationData/applicationInformation/additionalInformation}'}) : null);
        aFormContent.push(sNavHash && bDisplayData ? new sap.m.Label({text: this.translationBundle.getText("hashFld")}) : null);
        aFormContent.push(sNavHash && bDisplayData ? new sap.m.Text({text: '{/clientContext/navigationData/navigationHash}'}) : null);

        return aFormContent.filter(Boolean);
    };

    sap.ushell.ui.footerbar.EndUserFeedback.prototype.setEnabled = function (bEnabled) {
        if (!sap.ushell.Container) {
            if (this.getEnabled()) {
                jQuery.sap.log.warning(
                    "Disabling 'End User Feedback' button: unified shell container not initialized",
                    null,
                    "sap.ushell.ui.footerbar.EndUserFeedback"
                );
            }
            bEnabled = false;
        }
        sap.m.Button.prototype.setEnabled.call(this, bEnabled);
    };
}());

}; // end of sap/ushell/ui/footerbar/EndUserFeedback.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.HideGroupsButton') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.footerbar.HideGroupsButton.
jQuery.sap.declare("sap.ushell.ui.footerbar.HideGroupsButton");

jQuery.sap.require('sap.m.Button'); // unlisted dependency retained



/**
 * Constructor for a new ui/footerbar/HideGroupsButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Button#constructor sap.m.Button}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A button to hide groups from the dashboard, for the UShell footerbar.
 * @extends sap.m.Button
 * @version 1.32.6
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.footerbar.HideGroupsButton
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.Button.extend("sap.ushell.ui.footerbar.HideGroupsButton", { metadata : {

	library : "sap.ushell"
}});


/**
 * Creates a new subclass of class sap.ushell.ui.footerbar.HideGroupsButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.footerbar.HideGroupsButton.extend
 * @function
 */

// Start of sap/ushell/ui/footerbar/HideGroupsButton.js
(function () {
    "use strict";
    /*global jQuery, sap*/

    jQuery.sap.declare("sap.ushell.ui.footerbar.HideGroupsButton");
    
    

    /**
     * @name sap.ushell.ui.footerbar.HideGroupsButton
     */
    sap.ushell.ui.footerbar.HideGroupsButton.prototype.init = function () {
        this.setIcon('sap-icon://group-2');
        this.setTooltip(sap.ushell.resources.i18n.getText("hideGroupsBtn_tooltip"));
        this.setWidth('100%');
        this.setText(sap.ushell.resources.i18n.getText("hideGroupsBtn_title"));
        this.attachPress(this.openHideGroupsDialog);
        //call the parent sap.m.Button init method
        if (sap.m.Button.prototype.init) {
            sap.m.Button.prototype.init.apply(this, arguments);
        }
    };

    sap.ushell.ui.footerbar.HideGroupsButton.prototype.openHideGroupsDialog = function () {
        jQuery.sap.require("sap.m.Dialog");
        jQuery.sap.require("sap.m.Button");
        jQuery.sap.require("sap.m.Table");
        jQuery.sap.require("sap.m.Switch");

        var that = this;
        this.oModel = this.getModel();

        this.handleChange = function (event) {
            var parent = event.oSource.getParent(),
                groupPath = parent.getBindingContextPath(),
                group = this.oModel.getProperty(groupPath);

            // update new state in the local model
            var changedGroup = jQuery.grep(this.aGroupsStates, function (oGroup) {
                return oGroup.groupId === group.groupId;
            })[0];
            if (changedGroup) {
                changedGroup.isGroupVisible = !changedGroup.isGroupVisible;
            }

            parent.toggleStyleClass('sapUshellHideGroupsTableItem');
            parent.getCells()[0].toggleStyleClass('sapUshellHideGroupsDisabledCell');
        }.bind(this);

        //Default group and locked groups cannot be switched to hidden. 
        var switchVisibleFormatter = function (enabled, locked) {
            return enabled && !locked;
        };

        this.groupsTableTemplate = new sap.m.ColumnListItem({
            cells: [
                new sap.m.Text({text: "{title}"}),
                new sap.m.Switch({
                    visible: {parts: [{path : "isEnabled"}, {path : "isGroupLocked"}], formatter : switchVisibleFormatter},
                    change: that.handleChange,
                    customTextOff: " ",
                    customTextOn: " ",
                    tooltip: sap.ushell.resources.i18n.getText("hideGroups_switchTooltip")
                })
            ]
        });

        this.groupsTable = new sap.m.Table("sapUshellHideGroupsTable", {
            backgroundDesign: sap.m.BackgroundDesign.Transparent,
            showSeparators: sap.m.ListSeparators.Inner,
            columns: [
                new sap.m.Column({
                    vAlign: "Middle"
                }),
                new sap.m.Column({
                    hAlign: sap.ui.core.TextAlign.Right,
                    vAlign: "Middle",
                    width: "4.94rem"
                })
            ]
        });
        this.groupsTable.addStyleClass('sapUshellHideGroupsTable');

        var oOrigOnAfterRendering = this.groupsTable.onAfterRendering;
        this.groupsTable.onAfterRendering = function (event) {
            oOrigOnAfterRendering.apply(that.groupsTable, arguments);

            var items = event.srcControl.mAggregations.items;
            if (items) {
                var model = items[0].getModel(),
                    i,
                    group;
                for (i = 0; i < items.length; i++) {
                    group = model.getProperty(items[i].getBindingContextPath()); //get the related binded group from the model
                    items[i].getCells()[1].setState(group.isGroupVisible);
                    if (group && group.isGroupLocked && (group.tiles.length === 0 || !sap.ushell.utils.groupHasVisibleTiles(group.tiles))) { //Locked groups which has no tiles are filted out from the dashboard, grouplist panel and hide groups popup (or has tiles not supported in current device)
                        items[i].setVisible(false);
                    } else if (!items[i].getCells()[1].getState()) { //if it is disabled, need to mark the row with different background color
                        items[i].addStyleClass('sapUshellHideGroupsTableItem');
                        items[i].getCells()[0].addStyleClass('sapUshellHideGroupsDisabledCell');
                    }
                }
            }
            setTimeout(function () {
                jQuery('.sapMListTblRow').first().focus();
            }, 200);
        };

        this.groupsTable.setModel(this.getModel());

        var personalizationEnabled = this.getModel().getProperty("/personalization");
        var emptyGroupFilter = [];
        //When personalization is disabled, empty groups should not appear in the Hide Groups dialog
        //(as they are also not appearing in the dashboard and group list)
        if (!personalizationEnabled) {
            emptyGroupFilter.push(new sap.ui.model.Filter("tiles/length", sap.ui.model.FilterOperator.GT, 0));
        }

        this.groupsTable.bindItems({
            path: "/groups",
            template: this.groupsTableTemplate,
            filters: emptyGroupFilter
        });

        this.saveButton = new sap.m.Button("saveBtn", {
            text: sap.ushell.resources.i18n.getText("okBtn"),
            press: function () {

                setTimeout(function () {
                    var oModel = this.getModel();
                    var groups = that.aGroupsStates;

                    if (groups) {
                        var oLaunchPageSrv = sap.ushell.Container.getService("LaunchPage");
                        var aHiddenGroupsIDs = [],
                            i,
                            id;

                        for (i = 0; i < groups.length; i++) {
                            if (!groups[i].isGroupVisible) {
                                id = oLaunchPageSrv.getGroupId(groups[i].object);
                                aHiddenGroupsIDs.push(id);
                            }
                        }
                        oLaunchPageSrv.hideGroups(aHiddenGroupsIDs).done(function () {
                            oModel.setProperty("/groups", groups);
                            that.handleToastMessage(aHiddenGroupsIDs.length);
                        }).fail(function () {
                            var errorMsg = new sap.ushell.ui.launchpad.EmbeddedSupportErrorMessage("HideGroupsErrorMessage", {
                                title: sap.ushell.resources.i18n.getText("error"),
                                content: new sap.m.Text({
                                    text: sap.ushell.resources.i18n.getText("hideGroups_error")
                                })
                            });
                            errorMsg.open();
                        });
                    }
                }.bind(this), 100);//There is a flickering when the dialog is closed in the first time. adding minimal timeout to prevent it.

                this.oDialog.close();
            }.bind(this)
        });

        this.handleToastMessage = function (numOfHiddenGroups) {
            var sMsg = "";
            if (typeof numOfHiddenGroups === undefined) {
                return;
            }

            if (numOfHiddenGroups === 0) {  //All groups are visible on your home page
                sMsg = sap.ushell.resources.i18n.getText("hideGroups_none");
            } else if (numOfHiddenGroups === 1) {//1 group is hidden on your home page
                sMsg = sap.ushell.resources.i18n.getText("hideGroups_single");
            } else {//{0} groups are hidden on your home page
                sMsg = sap.ushell.resources.i18n.getText("hideGroups_multiple", numOfHiddenGroups);
            }
            sap.ushell.Container.getService("Message").show(sap.ushell.services.Message.Type.INFO, sMsg);
        };

        this.cancelButton = new sap.m.Button("CancelBtn", {
            text: sap.ushell.resources.i18n.getText("cancelBtn"),
            press: function () {
                //Need to revert any model changes if took place by the user prior to pressing the cancel button
                if (that.aGroupsOriginalStates) {
                    var groups = this.getModel().getProperty('/groups'),
                        i;
                    for (i = 0; i < that.aGroupsOriginalStates.length; i++) {
                        if (groups[i].groupId === that.aGroupsOriginalStates[i].groupId) { //just to be sure that the groups order was not changed...if it was - skip this group (most chances are that there has been no change)
                            groups[i].isGroupVisible = that.aGroupsOriginalStates[i].isVisible;
                        }
                    }
                }
                this.oDialog.close();
            }.bind(this)
        });

        this.oDialog = new sap.m.Dialog({
            id: "groupsVisibilityDialog",
            title: sap.ushell.resources.i18n.getText("hideGroups_title"),
            contentWidth : "29.6rem",
            stretch: jQuery.device.is.phone,
            content : this.groupsTable,
            beginButton: this.saveButton,
            endButton: this.cancelButton,
            initialFocus: "groupsVisibilityDialog",
            afterClose: function () {
                this.oDialog.destroy();
            }.bind(this)
        }).addStyleClass("sapUshellGroupsVisibilityDialog");
        this.oDialog.addCustomData(new sap.ushell.ui.launchpad.AccessibilityCustomData({
            key: "aria-label",
            value: sap.ushell.resources.i18n.getText("hideGroupsDialog_ariaLabel"),
            writeToDom: true
        }));
        this.getModelStates = function (groups) {
            if (!groups) {
                return;
            }
            var aStates = [],
                i;
            for (i = 0; i < groups.length; i++) {
                aStates.push({
                    groupId: groups[i].groupId,
                    isVisible: groups[i].isGroupVisible
                });
            }
            return aStates;
        };

        this.aGroupsStates = this.oModel.getProperty('/groups');
        this.aGroupsOriginalStates = this.getModelStates(this.aGroupsStates);
        this.oDialog.open();
    };
}());
}; // end of sap/ushell/ui/footerbar/HideGroupsButton.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.footerbar.UserPreferencesButton') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.footerbar.UserPreferencesButton.
jQuery.sap.declare("sap.ushell.ui.footerbar.UserPreferencesButton");

jQuery.sap.require('sap.m.Button'); // unlisted dependency retained



/**
 * Constructor for a new ui/footerbar/UserPreferencesButton.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.m.Button#constructor sap.m.Button}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/footerbar/UserPreferencesButton
 * @extends sap.m.Button
 * @version 1.32.6
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.footerbar.UserPreferencesButton
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.m.Button.extend("sap.ushell.ui.footerbar.UserPreferencesButton", { metadata : {

	library : "sap.ushell"
}});


/**
 * Creates a new subclass of class sap.ushell.ui.footerbar.UserPreferencesButton with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.footerbar.UserPreferencesButton.extend
 * @function
 */

// Start of sap/ushell/ui/footerbar/UserPreferencesButton.js
/*global jQuery, sap*/

(function () {
    "use strict";
    /*global jQuery, sap, window*/
    jQuery.sap.require('sap.m.Dialog'); // unlisted dependency retained

    jQuery.sap.require('sap.m.Button'); // unlisted dependency retained

    
    
    

    jQuery.sap.declare("sap.ushell.ui.footerbar.UserPreferencesButton");

    /**
     * UserPreferencesButton
     *
     * @name sap.ushell.ui.footerbar.UserPreferencesButton
     * @private
     * @since 1.16.0
     */
    sap.ushell.ui.footerbar.UserPreferencesButton.prototype.init = function () {
        this.setIcon('sap-icon://person-placeholder');
        this.setWidth('100%');
        this.translationBundle = sap.ushell.resources.i18n;
        this.setText(this.translationBundle.getText("userPreferences"));
        this.setTooltip(this.translationBundle.getText("userPreferences_tooltip"));
        this.attachPress(this.showUserPreferencesDialog);
        //call the parent sap.m.Button init method
        if (sap.m.Button.prototype.init) {
            sap.m.Button.prototype.init.apply(this, arguments);
        }
    };

    sap.ushell.ui.footerbar.UserPreferencesButton.prototype.createDialog = function () {
        var saveButton;
        var cancelButton;
        var that = this;

        saveButton = this._createSaveButton();
        cancelButton = this._createCancelButton();

        this.oDialog = new sap.m.Dialog({
            id: "userPreferencesDialog",
            title: "{/userPreferences/dialogTitle}",
            contentWidth: "29.6rem",
            content: null,
            contentHeight: "17rem",
            buttons: [saveButton, cancelButton],
            afterClose: function () {
                that.oDialog.destroy();
                this.oUser.resetChangedProperties();
            }.bind(that),
            stretchOnPhone: true
        }).addStyleClass("sapUshellUserPreferencesDialog");

        this._addDialogBackButton();
        this.oDialog.setModel(this.getModel());
        this.oDialog.addCustomData(new sap.ushell.ui.launchpad.AccessibilityCustomData({
            key: "aria-label",
            value: that.translationBundle.getText("UserPreferences_Dialog_Main_label"),
            writeToDom: true
        }));
        this.oDialog.addContent(this._getOriginalDialogContent());
    };

    sap.ushell.ui.footerbar.UserPreferencesButton.prototype._getOriginalDialogContent = function () {
        if (!this.oInitialContent) {
            var oUserDetails;
            var oEntryList;

            oUserDetails = this._getUserDetailsControl();
            oEntryList = this._getEntryListControl();

            this.oInitialContent = new sap.ui.layout.VerticalLayout('userPreferencesLayout', {
                content: [oUserDetails, oEntryList],
                width: "100%"
            });
        }

        return this.oInitialContent;
    };

    sap.ushell.ui.footerbar.UserPreferencesButton.prototype._getEntryListControl = function () {
        var oEntryTemplate = this._getUserPrefEntriesTemplate();
        var xRayEnabled = this.getModel() && this.getModel().getProperty('/enableHelp');
        var that = this,
            sUserName = this.oUser.getFullName();

        var entryList = new sap.m.List('userPrefEnteryList', {
            items : {
                path     : "/userPreferences/entries",
                template : oEntryTemplate
            }
        });
        entryList.addCustomData(new sap.ushell.ui.launchpad.AccessibilityCustomData({
            key: "aria-label",
            value: that.translationBundle.getText("UserPreferences_EntryList_label") + sUserName,
            writeToDom: true
        }));

        var origOnAfterRendering = entryList.onAfterRendering;
        entryList.onAfterRendering = function () {
            var aEntries = this.getItems();
            var entryPath;

            //Execute the genuine onAfterRendering logic of the list.
            origOnAfterRendering.apply(this, arguments);
            //for each item in the list we need to add XRay help id
            //for each item in the list we need to execute the relevant function to get the entry value
            for (var i = 0; i < aEntries.length; i++) {
                entryPath = aEntries[i].getBindingContext().getPath();
                //we would like to set the current entry value in case valueResult property is null
                if (!that.getModel().getProperty(entryPath + "/valueResult")) {
                    that._setEntryValueResult(entryPath);
                }
                if (xRayEnabled) {
                    that._addXRayHelpId(entryPath, aEntries[i]);
                }
            }
        };

        return entryList;
    };

    sap.ushell.ui.footerbar.UserPreferencesButton.prototype._addXRayHelpId = function (entryPath, oListItem) {
        var helpID = this.getModel().getProperty(entryPath + "/entryHelpID");

        if (helpID) {
            oListItem.addStyleClass("help-id-" + helpID);
        }
    };

    sap.ushell.ui.footerbar.UserPreferencesButton.prototype._setEntryValueResult = function (entryPath) {
        var that = this;
        var isEditable = this.getModel().getProperty(entryPath + "/editable");
        var valueArgument = this.getModel().getProperty(entryPath + "/valueArgument");
        if (typeof valueArgument === "function") {
            //Display "Loading..." and disable the entry until the value result is available
            this.getModel().setProperty(entryPath + "/valueResult", this.translationBundle.getText("genericLoading"));
            this.getModel().setProperty(entryPath + "/editable", false);
            var oValuePromise = valueArgument();

            oValuePromise.done(function(valueResult) {
                that.getModel().setProperty(entryPath + "/editable", isEditable);
                that.getModel().setProperty(entryPath + "/visible", typeof (valueResult) === 'object' ? !!valueResult.value : true);
                that.getModel().setProperty(entryPath + "/valueResult", typeof (valueResult) === 'object' ? valueResult.displayText : valueResult);
            });
            oValuePromise.fail(function() {
                that.getModel().setProperty(entryPath + "/valueResult", that.translationBundle.getText("loadingErrorMessage"));
            });
        } else if (!!valueArgument) {//if valueArgument is not null or undefined, we would like to present it
            this.getModel().setProperty(entryPath + "/valueResult", valueArgument);
            this.getModel().setProperty(entryPath + "/editable", isEditable);
        } else {//in any other case (valueArgument is not function \ String \ Number \ Boolean)
            this.getModel().setProperty(entryPath + "/valueResult", this.translationBundle.getText("loadingErrorMessage"));
        }
    };

    sap.ushell.ui.footerbar.UserPreferencesButton.prototype._getUserPrefEntriesTemplate = function () {
        var that = this;
        var pressHandler = function (e) {
            var isContentValid = true;
            var entryLabel = e.getSource().getLabel();
            var entryPath = e.getSource().getBindingContext().getPath();
            that.getModel().setProperty("/userPreferences/activeEntryPath",entryPath);
            that._setDetailedEntryModeMode(true, entryPath, entryLabel, entryPath);
            that.oDialog.removeAllContent();
            var oContent = that.getModel().getProperty(entryPath + "/contentResult");
            if (oContent) {
                that.oDialog.addContent(oContent);
            } else {
                var oBusyIndicator = null;// oBusyIndicator is initialized only when bShowBusyIndicator === true
                var bShowBusyIndicator = true,
                    bIsBusyIndicatorShown = false;
                var contentFunction = that.getModel().getProperty(entryPath + "/contentFunc");
                if (typeof contentFunction === "function") {
                    that.getModel().setProperty(entryPath + "/isDirty", true);//Set isDirty = true to the entry. Relevant for saving flow.
                    var oContentPromise = contentFunction();

                    oContentPromise.done(function(contentResult) {
                        bShowBusyIndicator = false;
                        if (bIsBusyIndicatorShown === true) {
                            that.oDialog.removeAllContent();
                            oBusyIndicator.destroy();//oBusyIndicator is destroyed only when it is actually presented
                        }

                        if (contentResult instanceof sap.ui.core.Control) {

                            that.getModel().setProperty(entryPath + "/contentResult", contentResult);
                            that.oDialog.addContent(contentResult);
                        } else {
                            isContentValid = false;
                        }
                    });
                    oContentPromise.fail(function() {
                        bShowBusyIndicator = false;
                        if (bIsBusyIndicatorShown === true) {
                            that.oDialog.removeAllContent();
                            oBusyIndicator.destroy();//oBusyIndicator is destroyed only when it is actually presented
                        }
                        isContentValid = false;
                    });

                    oContentPromise.always(function() {
                        if (isContentValid === false) {
                            var oErrorContent = new sap.m.FlexBox("userPrefErrorFlexBox", {
                                height: "5rem",
                                alignItems: sap.m.FlexAlignItems.Center,
                                justifyContent: sap.m.FlexJustifyContent.Center,
                                items: [new sap.m.Text("userPrefErrorText", {text: that.translationBundle.getText("loadingErrorMessage")})]
                            });

                            that.getModel().setProperty(entryPath + "/contentResult", oErrorContent);
                            that.oDialog.addContent(oErrorContent);
                        }
                    });

                    if (bShowBusyIndicator === true) {
                        oBusyIndicator = new sap.m.BusyIndicator('userPrefLoadingBusyIndicator', {size: "4rem"});
                        that.oDialog.addContent(oBusyIndicator);
                        bIsBusyIndicatorShown = true;
                    }
                }
            }
        };

        return new sap.m.DisplayListItem({
            label: "{title}",
            value: "{valueResult}",
            tooltip: {
                path: "valueResult",
                formatter: function (valueResult) {
                    return typeof (valueResult) === 'string' ? valueResult : "";
                }
            },
            type: {
                path: "editable",
                formatter: function (editable) {
                    return (editable === true) ? "Navigation" : "Inactive";//Default is Inactive
                }
            },
            visible: {
                path: "visible",
                formatter: function (visible) {
                    return (visible !== undefined) ? visible : true;
                }
            },
            press: pressHandler
        });
    };

    sap.ushell.ui.footerbar.UserPreferencesButton.prototype._getUserDetailsControl = function () {
        return new sap.m.ObjectIdentifier({
            title: this.oUser.getFullName(),
            text: this.oUser.getEmail()
        }).addStyleClass("sapUshellUserPrefUserIdentifier");
    };


    sap.ushell.ui.footerbar.UserPreferencesButton.prototype._createCancelButton = function () {
        var that = this;
        return new sap.m.Button({
            id: "cancelButton",
            text: {
                parts: ['/userPreferences/entries'],
                formatter: function (aEntries) {
                    var bEditableExist = aEntries.some(function (oEntry) {
                        return oEntry.editable;
                    });
                    return bEditableExist > 0 ? that.translationBundle.getText("cancelBtn") : that.translationBundle.getText("close");
                }
            },
            press: that._dialogCancelButtonHandler.bind(that),
            visible: true
        });
    };

    sap.ushell.ui.footerbar.UserPreferencesButton.prototype._createSaveButton = function () {
        var that = this;
        return new sap.m.Button({
            id: "saveButton",
            text: this.translationBundle.getText("saveBtn"),
            press: that._dialogSaveButtonHandler.bind(that),
            visible: {
                parts: ['/userPreferences/entries'],
                formatter: function (aEntries) {
                    return aEntries.some(function (oEntry) {
                        return oEntry.editable;
                    });
                }
            }
        });
    };

    sap.ushell.ui.footerbar.UserPreferencesButton.prototype._setDetailedEntryModeMode = function (isDetailedEntryMode, entryPath, entryLabel, entryValue) {
        this.getModel().setProperty("/userPreferences/isDetailedEntryMode", !!isDetailedEntryMode);
        this.getModel().setProperty("/userPreferences/dialogTitle", entryLabel);
    };

    sap.ushell.ui.footerbar.UserPreferencesButton.prototype.showUserPreferencesDialog = function () {
        //if (oModel.getProperty("/enableHelp")) {
        //    that.themeSelection.addStyleClass('help-id-themesDropdown'); // TODO: xRay help ID
        //}

        this.oUser = sap.ushell.Container.getUser();
        this.createDialog();
        this.oDialog.open();
    };

    sap.ushell.ui.footerbar.UserPreferencesButton.prototype._dialogBackButtonHandler = function (e) {
        this.getModel().setProperty("/userPreferences/isDetailedEntryMode", false);
        this.getModel().setProperty("/userPreferences/dialogTitle", this.translationBundle.getText("userPreferences"));
        this.oDialog.removeAllContent();
        this.oDialog.addContent(this._getOriginalDialogContent());
        this._setEntryValueResult(this.getModel().getProperty("/userPreferences/activeEntryPath"));
        this.getModel().setProperty("/userPreferences/activeEntryPath",null);
    };

    sap.ushell.ui.footerbar.UserPreferencesButton.prototype._destroyDialog = function () {
        this.oHeadBar.destroy();
        this.oInitialContent.destroy();
        this.oInitialContent = null;
        this._modelCleanUpToInitial();
        this._entriesCleanUp();

        this.oDialog.destroy();
    };

    sap.ushell.ui.footerbar.UserPreferencesButton.prototype._entriesCleanUp = function () {
        var entriesArray = this.getModel().getProperty("/userPreferences/entries");
        for (var i = 0; i < entriesArray.length; i++) {
            //destroy entry content if exists
            if (entriesArray[i].contentResult) {
                entriesArray[i].contentResult.destroy();
                entriesArray[i].contentResult = null;
            }
            entriesArray[i].isDirty = false;
            entriesArray[i].valueResult = null;
        }
        //update the entries model with the clean array
        this.getModel().setProperty("/userPreferences/entries", entriesArray);
    };

    sap.ushell.ui.footerbar.UserPreferencesButton.prototype._modelCleanUpToInitial = function () {
        this.getModel().setProperty("/userPreferences/isDetailedEntryMode", false);
        this.getModel().setProperty("/userPreferences/dialogTitle", this.translationBundle.getText("userPreferences"));
    };

    sap.ushell.ui.footerbar.UserPreferencesButton.prototype._dialogSaveButtonHandler = function () {
        var saveEntriesPromise;
        saveEntriesPromise = this._saveUserPrefEntries();
        var that = this;

        //in case the save button is pressed in the detailed entry mode, there is a need to update value result
        // in the model
        var isDetailedEntryMode = this.getModel().getProperty("/userPreferences/isDetailedEntryMode");
        if (isDetailedEntryMode) {
            this.getModel().setProperty("/userPreferences/activeEntryPath",null);
        }

        saveEntriesPromise.done(function() {
            that._showSaveMessageToast();
        });

        saveEntriesPromise.fail(function(failureMsgArr) {
            jQuery.sap.require("sap.m.MessageBox");
            var errMessageText;
            var errMessageLog = "";
            if (failureMsgArr.length === 1) {
                errMessageText = that.translationBundle.getText("savingEntryError") + " ";
            } else {
                errMessageText = that.translationBundle.getText("savingEntriesError") + "\n";
            }
            failureMsgArr.forEach(function(errObject) {
                errMessageText += errObject.entry + "\n";
                errMessageLog += "Entry: " + errObject.entry + " - Error message: " + errObject.message + "\n";
            });

            sap.m.MessageBox.show(
                errMessageText, {
                    icon: sap.m.MessageBox.Icon.ERROR,
                    title: that.translationBundle.getText("Error"),
                    actions: [sap.m.MessageBox.Action.OK]
                }
            );

            jQuery.sap.log.error(
                "Failed to save the following entries"  ,
                errMessageLog,
                "sap.ushell.ui.footerbar.UserPreferencesButton"
            );
        });

        this.oDialog.close();
        this._destroyDialog();
    };

    sap.ushell.ui.footerbar.UserPreferencesButton.prototype._dialogCancelButtonHandler = function () {
        var aEntries = this.getModel().getProperty("/userPreferences/entries");
        //Invoke onCancel function for each userPreferences entry
        for (var i = 0; i < aEntries.length; i++) {
            if (aEntries[i] && aEntries[i].onCancel) {
                aEntries[i].onCancel();
            }
        }
        this.oDialog.close();
        this._destroyDialog();
    };

    sap.ushell.ui.footerbar.UserPreferencesButton.prototype._saveUserPrefEntries = function () {
        var aEntries = this.getModel().getProperty("/userPreferences/entries");
        var resultDeferred = jQuery.Deferred();
        var whenPromise;
        var currentPromise;
        var totalPromisesCount = 0;
        var failureCount = 0;
        var successCount = 0;
        var promiseArray = [];
        var failureMsgArr = [];
        var currEntryTitle;
        var saveDoneFunc = function () {
            successCount++;
            resultDeferred.notify();
        };
        var saveFailFunc = function (err) {
            failureMsgArr.push({
                entry: currEntryTitle,
                message: err
            });
            failureCount++;
            resultDeferred.notify();
        };

        for (var i = 0; i < aEntries.length; i++) {
            if (aEntries[i] && aEntries[i].isDirty === true) {//only if the entry is dirty we would like to save it
                currentPromise = aEntries[i].onSave();
                currentPromise.done(saveDoneFunc);
                currEntryTitle = aEntries[i].title;
                currentPromise.fail(saveFailFunc);
                promiseArray.push(currentPromise);//save function return jQuery Promise
                totalPromisesCount++;
            }
        }

        whenPromise = jQuery.when.apply(null, promiseArray);

        whenPromise.done(function() {
            resultDeferred.resolve();
        });

        resultDeferred.progress(function () {
            if (failureCount > 0 && (failureCount + successCount === totalPromisesCount)) {
                resultDeferred.reject(failureMsgArr);
            }
        });

        return resultDeferred.promise();
    };

    sap.ushell.ui.footerbar.UserPreferencesButton.prototype._addDialogBackButton = function () {
        var that = this;
        var oBackButton = new sap.m.Button('userPrefBackBtn', {
            visible: "{/userPreferences/isDetailedEntryMode}",
            icon: sap.ui.core.IconPool.getIconURI("nav-back"),
            press: that._dialogBackButtonHandler.bind(that),
            tooltip: this.translationBundle.getText("feedbackGoBackBtn_tooltip")
        });

        var oDialogTitle = new sap.m.Text("userPrefTitle", {
            text: "{/userPreferences/dialogTitle}"
        });

        this.oHeadBar = new sap.m.Bar({
            contentLeft: [oBackButton],
            contentMiddle: [oDialogTitle]
        });

        this.oDialog.setCustomHeader(this.oHeadBar);
    };

    sap.ushell.ui.footerbar.UserPreferencesButton.prototype._showSaveMessageToast = function () {
        jQuery.sap.require("sap.m.MessageToast");
        var message = this.translationBundle.getText("savedChanges");

        sap.m.MessageToast.show(message, {
            duration: 3000,
            width: "15em",
            my: "center bottom",
            at: "center bottom",
            of: window,
            offset: "0 -50",
            collision: "fit fit"
        });
    };
}());
}; // end of sap/ushell/ui/footerbar/UserPreferencesButton.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.HeaderTile') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.HeaderTile.
jQuery.sap.declare("sap.ushell.ui.launchpad.HeaderTile");




/**
 * Constructor for a new ui/launchpad/HeaderTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getHeaderLevel headerLevel} : sap.m.HeaderLevel (default: sap.m.HeaderLevel.H3)</li>
 * <li>{@link #getHeaderText headerText} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ushell.ui.launchpad.Tile#constructor sap.ushell.ui.launchpad.Tile}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A HeaderTile acts as a separator inside a TileContainer.
 * @extends sap.ushell.ui.launchpad.Tile
 * @version 1.32.6
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.launchpad.HeaderTile
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ushell.ui.launchpad.Tile.extend("sap.ushell.ui.launchpad.HeaderTile", { metadata : {

	library : "sap.ushell",
	properties : {
		"headerLevel" : {type : "sap.m.HeaderLevel", group : "Appearance", defaultValue : sap.m.HeaderLevel.H3},
		"headerText" : {type : "string", group : "Appearance", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.HeaderTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.HeaderTile.extend
 * @function
 */


/**
 * Getter for property <code>headerLevel</code>.
 *
 * Default value is <code>H3</code>
 *
 * @return {sap.m.HeaderLevel} the value of property <code>headerLevel</code>
 * @public
 * @name sap.ushell.ui.launchpad.HeaderTile#getHeaderLevel
 * @function
 */

/**
 * Setter for property <code>headerLevel</code>.
 *
 * Default value is <code>H3</code> 
 *
 * @param {sap.m.HeaderLevel} oHeaderLevel  new value for property <code>headerLevel</code>
 * @return {sap.ushell.ui.launchpad.HeaderTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.HeaderTile#setHeaderLevel
 * @function
 */


/**
 * Getter for property <code>headerText</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>headerText</code>
 * @public
 * @name sap.ushell.ui.launchpad.HeaderTile#getHeaderText
 * @function
 */

/**
 * Setter for property <code>headerText</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sHeaderText  new value for property <code>headerText</code>
 * @return {sap.ushell.ui.launchpad.HeaderTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.HeaderTile#setHeaderText
 * @function
 */

// Start of sap/ushell/ui/launchpad/HeaderTile.js
/**
 * @name sap.ushell.ui.launchpad.HeaderTile
 *
 * @private
 */
//sap.ushell.HeaderTile.prototype.init = function(){
//   // do something for initialization...
//};

}; // end of sap/ushell/ui/launchpad/HeaderTile.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.launchpad.PlusTile') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.launchpad.PlusTile.
jQuery.sap.declare("sap.ushell.ui.launchpad.PlusTile");




/**
 * Constructor for a new ui/launchpad/PlusTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getGroupId groupId} : string (default: '')</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul>
 * <li>{@link sap.ushell.ui.launchpad.PlusTile#event:press press} : fnListenerFunction or [fnListenerFunction, oListenerObject] or [oData, fnListenerFunction, oListenerObject]</li></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ushell.ui.launchpad.Tile#constructor sap.ushell.ui.launchpad.Tile}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * A specialized tile showing a plus icon.
 * @extends sap.ushell.ui.launchpad.Tile
 * @version 1.32.6
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.launchpad.PlusTile
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ushell.ui.launchpad.Tile.extend("sap.ushell.ui.launchpad.PlusTile", { metadata : {

	library : "sap.ushell",
	properties : {
		"groupId" : {type : "string", group : "Misc", defaultValue : ''}
	},
	events : {
		"press" : {}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.launchpad.PlusTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.launchpad.PlusTile.extend
 * @function
 */

sap.ushell.ui.launchpad.PlusTile.M_EVENTS = {'press':'press'};


/**
 * Getter for property <code>groupId</code>.
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>groupId</code>
 * @public
 * @name sap.ushell.ui.launchpad.PlusTile#getGroupId
 * @function
 */

/**
 * Setter for property <code>groupId</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sGroupId  new value for property <code>groupId</code>
 * @return {sap.ushell.ui.launchpad.PlusTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.PlusTile#setGroupId
 * @function
 */


/**
 * Fired when user clicks on the tile
 *
 * @name sap.ushell.ui.launchpad.PlusTile#press
 * @event
 * @param {sap.ui.base.Event} oControlEvent
 * @param {sap.ui.base.EventProvider} oControlEvent.getSource
 * @param {object} oControlEvent.getParameters
 * @public
 */
 
/**
 * Attach event handler <code>fnFunction</code> to the 'press' event of this <code>sap.ushell.ui.launchpad.PlusTile</code>.<br/>.
 * When called, the context of the event handler (its <code>this</code>) will be bound to <code>oListener<code> if specified
 * otherwise to this <code>sap.ushell.ui.launchpad.PlusTile</code>.<br/> itself. 
 *  
 * Fired when user clicks on the tile
 *
 * @param {object}
 *            [oData] An application specific payload object, that will be passed to the event handler along with the event object when firing the event.
 * @param {function}
 *            fnFunction The function to call, when the event occurs.  
 * @param {object}
 *            [oListener] Context object to call the event handler with. Defaults to this <code>sap.ushell.ui.launchpad.PlusTile</code>.<br/> itself.
 *
 * @return {sap.ushell.ui.launchpad.PlusTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.PlusTile#attachPress
 * @function
 */

/**
 * Detach event handler <code>fnFunction</code> from the 'press' event of this <code>sap.ushell.ui.launchpad.PlusTile</code>.<br/>
 *
 * The passed function and listener object must match the ones used for event registration.
 *
 * @param {function}
 *            fnFunction The function to call, when the event occurs.
 * @param {object}
 *            oListener Context object on which the given function had to be called.
 * @return {sap.ushell.ui.launchpad.PlusTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.launchpad.PlusTile#detachPress
 * @function
 */

/**
 * Fire event press to attached listeners.
 *
 * @param {Map} [mArguments] the arguments to pass along with the event.
 * @return {sap.ushell.ui.launchpad.PlusTile} <code>this</code> to allow method chaining
 * @protected
 * @name sap.ushell.ui.launchpad.PlusTile#firePress
 * @function
 */

// Start of sap/ushell/ui/launchpad/PlusTile.js
/*global jQuery, sap*/
/**
 * @name sap.ushell.ui.launchpad.PlusTile
 *
 * @private
 */
(function () {
    "use strict";

    sap.ushell.ui.launchpad.PlusTile.prototype.init = function () {
        this.oIcon = new sap.ui.core.Icon({
            src : 'sap-icon://add',
            tooltip : sap.ushell.resources.i18n.getText("open_catalog")
        });
    };

    sap.ushell.ui.launchpad.PlusTile.prototype.exit = function () {
        if (this.oIcon) {
            this.oIcon.destroy();
        }
    };

    sap.ushell.ui.launchpad.PlusTile.prototype.onclick = function () {
        var groupModelObject =  this.getParent().getBindingContext().getObject();
        if (!groupModelObject.object) {
            //if group is not yet created on the sever side, we can't add tiles to it
            return;
        }

        this.firePress();
    };

    sap.ushell.ui.launchpad.PlusTile.prototype.onsapspace = function () {
        this.firePress();
    };

    sap.ushell.ui.launchpad.PlusTile.prototype.onsapenter = function () {
        this.firePress();
    };

    // Override setters to avoid rerenderings
    sap.ushell.ui.launchpad.PlusTile.prototype.setGroupId = function (v) {
        this.setProperty("groupId", v, true);        // set property, but suppress rerendering
        return this;
    };
}());

}; // end of sap/ushell/ui/launchpad/PlusTile.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.shell.ToolArea') ) {
/*!
 * ${copyright}
 */
/*global jQuery, sap */
jQuery.sap.declare('sap.ushell.ui.shell.ToolArea'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
sap.ui.define("sap/ushell/ui/shell/ToolArea",['jquery.sap.global', 'sap/ushell/library', 'sap/ui/Device', './ToolAreaItem'],
    function (jQuery, library, Device, ToolAreaItem) {
        "use strict";

        var ToolArea = sap.ui.core.Control.extend("sap.ushell.ui.shell.ToolArea", {

            metadata: {
                properties: {
                    visible: {type : "boolean", group : "Appearance", defaultValue : true},
                    size: {type: "sap.ui.core.CSSSize",group : "Appearance", defaultValue : '56px'},
                    textVisible: {type: "boolean", group : "Appearance", defaultValue : true }
                },
                aggregations: {
                    toolAreaItems : {type : "sap.ushell.ui.shell.ToolAreaItem", multiple : true}
                }
            },
            renderer: {
                render: function (rm, oToolArea) {
                    if (!oToolArea.getToolAreaItems().length) {
                        return;
                    } else {

                        var id = oToolArea.getId();
                        rm.write("<div");
                        rm.writeControlData(oToolArea);
                        rm.writeAttribute("class", "sapUshellToolArea");
                        rm.write(">");
                        rm.write("<div id='", id, "-cntnt' class='sapUshellToolAreaContainer'>");
                        this.renderToolAreaItems(rm, oToolArea);
                        rm.write("</div>");
                    }
                },

                renderToolAreaItems: function (rm, oToolArea) {

                    var aItems = oToolArea.getToolAreaItems(),
                        i;
                    for (i = 0; i < aItems.length; i++) {
                        rm.write("<div");
                        rm.addClass("sapUshellToolAreaContent");
                        if (aItems[i].getSelected()) {
                            rm.addClass("sapUshellToolAreaItemSelected");
                        }
                        rm.writeClasses();
                        rm.write(">");
                        rm.renderControl(aItems[i]);
                        rm.write("</div>");
                        rm.write("<div class='sapUshellToolAreaContentSeparator'></div>");
                    }
                }
            }

        });
        ToolArea.prototype.init = function () {
            Device.media.attachHandler(this._setSize , this);
            Device.resize.attachHandler(this._setSize , this);
        };

        ToolArea.prototype.addToolAreaItem = function (oToolAreaItem) {
          if (!this.getVisible()) {
              this.setVisible(true);
          }
            this.addAggregation("toolAreaItems", oToolAreaItem, true);

            if (this.getDomRef()) {

                    var rm = sap.ui.getCore().createRenderManager();
                    rm.renderControl(oToolAreaItem);
                    rm.flush(this.getDomRef());
                    rm.destroy();

            }
        };

        ToolArea.prototype.removeToolAreaItem = function (item) {
            var aToolAreaItem = this.getToolAreaItems(),
                oToolAreaItem = typeof item === 'object' ? item : aToolAreaItem[item];
            this.removeAggregation("toolAreaItems", oToolAreaItem);
            if (this.getToolAreaItems().length < 1) {
                this.setVisible(false);
            }
        };


        ToolArea.prototype.setVisible = function (bVisible) {
            var bRendered = this.getDomRef();
            this.setProperty("visible", !!bVisible, bRendered);
            this.$().toggleClass("sapUshellShellHidden", !bVisible);

        };

        ToolArea.prototype.onBeforeRendering = function () {
            var aItems = this.getToolAreaItems(),
                i;
            this._bRenderText = aItems.length;
            for (i = 0; i < aItems.length; i++) {
                if (!aItems[i].getText()) {
                    this._bRenderText = false;
                }
            }

        };

        ToolArea.prototype._setSize = function () {
            var iSize = jQuery(".sapUshellToolArea").width() / 16;
            if (!this._bRenderText) {
                this.setProperty("textVisible", false, true);
                iSize = jQuery(".sapUshellToolAreaItm").height() / 16;
                this.$().toggleClass("sapUshellToolAreaTextHidden", true);
            }

            this.setProperty("size", iSize + "rem", true);
        };

        ToolArea.prototype.onAfterRendering = function () {
            if (this.getToolAreaItems().length) {
                this.setVisible(true);
                this._setSize();
            }

        };

        return ToolArea;

    }, /* bExport= */ true);

}; // end of sap/ushell/ui/shell/ToolArea.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.tile.DynamicTile') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.tile.DynamicTile.
jQuery.sap.declare("sap.ushell.ui.tile.DynamicTile");




/**
 * Constructor for a new ui/tile/DynamicTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getNumberValue numberValue} : string (default: '0.0')</li>
 * <li>{@link #getNumberState numberState} : sap.ushell.ui.tile.State (default: sap.ushell.ui.tile.State.Neutral)</li>
 * <li>{@link #getNumberUnit numberUnit} : string</li>
 * <li>{@link #getNumberDigits numberDigits} : int (default: 0)</li>
 * <li>{@link #getStateArrow stateArrow} : sap.ushell.ui.tile.StateArrow (default: sap.ushell.ui.tile.StateArrow.None)</li>
 * <li>{@link #getNumberFactor numberFactor} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ushell.ui.tile.TileBase#constructor sap.ushell.ui.tile.TileBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * An applauncher for apps that need to display dynamically updated information
 * @extends sap.ushell.ui.tile.TileBase
 * @version 1.32.6
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.tile.DynamicTile
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ushell.ui.tile.TileBase.extend("sap.ushell.ui.tile.DynamicTile", { metadata : {

	library : "sap.ushell",
	properties : {
		"numberValue" : {type : "string", group : "Data", defaultValue : '0.0'},
		"numberState" : {type : "sap.ushell.ui.tile.State", group : "Appearance", defaultValue : sap.ushell.ui.tile.State.Neutral},
		"numberUnit" : {type : "string", group : "Data", defaultValue : null},
		"numberDigits" : {type : "int", group : "Appearance", defaultValue : 0},
		"stateArrow" : {type : "sap.ushell.ui.tile.StateArrow", group : "Appearance", defaultValue : sap.ushell.ui.tile.StateArrow.None},
		"numberFactor" : {type : "string", group : "Data", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.tile.DynamicTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.tile.DynamicTile.extend
 * @function
 */


/**
 * Getter for property <code>numberValue</code>.
 * a number to be formatted with numberDigits decimal digits. Can be sap.ui.core.string as well.
 *
 * Default value is <code>0.0</code>
 *
 * @return {string} the value of property <code>numberValue</code>
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#getNumberValue
 * @function
 */

/**
 * Setter for property <code>numberValue</code>.
 *
 * Default value is <code>0.0</code> 
 *
 * @param {string} sNumberValue  new value for property <code>numberValue</code>
 * @return {sap.ushell.ui.tile.DynamicTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#setNumberValue
 * @function
 */


/**
 * Getter for property <code>numberState</code>.
 * The state of the number, indicating positive or negative conditions
 *
 * Default value is <code>Neutral</code>
 *
 * @return {sap.ushell.ui.tile.State} the value of property <code>numberState</code>
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#getNumberState
 * @function
 */

/**
 * Setter for property <code>numberState</code>.
 *
 * Default value is <code>Neutral</code> 
 *
 * @param {sap.ushell.ui.tile.State} oNumberState  new value for property <code>numberState</code>
 * @return {sap.ushell.ui.tile.DynamicTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#setNumberState
 * @function
 */


/**
 * Getter for property <code>numberUnit</code>.
 * The unit in which numberValue is measured
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>numberUnit</code>
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#getNumberUnit
 * @function
 */

/**
 * Setter for property <code>numberUnit</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNumberUnit  new value for property <code>numberUnit</code>
 * @return {sap.ushell.ui.tile.DynamicTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#setNumberUnit
 * @function
 */


/**
 * Getter for property <code>numberDigits</code>.
 * the number of fractional decimal digits
 *
 * Default value is <code>0</code>
 *
 * @return {int} the value of property <code>numberDigits</code>
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#getNumberDigits
 * @function
 */

/**
 * Setter for property <code>numberDigits</code>.
 *
 * Default value is <code>0</code> 
 *
 * @param {int} iNumberDigits  new value for property <code>numberDigits</code>
 * @return {sap.ushell.ui.tile.DynamicTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#setNumberDigits
 * @function
 */


/**
 * Getter for property <code>stateArrow</code>.
 * the state of the trend indicator
 *
 * Default value is <code>None</code>
 *
 * @return {sap.ushell.ui.tile.StateArrow} the value of property <code>stateArrow</code>
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#getStateArrow
 * @function
 */

/**
 * Setter for property <code>stateArrow</code>.
 *
 * Default value is <code>None</code> 
 *
 * @param {sap.ushell.ui.tile.StateArrow} oStateArrow  new value for property <code>stateArrow</code>
 * @return {sap.ushell.ui.tile.DynamicTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#setStateArrow
 * @function
 */


/**
 * Getter for property <code>numberFactor</code>.
 * defines a scaling factor (like "%", "M" or "k") right to a scaled number
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>numberFactor</code>
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#getNumberFactor
 * @function
 */

/**
 * Setter for property <code>numberFactor</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sNumberFactor  new value for property <code>numberFactor</code>
 * @return {sap.ushell.ui.tile.DynamicTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.DynamicTile#setNumberFactor
 * @function
 */

// Start of sap/ushell/ui/tile/DynamicTile.js
/**
 * Applauncher displaying an application that provides a service that returns
 * dynamic data.
 *
 * @name sap.ushell.ui.tile.DynamicTile
 *
 * @since   1.15.0
 * @private
 */

}; // end of sap/ushell/ui/tile/DynamicTile.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.tile.DynamicTileRenderer') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/*global jQuery, sap*/

(function () {
    "use strict";
    jQuery.sap.declare("sap.ushell.ui.tile.DynamicTileRenderer");
    
    jQuery.sap.require('sap.ushell.ui.tile.State'); // unlisted dependency retained

    jQuery.sap.require('sap.ui.core.format.NumberFormat'); // unlisted dependency retained


    /**
     * @name sap.ushell.ui.tile.DynamicTileRenderer.
     * @static
     * @private
     */
    sap.ushell.ui.tile.DynamicTileRenderer = sap.ui.core.Renderer.extend(sap.ushell.ui.tile.TileBaseRenderer);
    var translationBundle = sap.ushell.resources.i18n;

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     *
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     */
    sap.ushell.ui.tile.DynamicTileRenderer.renderPart = function (oRm, oControl) {
        var numValue = oControl.getNumberValue(),
            numberFactor = oControl.getNumberFactor(),
            displayNumber = numValue.toString();

        //we have to crop numbers to prevent overflow.
        //max characters without icon is 5, with icon 4.
        var maxCharactersInDisplayNumber = oControl.getIcon() ? 4 : 5;
        //check if we need to process the number of digits in case of a decimal value
        var bShouldProcessDigits = this._shouldProcessDigits(displayNumber, oControl);
        if (displayNumber.length > maxCharactersInDisplayNumber || bShouldProcessDigits) {
            var oNormalizedNumberData = this._normalizeNumber(numValue, maxCharactersInDisplayNumber, numberFactor, oControl);
            numberFactor = oNormalizedNumberData.numberFactor;
            displayNumber = oNormalizedNumberData.displayNumber;
        } else {
            var oNForm = sap.ui.core.format.NumberFormat.getFloatInstance({maxFractionDigits: maxCharactersInDisplayNumber});
            displayNumber = oNForm.format(numValue);
        }
        // write the HTML into the render manager
        oRm.write("<div");
        oRm.addClass("sapUshellDynamicTile");
        oRm.writeClasses();
        oRm.write(">");

        // dynamic data
        oRm.write("<div");
        oRm.addClass("sapUshellDynamicTileData");
        oRm.addClass((oControl.getNumberState() ? "sapUshellDynamicTileData" + oControl.getNumberState() :
        "sapUshellDynamicTileData" + sap.ushell.ui.tile.State.Neutral));
        oRm.writeClasses();
        oRm.write(">");

        //sapUshellDynamicTileIndication that includes Arrow and number factor
        oRm.write("<div class='sapUshellDynamicTileIndication'>");

        // state arrow

        if (oControl.getStateArrow()) {
            oRm.write("<div");
            oRm.addClass("sapUshellDynamicTileStateArrow");
            oRm.addClass("sapUshellDynamicTileData" + oControl.getStateArrow());
            oRm.writeClasses();
            oRm.write(">");
            oRm.write("</div>");
        }

        // unit
        oRm.write('<br><div'); //br was added in order to solve the issue of all the combination of presentation options between Number - Arrow - Unit
        oRm.addClass("sapUshellDynamicTileNumberFactor");
        oRm.writeClasses();
        oRm.writeAccessibilityState(oControl, {label : translationBundle.getText("TileUnits_lable") + numberFactor});
        oRm.write('>');
        oRm.writeEscaped(numberFactor);
        oRm.write('</div>');

        // closeing the sapUshellDynamicTileIndication scope
        oRm.write("</div>");
        //}

        oRm.write('<div');
        oRm.addClass("sapUshellDynamicTileNumber");
        oRm.writeClasses();
        if (displayNumber && displayNumber !== "") {
            oRm.writeAccessibilityState(oControl, {
                label : translationBundle.getText("TileValue_lable") + displayNumber
            });
            oRm.write('>');
            oRm.writeEscaped(displayNumber);
        } else {
            // in case numberValue is a String
            oRm.write('>');
            oRm.writeEscaped(oControl.getNumberValue());
        }
        oRm.write('</div>');

        // end of dynamic data
        oRm.write("</div>");

        // span element
        oRm.write("</div>");
    };

    sap.ushell.ui.tile.DynamicTileRenderer._normalizeNumber = function (numValue, maxCharactersInDisplayNumber, numberFactor, oControl) {
        var number;
        if (isNaN(numValue)) {
            number = numValue;
        } else {
            var oNForm = sap.ui.core.format.NumberFormat.getFloatInstance({maxFractionDigits: oControl.getNumberDigits()});

            if (!numberFactor) {
                if (numValue >= 1000000000) {
                    numberFactor = 'B';
                    numValue /= 1000000000;
                } else if (numValue >= 1000000) {
                    numberFactor = 'M';
                    numValue /= 1000000;
                } else if (numValue >= 1000) {
                    numberFactor = 'K';
                    numValue /= 1000;
                }
            }
            number = oNForm.format(numValue);
        }

        var displayNumber = number;
        //we have to crop numbers to prevent overflow
        var cLastAllowedChar = displayNumber[maxCharactersInDisplayNumber - 1];
        //if last character is '.' or ',', we need to crop it also
        maxCharactersInDisplayNumber -= (cLastAllowedChar === '.' || cLastAllowedChar === ',') ? 1 : 0;
        displayNumber = displayNumber.substring(0, maxCharactersInDisplayNumber);

        return {
            displayNumber: displayNumber,
            numberFactor: numberFactor
        };
    };

    sap.ushell.ui.tile.DynamicTileRenderer._shouldProcessDigits = function (sDisplayNumber, oControl) {
        var nDigitsToDisplay = oControl.getNumberDigits(), nNumberOfDigits;
        if (sDisplayNumber.indexOf('.') !== -1) {
            nNumberOfDigits = sDisplayNumber.split(".")[1].length;
            if (nNumberOfDigits > nDigitsToDisplay) {
                return true;
            }
        }
        return false;
    };

    sap.ushell.ui.tile.DynamicTileRenderer.getInfoPrefix = function (oControl) {
        return oControl.getNumberUnit();
    };
}());
}; // end of sap/ushell/ui/tile/DynamicTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.tile.ImageTile') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.tile.ImageTile.
jQuery.sap.declare("sap.ushell.ui.tile.ImageTile");




/**
 * Constructor for a new ui/tile/ImageTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul>
 * <li>{@link #getImageSource imageSource} : string</li></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ushell.ui.tile.TileBase#constructor sap.ushell.ui.tile.TileBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * Add your documentation for the newui/tile/ImageTile
 * @extends sap.ushell.ui.tile.TileBase
 * @version 1.32.6
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.tile.ImageTile
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ushell.ui.tile.TileBase.extend("sap.ushell.ui.tile.ImageTile", { metadata : {

	library : "sap.ushell",
	properties : {
		"imageSource" : {type : "string", group : "Appearance", defaultValue : null}
	}
}});


/**
 * Creates a new subclass of class sap.ushell.ui.tile.ImageTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.tile.ImageTile.extend
 * @function
 */


/**
 * Getter for property <code>imageSource</code>.
 * the URL of the image to display
 *
 * Default value is empty/<code>undefined</code>
 *
 * @return {string} the value of property <code>imageSource</code>
 * @public
 * @name sap.ushell.ui.tile.ImageTile#getImageSource
 * @function
 */

/**
 * Setter for property <code>imageSource</code>.
 *
 * Default value is empty/<code>undefined</code> 
 *
 * @param {string} sImageSource  new value for property <code>imageSource</code>
 * @return {sap.ushell.ui.tile.ImageTile} <code>this</code> to allow method chaining
 * @public
 * @name sap.ushell.ui.tile.ImageTile#setImageSource
 * @function
 */

// Start of sap/ushell/ui/tile/ImageTile.js
/**
 * Applauncher displaying a tile with an added image
 *
 * @name sap.ushell.ui.tile.ImageTile
 *
 * @since   1.15.0
 * @private
 */
}; // end of sap/ushell/ui/tile/ImageTile.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.tile.ImageTileRenderer') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/*global jQuery, sap*/

(function () {
    "use strict";
    jQuery.sap.declare("sap.ushell.ui.tile.ImageTileRenderer");
    

    /**
     * @name sap.ushell.ui.tile.ImageTileRenderer
     * @static
     * @private
     */

    sap.ushell.ui.tile.ImageTileRenderer = sap.ui.core.Renderer.extend(sap.ushell.ui.tile.TileBaseRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     *
     * @private
     */
    sap.ushell.ui.tile.ImageTileRenderer.renderPart = function (oRm, oControl) {
        // write the HTML into the render manager
        oRm.write("<img");
        oRm.addClass("sapUshellImageTile");
        oRm.writeClasses();
        oRm.writeAttributeEscaped("src", oControl.getImageSource());
        oRm.write("/>");
    };
}());

}; // end of sap/ushell/ui/tile/ImageTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.tile.StaticTile') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* ----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying 
 * source files only (*.control, *.js) or they will be lost after the next generation.
 * ---------------------------------------------------------------------------------- */

// Provides control sap.ushell.ui.tile.StaticTile.
jQuery.sap.declare("sap.ushell.ui.tile.StaticTile");




/**
 * Constructor for a new ui/tile/StaticTile.
 * 
 * Accepts an object literal <code>mSettings</code> that defines initial 
 * property values, aggregated and associated objects as well as event handlers. 
 * 
 * If the name of a setting is ambiguous (e.g. a property has the same name as an event), 
 * then the framework assumes property, aggregation, association, event in that order. 
 * To override this automatic resolution, one of the prefixes "aggregation:", "association:" 
 * or "event:" can be added to the name of the setting (such a prefixed name must be
 * enclosed in single or double quotes).
 *
 * The supported settings are:
 * <ul>
 * <li>Properties
 * <ul></ul>
 * </li>
 * <li>Aggregations
 * <ul></ul>
 * </li>
 * <li>Associations
 * <ul></ul>
 * </li>
 * <li>Events
 * <ul></ul>
 * </li>
 * </ul> 
 *
 * 
 * In addition, all settings applicable to the base type {@link sap.ushell.ui.tile.TileBase#constructor sap.ushell.ui.tile.TileBase}
 * can be used as well.
 *
 * @param {string} [sId] id for the new control, generated automatically if no id is given 
 * @param {object} [mSettings] initial settings for the new control
 *
 * @class
 * An applauncher tile for simple, static apps, displaying title, subtitle, an icon and additional information
 * @extends sap.ushell.ui.tile.TileBase
 * @version 1.32.6
 *
 * @constructor
 * @public
 * @name sap.ushell.ui.tile.StaticTile
 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
 */
sap.ushell.ui.tile.TileBase.extend("sap.ushell.ui.tile.StaticTile", { metadata : {

	library : "sap.ushell"
}});


/**
 * Creates a new subclass of class sap.ushell.ui.tile.StaticTile with name <code>sClassName</code> 
 * and enriches it with the information contained in <code>oClassInfo</code>.
 * 
 * <code>oClassInfo</code> might contain the same kind of informations as described in {@link sap.ui.core.Element.extend Element.extend}.
 *   
 * @param {string} sClassName name of the class to be created
 * @param {object} [oClassInfo] object literal with informations about the class  
 * @param {function} [FNMetaImpl] constructor function for the metadata object. If not given, it defaults to sap.ui.core.ElementMetadata.
 * @return {function} the created class / constructor function
 * @public
 * @static
 * @name sap.ushell.ui.tile.StaticTile.extend
 * @function
 */

// Start of sap/ushell/ui/tile/StaticTile.js
/**
 * Applauncher displaying a tile for an application that supports
 * a title, a subtitle, an icon and additional information
 *
 * @name sap.ushell.ui.tile.StaticTile
 *
 * @since   1.15.0
 * @private
 */
}; // end of sap/ushell/ui/tile/StaticTile.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.tile.StaticTileRenderer') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/*global jQuery, sap*/

(function () {
    "use strict";

    jQuery.sap.declare("sap.ushell.ui.tile.StaticTileRenderer");
    

    /**
     * @name sap.ushell.ui.tile.StaticTileRenderer 
     * @static
     * @private
     */
    sap.ushell.ui.tile.StaticTileRenderer = sap.ui.core.Renderer.extend(sap.ushell.ui.tile.TileBaseRenderer);

    /**
     * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
     * 
     * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
     * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
     *
     * @private
     */
    sap.ushell.ui.tile.StaticTileRenderer.renderPart = function (oRm, oControl) {
        // write the HTML into the base classes' render manager
        oRm.write("<span");
        oRm.addClass("sapUshellStaticTile");
        oRm.writeClasses();
        oRm.write(">");

        // span element
        oRm.write("</span>");
    };
}());

}; // end of sap/ushell/ui/tile/StaticTileRenderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.adapters.local.AppStateAdapter') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview The Unified Shell's appState adapter for the local
 *               platform.
 *               TODO will be replaced by true persistence within this SP!
 *               This adapter delegates to the Personalization Adapter
 *
 * @version
 * 1.32.6
 */
(function () {
    "use strict";
    /*jslint nomen: true*/
    /*global jQuery, sap, setTimeout */
    jQuery.sap.declare("sap.ushell.adapters.local.AppStateAdapter");
    

    // --- Adapter ---
    /**
     * This method MUST be called by the Unified Shell's personalization service only.
     * Constructs a new instance of the personalization adapter for the local
     * platform.
     *
     * @param {object}
     *            oSystem the system served by the adapter
     * @param {string} sParameters
     *            Parameter string, not in use
     * @param {object} oConfig
     *            a potential Adapter Configuration
     * @class The Unified Shell's personalization adapter for the local platform.
     *
     * @constructor
     * @since 1.28.0
     * @private
     */
    sap.ushell.adapters.local.AppStateAdapter = function (oSystem, sParameters, oConfig) {
        this._oConfig = oConfig && oConfig.config;
    };

    sap.ushell.adapters.local.AppStateAdapter.prototype._getPersonalizationService = function () {
        return sap.ushell.Container.getService("Personalization");
    };

    /**
     * save the given data sValue for the given key at the persistence layer
     * @param {string} sKey
     *            the Key value of the Application state to save,
     *            (less than 40 characters)
     * @param {string} sSessionKey
     *            a Session key (40 characters)
     *            overwriting/modifying an existing record is only permitted if the
     *            session key matches the key of the initial creation.
     *            It shall be part of the save request, but shall not be returned on reading
     *            (it is not detectable from outside).
     * @param {string} sValue
     *            the value to persist under the given key
     * @param {string} sAppName
     *            the application name (the ui5 component name)
     *            should be stored with the data to allow to identify the data association
     * @param {string}
     *            sComponent a 24 character string representing the application component,
     *            (A sap support component)
     *            may be undefined if not available on the client
     * @returns {object} promise
     *  A promise, done handler empty args
     *  fail handler sMsg argument
     * @private
     */
    sap.ushell.adapters.local.AppStateAdapter.prototype.saveAppState = function (sKey, sSessionKey, sValue, sAppname, sComponent) {
        var oPersonalizationService = this._getPersonalizationService(),
            oDeferred = new jQuery.Deferred();
        oPersonalizationService.createEmptyContainer(sKey, {keyCategory: oPersonalizationService.constants.keyCategory.GENERATED_KEY, writeFrequency: oPersonalizationService.constants.writeFrequency.HIGH, clientStorageAllowed: false}).done(function (oContainer) {
            oContainer.setItemValue("appStateData", sValue);
            oContainer.save().done(function () {
                oDeferred.resolve();
            }).fail(function (sMsg) {
                oDeferred.reject(sMsg);
                jQuery.sap.log.error(sMsg);
            });
        }).fail(function (sMsg) {
            jQuery.sap.log.error(sMsg);
            oDeferred.reject(sMsg);
        });
        return oDeferred.promise();
    };

    /**
     * read the application state sValue for the given key sKey from the persistence layer
     * @param {string} sKey
     *            the Key value of the Application state to save,
     *            (less than 40 characters)
     * @param {string} sValue
     *            the value to persist under the given key
     * @returns {object} promise
     *  A promise, done handler function(sKey, sValue)
     *  fail handler function(sMsg) argument
     * @private
     */
    sap.ushell.adapters.local.AppStateAdapter.prototype.loadAppState = function (sKey) {
        var oPersonalizationService = this._getPersonalizationService(),
            oDeferred = new jQuery.Deferred();
        oPersonalizationService.getContainer(sKey, {keyCategory: oPersonalizationService.constants.keyCategory.GENERATED_KEY, writeFrequency: oPersonalizationService.constants.writeFrequency.HIGH, clientStorageAllowed: false}).done(function (oContainer) {
            var sValue = oContainer.getItemValue("appStateData");
            oDeferred.resolve(sKey, sValue);
        }).fail(function (sMsg) {
            jQuery.sap.log.error(sMsg);
            oDeferred.reject(sMsg);
        });
        return oDeferred.promise();
    };
}());

}; // end of sap/ushell/adapters/local/AppStateAdapter.js
if ( !jQuery.sap.isDeclared('sap.ushell.adapters.local.UserDefaultParameterPersistenceAdapter') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview The Unified Shell's UserDefaultParameterPersistence adapter for the local
 *               platform.
 *               TODO will be replaced by true persistence within this SP!
 *               This adapter delegates to the Personalization Adapter
 *
 * @version
 * 1.32.6
 */
(function () {
    "use strict";
    /*jslint nomen: true*/
    /*global jQuery, sap, setTimeout */
    jQuery.sap.declare("sap.ushell.adapters.local.UserDefaultParameterPersistenceAdapter");
    

    // --- Adapter ---
    /**
     * @class The Unified Shell's UserDefaultParameterPersistence adapter for the local platform.
     * This method MUST be called by the Unified Shell's UserDefaultParameterPersistence service
     * only. Constructs a new instance of the UserDefaultParameterPersistence adapter for the local
     * platform.
     *
     * @param {object}
     *      oSystem the system served by the adapter
     * @param {string} sParameters
     *      Parameter string, not in use
     * @param {object} oConfig
     *      a potential Adapter Configuration
     * @constructor
     *
     * @since 1.32.0
     * @private
     */
    sap.ushell.adapters.local.UserDefaultParameterPersistenceAdapter = function (oSystem, sParameters, oConfig) {
        this._oConfig = oConfig && oConfig.config;
    };

    sap.ushell.adapters.local.UserDefaultParameterPersistenceAdapter.prototype._getPersonalizationService = function () {
        return sap.ushell.Container.getService("Personalization");
    };


    /**
     * Method to save the parameter value to persistence,
     * note that adapters may choose to save the value delayed and return early with
     * a resolved promise
     *
     * @param {string} sParameterName
     *      parameter name
     * @param {object} oValueObject
     *      parameter value object, containing at least a value, e.g.
     *      <code>{ value : "value" }</code>
     * @returns {object}
     *      A jQuery promise, whose done handler receives no parameters.
     *      Its fail handler receives a message string as first argument.
     *
     * @since 1.32.0
     * @private
     */
    sap.ushell.adapters.local.UserDefaultParameterPersistenceAdapter.prototype.saveParameterValue = function (sParameterName, oValueObject) {
        var oDeferred = new jQuery.Deferred();
        if (!(typeof sParameterName === "string" && sParameterName.length <= 40 && /^[A-Za-z0-9.-_]+$/.exec(sParameterName))) {
            jQuery.sap.log.error("Illegal Parameter Key, less than 40 characters and [A-Za-z0-9.-_]+ :\"" + sParameterName + "\"");
        }
        this._getUDContainer().done(function (oContainer) {
            oContainer.setItemValue(sParameterName,oValueObject);
            oContainer.save().done(oDeferred.resolve.bind(oDeferred)).fail(oDeferred.reject.bind(oDeferred));
        }).fail(function (sMsg) {
            jQuery.sap.log.error(sMsg);
            oDeferred.reject(sMsg);
        });
        return oDeferred.promise();
    };

    /**
     * Method to delete the parameter value to persistence,
     * note that adapters may choose to save the value delayed and return early with
     * a resolved promise
     *
     * @param {string} sParameterName
     *      Parameter name to be deleted
     * @returns {object}
     *      A jQuery promise, whose done handler receives no parameters.
     *      Its fail handler receives a message string as first argument.
     *
     * @since 1.32.0
     * @private
     */
    sap.ushell.adapters.local.UserDefaultParameterPersistenceAdapter.prototype.deleteParameter = function (sParameterName, oValueObject) {
        var oDeferred = new jQuery.Deferred();
        if (!(typeof sParameterName === "string" && sParameterName.length <= 40 && /^[A-Za-z0-9.-_]+$/.exec(sParameterName))) {
            jQuery.sap.log.error("Illegal Parameter Key, less than 40 characters and [A-Za-z0-9.-_]+ :\"" + sParameterName + "\"");
        }
        this._getUDContainer().done(function (oContainer) {
            oContainer.delItem(sParameterName);
            oContainer.save().done(oDeferred.resolve.bind(oDeferred)).fail(oDeferred.reject.bind(oDeferred));
        }).fail(function (sMsg) {
            jQuery.sap.log.error(sMsg);
            oDeferred.reject(sMsg);
        });
        return oDeferred.promise();
    };

    /**
     * Method to load a specific ParameterValue from persistence.
     * The first request will typically trigger loading of all parameters from the backend.
     *
     * @param {string} sParameterName
     *      parameter name
     * @returns {object}
     *      A jQuery promise, whose done handler receives as first argument a rich parameter object
     *      containing a value, e.g. <code>{ value : "value" }</code>.
     *      Its fail handler receives a message string as first argument.
     *
     * @since 1.32.0
     * @private
     */
    sap.ushell.adapters.local.UserDefaultParameterPersistenceAdapter.prototype.loadParameterValue = function (sParameterName) {
        var oDeferred = new jQuery.Deferred();
        this._getUDContainer().done(function (oContainer) {
            var v = oContainer.getItemValue(sParameterName);
            if (v) {
                oDeferred.resolve(v);
            } else {
                oDeferred.reject("no value ");
            }
        }).fail(function (sMsg) {
            jQuery.sap.log.error(sMsg);
            oDeferred.reject(sMsg);
        });
        return oDeferred.promise();
    };

    /**
     * get Present Item Keys in the persistence
     * the first request will typically trigger loading of all parameters from the backend
     *
     * @returns {object}
     *      A jQuery promise, whose done handler receives as first argument a rich parameter object
     *      containing a value, e.g. <code>{ value : "value" }</code>.
     *      Its fail handler receives a message string as first argument.
     *
     * @since 1.32.0
     * @private
     */
    sap.ushell.adapters.local.UserDefaultParameterPersistenceAdapter.prototype.getStoredParameterNames = function () {
        var oDeferred = new jQuery.Deferred();
        this._getUDContainer().done(function (oContainer) {
            var v = oContainer.getItemKeys();
            oDeferred.resolve(v);
        }).fail(function (sMsg) {
            jQuery.sap.log.error(sMsg);
            oDeferred.reject(sMsg);
        });
        return oDeferred.promise();
    };

    /**
     * Loads a UserDefault Container.
     *
     * @returns {object}
     *  A jQuery promise, whose done handler receives the container as first argument.
     *  Its fail handler receives a message string as first argument.
     *
     * @since 1.32.0
     * @private
     */
    sap.ushell.adapters.local.UserDefaultParameterPersistenceAdapter.prototype._getUDContainer = function() {
        var oPersonalizationService = this._getPersonalizationService();
        if (this._oPromise) {
            return this._oPromise;
        }
        this._oPromise = oPersonalizationService.getContainer("sap.ushell.UserDefaultParameter", {keyCategory: oPersonalizationService.constants.keyCategory.FIXED_KEY, writeFrequency: oPersonalizationService.constants.writeFrequency.LOW, clientStorageAllowed: true});
        return this._oPromise;
    };
}());

}; // end of sap/ushell/adapters/local/UserDefaultParameterPersistenceAdapter.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.controls.SearchFieldGroup') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.controls.SearchFieldGroup');
/* global jQuery, sap, window, console */
(function() {
    "use strict";

    
    
    

    sap.ui.core.Control.extend("sap.ushell.renderers.fiori2.search.controls.SearchFieldGroup", {

        metadata: {
            properties: {
                "selectActive": {
                    defaultValue: true,
                    type: "boolean"
                },
                "inputActive": {
                    defaultValue: true,
                    type: "boolean"
                },
                "buttonActive": {
                    defaultValue: true,
                    type: "boolean"
                }
            },
            aggregations: {
                "select": {
                    type: "sap.ui.core.Control",
                    multiple: false
                },
                "input": {
                    type: "sap.ui.core.Control",
                    multiple: false
                },
                "button": {
                    type: "sap.ui.core.Control",
                    multiple: false
                }
            }
        },


        init: function() {
            var that = this;

            // check activity //TODO
            that.initSelect();
            that.initInput();
            that.initButton();
        },

        initSelect: function() {
            var that = this;
            var select = new sap.ushell.renderers.fiori2.search.controls.SearchSelect(that.getId() + '-select', {});
            select.attachChange(function() {
                if (that.getAggregation("input")) {
                    var input = that.getAggregation("input");
                    input.focus();
                    //remove? //TODO
                    input.destroySuggestionRows(); // to be doubly sure to close the suggestion
                }
            });
            that.setAggregation("select", select);
        },


        initInput: function() {
            var that = this;
            var input = new sap.ushell.renderers.fiori2.search.controls.SearchInput(that.getId() + '-input', {});
            that.setAggregation("input", input);
        },


        initButton: function() {
            var that = this;
            var button = new sap.ushell.renderers.fiori2.search.controls.SearchButton(that.getId() + '-button', {
                press: function(oEvent) {
                    if (that.getAggregation("input") && that.getAggregation("input").getValue() !== '') {
                        button.getModel().invalidateQuery();
                        var input = that.getAggregation("input");
                        input.destroySuggestionRows();
                        input.triggerSearch(oEvent);
                    }
                }
            });
            that.setAggregation("button", button);
        },

        setModel: function(model) {
            if (this.getSelectActive()) {
                this.getAggregation("select").setModel(model);
            }
            if (this.getInputActive()) {
                this.getAggregation("input").setModel(model);
            }
            if (this.getButtonActive()) {
                this.getAggregation("button").setModel(model);
            }
        },

        renderer: function(oRm, oControl) {
            oRm.write('<div');
            oRm.writeControlData(oControl);
            oRm.addClass("SearchFieldGroup");
            oRm.writeClasses();
            oRm.write('>');
            oRm.write('<div class="sapUshellSearchFieldGroupContainer">');
            oRm.write('<div class="sapUshellSearchFieldGroupSubContainer">');
            if (oControl.getSelectActive() === true) {
                oRm.renderControl(oControl.getAggregation("select"));
            }
            if (oControl.getInputActive() === true) {
                oRm.renderControl(oControl.getAggregation("input"));
            }
            oRm.write('</div>');
            if (oControl.getButtonActive() === true) {
                oRm.renderControl(oControl.getAggregation("button"));
            }
            oRm.write('</div>');
            oRm.write('</div>');
        }
    });

}());

}; // end of sap/ushell/renderers/fiori2/search/controls/SearchFieldGroup.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.suggestions.InA1SuggestionProvider') ) {
(function() {
    "use strict";

    // =======================================================================
    // import packages
    // =======================================================================
    
    var SearchHelper = sap.ushell.renderers.fiori2.search.SearchHelper;

    
    var InABaseSuggestionProvider = sap.ushell.renderers.fiori2.search.suggestions.InABaseSuggestionProvider;

    
    var SuggestionTypes = sap.ushell.renderers.fiori2.search.suggestions.SuggestionTypes;

    // =======================================================================
    // declare package
    // =======================================================================
    jQuery.sap.declare('sap.ushell.renderers.fiori2.search.suggestions.InA1SuggestionProvider');

    // =======================================================================
    // ina service based suggestion provider - version 1 (old)
    // =======================================================================
    var module = sap.ushell.renderers.fiori2.search.suggestions.InA1SuggestionProvider = function() {
        this.init.apply(this, arguments);
    };

    module.prototype = jQuery.extend(new InABaseSuggestionProvider(), {

        // init
        // ===================================================================
        init: function(params) {
            // call super constructor
            InABaseSuggestionProvider.prototype.init.apply(this, arguments);
            // decorate getResultSet method for preventing request overtaking
            this.getResultSet = SearchHelper.refuseOutdatedRequests(this.getResultSet);
        },

        // get result set
        // ===================================================================    
        getResultSet: function() {
            return this.suggestionQuery.getResultSet();
        },

        // abort suggestions
        // ===================================================================        
        abortSuggestions: function() {
            this.getResultSet.abort();
        },

        // get suggestions
        // ===================================================================        
        getSuggestions: function() {

            var that = this;

            // check that BO search is enabled
            if (!that.model.isBusinessObjSearchEnabled()) {
                return jQuery.when([]);
            }

            // no suggestions for ds = apps
            if (that.model.getDataSource().equals(that.model.appDataSource)) {
                return jQuery.when([]);
            }

            // check for minimum term length
            var suggestionTerm = that.model.getProperty('/searchBoxTerm');
            if (suggestionTerm.length < 3 && that.model.isAllCategory()) {
                return jQuery.when([]);
            }

            // prepare sina suggestion query
            var splittedSuggestionTerm = that.splitSuggestionTerm(suggestionTerm);
            that.suggestionQuery.clearSearchTerms();
            if (splittedSuggestionTerm.searchTerm) {
                that.suggestionQuery.addSearchTerm(splittedSuggestionTerm.searchTerm);
            }
            that.suggestionQuery.setSuggestionTerm(splittedSuggestionTerm.suggestionTerm);
            that.suggestionQuery.setDataSource(that.model.getProperty("/dataSource"));

            // fire sina suggestion query
            return that.getResultSet().then(function(resultset) {

                // concatenate searchterm + suggestion term                
                var sinaSuggestions = resultset.getElements();
                that.concatenateSearchTerm(sinaSuggestions, splittedSuggestionTerm);

                // assemble items from result set
                var normalSuggestions = that.assembleNormalSuggestionItems(sinaSuggestions,
                    suggestionTerm);

                // add datasource label to suggestions label
                for (var i = 0; i < normalSuggestions.length; i++) {
                    var normalSuggestion = normalSuggestions[i];
                    if (that.model.isAllCategory() && normalSuggestion.dataSourceLabel) {
                        normalSuggestion.label = normalSuggestion.label +
                            " <i>in " + normalSuggestion.dataSourceLabel + "</i>";
                    }
                }

                return normalSuggestions;

            });

        },

        // assemble suggetsion item
        // ===================================================================        
        assembleNormalSuggestionItems: function(suggestions, suggestionTerm) {

            /* eslint no-lonely-if:0 */

            // suggestions are returned on three levels, example:
            // term  connector  attribute count level
            // sally all        all       10    1
            // sally employee   all       5     2 
            // sally employee   firstname 4     3
            // sally employee   lastname  1     3
            // sally customer   all       5     2
            // sally customer   name      5     3

            var that = this;
            var resultSuggestions = [];
            for (var i = 0; i < suggestions.length; i++) {

                var suggestion = suggestions[i];

                var firstSuggestionTerm;
                if (i === 0) {
                    firstSuggestionTerm = suggestion.labelRaw;
                }

                // ignore all suggestions on attribute level
                if (suggestion.attribute.value !== "$$AllAttributes$$") {
                    continue;
                }

                if (that.model.isAllCategory()) {
                    // 1. category in dropdown = all
                    if (!suggestion.dataSource.equals(that.model.allDataSource)) {
                        // 1.2 suggestion on connector level
                        if (firstSuggestionTerm === suggestion.labelRaw) {
                            // first suggestion -> suggestion on connector level are allowed
                            suggestion.dataSourceLabel = suggestion.dataSource.getLabel();
                        } else {
                            // ignore suggestion on connector level
                            continue;
                        }
                    }
                } else {
                    // 2. category in dropdown = employee
                    if (suggestion.dataSource.equals(that.model.allDataSource) === true) {
                        // 2.1 suggestion on all level
                        suggestion.dataSource = that.model.getDataSource();
                        suggestion.dataSourceLabel = suggestion.dataSource.getLabel();
                    } else {
                        // 2.2 suggestion on connector level
                        continue;
                    }
                }

                // No client-side highlighting anymore!
                //suggestion.label = SearchHelper.highlight(suggestion.labelRaw, suggestionTerm);

                // fallback in case that label is blank
                if (jQuery.type(suggestion.label) === "string" && suggestion.label.length < 1) {
                    suggestion.label = suggestion.labelRaw;
                }

                suggestion.type = SuggestionTypes.SUGGESTION_TYPE_OBJECT_DATA;
                suggestion.position = SuggestionTypes.objectData.position;
                resultSuggestions.push(suggestion);

                if (SuggestionTypes.objectData.limit === resultSuggestions.length) {
                    break;
                }
            }
            return resultSuggestions;

        }

    });

})();

}; // end of sap/ushell/renderers/fiori2/search/suggestions/InA1SuggestionProvider.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.suggestions.InA2SuggestionProvider') ) {
(function() {
    "use strict";

    // =======================================================================
    // import packages
    // =======================================================================
    
    var SearchHelper = sap.ushell.renderers.fiori2.search.SearchHelper;

    
    var InABaseSuggestionProvider = sap.ushell.renderers.fiori2.search.suggestions.InABaseSuggestionProvider;

    
    var SuggestionTypes = sap.ushell.renderers.fiori2.search.suggestions.SuggestionTypes;

    // =======================================================================
    // declare package
    // =======================================================================
    jQuery.sap.declare('sap.ushell.renderers.fiori2.search.suggestions.InA2SuggestionProvider');

    // =======================================================================
    // helper for buffering suggestion terms
    // =======================================================================
    var SuggestionTermBuffer = function() {
        this.init.apply(this, arguments);
    };
    SuggestionTermBuffer.prototype = {

        init: function() {
            this.terms = {};
        },

        addTerm: function(term) {
            term = term.trim().toLowerCase();
            this.terms[term] = true;
        },

        hasTerm: function(term) {
            term = term.trim().toLowerCase();
            return !!this.terms[term];
        },

        reset: function() {
            this.terms = {};
        }

    };

    // =======================================================================
    // ina based suggestion provider - version 2 (new)
    // =======================================================================
    var module = sap.ushell.renderers.fiori2.search.suggestions.InA2SuggestionProvider = function() {
        this.init.apply(this, arguments);
    };

    module.prototype = jQuery.extend(new InABaseSuggestionProvider(), {

        suggestionLimit: jQuery.device.is.phone ? 5 : 7,

        // init
        // ===================================================================
        init: function(params) {
            // call super constructor
            InABaseSuggestionProvider.prototype.init.apply(this, arguments);
            // decorate getResultSet method for preventing request overtaking
            this.getResultSet = SearchHelper.refuseOutdatedRequests(this.getResultSet);

            this.dataSourceDeferred = null;
        },

        // abort suggestions
        // ===================================================================        
        abortSuggestions: function() {
            this.getResultSet.abort();
        },

        // get result set
        // =================================================================== 
        getResultSet: function() {
            return this.suggestionQuery.getResultSet();
        },

        // get suggestions
        // ===================================================================        
        getSuggestions: function() {

            // handle client side datasource-suggestions for all and apps
            var that = this;
            var suggestions = that.getAllAndAppSuggestions();

            // check that BO search is enabled
            if (!that.model.isBusinessObjSearchEnabled()) {
                return jQuery.when(suggestions);
            }

            // no server request for ds = apps
            if (that.model.getDataSource().equals(that.model.appDataSource)) {
                return jQuery.when(suggestions);
            }

            // prepare sina suggestion query
            var suggestionTerm = that.model.getProperty('/searchBoxTerm');
            var splittedSuggestionTerm = that.splitSuggestionTerm(suggestionTerm);
            that.suggestionQuery.clearSearchTerms();
            if (splittedSuggestionTerm.searchTerm) {
                that.suggestionQuery.addSearchTerm(splittedSuggestionTerm.searchTerm);
            }
            that.suggestionQuery.setSuggestionTerm(splittedSuggestionTerm.suggestionTerm);
            if (!that.suggestionQuery.getDataSource() ||
                !that.model.getProperty('/dataSource').equals(that.suggestionQuery.getDataSource())) {
                that.suggestionQuery.resetFilterConditions();
            }
            that.suggestionQuery.setDataSource(that.model.getProperty("/dataSource"));

            // fire sina suggestion query
            return that.getResultSet().then(function(resultset) {

                // concatenate searchterm + suggestion term                
                var sinaSuggestions = resultset.getElements();
                that.concatenateSearchTerm(sinaSuggestions, splittedSuggestionTerm);

                // assemble items from result set
                var formattedSuggestions = that.formatSinaSuggestions(sinaSuggestions);
                suggestions.push.apply(suggestions, formattedSuggestions);

                return suggestions;
            });

        },

        // client side suggestions for all and apps
        // ===================================================================                
        getAllAndAppSuggestions: function() {

            if (!this.model.getDataSource().equals(this.model.allDataSource)) {
                return [];
            }

            var dataSources = [];
            dataSources.unshift(this.model.appDataSource);
            dataSources.unshift(this.model.allDataSource);

            var dsSuggestions = [];
            var suggestionTerms = this.model.getProperty('/searchBoxTerm');
            // suggestion shall ignore stars
            var suggestionTermsIgnoreStar = suggestionTerms.replace(/\*/g, '');
            var oTester = new SearchHelper.Tester(suggestionTermsIgnoreStar);

            for (var i = 0; i < dataSources.length; ++i) {
                var dataSource = dataSources[i];
                if (dataSource.key === this.model.getDataSource().key) {
                    continue;
                }
                var oTestResult = oTester.test(dataSource.label);
                if (oTestResult.bMatch === true) {
                    var suggestion = {};
                    suggestion.label = '<i>' + sap.ushell.resources.i18n.getText("searchInPlaceholder",
                        oTestResult.sHighlightedText) + '</i>';
                    suggestion.labelRaw = '';
                    suggestion.dataSource = dataSource;
                    suggestion.type = SuggestionTypes.SUGGESTION_TYPE_DATASOURCE;
                    suggestion.position = SuggestionTypes.datasource.position;
                    dsSuggestions.push(suggestion);
                }
            }
            return dsSuggestions;
        },

        // add sina suggestions
        // ===================================================================                
        formatSinaSuggestions: function(sinaSuggestions) {

            // reset global fields
            this.suggestions = [];
            this.firstSuggestionTerm = null;
            this.numberObjectDataSuggestions = 0;
            this.numberDataSourceSuggestions = 0;
            this.numberHistorySuggestions = 0;
            this.suggestionTermBuffer = new SuggestionTermBuffer();

            // first: process datasource and object data suggestions
            this.formatSinaSuggestionsInternal(sinaSuggestions, ['DataSources', 'ObjectData']);

            // second: process historic suggestions 
            // reason: a suggestion term appearing twice 
            // (in object data + history suggestions)
            // shall appear only once in UI as a object data suggestion
            this.formatSinaSuggestionsInternal(sinaSuggestions, ['SearchHistory']);

            return this.suggestions;
        },

        // format sina suggestion 
        // ===================================================================                
        formatSinaSuggestionsInternal: function(sinaSuggestions, suggestionTypes) {

            for (var i = 0; i < sinaSuggestions.length; ++i) {
                var sinaSuggestion = sinaSuggestions[i];

                // process only selected suggestion types
                if (suggestionTypes.indexOf(sinaSuggestion.scope) < 0) {
                    continue;
                }

                // process suggestion
                switch (sinaSuggestion.scope) {
                    case 'DataSources':
                        this.formatDataSourceSuggestion(sinaSuggestion);
                        break;
                    case 'ObjectData':
                        this.formatObjectDataSuggestion(sinaSuggestion);
                        break;
                    case 'SearchHistory':
                        this.formatHistorySuggestion(sinaSuggestion);
                        break;
                    default:
                        break;
                }
            }

        },

        // format datasource suggestion
        // ===================================================================
        formatDataSourceSuggestion: function(sinaSuggestion) {
            if (!this.model.getDataSource().equals(this.model.allDataSource)) {
                return;
            }
            if (this.numberDataSourceSuggestions >= SuggestionTypes.datasource.limit) {
                return;
            }
            if (!sinaSuggestion.dataSource.equals(this.model.allDataSource)) {
                return;
            }

            if (!sinaSuggestion.labelRaw) {
                return;
            }
            this.numberDataSourceSuggestions++;
            this.suggestions.push({
                label: '<i>' + sap.ushell.resources.i18n.getText("searchInPlaceholder", sinaSuggestion.label) + '</i>',
                labelRaw: '',
                dataSource: sinaSuggestion.labelRaw,
                type: SuggestionTypes.SUGGESTION_TYPE_DATASOURCE,
                position: SuggestionTypes.datasource.position
            });
        },

        // format bo suggestion
        // ===================================================================                    
        formatObjectDataSuggestion: function(sinaSuggestion) {
            /* eslint no-lonely-if:0 */

            // check size limit
            if (this.numberObjectDataSuggestions >= SuggestionTypes.objectData.limit) {
                return;
            }

            // ignore suggestions on attribute level
            if (sinaSuggestion.attribute.value !== '$$AllAttributes$$') {
                return;
            }

            // save first suggestion term
            if (this.firstSuggestionTerm === null) {
                this.firstSuggestionTerm = sinaSuggestion.labelRaw;
            }

            if (sinaSuggestion.dataSource.equals(this.model.allDataSource) === true) {
                // 1. suggestion on all level 
                this.numberObjectDataSuggestions++;
                this.suggestionTermBuffer.addTerm(sinaSuggestion.labelRaw);

                var label;
                if (this.firstSuggestionTerm === sinaSuggestion.labelRaw &&
                    this.model.getDataSource().equals(this.model.allDataSource)) {
                    // only the first suggestion on all level is displayed with 'in all'
                    label = this.assembleSearchInSuggestionLabel(sinaSuggestion);
                } else {
                    // subsequent suggestions on all level are only displayed with suggestion term
                    label = sinaSuggestion.label;
                }

                this.suggestions.push({
                    label: label,
                    labelRaw: sinaSuggestion.labelRaw,
                    position: SuggestionTypes.objectData.position,
                    type: SuggestionTypes.SUGGESTION_TYPE_OBJECT_DATA,
                    dataSource: this.model.getDataSource()
                });

            } else {

                // 2. suggestion on datasource/connector level

                // sugestions on datasource level only for first suggestion term
                // if not first suggestion term -> return
                if (this.firstSuggestionTerm !== sinaSuggestion.labelRaw) {
                    return;
                }

                // suggestions on datasource level only for scope=all
                // scope!=all -> return
                if (!this.model.getDataSource().equals(this.model.allDataSource)) {
                    return;
                }

                // assemble suggestion
                this.numberObjectDataSuggestions++;
                this.suggestions.push({
                    label: this.assembleSearchInSuggestionLabel(sinaSuggestion),
                    labelRaw: sinaSuggestion.labelRaw,
                    position: SuggestionTypes.objectData.position,
                    type: SuggestionTypes.SUGGESTION_TYPE_OBJECT_DATA,
                    dataSource: sinaSuggestion.dataSource
                });

            }

        },

        // format history suggestion
        // ===================================================================                        
        formatHistorySuggestion: function(sinaSuggestion) {

            // check size limit
            if (this.numberHistorySuggestions >= SuggestionTypes.history.limit) {
                return;
            }

            // consider only suggestion on all level
            if (sinaSuggestion.dataSource.equals(this.model.allDataSource) !== true) {
                return;
            }

            // avoid duplicate suggestion terms
            if (this.suggestionTermBuffer.hasTerm(sinaSuggestion.labelRaw)) {
                return;
            }

            // assemble suggestion
            this.numberHistorySuggestions++;
            this.suggestions.push({
                label: sinaSuggestion.label,
                labelRaw: sinaSuggestion.labelRaw,
                position: SuggestionTypes.history.position,
                type: SuggestionTypes.SUGGESTION_TYPE_HISTORY,
                dataSource: this.model.getDataSource()
            });

        },

        // assemble search in suggestion label
        // ===================================================================                                
        assembleSearchInSuggestionLabel: function(sinaSuggestion) {
            return sinaSuggestion.label + ' <i>in ' + sinaSuggestion.dataSource.label + "</i>";
        }

    });

})();

}; // end of sap/ushell/renderers/fiori2/search/suggestions/InA2SuggestionProvider.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.suggestions.SuggestionHandler') ) {
(function() {
    "use strict";

    // =======================================================================
    // import packages
    // =======================================================================    
    
    var SearchHelper = sap.ushell.renderers.fiori2.search.SearchHelper;

    
    var InA1SuggestionProvider = sap.ushell.renderers.fiori2.search.suggestions.InA1SuggestionProvider;

    
    var InA2SuggestionProvider = sap.ushell.renderers.fiori2.search.suggestions.InA2SuggestionProvider;

    
    var DataSourceSuggestionProvider = sap.ushell.renderers.fiori2.search.suggestions.DataSourceSuggestionProvider;

    
    var AppSuggestionProvider = sap.ushell.renderers.fiori2.search.suggestions.AppSuggestionProvider;

    // =======================================================================
    // declare package
    // =======================================================================    
    jQuery.sap.declare('sap.ushell.renderers.fiori2.search.suggestions.SuggestionHandler');
    var suggestions = sap.ushell.renderers.fiori2.search.suggestions;

    // =======================================================================
    // suggestions handler
    // =======================================================================
    suggestions.SuggestionHandler = function() {
        this.init.apply(this, arguments);
    };

    suggestions.SuggestionHandler.prototype = {

        // init
        // ===================================================================
        init: function(params) {

            // members
            var that = this;
            that.model = params.model;
            that.sina = that.model.sina;
            that.suggestionProviders = [];

            // ina service suggestion provider - version 1
            that.inA1SuggestionProvider = new InA1SuggestionProvider({
                model: that.model,
                sina: that.sina,
                suggestionQuery: that.model.suggestionQuery
            });
            that.suggestionProviders.push(that.inA1SuggestionProvider);

            // ina service suggestion provider - version 2
            that.inA2SuggestionProvider = new InA2SuggestionProvider({
                model: that.model,
                sina: that.sina,
                suggestionQuery: that.model.suggestionQuery
            });
            that.suggestionProviders.push(that.inA2SuggestionProvider);

            // datasource suggestion provider
            that.dataSourceSuggestionProvider = new DataSourceSuggestionProvider({
                model: that.model,
                sina: that.sina
            });
            that.suggestionProviders.push(that.dataSourceSuggestionProvider);

            // apps suggestion provider
            that.appSuggestionProvider = new AppSuggestionProvider({
                model: that.model
            });
            that.suggestionProviders.push(that.appSuggestionProvider);

            // decorator for delayed suggestion execution, make delayed 400ms
            that.doSuggestionInternal = SearchHelper.delayedExecution(that.doSuggestionInternal, 400);

        },

        // abort suggestions
        // ===================================================================
        abortSuggestions: function(clearSuggestions) {
            if (clearSuggestions === undefined || clearSuggestions === true) {
                this.model.setProperty("/suggestions", []);
            }
            if (this.clearSuggestionTimer) {
                clearTimeout(this.clearSuggestionTimer);
                this.clearSuggestionTimer = null;
            }
            this.doSuggestionInternal.abort(); // abort time delayed calls
            this.getSuggestionProviders().done(function(suggestionProviders) {
                for (var i = 0; i < suggestionProviders.length; ++i) {
                    var suggestionProvider = suggestionProviders[i];
                    suggestionProvider.abortSuggestions();
                }
            });
        },

        // check whether server supports scope types
        // ===================================================================                        
        supportsScopeTypes: function(serverInfo) {
            for (var i = 0; i < serverInfo.rawServerInfo.Services.length; ++i) {
                var service = serverInfo.rawServerInfo.Services[i];
                if (service.Service === 'Suggestions2') {
                    for (var j = 0; j < service.Capabilities.length; ++j) {
                        var capability = service.Capabilities[j];
                        if (capability.Capability === 'ScopeTypes') {
                            return true;
                        }
                    }
                }
            }
            return false;
        },

        // get suggestion providers dependend on server capabilities
        // ===================================================================                
        getSuggestionProviders: function() {
            var that = this;
            if (that.suggestionProvidersDeferred) {
                return that.suggestionProvidersDeferred;
            }
            that.suggestionProvidersDeferred = that.sina.sinaSystem().getServerInfo().then(
                function(serverInfo) {
                    if (!serverInfo.rawServerInfo) {
                        return [that.appSuggestionProvider];
                    }
                    // 1. bo search is enabled
                    if (that.supportsScopeTypes(serverInfo)) {
                        // 1.1 new ina service
                        that.model.suggestionQuery.setOptions(['SynchronousRun',
                            'SuggestObjectData',
                            'SuggestDataSources',
                            'SuggestSearchHistory'
                        ]);
                        return [that.appSuggestionProvider, that.inA2SuggestionProvider];
                    } else {
                        // 1.2 old ina service
                        that.model.suggestionQuery.setOptions(['SynchronousRun',
                            'SuggestObjectData'
                        ]);
                        return [that.appSuggestionProvider, that.dataSourceSuggestionProvider,
                            that.inA1SuggestionProvider
                        ];
                    }
                },
                function() {
                    // 2. no bo search
                    return jQuery.when([that.appSuggestionProvider]);
                });
            return that.suggestionProvidersDeferred;
        },

        // check if suggestions are visible
        // ===================================================================                
        isSuggestionPopupVisible: function() {
            return jQuery('.searchBOSuggestion').filter(':visible').length > 0;
        },

        // do suggestions
        // ===================================================================        
        doSuggestion: function() {
            var that = this;
            if (this.isSuggestionPopupVisible()) {
                // 1. smooth update : old suggestions are cleared when new suggestion call returns
                this.abortSuggestions(false);
                // in case suggestion call needs to long:
                // clear old suggestions after 1sec
                this.clearSuggestionTimer = setTimeout(function() {
                    that.clearSuggestionTimer = null;
                    that.model.setProperty("/suggestions", []);
                }, 1000);
            } else {
                // 2. hard update : clear old suggestions immediately
                this.abortSuggestions();
            }
            this.doSuggestionInternal(); // time delayed
        },

        // do suggestion internal
        // ===================================================================        
        doSuggestionInternal: function() {
            /* eslint no-loop-func:0 */

            // don't suggest if there is no search term
            var that = this;
            var suggestionTerm = that.model.getProperty("/searchBoxTerm");
            if (suggestionTerm.length === 0) {
                return;
            }

            // no suggestions for *
            if (suggestionTerm.trim() === '*') {
                return;
            }

            // log suggestion request
            that.model.analytics.logCustomEvent('FLP: Search', 'Suggestion', [that.model.getProperty('/searchBoxTerm'),
                that.model.getProperty('/dataSource').key
            ]);

            // get suggestion providers
            that.getSuggestionProviders().done(function(suggestionProviders) {

                // get suggestions from all providers
                var first = true;
                var pending = suggestionProviders.length;
                for (var i = 0; i < suggestionProviders.length; ++i) {
                    var suggestionProvider = suggestionProviders[i];
                    suggestionProvider.getSuggestions().done(function(result) {
                        pending--;
                        if (pending > 0 && result.length === 0) {
                            return; // empty result -> return and don't update (flicker) suggestions on UI
                        }
                        if (that.clearSuggestionTimer) {
                            clearTimeout(that.clearSuggestionTimer);
                            that.clearSuggestionTimer = null;
                        }
                        that.insertSuggestions(result, first);
                        first = false;
                    });
                }

            });

        },

        // insert suggestions
        // ===================================================================        
        insertSuggestions: function(insertSuggestions, flagReplace) {
            var suggestions = this.model.getProperty('/suggestions');
            if (flagReplace) {
                suggestions = [];
            }
            var groups = this._groupByPosition(insertSuggestions);
            for (var position in groups) {
                var group = groups[position];
                this._insertSuggestions(suggestions, group);
            }
            this.model.setProperty('/suggestions', suggestions);
        },

        // group suggestions by position
        // ===================================================================        
        _groupByPosition: function(suggestions) {
            var groups = {};
            for (var i = 0; i < suggestions.length; ++i) {
                var suggestion = suggestions[i];
                var group = groups[suggestion.position];
                if (!group) {
                    group = [];
                    groups[suggestion.position] = group;
                }
                group.push(suggestion);
            }
            return groups;
        },

        // insert suggestions (with identical)
        // ===================================================================        
        _insertSuggestions: function(suggestions, insertSuggestions) {

            // get first suggestion to be inserted
            if (insertSuggestions.length <= 0) {
                return;
            }
            var insertSuggestion = insertSuggestions[0];

            // find insertion index
            var index = 0;
            for (; index < suggestions.length; ++index) {
                var suggestion = suggestions[index];
                if (suggestion.position > insertSuggestion.position) {
                    break;
                }
            }

            // insert
            var spliceArgs = [index, 0];
            spliceArgs.push.apply(spliceArgs, insertSuggestions);
            suggestions.splice.apply(suggestions, spliceArgs);

        }

    };


})();

}; // end of sap/ushell/renderers/fiori2/search/suggestions/SuggestionHandler.js
if ( !jQuery.sap.isDeclared('sap.ushell.services.CrossApplicationNavigation') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview Cross Application Navigation
 *
 *   This file exposes an API to perform (invoke) Cross Application Navigation
 *   for applications
 *
 *   It exposes interfaces to perform a hash change and/or trigger an external navigation
 *
 * @version 1.32.6
 */


/*global jQuery, sap, window */

(function () {
    "use strict";
    /*global jQuery, sap, location, setTimeout */
    jQuery.sap.declare("sap.ushell.services.CrossApplicationNavigation");
    

    /**
     * The Unified Shell's CrossApplicationNavigation service, which allows to
     *        navigate to external targets or create links to external targets
     *
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.Container.getService("CrossApplicationNavigation")</code>.
     * Constructs a new instance of the CrossApplicationNavigation service.
     *
     *
     * CrossApplicationNavigation currently provides platform independent functionality.
     *
     * This interface is for usage by applications or shell renderers/containers.
     *
     * Usage:
     *
     * example: see demoapps/AppNavSample/MainXML.controller.js
     *
     * <code>
     *   var xnavservice =  sap.ushell && sap.ushell.Container && sap.ushell.Container.getService;<br/>
     *      && sap.ushell.Container.getService("CrossApplicationNavigation");<br/>
     *   var href = ( xnavservice && xnavservice.hrefForExternal({<br/>
     *          target : { semanticObject : "Product", action : "display" },<br/>
     *          params : { "ProductID" : "102343333" }<br/>
     *          })) || "";<br/>
     * </code>
     *
     *
     * Parameter names and values are case sensitive.
     *
     * Note that the usage of multi-valued parameters (specifying an array with more than one member as parameter value, e.g.
     * <code>  params : { A : ["a1", "a2"] } </code> )
     * is possible with this API but <b>strongly discouraged</b>. Especially the navigation target matching performed at the back-end
     * is not supported for multi-value parameters. Furthermore, it is not guaranteed that additional parameter values specified in the
     * back-end configuration are merged with parameter values passed in this method.
     *
     * Note that the application parameter length (including SemanticObject/Action) shall not exceed 512 bytes when serialized as UTF-8
     *
     * Note that when receiving the values as startup parameters (as part of the component data object) single values
     * are represented as an array of size 1. Above example is returned as
     * <code> deepEqual(getComponentData().startupParameters ,  { "ProductID" : [ "102343333" ] } ) </code>
     *
     * Make sure not to store security critical data within an URL
     * URLs may appear in a server log, be persisted inside and outside the system.
     *
     * Note: When constructing large URLs, the URLs may be shortened and persisted on a database server
     * for prolonged time, the actual data is persisted under a key accessible to any User (guessing the key).
     *
     * The same restrictions apply for the Application state
     *
     * @constructor
     * @class
     * @see sap.ushell.services.Container#getService
     * @since 1.15.0
     * @public
     */
    sap.ushell.services.CrossApplicationNavigation = function () {
        var oAppStateService;
        /**
         * Adds the system of the current application specified as <code>sap-system</code>
         * parameter in its URL to the parameter object <code>oTarget</code> used in the
         * methods {@link #hrefForExternal()} and {@link #toExternal()}.
         * The system is only added if the current application specifies it and
         * <code>oTarget</code> does not already contain this parameter.
         *
         * @param {object|string} vTarget
         *    The navigation target object or string, for example:
         *
         *  <code>
         *  {
         *      target: {
         *          semanticObject: "AnObject",
         *          action: "action"
         *      },
         *      params: { A: "B" }
         *  }
         *  </code>
         *
         *  or
         *
         *  <code>
         *  {
         *      target: {
         *          semanticObject: "AnObject",
         *          action: "action"
         *      },
         *      params: {
         *          A: ["B"],
         *          c: "e"
         *      }
         *  }
         *  </code>
         *
         *  or
         *
         *  <code>
         *  {
         *      target: {
         *          shellHash: "SO-36&jumper=postman"
         *      }
         *  }
         *  </code>
         *
         *  or
         *
         *  <code>
         *  "#SO-36&jumper=postman"
         *  </code>
         *
         * @param {object} [oComponent]
         *  the root component of the application
         *
         * @returns {string|object}
         *  the vTarget with the sap-system parameter appended (unless already
         *  present).
         * @private
         */
        function getTargetWithCurrentSystem(vTarget, oComponent) {
            var oResolution,
                sSeparator,
                sSystem,
                oClonedTarget,
                sShellHash,
                oComponentStartupParams;

            if (typeof vTarget !== "string" && !jQuery.isPlainObject(vTarget) && vTarget !== undefined) {
                jQuery.sap.log.error("Unexpected input type", null, "sap.ushell.services.CrossApplicationNavigation");
                return undefined;
            }

            if (vTarget === undefined) {
                return undefined;
            }

            if (oComponent) {
                if (typeof oComponent.getComponentData !== "function"    ||
                    !jQuery.isPlainObject(oComponent.getComponentData()) ||
                    !oComponent.getComponentData().startupParameters     ||
                    !jQuery.isPlainObject(oComponent.getComponentData().startupParameters)) {

                    jQuery.sap.log.error(
                        "Cannot call getComponentData on component",
                        "the component should be an application root component",
                        "sap.ushell.services.CrossApplicationNavigation"
                    );
                } else {
                    oComponentStartupParams = oComponent.getComponentData().startupParameters; // assume always present on root component
                    if (oComponentStartupParams.hasOwnProperty("sap-system")) {
                        sSystem = oComponentStartupParams["sap-system"][0];
                    }
                }
            } else {
                oResolution = sap.ushell.Container.getService("NavTargetResolution").getCurrentResolution();
                if (oResolution && oResolution["sap-system"]) {
                    sSystem = oResolution["sap-system"];
                } else if (oResolution && oResolution.url) {
                    sSystem = jQuery.sap.getUriParameters(oResolution.url).get("sap-system");
                }
            }

            if (jQuery.isPlainObject(vTarget)) {
                // needs deep copy
                oClonedTarget = jQuery.extend(true, {}, vTarget);
                if (!sSystem) {
                    return oClonedTarget;
                }
                if (oClonedTarget.target && oClonedTarget.target.shellHash) {
                    if (typeof oClonedTarget.target.shellHash === "string") {
                        // process shell hash as a string
                        oClonedTarget.target.shellHash = getTargetWithCurrentSystem(
                            oClonedTarget.target.shellHash, oComponent);
                    }
                    return oClonedTarget;
                }

                oClonedTarget.params = oClonedTarget.params || {};

                if (!Object.prototype.hasOwnProperty.call(oClonedTarget.params, "sap-system")) {
                    oClonedTarget.params["sap-system"] = sSystem;
                }

                return oClonedTarget;
            } else {
                sShellHash = vTarget;

                if (!sSystem) {
                    return sShellHash;
                }

                if (!/[?&]sap-system=/.test(sShellHash)) {
                    sSeparator = (sShellHash.indexOf("?") > -1) ? "&" : "?";
                    sShellHash += sSeparator + "sap-system=" + sSystem;
                }
                return sShellHash;
            }

        }

        /**
        * Returns a string which can be put into the DOM (e.g. in a link tag)
        *
        * @param {object} oArgs
        *     object encoding a semantic object and action
        *  e.g.
        *  <pre>
        *  {
        *     target : { semanticObject : "AnObject", action: "action" },
        *     params : { A : "B" }
        *  }
        *  </pre>
        *  or
        *  e.g.
        *  <pre>
        *  {
        *     target : {
        *        semanticObject : "AnObject",
        *        action: "action", context  : "AB7F3C"
        *     },
        *     params : {
        *        A : "B",
        *        c : "e"
        *     }
        *  }
        *  </pre>
        *  or
        *  <pre>
        *  {
        *     target : { shellHash : "SO-36&jumper=postman" }
        *  }
        *  </pre>
        * @param {object} [oComponent]
        *   the root component of the application
        * @param {bool} bAsync
        *   if set to <code>true</code>, a promise will be returned instead of
        *   the direct argument. The promise will only succeed after all
        *   compaction requests have been sent
        *
        * @returns {string}
        *   the href for the specified parameters; always starting with a
        *   hash character; all parameters are URL-encoded (via
        *   encodeURIComponent)
        *
        * Note that the application parameter length (including
        * SemanticObject/Action) shall not exceed 512 bytes when serialized as
        * UTF-8.
        *
        * The function can be used to convert an shell hash internal format
        * commonly encountered into the URL format to use in link tags:
        * <pre>
        * externalHash = oCrossApplicationNavigationService.hrefForExternal({
        *     target: {
        *         shellHash: oLink.intent
        *     }
        * }, that.oComponent);
        * </pre>
        *
        * @since 1.15.0
        * @public
        */
        this.hrefForExternal = function (oArgs, oComponent, bAsync) {
            var oArgsClone;
            if (sap.ushell && sap.ushell.services && sap.ushell.Container && typeof sap.ushell.Container.getService === "function" && sap.ushell.Container.getService("ShellNavigation")) {
                oArgsClone = getTargetWithCurrentSystem(oArgs, oComponent);
                return sap.ushell.Container.getService("ShellNavigation").hrefForExternal(oArgsClone, undefined, oComponent, bAsync);
            }

            jQuery.sap.log.debug("Shell not available, no Cross App Navigation");
            if (bAsync) {
                return (new jQuery.Deferred()).resolve("").promise();
            }
            return "";
        };

        /**
        * if sHashFragment is a compacted hash (sap-intent-param is present),
        * in a hash, this function replaces it into a long url with all parameters
        * expanded
        * @param {string} sHashFragment
        *   an (internal format) shell hash
        * @returns {object} promise
        *           the success handler of the resolve promise get an expanded shell hash
        *           as first argument
        * @public
        */
        this.expandCompactHash = function(sHashFragment) {
            return sap.ushell.Container.getService("NavTargetResolution").expandCompactHash(sHashFragment);
        };

        /**
         * using the browser history, this invocation attempts to navigate back to the previous application
         * This functionality simply performs a browser back today.
         * Its behaviour is subject to change.
         * It may not yield the expected result esp. on mobile devices where "back" is the previous
         * inner app state iff these are put into the history!
         *
         * @public
         */
        this.backToPreviousApp = function () {
            this.historyBack();
        };
        /**
         * performs window.history.back() if supported by the underlying
         * platform.
         * May be a noop if the url is the first url in the browser.
         *
         * @public
         */
        this.historyBack = function () {
            window.history.back();
        };
        /**
        *
        * Navigate to an external target
        *
        * @param {Object} oArgs
        * configuration object describing the target
        *
        *  e.g. <code>{ target : { semanticObject : "AnObject", action: "action" },<br/>
        *         params : { A : "B" } }</code>
        *    constructs sth. like   <code>#AnObject-action?A=B&C=e&C=j</code>;
        *  or
        *  e.g. <code>{ target : { semanticObject : "AnObject", action: "action", context  : "AB7F3C" },<br/>
        *         params : { A : "B", c : "e" } }</code>
        *  or
        *      <code>{ target : { shellHash : "SO-36&jumper=postman" },
        *      }</code>
        *
        * and navigate to it via changing the hash
        *
        * The actual navigation may occur deferred!
        *
        * Note that the application parameter length (including SemanticObject/Action) shall not exceed 512 bytes when serialized as utf-8
        * @param {object} [oComponent]
        *    an optional SAP UI5 Component,
        * @since 1.15.0
        * @public
        */
        this.toExternal = function (oArgs, oComponent) {
            var oArgsClone;
            if (sap.ushell && sap.ushell.services && sap.ushell.Container && typeof sap.ushell.Container.getService === "function" && sap.ushell.Container.getService("ShellNavigation")) {
                oArgsClone = getTargetWithCurrentSystem(oArgs, oComponent);
                sap.ushell.Container.getService("ShellNavigation").toExternal(oArgsClone, oComponent);
                return;
            }
            jQuery.sap.log.debug("Shell not avialable, no Cross App Navigation");
            return;
        };


        /**
         * Returns a string which can be put into the DOM (e.g. in a link tag)
         * given an application specific hash suffix
         *
         * Example: <code>hrefForAppSpecificHash("View1/details/0/")</code> returns
         * <code>#SemanticObject-action&/View1/details/0/</code> if the current application
         * runs in the shell and was started using "SemanticObject-action" as
         * shell navigation hash
         *
         * @param {string} sAppHash
         *   the app specific router, obtained e.g. via router.getURL(...)
         * @returns {string}
         * A string which can be put into the link tag,
         *          containing the current shell navigation target and the
         *          specified application specific hash suffix
         *
         * Note that sAppHash shall not exceed 512 bytes when serialized as UTF-8
         * @since 1.15.0
         * @public
         */
        this.hrefForAppSpecificHash = function (sAppHash) {
            if (sap.ushell && sap.ushell.services && sap.ushell.Container && typeof sap.ushell.Container.getService === "function" && sap.ushell.Container.getService("ShellNavigation")) {
                return sap.ushell.Container.getService("ShellNavigation").hrefForAppSpecificHash(sAppHash);
            }
            jQuery.sap.log.debug("Shell not available, no Cross App Navigation; fallback to app-specific part only");
            // Note: this encoding is to be kept aligned with the encoding in hasher.js ( see _encodePath( ) )
            return "#" + encodeURI(sAppHash);
        };


        /**
         * Resolves a given semantic object and business parameters to a list of links,
         * taking into account the form factor of the current device.
         *
         * @param {string} sSemanticObject
         *   the semantic object such as <code>"AnObject"</code>
         * @param {object} [mParameters]
         *   the map of business parameters with values, for instance
         *   <pre>
         *   {
         *     A: "B",
         *     c: "e"
         *   }
         *   </pre>
         * @param {boolean} [bIgnoreFormFactor=false]
         *   when set to <code>true</code> the form factor of the current device is ignored
         * @param {Object} [oComponent]
         *    SAP UI5 Component invoking the service
         * @param {string} [sAppStateKey]
         *    application state key to add to the generated links, SAP internal usage only
         * @param {boolean} [bCompactIntents]
         *    whether the returned intents should be returned in compact format. Defaults to false.
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which is resolved with an array of
         *   link objects containing (at least) the following properties:
         * <pre>
         * {
         *   intent: "#AnObject-action?A=B&C=e",
         *   text: "Perform action"
         * }
         * </pre>
         *
         * <b>NOTE:</b> the intents returned are in <b>internal</b> format and cannot be directly put into a link tag.
         * <p>
         * Example: Let the string <code>"C&A != H&M"</code> be a parameter value.
         * Intent will be encoded as<code>#AnObject-action?text=C%26A%20!%3D%20H%26M<code>.
         * Note that the intent is in <b>internal</b> format, before putting it into a link tag, you must invoke:
         * <code>externalHash = oCrossApplicationNavigationService.hrefForExternal({ target : { shellHash :  oLink.intent} }, that.oComponent);</code>
         * </p>
         *
         * @since 1.19.0
         * @public
         */
        this.getSemanticObjectLinks = function (sSemanticObject, mParameters, bIgnoreFormFactor, oComponent, sAppStateKey, bCompactIntents) {
            var mParametersPlusSapSystem = getTargetWithCurrentSystem({ params: mParameters }, oComponent).params,
                oSrv = sap.ushell.Container.getService("NavTargetResolution"),
                aExpandedIntents = sap.ushell.utils.invokeUnfoldingArrayArguments(oSrv.getSemanticObjectLinks.bind(oSrv),
                    [sSemanticObject, mParametersPlusSapSystem, bIgnoreFormFactor, oComponent, sAppStateKey, !!bCompactIntents]);

            return aExpandedIntents;
        };

        /**
         * Tells whether the given intent(s) are supported, taking into account the form factor of
         * the current device. "Supported" means that navigation to the intent is possible.
         *
         * @param {string[]} aIntents
         *   the intents (such as <code>["#AnObject-action?A=B&c=e"]</code>) to be checked
         * @param {object} [oComponent]
         *   the root component of the application
         *
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which is resolved with a map
         *   containing the intents from <code>aIntents</code> as keys. The map values are
         *   objects with a property <code>supported</code> of type <code>boolean</code>.<br/>
         *   Example:
         * <pre>
         *   {
         *     "#AnObject-action?A=B&c=e": { supported: false },
         *     "#AnotherObject-action2": { supported: true }
         *   }
         * </pre>
         * Example usage:
         * <code>
         *   this.oCrossAppNav.isIntentSupported(["SalesOrder-approve?SOId=1234"])
         *   .done(function(aResponses) {
         *     if (oResponse["SalesOrder-approve?SOId=1234"].supported===true){
         *        // enable link
         *     }
         *     else {
         *        // disable link
         *     }
         *   })
         *   .fail(function() {
         *     // disable link
         *     // request failed or other error
         *   });
         * </code>
         * * @deprecated switch to isNavigationSupported
         * Note that this has a slightly different response format
         * @since 1.19.1
         * @public
         */
        this.isIntentSupported = function (aIntents, oComponent) {
            var oDeferred = new jQuery.Deferred(),
                mOriginalIntentHash = {}, // used for remapping
                aClonedIntentsWithSapSystem = aIntents.map(function (sIntent) {
                    var sIntentWithSystem = getTargetWithCurrentSystem(sIntent, oComponent); // returns clone

                    mOriginalIntentHash[sIntentWithSystem] = sIntent;

                    return sIntentWithSystem;
                });

            sap.ushell.Container.getService("NavTargetResolution")
                .isIntentSupported(aClonedIntentsWithSapSystem)
                    .done(function (mIntentSupportedPlusSapSystem) {
                        /*
                         * Must restore keys to what the application expects,
                         * as per NavTargetResolution contract.
                         */
                        var mIntentSupportedNoSapSystem = {};
                        Object.keys(mIntentSupportedPlusSapSystem).forEach(function (sKeyPlusSapSystem) {
                            mIntentSupportedNoSapSystem[
                                mOriginalIntentHash[sKeyPlusSapSystem]
                            ] = mIntentSupportedPlusSapSystem[sKeyPlusSapSystem];
                        });
                        oDeferred.resolve(mIntentSupportedNoSapSystem);
                    })
                    .fail(oDeferred.reject.bind(oDeferred));

            return oDeferred.promise();
        };

        /**
         * Tells whether the given navigation intent(s) are supported for the given
         * parameters, form factor etc
         * "Supported" means that a valid navigation target is configured for the
         * user for the given device.
         *
         * This is effectively a test function for {@link toExternal}/ {@link hrefForExternal}.
         * It is functionally equivalent to {@link isIntentSupported} but accepts the same interface
         * as {@link toExternal}/ {@link hrefForExternal}.
         *
         * @param {object[]} aIntents
         *   the intents (such as <code>["#AnObject-action?A=B&c=e"]</code>) to be checked
         * with object being instances the oArgs object of toExternal, hrefForExternal etc.
         *
         *  e.g. <code>
         *  {
         *      target: {
         *          semanticObject: "AnObject",
         *          action: "action"
         *      },
         *      params: {
         *          A: "B"
         *      }
         *  }
         *  </code>
         *  or
         *  e.g. <code>
         *  {
         *      target: {
         *          semanticObject: "AnObject",
         *          action: "action"
         *      },
         *      params: {
         *          A: "B",
         *          c: "e"
         *      }
         *  }
         *  </code>
         *  or
         *  <code>
         *  {
         *      target: {
         *          shellHash: "SO-36&jumper=postman"
         *      },
         *  }
         *  </code>
         * @param {object} [oComponent]
         *   the root component of the application
         *
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which is resolved with an array (!) of
         *   objects representing whether the intent is supported or not
         *   objects with a property <code>supported</code> of type <code>boolean</code>.<br/> representing
         *   Example:
         *
         * aIntents:
         * <pre>
         *  [
         *    {  target : {
         *          semanticObject : "AnObject",
         *          action: "action"
         *       },
         *       params : { P1 : "B", P2 : [ "V2a", "V2b"]  }
         *    },
         *    {  target : {
         *          semanticObject : "SalesOrder",
         *          action: "display"
         *       },
         *       params : { P3 : "B", SalesOrderIds : [ "4711", "472"] }
         *    }
         * ]
         * </pre>
         *
         * response: [Indices correspond]
         * <pre>
         * [
         *   { supported: false },
         *   { supported: true }
         * ]
         * </pre>
         * Example usage:
         * <code>
         * this.oCrossAppNav.isNavigationSupported([ ])
         * .done(function(aResponses) {
         *   if (oResponse[0].supported===true){
         *      // enable link
         *   }
         *   else {
         *      // disable link
         *   }
         * })
         * .fail(function() {
         *   // disable link
         *   // request failed or other fatal error
         * });
         * </code>
         *
         * @since 1.32
         * @public
         */
        this.isNavigationSupported = function (aIntents, oComponent) {
            var aClonedIntents = aIntents.map(function (oIntent) {
                return getTargetWithCurrentSystem(oIntent, oComponent); // returns clone
            });

            return sap.ushell.Container.getService("NavTargetResolution")
                .isNavigationSupported(aClonedIntents);
        };


        /**
         * Tells whether the given URL is supported for the current User.
         *
         * A URL is either supported if it is an intent and a target for the user exists
         * or if it not recognized as a Fiori intent of the same launchpad:
         * Examples for URLs qualified as "supported"
         * E.g.:
         *  * a non-fiori url, e.g. <code>www.sap.com</code> <code>http://mycorp.com/sap/its/webgui</code>
         *  * a hash not recognized as an intent  <code>#someotherhash</code>
         *  * a Fiori URL pointing to a different launchpad
         *
         * <pre>
         *   "https://www.sap.com" -> true, not rejected
         *   "#NotAFioriHash" -> true, not rejected
         *   "#PurchaseOrder-approve?POId=1899" -> true (if application is assigned to user)
         *   "#SystemSettings-change?par=critical_par" -> false (assuming application is not assigned to user)
         *   "https://some.other.system/Fiori#PurchaseOrder-approve?POId=1899" -> true, not rejected
         * </pre>
         *
         * Note that this only disqualifies intents for the same Launchpad.
         * It does not validate whether a URL is valid in general.
         *
         * @param {string} sUrl
         *   URL to test
         *
         * @returns {object}
         *   A <code>jQuery.Deferred</code> object's promise which is resolved
         *   if the URL is supported and rejected if not. The promise does not
         *   return parameters.
         *
         * @since 1.30.0
         * @private
         */
        this.isUrlSupported = function (sUrl) {
            var oDeferred = new jQuery.Deferred(),
                oUrlParsingService,
                sHash;
            if (typeof sUrl !== "string") {
                oDeferred.reject();
                return oDeferred.promise();
            }
            oUrlParsingService = sap.ushell.Container.getService("URLParsing");
            if (oUrlParsingService.isIntentUrl(sUrl)) {
                sHash = oUrlParsingService.getHash(sUrl);
                this.isIntentSupported(["#" + sHash])
                    .done(function (oResult) {
                        if (oResult["#" + sHash] && oResult["#" + sHash].supported) {
                            oDeferred.resolve();
                        } else {
                            oDeferred.reject();
                        }
                    })
                    .fail(function () {
                        oDeferred.reject();
                    });
            } else {
                oDeferred.resolve();
            }
            return oDeferred.promise();
        };

        /**
         * Resolves a given navigation intent (if valid) and returns
         * the respective component instance for further processing.
         *
         * This method should be accessed by the Unified Inbox only.
         *
         * @param {string} sIntent
         *     Semantic object and action as a string with a "#" as prefix
         * @param {object} oConfig
         *     Configuration used to instantiate the component
         * @returns {object} promise (component instance)
         *
         * @since 1.32.0
         * @private
         */
        this.createComponentInstance = function (sIntent, oConfig) {
            var oDeferred = new jQuery.Deferred(),
                oUrlParsingService = sap.ushell.Container.getService("URLParsing"),
                sCanonicalIntent = oUrlParsingService.constructShellHash(oUrlParsingService.parseShellHash(sIntent));

            // abort if intent is invalid
            if (!sCanonicalIntent) {
                oDeferred.reject("Navigation intent invalid!");
                return oDeferred.promise();
            }

            sap.ushell.Container.getService("NavTargetResolution").resolveHashFragment("#" + sCanonicalIntent)
                .done(function (oResult) {
                    var iIndex = oResult.url.indexOf("?"),
                        oComponentData = { startupParameters : {}};

                    oConfig = oConfig || {};

                    // If the application type equals "URL" and additionalInformation is undefined,
                    // the promise will be rejected if additionalInformation is not checked for
                    // existence.
                    if (oResult.applicationType !== sap.ushell.components.container.ApplicationType.URL
                            && !(/^SAPUI5\.Component=/.test(oResult.additionalInformation))) {
                        oDeferred.reject("The resolved target mapping is not of type UI5 component.");
                        return oDeferred.promise();
                    }

                    if (iIndex >= 0) {
                        oComponentData.startupParameters = jQuery.sap.getUriParameters(oResult.url).mParams;
                        oComponentData["sap-xapp-state"] = oComponentData.startupParameters["sap-xapp-state"];
                        delete oComponentData.startupParameters["sap-xapp-state"];
                        oResult.url = oResult.url.slice(0, iIndex);
                    }

                    oConfig.name = oResult.additionalInformation &&
                        oResult.additionalInformation.replace(/^SAPUI5\.Component=/, "");
                    oConfig.url = oResult.url;

                    if (oConfig.componentData) {
                        jQuery.extend(true, oComponentData, oConfig.componentData);
                    }

                    oConfig.componentData = oComponentData;

                    if (oConfig.async === true) {
                        sap.ui.component(oConfig).then(
                            function (oComponent) {
                                oDeferred.resolve(oComponent);
                            },
                            function (oError) {
                                // errors always logged per component
                                oError = oError || "";
                                jQuery.sap.log.error("Cannot create UI5 component: " + oError,
                                    oError.stack,
                                    "sap.ushell.services.CrossApplicationNavigation");
                                oDeferred.reject(oError);
                            }
                        );
                    } else {
                        oDeferred.resolve(sap.ui.component(oConfig));
                    }

                })
                .fail(function (sMessage) {
                    oDeferred.reject(sMessage);
                });

            return oDeferred.promise();
        };

        /**
         * Creates an empty app state object which act as a parameter container for
         * cross app navigation.
         * @param {object} oAppComponent - a UI5 component used as context for the app state
         * @return {object} App state Container
         * @since 1.28
         * @protected  SAP Internal usage only, beware! internally public, can not be changed,
         * but not part of the public documentation
         */
        this.createEmptyAppState = function (oAppComponent) {
            if (!oAppStateService) {
                oAppStateService = sap.ushell.Container.getService("AppState");
            }
            if (!(oAppComponent instanceof sap.ui.core.UIComponent)) {
                throw new Error("oAppComponent passed must be a UI5 Component");
            }
            return oAppStateService.createEmptyAppState(oAppComponent);
        };

        /**
         * Get the app state object that was used for the current cross application navigation
         * @param {object} oAppComponent - UI5 component, key will be extracted from component data
         * @return {object} promise object returning the app state object
         *    Note that this is an unmodifiable container and its data must be copied into a writable container!
         * @since 1.28
         * @protected  SAP Internal usage only, beware! internally public, can not be changed, but not part of the
         * public documentation
         */
        this.getStartupAppState = function (oAppComponent) {
            this._checkComponent(oAppComponent);
            var sContainerKey = oAppComponent.getComponentData() && oAppComponent.getComponentData()["sap-xapp-state"] && oAppComponent.getComponentData()["sap-xapp-state"][0];
            return this.getAppState(oAppComponent, sContainerKey);
        };

        /**
         * Check that oAppComponent is of proper type
         * Throws if not correct, returns undefined
         * @param {object} oAppComponent
         *   application component
         * @private
         */
        this._checkComponent = function (oAppComponent) {
            if (!(oAppComponent instanceof sap.ui.core.UIComponent)) {
                throw new Error("oComponent passed must be a UI5 Component");
            }
        };

        /**
         * Get an app state object given a key
         * A lookup for a cross user app state will be performed.
         * @param {object} oAppComponent - UI5 component, key will be extracted from component data
         * @param {object} sAppStateKey - the application state key
         *  SAP internal usage only
         * @return {object} promise object returning the app state object
         *    Note that this is an unmodifiable container and its data must be copied into a writable container!
         * @since 1.28
         * @protected  SAP Internal usage only, beware! internally public, can not be changed, but not part of the
         * public documentation
         */
        this.getAppState = function (oAppComponent, sAppStateKey) {
            // see stakeholders in SFIN etc.
            var oContainer,
                oDeferred = new jQuery.Deferred();
            this._checkComponent(oAppComponent);
            if (!oAppStateService) {
                oAppStateService = sap.ushell.Container.getService("AppState");
            }
            if (typeof sAppStateKey !== "string") {
                if (sAppStateKey !== undefined) {
                    jQuery.sap.log.error("Illegal Argument sAppStateKey ");
                }
                setTimeout(function () {
                    oContainer = oAppStateService.createEmptyUnmodifiableAppState(oAppComponent);
                    oDeferred.resolve(oContainer);
                }, 0);
                return oDeferred.promise();
            }
            return oAppStateService.getAppState(sAppStateKey);
        };

        /**
         * Get data of an AppStates data given a key
         * A lookup for a cross user app state will be performed.
         * @param {object} sAppStateKeyOrArray - the application state key, or an array, see below
         *  SAP internal usage only
         * @return {object} promise object returning the data of an AppState object,
         * or an empty <code>{}</code> javascript object if the key could not be resolved or
         * an error occurred!
         * @since 1.32
         * @protected  SAP Internal usage only, beware! internally public, can not be changed, but not part of the
         * public documentation
         * This is interface exposed to platforms who need a serializable form of the application state
         * data
         *
         * Note: this function may also be used in a multivalued invocation:
         * pass as sAppStateKey an array <code>[["AppStateKey1"],["AppStateKey2"],...]</code>
         * the result of the response will an corresponding array of array
         * <code>[[{asdata1}],[{asdata2}]</code>
         * @private
         * internal usage(exposure to WebDypnro ABAP)
         */
        this.getAppStateData = function (sAppStateKeyOrArray) {
            return sap.ushell.utils.invokeUnfoldingArrayArguments(this._getAppStateData.bind(this),
                    [sAppStateKeyOrArray]);
        };
        /**
         * Get data of an AppStates data given a key
         * A lookup for a cross user app state will be performed.
         * @param {object} sAppStateKey - the application state key, or an array, see below
         *  SAP internal usage only
         * @return {object} promise object returning the data of an AppState object,
         * or an empty <code>{}</code> javascript object if the key could not be resolved or
         * an error occurred!
         * @since 1.32
         * @protected  SAP Internal usage only, beware! internally public, can not be changed, but not part of the
         * public documentation
         * This is interface exposed to platforms who need a serializable form of the application state
         * data
         *
         * Note: this function may also be used in a multivalued invocation:
         * pass as sAppStateKey an array <code>[["AppStateKey1"],["AppStateKey2"],...]</code>
         * the result of the response will an corresponding array of array
         * <code>[[{asdata1}],[{asdata2}]</code>
         * @private
         */
        this._getAppStateData = function (sAppStateKey) {
            var oDeferred = new jQuery.Deferred();
            if (!oAppStateService) {
                oAppStateService = sap.ushell.Container.getService("AppState");
            }
            if (typeof sAppStateKey !== "string") {
                if (sAppStateKey !== undefined) {
                    jQuery.sap.log.error("Illegal Argument sAppStateKey ");
                }
                setTimeout(function () {
                    oDeferred.resolve(undefined);
                }, 0);
            } else {
                oAppStateService.getAppState(sAppStateKey).done(function(oAppState) {
                    oDeferred.resolve(oAppState.getData());
                }).fail(oDeferred.resolve.bind(oDeferred,undefined));
            }
            return oDeferred.promise();
        };
        /**
         * persist multiple app states
         * (in future potentially batched in a single roundtrip)
         * @param {Array} aAppStates
         *    Array of application States
         * @returns {object} a jQuery.Deferred
         * returns a promise, in case of success an array of individual save promise objects is returned as argument
         * in case of a reject, individual respones are not available
         * @private see remarks in getAppState
         */
        this.saveMultipleAppStates = function (aAppStates) {
            var aResult = [],
                oDeferred = new jQuery.Deferred();
            aAppStates.forEach(function (oAppState) {
                aResult.push(oAppState.save());
            });
            jQuery.when.apply(this, aResult).done(function () {
                oDeferred.resolve(aResult);
            }).fail(function () {
                oDeferred.reject("save failed");
            });
            return oDeferred.promise();
        };
    }; // CrossApplicationNavigation

    sap.ushell.services.CrossApplicationNavigation.hasNoAdapter = true;
}());

}; // end of sap/ushell/services/CrossApplicationNavigation.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.shell.ShellLayout') ) {
/*!
 * ${copyright}
 */
/*global jQuery, sap, window, document*/
// Provides control sap.ushell.ui.shell.ShellLayout.
jQuery.sap.declare('sap.ushell.ui.shell.ShellLayout'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.theming.Parameters'); // unlisted dependency retained
jQuery.sap.require('jquery.sap.dom'); // unlisted dependency retained
jQuery.sap.require('jquery.sap.script'); // unlisted dependency retained
sap.ui.define("sap/ushell/ui/shell/ShellLayout",['jquery.sap.global', 'sap/ui/Device', 'sap/ui/core/Control', 'sap/ui/core/Popup', 'sap/ui/core/theming/Parameters',
        './SplitContainer', './ToolArea', './ToolAreaItem', './ShellTitle',
        'sap/ushell/library', 'jquery.sap.dom', 'jquery.sap.script'],
    function (jQuery, Device, Control, Popup, Parameters, SplitContainer, ToolArea, ToolAreaItem) {
        "use strict";



    /**
     * Constructor for a new ShellLayout.
     *
     * @param {string} [sId] id for the new control, generated automatically if no id is given
     * @param {object} [mSettings] initial settings for the new control
     *
     * @class
     * The shell layout is the base for the shell control which is meant as root control (full-screen) of an application.
     * It was build as root control of the Fiori Launchpad application and provides the basic capabilities
     * for this purpose. Do not use this control within applications which run inside the Fiori Lauchpad and
     * do not use it for other scenarios than the root control usecase.
     * @extends sap.ui.core.Control
     *
     * @author SAP SE
     * @version ${version}
     *
     * @constructor
     * @private
     * @since 1.25.0
     * @alias sap.ushell.ui.shell.ShellLayout
     * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
     */
        var ShellLayout = Control.extend("sap.ushell.ui.shell.ShellLayout", /** @lends sap.ushell.ui.shell.ShellLayout.prototype */ { metadata : {

            properties : {

                /**
                 * Shows / Hides the side pane.
                 */
                showPane : {type : "boolean", group : "Appearance", defaultValue : false},

                /**
                 * Whether the header can be hidden (manually or automatically). This feature is only available when touch events are supported.
                 */
                headerHiding : {type : "boolean", group : "Appearance", defaultValue : false},

                /**
                 * If set to false, no header (and no items, search, ...) is shown.
                 */
                headerVisible : {type : "boolean", group : "Appearance", defaultValue : true},

                toolAreaVisible: {type : "boolean", group : "Appearance", defaultValue : false},

                /**
                 * The title in the shell header.
                 * This property is required for the Shell initialization where the title property is passed in the constructor.
                 */
                title: {type: "string", group : "Appearance"}
            },
            defaultAggregation : "content",
            aggregations : {

                /**
                 * The content to appear in the main canvas.
                 */
                content : {type : "sap.ui.core.Control", multiple : true, singularName : "content"},

                /**
                 * The content to appear in the pane area.
                 */
                paneContent : {type : "sap.ui.core.Control", multiple : true, singularName : "paneContent"},

                /**
                 * The control to appear in the header area.
                 */
                header : {type : "sap.ui.core.Control", multiple : false},

                /**
                 * The control to appear in the sidebar (left) area.
                 */
                toolArea : {type : "sap.ushell.ui.shell.ToolArea", multiple : false},

                /**
                 * The control shown in the  Shell side bar. .
                 */
                toolAreaItems : {type : "sap.ushell.ui.shell.ToolAreaItem", multiple : true, singularName : "toolAreaItem"},


                /**
                 * Private storage for the internal split container for the canvas.
                 */
                canvasSplitContainer : {type : "sap.ushell.ui.shell.SplitContainer", multiple : false, visibility : "hidden"},

                /**
                 * Private storage for the internal split container for the curtain.
                 */
                curtainSplitContainer : {type : "sap.ushell.ui.shell.SplitContainer", multiple : false, visibility : "hidden"},

                /**
                 * The sub-header to appear in the main area.
                 */
                subHeaders : {type : "sap.ui.core.Control", multiple : true, singularName : "subHeader"}
            }
        }});


        ShellLayout._SIDEPANE_WIDTH_PHONE = 13;
        ShellLayout._SIDEPANE_WIDTH_TABLET = 13;
        ShellLayout._SIDEPANE_WIDTH_DESKTOP = 15;
        ShellLayout._HEADER_ALWAYS_VISIBLE = true; /*Whether header hiding is technically possible (touch enabled)*/
        ShellLayout._HEADER_AUTO_CLOSE = true;
        ShellLayout._HEADER_TOUCH_TRESHOLD = 15;
        if (Device.browser.chrome && Device.browser.version < 36) {
            //see https://groups.google.com/a/chromium.org/forum/#!topic/input-dev/Ru9xjSsvLHw --> chrome://flags/#touch-scrolling-mode
            ShellLayout._HEADER_TOUCH_TRESHOLD = 10;
        }

        ShellLayout.prototype.init = function () {
            this._rtl = sap.ui.getCore().getConfiguration().getRTL();
            this._animation = sap.ui.getCore().getConfiguration().getAnimation();
            this._showHeader = true;
            this._showCurtain = false;
            this._iHeaderHidingDelay = 3000; /*Currently hidden but maybe a property later (see getter and setter below)*/
            this._useStrongBG = false;

            this._cont = new SplitContainer(this.getId() + "-container");
            this._cont._bRootContent = true; // see e.g. sap.m.App#onAfterRendering
            this.setAggregation("canvasSplitContainer", this._cont, true);

            this._curtCont = new SplitContainer(this.getId() + "-curt-container");
            this._curtCont._bRootContent = true; // see e.g. sap.m.App#onAfterRendering
            this.setAggregation("curtainSplitContainer", this._curtCont, true);

            this._toolArea = new ToolArea(this.getId() + "-toolarea");
            this.setToolArea(this._toolArea);

            this._setSidePaneWidth();

            Device.media.attachHandler(this._handleMediaChange, this, Device.media.RANGESETS.SAP_STANDARD);
            Device.resize.attachHandler(this._handleResizeChange, this);
        };

        ShellLayout.prototype.exit = function () {
            Device.media.detachHandler(this._handleMediaChange, this, Device.media.RANGESETS.SAP_STANDARD);
            Device.resize.detachHandler(this._handleResizeChange, this);

            delete this._cont; //Destroy of child controls done via aggregation handling
            delete this._curtCont;
        };

        ShellLayout.prototype.addSubHeader = function (oControl) {
            this.addAggregation('subHeaders', oControl, true);
            //It's inevitable to tho clone oControl as it isn't possible to aggregate the same control to more than one parent.
            this._cont.addSubHeader(oControl.clone());
            return this;
        };

        ShellLayout.prototype.removeSubHeader = function (oControl) {
            var indexOfControl = this.indexOfSubHeader(oControl),
                oCloneFromSplitContainer = this._cont.getAggregation("subHeaders")[indexOfControl];

            if (oCloneFromSplitContainer) {
                //Since the split container contains the clone of oControl and not oControl itself, we need to remove it from the
                //'subHeaders' aggregation of both ShellLayout and SplintContainer.
                this._cont.removeSubHeader(oCloneFromSplitContainer);
                this.removeAggregation("subHeaders", oControl);
            }
            return this;
        };

        ShellLayout.prototype.insertSubHeader = function (oControl, iIndex) {
            //It's inevitable to tho clone oControl as it isn't possible to aggregate the same control to more than one parent.
            //Consequently, it's required to 'insertAggregation' to both ShellLayout and SplintContainer.
            this.insertAggregation('subHeaders', oControl, iIndex, true);
            this._cont.insertSubHeader(oControl.clone(), iIndex);
            return this;
        };

        ShellLayout.prototype.removeAllSubHeaders = function () {
            this.removeAllAggregation('subHeaders', true);
            return this._cont.removeAllSubHeaders();
        };
        ShellLayout.prototype.destroySubHeaders = function () {
            this.destroyAggregation('subHeaders', true);
            this._cont.destroySubHeaders();
            return this;
        };

        ShellLayout.prototype.onAfterRendering = function () {
            var that = this;

            function headerFocus(oBrowserEvent) {
                var oEvent = jQuery.event.fix(oBrowserEvent);
                if (jQuery.sap.containsOrEquals(that.getDomRef("hdr"), oEvent.target)) {
                    that._timedHideHeader(oEvent.type === "focus");
                }
            }

            if (window.addEventListener && !ShellLayout._HEADER_ALWAYS_VISIBLE) {
                var oHdr = this.getDomRef("hdr");
                oHdr.addEventListener("focus", headerFocus, true);
                oHdr.addEventListener("blur", headerFocus, true);
            }
            this._cont._applySecondaryContentSize();
            this._refreshAfterRendering();
        };

        ShellLayout.prototype.onThemeChanged = function () {
            this._refreshAfterRendering();
        };

        ShellLayout.prototype.onfocusin = function (oEvent) {
            var sId = this.getId();

            if (oEvent.target.id === sId + "-curt-focusDummyOut") {
                // Jump back to shell when you reach the end of the curtain
                jQuery.sap.focus(this.$("hdrcntnt").firstFocusableDomRef());
            } else if (oEvent.target.id === sId + "-main-focusDummyOut") {
                // Jump to the curtain if it is open (can only reached by tabbing back when curtain is open)
                jQuery.sap.focus(this.$("curtcntnt").firstFocusableDomRef());
            }
        };

        (function () {

            function _updateHeader(oShell) {
                if (oShell._startY === undefined || oShell._currY === undefined) {
                    return;
                }

                var yMove = oShell._currY - oShell._startY;
                if (Math.abs(yMove) > ShellLayout._HEADER_TOUCH_TRESHOLD) {
                    oShell._doShowHeader(yMove > 0);
                    oShell._startY = oShell._currY;
                }
            }

            if (Device.support.touch) {

                ShellLayout._HEADER_ALWAYS_VISIBLE = false;

                ShellLayout.prototype.ontouchstart = function (oEvent) {
                    this._startY = oEvent.touches[0].pageY;
                    if (this._startY > 2 * 48) { /*Only when touch starts "nearby" the header*/
                        this._startY = undefined;
                    }
                    this._currY = this._startY;
                };

                ShellLayout.prototype.ontouchend = function () {
                    _updateHeader(this);
                    this._startY = undefined;
                    this._currY = undefined;
                };

                ShellLayout.prototype.ontouchcancel = ShellLayout.prototype.ontouchend;

                ShellLayout.prototype.ontouchmove = function (oEvent) {
                    this._currY = oEvent.touches[0].pageY;
                    _updateHeader(this);
                };

            }

        })();


        //***************** API / Overridden generated API *****************

        ShellLayout.prototype.setHeaderHiding = function (bEnabled) {
            bEnabled = !!bEnabled;
            return this._mod(function (bRendered) {
                return this.setProperty("headerHiding", bEnabled, bRendered);
            }, function () {
                this._doShowHeader(!bEnabled ? true : this._showHeader);
            });
        };

        /*Not public, Maybe API later*/
        ShellLayout.prototype.setHeaderHidingDelay = function (iDelay) {
            this._iHeaderHidingDelay = iDelay;
            return this;
        };

        /*Not public, Maybe API later*/
        ShellLayout.prototype.getHeaderHidingDelay = function () {
            return this._iHeaderHidingDelay;
        };

        ShellLayout.prototype.getShowPane = function () {
            return this._cont.getShowSecondaryContent();
        };

        ShellLayout.prototype.setShowPane = function (bShowPane) {
            this._cont.setShowSecondaryContent(bShowPane);
            this.setProperty("showPane", !!bShowPane, true);
            return this;
        };

        ShellLayout.prototype.getToolAreaVisible = function () {
            return this.getToolArea().getVisible();
        };

        ShellLayout.prototype.getToolAreaItems = function () {
            return this.getToolArea().getToolAreaItems();
        };

        ShellLayout.prototype.addToolAreaItem = function (oToolAreaItem) {
            this.getToolArea().addToolAreaItem(oToolAreaItem);
        };

        ShellLayout.prototype.setTitle = function (sTitle, oInnerControl) {
            this.getHeader().setTitleControl(sTitle, oInnerControl);
        };

        ShellLayout.prototype.getTitle = function (sTitle, oInnerControl) {
            var oTitle = this.getHeader().getTitle();
            if (oTitle) {
                return oTitle.getText();
            }

            return null;
        };

        ShellLayout.prototype.removeToolAreaItem = function (oToolAreaItem) {
            this.getToolArea().removeToolAreaItem(oToolAreaItem);
        };

        ShellLayout.prototype.setToolAreaVisible = function (bVisible) {
            this.getToolArea().setVisible(!!bVisible);
            this.setProperty("toolAreaVisible", !!bVisible, true);
            this._cont._applySecondaryContentSize();
            return this;
        };

        /*Not public, deprecated*/
        ShellLayout.prototype.setShowCurtainPane = function (bShowPane) {
            this._curtCont.setShowSecondaryContent(bShowPane);
            return this;
        };

        /*Not public, deprecated*/
        ShellLayout.prototype.getShowCurtainPane = function () {
            return this._curtCont.getShowSecondaryContent();
        };

        ShellLayout.prototype.setHeaderVisible = function (bHeaderVisible) {
            bHeaderVisible = !!bHeaderVisible;
            this.setProperty("headerVisible", bHeaderVisible, true);
            this.$().toggleClass("sapUshellShellNoHead", !bHeaderVisible);
            return this;
        };

        /*Not public, deprecated*/
        ShellLayout.prototype.setShowCurtain = function (bShowCurtain) {
            bShowCurtain = !!bShowCurtain;

            return this._mod(function () {
                this._showCurtain = bShowCurtain;
                return this;
            }, function () {
                this.$("main-focusDummyOut").attr("tabindex", bShowCurtain ? 0 : -1);
                this.$().toggleClass("sapUshellShellCurtainHidden", !bShowCurtain).toggleClass("sapUshellShellCurtainVisible", bShowCurtain);

                if (bShowCurtain) {
                    var zIndex = Popup.getNextZIndex();
                    this.$("curt").css("z-index", zIndex + 1);
                    this.$("hdr").css("z-index", zIndex + 3);
                    this.$("brand").css("z-index", zIndex + 7);
                    this.$().toggleClass("sapUshellShellCurtainClosed", false);
                }

                this._timedCurtainClosed(bShowCurtain);

                this._doShowHeader(true);
            });
        };

        /*Not public, deprecated*/
        ShellLayout.prototype.getShowCurtain = function () {
            return this._showCurtain;
        };


        ShellLayout.prototype.getContent = function () {
            return this._cont.getContent();
        };
        ShellLayout.prototype.insertContent = function (oContent, iIndex) {
            this._cont.insertContent(oContent, iIndex);
            return this;
        };
        ShellLayout.prototype.addContent = function (oContent) {
            this._cont.addContent(oContent);
            return this;
        };
        ShellLayout.prototype.removeContent = function (vIndex) {
            return this._cont.removeContent(vIndex);
        };
        ShellLayout.prototype.removeAllContent = function () {
            return this._cont.removeAllContent();
        };
        ShellLayout.prototype.destroyContent = function () {
            this._cont.destroyContent();
            return this;
        };
        ShellLayout.prototype.indexOfContent = function (oContent) {
            return this._cont.indexOfContent(oContent);
        };


        ShellLayout.prototype.getPaneContent = function () {
            return this._cont.getSecondaryContent();
        };
        ShellLayout.prototype.insertPaneContent = function (oContent, iIndex) {
            this._cont.insertSecondaryContent(oContent, iIndex);
            return this;
        };
        ShellLayout.prototype.addPaneContent = function (oContent) {
            this._cont.addSecondaryContent(oContent);
            return this;
        };
        ShellLayout.prototype.removePaneContent = function (vIndex) {
            return this._cont.removeSecondaryContent(vIndex);
        };
        ShellLayout.prototype.removeAllPaneContent = function () {
            return this._cont.removeAllSecondaryContent();
        };
        ShellLayout.prototype.destroyPaneContent = function () {
            this._cont.destroySecondaryContent();
            return this;
        };
        ShellLayout.prototype.indexOfPaneContent = function (oContent) {
            return this._cont.indexOfSecondaryContent(oContent);
        };


        ShellLayout.prototype.setHeader = function (oHeader) {
            this.setAggregation("header", oHeader, true);
            oHeader = this.getHeader();
            if (this.getDomRef()) {
                if (!oHeader) {
                    this.$("hdrcntnt").html("");
                } else {
                    var rm = sap.ui.getCore().createRenderManager();
                    rm.renderControl(oHeader);
                    rm.flush(this.getDomRef("hdrcntnt"));
                    rm.destroy();
                }
            }
            return this;
        };
        ShellLayout.prototype.destroyHeader = function () {
            this.destroyAggregation("header", true);
            this.$("hdrcntnt").html("");
            return this;
        };

        ShellLayout.prototype.setToolArea = function (oToolArea) {
            this.setAggregation("toolArea", oToolArea, true);
            oToolArea = this.getToolArea();
            if (this.getDomRef()) {
                if (!oToolArea) {
                    this.$("toolareacntnt").html("");
                } else {
                    var rm = sap.ui.getCore().createRenderManager();
                    rm.renderControl(oToolArea);
                    rm.flush(this.getDomRef("toolareacntnt"));
                    rm.destroy();
                }
            }
            return this;
        };

        ShellLayout.prototype.destroyToolArea = function () {
            this.destroyAggregation("toolArea", true);
            this.$("toolareacntnt").html("");
            return this;
        };




        /*Not public, deprecated*/
        ShellLayout.prototype.getCurtainContent = function () {
            return this._curtCont.getContent();
        };
        ShellLayout.prototype.insertCurtainContent = function (oContent, iIndex) {
            this._curtCont.insertContent(oContent, iIndex);
            return this;
        };
        ShellLayout.prototype.addCurtainContent = function (oContent) {
            this._curtCont.addContent(oContent);
            return this;
        };
        ShellLayout.prototype.removeCurtainContent = function (vIndex) {
            return this._curtCont.removeContent(vIndex);
        };
        ShellLayout.prototype.removeAllCurtainContent = function () {
            return this._curtCont.removeAllContent();
        };
        ShellLayout.prototype.destroyCurtainContent = function () {
            this._curtCont.destroyContent();
            return this;
        };
        ShellLayout.prototype.indexOfCurtainContent = function (oContent) {
            return this._curtCont.indexOfCurtainContent(oContent);
        };


        /*Not public, deprecated*/
        ShellLayout.prototype.getCurtainPaneContent = function () {
            return this._curtCont.getSecondaryContent();
        };
        ShellLayout.prototype.insertCurtainPaneContent = function (oContent, iIndex) {
            this._curtCont.insertSecondaryContent(oContent, iIndex);
            return this;
        };
        ShellLayout.prototype.addCurtainPaneContent = function (oContent) {
            this._curtCont.addSecondaryContent(oContent);
            return this;
        };
        ShellLayout.prototype.removeCurtainPaneContent = function (vIndex) {
            return this._curtCont.removeSecondaryContent(vIndex);
        };
        ShellLayout.prototype.removeAllCurtainPaneContent = function () {
            return this._curtCont.removeAllSecondaryContent();
        };
        ShellLayout.prototype.destroyCurtainPaneContent = function () {
            this._curtCont.destroySecondaryContent();
            return this;
        };
        ShellLayout.prototype.indexOfCurtainPaneContent = function (oContent) {
            return this._curtCont.indexOfSecondaryContent(oContent);
        };


        /*Restricted API for Launchpad to set a Strong BG style*/
        ShellLayout.prototype._setStrongBackground = function (bUseStongBG) {
            this._useStrongBG = !!bUseStongBG;
            this.$("strgbg").toggleClass("sapUiStrongBackgroundColor", this._useStrongBG);
        };


        //***************** Private Helpers *****************

        ShellLayout.prototype._mod = function (fMod, oDoIfRendered) {
            var bRendered = !!this.getDomRef();
            var res = fMod.apply(this, [bRendered]);
            if (bRendered && oDoIfRendered) {
                if (oDoIfRendered instanceof sap.ushell.ui.shell.shell_ContentRenderer) {
                    oDoIfRendered.render();
                } else {
                    oDoIfRendered.apply(this);
                }
            }
            return res;
        };

        ShellLayout.prototype._doShowHeader = function (bShow) {
            var bWasVisible = this._showHeader;
            this._showHeader = this._isHeaderHidingActive() ? !!bShow : true;

            this.$().toggleClass("sapUshellShellHeadHidden", !this._showHeader).toggleClass("sapUshellShellHeadVisible", this._showHeader);

            if (this._showHeader) {
                this._timedHideHeader();
            }

            if (bWasVisible !== this._showHeader && this._isHeaderHidingActive()) {
                jQuery.sap.delayedCall(500, this, function () {
                    try {
                        var oResizeEvent = document.createEvent("UIEvents");
                        oResizeEvent.initUIEvent("resize", true, false, window, 0);
                        window.dispatchEvent(oResizeEvent);
                    } catch (e) {
                        jQuery.sap.log.error(e);
                    }
                });
            }
        };

        ShellLayout.prototype._timedHideHeader = function (bClearOnly) {
            if (this._headerHidingTimer) {
                jQuery.sap.clearDelayedCall(this._headerHidingTimer);
                this._headerHidingTimer = null;
            }

            if (bClearOnly || !ShellLayout._HEADER_AUTO_CLOSE || !this._isHeaderHidingActive() || this._iHeaderHidingDelay <= 0) {
                return;
            }

            this._headerHidingTimer = jQuery.sap.delayedCall(this._iHeaderHidingDelay, this, function () {
                if (this._isHeaderHidingActive() && this._iHeaderHidingDelay > 0 && !jQuery.sap.containsOrEquals(this.getDomRef("hdr"), document.activeElement)) {
                    this._doShowHeader(false);
                }
            });
        };

        ShellLayout.prototype._timedCurtainClosed = function (bClearOnly) {
            if (this._curtainClosedTimer) {
                jQuery.sap.clearDelayedCall(this._curtainClosedTimer);
                this._curtainClosedTimer = null;
            }

            if (bClearOnly) {
                return;
            }

            var duration = parseInt(Parameters.get("sapUshellShellAnimDuration"), 10);
            if (!this._animation || (Device.browser.internet_explorer && Device.browser.version < 10)) {
                duration = 0;
            }

            this._curtainClosedTimer = jQuery.sap.delayedCall(duration, this, function () {
                this._curtainClosedTimer = null;
                this.$("curt").css("z-index", "");
                this.$("hdr").css("z-index", "");
                this.$("brand").css("z-index", "");
                this.$().toggleClass("sapUshellShellCurtainClosed", true);
            });
        };

        ShellLayout.prototype._isHeaderHidingActive = function () {
            // Not active if no touch, the curtain is open or the hiding is deactivated via API
            if (ShellLayout._HEADER_ALWAYS_VISIBLE || this.getShowCurtain() || !this.getHeaderHiding() || sap.ushell.ui.shell.shell_iNumberOfOpenedShellOverlays > 0 || !this.getHeaderVisible()) {
                return false;
            }
            return true;
        };

        ShellLayout.prototype._refreshCSSWorkaround = function () {
            if (!Device.browser.webkit || !Device.support.touch) {
                return;
            }

            if (this._cssWorkaroundTimer) {
                jQuery.sap.clearDelayedCall(this._cssWorkaroundTimer);
                this._cssWorkaroundTimer = null;
            }
            this.$("css").remove();

            this._cssWorkaroundTimer = jQuery.sap.delayedCall(10, this, function () {
                this._cssWorkaroundTimer = null;
                jQuery.sap.log.debug("sap.ushell.ui.shell.ShellLayout: CSS Workaround applied.");
                jQuery("head").append("<link type='text/css' rel='stylesheet' id='" + this.getId() + "-css' href='data:text/css;base64,LnNhcFVpVWZkU2hlbGxDaHJvbWVSZXBhaW50e291dGxpbmUtY29sb3I6aW5pdGlhbDt9'/>");
                this._cssWorkaroundTimer = jQuery.sap.delayedCall(100, this, function () {
                    this.$("css").remove();
                });
            });
        };

        ShellLayout.prototype._setSidePaneWidth = function (sRange) {
            if (!sRange) {
                sRange = Device.media.getCurrentRange(Device.media.RANGESETS.SAP_STANDARD).name;
            }

            var w = ShellLayout["_SIDEPANE_WIDTH_" + sRange.toUpperCase()] + "rem";
            this._cont.setSecondaryContentSize(w);
            this._curtCont.setSecondaryContentSize(w);
        };

        ShellLayout.prototype._handleMediaChange = function (mParams) {
            if (!this.getDomRef()) {
                return false;
            }
            this._setSidePaneWidth(mParams.name);
            this._cont._applySecondaryContentSize();
        };

        ShellLayout.prototype._handleResizeChange = function () {
            //Nothing to do here, maybe in subclass
        };

        ShellLayout.prototype._refreshAfterRendering = function () {
            var oDom = this.getDomRef();

            if (!oDom) {
                return false;
            }

            //Wrapping the"repaint" in timout is required due to "too early" re-rendering which may occour as in incident#:1580054212.
            setTimeout(function () {
                this._repaint(oDom);
            }.bind(this), 700);
            this._timedHideHeader();

            return true;
        };

        ShellLayout.prototype._repaint = function (oDom) {
            if (Device.browser.webkit) {
                var display = oDom.style.display;
                oDom.style.display = "none";
                oDom.offsetHeight;
                oDom.style.display = display;

                this._refreshCSSWorkaround();
            }
        };

        //Needed by sap.ushell.ui.shell.ShellOverlay
        ShellLayout.prototype._getSearchWidth = function () {
            return -1;
        };

        return ShellLayout;

    }, /* bExport= */ true);

}; // end of sap/ushell/ui/shell/ShellLayout.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.SearchModel') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.SearchModel');
/* global jQuery,window */
// iteration 0

(function(global) {
    "use strict";
    /* eslint no-warning-comments:0 */

    
    
    jQuery.sap.require('sap.ushell.renderers.fiori2.search.INAV2SearchFacetsFormatter'); // unlisted dependency retained

    
    jQuery.sap.require('sap.ushell.renderers.fiori2.search.FacetItem'); // unlisted dependency retained

    
    


    var sap = global.sap;
    var SearchHelper = sap.ushell.renderers.fiori2.search.SearchHelper;
    var SearchResultListFormatter = sap.ushell.renderers.fiori2.search.SearchResultListFormatter;
    var TabStripsFormatter = sap.ushell.renderers.fiori2.search.SearchTabStripsFormatter.Formatter;
    var SuggestionHandler = sap.ushell.renderers.fiori2.search.suggestions.SuggestionHandler;

    // =======================================================================
    // Global singleton method to get search model
    // ensure only one model instance available
    // =======================================================================
    sap.ushell.renderers.fiori2.search.getModelSingleton = function() {
        if (!sap.ushell.renderers.fiori2.search.oModel) {
            sap.ushell.renderers.fiori2.search.oModel =
                new sap.ushell.renderers.fiori2.search.SearchModel();
        }
        return sap.ushell.renderers.fiori2.search.oModel;
    };

    // =======================================================================
    // search model
    // =======================================================================
    sap.ui.model.json.JSONModel.extend("sap.ushell.renderers.fiori2.search.SearchModel", {

        constructor: function(properties) {

            var that = this;
            properties = properties || {};

            // call base class constructor
            sap.ui.model.json.JSONModel.prototype.constructor.apply(that, []);

            // parse url parameters
            that.urlParameters = that.parseUrlParameters();

            // set size limit in order to allow drop down list boxes with more than 100 entries
            that.setSizeLimit(200);

            // get sina
            that.sina = sap.ushell.Container.getService("Search").getSina();

            // create sina suggestion query
            this.suggestionQuery = this.sina.createSuggestionQuery();

            // create suggestions handler
            that.suggestionHandler = new SuggestionHandler({
                model: this
            });

            // create sina query for search for business objects (normal search)
            that.query = that.sina.createPerspectiveQuery({
                templateFactsheet: true
            });

            // reset filter conditions
            that.resetFilterConditions(false);

            // create standard datasources like ALL and APPS
            that.createAllAndAppDataSource();

            // decorate search methods (decorator prevents request overtaking)
            that.query.getResultSet = SearchHelper.refuseOutdatedRequests(that.query.getResultSet, 'search'); // normal search
            that.searchApplications = SearchHelper.refuseOutdatedRequests(that.searchApplications, 'search'); // app search

            // formatters
            that.oFacetFormatter = new sap.ushell.renderers.fiori2.search.INAV2SearchFacetsFormatter();
            that.tabStripFormatter = new TabStripsFormatter();
            that.dataSourceTree = that.tabStripFormatter.tree;

            // initial values for boTop and appTop
            that.appTopDefault = 20;
            that.boTopDefault = 10;

            // init the properties

            this.setProperty('/isInvalidated', true); // force request if query did not change

            that.setProperty('/searchBoxTerm', '');
            that.setProperty('/lastSearchTerm', null);

            that.setProperty('/isBusy', false); //show a busy indicator?

            that.setProperty('/dataSource', null);
            that.setProperty('/lastDataSource', null);

            that.setProperty('/top', 10);
            that.setProperty('/lastTop', 10);

            that.setProperty('/skip', 0);
            that.setProperty('/lastSkip', 0);

            that.setProperty('/results', []); // combined result list: apps + bos
            that.setProperty('/appResults', []); // applications result list
            that.setProperty('/boResults', []); // business object result list

            that.setProperty('/count', 0);
            that.setProperty('/boCount', 0);
            that.setProperty('/appCount', 0);

            that.setProperty('/facets', []);
            that.setProperty('/filterConditions', []);
            that.setProperty('/lastFilterConditions', []);
            that.setProperty('/dataSources', [that.allDataSource, that.appDataSource]);
            that.setProperty('/recentDataSources', []); //facets datasource tree
            that.setProperty('/businessObjSearchEnabled', true);
            that.setProperty('/suggestions', []);

            // TODO always use main result list (also for pure app results)
            that.setProperty('/resultsVisibility', true); // visibility of combined result list
            that.setProperty('/appsVisibility', true); // visibility of app result list
            // TODO rename loadFilterButtonStatus -> loadFacetVisibilityStatus?
            that.setProperty('/facetVisibility', SearchHelper.loadFilterButtonStatus()); // visibility of facet panel
            that.setProperty('/lastFacetVisibility', false); // visbility of facet panel is relevant for query

            that.resetDataSource(false);

            // initialize enterprise search
            that.initBusinessObjSearch();

            // usage analytics
            try {
                that.analytics = sap.ushell.Container.getService("UsageAnalytics");
            } catch (e) {}
            if (!that.analytics) {
                that.analytics = {
                    logCustomEvent: function() {
                        //console.log('-->',arguments[0],arguments[1],arguments[2]);
                    }
                };
            }
        },

        doSuggestion: function() {
            this.suggestionHandler.doSuggestion();
        },

        abortSuggestions: function() {
            this.suggestionHandler.abortSuggestions();
        },

        parseUrlParameters: function() {
            var oURLParsing = sap.ushell.Container.getService("URLParsing");
            var params = oURLParsing.parseParameters(window.location.search);
            var newParams = {};
            // params is an object with name value pairs. value is always an array with values
            // (useful if url parameter has multiple values)
            // Here only the first value is relevant
            for (var key in params) {
                var value = params[key];
                if (value.length !== 1) {
                    continue;
                }
                value = value[0];
                if (typeof value !== 'string') {
                    continue;
                }
                newParams[key.toLowerCase()] = value.toLowerCase();
            }
            return newParams;
        },

        setProperty: function(name, value) {
            var that = this;
            var res = sap.ui.model.json.JSONModel.prototype.setProperty.apply(this, arguments);
            switch (name) {
                case '/boResults':
                case '/appResults':
                    that.calculateResultList();
                    break;
                case '/appCount':
                case '/boCount':
                    res = that.setProperty('/count', that.getProperty('/appCount') + that.getProperty('/boCount'));
                    break;
                default:
                    break;
            }
            return res;
        },

        calculateResultList: function() {
            // init
            var that = this;
            var results = [];

            // add bo results
            var boResults = that.getProperty('/boResults');
            if (boResults && boResults.length) {
                results.push.apply(results, boResults);
            }

            // add app results (tiles)
            var tiles = that.getProperty('/appResults');
            if (tiles && tiles.length > 0) {
                var tilesItem = {
                    type: 'appcontainer',
                    tiles: tiles
                };
                if (results.length > 0) {
                    if (results.length > 3) {
                        results.splice(3, 0, tilesItem);
                    } else {
                        //results.splice(0, 0, tilesItem);
                        results.push(tilesItem);
                    }
                } else {
                    results = [tilesItem];
                }
            }

            // set property
            sap.ui.model.json.JSONModel.prototype.setProperty.apply(this, ['/results', results]);
        },

        initBusinessObjSearch: function() {

            var that = this;

            // check whether enterprise search is configured
            if (!that.isBusinessObjSearchConfigured()) {
                that.setDataSource(that.appDataSource, false);
                that.setProperty('/businessObjSearchEnabled', false);
                that.setProperty('/facetVisibility', false);
                return;
            }

            // if get server info succeeds -> enable business obj search + load datasources
            that.sina.sinaSystem().getServerInfo().done(function() {
                that.loadDataSources();
            }).fail(function() {
                that.setDataSource(that.appDataSource, false);
                that.setProperty('/businessObjSearchEnabled', false);
                that.setProperty('/facetVisibility', false);
            });

        },

        loadDataSources: function() {
            var that = this;
            that.getServerDataSources().done(function(dataSources) {
                if (!jQuery.isArray(dataSources)) {
                    dataSources = [];
                }
                dataSources = dataSources.slice();
                dataSources.splice(0, 0, that.appDataSource);
                dataSources.splice(0, 0, that.allDataSource);
                dataSources = that._concatenateLabelAndRemoteSystem(dataSources);
                that.setProperty("/dataSources", dataSources);
                that.updateDataSourceList(that.getDataSource()); // ensure that current ds is in the list (may be category)
                // start - remove, shall be fixed by UI5 //TODO
                var ds = that.getDataSource();
                that.setProperty("/dataSource", {});
                that.setProperty("/dataSource", ds);
                // end //TODO
            });
        },

        _concatenateLabelAndRemoteSystem: function(dataSources) {

            var filteredDataSources = dataSources;
            for (var i = 0; i < filteredDataSources.length - 1; i++) {
                if (filteredDataSources[i].remoteSystem !== undefined && filteredDataSources[i].remoteSystem !== "") {
                    filteredDataSources[i].label = filteredDataSources[i].label + ' ' + sap.ushell.resources.i18n.getText("textIn") + ' ' + filteredDataSources[i].remoteSystem;
                    filteredDataSources[i].labelPlural = filteredDataSources[i].labelPlural + ' ' + sap.ushell.resources.i18n.getText("textIn") + ' ' + filteredDataSources[i].remoteSystem;
                }
            }
            return filteredDataSources;
        },

        getServerDataSources: function() {
            var that = this;

            if (that.getDataSourcesDeffered) {
                return that.getDataSourcesDeffered;
            }

            that.getDataSourcesDeffered = that.sina.getAllDataSources({
                top: 1000
            });
            return that.getDataSourcesDeffered;
        },

        isBusinessObjSearchConfigured: function() {
            try {
                var config = window['sap-ushell-config'].renderers.fiori2.componentData.config;
                return config.searchBusinessObjects !== 'hidden';
            } catch (e) {
                return true;
            }
        },

        isBusinessObjSearchEnabled: function() {
            return this.getProperty('/businessObjSearchEnabled');
        },

        isFacetSearchEnabled: function() {
            if (this.urlParameters.disableeshfacets === 'true') {
                return false;
            }
            return true;
        },

        searchApplications: function(searchTerm, top, skip) {
            return sap.ushell.Container.getService("Search").queryApplications({
                searchTerm: searchTerm,
                searchInKeywords: true,
                top: top,
                skip: skip
            });
        },

        createAllAndAppDataSource: function() {

            // all data source
            this.allDataSource = this.sina.getRootDataSource();
            this.allDataSource.label = sap.ushell.resources.i18n.getText("label_all");
            this.allDataSource.labelPlural = sap.ushell.resources.i18n.getText("label_all");

            // app datasource (create sina base class instance)
            this.appDataSource = new sap.bc.ina.api.sina.base.datasource.DataSource({
                label: sap.ushell.resources.i18n.getText("label_apps"),
                labelPlural: sap.ushell.resources.i18n.getText("label_apps"),
                type: 'Apps',
                name: 'Apps'
            });

        },

        isAllCategory: function() {
            var ds = this.getProperty("/dataSource");
            return ds.equals(this.allDataSource);
        },

        isAppCategory: function() {
            var ds = this.getProperty("/dataSource");
            return ds.equals(this.appDataSource);
        },

        // All of the following *filterCondition* methods belong to facet functionality
        addFilterCondition: function(facetItem, fireQuery) {
            var that = this,
                filterCondition = facetItem.filterCondition;

            function addItemToFilterConditions(facetItem) {
                var newFilterConditions = that.getProperty("/filterConditions");
                newFilterConditions.push(facetItem);
                that.setProperty("/filterConditions", newFilterConditions);
            }

            if (filterCondition.attribute || filterCondition.conditions) { //is it an attribute filter?
                //move to searchFireQuery + doNormalsuggestion //TODO
                if (!that.query.getFilter().hasFilterCondition(filterCondition)) {
                    that.query.addFilterCondition(filterCondition);
                    addItemToFilterConditions(facetItem);
                }
                if (!that.suggestionQuery.getFilter().hasFilterCondition(filterCondition)) {
                    that.suggestionQuery.addFilterCondition(filterCondition);
                }
            } else { //or a datasource
                that.setDataSource(filterCondition, false);
            }

            if (fireQuery || fireQuery === undefined) {
                that._searchFireQuery();
            }
        },

        removeFilterCondition: function(facetItem, fireQuery) {
            var that = this,
                filterCondition = facetItem.filterCondition;

            function removeItemFromFilterConditions(facetItem) {
                var newFilterConditions = that.getProperty("/filterConditions");
                var i = that.getProperty("/filterConditions").length;
                while (i--) {
                    var fc = that.getProperty("/filterConditions")[i].filterCondition;
                    if (fc.equals(facetItem.filterCondition)) {
                        newFilterConditions.splice(i, 1);
                        break;
                    }
                }
                that.setProperty("/filterConditions", newFilterConditions);
            }

            if (filterCondition.attribute) {
                removeItemFromFilterConditions(facetItem);
                that.query.removeFilterCondition(filterCondition.attribute, filterCondition.operator, filterCondition.value);
                that.suggestionQuery.removeFilterCondition(filterCondition.attribute, filterCondition.operator, filterCondition.value);
            } else if (filterCondition.conditions) {
                removeItemFromFilterConditions(facetItem);
                that.query.getFilter().removeFilterConditionGroup(filterCondition); // TODO replace by removeFilterCondtion
                that.suggestionQuery.getFilter().removeFilterConditionGroup(filterCondition);
            } else {
                that.setDataSource(filterCondition, false);
            }

            if (fireQuery || fireQuery === undefined) {
                that._searchFireQuery();
            }
        },

        hasFilterCondition: function(filterCondition) {
            return this.query.getFilter().hasFilterCondition(filterCondition);
        },

        resetFilterConditions: function(fireQuery) {
            var that = this;
            that.query.resetFilterConditions();
            that.suggestionQuery.resetFilterConditions();
            that.setProperty("/filterConditions", []); // TODO move to new extended filter?
            that.query.addFilterCondition('$$RenderingTemplatePlatform$$', '=', 'html');
            that.query.addFilterCondition('$$RenderingTemplateTechnology$$', '=', 'Tempo');
            that.query.addFilterCondition('$$RenderingTemplateVariant$$', '=', '');
            that.query.addFilterCondition('$$RenderingTemplateType$$', '=', 'ItemDetails');
            that.query.addFilterCondition('$$RenderingTemplateType$$', '=', 'ResultItem');
            if (fireQuery || fireQuery === undefined) {
                that._searchFireQuery();
            }
        },

        getFacets: function() {
            var that = this;
            return that.getProperty('/facets');
        },

        getTop: function() {
            return this.getProperty('/top');
        },

        setTop: function(top, fireQuery) {
            this.setProperty('/top', top);
            if (fireQuery || fireQuery === undefined) {
                this._searchFireQuery();
            }
        },

        getSkip: function() {
            return this.getProperty('/skip');
        },

        setSkip: function(skip, fireQuery) {
            this.setProperty('/skip', skip);
            if (fireQuery || fireQuery === undefined) {
                this._searchFireQuery();
            }
        },

        calculatePlaceholder: function() {
            var that = this;
            if (that.isAllCategory()) {
                return sap.ushell.resources.i18n.getText("search");
            } else {
                return sap.ushell.resources.i18n.getText("searchInPlaceholder", that.getDataSource().label); //TODO plural?
            }
        },

        setFacetVisibility: function(visibility, fireQuery) {

            var that = this;

            // check for change (special for facet visibility)
            if (visibility === this.getProperty('/facetVisibility')) {
                return;
            }

            // facets are invisible or datasource is on category level or datasource is apps
            // -> set lastFacetVisibility in order to avoid firing a query
            if (!visibility ||
                that.getDataSource().getType().value === 'Category' ||
                that.isAppCategory()) {

                that.setProperty('/lastFacetVisibility', visibility);

            }

            // set new value
            this.setProperty('/facetVisibility', visibility);

            // Set button status in sap storage
            SearchHelper.saveFilterButtonStatus(visibility);

            // fire query
            if (fireQuery || fireQuery === undefined) {
                this._searchFireQuery();
            }
        },

        getFacetVisibility: function() {
            return this.getProperty('/facetVisibility');
        },

        getDataSource: function() {
            var that = this;
            return that.getProperty("/dataSource");
        },

        setDataSource: function(dataSource, fireQuery) {

            /* eslint no-empty:0 */
            var that = this;
            var oldDataSource = that.getProperty('/dataSource');
            var goingUp = false;
            var recentDataSources = that.getProperty("/recentDataSources");

            // TODO move update of recent datasource to fireQuery
            // TODO remove len
            for (var i = 0, len = recentDataSources.length; i < len; i++) {
                var ds = recentDataSources[i];
                if (dataSource.equals(ds)) {
                    goingUp = true; //user is navigating up the datasource tree
                    recentDataSources.splice(i, Number.MAX_VALUE);
                    that.setProperty("/recentDataSources", recentDataSources);
                    break;
                }
            }
            if (!goingUp) {
                // where is he going to?
                if (oldDataSource && !this.allDataSource.equals(oldDataSource) && !this.appDataSource.equals(oldDataSource)) {
                    if (this.tabStripFormatter.tree.hasChild(oldDataSource, dataSource)) {
                        // user is drilling down
                        recentDataSources.push(oldDataSource);
                    } else if (this.tabStripFormatter.tree.hasSibling(oldDataSource, dataSource)) {
                        // user is navigating to the same datasource tree level -> do nothing
                    } else if (dataSource.equals(oldDataSource)) {
                        // user clicked on the same datasource again
                        that.resetFilterConditions(false);
                    }
                }
            }
            if (this.allDataSource.equals(dataSource)) {
                that.setProperty("/recentDataSources", []);
            }

            that.updateDataSourceList(dataSource);
            that.setProperty("/dataSource", dataSource);
            that.setProperty("/searchTermPlaceholder", that.calculatePlaceholder());

            // reset top and skip to defaults
            that.setSkip(0, false);
            if (that.isAppCategory()) {
                that.setTop(that.appTopDefault, false);
            } else {
                that.setTop(that.boTopDefault, false);
            }

            if (fireQuery || fireQuery === undefined) {
                that._searchFireQuery();
            }
        },

        updateDataSourceList: function(newDataSource) {
            var dataSources = this.getProperty('/dataSources');
            // delete old categories, until all data source
            while (dataSources.length > 0 && !dataSources[0].equals(this.allDataSource)) {
                dataSources.shift();
            }
            // all and apps are surely included in existing list -> return
            if (newDataSource.equals(this.allDataSource) || newDataSource.equals(this.appDataSource)) {
                return;
            }
            // all connectors (!=category) are included in existing list -> return
            if (newDataSource && newDataSource.key) {
                if (newDataSource.key.indexOf('~') >= 0) {
                    return;
                }
            }
            // check if newDataSource exists in existing list -> return
            for (var i = 0; i < dataSources.length; ++i) {
                var dataSource = dataSources[i];
                if (dataSource.equals(newDataSource)) {
                    return;
                }
            }
            // add datasource
            dataSources.unshift(newDataSource);
            this.setProperty('/dataSources', dataSources);
        },

        resetDataSource: function(fireQuery) {
            this.setDataSource(this.allDataSource, fireQuery);
        },

        // TODO move to datasource
        getSearchBoxTerm: function() {
            var that = this;
            return that.getProperty("/searchBoxTerm");
        },

        setSearchBoxTerm: function(searchTerm, fireQuery) {
            var that = this;
            var searchTermTrimLeft = searchTerm.replace(/^\s+/, ""); // TODO rtl
            that.setProperty("/searchBoxTerm", searchTermTrimLeft);
            if (searchTermTrimLeft.length === 0) {
                return; //TODO ??
            }
            if (fireQuery || fireQuery === undefined) {
                that._searchFireQuery();
            }
        },

        invalidateQuery: function() { // TODO naming?
            this.setProperty('/isInvalidated', true);
        },

        // rename firePerspectiveQuery //TODO
        _searchFireQuery: function(bDeserialization) {
            var that = this;

            // determine whether filter changed
            var filterChanged = !that.checkFiltersIdentical(that.getProperty('/filterConditions'),
                that.getProperty('/lastFilterConditions'));

            // check whether we need to fire the query
            if (that.getProperty('/lastSearchTerm') === that.getProperty('/searchBoxTerm') &&
                that.getProperty('/lastDataSource').equals(that.getProperty('/dataSource')) &&
                that.getProperty('/lastTop') === that.getProperty('/top') &&
                that.getProperty('/lastSkip') === that.getProperty('/skip') &&
                that.getProperty('/lastFacetVisibility') === that.getProperty('/facetVisibility') &&
                !that.getProperty('/isInvalidated') &&
                !filterChanged) {
                return;
            }

            // if searchBoxTerm is empty, but lastSearchTerm is not empty, set back the searchBoxTerm 
            // (empty search term can cause performance problems therefore the old search term is
            //  restored. User needs to use '*' to force system to search for all objects)
            if (that.getProperty('/searchBoxTerm').length === 0 &&
                that.getProperty('/lastSearchTerm').length !== 0) {
                that.setProperty('/searchBoxTerm', that.getProperty('/lastSearchTerm'));
            }

            // reset top and skip if search term has changed
            if (that.getProperty('/lastSearchTerm') || that.getProperty('/lastDataSource')) {
                if (that.getProperty('/lastSearchTerm') !== that.getProperty('/searchBoxTerm') ||
                    that.getProperty('/lastDataSource') !== that.getProperty('/dataSource') ||
                    filterChanged) {
                    // 1. searchterm, datasource or filter changed -> reset top and skip
                    that.setProperty('/skip', 0);
                    if (that.isAppCategory()) {
                        that.setProperty('/top', that.appTopDefault);
                    } else {
                        that.setProperty('/top', that.boTopDefault);
                    }
                }
            }

            // reset tabstrip formatter if search term changes or filter condition
            if (that.getProperty('/lastSearchTerm') !== that.getProperty('/searchBoxTerm') || filterChanged) {
                that.tabStripFormatter.invalidateCount();
            }

            // datasource changed -> reset filter conditions
            if (!bDeserialization &&
                that.getProperty('/lastDataSource') !== null && !that.getProperty('/lastDataSource').equals(that.getProperty('/dataSource'))) {
                that.resetFilterConditions(false);
            }

            // store properties in corresponding last properties
            that.setProperty('/lastSearchTerm', that.getProperty('/searchBoxTerm'));
            that.setProperty('/lastDataSource', that.getProperty('/dataSource'));
            that.setProperty('/lastTop', that.getProperty('/top'));
            that.setProperty('/lastSkip', that.getProperty('/skip'));
            that.setProperty('/lastFacetVisibility', that.getProperty('/facetVisibility'));
            that.setProperty('/lastFilterConditions', that.cloneFilterConditions(this.getProperty('/filterConditions')));
            that.setProperty('/isInvalidated', false);

            // notify view
            sap.ui.getCore().getEventBus().publish("allSearchStarted");

            // abort suggestions
            that.abortSuggestions();

            // abort old async running search calls
            SearchHelper.abortRequests('search');

            // calculate visibility flags for apps and combined result list
            that.calculateVisibility();

            // update url silently
            that.updateSearchURLSilently();

            // log search request
            that.analytics.logCustomEvent('FLP: Search', 'Search', [that.getProperty('/searchBoxTerm'), that.getProperty('/dataSource').key]);

            // wait for all subsearch queries
            var dataSource = that.getDataSource();
            that.setProperty('/isBusy', true);
            jQuery.when.apply(null, [that.normalSearch(bDeserialization), that.appSearch(bDeserialization)])
                .done(function() {
                    that.setProperty('/tabStrips', that.tabStripFormatter.format(dataSource, that.perspective, that));
                    that.setProperty('/facets', that.oFacetFormatter.getFacets(dataSource, that.perspective, that));
                })
                .always(function() {
                    that.setProperty('/isBusy', false);
                    sap.ui.getCore().getEventBus().publish("allSearchFinished");
                });
        },

        autoStartApp: function() {
            var that = this;
            if (that.getProperty("/appCount") && that.getProperty("/appCount") === 1 && that.getProperty("/count") && that.getProperty("/count") === 1) {
                var aApps = that.getProperty("/appResults");
                if (aApps && aApps.length > 0 && aApps[0] && aApps[0].url && that.getProperty('/searchBoxTerm') && aApps[0].tooltip && that.getProperty('/searchBoxTerm').toLowerCase().trim() === aApps[0].tooltip.toLowerCase().trim()) {
                    if (aApps[0].url[0] === '#') {
                        window.location.href = aApps[0].url;
                    } else {
                        window.open(aApps[0].url, '_blank');
                    }
                }
            }
        },

        calculateVisibility: function() {
            var that = this;
            if (that.isAppCategory()) {
                that.setProperty('/resultsVisibility', false);
                that.setProperty('/appsVisibility', true);
            } else {
                that.setProperty('/resultsVisibility', true);
                that.setProperty('/appsVisibility', false);
            }
        },

        appSearch: function(bDeserialization) {
            var that = this;

            /*
            	            deserialize: false	             deserialize: true
                skip===0	NA,replace with new table	     NA, replace
                skip>0	    NA: Append to existing table	 newSkip=0
                                                             newT0p=oldTop+oldSkip
                                                             replace
            */
            var newTop = that.getTop();
            var newSkip = that.getSkip();
            if (bDeserialization === true) {
                if (that.getSkip() > 0) {
                    newTop = that.getSkip() + that.getTop();
                    newSkip = 0;
                }
            }

            if (newSkip === 0) {
                that.setProperty("/appResults", []);
                that.setProperty("/appCount", 0);
            }

            if (that.isAllCategory() || that.isAppCategory()) {
                // 1. search

                return that.searchApplications(that.getProperty('/searchBoxTerm'),
                    newTop, newSkip).then(function(oResult) {
                    // 1.1 search call succeeded
                    that.setProperty("/appCount", oResult.totalResults);
                    if (newSkip > 0) {
                        var apps = that.getProperty("/appResults").slice();
                        apps.push.apply(apps, oResult.getElements());
                        that.setProperty("/appResults", apps);
                    } else {
                        that.setProperty("/appResults", oResult.getElements());
                    }
                    sap.ui.getCore().getEventBus().publish("appSearchFinished", oResult);
                }, function() {
                    // 1.2 search call failed
                    sap.ui.getCore().getEventBus().publish("appSearchFinished");
                    return jQuery.when(true); // make deferred returned by "then" resolved
                });
            } else {
                // 2. do not search
                that.setProperty("/appResults", []);
                that.setProperty("/appCount", 0);
                sap.ui.getCore().getEventBus().publish("appSearchFinished");
            }
        },

        normalSearch: function(bDeserialization) {
            var that = this;

            if (that.isBusinessObjSearchEnabled() && !that.isAppCategory()) {
                // 1.search
                that.query.setSearchTerms(that.getSearchBoxTerm());
                that.query.setDataSource(that.getDataSource());

                /*
            	            deserialize: false	             deserialize: true
                skip===0	NA,replace with new table	     NA, replace
                skip>0	    NA: Append to existing table	 newSkip=0
                                                             newT0p=oldTop+oldSkip
                                                             replace
               */
                var newTop = that.getTop();
                var newSkip = that.getSkip();
                if (bDeserialization === true) {
                    if (that.getSkip() > 0) {
                        newTop = that.getSkip() + that.getTop();
                        newSkip = 0;
                    }
                }

                that.query.setTop(newTop);
                that.query.setSkip(newSkip);
                if (that.query.setExpand) {
                    if ((that.getFacetVisibility() && that.isFacetSearchEnabled()) ||
                        // tab strip needs data from data source facet if a category is selected because
                        // then the tab strips show also siblings. If connector is selected, the tab strip
                        // only shows All and the connector.
                        that.getDataSource().getType().value === 'Category') {
                        that.query.setExpand(['Grid', 'Items', 'ResultsetFacets', 'TotalCount']);
                    } else {
                        that.query.setExpand(['Grid', 'Items', 'TotalCount']);
                    }

                }

                return that.query.getResultSet().then(function(perspective) {
                    // 1.1 search succeeded
                    that.perspective = perspective;

                    return that._afterSearchPrepareResultList(that.perspective, newSkip > 0).then(function() {
                        sap.ui.getCore().getEventBus().publish("normalSearchFinished", {
                            append: that.getSkip() > 0,
                            resultset: that.perspective
                        });
                    });
                }, function(error) {
                    // 1.2 search failed
                    sap.ui.getCore().getEventBus().publish("normalSearchFinished", {
                        append: that.getSkip() > 0,
                        resultset: null
                    });
                    that.normalSearchErrorHandling(error);
                    that.perspective = null;
                    return jQuery.when(true); // make deferred returned by "then" resolved
                });
            } else {
                // 2. do not search
                that.setProperty("/boResults", []);
                that.setProperty("/boCount", 0);
                sap.ui.getCore().getEventBus().publish("normalSearchFinished", {
                    append: that.getSkip() > 0,
                    resultset: null
                });
            }
        },

        normalSearchErrorHandling: function(error) {

            // example error:
            // error = {};
            // error.responseText = '{"Error":{"Code":200,"Message":"Engine-Fehler"},"ErrorDetails":[{"Code":"ESH_FED_MSG020","Message":"Suchumfang ist nicht gültig HT3360~EPM_EMPLOYEES_DEMO~"}]}';
            // error.responseText = '{"Error":{"Code":200,"Message":"Engine error"},"ErrorDetails":[{"Code":"ESH_FED_MSG016",
            // "Message":"No authorization for the given list of connectors"}]}';

            //these ina service errors shall not appear as popups:
            var ignoredErrors = ["ESH_FED_MSG016"]; //<- No authorization for the given list of connectors,
            //or no connectors active (i.e. only app search is used)

            if (error) {
                if (error.status === 500) {
                    jQuery.sap.log.error(error.responseText);
                    jQuery.sap.require("sap.m.MessageBox");
                    sap.m.MessageBox.alert(error.responseText, {
                        title: "Search Error: " + error.statusText,
                        icon: sap.m.MessageBox.Icon.ERROR
                    });
                }

                if (error.responseText) {
                    var showErrorPopup = true;
                    var inaErr = jQuery.parseJSON(error.responseText);
                    var errMsg = '';
                    var detailMsg = '';
                    if (inaErr.Error) {
                        if (inaErr.Error.Message) {
                            errMsg += '' + inaErr.Error.Message;
                        }
                        if (inaErr.Error.Code) {
                            errMsg += ' (Code ' + inaErr.Error.Code + ').';
                        }
                    }
                    if (inaErr.ErrorDetails) {
                        detailMsg += '';
                        for (var i = 0; i < inaErr.ErrorDetails.length; i++) {
                            detailMsg += inaErr.ErrorDetails[i].Message + ' (Code ' + inaErr.ErrorDetails[i].Code + ')';
                            if (ignoredErrors.indexOf(inaErr.ErrorDetails[i].Code) !== -1) {
                                showErrorPopup = false;
                            }
                        }
                    }
                    jQuery.sap.log.error(errMsg + ' Details: ' + detailMsg);
                    if (showErrorPopup) {
                        jQuery.sap.require("sap.m.MessageBox");
                        sap.m.MessageBox.alert(detailMsg, {
                            title: "Search Error: " + errMsg,
                            icon: sap.m.MessageBox.Icon.ERROR
                        });
                    }
                } else {
                    var message = 'Search error:' + error.toString();
                    jQuery.sap.log.error(message);
                    jQuery.sap.require("sap.m.MessageBox");
                    sap.m.MessageBox.alert(message, {
                        title: 'Search Error',
                        icon: sap.m.MessageBox.Icon.ERROR
                    });
                }
            }
        },

        _afterSearchPrepareResultList: function(perspective, append) {
            var that = this;

            var oldResults = that.getProperty("/boResults");
            if (append) {
                oldResults.pop(); //Remove footer
            } else {
                that.setProperty("/boResults", []);
                that.setProperty("/boCount", 0);
                oldResults = that.getProperty("/boResults");
            }

            var formatter = new SearchResultListFormatter();
            var results = formatter.format(perspective.getSearchResultSet(), this.query.filter.searchTerms);

            var intentsResolver = new sap.ushell.renderers.fiori2.search.SearchIntentsResolver(that);
            var intentsProm = intentsResolver.resolveIntents(results);

            intentsProm.done(function(args) { //TODO: error handling
                var newResults = oldResults.concat(results);

                //move footer to control //TODO
                //Add footer
                //There is more
                if (newResults.length < perspective.getSearchResultSet().totalcount) {
                    var resultListFooter = {};
                    resultListFooter.type = "footer";
                    newResults.push(resultListFooter);
                }

                that.setProperty("/boCount", perspective.getSearchResultSet().totalcount);
                that.setProperty("/boResults", newResults);
            });

            return intentsProm;
        },

        createSearchURL: function() {

            // use encodeURIComponent and not encodeURI because:
            // >= in filter condition needs to be
            // encoded. If = ist not encoded the url parameter parser will use = as delimiter for
            // a parameter=value pair

            // prefix
            var sHash = "#Action-search";

            // searchterm
            sHash += "&/searchterm=" + encodeURIComponent(this.getProperty('/searchBoxTerm'));

            // datasource            
            sHash += "&datasource=" + encodeURIComponent(JSON.stringify(this.getDataSource().toURL()));

            // top
            sHash += "&top=" + this.getTop();

            // skip
            sHash += "&skip=" + this.getSkip();

            // filter conditions
            if (this.getProperty("/filterConditions").length > 0) {
                sHash += "&filter=" +
                    encodeURIComponent(JSON.stringify(this.getProperty("/filterConditions")));
            }

            return sHash;
        },

        updateSearchURLSilently: function() {
            var sHash = this.createSearchURL();
            SearchHelper.hasher.setHash(sHash);
        },

        deserializeURL: function() {

            // check if hash differs from old hash. if not -> return
            if (!SearchHelper.hasher.hasChanged()) {
                return;
            }

            // parse hash parameters
            var oURLParsing = sap.ushell.Container.getService("URLParsing");
            var appSpecificRoute = oURLParsing.splitHash(window.location.hash).appSpecificRoute;
            if (!appSpecificRoute) {
                return;
            }
            var oParameters = oURLParsing.parseParameters("?" + appSpecificRoute.substring(2));

            // make parameters lowercase
            var oParametersLowerCased = {};
            jQuery.each(oParameters, function(i, v) {
                oParametersLowerCased[i.toLowerCase()] = v[0]; // decode happens in app view deserialize url
            });

            // search term
            if (!oParametersLowerCased.searchterm) {
                return;
            }
            var searchTerm = oParametersLowerCased.searchterm;
            this.setSearchBoxTerm(searchTerm, false);

            // datasource
            var dataSource;
            if (oParametersLowerCased.datasource) {
                var dataSourceJson = JSON.parse(oParametersLowerCased.datasource);
                if (dataSourceJson.name === 'Apps') {
                    dataSource = this.appDataSource;
                } else {
                    dataSource = this.sina.createDataSource(dataSourceJson);
                }
                this.setDataSource(dataSource, false);
            } else {
                this.resetDataSource(false);
            }

            // top
            if (oParametersLowerCased.top) {
                var top = parseInt(oParametersLowerCased.top, 10);
                this.setTop(top, false);
            }

            // skip
            if (oParametersLowerCased.skip) {
                var skip = parseInt(oParametersLowerCased.skip, 10);
                this.setSkip(skip, false);
            }

            // filter conditions
            this.resetFilterConditions(false);
            if (oParametersLowerCased.filter) {
                var facetItems = JSON.parse(oParametersLowerCased.filter);
                for (var i = 0, len = facetItems.length; i < len; i++) {
                    var facetItem = new sap.ushell.renderers.fiori2.search.FacetItem(facetItems[i]);
                    this.addFilterCondition(facetItem, false);
                }
            }

            // fire query
            this._searchFireQuery(true);

        },

        checkFiltersIdentical: function(filter1, filter2) {

            // check each filter condition in filter1 against condition in filter2
            var filter2Matches = [];
            for (var i = 0; i < filter1.length; ++i) {
                var filterItem1 = filter1[i];

                var match = false;
                for (var j = 0; j < filter2.length; ++j) {
                    var filterItem2 = filter2[j];
                    if (filterItem1.filterCondition.equals(filterItem2.filterCondition)) {
                        match = true;
                        filter2Matches[j] = true;
                        break;
                    }
                }
                if (!match) {
                    return false;
                }

            }

            // check that for all filters in filter2 there is a match
            for (var k = 0; k < filter2.length; ++k) {
                if (!filter2Matches[k]) {
                    return false;
                }
            }

            return true;
        },

        cloneFilterConditions: function(filter) {
            // TODO replace by none jquery way
            var newFilter = jQuery.extend(true, [], filter);
            return newFilter;
        }

    });

})(window);

}; // end of sap/ushell/renderers/fiori2/search/SearchModel.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.SearchShellHelper') ) {
// iteration 0 ok
/* global jQuery, sap, window */
(function() {
    "use strict";

    
    var SearchFieldGroup = sap.ushell.renderers.fiori2.search.controls.SearchFieldGroup;
    
    jQuery.sap.declare('sap.ushell.renderers.fiori2.search.SearchShellHelper');
    var module = sap.ushell.renderers.fiori2.search.SearchShellHelper = {};
    
    var SemanticObjectsHandler = sap.ushell.renderers.fiori2.search.SemanticObjectsHandler;

    jQuery.extend(module, {

        init: function(isOpen) {
            var that = this;

            // member fields
            this.oShell = sap.ui.getCore().byId('shell');

            // create search model
            this.oModel = sap.ushell.renderers.fiori2.search.getModelSingleton();

            // create controls
            this.oSearchFieldGroup = new SearchFieldGroup("searchFieldInShell");
            this.oSearchFieldGroup.setModel(this.oModel);
            this.oShell.setSearch(this.oSearchFieldGroup);


            this.oSearchInput = this.oSearchFieldGroup.getAggregation("input");
            this.oSearchSelect = this.oSearchFieldGroup.getAggregation("select");
            this.oSearchButton = this.oSearchFieldGroup.getAggregation("button");
            this.oSearchButton.setType(sap.m.ButtonType.Transparent);

            // search select
            var tabletMaxWidth = 1150;
            if (jQuery(window).width() <= tabletMaxWidth) {
                // if screen is tablet-sized, then display select as a filter icon
                this.oSearchSelect.setDisplayMode('icon');
            }

            // search input
            //            this.oSearchInput.addEventDelegate({
            //                onAfterRendering: function(oEvent) {
            //                    // don't set focus in pohne.
            //                    // workaround for soft-keyboard-pop-up
            //                    if (!sap.ui.Device.system.phone) {
            //                        setTimeout(function() {
            //                            //  that.oSearchInput.focus();
            //                        }, 350);
            //                    }
            //                }
            //            }, this.oSearchInput);

            // search button
            this.oSearchButton.attachPress(function() {
                that.handleClickSearchButton();
            });

            sap.ui.getCore().getEventBus().subscribe("allSearchFinished", this.onAllSearchFinished, this);
            sap.ui.getCore().byId('navContainer').attachAfterNavigate(this.onAfterNavigate, this);

            // check if search field group is open
            // closeSearchFieldGroup -> false
            // openSearchFieldGroup -> true
            //            this.isSearchFieldGroupOpen = window.location.hash.substr(0, 14).toLowerCase() === '#action-search' ? true : false;

            if (isOpen || isOpen === undefined) {
                // open and center aligned
                this.openSearchFieldGroup(false);
                this.setSearchFieldGroupInCenter();
            } else {
                // closed and right aligned
                this.closeSearchFieldGroup(false);
                this.setSearchFieldGroupOnSide();
            }

        },

        onAfterNavigate: function(oEvent) {
            // navigation tries to restore the focus -> but application knows better how to set the focus
            // -> after navigation call focus setter of search application
            if (oEvent.getParameter('toId') !== 'shellPage-Action-search' &&
                oEvent.getParameter('toId') !== 'applicationShellPage-Action-search') {
                return;
            }
            //sap.ui.getCore().byId('searchContainerResultsView').setFocus();
            var oSearchView = sap.ui.getCore().byId('searchContainerResultsView');
            if (oSearchView && oSearchView.oFocusHandler) {
                oSearchView.oFocusHandler.setFocus();
            }
        },

        onAllSearchFinished: function() {
            this.setSearchFieldGroupInCenter();
            this.oSearchInput.setValue(this.oModel.getSearchBoxTerm());
        },


        setOpenStyle: function() {
            // switch off end-area-search-icon
            // not to use sap.ui.getCore().byId('sf').setVisible(false), avoid re-rendering
            jQuery('#sf').removeClass("sapUshellSearchFieldElementDisplayInlineBlock");
            jQuery('#sf').addClass("sapUshellSearchFieldElementDisplayNone");
            // switch on center-area-search-icon
            this.oSearchButton.removeStyleClass("sapUshellSearchFieldElementDisplayNone");
            this.oSearchButton.addStyleClass("sapUshellSearchFieldElementDisplayBlock");

            this.oSearchFieldGroup.addStyleClass("sapUshellSearchFieldGroupMaximized");
            this.oSearchFieldGroup.removeStyleClass("sapUshellSearchFieldGroupMinimized");
            this.oSearchFieldGroup.removeStyleClass("sapUshellSearchFieldGroupNotVisible");
        },


        setCloseStyle: function() {
            this.setSearchFieldGroupOnSide();
            this.oSearchFieldGroup.removeStyleClass("sapUshellSearchFieldGroupMaximized");
            this.oSearchFieldGroup.addStyleClass("sapUshellSearchFieldGroupMinimized");
            this.oSearchFieldGroup.addStyleClass("sapUshellSearchFieldGroupNotVisible");

            // switch on end-area-search-icon
            // not to use sap.ui.getCore().byId('sf').setVisible(false), avoid re-rendering
            jQuery('#sf').removeClass("sapUshellSearchFieldElementDisplayNone");
            jQuery('#sf').addClass("sapUshellSearchFieldElementDisplayInlineBlock");
            // switch off center-area-search-icon
            this.oSearchButton.removeStyleClass("sapUshellSearchFieldElementDisplayBlock");
            this.oSearchButton.addStyleClass("sapUshellSearchFieldElementDisplayNone");
        },


        setSearchFieldGroupInCenter: function() {
            this.oSearchFieldGroup.addStyleClass("sapUshellSearchFieldGroupInCenter");
            this.oSearchFieldGroup.removeStyleClass("sapUshellSearchFieldGroupOnSide");
        },

        setSearchFieldGroupOnSide: function() {
            this.oSearchFieldGroup.removeStyleClass("sapUshellSearchFieldGroupInCenter");
            this.oSearchFieldGroup.addStyleClass("sapUshellSearchFieldGroupOnSide");
        },

        resetModel: function() {
            this.oSearchInput.setValue('');
            this.oModel.setSearchBoxTerm('');
            this.oModel.resetDataSource(false);
            this.oModel.resetFilterConditions(false);
        },

        openSearchFieldGroup: function(hasAnimation) {
            var that = this;

            //Pre-Fetch all App Tiles
            sap.ushell.Container.getService("Search")._getCatalogTiles();

            //Early Initialization of Semantics Objects Handler
            SemanticObjectsHandler.getSemanticObjectsMetadata();

            //            jQuery('.sapUshellSearchFieldGroupSubContainer').css('display', 'inline');
            if (hasAnimation) {
                // before animation
                that.setOpenStyle();
                // animation select
                if (jQuery('#searchFieldInShell-select').length > 0) {
                    // have select
                    // for first animation, a re-rendering will happen due to the data arriving, essentially killing the animation half-way through
                    jQuery('#searchFieldInShell-select').css('max-width', '0%').animate({
                        'max-width': '30%'
                    }, {
                        duration: 200,
                        complete: function() {
                            jQuery(this).css('max-width', '');
                        }
                    });
                }
                // animation input
                var inputMaxWidth = jQuery('.sapUshellSearchFieldGroupSubContainer').width() * 0.85 - 4 + "px";
                jQuery('#searchFieldInShell-input').css('max-width', '0%').animate({
                    'max-width': inputMaxWidth
                }, {
                    duration: 300,
                    complete: function() {
                        that.setOpenStyle();
                        if (!sap.ui.Device.system.phone) {
                            that.oSearchInput.focus();
                        }
                        jQuery(this).css('max-width', '');
                    }
                });
            } else {
                that.setOpenStyle();
                if (!sap.ui.Device.system.phone) {
                    that.oSearchInput.focus();
                }
            }

            that.isSearchFieldGroupOpen = true;
        },


        closeSearchFieldGroup: function(hasAnimation) {
            var that = this;

            if (hasAnimation) {
                // before animation
                that.oSearchFieldGroup.addStyleClass("sapUshellSearchFieldGroupOnSide");
                that.oSearchFieldGroup.removeStyleClass("sapUshellSearchFieldGroupInCenter");
                // animation select
                //jQuery('#searchFieldInShell-select').animate({
                //    'width': '0'
                //}, {
                //    duration: 20000,
                //    complete: function() {
                //        jQuery(this).css('width', '');
                //    }
                //});
                // animation input
                var inputWidth = jQuery('#searchFieldInShell-input').width() + "px";
                jQuery('#searchFieldInShell-input').css('max-width', inputWidth).animate({
                    'max-width': '0%'
                }, {
                    duration: 400,
                    complete: function() {
                        //jQuery('.sapUshellSearchFieldGroupSubContainer').css('display', 'none');
                        that.setCloseStyle();
                    }
                });
            } else {
                //jQuery('.sapUshellSearchFieldGroupSubContainer').css('display', 'none');
                that.setCloseStyle();
            }

            that.isSearchFieldGroupOpen = false;
        },


        handleClickSearchButton: function() {
            /* eslint no-lonely-if:0 */
            if (window.location.hash.substr(1, 13) !== "Action-search") {
                // not in search app
                //                if (!this.isSearchFieldGroupOpen) {
                //                    // 1 open search box
                //                    var that = this;
                //                    window.setTimeout(function() {
                //                        that.openSearchFieldGroup(true);
                //                    }, 20);
                //                } else {
                if (this.isSearchFieldGroupOpen) {
                    // 2 close search
                    // special logic, defined here
                    if (this.oSearchInput.getValue() === "") {
                        this.closeSearchFieldGroup(true);
                    }
                    // 3 trigger serach
                    // general logic, defined in searchFieldGroup
                }
            }
            // else in search app
            // 3 trigger serach
            // general logic, defined in searchFieldGroup
        }

    });

})();

}; // end of sap/ushell/renderers/fiori2/search/SearchShellHelper.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.container.App.controller') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.container.App.controller');
// iteration 0 ok

// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

/* global jQuery, sap */
jQuery.sap.require('sap.m.MessageToast'); // unlisted dependency retained


var SearchShellHelper = sap.ushell.renderers.fiori2.search.SearchShellHelper;

/* global sap */
sap.ui.controller("sap.ushell.renderers.fiori2.search.container.App", {

    onInit: function() {
        "use strict";
        this.oShellNavigation = sap.ushell.Container.getService("ShellNavigation");
        this.oShellNavigation.hashChanger.attachEvent("hashChanged", this.hashChanged);

        if (SearchShellHelper.oSearchFieldGroup === undefined) {
            SearchShellHelper.init();
        }

        sap.ui.getCore().byId('sf').setVisible(false);
        // jQuery('#sf') is undefined in openSearchFieldGroup at this time point
        SearchShellHelper.openSearchFieldGroup(false);
        SearchShellHelper.setSearchFieldGroupInCenter();

        // do not hide search bar, when search app runs
        if (sap.ui.Device.system.tablet || sap.ui.Device.system.phone) {
            sap.ushell.services.AppConfiguration.setHeaderHiding(false);
        }
    },

    hashChanged: function(oEvent) {
        "use strict";
        var model = sap.ushell.renderers.fiori2.search.getModelSingleton();
        model.deserializeURL();
    },

    onExit: function() {
        "use strict";
        this.oShellNavigation.hashChanger.detachEvent("hashChanged", this.hashChanged);
        SearchShellHelper.closeSearchFieldGroup(false);
        SearchShellHelper.setSearchFieldGroupOnSide();
        // allow to hide search bar, when search app exits
        if (sap.ui.Device.system.tablet || sap.ui.Device.system.phone) {
            sap.ushell.services.AppConfiguration.setHeaderHiding(true);
        }
        if (this.oView.oPage.oFacetDialog) {
            //            this.oView.oPage.oFacetDialog.close();
            this.oView.oPage.oFacetDialog.destroy();
        }
    }

});

}; // end of sap/ushell/renderers/fiori2/search/container/App.controller.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.container.App.view') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.container.App.view');
// iteration 0 ok
/* global jQuery, sap, window, console */

// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview
 *
 * @version
 */

(function(global) {
    "use strict";

    


    
    

    sap.ui.jsview("sap.ushell.renderers.fiori2.search.container.App", {

        createContent: function() {
            var that = this;

            // create search model
            if (!this.oModel) {
                this.oModel = sap.ushell.renderers.fiori2.search.getModelSingleton();
            }
            this.setModel(sap.ushell.resources.i18nModel, "i18n");

            // search result screen
            this.oSearchResults = sap.ui.view({
                id: "searchContainerResultsView",
                tooltip: "{i18n>searchResultsView_tooltip}",
                viewName: "sap.ushell.renderers.fiori2.search.container.Search",
                type: sap.ui.core.mvc.ViewType.JS
            });

            this.oSearchResults.setModel(that.oModel);
            this.oSearchResults.setAppView(that);

            // deserialze URL
            this.oModel.deserializeURL();

            // create page
            this.oPage = this.pageFactory("searchPage", [this.oSearchResults]);

            return this.oPage;
        },

        beforeExit: function() {

        },

        pageFactory: function(sId, oControl, bDisableBouncing) {
            var that = this;

            var oSearchBar = new sap.ushell.renderers.fiori2.search.controls.SearchBar({
                oSearchLayout: that.oSearchResults.searchLayout,
                filterButtonPressed: that.oModel.getProperty('/facetVisibility'),
                filterButtonVisible: {
                    parts: [{
                        path: '/businessObjSearchEnabled'
                    }],
                    formatter: function(businessObjSearchEnabled) {
                        return !sap.ui.Device.system.phone &&  businessObjSearchEnabled;
                    }
                },
                contentMiddle: new sap.m.Label({
                    text: {
                        parts: [{
                            path: '/count'
                        }],
                        formatter: function(count) {
                            var str = sap.ushell.resources.i18n.getText("searchResults") + ' (' + sap.ui.core.format.NumberFormat.getIntegerInstance({
                                style: "short"
                                    //style: "standard",
                                    //groupingEnabled: true
                            }).format(count) + ')';
                            return str;
                        }
                    }
                })
            });
            oSearchBar.setModel(that.oModel);

            var oPage = new sap.m.Page({
                id: sId,
                customHeader: oSearchBar,
                content: oControl,
                enableScrolling: true,
                showFooter: true
            });
            oPage.setModel(that.oModel);

            // who is using these events? Necessary? //TODO
            var aEvents = ["onAfterHide", "onAfterShow", "onBeforeFirstShow",
                "onBeforeHide", "onBeforeShow"
            ];
            var oDelegates = {};

            that.createFooter(oPage);

            // Pass navigation container events to children.
            jQuery.each(aEvents, function(iIndex, sEvent) {
                oDelegates[sEvent] = jQuery.proxy(function(evt) {
                    jQuery.each(this.getContent(), function(iIndex, oControl) {
                        /*jslint nomen: true */
                        oControl._handleEvent(evt);
                    });
                }, oPage);
            });

            oPage.addEventDelegate(oDelegates);
            if (!sap.ui.Device.system.desktop) {
                oPage._bUseIScroll = true;
            }
            if (bDisableBouncing) {
                this.disableBouncing(oPage);
            }

            // compact class for non-touch devices
            if (!sap.ui.Device.support.touch) {
                var oView = sap.ui.getCore().byId("searchContainerApp");
                oView.addStyleClass('sapUiSizeCompact');
            }

            return oPage;
        },

        getControllerName: function() {
            return "sap.ushell.renderers.fiori2.search.container.App";
        },

        createFooter: function(oPage) {

            var that = this;

            // no footer on phone
            if (jQuery.device.is.phone) {
                return;
            }

            // create bookmark button (entry in action sheet)
            var oBookmarkButton = new sap.ushell.ui.footerbar.AddBookmarkButton({
                beforePressHandler: function() {
                    var oAppData = {
                        url: document.URL,
                        title: that.getTileTitleProposal(),
                        icon: sap.ui.core.IconPool.getIconURI("search")
                    };
                    oBookmarkButton.setAppData(oAppData);
                }
            });
            oBookmarkButton.setWidth('auto');

            var oEmailButton = new sap.m.Button();
            oEmailButton.setIcon("sap-icon://email");
            oEmailButton.setText(sap.ushell.resources.i18n.getText("eMailFld"));
            oEmailButton.attachPress(function() {
                sap.m.URLHelper.triggerEmail(null, that.getTileTitleProposal(), document.URL);
            });
            oEmailButton.setWidth('auto');

            // add these two jam buttons when we know how to configure jam in fiori  //TODO
            //var oJamShareButton = new sap.ushell.ui.footerbar.JamShareButton();
            //var oJamDiscussButton = new sap.ushell.ui.footerbar.JamDiscussButton();


            // create action sheet
            var oActionSheet = new sap.m.ActionSheet({
                placement: 'Top',
                buttons: [oBookmarkButton, oEmailButton]
            });

            // button which opens action sheet
            var oShareButton = new sap.m.Button({
                icon: 'sap-icon://action',
                tooltip: sap.ushell.resources.i18n.getText('shareBtn'),
                press: function() {
                    oActionSheet.openBy(oShareButton);
                }
            });

            // create footer bar
            var oBar = new sap.m.Bar({
                contentRight: [oShareButton]
            });

            //destroy footer if available
            var oFooter = oPage.getFooter();
            if (oFooter && oFooter.destroy) {
                oFooter.destroy();
            }

            oPage.setFooter(oBar);

        },

        getTileTitleProposal: function() {
            var searchTerm = this.oModel.getSearchBoxTerm();
            var dataSourceLabel = this.oModel.getDataSource().label;
            var title;
            if (this.oModel.getDataSource().equals(this.oModel.allDataSource)) {
                title = sap.ushell.resources.i18n.getText('searchTileTitleProposalAll', [searchTerm]);
            } else {
                title = sap.ushell.resources.i18n.getText('searchTileTitleProposal', [searchTerm, dataSourceLabel]);
            }
            return title;
        }

    });


}(window));

}; // end of sap/ushell/renderers/fiori2/search/container/App.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.container.Search.controller') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.container.Search.controller');
// iteration 0: ok
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/* global jQuery, sap, console */

(function() {
    "use strict";


    

    sap.ui.controller("sap.ushell.renderers.fiori2.search.container.Search", {

        onInit: function() {
            var that = this;
            sap.ui.getCore().getEventBus().subscribe("appSearchFinished", that.getView().onAppSearchFinished, that.getView());
            sap.ui.getCore().getEventBus().subscribe("normalSearchFinished", that.getView().onNormalSearchFinished, that.getView());
            sap.ui.getCore().getEventBus().subscribe("allSearchStarted", that.getView().onAllSearchStarted, that.getView());
            sap.ui.getCore().getEventBus().subscribe("allSearchFinished", that.getView().onAllSearchFinished, that.getView());
        },

        onExit: function() {
            var that = this;
            sap.ui.getCore().getEventBus().unsubscribe("appSearchFinished", that.getView().onAppSearchFinished, that.getView());
            sap.ui.getCore().getEventBus().unsubscribe("normalSearchFinished", that.getView().onNormalSearchFinished, that.getView());
            sap.ui.getCore().getEventBus().unsubscribe("allSearchStarted", that.getView().onAllSearchStarted, that.getView());
            sap.ui.getCore().getEventBus().unsubscribe("allSearchFinished", that.getView().onAllSearchFinished, that.getView());
        }

    });
}());

}; // end of sap/ushell/renderers/fiori2/search/container/Search.controller.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.shell.Shell') ) {
/*!
 * ${copyright}
 */
/*global jQuery, sap */
/**
 * @name sap.ushell.ui.shell.Shell
 *
 * @private
 */


// Provides control sap.ushell.ui.shell.Shell.
jQuery.sap.declare('sap.ushell.ui.shell.Shell'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ushell/ui/shell/Shell",['jquery.sap.global', './ShellUtilities', './ShellHeader',
            './ShellHeadItem', './ShellHeadUserItem',
            './ShellLayout', './ShellFloatingActions', 'sap/ushell/library'],
    function (jQuery, ShellUtils, ShellHeader, ShellHeadItem, ShellHeadUserItem, ShellLayout, ShellFloatingActions, library) {
        "use strict";

    /**
     * Constructor for a new Shell.
     *
     * @param {string} [sId] id for the new control, generated automatically if no id is given
     * @param {object} [mSettings] initial settings for the new control
     *
     * @class
     * The shell control is meant as root control (full-screen) of an application.
     * It was build as root control of the Fiori Launchpad application and provides the basic capabilities
     * for this purpose. Do not use this control within applications which run inside the Fiori Lauchpad and
     * do not use it for other scenarios than the root control usecase.
     * @extends sap.ushell.ui.shell.ShellLayout
     *
     * @author SAP SE
     * @version ${version}
     *
     * @constructor
     * @private
     * @since 1.28.0
     * @alias sap.ushell.ui.shell.Shell
     * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
     */
        var Shell = ShellLayout.extend("sap.ushell.ui.shell.Shell", /** @lends sap.ushell.ui.shell.Shell.prototype */ { metadata : {

            properties : {

                /**
                 * The application icon. If a custom header is set this property has no effect.
                 */
                icon : {type : "sap.ui.core.URI", group : "Appearance", defaultValue : null},

                /**
                 * Shows / Hides the curtain.
                 * @deprecated Since version 1.16.3.
                 * Curtain is deprecated and replaced by ShellOverlay mechanism.
                 */
                showCurtain : {type : "boolean", group : "Appearance", defaultValue : null, deprecated: true},

                /**
                 * Shows / Hides the side pane on the curtain.
                 * @deprecated Since version 1.16.3.
                 * Curtain is deprecated and replaced by ShellOverlay mechanism.
                 */
                showCurtainPane : {type : "boolean", group : "Appearance", defaultValue : null, deprecated: true},

                /**
                 * If set to false, the search area (aggregation 'search') is hidden. If a custom header is set this property has no effect.
                 * @since 1.18
                 */
                searchVisible : {type : "boolean", group : "Appearance", defaultValue : true}
            },
            aggregations : {

                /**
                 * The content to appear in the curtain area.
                 */
                curtainContent : {type : "sap.ui.core.Control", multiple : true, singularName : "curtainContent"},

                /**
                 * The content to appear in the pane area of the curtain.
                 */
                curtainPaneContent : {type : "sap.ui.core.Control", multiple : true, singularName : "curtainPaneContent"},

                /**
                 * The buttons shown in the begin (left in left-to-right case) of the Shell header. Currently max. 3 visible buttons are supported. If a custom header is set this aggregation has no effect.
                 */
                headItems : {type : "sap.ushell.ui.shell.ShellHeadItem", multiple : true, singularName : "headItem"},


                /**
                 * The buttons shown in the end (right in left-to-right case) of the Shell header. Currently max. 3 visible buttons are supported (when user is set only 1). If a custom header is set this aggregation has no effect.
                 */
                headEndItems : {type : "sap.ushell.ui.shell.ShellHeadItem", multiple : true, singularName : "headEndItem"},

                /**
                 * Experimental (This aggregation might change in future!): The search control which should be displayed in the shell header. If a custom header is set this aggregation has no effect.
                 */
                search : {type : "sap.ui.core.Control", multiple : false},

                /**
                 * The user item which is rendered in the shell header beside the items. If a custom header is set this aggregation has no effect.
                 * @since 1.22.0
                 */
                user : {type : "sap.ushell.ui.shell.ShellHeadUserItem", multiple : false},

                /**
                 * The action button which is rendered floating in the shell content area. If a custom header is set this aggregation has no effect.
                 */
                floatingActions : {type : "sap.ushell.ui.shell.ShellFloatingAction", multiple : true, singularName : "floatingAction"}
            }
        }});

        Shell.prototype.init = function () {
            jQuery.sap.require("sap.ushell.resources");
            this.resourceBundle = sap.ushell.resources.i18n;
            ShellLayout.prototype.init.apply(this, arguments);
            this._header = new ShellHeader(this.getId() + "-header");
            this._floatingActions = new ShellFloatingActions(this.getId() + "floatingActions");
            this._floatingActions.setParent(this);
            this.setHeader(this._header);
            this._header.setAriaLabel(this.resourceBundle.getText("Shell_Header_AriaLabel"));
        };

        Shell.prototype.exit = function () {
            ShellLayout.prototype.exit.apply(this, arguments);
            if (this._header) {
                this._header.destroy();
                delete this._header;
            }
            if (this._floatingActions) {
                this._floatingActions.destroy();
                delete this._floatingActions;
            }
        };

        //Needed by sap.ushell.ui.shell.ShellOverlay
        Shell.prototype._getSearchWidth = function () {
            if (this._header === this.getHeader() && this._header.getDomRef()) {
                var $ShellSearchArea = this._header.$("hdr-center").children();
                if ($ShellSearchArea.length) {
                    return $ShellSearchArea.width();
                }
            }
            return -1;
        };


        // ***************** API / Overridden generated API *****************

        Shell.prototype.setIcon = function (sIcon) {
            if (this._header) {
                this.setProperty("icon", sIcon, true);
                this._header.setLogo(sIcon);
            } else {
                jQuery.sap.log.warning('Shell setIcon is called but no header exists');
            }
            return this;
        };

        Shell.prototype.getIcon = function () {
            return this._header.getLogo();
        };

        Shell.prototype.setSearchVisible = function (bSearchVisible) {
            this.setProperty("searchVisible", bSearchVisible, true);
            this._header.setSearchVisible(bSearchVisible);
            // hide title when opening search and wise-versa
            this.toggleStyleClass("sapUshellShellHeadTitleInvisible", bSearchVisible);
            return this;
        };

        Shell.prototype.getSearchVisible = function () {
            return this._header.getSearchVisible();
        };

        Shell.prototype.setSearch = function (oSearch) {
            this._header.setSearch(oSearch);
            return this;
        };

        Shell.prototype.getSearch = function () {
            return this._header.getSearch();
        };

        Shell.prototype.setUser = function (oUser) {
            this._header.setUser(oUser);
            return this;
        };

        Shell.prototype.getUser = function () {
            return this._header.getUser();
        };

        Shell.prototype.getHeadItems = function () {
            return this._header.getHeadItems();
        };
        Shell.prototype.insertHeadItem = function (oHeadItem, iIndex) {
            this._header.insertHeadItem(oHeadItem, iIndex);
            return this;
        };
        Shell.prototype.addHeadItem = function (oHeadItem) {
            this._header.addHeadItem(oHeadItem);
            return this;
        };
        Shell.prototype.removeHeadItem = function (vIndex) {
            return this._header.removeHeadItem(vIndex);
        };
        Shell.prototype.removeAllHeadItems = function () {
            return this._header.removeAllHeadItems();
        };
        Shell.prototype.destroyHeadItems = function () {
            this._header.destroyHeadItems();
            return this;
        };
        Shell.prototype.indexOfHeadItem = function (oHeadItem) {
            return this._header.indexOfHeadItem(oHeadItem);
        };


        Shell.prototype.getHeadEndItems = function () {
            return this._header.getHeadEndItems();
        };
        Shell.prototype.insertHeadEndItem = function (oHeadItem, iIndex) {
            this._header.insertHeadEndItem(oHeadItem, iIndex);
            return this;
        };
        Shell.prototype.addHeadEndItem = function (oHeadItem) {
            this._header.addHeadEndItem(oHeadItem);
            return this;
        };
        Shell.prototype.removeHeadEndItem = function (vIndex) {
            return this._header.removeHeadEndItem(vIndex);
        };
        Shell.prototype.removeAllHeadEndItems = function () {
            return this._header.removeAllHeadEndItems();
        };
        Shell.prototype.destroyHeadEndItems = function () {
            this._header.destroyHeadEndItems();
            return this;
        };
        Shell.prototype.indexOfHeadEndItem = function (oHeadItem) {
            return this._header.indexOfHeadEndItem(oHeadItem);
        };

    Shell.prototype.getFloatingActions = function () {
        return this._floatingActions.getFloatingActions();
    };
    Shell.prototype.insertFloatingAction = function(oActionButton, iIndex) {
        this._floatingActions.insertFloatingAction(oActionButton, iIndex);
        return this;
    };
    Shell.prototype.addFloatingAction = function(oActionButton) {
        this._floatingActions.addFloatingAction(oActionButton);
        return this;
    };
    Shell.prototype.removeFloatingAction = function(vIndex) {
        this._floatingActions.removeFloatingAction(vIndex);
        return this;
    };
    Shell.prototype.removeAllFloatingActions = function() {
        this._floatingActions.removeAllFloatingActions();
        return this;
    };
    Shell.prototype.destroyFloatingActions = function() {
        this._floatingActions.destroyFloatingActions();
        return this;
    };
    Shell.prototype.indexOfFloatingAction = function(oActionButton) {
        return this._floatingActions.indexOfFloatingAction(oActionButton);
    };

    /**
     * Setter for the aggregated <code>header</code>.
     *
     * @param {sap.ui.core.Control} oHeader The Control which should be rendered within the Shell header or <code>null</code> to render the default Shell header.
     * @return {sap.ushell.ui.shell.Shell} <code>this</code> to allow method chaining
     * @public
     */
    Shell.prototype.setHeader = function(oHeader) {
        return ShellLayout.prototype.setHeader.apply(this, [oHeader ? oHeader : this._header]);
    };

    /**
     * Destroys the header in the aggregation named <code>header</code>, but only if a custom header is set.
     * The default header can not be destroyed.
     *
     * @return {sap.ushell.ui.shell.Shell} <code>this</code> to allow method chaining
     * @public
     */
    Shell.prototype.destroyHeader = function() {
        if (this.getHeader() === this._header) {
            return this;
        }
        return ShellLayout.prototype.destroyHeader.apply(this, []);
    };

    return Shell;

    }, /* bExport= */ true);

}; // end of sap/ushell/ui/shell/Shell.js
if ( !jQuery.sap.isDeclared('sap.ushell.ui.shell.ShellOverlay') ) {
/*!
 * ${copyright}
 */

// Provides control sap.ushell.ui.shell.ShellOverlay.
jQuery.sap.declare('sap.ushell.ui.shell.ShellOverlay'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.Device'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained
jQuery.sap.require('jquery.sap.script'); // unlisted dependency retained
sap.ui.define("sap/ushell/ui/shell/ShellOverlay",['jquery.sap.global', 'sap/ui/Device', 'sap/ui/core/Control', 'sap/ui/core/Popup', 'sap/ushell/library', './Shell', 'jquery.sap.script'],
	function(jQuery, Device, Control, Popup, library, Shell/* , jQuerySap */) {
	"use strict";


	
	/**
	 * Constructor for a new ShellOverlay.
	 *
	 * @param {string} [sId] id for the new control, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new control
	 *
	 * @class
	 * ShellOverlay to be opened in front of a sap.ushell.ui.shell.Shell
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version ${version}
	 *
	 * @constructor
	 * @private
	 * @since 1.16.3
	 * @alias sap.ushell.ui.shell.ShellOverlay
	 * @ui5-metamodel This control/element also will be described in the UI5 (legacy) designtime metamodel
	 */
	var ShellOverlay = Control.extend("sap.ushell.ui.shell.ShellOverlay", /** @lends sap.ushell.ui.shell.ShellOverlay.prototype */ { metadata : {

		defaultAggregation : "content",
		aggregations : {
	
			/**
			 * The content to appear in the overlay.
			 */
			content : {type : "sap.ui.core.Control", multiple : true, singularName : "content"}, 
	
			/**
			 * Experimental (This aggregation might change in future!): The search control which should be displayed in the overlay header.
			 */
			search : {type : "sap.ui.core.Control", multiple : false}
		},
		associations : {
	
			/**
			 * Reference to the sap.ushell.ui.shell.Shell or sap.ushell.ui.shell.ShellLayout control.
			 */
			shell : {type : "sap.ushell.ui.shell.ShellLayout", multiple : false}
		},
		events : {
	
			/**
			 * Fired when the overlay was closed.
			 */
			closed : {}
		}
	}});
	
	
	/**** API ****/
	
	/**
	 * Opens the ShellOverlay.
	 *
	 * @public
	 */
	ShellOverlay.prototype.open = function(){
		if (this._getPopup().isOpen()) {
			return;
		}
	
		this._opening = true;
		this._forceShellHeaderVisible();
		this._getPopup().setModal(true, Popup.blStack.length == 0 && this._getAnimActive() ? "sapUshellShellOvrlyBly sapUshellShellOvrlyBlyTp" : "");
		this._getPopup().open(0, Popup.Dock.BeginTop, Popup.Dock.BeginTop, window, "0 0", "none");
		var oSearch = this.getSearch();
		if (oSearch) {
			oSearch.focus();
		}
		this._opening = false;
		
		if (this._getAnimActive()) {
			jQuery.sap.delayedCall(50, this, function(){
				jQuery.sap.byId("sap-ui-blocklayer-popup").toggleClass("sapUshellShellOvrlyBlyTp", false);
			});
		}
		
		jQuery.sap.delayedCall(this._getAnimDuration(true), this, function(){
			this.$().toggleClass("sapUshellShellOvrlyOpening", false);
		});
	};
	
	/**
	 * Closes the ShellOverlay.
	 *
	 * @public
	 */
	ShellOverlay.prototype.close = function(){
		if (!this._getPopup().isOpen()) {
			return;
		}
		
		this.$().toggleClass("sapUshellShellOvrlyCntntHidden", true).toggleClass("sapUshellShellOvrlyClosing", true);
		
		this._setSearchWidth();
		
		jQuery.sap.delayedCall(Math.max(this._getAnimDuration(false) - this._getBLAnimDuration(), 0), this, function(){
			var $Bl = jQuery.sap.byId("sap-ui-blocklayer-popup");
			if (Popup.blStack.length == 1 && this._getAnimActive() && $Bl.hasClass("sapUshellShellOvrlyBly")) {
				$Bl.toggleClass("sapUshellShellOvrlyBlyTp", true);
			}
		});
		
		jQuery.sap.delayedCall(this._getAnimDuration(false), this, function(){
			this._getPopup().close(0);
			this.$().remove();
			this._forceShellHeaderVisible();
			this.fireClosed();
		});
	};
	
	ShellOverlay.prototype.setShell = function(vShell){
		return this.setAssociation("shell", vShell, true);
	};
	
	ShellOverlay.prototype.setSearch = function(oSearch){
		this.setAggregation("search", oSearch, true);
		if (!!this.getDomRef()) {
			this._headRenderer.render();
		}
		return this;
	};
	
	ShellOverlay.prototype.insertContent = function(oContent, iIndex) {
		var res = this.insertAggregation("content", oContent, iIndex, true);
		if (!!this.getDomRef()) {
			this._contentRenderer.render();
		}
		return res;
	};
	ShellOverlay.prototype.addContent = function(oContent) {
		var res = this.addAggregation("content", oContent, true);
		if (!!this.getDomRef()) {
			this._contentRenderer.render();
		}
		return res;
	};
	ShellOverlay.prototype.removeContent = function(vIndex) {
		var res = this.removeAggregation("content", vIndex, true);
		if (!!this.getDomRef()) {
			this._contentRenderer.render();
		}
		return res;
	};
	ShellOverlay.prototype.removeAllContent = function() {
		var res = this.removeAllAggregation("content", true);
		if (!!this.getDomRef()) {
			this._contentRenderer.render();
		}
		return res;
	};
	ShellOverlay.prototype.destroyContent = function() {
		var res = this.destroyAggregation("content", true);
		if (!!this.getDomRef()) {
			this._contentRenderer.render();
		}
		return res;
	};
	
	
	/**** Private ****/
	
	ShellOverlay.prototype.init = function(){
		this._animOpenDuration = -1;
		this._animCloseDuration = -1;
		this._animBlockLayerDuration = -1;
		this._animation = sap.ui.getCore().getConfiguration().getAnimation();
		this._opening = false;
		
		var that = this;
		
		this._headRenderer = new sap.ushell.ui.shell.shell_ContentRenderer(this, this.getId() + "-hdr-center", function(rm){
			sap.ushell.ui.shell.ShellOverlayRenderer.renderSearch(rm, that);
		});
		this._contentRenderer = new sap.ushell.ui.shell.shell_ContentRenderer(this, this.getId() + "-cntnt", function(rm){
			sap.ushell.ui.shell.ShellOverlayRenderer.renderContent(rm, that);
		});
	};
	
	ShellOverlay.prototype.exit = function(){
		if (this._popup) {
			this._popup.close(0);
			this._popup.destroy();
			this._popup = null;
		}
		
		this._getPopup = function(){return null;};
		this._headRenderer.destroy();
		delete this._headRenderer;
		this._contentRenderer.destroy();
		delete this._contentRenderer;
	};
	
	ShellOverlay.prototype.onAfterRendering = function(){
		if (this._opening) {
			this._setSearchWidth();
		}
		
		jQuery.sap.delayedCall(10, this, function(){
			this.$().toggleClass("sapUshellShellOvrlyCntntHidden", false);
			this.$("search").css("width", "");
		});
	};
	
	ShellOverlay.prototype.onclick = function(oEvent){
		if (jQuery(oEvent.target).attr("id") === this.getId() + "-close") {
			this.close();
		}
	};
	
	ShellOverlay.prototype.onThemeChanged = function(){
		this._animOpenDuration = -1;
		this._animCloseDuration = -1;
		this._animBlockLayerDuration = -1;
	};
	
	
	/**** Private Helpers ****/
	
	ShellOverlay.prototype._getAnimDurationThemeParam = function(sParam, bClearIfNotActive){
		var val = parseInt(sap.ui.core.theming.Parameters.get(sParam), 10);
		if (!this._getAnimActive() && bClearIfNotActive) {
			val = 0;
		}
		return val;
	};
	
	ShellOverlay.prototype._getAnimDuration = function(bOpen){
		if ((bOpen && this._animOpenDuration == -1) || (!bOpen && this._animCloseDuration == -1)) {
			var sTxt = bOpen ? "Open" : "Close";
			this["_anim" + sTxt + "Duration"] = this._getAnimDurationThemeParam("sapUshellShellOvrly" + sTxt + "AnimOverAll", true);
		}
		return bOpen ? this._animOpenDuration : this._animCloseDuration;
	};
	
	ShellOverlay.prototype._getBLAnimDuration = function(){
		if (this._animBlockLayerDuration == -1) {
			this._animBlockLayerDuration = this._getAnimDurationThemeParam("sapUshellShellOvrlyBlockLayerAnimDuration", true);
		}
		return this._animBlockLayerDuration;
	};
	
	ShellOverlay.prototype._getAnimActive = function(){
		if (!this._animation || (Device.browser.internet_explorer && Device.browser.version < 10)) {
			return false;
		}
		return true;
	};
	
	ShellOverlay.prototype._getPopup = function(){
		if (!this._popup) {
			this._popup = new Popup(this, true, false, false);
			this._popup._applyPosition = function(oPosition) {
				this._$().css("left", "0").css("top", "0");
				this._oLastPosition = oPosition;
				this._oLastOfRect = jQuery(window).rect();
			};
			this._popup.attachOpened(function(){
				sap.ushell.ui.shell.shell_iNumberOfOpenedShellOverlays++;
			});
			this._popup.attachClosed(function(){
				sap.ushell.ui.shell.shell_iNumberOfOpenedShellOverlays--;
			});
		}
		return this._popup;
	};
	
	ShellOverlay.prototype._getShell = function(){
		var sId = this.getShell();
		if (!sId) {
			return;
		}
		var oShell = sap.ui.getCore().byId(sId);
		if (!oShell || !(oShell instanceof sap.ushell.ui.shell.ShellLayout)) {
			return;
		}
		return oShell;
	};
	
	ShellOverlay.prototype._forceShellHeaderVisible = function(){
		var oShell = this._getShell();
		if (oShell) {
			oShell._doShowHeader(true);
		}
	};
	
	ShellOverlay.prototype._getSearchWidth = function(){
		var oShell = this._getShell();
		return oShell ? oShell._getSearchWidth() : -1;
	};
	
	ShellOverlay.prototype._setSearchWidth = function(){
		var iWidth = this._getSearchWidth();
		if (iWidth <= 0) {
			return;
		}
		
		var sWidth = iWidth + "px";
		
		if (Device.browser.safari) {
			//Safari doesn't support width transition based on different units -> so px must be replaced by %
			var iTotalWidth = this.$("hdr-center").width();
			if (iTotalWidth > iWidth) {
				sWidth = Math.round((iWidth * 100) / iTotalWidth) + "%";
			} else {
				sWidth = "100%";
			}
		}
		
		this.$("search").css("width", sWidth);
	};
	
	
	

	return ShellOverlay;

}, /* bExport= */ true);

}; // end of sap/ushell/ui/shell/ShellOverlay.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.Renderer') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

/**
 * @name sap.ushell.renderers.fiori2.Renderer
 * @since 1.9.0
 * @public
 */
(function () {
    "use strict";
    /*global jQuery, sap */
    jQuery.sap.declare("sap.ushell.renderers.fiori2.Renderer");

    
    jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained

    
    

    /**
     * This method MUST be called by the Unified Shell's container only, others MUST call
     * <code>sap.ushell.Container.createRenderer("fiori2")</code>.
     *
     * @class The SAPUI5 component of SAP Fiori Launchpad renderer for the Unified Shell.
     *
     * @extends sap.ui.core.UIComponent
     * @name sap.ushell.renderers.fiori2.Renderer
     * @since 1.15.0
     * @public
     */
    sap.ui.core.UIComponent.extend("sap.ushell.renderers.fiori2.Renderer", {
        metadata : {
            version : "1.32.6",
            dependencies : {
                version : "1.32.6",
                libs : [ "sap.ui.core", "sap.m" ],
                components: []
            }
        }
    });

    /**
     * @returns {object} an instance of Shell view
     *
     * @since 1.15.0
     *
     * @private
     */
    sap.ushell.renderers.fiori2.Renderer.prototype.createContent = function () {
        var predefineState = jQuery.sap.getUriParameters().get("appState") || jQuery.sap.getUriParameters().get("sap-ushell-config"),
            viewData = this.getComponentData() || {},
            aProperties,
            oAppConfig = {
                applications: {"Shell-home": {}},
                rootIntent: "Shell-home"
            };

        if (predefineState) {
            if (!viewData.config) {
                viewData.config = {};
            }
            viewData.config.appState = predefineState;
        }

        //the code below migrates a configuration structure from version 1.28 or older, to the default
        //expected configuration structure in 1.30
        if (viewData.config) {
            //the list of the supported properties that were supported by the renderer in version 1.28
            aProperties = ["enablePersonalization", "enableTagFiltering",
                "enableLockedGroupsCompactLayout", "enableCatalogSelection",
                "enableSearchFiltering", "enableTilesOpacity", "enableDragIndicator",
                "enableActionModeMenuButton", "enableActionModeMenuButton",
                "enableActionModeFloatingButton", "enableTileActionsIcon",
                "enableHideGroups"];

            //We need to pass this flag in order to check lately the possibility of local resolution for empty hash
            if (viewData.config.rootIntent === undefined) {
                viewData.config["migrationConfig"] = true;
            }
            viewData.config = jQuery.extend(oAppConfig, viewData.config);

            //move relevant properties from the root object to the "Shell-home" application object
            if (viewData.config.applications["Shell-home"]) {
                aProperties.forEach(function (sPropName) {
                    var value = viewData.config[sPropName];
                    if (value !== undefined) {
                        viewData.config.applications["Shell-home"][sPropName] = value;
                    }
                    if (sPropName !== "enablePersonalization") {
                        delete viewData.config[sPropName];
                    }
                });
            }
        }

        if (viewData.config && viewData.config.customViews) {
            Object.keys(viewData.config.customViews).forEach(function (sViewName) {
                var oView = viewData.config.customViews[sViewName];
                sap.ui.view(sViewName, {
                    type: oView.viewType,
                    viewName: oView.viewName,
                    viewData: oView.componentData
                });
            });
        }

        var oView = sap.ui.view('mainShell', {
            type: sap.ui.core.mvc.ViewType.JS,
            viewName: "sap.ushell.renderers.fiori2.Shell",
            viewData: viewData
        });

        // initialize the RendererExtensions after the view is create. This also publish an external event that indicates
        // that sap.ushell.renderers.fiori2.RendererExtensions can be use.
        sap.ushell.renderers.fiori2.utils.init(oView.getController());
        this.shellCtrl = oView.oController;
        return oView;
    };

    /*-------------------------------------------show----------------------------*/
    /**
     * Sets the content of the left pane in Fiori launchpad, in the given launchpad states
     * (see sap.ushell.renderers.fiori2.renderer.LaunchpadState).</br>
     * If no launchpad state is provided the content is added in all states.
     *
     * <b>Example:</b>
     * <pre>
     *   var button1 = new sap.m.Button();
     *   var renderer = sap.ushell.Container.getRenderer("fiori2");
     *   renderer.showActionButton ([button1.getId()], false, [“home”, “app”]);
     *</pre>
     * @param {String[]} aIds
     *   List of ID elements to add to the shell.
     *
     * @param {boolean} bCurrentState
     *   bCurrentState – if true, add the current component only to the current instance of the rendering of the shell.
     *   if false, add the component to the LaunchPadState itself.
     *
     * @param {String[]} aStates
     *    (only valid if bCurrentState is set to false) - list of the sap.ushell.renderers.fiori2.renderer.LaunchpadState in which to add the aIds.
     *
     * @since 1.30
     *
     * @public
     */
    sap.ushell.renderers.fiori2.Renderer.prototype.showLeftPaneContent = function (aIds, bCurrentState, aStates) {
        if (typeof aIds === "string") {
            this.shellCtrl.addLeftPaneContent([aIds], bCurrentState, aStates);
        } else {
            this.shellCtrl.addLeftPaneContent(aIds, bCurrentState, aStates);
        }
    };

    /**
     * Displays HeaderItems on the left side of the Fiori launchpad shell header, in the given launchpad states
     * (see sap.ushell.renderers.fiori2.renderer.LaunchpadState).</br>
     * If no launchpad state is provided the content is displayed in all states.</br>
     * The shell header can display only 3 HeaderItems on its left side.</br>
     * If this method is called when there are already 3 items displayed, this method will not do anything.
     *
     * <b>Example:</b>
     *   <pre>
     *   var button1 = new sap.ushell.ui.shell.ShellHeadItem();
     *   var renderer = sap.ushell.Container.getRenderer("fiori2");
     *   renderer.showHeaderItem ([button1.getId()], false, [“home”, “app”]);
     *   </pre>
     *
     * @param {String[]} aIds
     *   List of ID elements to add to the shell header.
     *
     * @param {boolean} bCurrentState
     *   if true, add the current HeaderItems only to the current instance of the rendering of the shell.
     *   if false, add the HeaderItems to the LaunchPadState itself.
     *
     * @param {String[]} aStates
     *   (only valid if bCurrentState is set to false) - list of the sap.ushell.renderers.fiori2.renderer.LaunchpadState in which to add the aIds.
     *
     * @since 1.30
     *
     * @public
     */
    sap.ushell.renderers.fiori2.Renderer.prototype.showHeaderItem = function (aIds, bCurrentState, aStates) {
        if (typeof aIds === "string") {
            this.shellCtrl.addHeaderItem([aIds], bCurrentState, aStates);
        } else {
            this.shellCtrl.addHeaderItem(aIds, bCurrentState, aStates);
        }

    };

    /**
     * Displays ToolAreaItem on the left side of the Fiori launchpad shell, in the given launchpad states
     * (see sap.ushell.renderers.fiori2.renderer.LaunchpadState).</br>
     * If no launchpad state is provided the content is displayed in all states.</br>
     *
     * <b>Example:</b>
     *   <pre>
     *   var button1 = new sap.ushell.ui.shell.ToolAreaItem();
     *   var renderer = sap.ushell.Container.getRenderer("fiori2");
     *   renderer.showToolAreaItem(button1.getId(), false, [“home”, “app”]);
     *   </pre>
     *
     * @param {string} sId
     *   ID of the element to add to the Tool Area.
     *
     * @param {boolean} bCurrentState
     *   if true, add the current ToolAreaItems only to the current instance of the rendering of the shell.
     *   if false, add the ToolAreaItems to the LaunchPadState itself.
     *
     * @param {String[]} aStates
     *   (only valid if bCurrentState is set to false) - list of the sap.ushell.renderers.fiori2.renderer.LaunchpadState in which to add the aIds.
     *
     * @since 1.30
     *
     * @public
     */
    sap.ushell.renderers.fiori2.Renderer.prototype.showToolAreaItem = function (sId, bCurrentState, aStates) {
            this.shellCtrl.addToolAreaItem(sId, bCurrentState, aStates);
    };

    /**
     * Displays Buttons on the user actions menu in the Fiori launchpad shell, in the given launchpad states
     * (see sap.ushell.renderers.fiori2.renderer.LaunchpadState).</br>
     * If no launchpad state is provided the content is displayed in all states.</br>
     * The user actions menu is opened via the button on the right hand side of the shell header.</br>
     *
     * <b>Example:</b>
     *   <pre>
     *   var button1 = new sap.m.Button();
     *   var renderer = sap.ushell.Container.getRenderer("fiori2");
     *   renderer.showActionButton([button1.getId()], false, [“home”, “app”]);
     *   </pre>
     *
     * @param {String[]} aIds
     *   List of ID elements to add to the user actions menu.
     *
     * @param {boolean} bCurrentState
     *   if true, add the current Buttons only to the current instance of the rendering of the shell.
     *   if false, add the Buttons to the LaunchPadState itself.
     *
     * @param {String[]} aStates
     *   (only valid if bCurrentState is set to false) - list of the sap.ushell.renderers.fiori2.renderer.LaunchpadState in which to add the aIds.
     * @param {boolean} bIsFirst
     *   if true, the Button will be added to the top of the ActionItems list.
     *
     * @since 1.30
     *
     * @public
     */
    sap.ushell.renderers.fiori2.Renderer.prototype.showActionButton = function (aIds, bCurrentState, aStates, bIsFirst) {
        if (typeof aIds === "string") {
            this.shellCtrl.addActionButton([aIds], bCurrentState, aStates, bIsFirst);
        } else {
            this.shellCtrl.addActionButton(aIds, bCurrentState, aStates, bIsFirst);
        }
    };

    /**
     * Displays FloatingActions on the bottom right corner of the Fiori launchpad, in the given launchpad states
     * (see sap.ushell.renderers.fiori2.renderer.LaunchpadState).</br>
     * If no launchpad state is provided the content is displayed in all states.</br>
     *
     * <b>Example:</b>
     *   <pre>
     *   var button1 = new sap.ushell.ui.shell.ShellFloatingAction();
     *   var renderer = sap.ushell.Container.getRenderer("fiori2");
     *   renderer.showActionButton([button1.getId()], false, [“home”, “app”]);
     *   </pre>
     * @param {String[]} aIds
     *   List of ID elements to add to the user actions menu.
     *
     * @param {boolean} bCurrentState
     *   if true, add the current Buttons only to the current instance of the rendering of the shell.
     *   if false, add the Buttons to the LaunchPadState itself.
     *
     * @param {String[]} aStates
     *   (only valid if bCurrentState is set to false) - list of the sap.ushell.renderers.fiori2.renderer.LaunchpadState in which to add the aIds.
     *
     * @since 1.30
     *
     * @public
     */
    sap.ushell.renderers.fiori2.Renderer.prototype.showFloatingActionButton = function (aIds, bCurrentState, aStates) {
        if (typeof aIds === "string") {
            this.shellCtrl.addFloatingActionButton([aIds], bCurrentState, aStates);
        } else {
            this.shellCtrl.addFloatingActionButton(aIds, bCurrentState, aStates);
        }
    };

    /**
     * Displays HeaderItems on the right side of the Fiori launchpad shell header, in the given launchpad states
     * (see sap.ushell.renderers.fiori2.renderer.LaunchpadState).</br>
     * If no launchpad state is provided the content is displayed in all states.</br>
     * The shell header can display the user HeaderItem, and just one more HeaderItem.</br>
     * If this method is called when the right side of the header is full, this method will not do anything.</br>
     *
     * <b>Example:</b>
     *   <pre>
     *   var button1 = new sap.ushell.ui.shell.ShellHeadItem();
     *   var renderer = sap.ushell.Container.getRenderer("fiori2");
     *   renderer.showHeaderEndItem ([button1.getId()], false, [“home”, “app”]);
     *   </pre>
     *
     * @param {String[]} aIds
     *   List of ID elements to add to the shell header.
     *
     * @param {boolean} bCurrentState
     *   if true, add the current HeaderItems only to the current instance of the rendering of the shell.
     *   if false, add the HeaderItems to the LaunchPadState itself.
     *
     * @param {String[]} aStates
     *   (only valid if bCurrentState is set to false) - list of the sap.ushell.renderers.fiori2.renderer.LaunchpadState in which to add the aIds.
     *
     * @since 1.30
     *
     * @public
     */
    sap.ushell.renderers.fiori2.Renderer.prototype.showHeaderEndItem = function (aIds, bCurrentState, aStates) {
        if (typeof aIds === "string") {
            this.shellCtrl.addHeaderEndItem([aIds], bCurrentState, aStates);
        } else {
            this.shellCtrl.addHeaderEndItem(aIds, bCurrentState, aStates);
        }
    };

    /**
     * Displays the given control in a container below the header of the Fiori launchpad shell header, in the given launchpad states
     * (see sap.ushell.renderers.fiori2.renderer.LaunchpadState).</br>
     * If no launchpad state is provided the content is displayed in all states.</br>
     *
     *<b>Example:</b>
     *<pre>
     *  var bar = new sap.m.Bar();
     *  var renderer = sap.ushell.Container.getRenderer("fiori2");
     *  renderer.showSubHeader([bar.getId()], false, [“home”, “app”]);
     *</pre>
     *
     * @param {String[]} aIds
     *   List of ID elements to add to the shell subheader.
     *
     * @param {boolean} bCurrentState
     *   if true, add the current HeaderItems only to the current instance of the rendering of the shell.
     *   if false, add the HeaderItems to the LaunchPadState itself.
     *
     * @param {String[]} aStates
     *   (only valid if bCurrentState is set to false) - list of the sap.ushell.renderers.fiori2.renderer.LaunchpadState in which to add the aIds.
     *
     * @since 1.30
     *
     * @public
     */

    sap.ushell.renderers.fiori2.Renderer.prototype.showSubHeader = function (aIds, bCurrentState, aStates) {
        if (typeof aIds === "string") {
            this.shellCtrl.addSubHeader([aIds], bCurrentState, aStates);
        } else {
            this.shellCtrl.addSubHeader(aIds, bCurrentState, aStates);
        }
    };

    /**
     * Displays the given sap.m.Bar as the footer of the Fiori launchpad shell.</br>
     * The footer will be displayed in all states. </br>
     *
     * <b>Example:</b>
     * <pre>
     *  var bar = new sap.m.Bar();
     *  var renderer = sap.ushell.Container.getRenderer("fiori2");
     *  renderer.setFooter(bar);
     * </pre>
     *
     * @param {Object} oFooter - sap.m.Bar
     *   the control to be added as the footer of the Fiori Launchpad
     *
     * @since 1.30
     *
     * @public
     */
    sap.ushell.renderers.fiori2.Renderer.prototype.setFooter = function (oFooter) {
        this.shellCtrl.setFooter(oFooter);
    };

/*--------------------------Hide ----------------------------------*/

    sap.ushell.renderers.fiori2.Renderer.prototype.hideHeaderItem = function (aIds, bCurrentState, aStates) {
        if (typeof aIds === "string") {
            this.shellCtrl.removeHeaderItem([aIds], bCurrentState, aStates);
        } else {
            this.shellCtrl.removeHeaderItem(aIds, bCurrentState, aStates);
        }
    };

    /**
     * Remove the given Tool Area Item  from Fiori Launchpad, in the given launchpad states.
     *
     *
     * @param {String[]} aIds
     *   the Ids of the sap.ushell.ui.shell.ToolAreaItem control to remove.
     *
     * @param {boolean} bCurrentState
     *   if true, remove the current control only from the current rendered shell state.
     *
     * @param {String[]} aStates
     *   list of the sap.ushell.renderers.fiori2.Renderer.LaunchpadState in which to remove the control.(Only valid if bCurrentState is set to false)
     *
     *  @see LaunchpadState.
     *
     *  If no launchpad state is provided the content is removed in all states.
     *
     * @since 1.30
     *
     * @public
     */
    sap.ushell.renderers.fiori2.Renderer.prototype.removeToolAreaItem = function (aIds, bCurrentState, aStates) {
        if (typeof aIds === "string") {
            this.shellCtrl.removeToolAreaItem([aIds], bCurrentState, aStates);
        } else {
            this.shellCtrl.removeToolAreaItem(aIds, bCurrentState, aStates);
        }
    };

    /**
     * Hide the given Action Button from Fiori Launchpad, in the given launchpad states.
     * The removed button will not be destroyed.
     *
     * @param {String[]} aIds
     *   the Ids of the Action Button to remove.
     *
     * @param {boolean} bCurrentState
     *   if true, remove the current control only from the current rendered shell state.
     *
     * @param {String[]} aStates
     *   list of the sap.ushell.renderers.fiori2.Renderer.LaunchpadState in which to remove the control.(Only valid if bCurrentState is set to false)
     *
     *  @see LaunchpadState.
     *
     *  If no launchpad state is provided the content is removed in all states.
     *
     * @since 1.30
     *
     * @public
     */
    sap.ushell.renderers.fiori2.Renderer.prototype.hideActionButton = function (aIds, bCurrentState, aStates) {
        if (typeof aIds === "string") {
            this.shellCtrl.removeActionButton([aIds], bCurrentState, aStates);
        } else {
            this.shellCtrl.removeActionButton(aIds, bCurrentState, aStates);
        }
    };

    /**
     * Hide the given control from Fiori Launchpad, in the given launchpad states.
     * The removed control will not be destroyed.
     *
     * @param {String[]} aIds
     *   the Ids of the controls to remove.
     *
     * @param {boolean} bCurrentState
     *   if true, remove the current control only from the current rendered shell state.
     *
     * @param {String[]} aStates
     *   list of the sap.ushell.renderers.fiori2.Renderer.LaunchpadState in which to remove the control.(Only valid if bCurrentState is set to false)
     *
     *  @see LaunchpadState.
     *
     *  If no launchpad state is provided the content is removed in all states.
     *
     * @since 1.30
     *
     * @public
     */
    sap.ushell.renderers.fiori2.Renderer.prototype.hideLeftPaneContent = function (aIds, bCurrentState, aStates) {
        if (typeof aIds === "string") {
            this.shellCtrl.removeLeftPaneContent([aIds], bCurrentState, aStates);
        } else {
            this.shellCtrl.removeLeftPaneContent(aIds, bCurrentState, aStates);
        }
    };

    /**
     * Hide the given sap.ushell.ui.shell.ShellFloatingAction from Fiori Launchpad, in the given launchpad states.
     * The removed control will not be destroyed.
     *
     * @param {String[]} aIds
     *   the Ids of the sap.ushell.ui.shell.ShellFloatingAction to remove.
     *
     * @param {boolean} bCurrentState
     *   if true, remove the current control only from the current rendered shell state.
     *
     * @param {String[]} aStates
     *   list of the sap.ushell.renderers.fiori2.Renderer.LaunchpadState in which to remove the control.(Only valid if bCurrentState is set to false)
     *
     *  @see LaunchpadState.
     *
     *  If no launchpad state is provided the content is removed in all states.
     *
     * @since 1.30
     *
     * @public
     */
    sap.ushell.renderers.fiori2.Renderer.prototype.hideFloatingActionButton = function (aIds, bCurrentState, aStates) {
        if (typeof aIds === "string") {
            this.shellCtrl.removeFloatingActionButton([aIds], bCurrentState, aStates);
        } else {
            this.shellCtrl.removeFloatingActionButton(aIds, bCurrentState, aStates);
        }
    };

    /**
     * Hide the given sap.ushell.ui.shell.ShellHeadItem from Fiori Launchpad, in the given launchpad states.
     * The removed control will not be destroyed.
     *
     * @param {String[]} aIds
     *   the Ids of the sap.ushell.ui.shell.ShellHeadItem to remove.
     *
     * @param {boolean} bCurrentState
     *   if true, remove the current control only from the current rendered shell state.
     *
     * @param {String[]} aStates
     *   list of the sap.ushell.renderers.fiori2.Renderer.LaunchpadState in which to remove the control.(Only valid if bCurrentState is set to false)
     *
     *  @see LaunchpadState.
     *
     *  If no launchpad state is provided the content is removed in all states.
     *
     * @since 1.30
     *
     * @public
     */
    sap.ushell.renderers.fiori2.Renderer.prototype.hideHeaderEndItem = function (aIds, bCurrentState, aStates) {
        if (typeof aIds === "string") {
            this.shellCtrl.removeHeaderEndItem([aIds], bCurrentState, aStates);
        } else {
            this.shellCtrl.removeHeaderEndItem(aIds, bCurrentState, aStates);
        }
    };
    /**
     * Hide the given control from the Fiori Launchpad sub header, in the given launchpad states.
     * The removed control will not be destroyed.
     *
     * @param {String[]} aIds
     *   the Ids of the controls to remove.
     *
     * @param {boolean} bCurrentState
     *   if true, remove the current control only from the current rendered shell state.
     *
     * @param {String[]} aStates
     *   list of the sap.ushell.renderers.fiori2.Renderer.LaunchpadState in which to remove the control.(Only valid if bCurrentState is set to false)
     *
     *  @see LaunchpadState.
     *
     *  If no launchpad state is provided the content is removed in all states.
     *
     * @since 1.30
     *
     * @public
     */
    sap.ushell.renderers.fiori2.Renderer.prototype.hideSubHeader = function (aIds, bCurrentState, aStates) {
        if (typeof aIds === "string") {
            this.shellCtrl.removeSubHeader([aIds], bCurrentState, aStates);
        } else {
            this.shellCtrl.removeSubHeader(aIds, bCurrentState, aStates);
        }
    };

    /**
     * If exists, this method will remove the footer from the Fiori Launchpad.
     *
     *
     * @since 1.30
     *
     * @public
     */
    sap.ushell.renderers.fiori2.Renderer.prototype.removeFooter = function () {
        this.shellCtrl.removeFooter();
    };

    /*------------------------------------------------add------------------------------------------*/
    /**
     * Creates the Sub Header content in Fiori launchpad, in the given launchpad states.</br>
     *
     *   <b>Example:</b>
     *   <pre> sap.ushell.Container.getRenderer("fiori2").addSubHeader("sap.m.Bar", {id: "testBar"}, true, true);</pre>
     *
     * @param {string} controlType
     *   The (class) name of the control type to create.
     *
     * @param {object} oControlProperties
     *   The properties that will be passed to the created control.
     *
     * @param {boolean} bIsVisible
     *   Specify whether to display the control.
     *
     * @param {boolean} bCurrentState
     *   If true, add the current control only to the current rendered shell state.
     *   Once the user navigates to another app or back to the Home page, this control will be removed.
     *
     * @param {String[]} aStates
     *   (only valid if bCurrentState is set to false) - list of the sap.ushell.renderers.fiori2.Renderer.LaunchpadState in which to add the control.
     *
     *  @see LaunchpadState.
     *
     *  If no launchpad state is provided the content is added in all states.
     *
     * @returns {object} oItem - the created control
     * @since 1.30
     *
     * @public
     */
    sap.ushell.renderers.fiori2.Renderer.prototype.addSubHeader = function (controlType, oControlProperties, bIsVisible, bCurrentState, aStates) {
        var fnCreate = function (oControlProperties) {
            var ViewPrototype;
            if (controlType) {
                jQuery.sap.require(controlType);
                ViewPrototype = jQuery.sap.getObject(controlType);
            } else {
                jQuery.sap.log.warning("You must specify control type in order to create it");
            }

            return new ViewPrototype(oControlProperties);
        };

        var oItem = this.createItem(oControlProperties, bCurrentState, aStates, fnCreate);
        if (bIsVisible) {
            this.showSubHeader(oItem.getId(), bCurrentState, aStates);
        }

        return oItem;
    };

    /**
     * Creates an Action Button in Fiori launchpad, in the given launchpad states. </br>
     * The button will be displayed in the user actions menu, that is opened from the user button in the shell header.</br>
     *  <b>Example:</b>
     *   <pre> sap.ushell.Container.getRenderer("fiori2").addActionButton("sap.m.Button", {id: "testBtn"}, true, true);</pre>
     *
     * @param {string} controlType
     *   The (class) name of the control type to create.
     *
     * @param {object} oControlProperties
     *   The properties that will be passed to the created control.
     *
     * @param {boolean} bIsVisible
     *   Specify whether to display the control.
     *
     * @param {boolean} bCurrentState
     *   If true, add the current control only to the current rendered shell state.
     *   Once the user navigates to another app or back to the Home page, this control will be removed.
     *
     * @param {String[]} aStates
     *   (only valid if bCurrentState is set to false) - list of the sap.ushell.renderers.fiori2.Renderer.LaunchpadState in which to add the control.
     *
     *  @see LaunchpadState.
     *
     *  If no launchpad state is provided the content is added in all states.
     *
     * @returns {object} oItem - the created control
     * @since 1.30
     *
     * @public
     */
    sap.ushell.renderers.fiori2.Renderer.prototype.addActionButton = function (controlType, oControlProperties, bIsVisible, bCurrentState, aStates) {
        var fnCreate = function (oControlProperties) {
            var ViewPrototype;
            if (controlType) {
                jQuery.sap.require(controlType);
                ViewPrototype = jQuery.sap.getObject(controlType);
            } else {
                ViewPrototype = jQuery.sap.getObject(sap.m.Button);
            }

            return new ViewPrototype(oControlProperties);
        };

        var oItem = this.createItem(oControlProperties, bCurrentState, aStates, fnCreate);
        if (bIsVisible) {
            this.showActionButton(oItem.getId(), bCurrentState, aStates);
        }

        return oItem;
    };


    /**
     * Creates a FloatingActionButton in Fiori launchpad, in the given launchpad states.</br>
     * The FloatingActionButton is rendered in the bottom right corner of the shell.</br>
     *   <b>Example:</b>
     *   <pre> sap.ushell.Container.getRenderer("fiori2").addFloatingActionButton("sap.ushell.ui.shell.ShellFloatingAction", {id: "testBtn"}, true, true);</pre>
     *
     * @param {string} controlType
     *   The (class) name of the control type to create.
     *
     * @param {object} oControlProperties
     *   The properties that will be passed to the created control.
     *
     * @param {boolean} bIsVisible
     *   Specify whether to display the control.
     *
     * @param {boolean} bCurrentState
     *   If true, add the current control only to the current rendered shell state.
     *   Once the user navigates to another app or back to the Home page, this control will be removed.
     *
     * @param {String[]} aStates
     *   (only valid if bCurrentState is set to false) - list of the sap.ushell.renderers.fiori2.Renderer.LaunchpadState in which to add the control.
     *
     *  @see LaunchpadState.
     *
     *  If no launchpad state is provided the content is added in all states.
     *
     * @returns {object} oItem - the created control
     * @since 1.30
     *
     * @public
     */
    sap.ushell.renderers.fiori2.Renderer.prototype.addFloatingActionButton = function (controlType, oControlProperties, bIsVisible, bCurrentState, aStates) {
        var fnCreate = function (oControlProperties) {
            var ViewPrototype;
            if (controlType) {
                jQuery.sap.require(controlType);
                ViewPrototype = jQuery.sap.getObject(controlType);
            } else {
                ViewPrototype = jQuery.sap.getObject(sap.m.Button);
            }

            return new ViewPrototype(oControlProperties);
        };

        var oItem = this.createItem(oControlProperties, bCurrentState, aStates, fnCreate);
        if (bIsVisible) {
            this.showFloatingActionButton(oItem.getId(), bCurrentState, aStates);
        }

        return oItem;
    };

    /**
     * Creates the Left Pane content in Fiori launchpad, in the given launchpad states.</br>
     *   <b>Example:</b>
     *   <pre> sap.ushell.Container.getRenderer("fiori2").addLeftPaneContent("sap.m.Button", {id: "testBtn"}, true, true);</pre>
     *
     * @param {string} controlType
     *   The (class) name of the control type to create.
     *
     * @param {object} oControlProperties
     *   The properties that will be passed to the created control.
     *
     * @param {boolean} bIsVisible
     *   Specify whether to display the control.
     *
     * @param {boolean} bCurrentState
     *   If true, add the current control only to the current rendered shell state.
     *   Once the user navigates to another app or back to the Home page, this control will be removed.
     *
     * @param {String[]} aStates
     *   (only valid if bCurrentState is set to false) - list of the sap.ushell.renderers.fiori2.Renderer.LaunchpadState in which to add the control.
     *
     *  @see LaunchpadState.
     *
     *  If no launchpad state is provided the content is added in all states.
     *
     *@returns {object} oItem - the created control
     * @since 1.30
     *
     * @public
     */
    sap.ushell.renderers.fiori2.Renderer.prototype.addLeftPaneContent = function (controlType, oControlProperties, bIsVisible, bCurrentState, aStates) {
        var fnCreate = function (oControlProperties) {
            var ViewPrototype;
            if (controlType) {
                jQuery.sap.require(controlType);
                ViewPrototype = jQuery.sap.getObject(controlType);
            } else {
                jQuery.sap.log.warning("You must specify control type in order to create it");
            }

            return new ViewPrototype(oControlProperties);
        };

        var oItem = this.createItem(oControlProperties, bCurrentState, aStates, fnCreate);
        if (bIsVisible) {
            this.showLeftPaneContent(oItem.getId(), bCurrentState, aStates);
        }

        return oItem;
    };

    /**
     * Creates the HeaderItem in Fiori launchpad, in the given launchpad states.</br>
     * The HeaderItem will be displayed in the left side of the Fiori Launchpad shell header.</br>
     *   <b>Example:</b>
     *   <pre> sap.ushell.Container.getRenderer("fiori2").addHeaderItem("sap.ushell.ui.shell.ShellHeadItem", {id: "testBtn"}, true, true);</pre>
     *
     * @param {string} controlType
     *   The (class) name of the control type to create.
     *
     * @param {object} oControlProperties
     *   The properties that will be passed to the created control.
     *
     * @param {boolean} bIsVisible
     *   Specify whether to display the control.
     *
     * @param {boolean} bCurrentState
     *   If true, add the current control only to the current rendered shell state.
     *   Once the user navigates to another app or back to the Home page, this control will be removed.
     *
     * @param {String[]} aStates
     *   (only valid if bCurrentState is set to false) - list of the sap.ushell.renderers.fiori2.Renderer.LaunchpadState in which to add the control.
     *
     *  @see LaunchpadState.
     *
     *  If no launchpad state is provided the content is added in all states.
     *
     * @returns {object} oItem - the created control
     * @since 1.30
     *
     * @public
     */
    sap.ushell.renderers.fiori2.Renderer.prototype.addHeaderItem = function (controlType, oControlProperties, bIsVisible, bCurrentState, aStates) {
        var fnCreate = function (oControlProperties) {
            return new sap.ushell.ui.shell.ShellHeadItem(oControlProperties);
        };
        var oItem = this.createItem(oControlProperties, bCurrentState, aStates, fnCreate);

        if (bIsVisible) {
            this.showHeaderItem(oItem.getId(), bCurrentState, aStates);
        }

        return oItem;
    };
    /**
     * Creates a ToolAreaItem  in Fiori Launchpad and adds it to the Tool Area, in the given launchpad states.</br>
     * If no items are added to the Tool Area, it will not be displayed.</br>
     * Once an item is added, the Tool Area is rendered on the left side on the Fiori Launchpad shell.</br>
     *
     *   <b>Example:</b>
     *   <pre>sap.ushell.Container.getRenderer("fiori2").addToolAreaItem({
     *              id: 'testButton',
     *              icon: "sap-icon://documents",
     *              press: function (evt) {
     *                 window.alert('Press' );
     *                },
     *             expand: function (evt) {
     *                 window.alert('Expand' );
     *                }
     *           }, true, false, ["home"]);
     * </pre>
     *
     * @param {object} oControlProperties
     *   The properties object that will be passed to the constructor of sap.ushell.ui.shell.ToolAreaItem control.
     *   @see sap.ushell.ui.shell.ToolAreaItem
     *
     * @param {boolean} bIsVisible
     *   Specify whether to display the control.
     *
     * @param {boolean} bCurrentState
     *   If true, add the current control only to the current rendered shell state.
     *
     * @param {String[]} aStates
     *   List of the sap.ushell.renderers.fiori2.Renderer.LaunchpadState in which to add the control.Only valid if bCurrentState is set to false.
     *
     *  @see LaunchpadState.
     *
     *  If no launchpad state is provided the content is added in all states.
     *
     *  @returns {object} oItem - the created control
     * @since 1.30
     *
     * @public
     */
    sap.ushell.renderers.fiori2.Renderer.prototype.addToolAreaItem = function (oControlProperties, bIsVisible, bCurrentState, aStates) {
        var fnCreate = function (oControlProperties) {
            return new sap.ushell.ui.shell.ToolAreaItem(oControlProperties);
        };
        var oItem = this.createItem(oControlProperties, bCurrentState, aStates, fnCreate);

        if (bIsVisible) {
            this.showToolAreaItem(oItem.getId(), bCurrentState, aStates);
        }

        return oItem;
    };

    /**
     * Creates the HeaderItem in Fiori launchpad, in the given launchpad states.</br>
     * The HeaderItem will be displayed in the right side of the Fiori Launchpad shell header.</br>
     *   <b>Example:</b>
     *   <pre> sap.ushell.Container.getRenderer("fiori2").addHeaderEndItem("sap.ushell.ui.shell.ShellHeadItem", {id: "testBtn"}, true, true);</pre>
     *
     * @param {string} controlType
     *   The (class) name of the control type to create.
     *
     * @param {object} oControlProperties
     *   The properties that will be passed to the created control.
     *
     * @param {boolean} bIsVisible
     *   Specify whether to display the control.
     *
     * @param {boolean} bCurrentState
     *   If true, add the current control only to the current rendered shell state.
     *   Once the user navigates to another app or back to the Home page, this control will be removed.
     *
     * @param {String[]} aStates
     *   (only valid if bCurrentState is set to false) - list of the sap.ushell.renderers.fiori2.Renderer.LaunchpadState in which to add the control.
     *
     *  @see LaunchpadState.
     *
     *  If no launchpad state is provided the content is added in all states.
     *
     * @returns {object} oItem - the created control
     * @since 1.30
     *
     * @public
     */
    sap.ushell.renderers.fiori2.Renderer.prototype.addHeaderEndItem = function (controlType, oControlProperties, bIsVisible, bCurrentState, aStates) {
        var fnCreate = function (oControlProperties) {
            return new sap.ushell.ui.shell.ShellHeadItem(oControlProperties);
        };
        var oItem = this.createItem(oControlProperties, bCurrentState, aStates, fnCreate);

        if (bIsVisible) {
            this.showHeaderEndItem(oItem.getId(), bCurrentState, aStates);
        }

        return oItem;
    };
/*-------------------general---------------------------*/
    sap.ushell.renderers.fiori2.Renderer.prototype.getModelConfiguration = function () {
        return this.shellCtrl.getModelConfiguration();
    };

    /**
     * Adds the given sap.ui.core.Control to the EndUserFeedback dialog.</br>
     * The EndUserFeedback dialog is opened via the user actions menu in the Fiori Launchpad shell header.
     *
     * @param {object} oCustomUIContent
     *   The control to be added to the EndUserFeedback dialog.
     *
     * @param {boolean} bShowCustomUIContent
     *   Specify whether to display the control.
     *
     * @since 1.30
     *
     * @public
     */
    sap.ushell.renderers.fiori2.Renderer.prototype.addEndUserFeedbackCustomUI = function (oCustomUIContent, bShowCustomUIContent) {
        this.shellCtrl.addEndUserFeedbackCustomUI(oCustomUIContent, bShowCustomUIContent);
    };
    //TODO: document the structure of the "entryObject"
    sap.ushell.renderers.fiori2.Renderer.prototype.addUserPreferencesEntry = function (entryObject) {
        return this.shellCtrl.addUserPreferencesEntry(entryObject);
    };

    /**
     * Sets the title in the Fiori Launchpad shell header.
     *
     * @param {string} sTitle
     *   The title to be displayed in the Fiori Launchpad shell header
     * @param {string} controlType
     *   The (class) name of the control type to create inside the popover.
     * @param {object} oControlProperties
     *   The properties that will be passed to the created control which will be displayed inside the popover.
     *
     * @since 1.30
     *
     * @public
     */
    sap.ushell.renderers.fiori2.Renderer.prototype.setHeaderTitle = function (sTitle, controlType, oControlProperties) {
        var oInnerControl = null;
        var oLaunchpadStates = sap.ushell.renderers.fiori2.Renderer.prototype.LaunchpadState;

        if (controlType) {
            var fnCreate = function (oControlProperties) {
                var oControlClass;
                jQuery.sap.require(controlType);
                oControlClass = jQuery.sap.getObject(controlType);
                return new oControlClass(oControlProperties);
            };

            oInnerControl = this.createItem(oControlProperties, false, [oLaunchpadStates.Home, oLaunchpadStates.App], fnCreate);
        }

        this.shellCtrl._setHeaderTitle(sTitle, oInnerControl);
    };

    /**
     * Sets the visibility of the left pane in the Fiori Launchpad shell, in the given launchpad state
     * @see LaunchpadState.
     *
     * @param {string} sLaunchpadState
     *   LaunchpadState in which to show/hide the left pane
     * @param {boolean} bVisible
     *   specif whether to display the left pane or not
     *
     * @since 1.30
     *
     * @public
     */
    sap.ushell.renderers.fiori2.Renderer.prototype.setLeftPaneVisibility = function (sLaunchpadState, bVisible) {
        this.shellCtrl.showShellItem("/showPane", sLaunchpadState, bVisible);
    };

    /**
     * Sets the ToolArea visibility
     *
     * @param {String} [sLaunchpadState] - LaunchpadState in which to show/hide the ToolArea
     *
     * @see LaunchpadState
     *
     * @param {boolean} [bVisible] - specifies whether to display the ToolArea or not
     *
     * @public
     */
    sap.ushell.renderers.fiori2.Renderer.prototype.showToolArea = function (sLaunchpadState, bVisible) {
        this.shellCtrl.showShellItem("/toolAreaVisible", sLaunchpadState, bVisible);
    };

    sap.ushell.renderers.fiori2.Renderer.prototype.setHeaderHiding = function (bHiding) {
        return this.shellCtrl._setHeaderHiding(bHiding);
    };
/*---------------States------------------------*/
    /**
     * The launchpad states that can be passed as a parameter.</br>
     * <b>Values:<b>
     * App - launchpad state when running a Fiori app</br>
     * Home - launchpad state when the home page is open</br>
     *
     * @since 1.30
     *
     * @public
     */
    sap.ushell.renderers.fiori2.Renderer.prototype.LaunchpadState = {
        App: "app",
        Home: "home"
    };

/*---------------Generic--------------------*/
    sap.ushell.renderers.fiori2.Renderer.prototype.createItem = function (oControlProperties, bCurrentState, aStates, fnCreateItem) {
        //create the object
        var oItem;
        if (oControlProperties.id) {
            oItem = sap.ui.getCore().byId(oControlProperties.id);
        }
        if (!oItem) {
            oItem = fnCreateItem(oControlProperties);
            if (bCurrentState) {
                this.shellCtrl.addElementToManagedQueue(oItem);
            }
        }

        return oItem;
    };

/*------------------------------------------*/
}());

}; // end of sap/ushell/renderers/fiori2/Renderer.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.Shell.view') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.Shell.view');
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
(function () {
    "use strict";
    /*global jQuery, sap, location, window, clearTimeout, setTimeout */

	
    
    

    sap.ui.jsview("sap.ushell.renderers.fiori2.Shell", {

        /**
         * Most of the following code acts just as placeholder for new Unified Shell Control.
         *
         * @param oController
         * @returns {sap.ushell.ui.Shell}
         * @public
         */
        createContent: function (oController) {
			var that = this;
			var oViewData = this.getViewData() || {},
			oConfig = oViewData.config || {},
			bStateEmbedded = (oConfig.appState === "embedded") ? true : false,
				bStateHeaderless = (oConfig.appState === "headerless") ? true : false,
				fnShellUpdateAggItem = function (sId, oContext) {
						return sap.ui.getCore().byId(oContext.getObject());
					},
					oLoadingDialog = new sap.ushell.ui.launchpad.LoadingDialog({
						id: "loadingDialog",
						title: null,
						text: "",   // in order to calculate dimension before first call
						showCancelButton: false
					}),
					oConfigButton = new sap.ushell.ui.shell.ShellHeadItem({
						id: "configBtn",
						tooltip: "{i18n>showGrpsBtn_tooltip}",
						icon: sap.ui.core.IconPool.getIconURI("menu2"),
						selected: {path: "/currentState/showPane"},
						press: [oController.togglePane, oController]
					}),
					oHomeButton = new sap.ushell.ui.shell.ShellHeadItem({
						id: "homeBtn",
						tooltip: "{i18n>homeBtn_tooltip}",
						icon: sap.ui.core.IconPool.getIconURI("home"),
                        target: oConfig.rootIntent ? "#" + oConfig.rootIntent : "#"
					});

            oHomeButton.addEventDelegate({
                onsapskipback: function (oEvent) {
                    if (sap.ushell.renderers.fiori2.AccessKeysHandler.getAppKeysHandler()) {
                        oEvent.preventDefault();
                        sap.ushell.renderers.fiori2.AccessKeysHandler.bFocusOnShell = false;
                    }
                },
                onsapskipforward: function (oEvent) {
                    if (sap.ushell.renderers.fiori2.AccessKeysHandler.getAppKeysHandler()) {
                        oEvent.preventDefault();
                        sap.ushell.renderers.fiori2.AccessKeysHandler.bFocusOnShell = false;
                    }
                }
            });

            oConfigButton.addEventDelegate({
                onsapskipforward: function (oEvent) {
                    if (sap.ushell.renderers.fiori2.AccessKeysHandler.getAppKeysHandler()) {
                        oEvent.preventDefault();
						sap.ushell.renderers.fiori2.AccessKeysHandler.bFocusOnShell = false;
                    }
                },
				onfocusin: function() {
					sap.ushell.renderers.fiori2.AccessKeysHandler.bFocusOnShell = true;
					sap.ushell.renderers.fiori2.AccessKeysHandler.bFocusPassedToExternalHandlerFirstTime = true;
				}
            });

            var oActionsUserButton;
            if (bStateEmbedded) {
                new sap.ushell.ui.shell.ShellHeadItem({
                    id: "standardActionsBtn",
                    tooltip: "{i18n>headerActionsTooltip}",
                    icon: sap.ui.core.IconPool.getIconURI("account"),
                    press: [oController.pressActionBtn, oController]
                });
            } else if (!bStateHeaderless) {
                oActionsUserButton = new sap.ushell.ui.shell.ShellHeadUserItem({
                    id: "actionsBtn",
                    username: sap.ushell.Container.getUser().getFullName(),
                    tooltip: "{i18n>headerActionsTooltip}",
					ariaLabel: sap.ushell.Container.getUser().getFullName(),
                    image: sap.ui.core.IconPool.getIconURI("account"),
                    press: [oController.pressActionBtn, oController]
                });
                oActionsUserButton.addEventDelegate({
                    onsaptabnext: function (oEvent) {
						if (sap.ushell.renderers.fiori2.AccessKeysHandler.getAppKeysHandler()) {
							oEvent.preventDefault();
							sap.ushell.renderers.fiori2.AccessKeysHandler.bFocusOnShell = false;
						}
                    },
					onsapskipforward: function (oEvent) {
						if (sap.ushell.renderers.fiori2.AccessKeysHandler.getAppKeysHandler()) {
							oEvent.preventDefault();
							sap.ushell.renderers.fiori2.AccessKeysHandler.bFocusOnShell = false;
						}
					}
                });
            }
            var oNavContainer = this.initNavContainer(oController);
					var oUnifiedShell = new sap.ushell.ui.shell.Shell({
						id: "shell",
						showPane: {path: "/currentState/showPane"},
                        headItems: {path: "/currentState/headItems", factory: fnShellUpdateAggItem},
						headEndItems: {path: "/currentState/headEndItems", factory: fnShellUpdateAggItem},
                        toolAreaItems: {path: "/currentState/toolAreaItems", factory: fnShellUpdateAggItem},
                        toolAreaVisible: {path: "/currentState/toolAreaVisible"},
						floatingActions: {path: "/currentState/floatingActions", factory: fnShellUpdateAggItem}, //TODO factory
						user: oActionsUserButton,
						paneContent: {path: "/currentState/paneContent", factory: fnShellUpdateAggItem},
						headerHiding: {path: "/currentState/headerHiding"},
						headerVisible : {path: "/currentState/headerVisible"},
                        title: {path: "/title"},
						content: oNavContainer,
                        subHeaders:{path: "/currentState/subHeaders", factory: fnShellUpdateAggItem}
					});
					oUnifiedShell._setStrongBackground(true);
					this.setOUnifiedShell(oUnifiedShell);

					// modifying the header on after rendering so it will add the relevant identifiers
					// to the Elements which are related to the xRay help scenarios
					var shellHeader = oUnifiedShell.getHeader();
					if (shellHeader) {
						var origHeadAfterRender = shellHeader.onAfterRendering;
						shellHeader.onAfterRendering = function () {
							if (origHeadAfterRender) {
								origHeadAfterRender.apply(this,arguments);
							}
							// if xRay is enabled
							if (this.getModel().getProperty("/enableHelp")) {
								jQuery('#actionsBtn').addClass('help-id-actionsBtn');// xRay help ID
								jQuery('#configBtn').addClass('help-id-configBtn');// xRay help ID
								jQuery('#homeBtn').addClass('help-id-homeBtn');// xRay help ID
				            }
						};
					}

				this.oShellPage = this.pageFactory("shellPage", oUnifiedShell, true);
                    //in case a footer is added to the shellPage using the RendererExtensions.setFooter API
                    //  oShellPage.bindAggregation("footer",{path: "/currentState/footer",factory: fnShellUpdateAggItem});
					if (bStateEmbedded) {
						oUnifiedShell.setIcon(sap.ui.resource('sap.ui.core', 'themes/base/img/1x1.gif'));
					} else {
						this.initShellBarLogo(oUnifiedShell);
					}

					this.setDisplayBlock(true);

                    this.aDanglingControls = [sap.ui.getCore().byId('navContainer'), this.oShellPage, oHomeButton, oLoadingDialog, oConfigButton];

					oUnifiedShell.updateAggregation = this.updateShellAggregation;

					var bSearchEnable = (oConfig.enableSearch !== false);

					if (bSearchEnable) {
						//Search Icon
						that.oShellSearchBtn = new sap.ushell.ui.shell.ShellHeadItem({
							id: "sf",
							tooltip: "{i18n>searchbox_tooltip}",
							icon: sap.ui.core.IconPool.getIconURI("search"),
							visible: {path: "/searchAvailable"},
                            showSeparator: false,
							press: function (event) {
                                jQuery.sap.require('sap.ushell.renderers.fiori2.search.SearchShellHelper');
                                that.searchShellHelper = sap.ushell.renderers.fiori2.search.SearchShellHelper;
                                
                                if (sap.ui.getCore().byId('searchFieldInShell') === undefined){
                                    that.searchShellHelper.init(false);
                                    that.searchShellHelper.oSearchButton.addEventDelegate({
                                        onAfterRendering: function(oEvent) {
                                                that.searchShellHelper.openSearchFieldGroup(true);
                                        }
                                    }, that.searchShellHelper.oSearchButton);
                                }else {
                                    that.searchShellHelper.resetModel();
                                    that.searchShellHelper.openSearchFieldGroup(true);
                                }
							}
						});

                        if (oConfig.openSearchAsDefault){
                            jQuery.sap.require('sap.ushell.renderers.fiori2.search.SearchShellHelper');
                            that.searchShellHelper = sap.ushell.renderers.fiori2.search.SearchShellHelper;
                                
                            if (sap.ui.getCore().byId('searchFieldInShell') === undefined){
                                that.searchShellHelper.init(false);
                                that.searchShellHelper.oSearchButton.addEventDelegate({
                                    onAfterRendering: function(oEvent) {
                                            that.searchShellHelper.openSearchFieldGroup(false);
                                    }
                                }, that.searchShellHelper.oSearchButton);
                            }
                        }
                        
                        
						that.oShellSearchBtn.addEventDelegate({
							onsapskipforward: function (oEvent) {
								oEvent.preventDefault();
								sap.ushell.renderers.lean.AccessKeysHandler.bFocusOnShell = false;
							}
						});

						that.aDanglingControls.push(that.oShellSearchBtn);
					}

					//This property is needed for a special scenario when a remote Authentication is required.
					//IFrame src is set by UI2 Services
					this.logonIFrameReference = null;

					return new sap.m.App({
						pages: this.oShellPage
					});
		},

		getOUnifiedShell: function () {
			return 	this.oUnifiedShell;
		},
		setOUnifiedShell: function (oUnifiedShell) {
			this.oUnifiedShell = oUnifiedShell;
		},

        loadUserImage: function () {
            /*
             in case user image URI is set we try to get it,
             only if request was successful, we set it on the
             oActionsButton icon.
             In case of success, 2 get requests will be executed
             (one here and the second by the control) however
             the second one will be taken from the cache
             */
            var imageURI = sap.ushell.Container.getUser().getImage();

            if (imageURI) {
                //Using jQuery.ajax instead of jQuery.get in-order to be able to control the caching.
                jQuery.ajax({
                    url: imageURI,
                    //"cache: false" didn't work as expected hence, turning off the cache vie explicit headers.
                    headers: {
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': '0'
                    },
                    success: function () {
                        var oActionsUserButton = sap.ui.getCore().byId('actionsBtn');
                        if (oActionsUserButton) {
                            oActionsUserButton.setImage(imageURI);
                        }
                    },
                    error: function () {
                        jQuery.sap.log.error("Could not load user image from: " + imageURI, "", "sap.ushell.renderers.fiori2.Shell.view");
                    }
                });
            }
        },

		_getIconURI: function (ico) {
			var result = null;
			if (ico) {
				var match = /url[\s]*\('?"?([^\'")]*)'?"?\)/.exec(ico);
				if (match) {
					result = match[1];
				}
			}
			return result;
		},

		initShellBarLogo: function (oUnifiedShell) {
			jQuery.sap.require("sap.ui.core.theming.Parameters");
			var ico = sap.ui.core.theming.Parameters.get("sapUiGlobalLogo");
			if (ico) {
				ico = this._getIconURI(ico);
				if (!ico){
					oUnifiedShell.setIcon(sap.ui.resource("sap.ui.core", "mimes/logo/sap_50x26.png")); //sets the logo manually on the sap.ushell.ui.shell.Shell instance
				}
			}

			//Change the Theme icon once it is changed (in the theme designer)
			var that = this;
            sap.ui.getCore().attachThemeChanged( function(){
                if (oUnifiedShell.bIsDestroyed) {
                    return;
                }
                var newIco = sap.ui.core.theming.Parameters.get("sapUiGlobalLogo");
                if (newIco) {
                    newIco = that._getIconURI(newIco);
                    if (newIco) {
                        oUnifiedShell.setIcon(newIco);
                    } else {
                        oUnifiedShell.setIcon(sap.ui.resource("sap.ui.core", "mimes/logo/sap_50x26.png")); //sets the logo manually on the sap.ushell.ui.shell.Shell instance
                    }
                } else {
                    oUnifiedShell.setIcon(sap.ui.resource("sap.ui.core", "mimes/logo/sap_50x26.png")); //sets the logo manually on the sap.ushell.ui.shell.Shell instance
                }
            });
		},

		initNavContainer: function (oController) {

			var oNavContainer = new sap.m.NavContainer({
				id: "navContainer",
				afterNavigate: jQuery.proxy(oController.onAfterNavigate, oController)
			});

			oNavContainer.addCustomTransition(
					"slideBack",
					sap.m.NavContainer.transitions.slide.back,
					sap.m.NavContainer.transitions.slide.back
			);

			return oNavContainer;
		},


		updateShellAggregation: function (sName) {
			/*jslint nomen: true */
			var oBindingInfo = this.mBindingInfos[sName],
			oAggregationInfo = this.getMetadata().getJSONKeys()[sName],
			oClone;

			jQuery.each(this[oAggregationInfo._sGetter](), jQuery.proxy(function (i, v) {
				this[oAggregationInfo._sRemoveMutator](v);
			}, this));
			jQuery.each(oBindingInfo.binding.getContexts(), jQuery.proxy(function (i, v) {
				oClone = oBindingInfo.factory(this.getId() + "-" + i, v) ? oBindingInfo.factory(this.getId() + "-" + i, v).setBindingContext(v, oBindingInfo.model) : "";
				this[oAggregationInfo._sMutator](oClone);
			}, this));
		},


		// Disable bouncing outside of the boundaries
		disableBouncing: function (oPage) {
			/*jslint nomen: true */
			oPage.onBeforeRendering = function () {
				sap.m.Page.prototype.onBeforeRendering.apply(oPage);

				var oScroller = this._oScroller,
				oOriginalAfterRendering = oScroller.onAfterRendering;

				oScroller.onAfterRendering = function () {
					oOriginalAfterRendering.apply(oScroller);

					if (oScroller._scroller) {
						oScroller._scroller.options.bounce = false;
					}
				};
			};

			return oPage;
		},


		getControllerName: function () {
			return "sap.ushell.renderers.fiori2.Shell";
		},


		pageFactory: function (sId, oControl, bDisableBouncing) {
			var oPage = new sap.m.Page({
				id: sId,
				showHeader: false,
				content: oControl,
				enableScrolling: !!sap.ui.Device.system.desktop
			}),
			aEvents = ["onAfterHide", "onAfterShow", "onBeforeFirstShow", "onBeforeHide", "onBeforeShow"],
			oDelegates = {};

			// Pass navigation container events to children.
			jQuery.each(aEvents, function (iIndex, sEvent) {
				oDelegates[sEvent] = jQuery.proxy(function (evt) {
					jQuery.each(this.getContent(), function (iIndex, oControl) {
						/*jslint nomen: true */
						oControl._handleEvent(evt);
					});
				}, oPage);
			});

			oPage.addEventDelegate(oDelegates);
			if (bDisableBouncing && sap.ui.Device.system.desktop) {
				this.disableBouncing(oPage);
			}

			return oPage;
		},

		createIFrameDialog: function () {
			var oDialog = null,
			    oLogonIframe = this.logonIFrameReference,
			    bContactSupportEnabled;

			var _getIFrame = function() {
				//In order to assure the same iframe for SAML authentication is not reused, we will first remove it from the DOM if exists.
				if (oLogonIframe){
					oLogonIframe.remove();
				}
				//The src property is empty by default. the caller will set it as required.
				return jQuery('<iframe id="SAMLDialogFrame" src="" frameborder="0"></iframe>');
			};

			var _hideDialog = function () {
				oDialog.addStyleClass('sapUshellSamlDialogHidden');
				jQuery('#sap-ui-blocklayer-popup').addClass('sapUshellSamlDialogHidden');
			};

			//A new dialog wrapper with a new inner iframe will be created each time.
			this.destroyIFrameDialog();

			var closeBtn = new sap.m.Button({
				text: sap.ushell.resources.i18n.getText("samlCloseBtn"),
				press: function () {
					sap.ushell.Container.cancelLogon(); // Note: calls back destroyIFrameDialog()!
				}
			});

			var oHTMLCtrl = new sap.ui.core.HTML("SAMLDialogFrame");
			//create new iframe and add it to the Dialog HTML control
			this.logonIFrameReference = _getIFrame();
			oHTMLCtrl.setContent(this.logonIFrameReference.prop('outerHTML'));

			oDialog = new sap.m.Dialog({
				id: "SAMLDialog",
				title: sap.ushell.resources.i18n.getText("samlDialogTitle"),
				contentWidth: "50%",
				contentHeight: "50%",
				rightButton: closeBtn
			});

			bContactSupportEnabled = sap.ushell.Container.getService("SupportTicket").isEnabled();
			if (bContactSupportEnabled) {
				jQuery.sap.require("sap.ushell.ui.footerbar.ContactSupportButton");
				var oContactSupportBtn = new sap.ushell.ui.footerbar.ContactSupportButton();
				oContactSupportBtn.setWidth('150px');
				oContactSupportBtn.setIcon('');
				oDialog.setLeftButton(oContactSupportBtn);
			}

			oDialog.addContent(oHTMLCtrl);
			oDialog.open();
			//Make sure to manipulate css properties after the dialog is rendered.
			_hideDialog();

			this.logonIFrameReference = jQuery('#SAMLDialogFrame');
			return this.logonIFrameReference[0];
		},

		destroyIFrameDialog : function () {
			var dialog = sap.ui.getCore().byId('SAMLDialog');
			if (dialog){
				dialog.destroy();
			}
			this.logonIFrameReference = null;
		},

		showIFrameDialog : function () {
			//remove css class of dialog
			var oDialog = sap.ui.getCore().byId('SAMLDialog');
			if (oDialog) {
				oDialog.removeStyleClass('sapUshellSamlDialogHidden');
				jQuery('#sap-ui-blocklayer-popup').removeClass('sapUshellSamlDialogHidden');
			}
		}
	});
}());

}; // end of sap/ushell/renderers/fiori2/Shell.view.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.SearchFacetDialogModel') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.SearchFacetDialogModel');
/* global jQuery,window */
(function(global) {
    "use strict";

    

    sap.ushell.renderers.fiori2.search.SearchModel.extend("sap.ushell.renderers.fiori2.search.SearchFacetDialogModel", {

        constructor: function() {

            var that = this;

            sap.ushell.renderers.fiori2.search.SearchModel.prototype.constructor.apply(that, []);

            // create sina query for facet dialog popover
            that.facetQuery = that.sina.createPerspectiveQuery({
                templateFactsheet: true
            });

            that.aFilters = [];
            that.aAttributsMetaData = [];
        },

        facetDialogCall: function() {
            var that = this;

            that.facetQuery.setSearchTerms("*");
            that.facetQuery.setDataSource(that.getDataSource());
            that.facetQuery.setSkip(0);
            that.facetQuery.setFacetOptions({});
            that.resetFacetQueryFilterConditions();
            that.facetQuery.setExpand(['Grid', 'Items', 'ResultsetFacets', 'TotalCount']);
            return that.facetQuery.getResultSet().then(function(perspective) {
                // 1.1 search succeeded
                that.aAttributesMetaData = perspective.searchresultset.elements[0];
                that.setProperty('/facetDialog', that.oFacetFormatter.getDialogFacets(that.getDataSource(), perspective, that));
            }, function(error) {
                // 1.2 search failed
                return jQuery.when(true); // make deferred returned by "then" resolved
            });
        },

        //properties: sAttribute, sBindingPath
        facetDialogSingleCall: function(properties) {
            var that = this;

            that.facetQuery.setSearchTerms("*");
            that.facetQuery.setDataSource(that.getDataSource());
            that.facetQuery.setSkip(0);
            that.facetQuery.setFacetOptions({
                "MaxNumberOfReturnValues": 1000,
                "Attributes": [properties.sAttribute]
            });
            that.facetQuery.setExpand(['Grid', 'Items', 'ResultsetFacets', 'TotalCount']);

            return that.facetQuery.getResultSet().then(function(perspective) {
                var aFacets = that.oFacetFormatter.getDialogFacets(that.getDataSource(), perspective, that);
                var aItems = [];
                jQuery.each(aFacets, function(i, facet) {
                    if (properties.sAttribute === facet.dimension) {
                        aItems = facet.items;
                    }
                });
                that.setProperty(properties.sBindingPath + "/items", aItems);
            });
        },

        resetFacetQueryFilterConditions: function() {
            var that = this;
            that.facetQuery.resetFilterConditions();
            that.facetQuery.addFilterCondition('$$RenderingTemplatePlatform$$', '=', 'html');
            that.facetQuery.addFilterCondition('$$RenderingTemplateTechnology$$', '=', 'Tempo');
            that.facetQuery.addFilterCondition('$$RenderingTemplateVariant$$', '=', '');
            that.facetQuery.addFilterCondition('$$RenderingTemplateType$$', '=', 'ItemDetails');
            that.facetQuery.addFilterCondition('$$RenderingTemplateType$$', '=', 'ResultItem');
        },

        hasFilter: function(item) {
            var that = this;
            var filterCondition = item.filterCondition;
            for (var i = 0; i < that.aFilters.length; i++) {
                if (that.aFilters[i].filterCondition.equals && that.aFilters[i].filterCondition.equals(filterCondition)) {
                    return true;
                }
            }
            return false;
        },

        addFilter: function(item) {
            var that = this;
            var filterCondition = item.filterCondition;
            if (!that.hasFilter(filterCondition)) {
                that.aFilters.push(item);
            }
        },

        removeFilter: function(item) {
            var that = this;
            var filterCondition = item.filterCondition;
            for (var i = 0; i < that.aFilters.length; i++) {
                if (that.aFilters[i].filterCondition.equals && that.aFilters[i].filterCondition.equals(filterCondition)) {
                    that.aFilters.splice(i, 1);
                    return;
                }
            }
        },

        changeFilterAdvaced: function(item, bAdvanced) {
            var that = this;
            var filterCondition = item.filterCondition;
            for (var i = 0; i < that.aFilters.length; i++) {
                if (that.aFilters[i].filterCondition.equals && that.aFilters[i].filterCondition.equals(filterCondition)) {
                    that.aFilters[i].advanced = bAdvanced;
                    return;
                }
            }
        }

    });

})(window);

}; // end of sap/ushell/renderers/fiori2/search/SearchFacetDialogModel.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.controls.SearchFacetFilter') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.controls.SearchFacetFilter');
/* global sap */
/* global alert */
/* global jQuery */
/* global $ */

(function() {
    "use strict";
    
    
    

    sap.ui.core.Control.extend('sap.ushell.renderers.fiori2.search.controls.SearchFacetFilter', {

        metadata: {
            properties: {
                title: "string"
            },
            aggregations: {
                "facets": {
                    type: "sap.ushell.renderers.fiori2.search.controls.SearchFacet",
                    multiple: true
                }
            }
        },

        constructor: function(oOptions) {
            oOptions = jQuery.extend({}, {
                facets: {
                    path: "/facets",
                    template: new sap.ushell.renderers.fiori2.search.controls.SearchFacet()
                }
            }, oOptions);

            sap.ui.core.Control.prototype.constructor.apply(this, [oOptions]);
        },

        fireReset: function() {
            this.getModel().resetFilterConditions(false);
            this.getModel().setDataSource(this.getModel().allDataSource, true);
        },

        renderer: function(oRm, oControl) {
            function createOpenFacetDialogFn(dimension) {
                return function(event) {
                    var oFacetDialogModel = new sap.ushell.renderers.fiori2.search.SearchFacetDialogModel();
                    oFacetDialogModel.setData(oControl.getModel().getData());
                    oFacetDialogModel.facetDialogCall().done(function() {
                        var oDialog = new sap.ushell.renderers.fiori2.search.controls.SearchFacetDialog({
                            selectedAttribute: dimension
                        });
                        oDialog.setModel(oFacetDialogModel);
                        oDialog.setModel(oControl.getModel(), 'searchModel');
                        oDialog.open();
                        //referece to page, so that dialog can be destroy in onExit()
                        var oPage = oControl.getParent().getParent().getParent().getParent();
                        oPage.oFacetDialog = oDialog;
                    });
                };
            }

            // outer div
            oRm.write("<div");
            oRm.writeControlData(oControl);
            oRm.addClass("sapUshellSearchFacetFilter");
            oRm.writeClasses();
            oRm.write('>');

            for (var i = 0, len = oControl.getFacets().length; i < len; i++) {
                var facet = oControl.getFacets()[i];
                if (i === 0) {
                    //refactoring to constructor, TODO
                    facet.setEshRole("datasource");
                } else {
                    facet.setEshRole("attribute");
                    if (i === 1) {
                        facet.setHeaderText(sap.ushell.resources.i18n.getText("filterBy"));
                    }
                }
                oRm.renderControl(facet);
                if (facet.getEshRole() === "attribute") {
                    var showMore = new sap.m.Link({
                        text: "{showMore}",
                        press: createOpenFacetDialogFn(facet.getBindingContext().getObject().dimension)
                    });
                    showMore.setModel(oControl.getModel("i18n"));
                    showMore.addStyleClass('sapUshellSearchFacetShowMoreLink');
                    oRm.renderControl(showMore);
                }
            }

            //show all filters button
            if (oControl.getFacets().length > 1) {
                oRm.write("<div>");
                var showAllBtn = new sap.m.Button({
                    text: "{showAllFilters}",
                    press: createOpenFacetDialogFn()
                });
                showAllBtn.setModel(oControl.getModel("i18n"));
                showAllBtn.addStyleClass("sapUshellSearchFacetFilterShowAllFilterBtn");
                oRm.renderControl(showAllBtn);
                oRm.write("</div>");
            }

            // close searchfacetfilter div
            oRm.write("</div>");
        },

        onAfterRendering: function() {
            // add aria button role to atasource items
            //$('.searchFacetFilter .searchFacet').first().find('.searchFacetItem').attr('role', 'button');
            var $dataSource = $('.sapUshellSearchFacetFilter .sapUshellSearchFacet').first().find('ul');
            var $dataSourceItems = $dataSource.find('li');
            $dataSource.attr('role', 'tree');
            $dataSourceItems.attr('role', 'treeitem');
        }

    });

})();

}; // end of sap/ushell/renderers/fiori2/search/controls/SearchFacetFilter.js
if ( !jQuery.sap.isDeclared('sap.ushell.renderers.fiori2.search.container.Search.view') ) {
  jQuery.sap.declare('sap.ushell.renderers.fiori2.search.container.Search.view');
// Oliver+Jian //TODO
// iteration 0 //TODO
/* global window, jQuery, sap, console */
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved

(function(global) {
    "use strict";

    
    
    jQuery.sap.require('sap.m.BusyDialog'); // unlisted dependency retained

    
    
    
    
    
    
    
    
    

    var SearchLayout = sap.ushell.renderers.fiori2.search.controls.SearchLayout;
    var SearchResultListItem = sap.ushell.renderers.fiori2.search.controls.SearchResultListItem;
    var SearchResultListItemFooter = sap.ushell.renderers.fiori2.search.controls.SearchResultListItemFooter;
    var SearchResultListContainer = sap.ushell.renderers.fiori2.search.controls.SearchResultListContainer;
    var SearchResultList = sap.ushell.renderers.fiori2.search.controls.SearchResultList;
    var SearchNoResultScreen = sap.ushell.renderers.fiori2.search.controls.SearchNoResultScreen;
    var searchHelper = sap.ushell.renderers.fiori2.search.SearchHelper;


    sap.ui.jsview("sap.ushell.renderers.fiori2.search.container.Search", {

        // create content
        // ===================================================================
        createContent: function(oController) {
            var that = this;

            // main result list
            var mainResultList = that.assembleMainResultList();

            // filter contextual bar
            var filterBar = new sap.ushell.renderers.fiori2.search.controls.SearchFilterBar({
                visible: {
                    parts: [{
                        path: '/facetVisibility'
                    }, {
                        path: '/filterConditions'
                    }],
                    formatter: function(facetVisibility, filterConditions) {
                        if (!facetVisibility && filterConditions.length > 0) {
                            return true;
                        } else {
                            return false;
                        }
                    }
                }
            });

            // tabstrips
            that.tabStrips = that.assembleTabStrips();

            // app result list
            that.appSearchResult = that.assembleAppSearch();

            var resultListContainer = new SearchResultListContainer({
                topList: that.appSearchResult,
                bottomList: mainResultList,
                tabStrips: that.tabStrips,
                filterBar: filterBar,
                noResultScreen: new SearchNoResultScreen({
                    searchBoxTerm: '{/lastSearchTerm}',
                    visible: {
                        parts: [{
                            path: '/count'
                        }, {
                            path: '/isBusy'
                        }],
                        formatter: function(count, isBusy) {
                            return count === 0 && !isBusy;
                        }
                    }
                })
            });

            // container for normal search result list + facets
            that.searchLayout = new SearchLayout({
                resultListContainer: resultListContainer,
                busyIndicator: new sap.m.BusyDialog(),
                isBusy: '{/isBusy}',
                showFacets: '{/facetVisibility}',
                vertical: false,
                facets: new sap.ushell.renderers.fiori2.search.controls.SearchFacetFilter()
            });

            // top container
            that.searchContainer = new sap.ushell.renderers.fiori2.search.controls.DivContainer({
                content: that.searchLayout,
                cssClass: 'sapUshellSearchContainer'
            });

            // init search focus handler
            that.oFocusHandler = new searchHelper.SearchFocusHandler(that);

            return that.searchContainer;

        },

        // tabstrips
        // ===================================================================
        assembleTabStrips: function() {

            var that = this;

            var getSelectedDataSource = function(tabBar, selectedKey) {
                var items = tabBar.getItems();
                for (var i = 0; i < items.length; ++i) {
                    var item = items[i];
                    var key = item.getKey() || item.getId();
                    if (key === selectedKey) {
                        return item.getBindingContext().getObject();
                    }
                }
                return null;
            };

            var tabBar = new sap.m.IconTabBar({
                upperCase: true,
                expandable: false,
                visible: {
                    parts: [{
                        path: '/facetVisibility'
                    }, {
                        path: '/count'
                    }],
                    formatter: function(facetVisibility, count) {
                        return !facetVisibility && count > 0;
                    }
                },
                selectedKey: {
                    path: '/tabStrips/selected/key',
                    mode: sap.ui.model.BindingMode.OneWay
                },
                select: function(event) {
                    var selectedKey;
                    if (event.getParameter) {
                        selectedKey = event.getParameter('selectedKey'); // new logic
                    }
                    if (!selectedKey) {
                        selectedKey = tabBar.getSelectedKey(); // fallback old logic
                    }
                    var dataSource = getSelectedDataSource(tabBar, selectedKey);
                    that.getModel().setDataSource(dataSource);
                }
            });
            tabBar.addStyleClass('searchTabStrips');

            tabBar.bindAggregation('items', '/tabStrips/strips', function(sId, oContext) {
                return new sap.m.IconTabFilter({
                    text: '{label}',
                    key: "{key}",
                    content: null
                });

            });

            return tabBar;
        },

        // main result list
        // ===================================================================
        assembleMainResultList: function() {

            var that = this;

            that.resultList = new SearchResultList({
                mode: sap.m.ListMode.None,
                growing: true,
                threshold: 2,
                inset: false,
                showUnread: true,
                width: "auto",
                showNoData: false,
                visible: '{/resultsVisibility}'
            });
            that.resultList.setGrowingThreshold(2000);
            that.resultList.bindAggregation("items", "/results", function(path, bData) {
                return that.assembleListItem(bData);
            });

            return that.resultList;
        },

        // app search area
        // ===================================================================
        assembleAppSearch: function() {

            var that = this;

            // tiles container
            var tileContainer = new sap.ushell.renderers.fiori2.search.controls.SearchTilesContainer({
                maxRows: 99999,
                totalLength: '{/appCount}',
                visible: '{/appsVisibility}',
                highlightTerms: '{/lastSearchTerm}',
                showMore: function() {
                    var model = that.getModel();
                    var newSkip = model.getSkip() + model.getTop();
                    model.setSkip(newSkip, false);
                    var newTop = 10 * tileContainer.getTilesPerRow();
                    model.setTop(newTop);
                }
            });

            tileContainer.bindAggregation('tiles', '/appResults', function(sId, oContext) {
                var tile = oContext.getObject().tile;
                var view = sap.ushell.Container.getService('LaunchPage').getCatalogTileView(tile);
                if (tile.getTitle) {
                    view.usageAnalyticsTitle = tile.getTitle();
                } else {
                    view.usageAnalyticsTitle = 'app';
                }
                return view;
            });

            tileContainer.addStyleClass('sapUshellSearchTileResultList');

            sap.ui.getCore().getEventBus().subscribe('searchLayoutChanged', function() {
                tileContainer.delayedRerender();
            }, this);

            return tileContainer;
        },

        // assemble title item
        // ===================================================================
        assembleTitleItem: function(oData) {
            var item = new sap.m.CustomListItem();
            var title = new sap.m.Label({
                text: "{title}"
            });
            title.addStyleClass('bucketTitle');
            item.addStyleClass('bucketTitleContainer');
            item.addContent(new sap.m.HBox({
                items: [title]
            }));
            return item;
        },

        // assemble search result footer item (show more button)
        // ===================================================================
        assembleFooterItem: function(oData) {
            var that = this;

            that.footerItem = new SearchResultListItemFooter({
                text: "{i18n>showMore}",
                showMore: function() {
                    var oCurrentModel = that.getModel();
                    var newSkip = oCurrentModel.getSkip() + 10;
                    oCurrentModel.setSkip(newSkip);
                }
            });

            var listItem = new sap.m.CustomListItem({
                content: that.footerItem
            });
            listItem.addStyleClass('sapUshellSearchResultListFooter');

            return listItem;
        },

        // assemble app container result list item
        // ===================================================================
        assembleAppContainerResultListItem: function(oData, path) {
            var that = this;
            var container = new sap.ushell.renderers.fiori2.search.controls.SearchTilesContainer({
                maxRows: sap.ui.Device.system.phone ? 2 : 1,
                totalLength: '{/appCount}',
                highlightTerms: '{/lastSearchTerm}',
                enableKeyHandler: false,
                showMore: function() {
                    var model = that.getModel();
                    model.setDataSource(model.appDataSource);
                }
            });
            container.bindAggregation('tiles', 'tiles', function(sId, oContext) {
                var tile = oContext.getObject().tile;
                var view = sap.ushell.Container.getService('LaunchPage').getCatalogTileView(tile);
                if (tile.getTitle) {
                    view.usageAnalyticsTitle = tile.getTitle();
                } else {
                    view.usageAnalyticsTitle = 'app';
                }
                return view;
            });

            var listItem = new sap.m.CustomListItem({
                content: container
            });
            listItem.addStyleClass('sapUshellSearchResultListItem');
            listItem.addStyleClass('sapUshellSearchResultListItemApps');

            sap.ui.getCore().getEventBus().subscribe('searchLayoutChanged', function() {
                container.delayedRerender();
            }, this);

            return listItem;
        },

        // assemble search result list item
        // ===================================================================
        assembleResultListItem: function(oData, path) {
            var item = new SearchResultListItem({
                title: "{$$Name$$}",
                titleUrl: "{uri}",
                type: "{dataSourceName}",
                imageUrl: "{imageUrl}",
                data: oData
            });

            var listItem = new sap.m.CustomListItem({
                content: item
            });
            listItem.addStyleClass('sapUshellSearchResultListItem');

            return listItem;
        },

        // assemble search result list item
        // ===================================================================
        assembleListItem: function(bData) {
            var that = this;
            var oData = bData.getObject();
            if (oData.type === 'title') {
                return that.assembleTitleItem(oData);
            } else if (oData.type === 'footer') {
                return that.assembleFooterItem(oData);
            } else if (oData.type === 'appcontainer') {
                return that.assembleAppContainerResultListItem(oData, bData.getPath());
            } else {
                return that.assembleResultListItem(oData, bData.getPath());
            }
        },

        // event handler search started
        // ===================================================================
        onAllSearchStarted: function() {
            if (this.oTilesContainer) {
                this.oTilesContainer.resetGrowing();
            }
            window.focusTrap = false;
        },

        // event handler search finished
        // ===================================================================
        onAllSearchFinished: function() {
            this.oFocusHandler.setFocus();
        },


        // event handler normal search finished
        // ===================================================================
        onNormalSearchFinished: function() {
            sap.ui.getCore().getEventBus().publish("closeCurtain");
        },

        // event handler app search finished
        // ===================================================================
        onAppSearchFinished: function(bla, blub, oResult) {

        },

        // set appview container
        // ===================================================================
        setAppView: function(oAppView) {
            var that = this;
            that.oAppView = oAppView;
            if (that.oTilesContainer) {
                that.oTilesContainer.setAppView(oAppView);
            }
        },

        // get controller name
        // ===================================================================
        getControllerName: function() {
            return "sap.ushell.renderers.fiori2.search.container.Search";
        }
    });


}(window));

}; // end of sap/ushell/renderers/fiori2/search/container/Search.view.js
