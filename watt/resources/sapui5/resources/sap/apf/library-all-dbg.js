// This file has been generated by the SAPUI5 'AllInOne' Builder
sap.ui.controller("sap.apf.modeler.ui.controller.configurationListNew", {
	onInit : function() {
		var oComponent = this.getOwnerComponent();
		if (oComponent) {
			this.oCoreApi = oComponent.oCoreApi;
		}
		// Data
		this.aData = [];
		this.oModel = new sap.ui.model.json.JSONModel({
			tableData : this.aData
		});
		this.oView = this.getView();
		this.oView.setModel(this.oModel);
		// Listen to route changed event.
		sap.ui.core.UIComponent.getRouterFor(this).attachRouteMatched(this._handleRouteChanged.bind(this));
	},
	_handleRouteChanged : function(oEvent) {
		var mEventParams = oEvent.getParameters();
		if (mEventParams.name !== "applicationList") {
			this.sAppId = mEventParams.arguments.appId;
			this._displayApplicationName();
			this._getConfigHandler().then(this._populateConfigList);
			this.oModel.updateBindings();
		}
	},
	_getConfigHandler : function() {
		var self = this;
		var oConfigHandlerDeferred = new jQuery.Deferred();
		this.oCoreApi.getConfigurationHandler(this.sAppId, function(oConfigHandler) {
			self.oConfigHandler = oConfigHandler;
			oConfigHandlerDeferred.resolveWith(self, [ oConfigHandler ]);
		});
		return oConfigHandlerDeferred;
	},
	_populateConfigList : function() {
		var self = this;
		var aConfigList = this.oConfigHandler.getList();
		aConfigList.forEach(function (oConfig) {
			self.aData.push({
				AnalyticalConfiguration : oConfig.AnalyticalConfiguration,
				Application : oConfig.Application,
				name : oConfig.AnalyticalConfigurationName,
				type : sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CONFIGURATION
			});
		});
		this.oModel.updateBindings();
	},
	_displayApplicationName : function() {
		var self = this;
		this.oCoreApi.getApplicationHandler(function (oApplicationHandler) {
			var sAppName = oApplicationHandler.getApplication(self.sAppId).ApplicationName;
			self.byId("idConfigTitleMaster").setText(self.oCoreApi.getText("configurationObjectTitle") + " : " + sAppName);
		});
	}
});
/*!
* SAP APF Analysis Path Framework
*
* (c) Copyright 2012-2014 SAP SE. All rights reserved
*/
/**
* @class titleBreadCrumb
* @memberOf sap.apf.modeler.ui.controller
* @name titleBreadCrumb
* @description controller for view.titleBreadCrumb
*/
sap.ui.controller("sap.apf.modeler.ui.controller.titleBreadCrumb", {
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.titleBreadCrumb#onInit
	* @description Reads data from view#getViewData.
	* Adds style class to the title and breadcrumb
	* Updates the title and breadcrumb of the subview
	* */
	onInit : function() {
		this.oViewData = this.getView().getViewData();
		this.getText = this.oViewData.getText;
		this._addConfigStyleClass();
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.titleBreadCrumb#_addConfigStyleClass
	* @description Adds style classes to the title and breadcrumb of the subview
	* */
	_addConfigStyleClass : function() {
		this.byId("IdBreadCrumb").addStyleClass("breadCrumb");
		this.byId("IdFormTitle").addStyleClass("formTitle");
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.titleBreadCrumb#setTitleAndBreadCrumb
	* @param {String} Form Title of the detail page 
	* @description Updates the title and breadcrumb
	* */
	setTitleAndBreadCrumb : function(sFormTitle) {
		this.byId("IdFormTitle").setText(sFormTitle);
	}
});
/*!
* SAP APF Analysis Path Framework
*
* (c) Copyright 2012-2014 SAP SE. All rights reserved
*/
/**
* @class toolbar
* @memberOf sap.apf.modeler.ui.controller
* @name toolbar
* @description controller for view.toolbar
*/
sap.ui.controller("sap.apf.modeler.ui.controller.toolbar", {
	/**
	 * @public
	 * @function
	 * @name sap.apf.modeler.ui.controller.toolbar#onInit
	 * @description Called on initialization of the view.
	 * Gets the coreApi and configurationList instance from viewdata
	 * */
	onInit : function() {
		this.oCoreApi = this.getView().getViewData().oConfigListInstance.oCoreApi;
		this.oConfigListInstance = this.getView().getViewData().oConfigListInstance;
		this._setDisplayText();
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.toolbar#_setDisplayText
	 * @description Sets the text for each of the toolbar buttons
	 * */
	_setDisplayText : function() {
		this.byId("idAddButton").setText(this.oCoreApi.getText("addButton"));
		this.byId("idCopyButton").setText(this.oCoreApi.getText("copyButton"));
		this.byId("idDeleteButton").setText(this.oCoreApi.getText("deleteButton"));
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.toolbar#enableCopyDeleteButton
	 * @description Enables copy and delete button in the toolbar
	 * */
	enableCopyDeleteButton : function() {
		if (!this.byId("idCopyButton").getEnabled()) {
			this.byId("idCopyButton").setEnabled(true);
		}
		if (!this.byId("idDeleteButton").getEnabled()) {
			this.byId("idDeleteButton").setEnabled(true);
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.toolbar#disableCopyDeleteButton
	 * @description Disables copy and delete button in the toolbar
	 * */
	disableCopyDeleteButton : function() {
		if (this.byId("idCopyButton").getEnabled()) {
			this.byId("idCopyButton").setEnabled(false);
		}
		if (this.byId("idDeleteButton").getEnabled()) {
			this.byId("idDeleteButton").setEnabled(false);
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.toolbar#_setAddMenuText
	 * @description Sets text for all the menu items present in add menu fragment
	 * */
	_setAddMenuText : function() {
		sap.ui.core.Fragment.byId("idAddMenuFragment", "idNewConfig").setText(this.oCoreApi.getText("newConfiguration"));
		sap.ui.core.Fragment.byId("idAddMenuFragment", "idNewFacetFilter").setText(this.oCoreApi.getText("newFacetFilter"));
		sap.ui.core.Fragment.byId("idAddMenuFragment", "idNewCategory").setText(this.oCoreApi.getText("newCategory"));
		sap.ui.core.Fragment.byId("idAddMenuFragment", "idNewNavigationTarget").setText(this.oCoreApi.getText("newNavigationTarget"));
		sap.ui.core.Fragment.byId("idAddMenuFragment", "idStep").setText(this.oCoreApi.getText("step"));
		sap.ui.core.Fragment.byId("idAddMenuFragment", "idNewStep").setText(this.oCoreApi.getText("newStep"));
		sap.ui.core.Fragment.byId("idAddMenuFragment", "idExistingStep").setText(this.oCoreApi.getText("existingStep"));
		sap.ui.core.Fragment.byId("idAddMenuFragment", "idNewRepresentation").setText(this.oCoreApi.getText("newRepresentation"));
	},
	/**
     * @private
     * @function
     * @name sap.apf.modeler.ui.controller.toolbar#_setExistingStepDialogText
     * @description Sets text for all items present in existing step dialog fragment
     * */
    _setExistingStepDialogText : function(){
        sap.ui.core.Fragment.byId("idExistingStepDialogFragment", "idExistingStepDialog").setTitle(this.oCoreApi.getText("existingStepDialogTitle"));
    },
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.toolbar#_enableDisableAddMenuItems
	 * @param {Object} Context of the selected node
	 * @param {sap.ui.xmlfragment} Add menu fragment which contains all the menu items
	 * @description Enables and disables menu items in add menu fragment based on selected node object type
	 * */
	_enableDisableAddMenuItems : function(oSelectedTreeNodeDetails, addMenu) { // enable/disable the menu items in the add menu based on object type
		var aAddMenuItems = addMenu.getItems();
		var nodeObjectType;
		if (this.oConfigListInstance.configurationHandler.getList().length === 0 || oSelectedTreeNodeDetails === null) { //if there is no configuration initially
			nodeObjectType = "default"; //only the add configuration should be enabled
		} else {
			nodeObjectType = oSelectedTreeNodeDetails.nodeObjectType;
		}
		var oMapNodeObjectType = {};
		oMapNodeObjectType["default"] = 1;
		oMapNodeObjectType[sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CONFIGURATION] = 4;
		oMapNodeObjectType[sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.FACETFILTER] = 4;
		oMapNodeObjectType[sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CATEGORY] = 5;
		oMapNodeObjectType[sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.STEP] = 6;
		oMapNodeObjectType[sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.REPRESENTATION] = 6;
		oMapNodeObjectType[sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.NAVIGATIONTARGET] = 4;
		aAddMenuItems.forEach(function(oMenuItem, index) {
			if (index < oMapNodeObjectType[nodeObjectType]) {
				oMenuItem.setEnabled(true);
			} else {
				oMenuItem.setEnabled(false);
			}
		});
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.toolbar#_handlePressAddButton
	 * @description Handler for add button in the toolbar
	 * */
	_handlePressAddButton : function(oEvent) { //handler for add button in the toolbar above tree control
		var oSubViewInstance;
		var oSelf = this;
		if (this.oConfigListInstance.getView().byId("idConfigDetailData").getContent().length >= 1) {
			oSubViewInstance = (typeof this.oConfigListInstance.getView().byId("idConfigDetailData").getContent()[0].getController === "function") ? this.oConfigListInstance.getView().byId("idConfigDetailData").getContent()[0].getController()
					: undefined;
		}
		//Remove Focus from the button
		oEvent.getSource().$().blur();
		//check if there is any unsaved change
		var oNavigationHandlerInstance = sap.apf.modeler.ui.utils.navigationHandler.getInstance();
		var isMandatoryFilled = (oSubViewInstance !== undefined) ? (typeof oSubViewInstance.getValidationState === "function" ? oSubViewInstance.getValidationState.call(oSubViewInstance) : true) : true;
		this.oConfigListInstance.bIsSaved = this.oConfigListInstance.configEditor ? this.oConfigListInstance.configEditor.isSaved() : undefined;
		var isDirtyState = false;
		var addAction = function() {
			var oAddButton = oEvent.getSource();
			var oSelectedTreeNodeDetails = this.oConfigListInstance.oTreeInstance.getAPFTreeNodeContext(this.oConfigListInstance.oTreeInstance.getSelection());
			if (!this.addMenu) { // create add menu only once    
				this.addMenu = new sap.ui.xmlfragment("idAddMenuFragment", "sap.apf.modeler.ui.fragment.addMenu", this); // enable/disable menu items has to be set to default (creating a new instance each time)
				this.getView().addDependent(this.addMenu);
				this._setAddMenuText();
			}
			var addButtonDock = sap.ui.core.Popup.Dock;
			this._enableDisableAddMenuItems(oSelectedTreeNodeDetails, this.addMenu); // enable/disable the menu items in the add button based on the object type
			this.addMenu.open(false, oAddButton, addButtonDock.BeginTop, addButtonDock.BeginBottom, oAddButton); // opens the menu right below the add button
		};
		if (!isMandatoryFilled) { //check mandatory state
			oNavigationHandlerInstance.throwMandatoryPopup(oSelf.oConfigListInstance, {
				yes : function() {
					var bNavState = oSelf.oConfigListInstance._navMandatoryResetState(oSelf.oConfigListInstance);
					if (!bNavState.isNewView) {
						addAction.call(oSelf);
					}
				}
			});
			isDirtyState = true;
		}
		if (!isDirtyState) { //if clean state proceed with add
			addAction.call(oSelf);
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.toolbar#_handlePressAddButton
	 * @description Handler for menu items of add button in the toolbar
	 * */
	_handleAddMenuItemPress : function(oEvent) {
		var aItems = this.addMenu.getItems();
		var oAddMenuSelectedItem = oEvent.getParameters("item");
		var sNodeObjectType;
		var oNodeObjectType = {
			"idAddMenuFragment--idNewFacetFilter" : sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.FACETFILTER,
			"idAddMenuFragment--idNewCategory" : sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CATEGORY,
			"idAddMenuFragment--idNewStep" : sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.STEP,
			"idAddMenuFragment--idNewRepresentation" : sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.REPRESENTATION,
			"idAddMenuFragment--idNewConfig" : sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CONFIGURATION,
			"idAddMenuFragment--idNewNavigationTarget" : sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.NAVIGATIONTARGET,
			"default" : sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CONFIGURATION
		};
		aItems.forEach(function(oItem) {
			if (oItem.getId() === oAddMenuSelectedItem.id) {
				sNodeObjectType = oNodeObjectType[oItem.getId()];
			}
			else if(oItem.getSubmenu()){//In case of step submenu
				oItem.getSubmenu().getItems().forEach(function(oItem){
					if (oItem.getId() === oAddMenuSelectedItem.id) {
						sNodeObjectType = oNodeObjectType[oItem.getId()];
					}
				});
			}
		});
		if(oAddMenuSelectedItem.id === "idAddMenuFragment--idExistingStep"){
			this._handleAddExistingStepPress();
		}
		else if(oAddMenuSelectedItem.id !== "idAddMenuFragment--idStep" && sNodeObjectType !== undefined){//In case of existing step, the existing step dialog is opened
			this.oConfigListInstance.oTreeInstance.addNodeInTree(sNodeObjectType);
		}
	},
	/**
	 * @private
	 * @function 
	 * @param {String} Copied configuration id #sCopiedConfigurationId
	 * @param {Object} New context of the copied node #newContextForCopiedNode
	 * @name sap.apf.modeler.ui.controller.toolbar#_copyConfiguration
	 * @description Copies the Configuration object
	 * */
	_copyConfiguration : function(sCopiedConfigurationId, newContextForCopiedNode) {
		var oCopiedConfig = this.oConfigListInstance.configurationHandler.getConfiguration(sCopiedConfigurationId);
		var oConfigDetails = {};
		oConfigDetails.AnalyticalConfiguration = oCopiedConfig.AnalyticalConfiguration;
		oConfigDetails.name = "< " + oCopiedConfig.AnalyticalConfigurationName + " >";
		oConfigDetails.Application = oCopiedConfig.Application;
		oConfigDetails.type = sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CONFIGURATION;
		oConfigDetails.bIsLoaded = false; //boolean to check the creation of tree structure set to false
		oConfigDetails.bToggleState = false; // Toggle state boolean attached with each new node
		oConfigDetails.isSelected = true;
		oConfigDetails.expanded = true;
		oConfigDetails.selectable = true;
		oConfigDetails.hasExpander = true;
		this.oConfigListInstance.oModel.getData().aConfigDetails.push(oConfigDetails);
		this.oConfigListInstance.oModel.updateBindings();
		this.oConfigListInstance.selectedNode = this.oConfigListInstance.oTreeInstance.getNodeByContext(newContextForCopiedNode);
		this.oConfigListInstance.modelUpdateDeferred[this.oConfigListInstance.oModel.getData().aConfigDetails.length - 1] = new jQuery.Deferred();//Deferred object to wait until model is updated with navigation target texts
		var context = {
			appId : this.oConfigListInstance.appId,
			configId : sCopiedConfigurationId
		};
		sap.ui.core.UIComponent.getRouterFor(this.oConfigListInstance).navTo(oConfigDetails.type, context, true);
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.toolbar#_handlePressCopyButton
	 * @description Handler for copy button in the toolbar
	 * */
	_handlePressCopyButton : function(oEvent) {// event handler for copy button press
		var oSubViewInstance;
		var oSelf = this;
		if (this.oConfigListInstance.getView().byId("idConfigDetailData").getContent().length >= 1) {
			oSubViewInstance = (typeof this.oConfigListInstance.getView().byId("idConfigDetailData").getContent()[0].getController === "function") ? this.oConfigListInstance.getView().byId("idConfigDetailData").getContent()[0].getController()
					: undefined;
		}
		//Remove Focus from the button
		oEvent.getSource().$().blur();
		//check if there is any unsaved change
		var oNavigationHandlerInstance = sap.apf.modeler.ui.utils.navigationHandler.getInstance();
		var isMandatoryFilled = (oSubViewInstance !== undefined) ? (typeof oSubViewInstance.getValidationState === "function" ? oSubViewInstance.getValidationState.call(oSubViewInstance) : true) : true;
		this.oConfigListInstance.bIsSaved = this.oConfigListInstance.configEditor ? this.oConfigListInstance.configEditor.isSaved() : undefined;
		var isDirtyState = false;
		var copyAction = function() {
			var oCopySelf = this;
			var oSelectedTreeNodeDetails = this.oTreeInstance.getAPFTreeNodeContext(this.oTreeInstance.getSelection() || this.selectedNode);
			this.selectedNode = this.oTreeInstance.getSelection() || this.selectedNode;
			var newContextForCopiedNode, oldContextForSelectedNode, newIndexForNewNode, aOldContextForSelectedNode, oParentNode, indexOfConfig, indexOffacetFilter, indexOfCategory, indexOfNavTarget, indexOfStep, indexOfRep;
			oldContextForSelectedNode = oSelectedTreeNodeDetails.nodeContext;
			switch (oSelectedTreeNodeDetails.nodeObjectType) {
				case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.FACETFILTER:
					var sFacetFilterLabel = this.oCoreApi.getText("copyOf") + "  " + oSelectedTreeNodeDetails.nodeTitle;
					var sCopiedFacetFilterId = this.configEditor.copyFacetFilter(oSelectedTreeNodeDetails.nodeAPFId);
					var oCopiedFacetFilter = this.configEditor.getFacetFilter(sCopiedFacetFilterId);
					var oTranslationFormatForFacetFilterLabel = sap.apf.modeler.ui.utils.TranslationFormatMap.FACETFILTER_LABEL;
					var sFacetFilterLabelId = this.oTextPool.setText(sFacetFilterLabel, oTranslationFormatForFacetFilterLabel);
					oCopiedFacetFilter.setLabelKey(sFacetFilterLabelId);
					aOldContextForSelectedNode = oldContextForSelectedNode.split("/");
					indexOfConfig = aOldContextForSelectedNode[2];
					indexOffacetFilter = aOldContextForSelectedNode[6];
					var oFacetFilterForTree = this.oModel.getData().aConfigDetails[indexOfConfig].configData[0].filters[indexOffacetFilter];
					oFacetFilterForTree.isSelected = false;
					var oCopiedFacetFilterForTree = jQuery.extend(true, {}, oFacetFilterForTree);
					oCopiedFacetFilterForTree.id = sCopiedFacetFilterId;
					oCopiedFacetFilterForTree.name = "< " + sFacetFilterLabel + " >";
					oCopiedFacetFilterForTree.isSelected = true;
					newIndexForNewNode = this.oModel.getData().aConfigDetails[indexOfConfig].configData[0].filters.length;
					this.oModel.getData().aConfigDetails[indexOfConfig].configData[0].filters.push(oCopiedFacetFilterForTree);
					aOldContextForSelectedNode[6] = newIndexForNewNode;
					newContextForCopiedNode = aOldContextForSelectedNode.join("/");
					break;
				case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CATEGORY:
					var sCategoryLabel = this.oCoreApi.getText("copyOf") + "  " + oSelectedTreeNodeDetails.nodeTitle;
					var sCopiedCategoryId = this.configEditor.copyCategory(oSelectedTreeNodeDetails.nodeAPFId);
					var oCopiedCategory = this.configEditor.getCategory(sCopiedCategoryId);
					var oTranslationFormatForCategoryLabel = sap.apf.modeler.ui.utils.TranslationFormatMap.CATEGORY_TITLE;
					var sCategoryLabelId = this.oTextPool.setText(sCategoryLabel, oTranslationFormatForCategoryLabel);
					var categoryObj = {
						labelKey : sCategoryLabelId
					};
					this.configEditor.setCategory(categoryObj, sCopiedCategoryId);
					aOldContextForSelectedNode = oldContextForSelectedNode.split("/");
					indexOfConfig = aOldContextForSelectedNode[2];
					indexOfCategory = aOldContextForSelectedNode[6];
					var aNewStepIds = [];
					var aSteps = this.configEditor.getSteps();
					aSteps.forEach(function(oStep) {
						if (oCopySelf.configEditor.getCategoriesForStep(oStep.getId())[0] === sCopiedCategoryId) {
							aNewStepIds.push(oStep.getId());
						}
					});
					var oCategoryForTree = this.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories[indexOfCategory];
					oCategoryForTree.isSelected = false;
					var oCopiedCategoryForTree = jQuery.extend(true, {}, oCategoryForTree);
					if (oCopiedCategoryForTree.steps) {
						for( var i = 0; i < oCopiedCategoryForTree.steps.length; i++) {
							oCopiedCategoryForTree.steps[i].id = aNewStepIds[i];
							var oNewStep = oCopySelf.configEditor.getStep(aNewStepIds[i]);
							var aNewReps = oNewStep.getRepresentations();
							if (oCopiedCategoryForTree.steps[i].representations) {
								for( var j = 0; j < oCopiedCategoryForTree.steps[i].representations.length; j++) {
									oCopiedCategoryForTree.steps[i].representations[j].id = aNewReps[j].getId();
								}
							}
						}
					}
					oCopiedCategoryForTree.id = sCopiedCategoryId;
					oCopiedCategoryForTree.name = "< " + sCategoryLabel + " >";
					oCopiedCategoryForTree.isSelected = true;
					newIndexForNewNode = this.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories.length;
					this.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories.push(oCopiedCategoryForTree);
					aOldContextForSelectedNode[6] = newIndexForNewNode;
					newContextForCopiedNode = aOldContextForSelectedNode.join("/");
					break;
				case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.NAVIGATIONTARGET:
					var sNavTargetName = this.oCoreApi.getText("copyOf") + "  " + oSelectedTreeNodeDetails.nodeTitle;
					var sCopiedNavTargetId = this.configEditor.copyNavigationTarget(oSelectedTreeNodeDetails.nodeAPFId);
					var oCopiedNavTarget = this.configEditor.getNavigationTarget(sCopiedNavTargetId);
					aOldContextForSelectedNode = oldContextForSelectedNode.split("/");
					indexOfConfig = aOldContextForSelectedNode[2];
					indexOfNavTarget = aOldContextForSelectedNode[6];
					var oNavTargetForTree = this.oModel.getData().aConfigDetails[indexOfConfig].configData[2].navTargets[indexOfNavTarget];
					oNavTargetForTree.isSelected = false;
					var oCopiedNavTargetForTree = jQuery.extend(true, {}, oNavTargetForTree);
					oCopiedNavTargetForTree.id = sCopiedNavTargetId;
					oCopiedNavTargetForTree.name = "< " + sNavTargetName + " >";
					oCopiedNavTargetForTree.isSelected = true;
					newIndexForNewNode = this.oModel.getData().aConfigDetails[indexOfConfig].configData[2].navTargets.length;
					this.oModel.getData().aConfigDetails[indexOfConfig].configData[2].navTargets.push(oCopiedNavTargetForTree);
					aOldContextForSelectedNode[6] = newIndexForNewNode;
					newContextForCopiedNode = aOldContextForSelectedNode.join("/");
					break;
				case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.STEP:
					var sStepTitle = this.oCoreApi.getText("copyOf") + "  " + oSelectedTreeNodeDetails.nodeTitle;
					var sCopiedStepId = this.configEditor.copyStep(oSelectedTreeNodeDetails.nodeAPFId);
					var aCategoriesForCopiedStep = this.configEditor.getCategoriesForStep(sCopiedStepId);
					var oCopiedStep = this.configEditor.getStep(sCopiedStepId);
					var oTranslationFormatForStepTitle = sap.apf.modeler.ui.utils.TranslationFormatMap.STEP_TITLE;
					var sStepTitleId = this.oTextPool.setText(sStepTitle, oTranslationFormatForStepTitle);
					oCopiedStep.setTitleId(sStepTitleId);
					aOldContextForSelectedNode = oldContextForSelectedNode.split("/");
					indexOfConfig = aOldContextForSelectedNode[2];
					indexOfCategory = aOldContextForSelectedNode[6];
					indexOfStep = aOldContextForSelectedNode[8];
					var oStepForTree = this.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories[indexOfCategory].steps[indexOfStep];
					oStepForTree.isSelected = false;
					var oCopiedStepForTree = jQuery.extend(true, {}, oStepForTree);
					aNewReps = oCopiedStep.getRepresentations();
					oCopiedStepForTree.id = sCopiedStepId;
					oCopiedStepForTree.name = "< " + sStepTitle + " >";
					if (oCopiedStepForTree.representations) {
						for(j = 0; j < oCopiedStepForTree.representations.length; j++) {
							oCopiedStepForTree.representations[j].id = aNewReps[j].getId();
						}
					}
					newIndexForNewNode = this.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories[indexOfCategory].steps.length;
					aOldContextForSelectedNode[8] = newIndexForNewNode;
					newContextForCopiedNode = aOldContextForSelectedNode.join("/");
					for(var index = 0; index < aCategoriesForCopiedStep.length; index++){
						var oStepInTree = jQuery.extend(true, {}, oCopiedStepForTree);
						var paramsForCategory = {
								arguments : {
									configId : oSelf.oConfigListInstance.configId,
									categoryId : aCategoriesForCopiedStep[index]
								}
						};
						var sPathForCopiedStep = oSelf.oConfigListInstance.getSPathFromURL(paramsForCategory).sPath.split("/");
						var categoryIndexForCopiedStep = sPathForCopiedStep[6];
						this.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories[categoryIndexForCopiedStep].steps.push(oStepInTree);
					}
					this.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories[indexOfCategory].steps[newIndexForNewNode].isSelected = true;
					break;
				case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.REPRESENTATION://TODO pending for representations
					aOldContextForSelectedNode = oldContextForSelectedNode.split("/");
					indexOfConfig = aOldContextForSelectedNode[2];
					indexOfCategory = aOldContextForSelectedNode[6];
					indexOfStep = aOldContextForSelectedNode[8];
					indexOfRep = aOldContextForSelectedNode[10];
					var oParentStepIdForRep = this.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories[indexOfCategory].steps[indexOfStep].id;
					var oParentStep = this.configEditor.getStep(oParentStepIdForRep);
					var aCategoriesForParentStep = this.configEditor.getCategoriesForStep(oParentStepIdForRep);
					this.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories[indexOfCategory].steps[indexOfStep].representations[indexOfRep].isSelected = false;
					var oRepForTree = this.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories[indexOfCategory].steps[indexOfStep].representations[indexOfRep];
					var oCopiedRepForTree = jQuery.extend(true, {}, oRepForTree);
					var oCopiedRepId = oParentStep.copyRepresentation(oCopiedRepForTree.id);
					oCopiedRepForTree.id = oCopiedRepId;
					newIndexForNewNode = this.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories[indexOfCategory].steps[indexOfStep].representations.length;
					aOldContextForSelectedNode[10] = newIndexForNewNode;
					newContextForCopiedNode = aOldContextForSelectedNode.join("/");
					for(var categoryIndex = 0; categoryIndex < aCategoriesForParentStep.length ; categoryIndex++){
						var repInTree = jQuery.extend(true, {}, oCopiedRepForTree);
						var paramsForStep = {
								arguments : {
									configId : oSelf.oConfigListInstance.configId,
									categoryId : aCategoriesForParentStep[categoryIndex],
									stepId : oParentStepIdForRep									
								}
						};
						var sPathForCopiedRep= oSelf.oConfigListInstance.getSPathFromURL(paramsForStep).sPath.split("/");
						var categoryIndexForCopiedRep = sPathForCopiedRep[6];
						var stepIndexForCopiedRep = sPathForCopiedRep[8];
						this.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories[categoryIndexForCopiedRep].steps[stepIndexForCopiedRep].representations.push(repInTree);
					}
					this.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories[indexOfCategory].steps[indexOfStep].representations[newIndexForNewNode].isSelected = true;
					break;
				case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CONFIGURATION:
					var sConfigTitle = this.oCoreApi.getText("copyOf") + "  " + oSelectedTreeNodeDetails.nodeTitle;
					aOldContextForSelectedNode = oldContextForSelectedNode.split("/");
					indexOfConfig = aOldContextForSelectedNode[2];
					var oConfig = this.oModel.getData().aConfigDetails[indexOfConfig];
					oConfig.isSelected = false;
					aOldContextForSelectedNode[2] = this.oModel.getData().aConfigDetails.length;
					newContextForCopiedNode = aOldContextForSelectedNode.join("/");
					this.configurationHandler.copyConfiguration(oSelectedTreeNodeDetails.nodeAPFId, function(sCopiedConfigurationId) {
						var configObj = {
							AnalyticalConfigurationName : sConfigTitle
						};
						var tempConfigId = oCopySelf.configurationHandler.setConfiguration(configObj, sCopiedConfigurationId);
						//sets the application title
						oCopySelf.configTitle = sConfigTitle;
						oCopySelf.configurationHandler.loadConfiguration(tempConfigId, function(configurationEditor) {
							var sConfigTitle = oCopySelf.configTitle;
							var oTranslationFormat = sap.apf.modeler.ui.utils.TranslationFormatMap.APPLICATION_TITLE;
							var sApplicationTitleId = oCopySelf.configurationHandler.getTextPool().setText(sConfigTitle, oTranslationFormat);
							configurationEditor.setApplicationTitle(sApplicationTitleId);
						});
						oSelf._copyConfiguration(sCopiedConfigurationId, newContextForCopiedNode);
					});
					break;
				default :
					break;
			}
			if (oSelectedTreeNodeDetails.nodeObjectType !== sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CONFIGURATION) {
				this.oModel.updateBindings();
				this.selectedNode = this.oTreeInstance.getNodeByContext(newContextForCopiedNode);
				var selectedNodeDetails = this.oTreeInstance.getAPFTreeNodeContext(this.selectedNode);
				var oParentNodeDetails = this.oTreeInstance.getParentNodeContext(selectedNodeDetails);
				this.navigateToDifferntView(oParentNodeDetails, selectedNodeDetails);
				this.configEditor.setIsUnsaved();
			}
		};
		//Disable the copy, export when no config is selected
		var disableBtnOnNoConfigSelected = function() {
			var noConfigSelected = new sap.m.Label().addStyleClass("noConfigSelected");
			noConfigSelected.setText(oSelf.oConfigListInstance.oCoreApi.getText("noConfigSelected"));
			noConfigSelected.placeAt(oSelf.oConfigListInstance.byId("idConfigDetailData"));
			oSelf.oConfigListInstance.toolbarController.disableCopyDeleteButton();
			oSelf.oConfigListInstance.disableExportButton();
		};
		var onConfigSwitch;
		if (!isMandatoryFilled) { //check mandatory state
			oNavigationHandlerInstance.throwMandatoryPopup(oSelf.oConfigListInstance, {
				yes : function() {
					oSelf.oConfigListInstance.bIsDifferntConfig = oSelf.oConfigListInstance.oTreeInstance.isConfigurationSwitched(oSelf.oConfigListInstance.oPreviousSelectedNode, oSelf.oConfigListInstance.selectedNode);
					if (oSelf.oConfigListInstance.bIsDifferntConfig === false) {
						var routeContext = oSelf.oConfigListInstance.getRouteContext(oSelf.oConfigListInstance.oParentNodeDetails);
						var oSubViewInstance = (typeof oSelf.oConfigListInstance.getView().byId("idConfigDetailData").getContent()[0].getController === "function") ? oSelf.oConfigListInstance.getView().byId("idConfigDetailData").getContent()[0]
								.getController() : undefined;
						var isNewView = oSelf.oConfigListInstance._isNewSubView(oSubViewInstance.oViewData.oParams);
						if (!isNewView) {
							var sPathForConfig = oSelf.oConfigListInstance.getSPathForConfig(oSelf.oConfigListInstance.configId);
							copyAction.call(oSelf.oConfigListInstance);
							oSelf.oConfigListInstance._navHandleExpandDelete.call(oSelf.oConfigListInstance, oSelf.oConfigListInstance.oSelectedNodeDetails, routeContext);
						} else {
							oSelf.oConfigListInstance.handleConfirmDeletion();
						}
					} else {
						var bNavState = oSelf.oConfigListInstance._navMandatoryResetState(oSelf.oConfigListInstance);
						if (!bNavState.isNewView) {
							if (!bNavState.bIsSaved) {
								onConfigSwitch(oSelf.oConfigListInstance); //Throw loss of data pop up
							} else {
								copyAction.call(oSelf.oConfigListInstance);
							}
						}
					}
				}
			});
			isDirtyState = true;
		}
		
		var isSwitchConfig;
		if (oSubViewInstance.oViewData.oParams.name === "configuration") {
			isSwitchConfig = true;
		}
		
		onConfigSwitch = function (context) {
			oNavigationHandlerInstance.throwLossOfDataPopup(context, {
				yes : function(saveEditor) {
					oSelf.oConfigListInstance._navSaveState(function() {
						saveEditor(function(id) {
							if (oSelf.oConfigListInstance.selectedNode) {
								var sBindingContext = oSelf.oConfigListInstance.selectedNode.getBindingContext().sPath;
								var aContextForSelectedNode = sBindingContext.split("/");
								var indexOfConfig = aContextForSelectedNode[2];
							}
							oSelf.oConfigListInstance.oModel.getData().aConfigDetails[indexOfConfig].AnalyticalConfiguration = oSelf.oConfigListInstance.configId;
							oSelf.oConfigListInstance.oModel.updateBindings();
							copyAction.call(oSelf.oConfigListInstance);
						});
					});
				},
				no : function() {
					var context = {
						appId : oSelf.oConfigListInstance.appId,
						configId : oSelf.oConfigListInstance.configId
					};
					var oSubViewInstance = (typeof oSelf.oConfigListInstance.getView().byId("idConfigDetailData").getContent()[0].getController === "function") ? oSelf.oConfigListInstance.getView().byId("idConfigDetailData").getContent()[0]
							.getController() : undefined;
					var isSwitchConfig = (oSubViewInstance.oViewData.oParams.name === "configuration") ? true : false;
					if (oSelf.oConfigListInstance.configId.indexOf(sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.ISNEWCONFIG) === 0) { //If new confiuration splice from model before navigating 
						oSelf.oConfigListInstance._navHandleExpandDelete.call(oSelf.oConfigListInstance, {}, context, isSwitchConfig);
						oSelf.oConfigListInstance.clearTitleAndBreadCrumb();
						oSelf.oConfigListInstance.byId("idConfigDetailData").removeAllContent(); //Remove All Previous Stacked Content from DOM
						disableBtnOnNoConfigSelected();
					} else {
						oSelf.oConfigListInstance._navConfigResetState(oSelf.oConfigListInstance, function() {
							copyAction.call(oSelf.oConfigListInstance);
						});
					}
				}
			});
		};
		
		//On check of saved state and mandatory field filled
		if (!oSelf.oConfigListInstance.bIsSaved && isMandatoryFilled && isSwitchConfig) {
			onConfigSwitch(oSelf.oConfigListInstance); //Throw loss of data pop up
			isDirtyState = true;
		}
		
		if (!isDirtyState) { //if clean state then copy the node
			copyAction.call(oSelf.oConfigListInstance);
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.toolbar#_handlePressDeleteButton
	 * @description Handler for delete button in the toolbar
	 * */
	_handlePressDeleteButton : function(oEvent) { // handler for delete button in the toolbar above tree control
		var sDialogMessage;
		var oSelectedTreeNodeDetails = this.oConfigListInstance.oTreeInstance.getAPFTreeNodeContext(this.oConfigListInstance.oTreeInstance.getSelection());
		var nodeTypeName = this.oCoreApi.getText(oSelectedTreeNodeDetails.nodeObjectType);
		//Remove Focus from the button
		oEvent.getSource().$().blur();
		if(oSelectedTreeNodeDetails.nodeObjectType === sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.STEP){
            sDialogMessage = this.oCoreApi.getText("confirmStepDeletion", [ oSelectedTreeNodeDetails.nodeTitle ]);
        }
        else{
            sDialogMessage = this.oCoreApi.getText("confirmDeletion", [ nodeTypeName, oSelectedTreeNodeDetails.nodeTitle ]);
        }
		this._openDeleteConfirmationDialog(sDialogMessage);
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.toolbar#_openDeleteConfirmationDialog
	 * @description Opens a confirmation dialog before deleting a node from the tree
	 * */
	_openDeleteConfirmationDialog : function(sDialogMessage) {
		var oSelf = this;
		var oContext = jQuery.extend(oSelf.oConfigListInstance, {
			closeDialog : oSelf.closeDialog.bind(oSelf)
		});
		
		if (!this.confirmationDialog) {
			this.confirmationDialog = sap.ui.xmlfragment("idConfigConfirmationDialogFragment", "sap.apf.modeler.ui.fragment.confirmationDialog", oContext);
			this.getView().addDependent(this.confirmationDialog);
			this._setConfirmationDialogText();
		}
		var confirmationMessageLabel = new sap.m.Label();
		confirmationMessageLabel.addStyleClass("dialogText");
		confirmationMessageLabel.setText(sDialogMessage);
		this.confirmationDialog.removeAllContent();
		this.confirmationDialog.addContent(confirmationMessageLabel); // add the confirmation message to the dialog
		jQuery.sap.syncStyleClass("sapUiSizeCompact", this.getView(), this.confirmationDialog);
		this.confirmationDialog.open();
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.toolbar#closeDialog
	 * @description Closes the delete confirmation dialog
	 * */
	closeDialog : function() {
		if (this.confirmationDialog && this.confirmationDialog.isOpen()) {
			this.confirmationDialog.close();
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.toolbar#_setConfirmationDialogText
	 * @description Sets text for the delete confirmation dialog
	 * */
	_setConfirmationDialogText : function() {
		sap.ui.core.Fragment.byId("idConfigConfirmationDialogFragment", "idDeleteConfirmation").setTitle(this.oCoreApi.getText("confirmation"));
		sap.ui.core.Fragment.byId("idConfigConfirmationDialogFragment", "idDeleteButton").setText(this.oCoreApi.getText("deleteButton"));
		sap.ui.core.Fragment.byId("idConfigConfirmationDialogFragment", "idCancelButtonDialog").setText(this.oCoreApi.getText("cancel"));
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.toolbar#_handlePressMoveUpButton
	 * @description Handler for move up button in the toolbar
	 * */
	_handlePressMoveUpButton : function() {//handler for moving an object of the tree one level up
		this.bIsDown = false;
		var selectedNode = this.oConfigListInstance.oTreeInstance.getSelection();
		if (selectedNode !== null) {
			var selectedNodeContext = this.oConfigListInstance.oTreeInstance.getAPFTreeNodeContext(selectedNode);
			if (selectedNodeContext !== undefined) {
				this._moveUpOrDown(selectedNodeContext, this.bIsDown);
			}
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.toolbar#_handlePressMoveUpButton
	 * @description Handler for move down button in the toolbar
	 * */
	_handlePressMoveDownButton : function() {//handler for moving an object of the tree one level down
		this.bIsDown = true;
		var selectedNode = this.oConfigListInstance.oTreeInstance.getSelection();
		if (selectedNode !== null) {
			var selectedNodeContext = this.oConfigListInstance.oTreeInstance.getAPFTreeNodeContext(selectedNode);
			if (selectedNodeContext !== undefined) {
				this._moveUpOrDown(selectedNodeContext, this.bIsDown);
			}
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.toolbar#_moveUpOrDown
	 * @param {Object} Selected node context
	 * @param {boolean} Boolean stating whether down button is pressed
	 * @description Moves the node up or down depending upon which button is pressed in the toolbar
	 * */
	_moveUpOrDown : function(selectedNodeContext, bIsDown) {
		var selectedNodeObjectType = selectedNodeContext.nodeObjectType;
		var selectedNodeId = selectedNodeContext.nodeAPFId;
		var nodeContext = selectedNodeContext.nodeContext;
		var configIndexInTree = nodeContext.split('/')[2];
		var aObjectArray, swapToIndex, oTemp1, oTemp2, len;
		var bSwap = false;
		var swapFromIndex = nodeContext.split('/')[nodeContext.split('/').length - 1];
		switch (selectedNodeObjectType) {
			case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.FACETFILTER:
				aObjectArray = this.oConfigListInstance.oModel.getData().aConfigDetails[configIndexInTree].configData[0].filters;
				len = aObjectArray.length;
				if (bIsDown) {
					if (parseInt(swapFromIndex, 10) !== (len - 1)) {
						this.oConfigListInstance.configEditor.moveFacetFilterUpOrDown(selectedNodeId, 1);
						swapToIndex = parseInt(swapFromIndex, 10) + 1;
						bSwap = true;
					}
				} else {
					if (parseInt(swapFromIndex, 10) !== 0) {
						this.oConfigListInstance.configEditor.moveFacetFilterUpOrDown(selectedNodeId, -1);
						swapToIndex = parseInt(swapFromIndex, 10) - 1;
						bSwap = true;
					}
				}
				break;
			case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CATEGORY:
				aObjectArray = this.oConfigListInstance.oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories;
				len = aObjectArray.length;
				if (bIsDown) {
					if (parseInt(swapFromIndex, 10) !== (len - 1)) {
						this.oConfigListInstance.configEditor.moveCategoryUpOrDown(selectedNodeId, 1);
						swapToIndex = parseInt(swapFromIndex, 10) + 1;
						bSwap = true;
					}
				} else {
					if (parseInt(swapFromIndex, 10) !== 0) {
						this.oConfigListInstance.configEditor.moveCategoryUpOrDown(selectedNodeId, -1);
						swapToIndex = parseInt(swapFromIndex, 10) - 1;
						bSwap = true;
					}
				}
				break;
			case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.NAVIGATIONTARGET:
				aObjectArray = this.oConfigListInstance.oModel.getData().aConfigDetails[configIndexInTree].configData[2].navTargets;
				len = aObjectArray.length;
				if (bIsDown) {
					if (parseInt(swapFromIndex, 10) !== (len - 1)) {
						this.oConfigListInstance.configEditor.moveNavigationTargetUpOrDown(selectedNodeId, 1);
						swapToIndex = parseInt(swapFromIndex, 10) + 1;
						bSwap = true;
					}
				} else {
					if (parseInt(swapFromIndex, 10) !== 0) {
						this.oConfigListInstance.configEditor.moveNavigationTargetUpOrDown(selectedNodeId, -1);
						swapToIndex = parseInt(swapFromIndex, 10) - 1;
						bSwap = true;
					}
				}
				break;
			case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.STEP:
				var categoryIndexInConfig = nodeContext.split('/')[6];
				var categoryInConfig = this.oConfigListInstance.oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories[categoryIndexInConfig];
				aObjectArray = categoryInConfig.steps;
				len = aObjectArray.length;
				if (bIsDown) {
					if (parseInt(swapFromIndex, 10) !== (len - 1)) {
						this.oConfigListInstance.configEditor.moveCategoryStepAssignmentUpOrDown(categoryInConfig.id, selectedNodeId, 1);
						swapToIndex = parseInt(swapFromIndex, 10) + 1;
						bSwap = true;
					}
				} else {
					if (parseInt(swapFromIndex, 10) !== 0) {
						this.oConfigListInstance.configEditor.moveCategoryStepAssignmentUpOrDown(categoryInConfig.id, selectedNodeId, -1);
						swapToIndex = parseInt(swapFromIndex, 10) - 1;
						bSwap = true;
					}
				}
				break;
			case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.REPRESENTATION:
				var selectedStep = this.oConfigListInstance.oTreeInstance.getSelection();
				var selectedStepObj = sap.ui.getCore().byId(selectedStep.getId());
				var stepNode = selectedStepObj.getParent();
				var stepNodeId = this.oConfigListInstance.oTreeInstance.getAPFTreeNodeContext(stepNode).nodeAPFId;
				var step = this.oConfigListInstance.configEditor.getStep(stepNodeId);
				categoryIndexInConfig = nodeContext.split('/')[6]; //get the category and step index
				var stepIndexInCategory = nodeContext.split('/')[8];
				aObjectArray = this.oConfigListInstance.oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories[categoryIndexInConfig].steps[stepIndexInCategory].representations;
				len = aObjectArray.length;
				if (bIsDown) {
					if (parseInt(swapFromIndex, 10) !== (len - 1)) {
						step.moveRepresentationUpOrDown(selectedNodeId, 1);
						swapToIndex = parseInt(swapFromIndex, 10) + 1;
						bSwap = true;
					}
				} else {
					if (parseInt(swapFromIndex, 10) !== 0) {
						step.moveRepresentationUpOrDown(selectedNodeId, -1);
						swapToIndex = parseInt(swapFromIndex, 10) - 1;
						bSwap = true;
					}
				}
				break;
			default :
				break;
		}
		if (bSwap) {
			oTemp1 = aObjectArray[swapFromIndex];
			oTemp2 = aObjectArray[swapToIndex];
			aObjectArray[swapToIndex] = oTemp1;
			aObjectArray[swapFromIndex] = oTemp2;
			this.oConfigListInstance.oModel.updateBindings();
			this.oConfigListInstance.configEditor.setIsUnsaved();
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.toolbar#_handleAddExistingStepPress
	 * @description Handler for existing step menu item in the toolbar
	 * */
	_handleAddExistingStepPress : function(){
		var self = this;
		var selectedNodeDetails = this.oConfigListInstance.oTreeInstance.getAPFTreeNodeContext(this.oConfigListInstance.oTreeInstance.getSelection());
		var categoryId = this.oConfigListInstance.oTreeInstance.getParentNodeContext(selectedNodeDetails).categoryId;
		var aStepsNotAssignedToCategoryIds = this.oConfigListInstance.configEditor.getStepsNotAssignedToCategory(categoryId);
		var sStepTitle;
		var aStepsNotAssignedToCategory = [];
		aStepsNotAssignedToCategoryIds.forEach(function(stepId){
			var oStepNotAssignedToCategory = {};
			var oStep = self.oConfigListInstance.configEditor.getStep(stepId);
			sStepTitle = self.oConfigListInstance.oTextPool.get(oStep.getTitleId()).TextElementDescription;
			oStepNotAssignedToCategory.id = stepId;
			oStepNotAssignedToCategory.name = sStepTitle;
			aStepsNotAssignedToCategory.push(oStepNotAssignedToCategory);
		});
		var oModelDialog = new sap.ui.model.json.JSONModel({
			existingStepData : aStepsNotAssignedToCategory
		});
		if(!this.addExistingStepDialog){
			this.addExistingStepDialog= sap.ui.xmlfragment("idExistingStepDialogFragment", "sap.apf.modeler.ui.fragment.existingStepDialog", this);
			this._setExistingStepDialogText();
		}
		this.getView().addDependent(this.addExistingStepDialog);
		this.addExistingStepDialog.setModel(oModelDialog);
		this.addExistingStepDialog.open();
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.toolbar#_handleExistingStepDialogOK
	 * @description Handler for press of ok in the existing step dialog
	 * */
	_handleExistingStepDialogOK : function(oEvent){
		var self = this;
		var nodeObjectType = sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.STEP;
		var selectedSteps = oEvent.getParameters("listItem").selectedItems;
		var noOfSteps = selectedSteps.length;
		var selectedNodeDetails = this.oConfigListInstance.oTreeInstance.getAPFTreeNodeContext(this.oConfigListInstance.oTreeInstance.getSelection());
		var categoryId = this.oConfigListInstance.oTreeInstance.getParentNodeContext(selectedNodeDetails).categoryId;
		var aExistingStepsToBeAdded = [];
		for(var i = 0; i < noOfSteps; i++){
			var sPathOfExistingStep = oEvent.getParameters("selectedItems").selectedContexts[i].sPath.split('/')[2];
			var oExistingStep = oEvent.getSource().getModel().getData().existingStepData[sPathOfExistingStep];
			var step = this.oConfigListInstance.configEditor.getStep(oExistingStep.id);
			this.oConfigListInstance.configEditor.addCategoryStepAssignment(categoryId, oExistingStep.id);
			var aRepresentations = step.getRepresentations();
			var noOfReps = aRepresentations.length;
			var aRepresentationsToBeAdded = [];
			for(var j = 0; j< noOfReps; j++){
				var oRepresentation = {};
				oRepresentation.id = aRepresentations[j].getId();
				oRepresentation.name = aRepresentations[j].getRepresentationType();
				oRepresentation.icon = this._getRepresentationIcon(oRepresentation.name);
				aRepresentationsToBeAdded.push(oRepresentation);
			}
			var oStep = {};
			oStep.step = oExistingStep;
			oStep.representations = aRepresentationsToBeAdded;
			oStep.noOfReps = noOfReps;
			aExistingStepsToBeAdded.push(oStep);
		}
		if(noOfSteps !== 0){
			var params = {
					noOfSteps : noOfSteps,
					aExistingStepsToBeAdded : aExistingStepsToBeAdded
			};
			this.oConfigListInstance.oTreeInstance.addNodeInTree(nodeObjectType, params);
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.toolbar#_getRepresentationIcon
	 * @description Returns teh representation icon for a representation type
	 * @param {String} Representation type
	 * @return {String} Picture or icon of the representation type
	 * */
	_getRepresentationIcon : function(sRepresentationName) {
		var icon;
		var oRepresentationTypes = this.oCoreApi.getRepresentationTypes();
		for(var index = 0; index < oRepresentationTypes.length; index++){
			if(sRepresentationName === oRepresentationTypes[index].id){
				icon = oRepresentationTypes[index].picture;
				break;
			}
		}
		return icon;
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.toolbar#_handleExistingStepDialogSearch
	 * @description Handler for search in the existing step dialog
	 * */
	_handleExistingStepDialogSearch: function(oEvent) {
	    var sValue = oEvent.getParameter("value");
	    var oFilter = new sap.ui.model.Filter("name", sap.ui.model.FilterOperator.Contains, sValue);
	    var oBinding = oEvent.getSource().getBinding("items");
	    oBinding.filter([oFilter]);
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.toolbar#_handleExistingStepDialogOK
	 * @description Handler for press of ok in the existing step dialog
	 * */
	_handleExistingStepDialogClose : function(oEvent) {
		if (this.addExistingStepDialog) {
			oEvent.getSource().getBinding("items").filter([]);
		}
	}
});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 *@class analysisPath
 *@memberOf sap.apf.ui.reuse.controller
 *@name analysisPath
 *@description controller for view.analysisPath
 */
sap.ui.controller("sap.apf.ui.reuse.controller.analysisPath", {
	/**
	 *@this {sap.apf.ui.reuse.controller.analysisPath}
	 */
	/**
	 *@memberOf sap.apf.ui.reuse.controller.analysisPath
	 */
	refreshAnalysisPath : function() {
		this.getView().getCarousel().getController().refreshCarousel();
	},
	isOpenPath : false,
	isNewPath : false,
	bIsBackNavigation : false,
	onInit : function() {
		this.oCoreApi = this.getView().getViewData().oCoreApi;
		this.oUiApi = this.getView().getViewData().uiApi;
		this.bIsDirtyState = false;
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.analysisPath
	 *@method refresh
	 *@description Adds loading sign to steps which have changed 
	 *@param {number} nStartIndex index of step in analysis path after which filter has changed
	 */
	refresh : function(nStartIndex) {
		var oView = this.getView().oCarousel;
		var aStepViews = oView.stepViews;
		var i;
		if (nStartIndex !== -1) {
			for(i = nStartIndex; i < aStepViews.length; i++) {
				var oStepView = {};
				oStepView = aStepViews[i];
				if (oStepView !== undefined) {
					oStepView.oThumbnailChartLayout.setBusy(true);
					//oStepView.rerender();
				}
			}
		}
		var nActiveStepIndex = this.oCoreApi.getSteps().indexOf(this.oCoreApi.getActiveStep());
		if (nActiveStepIndex > nStartIndex) {
			var oChartView = this.oUiApi.getStepContainer();
			oChartView.vLayout.setBusy(true);
		}
		var pathName = this.oUiApi.getAnalysisPath().oSavedPathName.getTitle();
		if ((this.bIsDirtyState === undefined || this.bIsDirtyState === false) && this.oCoreApi.getSteps().length !== 0) {
			var pathHasChanged = "*" + pathName;
			this.bIsDirtyState = true;
			this.oUiApi.getAnalysisPath().oSavedPathName.setTitle(pathHasChanged);
		}
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.analysisPath
	 *@method callBackforUpdatePath 
	 *@param {object} oCurrentStep: Current Step instance 
	 *@param {boolean} bStepChanged  returns true if filter of step has changed
	 *@description Calls method updateCurrentStep if current step has changed 
	 */
	callBackForUpdatePath : function(oCurrentStep, bStepChanged) {
		var nIndex = this.oCoreApi.getSteps().indexOf(oCurrentStep);
		if (nIndex === 0) {
			this.refreshAnalysisPath();
		}
		this.updateCurrentStep(oCurrentStep, nIndex, bStepChanged);
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.analysisPath
	 *@method callBackForUpdatePathAndSetLastStepAsActive
	 *@param {object} oCurrentStep: Current Step instance
	 *@param {boolean} bStepChanged returns true if step has changed
	 *@description Sets last step as active and calls method update Path 
	 */
	callBackForUpdatePathAndSetLastStepAsActive : function(oCurrentStep, bStepChanged) {
		var nIndex = this.oCoreApi.getSteps().indexOf(oCurrentStep);
		if (nIndex === 0) {
			var oStep = this.oCoreApi.getSteps()[this.oCoreApi.getSteps().length - 1];
			this.oCoreApi.setActiveStep(oStep);
			this.refreshAnalysisPath();
		}
		this.updateCurrentStep(oCurrentStep, nIndex, bStepChanged);
		this.oUiApi.getLayoutView().setBusy(false);
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.analysisPath
	 *@method updateCurrentStep
	 *@param {object} oCurrentStep: CurrentStep instance
	 *@param {number} nIndex: index of CurrentStep
	 *@param {boolean} bStepChanged returns true if step has changed
	 *@description updates Analysis Path if steps following current step has changed. If CurrentStep is active draws chart in main area.
	 */
	updateCurrentStep : function(oCurrentStep, nIndex, bStepChanged) {
		var isOpenPath = this.oUiApi.getAnalysisPath().getController().isOpenPath;
		var nActiveIndex = this.oCoreApi.getSteps().indexOf(this.oCoreApi.getActiveStep());
		var isActiveStep = (nIndex === nActiveIndex);
		this.drawThumbnail(nIndex, bStepChanged || isOpenPath);
		if (isActiveStep) {
			this.drawMainChart(bStepChanged);
		}
		if (this.oUiApi.getAnalysisPath().getController().isOpenPath && (this.oCoreApi.getSteps().indexOf(oCurrentStep) === (this.oCoreApi.getSteps().length - 1))) {
			this.oUiApi.getLayoutView().setBusy(false);
			this.oUiApi.getAnalysisPath().getController().isOpenPath = false;
		}
		if (this.oUiApi.getAnalysisPath().getController().bIsBackNavigation && (this.oCoreApi.getSteps().indexOf(oCurrentStep) === (this.oCoreApi.getSteps().length - 1))) {
			this.oUiApi.getLayoutView().setBusy(false);
			this.oUiApi.getAnalysisPath().getController().bIsBackNavigation = false;
		}
		this.oUiApi.getAnalysisPath().getController().isNewPath = false;
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.analysisPath
	 *@method drawMainChart
	 *@param {boolean} bStepChanged returns true if step has changed
	 *@description gets chartArea of application from API sap.apf.ui.getStepConatiner() and draws Chart 
	 */
	drawMainChart : function(bStepChanged) {
		var oChartView = this.oUiApi.getStepContainer();
		oChartView.getController().drawStepContent(bStepChanged);
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.analysisPath
	 *@method drawMainChart
	 *@param {number} nIndex index of step for which thumbnail has to be drawn
	 *@param {boolean} bStepChanged returns true if step has changed
	 *@description gets chartArea of application from API sap.apf.ui.getStepConatiner() and draws Chart 
	 */
	drawThumbnail : function(nIndex, bStepChanged) {
		var oStepView = this.getView().getCarousel().getStepView(nIndex);
		oStepView.getController().drawThumbnailContent(bStepChanged);
	}
});
/*!

 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/* globals document */
/**
 *@class carousel
 *@name carousel
 *@memberOf sap.apf.ui.reuse.controller
 *@description controller for view.carousel
 */
sap.ui.controller("sap.apf.ui.reuse.controller.carousel", {
	/**
	*@this {sap.apf.ui.reuse.controller.carousel}
	*/
	onAfterRendering : function() {
		if (this.oCoreApi.getSteps().length < 1) {
			jQuery(".DnD-separator").hide(); //Hide the Separator initially 
		}
		// remaining code from getInitialStep:
		this.oViewData = this.getView().getViewData().oInject;
		this.oUiApi = this.oViewData.uiApi;
		jQuery(this.oUiApi.getStepContainer().getDomRef()).hide();
		if (jQuery("#" + this.initialText.getId()).length === 0) {
			jQuery('#' + this.oUiApi.getStepContainer().getId()).parent().append(sap.ui.getCore().getRenderManager().getHTML(this.initialText));
		}
		if (this.oUiApi.getAnalysisPath().getController().isOpenPath) {
			jQuery(".initialText").remove();
		}
	},
	onInit : function() {
		var oViewData = this.getView().getViewData().oInject;
		this.oCoreApi = oViewData.oCoreApi;
		this.oUiApi = oViewData.uiApi;
		this.stepGalleryView = sap.ui.view({
			type : sap.ui.core.mvc.ViewType.JS,
			viewName : "sap.apf.ui.reuse.view.stepGallery",
			viewData : oViewData
		});
		this.initialText = new sap.m.Label({
			text : oViewData.oCoreApi.getTextNotHtmlEncoded('initialText')
		}).addStyleClass('initialText');
	},
	showStepGallery : function() {
		this.stepGalleryView.oController.openHierarchicalSelectDialog();
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.carousel
	*@method onAfterRendering 
	*@description Attaches event on Add Step Button and instantiate Step Gallery
	* Called when the View has been rendered (so its HTML is part of the document). Post-rendering manipulations of the HTML could be done here.
	* This hook is the same one that SAPUI5 controls get after being rendered.
	*/
	onBeforeRendering : function() {
		this.oUiApi.getLayoutView().getController().addMasterFooterContentLeft(this.getView().up);
		this.oUiApi.getLayoutView().getController().addMasterFooterContentLeft(this.getView().down);
	},
	getStepData : function(stepObj) {
		var oSelf = this;
		var fStep = stepObj;
		var oStep = {};
		oStep.index = this.oCoreApi.getSteps().indexOf(stepObj);
		oStep.title = this.oCoreApi.getTextNotHtmlEncoded(fStep.title);
		oStep.thumbnail = this.getThumbnailDataset(stepObj);
		return oStep;
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.carousel
	*@method refreshCarousel
	*@description Binds to model and set the Steps as droppable 
	 */
	refreshCarousel : function() {
		if (this.oCoreApi.getSteps().length > this.getView().stepViews.length) {
			this.addStep(this.oCoreApi.getSteps());//sap.apf.getSteps()[sap.apf.getSteps().length - 1]
		}
		//		var indexActive = this.oCoreApi.getSteps().indexOf(this.oCoreApi.getActiveStep());
		//		var activeStep = this.getView().dndBox.eleRefs.blocks[indexActive];
		//		if (activeStep !== undefined) {
		//			//activeStep.scrollIntoViewIfNeeded();
		//		}
	},
	addStep : function(stepObj) {
		this.oViewData = this.getView().getViewData().apfInstance;
		if (stepObj instanceof Array) {
			if (this.oUiApi.getAnalysisPath().getController().isOpenPath || this.oUiApi.getAnalysisPath().getController().bIsBackNavigation) {
				var i;
				for(i = 0; i < stepObj.length; i++) {
					this.addStep(stepObj[i]);
				}
				return;
			} else {
				this.addStep(stepObj[this.oCoreApi.getSteps().length - 1]);
				return;
			}
		}
		var stepView = new sap.ui.view({
			viewName : "sap.apf.ui.reuse.view.step",
			type : sap.ui.core.mvc.ViewType.JS,
			viewData : this.getView().getViewData().oInject
		});
		var jsonModel = new sap.ui.model.json.JSONModel();
		stepView.setModel(jsonModel);
		var stepData = this.getStepData(stepObj);
		jsonModel.setData(stepData);
		this.getView().stepViews.push(stepView);
		var sampleDiv = document.createElement('div');
		sampleDiv.innerHTML = sap.ui.getCore().getRenderManager().getHTML(stepView);
		var dndBox = this.getView().dndBox;
		var blockIndex = dndBox.eleRefs.blocks.length - 1;
		jQuery(".initialText").remove();
		jQuery(this.oUiApi.getStepContainer().getDomRef()).show(); // Show the step container
		jQuery(".DnD-separator").show(); //Show the Seperator once the step is added
		var isConfigInitial = this.Step ? this.Step.categories[0].id : undefined;
		if (isConfigInitial === "initial") {
			dndBox.insertBlock({
				blockElement : sampleDiv,
				dragState : false,
				dropState : false,
				removable : false
			}, blockIndex);
		} else {
			dndBox.insertBlock({
				blockElement : sampleDiv
			}, blockIndex);
		}
		if (stepData.index === this.oCoreApi.getSteps().indexOf(this.oCoreApi.getActiveStep())) {
			stepView.toggleActiveStep();
		}
		stepView.rerender();
		this.oUiApi.getLayoutView().setBusy(true);
	},
	moveStep : function(dragIndex, dropIndex) {
		var carouselView = this.oUiApi.getAnalysisPath().getCarousel();
		if (dragIndex === dropIndex) {
			return;
		}
		carouselView.stepViews = (function(array, from, to) {
			var diff = Math.abs(to - from);
			var adder = (to - from) > 0 ? 1 : -1;
			var temp;
			while (diff--) {
				temp = array[from];
				array[from] = array[from + adder];
				array[from + adder] = temp;
				from = from + adder;
			}
			return array;
		})(carouselView.stepViews, dragIndex, dropIndex);
		this.oUiApi.getAnalysisPath().getController().refresh(Math.min(dragIndex, dropIndex));
		var draggedStep = this.oCoreApi.getSteps()[dragIndex];
		this.oCoreApi.moveStepToPosition(draggedStep, dropIndex, this.oUiApi.getAnalysisPath().getController().callBackForUpdatePath.bind(this.oUiApi.getAnalysisPath().getController()));
	},
	removeStep : function(removeIndex) {
		var carouselView = this.oUiApi.getAnalysisPath().getCarousel();
		carouselView.stepViews.splice(removeIndex, 1);
		var stepLength = carouselView.stepViews.length;
		var activeStepIndex = this.oCoreApi.getSteps().indexOf(this.oCoreApi.getActiveStep());
		if (stepLength > 0) {
			if (removeIndex === activeStepIndex) {
				var newActiveStepIndex;
				var stepView;
				if (activeStepIndex === 0) {
					newActiveStepIndex = activeStepIndex;
					stepView = carouselView.stepViews[newActiveStepIndex];
					stepView.toggleActiveStep();
					this.oCoreApi.setActiveStep(this.oCoreApi.getSteps()[newActiveStepIndex + 1]);
				} else {
					newActiveStepIndex = activeStepIndex - 1;
					stepView = carouselView.stepViews[newActiveStepIndex];
					stepView.toggleActiveStep();
					this.oCoreApi.setActiveStep(this.oCoreApi.getSteps()[newActiveStepIndex]);
				}
			}
		} else {
			jQuery(".DnD-separator").hide();// If step length is 0 then hide the seperator
			jQuery(this.oUiApi.getStepContainer().getDomRef()).hide(); //Hide the step container
			this.oUiApi.getStepContainer().getStepToolbar().chartToolbar.removeAllCharts();
			jQuery('#' + this.oUiApi.getStepContainer().getId()).parent().append(sap.ui.getCore().getRenderManager().getHTML(this.initialText));
		}
		//Remove the event on before render setHeighAndWidth function on delete of step 
		var removeStep = this.oCoreApi.getSteps()[removeIndex];
		if (removeStep.getSelectedRepresentation().chart) {
			removeStep.getSelectedRepresentation().chart.removeEventDelegate(this.oUiApi.getStepContainer().getController().fnSetHeightAndWidth);
			this.oUiApi.getStepContainer().getController().fnSetHeightAndWidth = null;
			this.oUiApi.getStepContainer().getController().setHeightAndWidth = null;
		}
		this.oUiApi.getStepContainer().getController().representationInstance = null;
		this.oUiApi.getStepContainer().getController().currentSelectedRepresentationId = null;
		this.oUiApi.getAnalysisPath().getController().refresh(removeIndex);
		this.oCoreApi.removeStep(removeStep, this.oUiApi.getAnalysisPath().getController().callBackForUpdatePath.bind(this.oUiApi.getAnalysisPath().getController()));
		this.oUiApi.getLayoutView().getController().enableDisableOpenIn(); //Enable/disable open in based on current active step
	},
	removeAllSteps : function() {
		var removeIndex = 0;
		var i;
		var dndBox = this.getView().dndBox;
		var carouselView = this.oUiApi.getAnalysisPath().getCarousel();
		var stepLength = carouselView.stepViews.length;
		function fnCallback(){}
		for(i = 1; i <= stepLength; i++) {
			dndBox.removeBlock(removeIndex, fnCallback);
			//Remove the event on before render setHeighAndWidth function on delete of step 
			var removeStep = this.oCoreApi.getSteps()[i - 1];
			if (removeStep.getSelectedRepresentation().chart) {
				removeStep.getSelectedRepresentation().chart.removeEventDelegate(this.oUiApi.getStepContainer().getController().fnSetHeightAndWidth);
				this.oUiApi.getStepContainer().getController().fnSetHeightAndWidth = null;
				this.oUiApi.getStepContainer().getController().setHeightAndWidth = null;
			}
			this.oUiApi.getStepContainer().getController().representationInstance = null;
			this.oUiApi.getStepContainer().getController().currentSelectedRepresentationId = null;
			carouselView.stepViews.splice(removeIndex, 1);
		}
		jQuery(".DnD-separator").hide(); //Hide the seperator 
		this.oUiApi.getStepContainer().getStepToolbar().chartToolbar.removeAllCharts();
		this.oUiApi.getLayoutView().getController().enableDisableOpenIn(); //Enable/disable open in based on current active step
	},
	getThumbnailDataset : function(oStep) {
		var oSelf = this;
		var aThumbnails = [ "leftUpper", "rightUpper", "leftLower", "rightLower" ];
		var oThumbnailFromStep = oStep.thumbnail;
		var oThumbnailFromRepresentation = oStep.getSelectedRepresentationInfo().thumbnail;
		var oResultThumbnail = {};
		aThumbnails.forEach(function(sThumbnail) {
			var bHasRepresentationThumbnail = oThumbnailFromRepresentation && oThumbnailFromRepresentation[sThumbnail];
			bHasRepresentationThumbnail = bHasRepresentationThumbnail && !oSelf.oCoreApi.isInitialTextKey(oThumbnailFromRepresentation[sThumbnail]);
			var bHasStepThumbnail = oThumbnailFromStep && oThumbnailFromStep[sThumbnail];
			bHasStepThumbnail = bHasStepThumbnail && !oSelf.oCoreApi.isInitialTextKey(oThumbnailFromStep[sThumbnail]);
			if (bHasRepresentationThumbnail) {
				oResultThumbnail[sThumbnail] = oSelf.oCoreApi.getTextNotHtmlEncoded(oThumbnailFromRepresentation[sThumbnail]);
				return;
			} else if (bHasStepThumbnail) {
				oResultThumbnail[sThumbnail] = oSelf.oCoreApi.getTextNotHtmlEncoded(oThumbnailFromStep[sThumbnail]);
				return;
			}
		});
		return oResultThumbnail;
	}
});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/*global window*/
/**
 *@class deleteAnalysisPath
 *@name deleteAnalysisPath
 *@memberOf sap.apf.ui.reuse.controller
 *@description controller of view.deleteAnalysisPath
 */
sap.ui.controller("sap.apf.ui.reuse.controller.deleteAnalysisPath", {
	/**
	 *@this {sap.apf.ui.reuse.controller.pathGallery}
	 */
	onInit : function() {
		var self = this;
		this.oCoreApi = this.getView().getViewData().oInject.oCoreApi;
		this.oUiApi = this.getView().getViewData().oInject.uiApi;
		this.oSerializationMediator = this.getView().getViewData().oInject.oSerializationMediator;
		this.contentWidth = jQuery(window).height() * 0.6 + "px"; // height and width for the dialog relative to the window
		this.contentHeight = jQuery(window).height() * 0.6 + "px";
		this.stdDialog = new sap.m.Dialog({
			title : self.oCoreApi.getTextNotHtmlEncoded("select-analysis-path"),
			contentWidth : self.contentWidth,
			contentHeight : self.contentHeight,
			content : this.getView().getContent()[0],
			leftButton : new sap.m.Button({
				text : self.oCoreApi.getTextNotHtmlEncoded("close"),
				press : function() {
					self.stdDialog.close();
					self.oUiApi.getLayoutView().setBusy(false);
				}
			})
		});
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.pathGallery
	*@method openPathGalleryWithDelete
	*@description opens the path gallery with delete mode
	*/
	openPathGalleryWithDelete : function() {
		this.stdDialog.open();
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.pathGallery
	 *@method getGuidForPath
	 *@description Fetches guid for a path
	 */
	getGuidForPath : function(sPathName, viewData) {
		var i;
		for(  i = 0; i < viewData.length; i++) {
			var oData = viewData[i];
			if (oData.AnalysisPathName === sPathName) {
				return oData.guid;
			}
		}
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.pathGallery
	 *@method deleteSavedPath
	 *@description deletes the section and path from path gallery.
	 *@param {object} sectionDom
	 */
	deleteSavedPath : function(sPathName, oInfo) {
		var self = this;
		var guid = oInfo.guid;
		var pathName = sPathName;
		var oMessageObject;
		var currentPath = self.oUiApi.getAnalysisPath().oSavedPathName.getTitle();
		self.oSerializationMediator.deletePath(guid, function(oResponse, metaData, msgObj) {
			if (msgObj === undefined && (typeof oResponse === "object")) {
				oInfo.list.removeItem(oInfo.item);
				self.oCoreApi.readPaths(function(oResponse, metaData, msgObj) {
					if (msgObj === undefined && (typeof oResponse === "object")) {
						var noOfPaths = oResponse.paths.length;
						//Text to be shown in galery when all paths are deleted
						if (noOfPaths === 0) {
							jQuery(".pathText").removeClass("pathTextDontShow");
							jQuery(".pathText").addClass("pathTextShow");
						}
					} else {
						oMessageObject = self.oCoreApi.createMessageObject({
							code : "6005",
							aParameters : [ pathName ]
						});
						oMessageObject.setPrevious(msgObj);
						self.oCoreApi.putMessage(oMessageObject);
					}
				});
			} else {
				oMessageObject = self.oCoreApi.createMessageObject({
					code : "6009",
					aParameters : [ "delete", pathName ]
				});
				oMessageObject.setPrevious(msgObj);
				self.oCoreApi.putMessage(oMessageObject);
			}
		});
		//If current path is deleted reset the analysis path
		if (currentPath === pathName) {
			self.oUiApi.getAnalysisPath().getToolbar().getController().resetAnalysisPath();
		}
	}
});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
sap.ui.controller("sap.apf.ui.reuse.controller.layout", {
	onInit : function() {
		//Application Title
		this.oCoreApi = this.getView().getViewData().oCoreApi;
		this.oUiApi = this.getView().getViewData().uiApi;
		this.oNavigationHandler = this.getView().getViewData().oNavigationHandler;
		var applicationTitleKey;
		// Check if app config properties are available
		if (this.oCoreApi.getApplicationConfigProperties()) {
			applicationTitleKey = this.oCoreApi.getApplicationConfigProperties().appName;
		}
		this.applicationTitle = this.oCoreApi.getTextNotHtmlEncoded(applicationTitleKey);
		this.getView().byId("applicationPage").setTitle(this.applicationTitle);
		//Initialize Message Handler
		var oMessageHandlerView = this.oUiApi.getNotificationBar();
		this.getView().byId("applicationPage").addContent(oMessageHandlerView);
		var fnCallbackMessageHandling = oMessageHandlerView.initializeHandler;
		//this.oCoreApi.activateOnErrorHandling(true);
		this.oCoreApi.setCallbackForMessageHandling(fnCallbackMessageHandling.bind(oMessageHandlerView));
		this.loadLayout();
	},
	/**
	 *@description Layout specific content settings
	 */
	loadLayout : function() {
		var chartView = this.oUiApi.getStepContainer();
		var analysisPath = this.oUiApi.getAnalysisPath();
		this.getView().byId("applicationPage").setTitle(this.applicationTitle);
		this.getView().byId("masterFooter").addStyleClass("applicationFooter");
		this.getView().byId("detailFooter").addStyleClass("applicationFooter");
		this.getView().byId("stepContainer").addContent(chartView);
		this.getView().byId("analysisPath").addContent(analysisPath);
		this.addOpenInButton();//adds the "Open In..." button to the footer for navigation targets
	},
	onAfterRendering : function() {
		var self = this;
		var showMasterButton = new sap.m.Button({
			text : this.oCoreApi.getTextNotHtmlEncoded("showAnalyticalPath"),
			press : function() {
				self.getView().byId("applicationView").showMaster();
			},
			lite : true,
			type : "Transparent"
		});
		this.getView().byId("applicationView").attachAfterMasterClose(function() {
			self.getView().byId("detailFooter").removeContentLeft(showMasterButton);
			self.addDetailFooterContentLeft(showMasterButton);
		});
		this.getView().byId("applicationView").attachAfterMasterOpen(function() {
			if (self.getView().byId('detailFooter')) {
				self.getView().byId("detailFooter").removeAllContentLeft();
			}
		});
		if (this.getView().byId("applicationView").isMasterShown() === false) {
			this.addDetailFooterContentLeft(showMasterButton);
		}
	},
	hideMaster : function() {
		if (sap.ui.Device.system.phone || sap.ui.Device.system.tablet) {
			this.getView().byId("applicationView").hideMaster();
			if (sap.ui.Device.system.phone) {
				this.getView().byId("applicationView").toDetail(this.getView().byId("stepContainer").getId());
			}
		}
	},
	showMaster : function() {
		this.getView().byId("applicationView").showMaster();
	},
	//            setDetailTitle : function(oControl) {
	//                            this.detailTitleRemoveAllContent();
	//                            this.getView().byId("headerDetail").addContentMiddle(oControl);
	//            },
	//            detailTitleRemoveAllContent : function() {
	//                            this.getView().byId("headerDetail").removeAllContentMiddle();
	//            },
	/**
	 *@description Adds content to Master Footer alignment: Left
	 *@param oControl
	 */
	addMasterFooterContentLeft : function(oControl) {
		this.getView().byId("masterFooter").addContentLeft(oControl);
	},
	/**
	 *@description Adds content to Master Footer alignment: Right
	 *@param oControl
	 */
	addMasterFooterContentRight : function(oControl) {
		if (this.getView().byId("masterFooter").getContentRight().length === 0) {
			this.getView().byId("masterFooter").insertContentRight(oControl);
		} else {
			this.addMasterFooterContent(oControl);
		}
	},
	/**
	 *@description Adds content to Master Footer alignment: Right
	 *@param oControl
	 */
	addMasterFooterContent : function(oControl) {
		var self = this;
		if (this.oActionListPopover === undefined) {
			this.oActionListPopover = new sap.m.Popover({
				showHeader : false,
				placement : sap.m.PlacementType.Top
			});
		}
		
		if(typeof oControl.getWidth === "function"){
			oControl.setWidth("100%");
		}
		if (this.footerContentButton === undefined) {
			this.getView().byId("masterFooter").getContentRight()[0].setWidth("71%"); //Max character length 14 for first content in this case
			this.footerContentButton = new sap.m.Button({
				text : '...',
				press : function(oEvent) {
					self.oActionListPopover.openBy(oEvent.getSource());
				},
				lite : true,
				type : "Transparent"
			});
		}
		this.oActionListPopover.addContent(oControl);
		this.getView().byId("masterFooter").insertContentRight(this.footerContentButton, 1);
	},
	/**
	 *@description Adds content to Detail Footer alignment: Left
	 *@param oContol
	 */
	addDetailFooterContentLeft : function(oControl) {
		this.getView().byId("detailFooter").addContentLeft(oControl);
	},
	/**
	 *@description Adds facetfilter to the layout view
	 *@param facetFilter {object} - UI5 control
	 */
	addFacetFilter : function(facetFilter) {
		this.getView().byId("subHeader").addItem(facetFilter);
	},
	/**
	 *@description Enables or disables OpenIn button depending on whether global and step specific navigation targets are available
	 *If there are no global navigation targets disable OpenIn and if available enable OpenIn
	 *If there are step specific navigation targets in a current active step enable OpenIn
	 *On removal of a step or creation of new path or opening a new path disable/enable OpenIn
	 */
	enableDisableOpenIn : function() {
		var self = this;
		var oNavTargetsPromise = this.oNavigationHandler.getNavigationTargets();
		oNavTargetsPromise.then(function(navTargets) {
			if (self.oCoreApi.getActiveStep()) {//Incase there is an active step
				//Performing both undefined and length check because getAssignedNavigationTargets returns undefined for some old configurations
				var getNavTargetsOfStepLength = function() {
					return self.oCoreApi.getActiveStep().getAssignedNavigationTargets().length === 0 ? 0 : self.oCoreApi.getActiveStep().getAssignedNavigationTargets().length;
				};
				var navTargetsStepLength = self.oCoreApi.getActiveStep().getAssignedNavigationTargets() === undefined ? 0 : getNavTargetsOfStepLength();
				if (navTargetsStepLength !== 0 || navTargets.global.length !== 0) {//When there are either step specific targets for active step or global targets
					self.openInBtn.setEnabled(true);
				} else if (navTargetsStepLength === 0 && navTargets.global.length === 0) {//When neither global nor step specific targets available for active step
					self.openInBtn.setEnabled(false);
				}
			} else {//In case of no active step, check for global targets only
				if (navTargets.global.length === 0) {
					self.openInBtn.setEnabled(false);
				} else {
					self.openInBtn.setEnabled(true);
				}
			}
			self.openInBtn.rerender();//Re rendering the button after enabling or disabling because the control does not reflect these changes
		});
	},
	/**
	 *@description Adds the "Open In..." button to the footer and makes call for the popover
	 */
	addOpenInButton : function() {
		var self = this;
		if (this.oNavListPopover === undefined) {
			this.oNavListPopover = new sap.m.Popover({
				showHeader : false,
				placement : sap.m.PlacementType.Top
			});
		}
		//creates the button and appends it to the footer content
		this.openInBtn = new sap.m.Button({
			text : this.oCoreApi.getTextNotHtmlEncoded("openIn"),
			type : "Transparent",
			enabled : false,
			press : function(oEvent) {
				//call to view for NavigationTarget Action list	only on press of openIn button
				self.oNavTargetsView = sap.ui.view({
					viewName : "sap.apf.ui.reuse.view.navigationTarget",
					type : sap.ui.core.mvc.ViewType.JS,
					viewData : {
						oNavigationHandler : self.oNavigationHandler,
						oNavListPopover : self.oNavListPopover,//Required by navigationTarget.view in order to add the action list content to the pop over
						oOpenInButtonEventSource : oEvent.getSource(),//Required by navigationTarget.view in order to open the pop over after content is added
						oUiApi : self.oUiApi//Required by navigationTarget.view in order to set busy indicator
					}
				});
			}
		});
		this.getView().byId("detailFooter").insertContentRight(this.openInBtn, 1);
		this.enableDisableOpenIn();
	},
	handleNavBack : function(){
		window.history.go(-1); // Navigates back to te previous history set
	}
});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/*global window*/
/**
 **@class messageHandler
 **@name messageHandler 
 **@memberOf sap.apf.ui.reuse.controller
 **@description controller for view.messageHandler
 * 
 */
/**/
sap.ui.controller("sap.apf.ui.reuse.controller.messageHandler", {
	/**
	 **@this {sap.apf.ui.reuse.controller.messageHandler}
	 */
	onInit : function() {
		this.oCoreApi = this.getView().getViewData().oCoreApi;
		this.oUiApi = this.getView().getViewData().uiApi;
	},
	/**
	 **@memberOf sap.apf.ui.reuse.controller.messageHandler
	 **@method showMessage
	 **@param {string} sText Message text
	 **@param {string} severity Message severity
	 **@description  error messages to be shown on notification bar
	 */
	showMessage : function(oMessageObject) {
		var sText = oMessageObject.getMessage();
		var sCode = oMessageObject.getCode();
		var severity = oMessageObject.getSeverity();
		var dateTime = oMessageObject.getTimestampAsdateObject();
		var oMessage = new sap.ui.core.Message({
			text : sText,
			timestamp : dateTime
		});
		var fatal = sap.apf.core.constants.message.severity.fatal;
		var warning = sap.apf.core.constants.message.severity.warning;
		var technError = sap.apf.core.constants.message.severity.technError;
		var error = sap.apf.core.constants.message.severity.error;
		var self = this;
		switch (severity) {
			case fatal:
				oMessage.setLevel(sap.ui.core.MessageType.Error);
				this.oUiApi.getLayoutView().setBusy(false);
				self.showDialog(sText, sCode);
				break;
			case warning:
				oMessage.setLevel(sap.ui.core.MessageType.Warning);
				break;
			case error:
				this.oUiApi.getLayoutView().setBusy(false);
				oMessage.setLevel(sap.ui.core.MessageType.Error);
				break;
			case technError:
				/**Technical Error being logged already from core messageHandler.js */
//				var techText = this.oCoreApi.getTextNotHtmlEncoded("technical-error");
//				var oURLParameters = jQuery.sap.getUriParameters().mParams;
//				var debugMode = oURLParameters["sap-ui-debug"] || [ jQuery.sap.debug().toString() ];
//				if (debugMode !== undefined && debugMode[0] === "true") {
//					jQuery.sap.log.error(techText + sText);
//					jQuery.sap.log.error(oMessageObject.getStack());
//				}
				break;
			default:
				jQuery.sap.log.error("Error type not defined");
				break;
		}
		if (severity === fatal || severity === warning || severity === error) {
			jQuery.sap.require("sap.m.MessageToast");
			sap.m.MessageToast.show(oMessage.getText(), {
				duration : 3000,
				width : "40%",
				my : "center bottom",
				at : "center bottom",
				of : window,
				offset : "0 -50",
				collision : "fit fit",
				onClose : null,
				autoClose : true,
				animationTimingFunction : "ease",
				animationDuration : 2000
			});
		}
	},
	/**
	 **@memberOf sap.apf.ui.reuse.controller.messageHandler
	 **@method showDialog
	 **@param {string} sText Message text
	 **@description  shows dialog for fatal errors
	 */
	showDialog : function(sText) {
		var self = this;
		var buttonText = this.oCoreApi.getTextNotHtmlEncoded("application-logout");
		var dialogTitle = this.oCoreApi.getTextNotHtmlEncoded("fatal-error");
		var aLogMessages = this.oCoreApi.getLogMessages();
		var sessionTimeOut = false;
		var i;
		for(i = 0; i < aLogMessages.length; i++) {
			if (aLogMessages[i].search(5021) !== -1) {
				sessionTimeOut = true;
				break;
			}
		}
		if (sessionTimeOut === true) {
			sText = this.oCoreApi.getTextNotHtmlEncoded("application-reload");
			buttonText = this.oCoreApi.getTextNotHtmlEncoded("reload-button");
			dialogTitle = this.oCoreApi.getTextNotHtmlEncoded("sessionTimeout");
		}
		var sDetailedText;
		for( i = 0; i < aLogMessages.length; i++) {
			if (sDetailedText){
				sDetailedText = sDetailedText + "\n" + aLogMessages[i];
			} else {
				sDetailedText = aLogMessages[i];
			}
		}
		//this uses the ushell function
		var bIsMsgBoxClosed = false;
		self.fnClose = function() {
			bIsMsgBoxClosed = true;
			if(window.location.hash){
				window.location.hash = "";
			}
			
		};
		sap.ca.ui.message.showMessageBox({
			type : sap.ca.ui.message.Type.ERROR,
			message : sText,
			details : sDetailedText
			}, self.fnClose);
	}
});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
/**
 *@class navigationTarget
 *@memberOf sap.apf.ui.reuse.controller
 *@name navigationTarget
 *@description controller for view.navigationTarget
 */
sap.ui.controller("sap.apf.ui.reuse.controller.navigationTarget", {
	
	onInit : function () {
		
		this.oNavigationHandler  = this.getView().getViewData().oNavigationHandler;

	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.navigationTarget
	 *@method handleNavigation  
	 *@param selected Navigation Target 
	 *@description Launches the APF Core API for navigating externally to another application 
	 */
	handleNavigation : function(selectedNavTarget){
		
		this.oNavigationHandler.navigateToApp(selectedNavTarget);
	}
});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 *@class pathGallery
 *@name pathGallery
 *@memberOf sap.apf.ui.reuse.controller
 *@description controller of view.pathGallery
 */
sap.ui.controller("sap.apf.ui.reuse.controller.pathGallery", {
	/**
	 *@this {sap.apf.ui.reuse.controller.pathGallery}
	 */
	onInit : function() {
		this.oCoreApi = this.getView().getViewData().oInject.oCoreApi;
		this.oUiApi = this.getView().getViewData().oInject.uiApi;
		this.oSerializationMediator = this.getView().getViewData().oInject.oSerializationMediator;
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.pathGallery
	*@method openPathGallery
	*@description opens the path gallery with list of all saved paths
	*/
	openPathGallery : function() {
		if (this.oHierchicalPathGalleryDialog) {
			this.oHierchicalPathGalleryDialog.destroy();
		}
		this.oHierchicalPathGalleryDialog = new sap.ui.jsfragment("sap.apf.ui.reuse.fragment.pathGallery", this);
		var oModel = new sap.ui.model.json.JSONModel();
		var jsonData = this.getPathGalleryData();
		oModel.setData(jsonData);
		this.oHierchicalPathGalleryDialog.setModel(oModel);
		this.oHierchicalPathGalleryDialog.open();
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.pathGallery
	*@method getPathGalleryData
	*@description Gets data for building the path gallery
	*/
	getPathGalleryData : function() {
		var self = this;
		var jsonData = this.getView().getViewData() ? this.getView().getViewData().jsonData : {};
		//Get the application Configuration data
		var fetchConfigData = function() {
			var configData = {
				"steps" : self.oCoreApi.getStepTemplates()
			};
			return configData;
		};
		//Inject Image and Title in json data
		if (jsonData.GalleryElements.length !== 0) {
			var savedPaths = jsonData.GalleryElements;
			var configData = fetchConfigData();
			var i, j, k, index;
			for(i = 0; i < savedPaths.length; i++) {
				for(j = 0; j < savedPaths[i].StructuredAnalysisPath.steps.length; j++) {
					for(k = 0; k < configData.steps.length; k++) {
						var stepId = savedPaths[i].StructuredAnalysisPath.steps[j].stepId;
						var selectedRepresentationId = savedPaths[i].StructuredAnalysisPath.steps[j].selectedRepresentationId;
						if (stepId === configData.steps[k].id) {
							for(index in configData.steps[k].getRepresentationInfo()) {
								if (selectedRepresentationId === configData.steps[k].getRepresentationInfo()[index].representationId) {
									jsonData.GalleryElements[i].StructuredAnalysisPath.steps[j].imgSrc = configData.steps[k].getRepresentationInfo()[index].picture;
									jsonData.GalleryElements[i].StructuredAnalysisPath.steps[j].title = self.oCoreApi.getTextNotHtmlEncoded(configData.steps[k].title.key);
								}
							}
						}
					}
				}
			}
		}
		return jsonData;
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.pathGallery
	 *@method openPath
	 *@description opens a saved analysis path
	 *@param Takes analysis path name, guid and step which has been clicked as parameters
	 */
	openPath : function(pathName, guid, activeStepindex) {
		var self = this;
		var oMessageObject;
		var carousel = self.oUiApi.getAnalysisPath().getCarousel();
		this.oUiApi.getAnalysisPath().getCarousel().oController.removeAllSteps();
		self.oSerializationMediator.openPath(guid, (function(self) {
			return function(oResponse, oEntityTypeMetadata, msgObj) {
				if (msgObj === undefined && (typeof oResponse === "object")) {
					self.oUiApi.getAnalysisPath().getController().isOpenPath = true;
					self.oUiApi.contextChanged();
					//					self.oUiApi.getLayoutView().getController().setFilter(oResponse.path.SerializedAnalysisPath.context);
					self.oUiApi.getAnalysisPath().getController().refresh(-1);
					self.oCoreApi.updatePath(self.oUiApi.getAnalysisPath().getController().callBackForUpdatePath.bind(self.oUiApi.getAnalysisPath().getController()));
					self.oUiApi.getAnalysisPath().oSavedPathName.setTitle(pathName);
					self.oUiApi.getAnalysisPath().getController().bIsDirtyState = false;
					if (self.oHierchicalPathGalleryDialog !== undefined) {
						self.oHierchicalPathGalleryDialog.close();
					}
					carousel.rerender();
					self.oUiApi.getLayoutView().setBusy(false);
				} else {
					oMessageObject = self.oCoreApi.createMessageObject({
						code : "6008",
						aParameters : [ pathName ]
					});
					oMessageObject.setPrevious(msgObj);
					self.oUiApi.getLayoutView().setBusy(false);
					self.oCoreApi.putMessage(oMessageObject);
				}
			};
		}(this)), activeStepindex);
	}
});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 *@class step
 *@name step
 *@memberOf sap.apf.ui.reuse.controller
 *@description handle actions possible over step (example: drag and drop , delete, set Active etc)
 *             
 */
sap.ui.controller("sap.apf.ui.reuse.controller.step", {
	/**
	 *@memberOf sap.apf.ui.reuse.controller.step
	 *@method setActiveStep
	 *@param {number} index  of step to be set as active
	 *@description set step as active with given index
	 */
	setActiveStep : function(sIndex) {
		var oldActiveStep = this.oCoreApi.getActiveStep();
		var oldActiveStepIndex = this.oCoreApi.getSteps().indexOf(oldActiveStep);
		if (oldActiveStepIndex === sIndex) {
			return;
		}
		var activeStep = this.oCoreApi.getSteps()[sIndex];
		this.oCoreApi.setActiveStep(activeStep);
		this.oUiApi.getAnalysisPath().getController().drawMainChart();
		var stepView = this.oUiApi.getAnalysisPath().getCarousel().stepViews[sIndex];
		stepView.toggleActiveStep();
	},
	bindEvts : function() {
		var self = this;
		var oCarousel = this.oUiApi.getAnalysisPath().getCarousel();
		var stepLayout = this.getView().oVChartTiltleLayout;
		stepLayout.attachBrowserEvent('click', function() {
			var stepIndex = oCarousel.stepViews.indexOf(self.getView());
			self.setActiveStep(stepIndex);
			self.oUiApi.getLayoutView().getController().enableDisableOpenIn(); //Enable/disable open in based on step specific targets
		});
	},
	onAfterRendering : function() {
		this.bindEvts();
		this.oUiApi.getLayoutView().getController().enableDisableOpenIn(); //Enable/disable open in based on step specific targets
	},
	/*getActiveStepIndex : function() {
		var oCarousel = this.oUiApi.getAnalysisPath().getCarousel().getController();
		return oCarousel.getActiveStepIndex();
	},*///Deprecated
	/**
	 *@memberOf sap.apf.ui.reuse.controller.step
	 *@method showLoading
	 *@description show busy indicator
	 */
	/*showLoading : function() {
		var oView = this.getView();
		oView.oThumbnailChartLayout.removeAllContent();
		oView.oThumbnailChartLayout.setBusy(true);
		oView.bRefreshing = true;
	},*///Deprecated
	onInit : function() {
		this.oCoreApi = this.getView().getViewData().oCoreApi;
		this.oUiApi = this.getView().getViewData().uiApi;
		this.isSwitched = false;
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.step
	 *@method  showChart
	 *@param {boolean} bDrawThumbnail boolean to decide whether to redraw the thumbnail in case of any changes
	 *@description display thumbnail for the step
	 */
	drawThumbnailContent : function(bDrawThumbnail) {
		var oView = this.getView();
		var sIndex = this.oUiApi.getAnalysisPath().getCarousel().stepViews.indexOf(oView);
		if (this.representationInstance !== undefined) {
			if (this.representationInstance !== this.oCoreApi.getSteps()[sIndex].getSelectedRepresentation().type) {
				this.isSwitched = true;
			}
		}
		this.representationInstance = this.oCoreApi.getSteps()[sIndex].getSelectedRepresentation().type;
		if (this.oCoreApi.getSteps()[sIndex].getSelectedRepresentation().toggleInstance !== undefined) {
			this.bToggleInstanceExists = true;
		}
		if (this.isSwitched === true || bDrawThumbnail === undefined || bDrawThumbnail === true || this.bToggleInstanceExists === true) {
			this.isSwitched = false;
			oView.oThumbnailChartLayout.removeAllItems();
			var oStep = this.oCoreApi.getSteps()[sIndex];
			var oChart;
			if (oStep.getSelectedRepresentation().bIsAlternateView) {
				if (oStep.getSelectedRepresentation().toggleInstance !== undefined) {
					var data = oStep.getSelectedRepresentation().getData();
					var metadata = oStep.getSelectedRepresentation().getMetaData();
					oStep.getSelectedRepresentation().toggleInstance.setData(data, metadata);
					oChart = oStep.getSelectedRepresentation().toggleInstance.getThumbnailContent();
				} else {
					oStep.getSelectedRepresentation().toggleInstance = this.oUiApi.getStepContainer().getController().createAlternateRepresentation(sIndex);
					oChart = oStep.getSelectedRepresentation().toggleInstance.getThumbnailContent();
				}
			} else {
				oChart = oStep.getSelectedRepresentation().getThumbnailContent();
			}
			var overLayThumbnailWrapper = new sap.m.VBox({}).addStyleClass("overlayThumbnailWrapper");
			oView.oThumbnailChartLayout.addItem(oChart);
			oView.oThumbnailChartLayout.addItem(overLayThumbnailWrapper);
			var oCarouselController = this.oUiApi.getAnalysisPath().getCarousel().getController();
			var oThumbnailDataset = oCarouselController.getThumbnailDataset(oStep);
			oView.getModel().getData().thumbnail = oThumbnailDataset;
			oView.getModel().updateBindings();
			oView.oThumbnailChartLayout.rerender();
			oView.oThumbnailChartLayout.setBusy(false);
		} else {
			oView.oThumbnailChartLayout.setBusy(false);
		}
	}
});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/* global window, clearTimeout, setTimeout */
/**
 *@class stepContainer
 *@name  stepContainer
 *@memberOf sap.apf.ui.reuse.controller
 *@description controller of view.stepContainer
 */
sap.ui.controller("sap.apf.ui.reuse.controller.stepContainer", {
	/**
	 *@this {sap.apf.ui.reuse.controller.stepContainer}
	 */
	onInit : function() {
		this.oCoreApi = this.getView().getViewData().oCoreApi;
		this.oUiApi = this.getView().getViewData().uiApi;
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.stepContainer
	 *@method drawSelectionContainer
	 *@description returns the selection label and count
	 */
	drawSelectionContainer : function() {
		this.getView().getStepToolbar().getController().showSelectionCount();
	},
	resizeContent : function() {
		if (this.oCoreApi.getActiveStep()) { //If Active Step Exists
			//Set Scroll Position to first Visible Row for table representation
			if (this.oCoreApi.getActiveStep().getSelectedRepresentation().type === sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION) {
				//var representation = this.oCoreApi.getActiveStep().getSelectedRepresentation();
				this.drawStepContent();
				var scrollContainerHeight = ((window.innerHeight - jQuery('.tableWithoutHeaders').offset().top) - 20) + "px";
				jQuery('.tableWithoutHeaders').css({
					"height" : scrollContainerHeight
				});
			} else {
				this.drawStepContent();
			}
		}
	},
	onAfterRendering : function() {
		var self = this;
		var timeoutResize;
		jQuery(window).resize(function() {
			clearTimeout(timeoutResize);
			timeoutResize = setTimeout(function() {
				self.resizeContent();
			}, 500);
		});
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.stepContainer
	 *@method getCurrentRepresentation
	 *@description returns the representation instance
	 */
	getCurrentRepresentation : function() {
		return this.representationInstance;
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.stepContainer
	 *@method drawRepresentation
	 *@description returns the representation, sets the title and calculates the height of representation before rendering
	 */
	drawRepresentation : function() {
		var self = this;
		var oActiveStep = this.oCoreApi.getActiveStep();
		if (oActiveStep.getSelectedRepresentation().bIsAlternateView === undefined || oActiveStep.getSelectedRepresentation().bIsAlternateView === false) {
			this.representationInstance = oActiveStep.getSelectedRepresentation();
		} else {
			this.representationInstance = oActiveStep.getSelectedRepresentation().toggleInstance;
			var data = oActiveStep.getSelectedRepresentation().getData(), metadata = oActiveStep.getSelectedRepresentation().getMetaData();
			this.representationInstance.setData(data, metadata);
		}
		var oLongTitle = oActiveStep.longTitle && !this.oCoreApi.isInitialTextKey(oActiveStep.longTitle.key) ? oActiveStep.longTitle : undefined;
		var oTitle = oLongTitle || oActiveStep.title;
		var oStepTitle = this.oCoreApi.getTextNotHtmlEncoded(oTitle);
		//		var stepTitle = new sap.m.Label({
		//			text : oStepTitle,
		//			design : "Bold"
		//		}).addStyleClass("sapApfDetailTitle");
		var content = this.representationInstance.getMainContent(oStepTitle);
		var chartToolbarID = this.getView().getStepToolbar().chartToolbar.getId();
		this.setHeightAndWidth = function() {
			var toolbarHeight;
			var toolbarWidth;
			if (jQuery("#" + chartToolbarID).length !== 0) {
				toolbarHeight = jQuery("#" + chartToolbarID + " > div:first-child > div:nth-child(2)").offset().top;
				toolbarWidth = jQuery("#" + chartToolbarID + " > div:first-child > div:nth-child(2)").width();
			} else {
				toolbarHeight = "0";
				toolbarWidth = jQuery(window).width();
			}
			var cHeight = self.getView().getStepToolbar().chartToolbar.getFullScreen() ? (jQuery(window).height() - toolbarHeight) : (jQuery(window).height() - toolbarHeight) - jQuery(".applicationFooter").height();
			var cWidth = toolbarWidth;
			if (self.oCoreApi.getActiveStep().getSelectedRepresentation().bIsAlternateView || self.oCoreApi.getActiveStep().getSelectedRepresentation().type === sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION) {
				content.getContent()[0].setHeight((cHeight - 5) + "px");
				content.getContent()[0].setWidth(cWidth + "px");
			} else if (self.oCoreApi.getActiveStep().getSelectedRepresentation().type === sap.apf.ui.utils.CONSTANTS.representationTypes.GEO_MAP) {
				var div = (jQuery(content.getContent())[0]);
				div.style.height = cHeight + "px";
				div.style.width = cWidth + "px";
				content.setContent(div.outerHTML);
			} else {
				content.setHeight(cHeight + "px");
				content.setWidth(cWidth + "px");
			}
		};
		//Undefined methods Viz Charts 		
		content.getIcon = function() {
			return;
		};
		content.getLabel = function() {
			return;
		};
		this.fnSetHeightAndWidth = {
			onBeforeRendering : function() {
				self.setHeightAndWidth();
			}
		};
		content.addEventDelegate(this.fnSetHeightAndWidth);
		//this.getView().getRepresentationContainer().getController().drawRepresentation(content);
		this.getView().getStepToolbar().getController().drawRepresentation(content);
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.stepContainer
	 *@method createAlternateRepresentation
	 *@description creates the alternate representation from chart and returns the main content
	 */
	createAlternateRepresentation : function(sIndex) {
		var self = this;
		var addAdditionalFields = function(param) {
			var dimensions = param.dimensions;
			var metadata = self.oCoreApi.getSteps()[sIndex].getSelectedRepresentation().getMetaData();
			if (metadata === undefined) {
				return param;
			}
			var i;
			for(i = 0; i < dimensions.length; i++) {
				var bSapTextExists = metadata.getPropertyMetadata(dimensions[i].fieldName).hasOwnProperty('text');
				if (bSapTextExists) {
					var newField = {};
					newField.fieldName = metadata.getPropertyMetadata(dimensions[i].fieldName).text;
					param.dimensions.push(newField);
				}
			}
			param.isAlternateRepresentation = true;
			return param;
		};
		var oActiveStep = self.oCoreApi.getSteps()[sIndex];
		var currentRepresentation = oActiveStep.getSelectedRepresentation();
		var parameter = jQuery.extend(true, {}, currentRepresentation.getParameter());
		delete parameter.alternateRepresentationTypeId;
		delete parameter.alternateRepresentationType;
		parameter = addAdditionalFields(parameter);
		// Using the APF Core method to create alternate representation instance
		this.newToggleInstance = this.oCoreApi.createRepresentation(currentRepresentation.getParameter().alternateRepresentationType.constructor, parameter);
		var data = currentRepresentation.getData();
		var metadata = currentRepresentation.getMetaData();
		if (data !== undefined && metadata !== undefined) { //Done in order to match the setData invocation through APFCore in case of switch representation
			this.newToggleInstance.setData(data, metadata);
		}
		this.newToggleInstance.adoptSelection(currentRepresentation);
		return this.newToggleInstance;
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.stepContainer
	 *@method isActiveStepChanged
	 *@description Decides whether the active Step is drawn on the main content or not.
	 */
	isActiveStepChanged : function() {
		var bActiveStepChange;
		if (this.currentActiveStepIndex === undefined) {
			this.currentActiveStepIndex = this.oCoreApi.getSteps().indexOf(this.oCoreApi.getActiveStep());
			bActiveStepChange = true;
		} else if (this.currentActiveStepIndex !== this.oCoreApi.getSteps().indexOf(this.oCoreApi.getActiveStep())) {
			this.currentActiveStepIndex = this.oCoreApi.getSteps().indexOf(this.oCoreApi.getActiveStep());
			bActiveStepChange = true;
		} else {
			bActiveStepChange = false;
		}
		return bActiveStepChange;
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.stepContainer
	 *@method isSelectedRepresentationChanged
	 *@description Decides whether the active Step's selected representation has changed or not.
	 */
	isSelectedRepresentationChanged : function() {
		var bSelectedRepresentationChange;
		if (this.currentSelectedRepresentationId === undefined || this.currentSelectedRepresentationId === null) {
			this.currentSelectedRepresentationId = this.oCoreApi.getActiveStep().getSelectedRepresentationInfo().representationId;
			bSelectedRepresentationChange = true;
		} else if (this.currentSelectedRepresentationId !== this.oCoreApi.getActiveStep().getSelectedRepresentationInfo().representationId) {
			this.currentSelectedRepresentationId = this.oCoreApi.getActiveStep().getSelectedRepresentationInfo().representationId;
			bSelectedRepresentationChange = true;
		} else if (this.getCurrentRepresentation().type !== this.oCoreApi.getActiveStep().getSelectedRepresentation().type) {
			this.currentSelectedRepresentationId = this.oCoreApi.getActiveStep().getSelectedRepresentationInfo().representationId;
			bSelectedRepresentationChange = true;
		} else {
			bSelectedRepresentationChange = false;
		}
		return bSelectedRepresentationChange;
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.stepContainer
	 *@method drawStepContent
	 *@description Draws the main content of the chart
	 */
	drawStepContent : function(bDrawRepresentation) {
		var nActiveStepIndex = this.oCoreApi.getSteps().indexOf(this.oCoreApi.getActiveStep());
		var bThumbnailRefreshing = this.oUiApi.getAnalysisPath().getCarousel().getStepView(nActiveStepIndex).oThumbnailChartLayout.isBusy();
		var isOpenPath = this.oUiApi.getAnalysisPath().getController().isOpenPath;
		var isNewPath = this.oUiApi.getAnalysisPath().getController().isNewPath;
		if (bThumbnailRefreshing) {
			this.getView().vLayout.setBusy(true);
			return;
		}
		var bActiveStepChange = this.isActiveStepChanged();
		var bSelectedRepresentationChange = this.isSelectedRepresentationChanged();
		var bRedrawRepresentation = (bDrawRepresentation === undefined || bDrawRepresentation === true);
		if (bRedrawRepresentation || bActiveStepChange || bSelectedRepresentationChange || isOpenPath || isNewPath) {
			this.drawRepresentation();
		} else {
			if (this.oCoreApi.getSteps().length >= 1) {
				this.drawSelectionContainer();
			}
		}
		if (this.getView().vLayout.isBusy()) {
			this.getView().vLayout.removeAllContent();
			this.getView().vLayout.addContent(this.getView().stepLayout);
			this.getView().vLayout.setBusy(false);
		}
		this.getView().vLayout.setBusy(false);
	}
});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
*@class toolbar
*@name toolbar
*@memberOf sap.apf.ui.reuse.controller
*@description controller for view.toolbar
*/
/* globals window, setTimeout, input */
sap.ui.controller("sap.apf.ui.reuse.controller.toolbar", {
	/**
	*@this {sap.apf.ui.reuse.controller.toolbar}
	*/
	/**
	*@memberOf sap.apf.ui.reuse.controller.toolbar
	*@method resetAnalysisPath
	*@description Refresh carousel on new Analysis path 
	 */
	resetAnalysisPath : function() {
		this.oUiApi.getAnalysisPath().getCarousel().getController().removeAllSteps();
		this.oCoreApi.resetPath();
		this.oUiApi.getAnalysisPath().getController().isNewPath = true;
		this.oStartFilterHandler.resetAll(); //Reset method available on startFilterHandler
		this.oUiApi.contextChanged(true);
		//		this.oUiApi.getLayoutView().getController().setFilter();
		this.oUiApi.getAnalysisPath().getController().refreshAnalysisPath();
		this.oUiApi.getAnalysisPath().oSavedPathName.setTitle(this.oCoreApi.getTextNotHtmlEncoded("unsaved"));
		this.oUiApi.getAnalysisPath().getController().bIsDirtyState = false;
		this.oUiApi.getAnalysisPath().getCarousel().rerender();
	},
	onInit : function() {
		this.view = this.getView();
		this.oViewData = this.getView().getViewData();
		this.oCoreApi = this.oViewData.oCoreApi;
		this.oSerializationMediator = this.oViewData.oSerializationMediator;
		this.oUiApi = this.oViewData.uiApi;
		this.oStartFilterHandler = this.oViewData.oStartFilterHandler;
		this.oPrintHelper = new sap.apf.ui.utils.PrintHelper(this.oViewData);
		this.bIsPathGalleryWithDelete = false;
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.toolbar
	*@method open dialog for showing saved paths with delete mode
	*@description Opens an overlay which holds saved analysis Paths
	*@see sap.apf.ui.view.deleteAnalysisPath
	*/
	openPathGalleryWithDelete : function() {
		var jsonData = {};
		var self = this;
		var oMessageObject;
		var i;
		self.oCoreApi.readPaths(function(data, metaData, msgObj) {
			if (msgObj === undefined && (typeof data === "object")) {
				var galleryData = data.paths;
				for(i = 0; i < galleryData.length; i++) {
					var noOfSteps = galleryData[i].StructuredAnalysisPath.steps.length;
					var utcDate = galleryData[i].LastChangeUTCDateTime;
					var numberPattern = /\d+/g;
					var timeStamp = parseInt(utcDate.match(numberPattern)[0], 10);
					var date = ((new Date(timeStamp)).toString()).split(' ');
					var dateToShow = date[1] + "-" + date[2] + "-" + date[3];
					galleryData[i].guid = galleryData[i].AnalysisPath;
					galleryData[i].StructuredAnalysisPath.noOfSteps = noOfSteps;
					galleryData[i].description = dateToShow + "  -   (" + self.oCoreApi.getTextNotHtmlEncoded("no-of-steps", [ noOfSteps ]) + ")";
					galleryData[i].summary = galleryData[i].AnalysisPathName + "- (" + dateToShow + ") - (" + self.oCoreApi.getTextNotHtmlEncoded("no-of-steps", [ noOfSteps ]) + ")";
				}
				jsonData = {
					GalleryElements : galleryData
				};
				if (!self.deleteAnalysisPath) {
					self.deleteAnalysisPath = new sap.ui.view({
						type : sap.ui.core.mvc.ViewType.JS,
						viewName : "sap.apf.ui.reuse.view.deleteAnalysisPath",
						viewData : {
							jsonData : jsonData,
							oInject : self.oViewData
						}
					});
				}
				var deleteStdDialog = self.deleteAnalysisPath.getController().stdDialog;
				if ((!deleteStdDialog) || (deleteStdDialog && !deleteStdDialog.isOpen())) {
					self.deleteAnalysisPath.getController().openPathGalleryWithDelete();
				}
				self.oUiApi.getLayoutView().setBusy(false);
			} else {
				oMessageObject = self.oCoreApi.createMessageObject({
					code : "6005",
					aParameters : []
				});
				oMessageObject.setPrevious(msgObj);
				self.oCoreApi.putMessage(oMessageObject);
				self.oUiApi.getLayoutView().setBusy(false);
			}
		});
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.toolbar
	*@method open dialog for showing saved paths
	*@description Opens an overlay which holds saved analysis Paths
	*@see sap.apf.ui.view.pathGallery
	*/
	openPathGallery : function() {
		var jsonData = {};
		var self = this;
		var i, oMessageObject;
		self.oCoreApi.readPaths(function(data, metaData, msgObj) {
			if (msgObj === undefined && (typeof data === "object")) {
				var galleryData = data.paths;
				for(i = 0; i < galleryData.length; i++) {
					var noOfSteps = galleryData[i].StructuredAnalysisPath.steps.length;
					var utcDate = galleryData[i].LastChangeUTCDateTime;
					var numberPattern = /\d+/g;
					var timeStamp = parseInt(utcDate.match(numberPattern)[0], 10);
					var date = ((new Date(timeStamp)).toString()).split(' ');
					var dateToShow = date[1] + "-" + date[2] + "-" + date[3];
					galleryData[i].title = galleryData[i].AnalysisPathName;
					galleryData[i].guid = galleryData[i].AnalysisPath;
					galleryData[i].StructuredAnalysisPath.noOfSteps = noOfSteps;
					galleryData[i].description = dateToShow + "  -   (" + self.oCoreApi.getTextNotHtmlEncoded("no-of-steps", [ noOfSteps ]) + ")";
					galleryData[i].summary = galleryData[i].AnalysisPathName + "- (" + dateToShow + ") - (" + self.oCoreApi.getTextNotHtmlEncoded("no-of-steps", [ noOfSteps ]) + ")";
				}
				jsonData = {
					GalleryElements : galleryData
				};
				if (!self.pathGallery) {
					self.pathGallery = new sap.ui.view({
						type : sap.ui.core.mvc.ViewType.JS,
						viewName : "sap.apf.ui.reuse.view.pathGallery",
						viewData : {
							jsonData : jsonData,
							oInject : self.oViewData
						}
					});
				}
				var pathGalleryDialog = self.pathGallery.getController().oHierchicalPathGalleryDialog;
				if ((!pathGalleryDialog) || (pathGalleryDialog && !pathGalleryDialog.isOpen())) {
					self.pathGallery.getController().openPathGallery();
				}
				self.oUiApi.getLayoutView().setBusy(false);
			} else {
				oMessageObject = self.oCoreApi.createMessageObject({
					code : "6005",
					aParameters : []
				});
				oMessageObject.setPrevious(msgObj);
				self.oCoreApi.putMessage(oMessageObject);
				self.oUiApi.getLayoutView().setBusy(false);
			}
		});
	},
	doPrint : function() {
		var oPrint = this.oPrintHelper;
		oPrint.doPrint();
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.toolbar
	*@method getSaveDialog
	*@description Getter for save dialog. Opens a new dialog for saving analysis Path
	*@param {object} reset callback for save 
	 */
	getSaveDialog : function(bSaveAs, reset, aPath) {
		var self = this;
		var hintText = this.oCoreApi.getTextNotHtmlEncoded("saveName");
		var savedAPNameExist = this.oUiApi.getAnalysisPath().oSavedPathName.getTitle();
		var oModelPath = new sap.ui.model.json.JSONModel();
		oModelPath.setData(aPath);
		if (savedAPNameExist) {
			var firstChar = savedAPNameExist.charAt(0);
			if (firstChar === "*") {
				savedAPNameExist = savedAPNameExist.split('*')[1];
			}
		}
		this.oInput = new sap.m.Input({
			type : sap.m.InputType.Text,
			placeholder : hintText,
			showSuggestion : true,
			suggestionItems : {
				path : "/",
				template : new sap.ui.core.Item({
					text : "{AnalysisPathName}",
					additionalText : "{AnalysisPath}"
				}),
				showValueHelp : true,
				valueHelpRequest : function(evt) {
					var handleClose = function(evt) {
						var oSelectedItem = evt.getParameter("selectedItem");
						if (oSelectedItem) {
							input.setValue(oSelectedItem.getTitle());
						}
						evt.getSource().getBinding("items").filter([]);
					};
				}
			}
		}).addStyleClass("saveStyle");
		this.oInput.setModel(oModelPath);
		//destroy the input assisted items
		if (!bSaveAs) {
			this.oInput.destroySuggestionItems();
		}
		this.oInput.attachEvent("click", function(oEvent) {
			jQuery(oEvent.currentTarget).attr('value', '');
		});
		//Save input field validation
		this.oInput.attachLiveChange(function(data) {
			var val = this.getValue();
			var dialog = self.saveDialog;
			var regEx = new RegExp("[*]", "g");
			if (val === "") {
				dialog.getBeginButton().setEnabled(false);
			}
			if ((val.match(regEx) !== null)) {
				dialog.getBeginButton().setEnabled(false);
				dialog.setSubHeader(new sap.m.Bar({
					contentMiddle : new sap.m.Text({
						text : this.oCoreApi.getTextNotHtmlEncoded('invalid-entry')
					})
				}));
				this.setValueState(sap.ui.core.ValueState.Error);
				return false;
			} else {
				dialog.getBeginButton().setEnabled(true);
				dialog.destroySubHeader();
				this.setValueState(sap.ui.core.ValueState.None);
			}
			if (val.trim() !== "") {
				dialog.getBeginButton().setEnabled(true);
				dialog.destroySubHeader();
			} else {
				dialog.getBeginButton().setEnabled(false);
				dialog.setSubHeader(new sap.m.Bar({
					contentMiddle : new sap.m.Text({
						text : self.oCoreApi.getTextNotHtmlEncoded('enter-valid-path-name')
					})
				}));
			}
		});
		//setting existing path name in input field
		if (savedAPNameExist !== (self.oCoreApi.getTextNotHtmlEncoded("unsaved"))) {
			this.oInput.setValue(savedAPNameExist);
		}
		this.analysisPathName = (self.oInput.getValue()).trim();
		if (!self.saveDialog) {
			this.saveDialog = new sap.m.Dialog({
				type : sap.m.DialogType.Standard,
				title : self.oCoreApi.getTextNotHtmlEncoded("save-analysis-path"),
				beginButton : new sap.m.Button({
					text : self.oCoreApi.getTextNotHtmlEncoded("ok"),
					enabled : false,
					press : function() {
						self.saveDialog.getBeginButton().setEnabled(false);
						self.saveDialog.getEndButton().setEnabled(false);
						var analysisPathName = (self.oInput.getValue()).trim();
						self.saveAnalysisPath(analysisPathName, reset, bSaveAs);
					}
				}),
				endButton : new sap.m.Button({
					text : self.oCoreApi.getTextNotHtmlEncoded("cancel"),
					press : function() {
						self.saveDialog.close();
					}
				}),
				afterClose : function() {
					self.oUiApi.getLayoutView().setBusy(false);
					this.destroy();
					self.saveDialog = null;
				}
			});
			this.saveDialog.addContent(this.oInput);
			// conditional opening of save dialog(save/saveAs)
			if (this.oInput.getValue() === savedAPNameExist) {
				this.saveDialog.getBeginButton().setEnabled(true);
			}
		}
		//open only if steps are present in the path
		if (self.oCoreApi.getSteps().length >= 1) {
			if (!bSaveAs && savedAPNameExist === (self.oCoreApi.getTextNotHtmlEncoded("unsaved"))) {
				if (!self.saveDialog || (self.saveDialog && !self.saveDialog.isOpen()))
				this.saveDialog.open();
			} else if (bSaveAs) {
				if (!self.saveDialog || (self.saveDialog && !self.saveDialog.isOpen()))
				this.saveDialog.open();
			} else {
				self.saveAnalysisPath(savedAPNameExist, reset, bSaveAs);
			}
		}
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.toolbar
	*@method doOkOnNewAnalysisPath
	*@description Executes operations on click of "Ok" button of New Analysis Path dialog
	*/
	doOkOnNewAnalysisPath : function() {
		var self = this;
		this.isOpen = false;
		self.oCoreApi.readPaths(function(respObj, metaData, msgObj) {
			var bSaveAs = true;
			var paths = respObj.paths;
			if (metaData !== undefined) {
				self.getView().maxNumberOfSteps = metaData.getEntityTypeMetadata().maximumNumberOfSteps;
				self.getView().maxNumberOfPaths = metaData.getEntityTypeMetadata().maxOccurs;
			}
			if (msgObj === undefined && (typeof respObj === "object")) {
				self.getSaveDialog(bSaveAs, function() {
					self.resetAnalysisPath();
					//					sap.apf.ui.createApplicationLayout();
				}, paths);
			} else {
				var oMessageObject = self.oCoreApi.createMessageObject({
					code : "6005",
					aParameters : []
				});
				oMessageObject.setPrevious(msgObj);
				self.oCoreApi.putMessage(oMessageObject);
			}
		});
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.toolbar
	*@method doOkOnOpenAnalysisPath
	*@description Executes operations on click of "Ok" btton of Open Analysis Path dialog
	*/
	doOkOnOpenAnalysisPath : function(bIsPathGalleryWithDelete) {
		var self = this;
		this.isOpen = true;
		this.bIsPathGalleryWithDelete = bIsPathGalleryWithDelete;
		self.oCoreApi.readPaths(function(respObj, metaData, msgObj) {
			var bSaveAs = true;
			var paths = respObj.paths;
			if (metaData !== undefined) {
				self.getView().maxNumberOfSteps = metaData.getEntityTypeMetadata().maximumNumberOfSteps;
				self.getView().maxNumberOfPaths = metaData.getEntityTypeMetadata().maxOccurs;
			}
			if (msgObj === undefined && (typeof respObj === "object")) {
				self.getSaveDialog(bSaveAs, function() {
					return;
				}, paths);
			} else {
				var oMessageObject = self.oCoreApi.createMessageObject({
					code : "6005",
					aParameters : []
				});
				oMessageObject.setPrevious(msgObj);
				self.oCoreApi.putMessage(oMessageObject);
			}
		});
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.toolbar
	*@method getNewAnalysisPathDialog
	*@description Getter for New Analysis Path dialog 
	 */
	getNewAnalysisPathDialog : function() {
		var self = this;
		if (self.oUiApi.getAnalysisPath().oSavedPathName.getTitle().slice(0, 1) === "*" && self.oCoreApi.getSteps().length !== 0) {
			var newDialog = new sap.m.Dialog({
				type : sap.m.DialogType.Standard,
				title : self.oCoreApi.getTextNotHtmlEncoded("newPath"),
				content : new sap.m.Text({
					text : self.oCoreApi.getTextNotHtmlEncoded("analysis-path-not-saved")
				}).addStyleClass("textStyle"),
				beginButton : new sap.m.Button({
					text : self.oCoreApi.getTextNotHtmlEncoded("yes"),
					press : function() {
						self.doOkOnNewAnalysisPath();
						newDialog.close();
					}
				}),
				endButton : new sap.m.Button({
					text : self.oCoreApi.getTextNotHtmlEncoded("no"),
					press : function() {
						self.resetAnalysisPath();
						newDialog.close();
					}
				}),
				afterClose : function() {
					self.oUiApi.getLayoutView().setBusy(false);
					this.destroy();
				}
			});
			newDialog.open();
		} else {
			this.resetAnalysisPath();
		}
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.toolbar
	*@method getOpenDialog
	*@description Getter for New Analysis Path dialog
	*/
	getOpenDialog : function(bIsPathGalleryWithDelete) {
		var self = this;
		var dialog = new sap.m.Dialog({
			type : sap.m.DialogType.Standard,
			title : self.oCoreApi.getTextNotHtmlEncoded("newPath"),
			content : new sap.m.Text({
				text : self.oCoreApi.getTextNotHtmlEncoded("analysis-path-not-saved")
			}).addStyleClass("textStyle"),
			beginButton : new sap.m.Button({
				text : self.oCoreApi.getTextNotHtmlEncoded("yes"),
				press : function() {
					self.doOkOnOpenAnalysisPath(self.bIsPathGalleryWithDelete);
					dialog.close();
				}
			}),
			endButton : new sap.m.Button({
				text : self.oCoreApi.getTextNotHtmlEncoded("no"),
				press : function() {
					self.resetAnalysisPath();
					if (self.bIsPathGalleryWithDelete) {
						self.openPathGalleryWithDelete();
					} else {
						self.openPathGallery();
					}
					dialog.close();
				}
			}),
			afterClose : function() {
				self.oUiApi.getLayoutView().setBusy(false);
				this.destroy();
			}
		});
		dialog.open();
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.toolbar
	*@method getConfirmDelDialog
	*@description confirm dialog before deleting path
	*@param {object} sectionDom Returns to DOM object on which the delete is called 
	 */
	getConfirmDelDialog : function(oListInfo) {
		var self = this;
		var pathName = oListInfo.sPathName;
		var dialog = new sap.m.Dialog({
			type : sap.m.DialogType.Standard,
			title : self.oCoreApi.getTextNotHtmlEncoded("delPath"),
			content : new sap.m.Text({
				text : self.oCoreApi.getTextNotHtmlEncoded("do-you-want-to-delete-analysis-path") + " '" + pathName + "'?"
			}).addStyleClass("textStyle"),
			beginButton : new sap.m.Button({
				text : self.oCoreApi.getTextNotHtmlEncoded("yes"),
				press : function() {
					self.oUiApi.getAnalysisPath().getPathGalleryWithDeleteMode().getController().deleteSavedPath(pathName, oListInfo);
					dialog.close();
				}
			}),
			endButton : new sap.m.Button({
				text : self.oCoreApi.getTextNotHtmlEncoded("no"),
				press : function() {
					dialog.close();
				}
			}),
			afterClose : function() {
				self.oUiApi.getLayoutView().setBusy(false);
				this.destroy();
			}
		});
		dialog.open();
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.toolbar
	*@method getConfirmDelDialog
	*@description confirm dialog before overwriting path
	*/
	getConfirmDialog : function(oParam) {
		var self = this;
		var opt = oParam || {};
		var options = {
			success : opt.success || function() {
				return;
			},
			fail : opt.fail || function() {
				return;
			},
			msg : opt.msg || ""
		};
		var dialog = new sap.m.Dialog({
			title : self.oCoreApi.getTextNotHtmlEncoded("caution"),
			type : sap.m.DialogType.Standard,
			content : new sap.m.Text({
				text : options.msg
			}).addStyleClass("textStyle"),
			beginButton : new sap.m.Button({
				text : self.oCoreApi.getTextNotHtmlEncoded("yes"),
				press : function() {
					//fnCallback = options.success();
					self.overWriteAnalysisPath();
					dialog.close();
				}
			}),
			endButton : new sap.m.Button({
				text : self.oCoreApi.getTextNotHtmlEncoded("no"),
				press : function() {
					var bSaveAs = true;
					var aData = self.oInput.getModel().getData();
					//fnCallback = options.success()
					self.getSaveDialog(bSaveAs, function() {
						return;
					}, aData);
					dialog.close();
				}
			}),
			afterClose : function() {
				self.oUiApi.getLayoutView().setBusy(false);
				this.destroy();
			}
		});
		dialog.open();
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.toolbar
	*@method getConfirmLogOffDialog
	*@description confirm dialog before logging out  
	*/
	getConfirmLogOffDialog : function() {
		var self = this;
		var dialog = new sap.m.Dialog({
			title : self.oCoreApi.getTextNotHtmlEncoded("confirmation"),
			type : sap.m.DialogType.Standard,
			content : new sap.m.Text({
				text : self.oCoreApi.getTextNotHtmlEncoded("do-you-want-to-logout")
			}).addStyleClass("textStyle"),
			beginButton : new sap.m.Button({
				text : self.oCoreApi.getTextNotHtmlEncoded("yes"),
				press : function() {
					self.oCoreApi.logoutHanaXse();
					dialog.close();
				}
			}),
			endButton : new sap.m.Button({
				text : self.oCoreApi.getTextNotHtmlEncoded("no"),
				press : function() {
					dialog.close();
				}
			}),
			afterClose : function() {
				self.oUiApi.getLayoutView().setBusy(false);
				this.destroy();
			}
		});
		dialog.open();
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.toolbar
	*@method getErrorMessageDialog
	*@description Getter for save dialog. Opens a new dialog for saving analysis Path
	*@param {string} errorText Text to be shown in case of an error
	*/
	getErrorMessageDialog : function(msg) {
		var self = this;
		var dialog = new sap.m.Dialog({
			title : self.oCoreApi.getTextNotHtmlEncoded("error"),
			type : sap.m.DialogType.Message,
			content : new sap.m.Text({
				text : msg
			}).addStyleClass("textStyle"),
			beginButton : new sap.m.Button({
				text : self.oCoreApi.getTextNotHtmlEncoded("ok"),
				press : function() {
					var fncallback = function() {
						return;
					};
					if (fncallback) {
						setTimeout(function() {
							self.callbackforSave(fncallback);
						}, 200);
					}
					dialog.close();
				}
			}),
			afterClose : function() {
				self.oUiApi.getLayoutView().setBusy(false);
				this.destroy();
			}
		});
		dialog.open();
	},
	callbackforSave : function(fncallback) {
		fncallback();
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.toolbar
	*@method onOpenAnalysisPath
	*@description On click event of open button in Menu Popover
	*/
	onOpenPathGallery : function() {
		this.bIsPathGalleryWithDelete = false;
		var pathName = this.oUiApi.getAnalysisPath().oSavedPathName.getTitle();
		var firstChar = pathName.charAt(0);
		if (firstChar === "*" && this.oCoreApi.getSteps().length !== 0) {
			this.getOpenDialog(this.bIsPathGalleryWithDelete);
		} else {
			this.openPathGallery();
		}
		this.isOpen = false;
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.toolbar
	*@method onOpenPathGalleryWithDelete
	*@description On click event of Delete button in  Menu PopOver
	*/
	onOpenPathGalleryWithDelete : function() {
		this.bIsPathGalleryWithDelete = true;
		var pathName = this.oUiApi.getAnalysisPath().oSavedPathName.getTitle();
		var firstChar = pathName.charAt(0);
		if (firstChar === "*" && this.oCoreApi.getSteps().length !== 0) {
			this.getOpenDialog(this.bIsPathGalleryWithDelete);
		} else {
			this.openPathGalleryWithDelete();
		}
		this.isOpen = false;
	},
	saveAnalysisPath : function(analysisPathName, fncallback, bSaveAs) {
		var self = this;
		this.saveCallback = fncallback;
		this.analysisPathName = analysisPathName; //Encodes the special characters
		this.aData = self.oInput.getModel().getData();
		var boolUpdatePath = false;
		this.guid = "";
		var steps = self.oCoreApi.getSteps();
		//Check if path or steps exceeds the limit
		if (this.aData.length > this.getView().maxNumberOfPaths) {
			this.getErrorMessageDialog(self.oCoreApi.getTextNotHtmlEncoded("no-of-paths-exceeded"));
			if (self.saveDialog && self.saveDialog.isOpen()) {
				self.saveDialog.close();
			}
			return false;
		} else if (steps.length > this.getView().maxNumberOfSteps) {
			this.getErrorMessageDialog(self.oCoreApi.getTextNotHtmlEncoded("no-of-steps-exceeded"));
			if (self.saveDialog && self.saveDialog.isOpen()) {
				self.saveDialog.close();
			}
			return false;
		}
		var i;
		for(i = 0; i < this.aData.length; i++) {
			var decodePathName = this.aData[i].AnalysisPathName;
			if (this.analysisPathName === decodePathName) {
				boolUpdatePath = true;
				this.guid = this.aData[i].AnalysisPath;
				break;
			}
		}
		if (!boolUpdatePath) {
			self.oSerializationMediator.savePath(self.analysisPathName, function(respObj, metaData, msgObj) {
				if (msgObj === undefined && (typeof respObj === "object")) {
					self.oUiApi.getAnalysisPath().oSavedPathName.setTitle(self.analysisPathName);
					self.oUiApi.getAnalysisPath().getController().bIsDirtyState = false;
					if (self.saveDialog && self.saveDialog.isOpen()) {
						self.saveDialog.close();
					}
					var message = self.oCoreApi.getTextNotHtmlEncoded("path-saved-successfully", [ "'" + self.analysisPathName + "'" ]);
					self.getSuccessToast(self.analysisPathName, message);
					if (typeof self.saveCallback === "function") {
						self.saveCallback();
					}
				} else {
					var oMessageObject = self.oCoreApi.createMessageObject({
						code : "6006",
						aParameters : [ self.analysisPathName ]
					});
					oMessageObject.setPrevious(msgObj);
					self.oCoreApi.putMessage(oMessageObject);
				}
			});
		} else {
			if (self.saveDialog && self.saveDialog.isOpen()) {
				self.saveDialog.close();
			}
			var pathName;
			if (self.oUiApi.getAnalysisPath().oSavedPathName.getTitle().charAt(0) === "*" && this.oCoreApi.getSteps().length !== 0) {
				pathName = self.oUiApi.getAnalysisPath().oSavedPathName.getTitle().slice(1, self.oUiApi.getAnalysisPath().oSavedPathName.getTitle().length);
			} else {
				pathName = self.oUiApi.getAnalysisPath().oSavedPathName.getTitle();
			}
			if (!bSaveAs && pathName === self.analysisPathName) {
				self.overWriteAnalysisPath();
			} else {
				this.getConfirmDialog({
					msg : self.oCoreApi.getTextNotHtmlEncoded("path-exists", [ "'" + self.analysisPathName + "'" ])
				});
			}
			boolUpdatePath = false;
		}
	},
	getSuccessToast : function(pathName, message) {
		var self = this;
		var msg = message;
		sap.m.MessageToast.show(msg, {
			width : "20em"
		});
		if (self.isOpen && self.bIsPathGalleryWithDelete) {
			self.openPathGalleryWithDelete();
		} else if (self.isOpen) {
			self.openPathGallery();
		}
	},
	overWriteAnalysisPath : function() {
		var self = this;
		var pathNameVal = this.analysisPathName;
		var guidVal = this.guid;
		self.oSerializationMediator.savePath(guidVal, pathNameVal, function(oResponse, metaData, msgObj) {
			if (msgObj === undefined && (typeof oResponse === "object")) {
				self.oUiApi.getAnalysisPath().oSavedPathName.setTitle(pathNameVal);
				var message = self.oCoreApi.getTextNotHtmlEncoded("path-updated-successfully", [ "'" + pathNameVal + "'" ]);
				self.oUiApi.getAnalysisPath().getController().bIsDirtyState = false;
				if (self.saveDialog && self.saveDialog.isOpen()) {
					self.saveDialog.close();
				}
				self.getSuccessToast(pathNameVal, message);
				if (typeof self.saveCallback === "function") {
					self.saveCallback();
				}
			} else {
				var oMessageObject = self.oCoreApi.createMessageObject({
					code : "6007",
					aParameters : [ pathNameVal ]
				});
				oMessageObject.setPrevious(msgObj);
				self.oCoreApi.putMessage(oMessageObject);
			}
		});
	},
	getDialogForNoPathAdded : function() {
		var self = this;
		var msg = self.oCoreApi.getTextNotHtmlEncoded("noStepInPath");
		var dialog = new sap.m.Dialog({
			title : self.oCoreApi.getTextNotHtmlEncoded("alert"),
			type : sap.m.DialogType.Message,
			contentWidth : jQuery(window).height() * 0.2 + "px", // height and width for the dialog relative to the window
			contentHeight : jQuery(window).height() * 0.2 + "px",
			content : new sap.m.Text({
				text : msg
			}).addStyleClass("textStyle"),
			beginButton : new sap.m.Button({
				text : self.oCoreApi.getTextNotHtmlEncoded("ok"),
				press : function() {
					dialog.close();
				}
			}),
			afterClose : function() {
				self.oUiApi.getLayoutView().setBusy(false);
				this.destroy();
			}
		});
		dialog.open();
	}
/*
*@memberOf sap.apf.ui.reuse.controller.toolbar
*@method onAfterRendering
*@description Keyboard shortcut keys for the toolbar buttons 
 */
/*onAfterRendering : function() {
	var self = this;
	var keys = [];
	var firstKeyPress;
	var secondKeyPress;
	jQuery(document).keydown(function(e) {
		if (e.keyCode === 18) {
			keys.alt = true;
			firstKeyPress = new Date();
			firstKeyPress = firstKeyPress.getTime();
		}
		if (e.keyCode === 78) {
			keys.n = true;
			secondKeyPress = new Date();
			secondKeyPress = secondKeyPress.getTime();
		}
		if (e.keyCode === 79) {
			keys.o = true;
			secondKeyPress = new Date();
			secondKeyPress = secondKeyPress.getTime();
		}
		if (e.keyCode === 83) {
			keys.s = true;
			secondKeyPress = new Date();
			secondKeyPress = secondKeyPress.getTime();
		}
		if (e.keyCode === 80) {
			keys.p = true;
			secondKeyPress = new Date();
			secondKeyPress = secondKeyPress.getTime();
		}
		if (keys.alt === true && keys.n === true) {
			if (((secondKeyPress - firstKeyPress < 1000) && (secondKeyPress - firstKeyPress > 0)) || ((secondKeyPress - firstKeyPress > -1000) && (secondKeyPress - firstKeyPress < 0))) {
				self.getNewAnalysisPathDialog(); //new analysis path
			}
		}
		if (keys.alt === true && keys.o === true) {
			if (((secondKeyPress - firstKeyPress < 1000) && (secondKeyPress - firstKeyPress > 0)) || ((secondKeyPress - firstKeyPress > -1000) && (secondKeyPress - firstKeyPress < 0))) {
				self.onOpenAnalysisPath(); //open analysis path
			}
		}
		if (keys.alt === true && keys.s === true) {
			if (((secondKeyPress - firstKeyPress < 1000) && (secondKeyPress - firstKeyPress > 0)) || ((secondKeyPress - firstKeyPress > -1000) && (secondKeyPress - firstKeyPress < 0))) {
				self.getSaveDialog(); // save analysis path
			}
		}
		if (keys.alt === true && keys.p === true) {
			if (((secondKeyPress - firstKeyPress < 1000) && (secondKeyPress - firstKeyPress > 0)) || ((secondKeyPress - firstKeyPress > -1000) && (secondKeyPress - firstKeyPress < 0))) {
				self.doPrint(); // print analysis path
			}
		}
	});
	jQuery(document).keyup(function(e) {
		if (e.keyCode === 18)
			keys.alt = false;
		if (e.keyCode === 78)
			keys.n = false;
		if (e.keyCode === 79)
			keys.o = false;
		if (e.keyCode === 83)
			keys.s = false;
		if (e.keyCode === 80)
			keys.p = false;
	});
} */
});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/* global window*/
/**
 *@class pathGallery
 *@name  pathGallery Fragment
 *@description Holds the saved paths and displays them in a dialog using js fragment
 *@memberOf sap.apf.ui.reuse.fragment
 * 
 */
sap.ui.jsfragment("sap.apf.ui.reuse.fragment.pathGallery", {
	createContent : function(oController) {
		var self = this;
		this.contentWidth = jQuery(window).height() * 0.6 + "px"; // height and width for the dialog relative to the window
		this.contentHeight = jQuery(window).height() * 0.6 + "px";
		this.oCoreApi = oController.oCoreApi;
		this.oUiApi = oController.oUiApi;
		var pathGalleryPathNamelist = new sap.m.List().bindItems({
			path : '/GalleryElements',
			template : new sap.m.StandardListItem({
				title : '{title}',
				tooltip : '{title}',
				description : '{description}',
				type : "Navigation",
				press : function(evt) {
					var oBindingContext = evt.getSource().getBindingContext(); // evt.getSource() is the ListItem
					pathGalleryStepPage.setBindingContext(oBindingContext); //set the data context to the page to which navigation has to happen
					pathGalleryStepPage.setTitle(evt.getSource().getTitle());//set the title of step page as the selected path
					self.oPathGalleryNavContainer.to(self.oPathGalleryNavContainer.getPages()[1]);// navigate to the representation page
				}
			})
		});
		var pathGalleryStepList = new sap.m.List().bindItems({
			path : 'StructuredAnalysisPath/steps',
			template : new sap.m.StandardListItem({
				title : '{title}',
				tooltip : '{title}',
				type : "Active",
				icon : '{imgSrc}',
				press : function(oEvent) {
					self.oUiApi.getLayoutView().setBusy(true);
					var eventBindingContext = oEvent.getSource().getBindingContext().sPath.split('/');
					var pathName = this.getModel().getData().GalleryElements[eventBindingContext[2]].AnalysisPathName;
					var analysisPath = this.getModel().getData().GalleryElements[eventBindingContext[2]].AnalysisPath;
					var activeStepindex = eventBindingContext[5];
					oController.openPath(pathName, analysisPath, activeStepindex);
					self.oUiApi.getLayoutView().setBusy(false);
				}
			})
		});
		var onLiveChangeInSearchField = function(oEvent) {
			var aListItemFilters = [];
			var sSerachElement = oEvent.getSource().getValue();
			var oListForFiltering = self.pathGalleryHierarchicalDialog.getContent()[0].getCurrentPage().getContent()[0];//get the current page and the list in it
			if (sSerachElement && sSerachElement.length > 0) {
				var oFilter = new sap.ui.model.Filter("title", sap.ui.model.FilterOperator.Contains, sSerachElement);
				aListItemFilters.push(oFilter);
			}
			var currentListBinding = oListForFiltering.getBinding("items");// update list binding
			currentListBinding.filter(aListItemFilters);
		};
		var pathGalleryPathNamePage = new sap.m.Page({
			title : self.oCoreApi.getTextNotHtmlEncoded("select-analysis-path"),
			subHeader : new sap.m.Bar({
				contentLeft : [ new sap.m.SearchField({
					enableFilterMode : true,
					liveChange : onLiveChangeInSearchField
				}) ]
			}),
			content : pathGalleryPathNamelist
		});
		var pathGalleryStepPage = new sap.m.Page({
			subHeader : new sap.m.Bar({
				contentLeft : [ new sap.m.SearchField({
					enableFilterMode : true,
					liveChange : onLiveChangeInSearchField
				}) ]
			}),
			content : pathGalleryStepList,
			showNavButton : true,
			navButtonPress : function() {
				self.oPathGalleryNavContainer.back();
			}
		});
		this.oPathGalleryNavContainer = new sap.m.NavContainer({
			pages : [ pathGalleryPathNamePage, pathGalleryStepPage ]
		});
		this.oPathGalleryNavContainer.setModel(oController.getView().getModel()); // set the model to the App; it will be propagated to the children
		this.pathGalleryHierarchicalDialog = new sap.m.Dialog({ // path gallery
			contentWidth : self.contentWidth,
			contentHeight : self.contentHeight,
			showHeader : false,
			content : [ this.oPathGalleryNavContainer ],
			endButton : new sap.m.Button({
				text : self.oCoreApi.getTextNotHtmlEncoded("cancel"),
				press : function() {
					self.pathGalleryHierarchicalDialog.close();
				}
			}),
			afterClose : function(){
				this.destroy();
			}
		});
		return this.pathGalleryHierarchicalDialog;
	}
});
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
/* global window*/
/**
 *@class selectionDisplay
 *@name  selectionDisplay Fragment
 *@description Holds the selections on the active step and displays them in a dialog using js fragment
 *@memberOf sap.apf.ui.reuse.view
 * 
 */
sap.ui.jsfragment("sap.apf.ui.reuse.fragment.selectionDisplay", {
	createContent : function(oController){
		this.oController = oController;
		this.contentWidth = jQuery(window).height() * 0.6 + "px"; // height and width for the dialog relative to the window
		this.contentHeight = jQuery(window).height() * 0.6 + "px";
		var self = this;
		this.oCoreApi = oController.oCoreApi;
		this.oUiApi = oController.oUiApi;
		var closeButton = new sap.m.Button({
			text : self.oCoreApi.getTextNotHtmlEncoded("close"),
			press : function() {
				self.selectionDisplayDialog.close();
				self.selectionDisplayDialog.destroy();
			}
		});
		var oActiveStep = this.oCoreApi.getActiveStep();
		var selectedRepresentation = oActiveStep.getSelectedRepresentation();
		var selectionData =  typeof selectedRepresentation.getSelections === "function" ? selectedRepresentation.getSelections() : undefined; //Returns the filter selections
		var selectedDimension = selectedRepresentation.getMetaData().getPropertyMetadata(selectedRepresentation.getParameter().requiredFilters[0]).label;
		var oModel = new sap.ui.model.json.JSONModel();
		//Preparing the data list in the dialog
		if(selectionData !== undefined){
			var oData = {
					selectionData : selectionData
			};
			var selectionList = new sap.m.List({
				items : {
					path : "/selectionData",
					template: new sap.m.StandardListItem({
					   title : "{text}"
					})
				}
			});
			oModel.setData(oData);
			selectionList.setModel(oModel);
			this.selectionDisplayDialog = new sap.m.Dialog({
				title : this.oCoreApi.getTextNotHtmlEncoded("selected-required-filter", [selectedDimension]) + " (" + selectionData.length + ")",
				contentWidth : self.contentWidth,
				contentHeight : self.contentHeight,	
				buttons : [closeButton],
				content : [selectionList]
			});
			return this.selectionDisplayDialog;
		}
	}
});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/* global window*/
/**
 *@class stepGallery
 *@name  stepGallery Fragment
 *@description Holds the available steps of configuration and displays them in a dialog using js fragment
 *@memberOf sap.apf.ui.reuse.view
 * 
 */
sap.ui.jsfragment("sap.apf.ui.reuse.fragment.stepGallery", {
	createContent : function(oController) {
		var self = this;
		this.contentWidth = jQuery(window).height() * 0.6 + "px"; // height and width for the dialog relative to the window
		this.contentHeight = jQuery(window).height() * 0.6 + "px";
		this.oCoreApi = oController.oCoreApi;
		this.oUiApi = oController.oUiApi;
		var stepGalleryCategoryList = new sap.m.List().bindItems({
			path : '/GalleryElements',
			template : new sap.m.StandardListItem({
				title : '{title}',
				tooltip : '{title}',
				type : "Navigation",
				press : function(oEvent) {
					var oBindingContext = oEvent.getSource().getBindingContext(); // evt.getSource() is the ListItem
					stepGalleryStepPage.setBindingContext(oBindingContext); //set the data context to the page to which navigation has to happen
					stepGalleryStepPage.setTitle(oEvent.getSource().getTitle()); //set the title of step page as the selected category
					self.oStepGalleryNavContainer.to(self.oStepGalleryNavContainer.getPages()[1]); // navigate to the step page
				}
			})
		});
		var stepGalleryStepList = new sap.m.List().bindItems({
			path : 'stepTemplates',
			template : new sap.m.StandardListItem({
				title : '{title}',
				tooltip : '{title}',
				type : "Navigation",
				press : function(oEvent) {
					var oBindingContext = oEvent.getSource().getBindingContext(); // evt.getSource() is the ListItem
					stepGalleryRepresentationPage.setBindingContext(oBindingContext); //set the data context to the page to which navigation has to happen
					stepGalleryRepresentationPage.setTitle(oEvent.getSource().getTitle());//set the title of representation page as the selected step
					self.oStepGalleryNavContainer.to(self.oStepGalleryNavContainer.getPages()[2]);// navigate to the representation page
				}
			})
		});
		var onRepresentationPress = function(oEvent) {
			self.oUiApi.getLayoutView().setBusy(true);
			var eventBindingContext = oEvent.getSource().getBindingContext().sPath.split('/');
			var categoryIndex = eventBindingContext[2];
			var stepIndex = eventBindingContext[4];
			var representationIndex = eventBindingContext[6];
			var stepDetails = oController.getStepDetails(categoryIndex, stepIndex);
			oController.onStepPress(stepDetails.id, stepDetails.representationtypes[representationIndex].representationId);
		};
		var stepGalleryRepresentationList = new sap.m.List().bindItems({
			path : 'representationtypes',
			template : new sap.m.StandardListItem({
				title : '{title}',
				icon : '{picture}',
				tooltip : '{title}',
				type : "Active",
				press : onRepresentationPress
			}).bindProperty("description", "sortDescription", function(value) {
				if (value === undefined || value === null) {
					return null;
				}
				return self.oCoreApi.getTextNotHtmlEncoded("sortBy") + ": " + value;
			})
		});
		var onLiveChangeInSearchField = function(oEvent) {
			var aListItemFilters = [];
			var sSerachElement = oEvent.getSource().getValue();
			var oListForFiltering = self.oStepGalleryHierarchicalDialog.getContent()[0].getCurrentPage().getContent()[0];//get the current page and the list in it
			if (sSerachElement && sSerachElement.length > 0) {
				var oFilter = new sap.ui.model.Filter("title", sap.ui.model.FilterOperator.Contains, sSerachElement);
				aListItemFilters.push(oFilter);
			}
			var currentListBinding = oListForFiltering.getBinding("items");// update list binding
			currentListBinding.filter(aListItemFilters);
		};
		var stepGalleryCategoryPage = new sap.m.Page({
			title : self.oCoreApi.getTextNotHtmlEncoded("category"),
			subHeader : new sap.m.Bar({
				contentLeft : [ new sap.m.SearchField({
					enableFilterMode : true,
					liveChange : onLiveChangeInSearchField
				}) ]
			}),
			content : stepGalleryCategoryList
		});
		var stepGalleryStepPage = new sap.m.Page({
			subHeader : new sap.m.Bar({
				contentLeft : [ new sap.m.SearchField({
					enableFilterMode : true,
					liveChange : onLiveChangeInSearchField
				}) ]
			}),
			content : stepGalleryStepList,
			showNavButton : true,
			navButtonPress : function() {
				self.oStepGalleryNavContainer.back();
			}
		});
		var stepGalleryRepresentationPage = new sap.m.Page({
			subHeader : new sap.m.Bar({
				contentLeft : [ new sap.m.SearchField({
					enableFilterMode : true,
					liveChange : onLiveChangeInSearchField
				}) ]
			}),
			content : stepGalleryRepresentationList,
			showNavButton : true,
			navButtonPress : function() {
				self.oStepGalleryNavContainer.back();
			}
		});
		this.oStepGalleryNavContainer = new sap.m.NavContainer({
			pages : [ stepGalleryCategoryPage, stepGalleryStepPage, stepGalleryRepresentationPage ]
		});
		this.oStepGalleryNavContainer.setModel(oController.getView().getModel()); // set the model to the App; it will be propagated to the children
		this.oStepGalleryHierarchicalDialog = new sap.m.Dialog({ // step gallery
			contentWidth : self.contentWidth,
			contentHeight : self.contentHeight,
			showHeader : false,
			content : [ this.oStepGalleryNavContainer ],
			endButton : new sap.m.Button({
				text : self.oCoreApi.getTextNotHtmlEncoded("cancel"),
				press : function() {
					self.oStepGalleryHierarchicalDialog.close();
					self.oStepGalleryHierarchicalDialog.destroy();
				}
			})
		});
		return this.oStepGalleryHierarchicalDialog;
	}
});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 *@class analysisPath 
 *@name analysisPath
 *@memberOf sap.apf.ui.reuse.view 
 *@description Layout holds title of Analysis Path, saved path name, Toolbar and Carousel
 *@returns  {AnalysisPath}  
 */
sap.ui.jsview("sap.apf.ui.reuse.view.analysisPath", {
	/**
	 *@this {sap.apf.ui.reuse.view.analysisPath}
	 *@description anlaysisPath view
	 */
	/**
	 *@method getCarousel
	 *@memberOf sap.apf.ui.reuse.view.analysisPath
	 *@see sap.apf.ui.reuse.view.carousel
	 */
	getCarousel : function() {
		return this.oCarousel;
	},
	/**
	 *@method getToolbar
	 *@see sap.apf.ui.reuse.view.analysisPath
	 *@memberOf sap.apf.ui.reuse.view.analysisPath
	 */
	getToolbar : function() {
		return this.oActionListItem;
	},
	/**
	 *@method getPathGallery
	 *@memberOf sap.apf.ui.reuse.view.analysisPath
	 */
	getPathGallery : function() {
		return this.pathGallery;
	},
	/**
	 *@method getPathGalleryWithDeleteMode
	 *@memberOf sap.apf.ui.reuse.view.analysisPath
	 */
	getPathGalleryWithDeleteMode : function() {
		return this.deleteAnalysisPath;
	},
	getControllerName : function() {
		return "sap.apf.ui.reuse.controller.analysisPath";
	},
	createContent : function(oController) {
		var self = this;
		this.oController = oController;
		this.oActionListPopover = new sap.m.Popover({
			showHeader : false,
			placement : sap.m.PlacementType.Bottom,
			contentWidth : "150px"
		});
		var oViewData = this.getViewData();
		self.oCoreApi = oViewData.oCoreApi;
		self.oUiApi = oViewData.uiApi;
		this.oActionListItem = sap.ui.view({
			viewName : "sap.apf.ui.reuse.view.toolbar",
			type : sap.ui.core.mvc.ViewType.JS,
			viewData : oViewData
		}).addStyleClass("toolbarView");
		this.oActionListPopover.addContent(this.oActionListItem);
		this.oSavedPathName = new sap.m.ObjectHeader({
					title : this.oCoreApi.getTextNotHtmlEncoded("unsaved"),
					showTitleSelector : true,
					condensed : true,
					titleSelectorPress : function(oEvent){
						self.oActionListPopover.openBy(oEvent.getParameter("domRef"));
					}
		}).addStyleClass("sapApfObjectHeader");
		this.oCarousel = new sap.ui.view({
			type : sap.ui.core.mvc.ViewType.JS,
			viewName : "sap.apf.ui.reuse.view.carousel",
			viewData : {
				analysisPath : self,
				oInject : oViewData
			}
		});
		this.pathGallery = new sap.ui.view({
			type : sap.ui.core.mvc.ViewType.JS,
			viewName : "sap.apf.ui.reuse.view.pathGallery",
			viewData : {
				oInject : oViewData
			}
		});
		this.deleteAnalysisPath = new sap.ui.view({
			type : sap.ui.core.mvc.ViewType.JS,
			viewName : "sap.apf.ui.reuse.view.deleteAnalysisPath",
			viewData : {
				oInject : oViewData
			}
		});
		this.oAnalysisPath = new sap.ui.layout.VerticalLayout({
			content : [ self.oContentTitle , self.oSavedPathName , self.oCarousel ],
			width : '100%'
		});
		return this.oAnalysisPath;
	}
});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/* global document, window, dndBox*/
/**
 *@class carousel
 *@name carousel
 *@memberOf sap.apf.ui.reuse.view
 *@description Layout holds Analysis Steps
 *@returns {Carousel}  
 */
sap.ui.jsview("sap.apf.ui.reuse.view.carousel", {
	/**
	 *@memberOf sap.apf.ui.reuse.view.carousel
	 *@method getStepGallery
	 *@see sap.apf.ui.reuse.view.stepGallery
	 *@return {sap.apf.ui.reuse.view.stepGallery}
	 */
	getStepGallery : function() {
		var stepGallery = this.oController.stepGalleryView;
		return stepGallery;
	},
	getChartToolbar : function() {
		return this.oController.oStepToolbar;
	},
	carouselContent : function (oController) {
		jQuery.sap.require('sap.apf.ui.controls.draggableCarousel.DraggableCarousel');
		var self = this;
		this.oController = oController;
		this.stepViews = [];
		var oViewData = this.getViewData().oInject;
		self.oCoreApi = oViewData.oCoreApi;
		self.oUiApi = oViewData.uiApi;
		var separator = new sap.ui.core.Icon({
			src : "sap-icon://arrow-bottom"
		}).addStyleClass('downArrow');
		var separatorEle = document.createElement('div');
		separatorEle.innerHTML = sap.ui.getCore().getRenderManager().getHTML(separator);
		var removeIcon = new sap.ui.core.Icon({
			src : "sap-icon://sys-cancel-2",
			size : "20px"
		}).addStyleClass('removeIcon');
		var removeIconEle = document.createElement('div');
		removeIconEle.innerHTML = sap.ui.getCore().getRenderManager().getHTML(removeIcon);
		var height = jQuery(window).height() - sap.apf.ui.utils.CONSTANTS.carousel.SCROLLCONTAINER + "px";
		var width = "320px"; // S2 View Content Width.
		window.onresize = function() {
			var height = jQuery(window).height() - sap.apf.ui.utils.CONSTANTS.carousel.SCROLLCONTAINER + "px";
			jQuery('.DnD-container').css({"height" : jQuery(window).height() - sap.apf.ui.utils.CONSTANTS.carousel.DNDBOX + "px"});
			jQuery(".scrollContainerEle").css("height", height);
		};
		this.dndBox = new sap.apf.ui.controls.draggableCarousel.DraggableCarousel({
			containerHeight : jQuery(window).height() - sap.apf.ui.utils.CONSTANTS.carousel.DNDBOX + "px",
			containerWidth : width,
			blockHeight : sap.apf.ui.utils.CONSTANTS.thumbnailDimensions.STEP_HEIGHT,
			blockWidth : sap.apf.ui.utils.CONSTANTS.thumbnailDimensions.STEP_WIDTH,
			blockMargin : sap.apf.ui.utils.CONSTANTS.thumbnailDimensions.STEP_MARGIN,
			separatorHeight : sap.apf.ui.utils.CONSTANTS.thumbnailDimensions.SEPARATOR_HEIGHT,
			removeIconHeight : sap.apf.ui.utils.CONSTANTS.thumbnailDimensions.REMOVE_ICON_HEIGHT,
			separator : separatorEle,
			removeIcon : removeIconEle,
			onBeforeDrag : function(dragIndex) {
			},
			onAfterDrop : oController.moveStep.bind(oController),
			onAfterRemove : oController.removeStep.bind(oController),
			onAfterSelect : function (index) {
				//Based on drag-state setActiveStep or Add Analysis Step
				if (jQuery(this).attr("drag-state") === "true") {
					self.getStepView(index).oController.setActiveStep(index);
				} else {
					oController.showStepGallery();
				}
			}
		});
		var uniqueId = this.createId("dnd-Holder");
		this.oHtml = new sap.ui.core.HTML({
			content : "<div id = '" + jQuery.sap.encodeHTML(uniqueId) + "'></div>", //TODO Check whether DOM is getting destroyed properly
			sanitizeContent : true,
			afterRendering : function() {
				self.dndBox.placeAt(uniqueId);
				jQuery(self.dndBox.eleRefs.blocks[0]).height("80px");
			}
		});
		var sampleDiv;
		this.addButton = new sap.m.Button({
			text : self.oCoreApi.getTextNotHtmlEncoded("add-step"),
			width : "100%",
			icon : "sap-icon://add",
			press : function(evt) {
				oController.showStepGallery();
			}
		});
		sampleDiv = document.createElement('div');
		sampleDiv.setAttribute('class', 'addStepBtnHolder');
		jQuery(sampleDiv).html(jQuery(sap.ui.getCore().getRenderManager().getHTML(this.addButton)).attr("tabindex", -1));
		
		this.dndBox.addBlock({
			blockElement : sampleDiv,
			dragState : false,
			dropState : false,
			removable : false
		});
		this.up = new sap.m.Button({
			icon : "sap-icon://arrow-top",
			press : function() {
				var activeStepIndex = self.oCoreApi.getSteps().indexOf(self.oCoreApi.getActiveStep());
				if (activeStepIndex !== 0) {
					var newPos = activeStepIndex - 1;
					var success = self.oUiApi.getAnalysisPath().getCarousel().dndBox.swapBlocks(activeStepIndex, newPos);
					if (success) {
						self.oUiApi.getAnalysisPath().getCarousel().getController().moveStep(activeStepIndex, newPos);
					}
				}
			}
		});
		this.down = new sap.m.Button({
			icon : "sap-icon://arrow-bottom",
			press : function() {
				var activeStepIndex = self.oCoreApi.getSteps().indexOf(self.oCoreApi.getActiveStep());
				if (activeStepIndex !== (self.oCoreApi.getSteps().length - 1)) {
					var newPos = activeStepIndex + 1;
					var success = self.oUiApi.getAnalysisPath().getCarousel().dndBox.swapBlocks(activeStepIndex, newPos);
					if (success) {
						self.oUiApi.getAnalysisPath().getCarousel().getController().moveStep(activeStepIndex, newPos);
					}
				}
			}
		});
		this.oCarousel = new sap.m.ScrollContainer({
			content : this.oHtml,
			height : height,
			horizontal : false,
			vertical : true
		}).addStyleClass("scrollContainerEle");
		return this.oCarousel;
	},
	getControllerName : function() {
		return "sap.apf.ui.reuse.controller.carousel";
	},
	createContent : function(oController) {
		var carouselContent = this.carouselContent(oController);
		return carouselContent;
	},
	getStepView : function(stepIndex) {
		return this.stepViews[stepIndex];
	}
});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/* global window*/
sap.ui.jsview("sap.apf.ui.reuse.view.deleteAnalysisPath", {
	getControllerName : function() {
		return "sap.apf.ui.reuse.controller.deleteAnalysisPath";
	},
	createContent : function(oController) {
		this.oController = oController;
		this.viewData = this.getViewData();
		var self = this;
		this.oCoreApi = this.getViewData().oInject.oCoreApi;
		this.oUiApi = this.getViewData().oInject.uiApi;
		this.width = jQuery(window).height() * 0.55 + "px"; // height and width for the list relative to the window
		this.height = jQuery(window).height() * 0.55 + "px";
		var list = new sap.m.List({
			width : self.width,
			height : self.height,
			mode: sap.m.ListMode.Delete,
			items: {
				path: "/GalleryElements",
				template: new sap.m.StandardListItem({
					title:"{AnalysisPathName}",
					description:"{description}",
					tooltip : "{AnalysisPathName}" 
				})
			},
			"delete": function (evt) {
				var item = evt.getParameter("listItem");
				var sPathName = item.getProperty('title');
				var guid = self.oController.getGuidForPath(sPathName,self.viewData.jsonData.GalleryElements);
				var oListInfo = {};
				oListInfo.item = item;
				oListInfo.list = list;
				oListInfo.guid = guid;
				oListInfo.sPathName = sPathName;
				self.oUiApi.getAnalysisPath().getToolbar().getController().getConfirmDelDialog(oListInfo);
			}

		});
		var pathGalleryModel = new sap.ui.model.json.JSONModel();
		pathGalleryModel.setData(this.viewData.jsonData);
		list.setModel(pathGalleryModel);
		return list;
	}
});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 * @class facetFilter
 * @name  facetFilter
 * @description Creates the facet filter
 * @memberOf sap.apf.ui.reuse.view
 * 
 */
(function() {
	'use strict';
	sap.ui.jsview("sap.apf.ui.reuse.view.facetFilter", {
		getControllerName : function() {
			return "sap.apf.ui.reuse.controller.facetFilter";
		},
		createContent : function(oController) {
			var oFacetFilterList;
			var oCoreApi = this.getViewData().oCoreApi;
			var aConfiguredFilters = this.getViewData().aConfiguredFilters;
			var aFacetFilterListControls = [];
			aConfiguredFilters.forEach(function(oConfiguredFilter) {
				oFacetFilterList = new sap.m.FacetFilterList({
					title : oCoreApi.getTextNotHtmlEncoded(oConfiguredFilter.getLabel()),
					multiSelect : oConfiguredFilter.isMultiSelection(),
					key : oConfiguredFilter.getPropertyName(),
					/* 
					 * Workaround FIX for incident 1580037010 - sap.m.FacetFilterList(To date list) on search selects all items bound to it
					 * Set growing to true for only single select lists
					 */
					growing : oConfiguredFilter.isMultiSelection() ? false : true,
					listClose : oController.onListClose.bind(oController)
				});
				aFacetFilterListControls.push(oFacetFilterList);
			});
			aFacetFilterListControls.forEach(function(oFacetFilterListControl) {
				oFacetFilterListControl.bindItems("/", new sap.m.FacetFilterItem({
					key : '{key}',
					text : '{text}',
					selected : '{selected}'
				}));
				var oModel = new sap.ui.model.json.JSONModel([]);
				oFacetFilterListControl.setModel(oModel);
			});
			var oFacetFilter = new sap.m.FacetFilter(oController.createId("idAPFFacetFilter"), {
				type : "Simple",
				showReset : true,
				showPopoverOKButton : true,
				lists : aFacetFilterListControls,
				reset : oController.onResetPress.bind(oController)
			});
			return oFacetFilter;
		}
	});
}());
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 * @class messageHandler
 * @memberOf sap.apf.ui.reuse.view
 * @name messageHandler
 */
sap.ui.jsview("sap.apf.ui.reuse.view.messageHandler", {
	/**
	 * @this {sap.apf.ui.reuse.view.messageHandler}
	 * @description messageHandler view
	 */
	/**
	 * @memberOf sap.apf.ui.reuse.view.messageHandler
	 * @method initializeHandler
	 * @param oMessageObject
	 * @description UI handle for error messages to be shown on notification bar
	 */
	initializeHandler : function(oMessageObject) {
		this.getController().showMessage(oMessageObject);
	},
	getControllerName : function() {
		return "sap.apf.ui.reuse.controller.messageHandler";
	},
	createContent : function(oController) {
		jQuery.sap.require("sap.m.MessageToast");
		jQuery.sap.require("sap.ca.ui.message.message");
		
	}
});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
/**
 *@class navigationTarget 
 *@name navigationTarget
 *@memberOf sap.apf.ui.reuse.view 
 *@description Contains the list of navigation targets possible for the APF Application
 *@returns  {Open in - Navigation Target buttons}  
 */
sap.ui.jsview("sap.apf.ui.reuse.view.navigationTarget", {
	getControllerName : function() {
		return "sap.apf.ui.reuse.controller.navigationTarget";
	},
	createContent : function(oController) {
		var oViewData = this.getViewData();
		this.oNavListPopover = oViewData.oNavListPopover;
		this.oOpenInButtonEventSource = oViewData.oOpenInButtonEventSource;
		this.oNavigationHandler = oViewData.oNavigationHandler;
		this.oUiApi = oViewData.oUiApi;
		this.oController = oController;
		//Call to getNavigationTargets returns a promise
		this.oUiApi.getLayoutView().byId("applicationPage").setBusy(true);//Set busy indicator to true once open in is pressed
		var oNavTargetsPromise = this.oNavigationHandler.getNavigationTargets();
		// Call to _prepareActionListModel after promise is done
		oNavTargetsPromise.then(this._prepareActionListModel.bind(this), function() {
			this.oUiApi.getLayoutView().byId("applicationPage").setBusy(false); //Set busy indicator to false once open in is pressed
		});
	},
	/**
	 *@description Prepares Action list model and adds it the openIn button pop over
	 *@param {Array} Array of objects contains the navigation targets with semantic object, action, action's text, id from when the promise is done
	 */
	_prepareActionListModel : function(navTargets) {
		var navTargetsGlobal = [];
		var navTargetsStepSpecific = [];
		navTargets.global.forEach(function(target) {
			navTargetsGlobal.push(target);
		});
		navTargets.stepSpecific.forEach(function(target) {
			navTargetsStepSpecific.push(target);
		});
		this.oNavListPopover.removeAllContent();
		var oGlobalActionListItem, oStepActionListItem;
		var self = this;
		if (navTargetsStepSpecific.length !== 0) {
			var oModelStepSpecific = new sap.ui.model.json.JSONModel();
			var oDataStepSpecific = {
				navTargets : navTargetsStepSpecific
			};
			//Preparing the list of step specific navigation target actions in the list
			oStepActionListItem = new sap.m.List({
				items : {
					path : "/navTargets",
					template : new sap.m.StandardListItem({
						title : "{text}",
						type : sap.m.ListType.Navigation,
						press : function(oEvent) {
							var selectedNavTarget = oEvent.getSource().getBindingContext().getObject().id;
							self.oController.handleNavigation(selectedNavTarget);//Navigate to app once an step specific action is clicked
						}
					})
				}
			});
			oModelStepSpecific.setData(oDataStepSpecific);
			oStepActionListItem.setModel(oModelStepSpecific);
			//Create a horizontal line separator
			var separator = new sap.ui.core.HTML({
				content : '<hr class="lineSeparator">',
				sanitizeContent : true
			});
			this.oNavListPopover.addContent(oStepActionListItem);
			this.oNavListPopover.addContent(separator);
		}
		if (navTargetsGlobal.length !== 0) {
			var oModelGlobal = new sap.ui.model.json.JSONModel();
			var oDataGlobal = {
				navTargets : navTargetsGlobal
			};
			//Preparing the list of global navigation target actions in the list
			oGlobalActionListItem = new sap.m.List({
				items : {
					path : "/navTargets",
					template : new sap.m.StandardListItem({
						title : "{text}",
						type : sap.m.ListType.Navigation,
						press : function(oEvent) {
							var selectedNavTarget = oEvent.getSource().getBindingContext().getObject().id;
							self.oController.handleNavigation(selectedNavTarget);//Navigate to app once an global action is clicked
						}
					})
				}
			});
			oModelGlobal.setData(oDataGlobal);
			oGlobalActionListItem.setModel(oModelGlobal);
			this.oNavListPopover.addContent(oGlobalActionListItem);
		}
		this.oUiApi.getLayoutView().byId("applicationPage").setBusy(false);//Set busy indicator to true once open in list is populated
		this.oNavListPopover.openBy(this.oOpenInButtonEventSource);
	}
});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
sap.ui.jsview("sap.apf.ui.reuse.view.pathGallery", {
	getControllerName : function() {
		return "sap.apf.ui.reuse.controller.pathGallery";
	},
	createContent : function(oController) {
			this.viewData = this.getViewData();
	}
});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 *@class step
 *@name step
 *@memberOf sap.apf.ui.reuse.view
 *@description Layout to hold stepThumbnail
 */
sap.ui.jsview("sap.apf.ui.reuse.view.step", {
	getControllerName : function() {
		return "sap.apf.ui.reuse.controller.step";
	},
	stepContent : function() {
		this.oCoreApi = this.getViewData().oCoreApi;
		this.oUiApi = this.getViewData().uiApi;
		this.oTopLayout = new sap.m.FlexBox({
			items : [ new sap.m.Text({
				text : '{/thumbnail/leftUpper}',
				tooltip : '{/thumbnail/leftUpper}',
				wrapping : true,
				maxLines : 2,
				textAlign : sap.ui.core.TextAlign.Left
			}).addStyleClass("thumbanilText"), new sap.m.Text({
				text : '{/thumbnail/rightUpper}',
				tooltip : '{/thumbnail/rightUpper}',
				wrapping : true,
				maxLines : 2,
				textAlign : sap.ui.core.TextAlign.Right
			}).addStyleClass("thumbanilText") ],
			alignItems : sap.m.FlexAlignItems.Start,
			justifyContent : sap.m.FlexJustifyContent.SpaceBetween
		}).addStyleClass("topLayout");
		this.oThumbnailChartLayout = new sap.m.VBox({
			height : "80px"
		}).addStyleClass('ChartArea');
		this.oThumbnailChartLayout.setBusy(true);
		this.oBottomLayout = new sap.m.FlexBox({
			items : [ new sap.m.Text({
				text : '{/thumbnail/leftLower}',
				tooltip : '{/thumbnail/leftLower}',
				wrapping : true,
				maxLines : 2,
				textAlign : sap.ui.core.TextAlign.Left
			}).addStyleClass("thumbanilText"), new sap.m.Text({
				text : '{/thumbnail/rightLower}',
				tooltip : '{/thumbnail/rightLower}',
				wrapping : true,
				maxLines : 2,
				textAlign : sap.ui.core.TextAlign.Right
			}).addStyleClass("thumbanilText") ],
			alignItems : sap.m.FlexAlignItems.Start,
			justifyContent : sap.m.FlexJustifyContent.SpaceBetween
		}).addStyleClass("bottomLayout");
		this.oThumbnailVLayout = new sap.m.VBox({
			items : [ this.oTopLayout, this.oThumbnailChartLayout, this.oBottomLayout ],
			height : "130px"
		}).addStyleClass('stepThumbnail');
		this.oStepTitle = new sap.m.Text({
			text : '{/title}',
			textAlign : sap.ui.core.TextAlign.Center,
			wrapping : true,
			width : "200px"
		});
		this.oVChartLayout = new sap.m.VBox({
			items : [ this.oThumbnailVLayout, this.oStepTitle ],
			width : "200px"
		}).addStyleClass("sapApfStepLayout");
		var htmlWrapper = new sap.m.VBox({
			items : []
		}).addStyleClass("block-overlay-container");
		var self = this;
		htmlWrapper.addEventDelegate({
			onAfterRendering : function() {
				//Show Master Button to be displayed on detail footer bottom for mobile device
				var showMasterButton = new sap.m.Button({
					text : self.oCoreApi.getTextNotHtmlEncoded("showAnalyticalPath"),
					press : function() {
						self.oUiApi.getLayoutView().byId("detailFooter").removeAllContentLeft();
						self.oUiApi.getLayoutView().byId("applicationView").backToTopMaster();
					},
					lite : true,
					type : "Transparent"
				});
				//Events for hover and touch on step
				jQuery(htmlWrapper.getDomRef()).on("mouseenter", function() {
					jQuery(this).addClass("sapThemeBarBG");
					jQuery(this).css({
						"opacity" : "0.3"
					});
				});
				//On touch start show overlay with opacity 0.3
				//Mobile Device Bug Fix - on touch start prevent the default zoom 
				//which appears on double tap or hold on step
				jQuery(htmlWrapper.getDomRef()).on("touchstart", function(e) {
					//On Double Tap disable Zoom text focus and application 
					var t2 = e.timeStamp, t1 = $(this).data('lastTouch') || t2, dt = t2 - t1, fingers = e.originalEvent.touches.length;
					$(this).data('lastTouch', t2);
					if (!dt || dt > 500 || fingers > 1) {
						return; // not double-tap
					}
					e.preventDefault(); // double tap - prevent the zoom
					// also synthesize click events we just swallowed up
					$(this).trigger('click').trigger('click');
					jQuery(this).addClass("sapThemeBarBG");
					jQuery(this).css({
						"opacity" : "0"
					});
				});
				jQuery(htmlWrapper.getDomRef()).on("mouseleave", function() {
					jQuery(this).removeClass("sapThemeBarBG");
					jQuery(this).css({
						"opacity" : "1"
					});
				});
				jQuery(htmlWrapper.getDomRef()).on("touchend touchmove", function() {
					jQuery(this).removeClass("sapThemeBarBG");
					jQuery(this).css({
						"opacity" : "0"
					});
				});
				//Device Phone: Hide/Show the Master/Detail Page 
				//On click of step go to the detail page
				//Add the text on bottom of footer and tap of text
				//go back to the master view 
				if (sap.ui.Device.system.phone) {
					jQuery(htmlWrapper.getDomRef()).on("tap", function() {
						self.oUiApi.getLayoutView().getController().hideMaster();
						self.oUiApi.getLayoutView().byId("detailFooter").removeContentLeft(showMasterButton);
						self.oUiApi.getLayoutView().getController().addDetailFooterContentLeft(showMasterButton);
						self.oUiApi.getStepContainer().getController().drawStepContent();
					});
				}
			}
		});
		this.oVChartTiltleLayout = new sap.m.VBox({
			items : [ htmlWrapper, this.oVChartLayout ],
			width : "200px"
		}).addStyleClass("sapUiTableCCnt");
		return this.oVChartTiltleLayout;
	},
	createContent : function(oController) {
		var stepContent = this.stepContent();
		return stepContent;
	},
	toggleActiveStep : function() {
		var allSteps = this.oUiApi.getAnalysisPath().getCarousel().stepViews;
		for( var i in allSteps) {
			if (allSteps[i].oThumbnailVLayout.hasStyleClass('sapThemeBaseBG-asBackgroundColor')) {
				allSteps[i].oThumbnailVLayout.removeStyleClass('sapThemeBaseBG-asBackgroundColor');
				allSteps[i].oStepTitle.removeStyleClass('activeStepTitle');
				allSteps[i].oThumbnailVLayout.removeStyleClass('activeStepThumbnail');
				break;
			}
		}
		this.oThumbnailVLayout.addStyleClass('sapThemeBaseBG-asBackgroundColor');
		this.oStepTitle.addStyleClass('activeStepTitle');
		this.oThumbnailVLayout.addStyleClass('activeStepThumbnail');
	}
});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 * @class stepContainer
 * @name stepContainer
 * @memberOf sap.apf.ui.reuse.view
 * @description Holds the step in main area. Includes the step toolbar view and step representation view
 * @returns {stepContainerLayout}
 */
sap.ui.jsview("sap.apf.ui.reuse.view.stepContainer", {
	/**
	 * @this {sap.apf.ui.reuse.view.stepContainer}
	 *
	 */
	/**
	 * @memberOf sap.apf.ui.reuse.view.stepContainer
	 * @method getStepToolbar
	 * @see sap.apf.ui.reuse.view.stepToolbar
	 * @description Getter for step toolbar container 
	 * @returns stepToolbar view 
	 */
	getStepToolbar : function() {
		return this.oStepToolbar;
	},
	getControllerName : function() {
		return "sap.apf.ui.reuse.controller.stepContainer";
	},

	createContent : function(oController) {
		var oViewData = this.getViewData();
		this.oStepToolbar = sap.ui.view({viewName:"sap.apf.ui.reuse.view.stepToolbar", type:sap.ui.core.mvc.ViewType.JS,viewData :oViewData});
		this.stepLayout = new sap.ui.layout.VerticalLayout({
			content : [ this.oStepToolbar],
			width : "100%"
		});
		this.vLayout = new sap.ui.layout.VerticalLayout({
			content : this.stepLayout,
			width : "100%"
		});
		this.vLayout.setBusy(true);
		return this.vLayout; //holds chart and toolbar
	}

});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 * @class stepGallery
 * @name  stepGallery
 * @description Holds the available steps of configuration and displays them on overlay container
 * @memberOf sap.apf.ui.reuse.view
 * 
 */
sap.ui.jsview("sap.apf.ui.reuse.view.stepGallery", {
	getControllerName : function() {
		return "sap.apf.ui.reuse.controller.stepGallery";
	},
	createContent : function(oController) {
		this.oController = oController;
}
});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 * @class  stepToolbar
 * @name  stepToolbar
 * @description toolbar for a step shown in main area
 * @memberOf sap.apf.ui.reuse.view
 */
sap.ui.jsview("sap.apf.ui.reuse.view.stepToolbar", {
	getControllerName : function() {
		return "sap.apf.ui.reuse.controller.stepToolbar";
	},
	createContent : function(oController) {
		this.chartToolbar = new sap.ca.ui.charts.ChartToolBar({
			showLegend: true,
			showFullScreen: true
		});
		return this.chartToolbar;
	}
});
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/**
 * @class toolbar
 * @memberOf sap.apf.ui.reuse.view
 * @name toolbar
 * @description layout holds the Toolbar buttons: new , save, open, print
 */
sap.ui.jsview("sap.apf.ui.reuse.view.toolbar", {
	getControllerName : function() {
		return "sap.apf.ui.reuse.controller.toolbar";
	},
	createContent : function(oController) {
		// when metadata is not available, default values are set
		this.maxNumberOfSteps = 32;
		this.maxNumberOfPaths = 255;
		var self = this;
		var oViewData = this.getViewData();
		self.oCoreApi = oViewData.oCoreApi;
		self.oUiApi = oViewData.uiApi;
		var oTemplateNew = new sap.m.StandardListItem({
			icon : 'sap-icon://add-product',
			type : sap.m.ListType.Active,
			title : self.oCoreApi.getTextNotHtmlEncoded("new"),
			press : function() {
				self.getParent().close();
				self.oUiApi.getLayoutView().setBusy(true);
				oController.getNewAnalysisPathDialog();
				self.oUiApi.getLayoutView().setBusy(false);
			}
		});
		var oTemplateOpen = new sap.m.StandardListItem({
			icon : "sap-icon://open-folder",
			type : sap.m.ListType.Active,
			title : self.oCoreApi.getTextNotHtmlEncoded("open"),
			press : function() {
				self.oUiApi.getLayoutView().setBusy(true);
				self.getParent().close();
				oController.onOpenPathGallery();
			}
		});
		var oTemplateSave = new sap.m.StandardListItem({
			icon : "sap-icon://save",
			type : sap.m.ListType.Active,
			title : self.oCoreApi.getTextNotHtmlEncoded("save"),
			press : function() {
				self.getParent().close();
				if (self.oCoreApi.getSteps().length !== 0) {
					self.oUiApi.getLayoutView().setBusy(true);
					self.oCoreApi.readPaths(function(respObj, metaData, msgObj) {
						var bSaveAs = false;
						var paths = respObj.paths;
						if (metaData !== undefined) {
							self.maxNumberOfSteps = metaData.getEntityTypeMetadata().maximumNumberOfSteps;
							self.maxNumberOfPaths = metaData.getEntityTypeMetadata().maxOccurs;
						}
						if (msgObj === undefined && (typeof respObj === "object")) {
							oController.getSaveDialog(bSaveAs, function() {
							}, paths);
						} else {
							var oMessageObject = self.oCoreApi.createMessageObject({
								code : "6005",
								aParameters : []
							});
							oMessageObject.setPrevious(msgObj);
							self.oCoreApi.putMessage(oMessageObject);
						}
						self.oUiApi.getLayoutView().setBusy(false);
					});
				} else {
					oController.getDialogForNoPathAdded();
				}
			}
		});
		var oTemplateSaveAs = new sap.m.StandardListItem({
			icon : "sap-icon://save",
			type : sap.m.ListType.Active,
			title : self.oCoreApi.getTextNotHtmlEncoded("saveAs"),
			press : function() {
				self.getParent().close();
				if (self.oCoreApi.getSteps().length !== 0) {
					self.oUiApi.getLayoutView().setBusy(true);
					self.oCoreApi.readPaths(function(respObj, metaData, msgObj) {
						var bSaveAs = true;
						var paths = respObj.paths;
						if (metaData !== undefined) {
							self.maxNumberOfSteps = metaData.getEntityTypeMetadata().maximumNumberOfSteps;
							self.maxNumberOfPaths = metaData.getEntityTypeMetadata().maxOccurs;
						}
						if (msgObj === undefined && (typeof respObj === "object")) {
							oController.getSaveDialog(bSaveAs, function() {
							}, paths);
						} else {
							var oMessageObject = self.oCoreApi.createMessageObject({
								code : "6005",
								aParameters : []
							});
							oMessageObject.setPrevious(msgObj);
							self.oCoreApi.putMessage(oMessageObject);
						}
						self.oUiApi.getLayoutView().setBusy(false);
					});
				} else {
					oController.getDialogForNoPathAdded();
				}
			}
		});
		var oTemplateDelete = new sap.m.StandardListItem({
			icon : "sap-icon://delete",
			type : sap.m.ListType.Active,
			title : self.oCoreApi.getTextNotHtmlEncoded("delete"),
			press : function() {
				self.getParent().close();
				self.oUiApi.getLayoutView().setBusy(true);
				oController.onOpenPathGalleryWithDelete();
			}
		});
		var oTemplatePrint = new sap.m.StandardListItem({
			icon : "sap-icon://print",
			type : sap.m.ListType.Active,
			title : self.oCoreApi.getTextNotHtmlEncoded("print"),
			press : function() {
				self.getParent().close();
				oController.doPrint();
			}
		});
		this.oActionListItem = new sap.m.List({
			items : [ oTemplateNew, oTemplateOpen, oTemplateSave, oTemplateSaveAs, oTemplateDelete, oTemplatePrint ]
		});
		return this.oActionListItem;
	}
});
jQuery.sap.declare('sap.apf.library-all');
jQuery.sap.declare('sap.apf.modeler.ui.controller.configurationListNew.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.modeler.ui.controller.titleBreadCrumb.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.modeler.ui.controller.toolbar.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.controller.analysisPath.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.controller.carousel.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.controller.deleteAnalysisPath.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.controller.layout.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.controller.messageHandler.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.controller.navigationTarget.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.controller.pathGallery.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.controller.step.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.controller.stepContainer.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.controller.toolbar.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.fragment.pathGallery.fragment'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.fragment.selectionDisplay.fragment'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.fragment.stepGallery.fragment'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.view.analysisPath.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.view.carousel.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.view.deleteAnalysisPath.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.view.facetFilter.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.view.messageHandler.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.view.navigationTarget.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.view.pathGallery.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.view.step.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.view.stepContainer.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.view.stepGallery.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.view.stepToolbar.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.apf.ui.reuse.view.toolbar.view'); // raw module, declared by SAPUI5 'AllInOne' Builder
if ( !jQuery.sap.isDeclared('sap.apf.core.constants') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare('sap.apf.core.constants');
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained


(function () {
    'use strict';
    /**
     * Constants of the core
     * @class sap.apf.core.constants
     */
    sap.apf.core.constants = sap.apf.core.constants || {};
    /**
     * The constants shall be returned from a representation with method getFilterMethodTypes.
     * @class filterMethodTypes
     * @memberOf sap.apf.core.constants
     */
    sap.apf.core.constants.filterMethodTypes = {
        /**
         * @public
         * @description selectionAsArray
         */
        selectionAsArray: 'saa',
        /**
         * @public
         * @description filter
         */
        filter: 'f'
    };
    /**
     * @class Enumeration for filter operators, that are supported in odata $filter part. See{@link sap.ui.model.FilterOperator}
     */
    sap.apf.core.constants.FilterOperators = sap.ui.model.FilterOperator;
    sap.apf.core.constants.BooleFilterOperators = {
        AND: "and",
        OR: "or",
        NOT: "not"
    };
    /**
     * @constant sap.apf.core.constants.aSelectOpt operators for filter terms.
     * @description All allowed constants, that can be used in filter terms.
     *              These constants correspond to the terms, that can be handled by
     *              the OData protocol.
     */
    sap.apf.core.constants.aSelectOpt = [sap.apf.core.constants.FilterOperators.EQ, sap.apf.core.constants.FilterOperators.NE, sap.apf.core.constants.FilterOperators.GT, sap.apf.core.constants.FilterOperators.LT,
        sap.apf.core.constants.FilterOperators.GE, sap.apf.core.constants.FilterOperators.LE, sap.apf.core.constants.FilterOperators.BT, sap.apf.core.constants.FilterOperators.StartsWith, sap.apf.core.constants.FilterOperators.Contains,
        sap.apf.core.constants.FilterOperators.EndsWith];
    /**
     * @class Constants for the resource location
     * @descriptions Properties in the configuration file for the resource locations
     */
    sap.apf.core.constants.resourceLocation = {
        /**
         * @public
         * @description webAppMessageConfiguration
         */
        applicationMessageDefinitionLocation: "applicationMessageDefinitionLocation",
        /**
         * @public
         * @description webAppMessageTextBundle
         */
        applicationMessageTextBundle: "applicationMessageTextBundle",
        /**
         * @public
         * @description apfUiTextBundle
         */
        apfUiTextBundle: "apfUiTextBundle",
        /**
         * @public
         * @description webAppTextBundle
         */
        applicationUiTextBundle: "applicationUiTextBundle",
        /**
         * @public
         * @description analyticalConfigurationLocation
         */
        analyticalConfigurationLocation: "analyticalConfigurationLocation"
    };
    /**
     * @namespace Constants for the message handling.
     */
    sap.apf.core.constants.message = {};
    /**
     * @class Message severity constants
     * @description Constants for the severity of a message object.
     * @memberOf sap.apf.core.constants.message.code
     */
    sap.apf.core.constants.message.severity = {
        /**
         * @public
         * @description fatal
         */
        fatal: "fatal",
        /**
         * @public
         * @description warning
         */
        warning: "warning",
        /**
         * @public
         * @description error
         */
        error: "error",
        /**
         * @public
         * @description technical error
         */
        technError: "technError"
    };
    /**
     * @description Unique text to identify an exception, that should be ignored by the message handler during
     * processing the window.onerror. This allows to stop the execution by throwing an error.
     */
    sap.apf.core.constants.message.code = {
        suppressFurtherException: "APFapf1972",
        errorCheck: "5100",
        errorCheckWarning: "5101",
        errorCheckConfiguration: "5102",
        errorCheckConfigurationWarning: "5103",
        errorExitTriggered: "5300",
        // messages, that exist without configuration, because they are used, before message configuration is loaded
        errorUnknown: "9000",
        //fatal messages, that occur during loading
        errorLoadConfig: "9001",
        errorStopProcessing: "9002",
        errorStartUp: "9003",
        errorLoadingRessource: "9007",
        wrongRessourcePath: "9008",
        missingAnalyticalConfig: "9009",
        errorLoadingAnalyticalConfig: "9010",
        errorInAnalyticalConfig: "9011",
        warningAnalyticalConfig: "9012"
    };
    /**
     * @class Event callback constants
     * @description Constants for the events triggered from apf
     * @memberOf sap.apf.core.constants
     */
    sap.apf.core.constants.eventTypes = {
        /**
         * @public
         * @description fired when the sap.apf.setContext is invoked.
         *            Callback function on this event will be executed under the context of API instance.
         *                The arguments can be an {object} or empty based on opening a path scenario and triggering a new path respectively.
         *                The {object} passed on opening a path is described below :
         *              {
	 *              	id - filterId,
	 *              	type - filterType,
	 *              	expressions - filterTopAnd expressions,
	 *              	terms - filterOr expressions
	 *              }
         */
        contextChanged: "contextChanged",
        printTriggered: "printTriggered",
        format: "format"
    };
    /**
     * @class Configuration object types
     * @description Object types supported by configuration factory
     * @memberOf sap.apf.core.constants
     */
    sap.apf.core.constants.configurationObjectTypes = {
        facetFilter: "facetFilter"
    };
    /**
     * @description Names for the services used internally to determine applications, configurations and text elements
     */
    sap.apf.core.constants.entitySets = {
        application: 'ApplicationQueryResults',
        configuration: 'AnalyticalConfigurationQueryResults',
        texts: 'TextElementQueryResults',
        logicalSystem: "SAPClientQuery",
        analysisPath: "AnalysisPathQueryResults",
        smartBusiness: "EVALUATIONS" //TODO Delete constant once SBHandler is deleted
    };
    /**
     * @description Default service root for modeler persistence services
     * This serviceRoot is used only for the modeler, the runtime has a different root. The
     * reason is: user roles with different authorizations, change configuration or read only.
     */
    sap.apf.core.constants.modelerPersistenceServiceRoot = "/sap/hba/r/apf/core/odata/modeler/AnalyticalConfiguration.xsodata";
    /**
     * @description Development language of property text files
     *
     */
    sap.apf.core.constants.developmentLanguage = "";
    /**
     * initial key for empty text
     */
    sap.apf.core.constants.textKeyForInitialText = "00000000000000000000000000000000";
    /**
     * @description Representation metadata supported types names
     *
     */
    sap.apf.core.constants.representationMetadata = {
        kind: {
            XAXIS: "xAxis",
            YAXIS: "yAxis",
            BUBBLEWIDTH: "bubbleWidth",
            BUBBLEHEIGHT: "bubbleHeight",
            SECTORSIZE: "sectorSize",
            LEGEND: "legend",
            SECTORCOLOR: "sectorColor",
            REGIONCOLOR: "regionColor",
            REGIONSHAPE: "regionShape",
            COLUMN: "column"
        }
    };
    /**
     * @description feedIetm id for vizFrame charts
     *
     */
    sap.apf.core.constants.vizFrame = {
        feedItemTypes: {
            CATEGORYAXIS: "categoryAxis",
            COLOR: "color",
            VALUEAXIS: "valueAxis",
            VALUEAXIS2: "valueAxis2",
            BUBBLEHEIGHT: "bubbleHeight",
            BUBBLEWIDTH: "bubbleWidth",
            SIZE: "size",
            SHAPE: "shape"
        }
    };


    /**
     * @class
     * @description Defaults for the application configuration.
     * @memberOf sap.apf.core.constants
     */
    sap.apf.core.constants.applicationConfiguration = {
        /**
         * @public
         * @description path of default application configuration file.
         */
        applicationConfigPath: "config/applicationConfiguration.json"
    };


}());

}; // end of sap/apf/core/constants.js
if ( !jQuery.sap.isDeclared('sap.apf.core.entityTypeMetadata') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.core.entityTypeMetadata");
/** 
 * @class Provides convenience functions for metadata handling.
 * @param {sap.apf.core.MessageHandler} oMessageHandler
 * @param {string} sEntityType 
 * @param {sap.apf.core.Metadata} oMetadata
 * @returns {sap.apf.core.EntityTypeMetadata}
 */
sap.apf.core.EntityTypeMetadata = function (oMessageHandler, sEntityType, oMetadata) {
	/**
	 * @description Contains 'entityTypeMetadata'.
	 * @returns {String}
	 */
	this.type = 'entityTypeMetadata';
	/**
	 * @description Returns all metadata for a property as object. 
	 * Property names of the returned object match the metadata attribute names (e.g. 'Name' or 'Nullable') except for the type information, i.e there is no property 'Type'. 
	 * All type information is enclosed in property 'dataType', which is another object.
	 * This object contains property 'EdmType' and optional additional properties belonging to the respective type.
	 * If no metadata could be determined for the property, the method will return an almost empty object that only contains the 'dataType' property for convenience: 
	 * { dataType : { } }. 
	 * @param {string} sProperty
	 * @returns {object}
	 */
	this.getPropertyMetadata = function (sProperty) {
		var result;
		result = oMetadata.getPropertyMetadata(sEntityType, sProperty);
		if (!result) {
			result = {
				dataType : {}
			};
		}
		return result;
	};
	
	/**
	 * @description Returns metadata annotations which includes extensions for OData 4.0 like "RequiresFilter"
	 * @returns {array}
	 */
	this.getEntityTypeMetadata = function() {
		return oMetadata.getEntityTypeAnnotations(sEntityType);
	};
	
	function checkArguments() {
		oMessageHandler.check(sEntityType && typeof sEntityType === 'string', 'sap.apf.core.entityTypeMetadata: incorrect value for parameter sEntityType');
		oMessageHandler.check(oMetadata && oMetadata.type && oMetadata.type === "metadata", 'sap.apf.core.entityTypeMetadata: incorrect value for parameter oMetadata');
	}
	
	checkArguments();
};

}; // end of sap/apf/core/entityTypeMetadata.js
if ( !jQuery.sap.isDeclared('sap.apf.core.messageDefinition') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.apf.core.messageDefinition");

sap.apf.core.messageDefinition = [
    {
        code: "3001",
        severity: "technError",
        text: "Text is not available for the following key: {0}"
    },
    {
        code: "5001",
        severity: "technError",
        text: "Request {3} to server failed with http status code {0}, http error message {1}, and server response {2}."
    },
    {
        code: "5002",
        severity: "error",
        description: "Error in OData request; update of analysis step {0} failed.",
        key: "5002"
    },
    {
        code: "5004",
        severity: "fatal",
        description: "Request with ID {0} does not exist in the analytical content configuration.",
        key: "5004"
    },
    {
        code: "5005",
        severity: "technError",
        text: "Required property {1} is missing in the filter of the OData request for entity type {0}."
    },
    {
        code: "5006",
        severity: "technError",
        text: "Inconsistency in data model; non-filterable property {1} is set as required filter for entity type {0}."
    },
    {
        code: "5015",
        severity: "fatal",
        description: "Service for request {0} is not defined in the analytical content configuration.",
        key: "5015"
    },
    {
        code: "5016",
        severity: "technError",
        text: "Mandatory parameter key property {0} is missing in filter."
    },
    {
        code: "5018",
        severity: "fatal",
        description: "Metadata request {0} failed.",
        key: "5018"
    },
    {
        code: "5019",
        severity: "technError",
        text: "System query option $orderby for property {1} removed from OData request for entity type {0}."
    },
    {
        code: "5020",
        severity: "fatal",
        description: "Analytical content configuration is not available.",
        key: "5020"
    },
    {
        code: "5021",
        severity: "error",
        description: "Error during server request; session timeout occurred.",
        key: "5021"
    },
    {
    	code: "5022",
    	severity: "fatal",
    	description: "Analytical configuration with ID {0} is not available.",
    	key: "5022"
    },
    {
    	code: "5023",
    	severity: "fatal",
    	description: "Texts could not be loaded for Analytical configuration with ID {0}.",
    	key: "5023"
    },
    {
    	code: "5024",
    	severity: "fatal",
    	description: "URL Parameter for Analytical Configuration ID must contain the ID of the application and the ID of the Analytical configuration seperated by a dot.",
    	key: "5024"
    },
    {
        code: "5025",
        severity: "fatal",
        description: "Value for SAP client has not been provided at startup of the application.",
        key: "5025"
    },
    {
        code: "5026",
        severity: "fatal",
        description: "Logical system cannot be determined for SAP client {0}. ",
        key: "5026"
    },
    {
        code: "5027",
        severity: "technError",
        text: "Inconsistent parameters; analysis path cannot be saved. Path ID: {0}, path name: {1}, callback function {2}"
    },
    {
        code: "5028",
        severity: "technError",
        text: "Binding with ID {0} contains a representation without ID."
    },
    {
        code: "5029",
        severity: "technError",
        text: "Binding with ID {0} contains a duplicated representation ID."
    },
    {
        code: "5030",
        severity: "technError",
        text: "Constructor property of representation type ID {0} does not contain a module path to a valid function."
    },
    {
        code: "5031",
        severity: "technError",
        text: "Argument for method 'setApplicationMessageCallback' is not a function."
    },
    {
        code: "5032",
        severity: "technError",
        text: "System query option {1} unknown in request for entity type {0}."
    },
    {
        code: "5033",
        severity: "technError",
        text: "Unsupported type {0} in configuration object provided."
    },
    {
        code: "5034",
        severity: "technError",
        text: "Facet filter configuration attribute 'property' missing."
    },
    {
        code: "5035",
        severity: "technError",
        text: "Function module path contained in property preselectionFuntion of facet filter ID {0} does not contain a valid function."
    },
    {
    	code: "5036",
    	severity: "technError",
    	text: "Start paramater step id {0} is not existing."
    },
    {
    	code: "5037",
    	severity: "technError",
    	text: "Start paramater representation id {0} is not existing."
    },
    {
    	code: "5038",
    	severity: "technError",
    	text: "Environment for sap.ushell.Container is not existing."
    },
    {
    	code: "5039",
    	severity: "technError",
    	text: "Error while pushing content to the ushell container"
    },
    {
    	code: "5040",
    	severity: "technError",
    	text: "Error while fetching content from the ushell container"
    },
    {
        code: "5100",
        severity: "fatal",
        description: "Unexpected internal error: {0}. Contact SAP.",
        key: "5100"
    },
    {
        code: "5101",
        severity: "technError",
        text: "Unexpected internal error: {0}. Contact SAP."
    },
    {
        code: "5102",
        severity: "fatal",
        description: "Wrong definition in analytical content configuration: {0}",
        key: "5102"
    },
    {
        code: "5103",
        severity: "technError",
        text: "Wrong definition in analytical content configuration."
    },
    {
        code: "5104",
        severity: "technError",
        text: "Wrong filter mapping definition in analytical content configuration"
    },
    {
        code: "5200",
        severity: "technError",
        text: "Server error during processing of path: {0} {1}"
    },
    {
        code: "5201",
        severity: "error",
        description: "Unknown server error.",
        key: "5201"
    },
    {
        code: "5202",
        severity: "technError",
        text: "Persistence service call returned '405 - Method not allowed'."
    },
    {
        code: "5203",
        severity: "technError",
        text: "Bad request; data is structured incorrectly."
    },
    {
        code: "5204",
        severity: "error",
        description: "Error during server request; maximum number of analysis steps exceeded.",
        key: "5204"
    },
    {
        code: "5205",
        severity: "error",
        description: "Error during server request; maximum number of analysis paths exceeded.",
        key: "5205"
    },
    {
        code: "5206",
        severity: "error",
        description: "Access forbidden; insufficient privileges",
        key: "5206"
    },
    {
        code: "5207",
        severity: "error",
        description: "Inserted value too large; probably maximum length of analysis path name exceeded",
        key: "5207"
    },
    {
        code: "5208",
        severity: "error",
        description: "Error during path persistence; request to server can not be proceed due to invalid ID.",
        key: "5208"
    },
    {
        code: "5210",
        severity: "error",
        description: "Error during opening of analysis path; see log.",
        key: "5210"
    },
    {
        code: "5211",
        severity: "error",
        description: "Server response contains undefined path objects.",
        key: "5211"
    },
    {
        code: "5212",
        severity: "error",
        description: "Metadata file of application {0} could not be accessed.",
        key: "5212"
    },
    {
        code: "5213",
        severity: "error",
        description: "Text file of application {0} could not be accessed.",
        key: "5213"
    },
    {
        code: "5300",
        severity: "fatal",
        description: "You must log out of the application due to a critical error.",
        key: "5300"
    },
    {
        code: "6001",
        severity: "fatal",
        description: "Missing {0} in the configuration; contact your administrator.",
        key: "6001"
    },
    {
        code: "6000",
        severity: "error",
        description: "Data is not available for the {0} step.",
        key: "6000"
    },
    {
        code: "6002",
        severity: "error",
        description: "Missing {0} for {1} in the configuration; contact your administrator.",
        key: "6002"
    },
    {
        code: "6003",
        severity: "error",
        description: "Missing {0} in the configuration; contact your administrator.",
        key: "6001"
    },
    {
        code: "6004",
        severity: "technError",
        text: "Metadata not available for step {0}."
    },
    {
        code: "6005",
        severity: "error",
        description: "Server request failed. Unable to read paths.",
        key: "6005"
    },
    {
        code: "6006",
        severity: "error",
        description: "Server request failed. Unable to save path {0}.",
        key: "6006"
    },
    {
        code: "6007",
        severity: "error",
        description: "Server request failed. Unable to update path {0}.",
        key: "6007"
    },
    {
        code: "6008",
        severity: "error",
        description: "Server request failed. Unable to open path {0}.",
        key: "6008"
    },
    {
        code: "6009",
        severity: "error",
        description: "Server request failed. Unable to delete path {0}.",
        key: "6009"
    },
    {
        code: "6010",
        severity: "technError",
        description: "Data is not available for filter {0}",
        key: "6010"
    },
    {
        code: "6011",
        severity: "fatal",
        description: "Smart Business service failed.Please try later",
        key: "6011"
    },
    {
        code: "7000",
        severity: "error",
        description: "Missing {0} in the configuration; contact your administrator.",
        key: "6001"
    }
];

}; // end of sap/apf/core/messageDefinition.js
if ( !jQuery.sap.isDeclared('sap.apf.core.messageObject') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.core.messageObject");

/**
 * @public
 * @class The message object represents the APF specific message object for detailed evaluation. The message object shall be created by method {@link sap.apf.Api#createMessageObject}.
 * @name sap.apf.core.MessageObject
 * @param {object} oConfig 
 */
sap.apf.core.MessageObject = function (oConfig) {
	// private vars
	var sCode = oConfig.code;
	var aParameters = oConfig.aParameters || [];
	var oCallingObject = oConfig.oCallingObject;
	var sMessage = "";
	var sSeverity = "";
	var oPrevious;
	var dtTimestamp = new Date();
    var rawText = oConfig.rawText;
    /**
	 * @description Contains 'messageObject'
	 * @returns {string}
	 */
	this.type = "messageObject";
	// public function
	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#getCode
	 * @description Returns the message code.
	 * @returns {string}
	 */
	this.getCode = function () {
		return sCode;
	};
	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#setCode
	 * @description Sets the code, that classifies the message.
	 * @param {string} code 
	 * @returns undefined
	 */
	this.setCode = function (code) {
		sCode = code;
	};
	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#hasRawText
	 * @description Returns true, if a raw text is set. 
	 * @returns {boolean}
	 */
	this.hasRawText = function() {
		return (rawText !== undefined);
	};
	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#getRawText
	 * @description Returns raw text. 
	 * @returns {string}
	 */
	this.getRawText = function() {
		return rawText;
	};

	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#getMessage
	 * @description Returns the message text.
	 * @returns {string}
	 */
	this.getMessage = function () {
		return sMessage;
	};

	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#setMessage
	 * @description Sets the message text.
	 * @param {string} sTextMessage 
	 * @returns undefined
	 */
	this.setMessage = function (sTextMessage) {
		sMessage = sTextMessage;
	};

	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#setSeverity
	 * @description Sets the severity , which classifies the message.
     * @param {string} severity Only for to build in error messages. Allowed values are defined in {@link sap.apf.constants.severity}.
	 * @returns undefined
	 */
	this.setSeverity = function (severity) {
		sSeverity = severity;
	};

	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#getSeverity
	 * @description Returns the severity.
	 * @returns {string}
	 */
	this.getSeverity = function () {
		return sSeverity;
	};
	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#setPrevious
	 * @description Sets the previous message object. One can add a message object to this message object, that describes a previous message. 
	 * The message in the previous message object will also be displayed in the log (as previous entry). 
	 * @param {sap.apf.core.MessageObject} oPreviousMessageObject 
	 * @returns undefined
	 */
	this.setPrevious = function (oPreviousMessageObject) {
		oPrevious = oPreviousMessageObject;
	};
	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#getPrevious
	 * @description Gets the previous message object. 
	 * @returns {sap.apf.core.MessageObject} || undefined
	 */
	this.getPrevious = function () {
		return oPrevious;
	};
	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#getCallingObject
	 * @description Returns the calling object
	 * @returns {object}
	 */
	this.getCallingObject = function () {
		return oCallingObject;
	};

	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#getParameters
	 * @description Returns the parameter which were passed over
	 * @returns {array}
	 */
	this.getParameters = function () {
		return aParameters;
	};
	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#getStack
	 * @description Returns the stack of the error object to get the line number and source file
	 * @returns {string}
	 */
	this.getStack = function () {
		if (this.stack) {
			return this.stack;
		} 
		return "";
	};
	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#getTimestamp
	 * @description Returns the time stamp of the message object in seconds after 1970
	 * @returns {number}
	 */
	this.getTimestamp = function () {
		return dtTimestamp.getTime();
	};
	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#getTimestampAsdateObject
	 * @description Returns the time stamp of the message object as a date
	 * @returns {date}
	 */
	this.getTimestampAsdateObject = function () {
		return dtTimestamp;
	};
	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#getJQueryVersion
	 * @description Returns the version of jQuery
	 * @returns {string}
	 */
	this.getJQueryVersion = function () {
		return jQuery().jquery;
	};
	/**
	 * @public
	 * @function
	 * @name sap.apf.core.MessageObject#getSapUi5Version
	 * @description Returns the version of SAP UI5
	 * @returns {string}
	 */
	this.getSapUi5Version = function () {
		return sap.ui.version;
	};
	// private function
};
// set Prototype to get a JavaScript API Message Object
sap.apf.core.MessageObject.prototype = new Error();
sap.apf.core.MessageObject.prototype.constructor = sap.apf.core.MessageObject;

}; // end of sap/apf/core/messageObject.js
if ( !jQuery.sap.isDeclared('sap.apf.core.metadataFactory') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.core.metadataFactory");

/**
 * @class This class creates and manages metadata and entity type metadata instances. 
 * The class assures that there is a single metadata instance per service root and
 * that there is a single entity type metadata instance per service root and and entity type.
 */
sap.apf.core.MetadataFactory = function (oInject) {
	/**
	 * @description Returns type of metadataFactory.
	 * @returns {String}
	 */
	this.type = "metadataFactory";

    var that = this;
    var oMessageHandler = oInject.messageHandler;
    var oConfigurationFactory = oInject.configurationFactory;
    var fnHashtable = oInject.hashtable;
	var fnMetadata = oInject.metadata;
	var fnEntityTypeMetadata = oInject.entityTypeMetadata;
    var fnMetadataFacade = oInject.metadataFacade;

	//delete properties from oInject, which are not necessary to be transferred to metadata instances 
	delete oInject.metadata;
	delete oInject.entityTypeMetadata;
    delete oInject.metadataFacade;
    delete oInject.metadataProperty;
    delete oInject.configurationFactory;
	
	var oMetadataInstances = new fnHashtable(oMessageHandler);

	// Public functions
	/**
	 * @description Returns metadata object that represents metadata corresponding to the service document.
	 * @param {string} sAbsolutePathToServiceDocument Path to the service document
	 * @returns {sap.apf.core.Metadata}
	 */
	this.getMetadata = function (sAbsolutePathToServiceDocument) {
		var metadataCandidate;
		if (oMetadataInstances.hasItem(sAbsolutePathToServiceDocument) === false) {
			metadataCandidate = new fnMetadata(oInject, sAbsolutePathToServiceDocument);
			if(!metadataCandidate.failed) {
				oMetadataInstances.setItem(sAbsolutePathToServiceDocument, {
					metadata : metadataCandidate
				});
			} else {
				return;
			}
		}
		return oMetadataInstances.getItem(sAbsolutePathToServiceDocument).metadata;
	};
	/**
	 * @description Returns metadata object that represents metadata corresponding to the service document and an entity type that belongs to the service.
	 * @param {string} sAbsolutePathToServiceDocument Absolute path to the service document
	 * @param {string} sEntityType Entity type
	 * @returns {sap.apf.core.EntityTypeMetadata}
	 */
	this.getEntityTypeMetadata = function (sAbsolutePathToServiceDocument, sEntityType) {
		var oEntityTypes;
		var oMetadata = this.getMetadata(sAbsolutePathToServiceDocument);

		oEntityTypes = oMetadataInstances.getItem(sAbsolutePathToServiceDocument).entityTypes;
		if (!oEntityTypes) {
			oEntityTypes = new fnHashtable(oMessageHandler);
			oMetadataInstances.getItem(sAbsolutePathToServiceDocument).entityTypes = oEntityTypes;
		}
		if (!oEntityTypes.getItem(sEntityType)) {
			oEntityTypes.setItem(sEntityType, new fnEntityTypeMetadata(oMessageHandler, sEntityType, oMetadata));
		}
		return oEntityTypes.getItem(sEntityType);
	};
	/**
	 * @description Returns instance of {sap.apf.core.MetadataFacade}
	 * @returns {sap.apf.core.MetadataFacade}
	 */
    this.getMetadataFacade = function (sAbsolutePathToServiceDocument) {
            return new fnMetadataFacade({
                messageHandler : oMessageHandler,
                metadataProperty : sap.apf.core.MetadataProperty,
                metadataFactory : that
            }, sAbsolutePathToServiceDocument);
    };
    /**
	 * @description Returns service documents
	 * @returns {Array}
	 */
    this.getServiceDocuments = function () {
        return oConfigurationFactory.getServiceDocuments();
    };
    
    /**
	 * @description Returns all entity sets of service
	 * @returns {Array}
	 */
    this.getEntitySets = function(sService) {
    	var oMetadata = this.getMetadata(sService);
    	return oMetadata.getEntitySets();
    };
};

}; // end of sap/apf/core/metadataFactory.js
if ( !jQuery.sap.isDeclared('sap.apf.core.metadataProperty') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.core.metadataProperty");

/** 
 * @class Provides convenience functions for accessing attributes of a metadata property
 * @param {Object} oAttributes - Attributes (key value pairs) of a metadata property
 * @returns {sap.apf.core.MetadataProperty}
 */
sap.apf.core.MetadataProperty = function (oAttributes) {
	// Private vars
	var that = this;
	var bKey = false;
	var bParameterEntitySetKeyProperty = false;
	// Public functions
	/**
	 * @description If this property is a key, then a boolean true is returned. Otherwise, boolean false is returned. 
	 * @returns {Boolean}
	 */
	this.isKey = function (){
		return bKey;
	};
	/**
	 * @description If this property is a parameter key property, then a boolean true is returned. Otherwise, boolean false is returned. 
	 * @returns {boolean}
	 */
	this.isParameterEntitySetKeyProperty = function (){
		return bParameterEntitySetKeyProperty;
	};
	/**
	 * @description Returns the value for a given attribute. 
	 * @param {String} sName - Attribute name
	 * @returns {boolean|string|number} 
	 */
	this.getAttribute = function(sName){
		if(typeof this[sName] !== "function"){
			return this[sName];
		}
	};
	
	// Private functions
	/**
	 * @private
	 * @description Adds an attribute (key value pair) directly to itself. 
	 * If name already exists, the new value will be ignored. It is not possible to add an attribute with a method name of sap.apf.core.MetadataProperty. 
	 * @param {String} sName - Attribute name
	 * @param {String} value - Attribute value, which can be of type string, number or boolean
	 * @returns {sap.apf.core.MetadataProperty}
	 */
	function addAttribute(sName, value) {
		switch(sName){
		case "isKey":
			if(value === true){
				bKey = true;
			}
			break;
		case "isParameterEntitySetKeyProperty":
			if(value === true){
				bParameterEntitySetKeyProperty = true;
			}
			break;
		default: 
			if(typeof that[sName] !== "function"){
				that[sName] = value; 
			}
		}
		return that;
	}
	
	function initialize(){
		for(var name in oAttributes){
			switch (name) {
				case "dataType":
					for(var dataTypeName in oAttributes.dataType){
						addAttribute(dataTypeName, oAttributes.dataType[dataTypeName]);
					}
					break;
				default:
					addAttribute(name, oAttributes[name]);
				}
		}
	}
	initialize();
};
}; // end of sap/apf/core/metadataProperty.js
if ( !jQuery.sap.isDeclared('sap.apf.core.path') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.core.path");

/**
 * @private
 * @class Holds the order and state of the Step instances within the analysis path. The methods, that change the path or get state of the path
 * shall be called through the APF api (@see sap.apf.Api). The path is automatically created at startup of the APF.
 * @param oInject.messageHandler {sap.apf.core.MessageHandler} MessageHandler
 * @param oInject.coreApi {sap.apf.core.Instance} core API
 * @name sap.apf.core.Path
 */
sap.apf.core.Path = function(oInject) {

	// Public vars
	this.type = "path";

	// Private vars
    var oMessageHandler = oInject.messageHandler;
    var oCoreApi = oInject.coreApi;
	var that = this;
	var aStepInstances = [];
	var aActiveSteps = [];
	var nUpdateCounter = 0;

	this.destroy = function() {
		aActiveSteps = [];
		aStepInstances.forEach(function(step){
			step.destroy();
		});
		aStepInstances = [];
		that = undefined;
	};
	// Public functions
	/**
	 * @function
	 * @name sap.apf.core.Path.getSteps
	 * @description Gets the ordered sequence of all steps in an analysis path.
	 * The array is cloned such that the internal state of the path cannot be manipulated directly.
	 * Each step return a referenced to the object in the path. 
	 * Each step shall always be identified by the reference to its step object, 
	 * e.g. in methods like removeStep, moveStepToPosition, setActiveSteps, etc.
	 * @return copied array of steps
	 */
	this.getSteps = function() {
		return jQuery.extend(true, [], aStepInstances);
	};
	/**
	 * @function
	 * @name sap.apf.core.Path.addStep
	 * @description Adds a step to the analysis path. Has to be called by APF api.
	 * @param oStep
	 *            reference of the step which shall be added to the analysis
	 *            path
	 */
	this.addStep = function(oStep, fnStepProcessedCallback) {
		aStepInstances.push(oStep);
		that.update(fnStepProcessedCallback);
	};

	/**
	 * @description Sets a step as an active step in the path.
	 * @param oStep The step to be set active. The step has to be a member of the path, if not, an error will be thrown. A step may already be active. 
	 */
	this.makeStepActive = function(oStep) {
		var bStepIsInPath = this.stepIsInPath(oStep);
		oMessageHandler.check(bStepIsInPath, "An unknown step can't be an active step.", sap.apf.core.constants.message.code.errorCheckWarning);
		if (bStepIsInPath) {
			if (this.stepIsActive(oStep) === false) {
				aActiveSteps.push(oStep);
			}
		}
	};

	/**
	 * @description removes an active step
	 * @param oStep
	 *            step reference of step which shall become inactive
	 */
	this.makeStepInactive = function(oStep) {
		var bStepIsActive = this.stepIsActive(oStep);
		oMessageHandler.check(bStepIsActive, "Only an active step can be removed from the active steps.", sap.apf.core.constants.message.code.errorCheckWarning);

		if (bStepIsActive) {
			var indexOfStep = jQuery.inArray(oStep, aActiveSteps);
			aActiveSteps.splice(indexOfStep, 1);
		}
	};

	/**
	 * @description Checks whether a step is active
	 * @param oStep Step reference
	 * @returns boolean
	 */
	this.stepIsActive = function(oStep) {
		var indexOfStep = jQuery.inArray(oStep, aActiveSteps);
		if (indexOfStep >= 0) {
			return true;
		}
		return false;
	};

	/**
	 * @description checks whether a step is in the path
	 * @param oStep
	 *            step reference
	 * @returns boolean
	 */
	this.stepIsInPath = function(oStep) {
		var indexOfStep = jQuery.inArray(oStep, aStepInstances);
		if (indexOfStep >= 0) {
			return true;
		}
		return false;
	};
	/**
	 * @description Gets all active steps in an analysis path. 
	 * @return array of steps
	 */
	this.getActiveSteps = function() {
		return jQuery.extend(true, [], aActiveSteps);
	};
	/**
	 * @description The cumulative filter up to the active step (inclusive) is returned
	 * @returns {sap.apf.core.utils.Filter} cumulativeFilter
	 */
	this.getCumulativeFilterUpToActiveStep = function() {
		var deferred = jQuery.Deferred();
		oCoreApi.getCumulativeFilter().done(function(oContextFilter){
			var oCumulatedFilter = oContextFilter.copy();
			var i, len = aStepInstances.length;
			for (i = 0; i < len; i++) {
				
				oCumulatedFilter = oCumulatedFilter.addAnd(aStepInstances[i].getFilter());
				if (that.stepIsActive(aStepInstances[i])) {
					deferred.resolve(oCumulatedFilter);
					return;
				}
			}
			deferred.resolve(oCumulatedFilter);  
		});
		return deferred.promise();
	};
	/**
	 * @description Moves a step in the analysis path to the specified target position. 
	 * @param oStep The step object to be moved
	 * @param nPosition The target position. Must be a valid position in the path, between zero and length-1.
	 * @param fnStepProcessedCallback Callback for update of steps.
	 */
	this.moveStepToPosition = function(oStep, nPosition, fnStepProcessedCallback) {
		var nIndexOfStep = jQuery.inArray(oStep, aStepInstances);
		var targetPosition = nPosition;
		// the step to be moved must be a step of the path
		oMessageHandler.check(typeof nPosition === "number" && nPosition >= 0 && nPosition < aStepInstances.length, "Path: moveStepToPosition invalid argument for nPosition");
		oMessageHandler.check(nIndexOfStep >= 0 && nIndexOfStep < aStepInstances.length, "Path: moveStepToPosition invalid step");
		if (nIndexOfStep === nPosition) {
			return;
		}

		aStepInstances.splice(nIndexOfStep, 1);
		aStepInstances.splice(targetPosition, 0, oStep);
		this.update(fnStepProcessedCallback);
	};

	/**
	 * @description Removes a step from the analysis path.  
	 * @param oStep The step object to be removed. The reference must be an object contained in the path. Otherwise, an error will be thrown.  
	 * @param fnStepProcessedCallback Callback for update of steps.
	 */
	this.removeStep = function(oStep, fnStepProcessedCallback) {
		var bStepIsInPath = this.stepIsInPath(oStep);
		var bStepIsActive = this.stepIsActive(oStep);
		var nIndexOfStep = jQuery.inArray(oStep, aStepInstances);

		// the step to be removed must be a step of the path
		oMessageHandler.check(bStepIsInPath, "Path: remove step - invalid step");
		aStepInstances.splice(nIndexOfStep, 1);
		if (bStepIsActive) {
			this.makeStepInactive(oStep);
		}
		this.update(fnStepProcessedCallback);
		oStep.destroy();
	};

	/**
	 * @description The steps in the path will be updated. First it is detected,  whether a representation (chart) of a step 
	 * has changed its selection. If yes, then all subsequent steps will get  a new (cumulated) selection for retrieving data. 
	 * If a step has a new cumulated selection for retrieving data, then
	 * an OData request is executed for the particular step and the representation receives new data.
	 * @param {function} fnStepProcessedCallback is a callback function. This callback function is executed for every step in the path.
	 * The first argument of the callback function is the step instance. The second argument is a flag, that indicates, whether there was 
	 * an update or not.
	 * @param {boole} bContextChanged indicates, that the context has been changed
	 */
	this.update = function(fnStepProcessedCallback, bContextChanged) {
		if (!aStepInstances[0]) {
			return;
		}
		var nCurrentUpdateCount;
		var oCurrentStep = aStepInstances[0];
		oCoreApi.getCumulativeFilter().done(function(oContextFilter){
			var oCumulatedFilter = oContextFilter.copy();

			if (bContextChanged === true) {
				return;
			}

			nUpdateCounter++;
			nCurrentUpdateCount = nUpdateCounter;
			oCurrentStep.update(oCumulatedFilter, callbackAfterRequest);

			function callbackAfterRequest(oResponse, bStepNotUpdated) {
				var nIndexOfCurrentStep = jQuery.inArray(oCurrentStep, aStepInstances);
				var oMessageObject;

				if (nCurrentUpdateCount === nUpdateCounter) {
					// handle the error
					if (oResponse instanceof Error) {

						var nStepNumberForDisplay = nIndexOfCurrentStep + 1;
						oMessageObject = oMessageHandler.createMessageObject({
							code : "5002",
							aParameters : [ nStepNumberForDisplay ],
							callingObject : oCurrentStep
						});
						oMessageObject.setPrevious(oResponse);

						oMessageHandler.putMessage(oMessageObject);
						oCurrentStep.setData({ data : [], metadata : undefined}, oCumulatedFilter);
						fnStepProcessedCallback(oCurrentStep, true);
						nIndexOfCurrentStep++;
						oCurrentStep = aStepInstances[nIndexOfCurrentStep];
						while (oCurrentStep) {
							oCurrentStep.setData({ data : [], metadata : undefined}, oCumulatedFilter);
							fnStepProcessedCallback(oCurrentStep, true);
							nIndexOfCurrentStep++;
							oCurrentStep = aStepInstances[nIndexOfCurrentStep];
						}
						return;
					}

					if (!bStepNotUpdated) {
						oCurrentStep.setData(oResponse, oCumulatedFilter);
					}
					fnStepProcessedCallback(oCurrentStep, !bStepNotUpdated);
					// callback fnStepProcessedCallback could trigger a new path update. So the condition
					// for processing the step update has to be checked again
					if (nCurrentUpdateCount !== nUpdateCounter) {
						return;
					}
					oCurrentStep.determineFilter(oCumulatedFilter.copy(), callbackFromStepFilterProcessing);
					
				}
			}
				
			function callbackFromStepFilterProcessing(oFilter)	 {
				var nIndexOfCurrentStep = jQuery.inArray(oCurrentStep, aStepInstances);
				
			    oCumulatedFilter.addAnd(oFilter);
					
				oCurrentStep = aStepInstances[nIndexOfCurrentStep + 1];
				if (oCurrentStep) {
					oCurrentStep.update(oCumulatedFilter, callbackAfterRequest);
				} else {
					oCumulatedFilter = undefined;
				}
			}
		});
	};
	/**
	 * @description Returns the path as serializable object containing the steps,  and the indices of the active steps. 
	 * @returns {object} Serializable path in the following format: { path : { steps: [serializableSteps],  indicesOfActiveStep:[num] }, context:serializableFilter}.
	 */
	this.serialize = function() {
		return {
			path : {
				steps : getSerializedSteps(),
				indicesOfActiveSteps : getIndicesOfActiveSteps()
			}	
		}; 
	};
	/**
	 * @description Restores a path with the information given in a serializable path object. 
	 * @param {object} oSerializablePath Serializable path in the following format: { path : { steps: [serializableSteps],  indicesOfActiveStep:[num] }, context:serializableFilter}.
	 * @returns undefined
	 */
	this.deserialize = function(oSerializablePath) {
		var oContextFilter;
		if(oSerializablePath.context) {
		    oContextFilter = new sap.apf.utils.Filter(oMessageHandler);
		    oContextFilter.deserialize(oSerializablePath.context);
		    oCoreApi.setContext(oContextFilter);
		}
		addStepsToPathAndDeserialize(oSerializablePath.path.steps, this);
		makeStepsActive(oSerializablePath.path.indicesOfActiveSteps, this);
	};

	// private functions
	function getIndicesOfActiveSteps() {
		var aIndicesOfActiveSteps = [];
		for( var i = 0; i < aStepInstances.length; i++) {
			for( var j = 0; j < aActiveSteps.length; j++) {
				if (aStepInstances[i] === aActiveSteps[j]) {
					aIndicesOfActiveSteps.push(i);
				}
			}
		}
		return aIndicesOfActiveSteps;
	}

	function getSerializedSteps() {
		var aSerializedSteps = [];
		for( var i = 0; i < aStepInstances.length; i++) {
			aSerializedSteps.push(aStepInstances[i].serialize());
		}
		return aSerializedSteps;
	}

	function addStepsToPathAndDeserialize(aSerializedSteps, oContext) {
		//deactivate update during deserialization
		var fnSave = oContext.update;
		oContext.update = function() {
		};
		var i = 0;
		for(i = 0; i < aSerializedSteps.length; i++) {
			oCoreApi.createStep(aSerializedSteps[i].stepId);
		}
		for(i = 0; i < aStepInstances.length; i++) {
			aStepInstances[i].deserialize(aSerializedSteps[i]);
		}

		//activate update after deserialization
		oContext.update = fnSave; 
	}
	function makeStepsActive(aIndicesOfActiveSteps, oContext) {
		for( var i = 0; i < aIndicesOfActiveSteps.length; i++) {
			var nIndex = aIndicesOfActiveSteps[i];
			oContext.makeStepActive(aStepInstances[nIndex]);
		}
	}
};

}; // end of sap/apf/core/path.js
if ( !jQuery.sap.isDeclared('sap.apf.core.persistence') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.apf.core.persistence");


(function() {
	'use strict';
/**
 * @class Persistence storing paths on server side
 * @returns {sap.apf.core.Persistence}
 */
sap.apf.core.Persistence = function(oInject) {
	var that = this;
	var logicalSystem;
	
	/**
	 * @description Creates a data object based on the state of the current path and stores it on the server.
	 * @param {string} sName Name of the path.
	 * @param {function} fnCallback(oResponse, oEntityMetadata, oMessageObject)
	 * @param {object} [oExternalObject] Object containing non-core objects to be serialized
	 * @param {object} [oExternalObject.filterIdHandler] Serializable FilterIdHandler
	 */
	this.createPath = function(sName, fnCallback, oExternalObject) {
		var oRequest;
		var oSerializablePath = oInject.coreApi.serializePath();
		if (oExternalObject) {
			oSerializablePath.filterIdHandler = oExternalObject.filterIdHandler;
			oSerializablePath.startFilterHandler = oExternalObject.startFilterHandler;
		}
		var oStructuredPath = getStructuredAnalysisPath(oSerializablePath);
		getLogicalSystemAsPromise().then(function(logicalSystem) {
			
			oRequest = {
				data : {
					AnalysisPath : "",
					AnalysisPathName : sName,
					LogicalSystem : logicalSystem,
					ApplicationConfigurationURL : oInject.coreApi.getApplicationConfigurationURL(),
					SerializedAnalysisPath : JSON.stringify(oSerializablePath),
					StructuredAnalysisPath : JSON.stringify(oStructuredPath)
				},
				method : "POST"
			};
			if (oInject.coreApi.getStartParameterFacade().getAnalyticalConfigurationId()) {
				oRequest.data.AnalyticalConfiguration = oInject.coreApi.getStartParameterFacade().getAnalyticalConfigurationId().configurationId;	
			}
			sendRequest(oRequest, fnRequestCallback.bind(that));
		}, function(messageObject) {
			fnCallback({
				oResponse : undefined,
				status : "failed"
			}, {}, messageObject);
		});
		function fnRequestCallback(oResponse, oEntityTypeMetadata, messageObject) {
			if (messageObject) {
				fnCallback({
					oResponse : oResponse,
					status : "failed"
				}, oEntityTypeMetadata, messageObject);
			} else {
				oInject.messageHandler.check(oResponse && oResponse.data && oResponse.statusCode === 201 && oResponse.statusText === "Created", "Persistence create Path - proper response");
				fnCallback({
					AnalysisPath : oResponse.data.AnalysisPath,
					status : "successful"
				}, oEntityTypeMetadata, messageObject);
			}
		}
	};
	/**
	 * @description Reads all stored paths from server.
	 * @param {function} fnCallback This callback function is called after function readPaths has been executed.
	 * @param {function} fnCallback(oResponse, oEntitiyMetadata, oMessageObject) 
	 */
	this.readPaths = function(fnCallback) {
		var oRequest = {
			method : "GET"
		};
		sendRequest(oRequest, fnRequestCallback.bind(this));
		function fnRequestCallback(oResponse, oEntityTypeMetadata, oMessageObject) {
			if (!oMessageObject && oResponse && oResponse.data && oResponse.data.results) {
				for( var i in oResponse.data.results) {
					oResponse.data.results[i].StructuredAnalysisPath = JSON.parse(oResponse.data.results[i].StructuredAnalysisPath);
				}
			} else if (!oMessageObject || oResponse.statusCode !== 200 || oResponse.statusText !== "OK") {
				oMessageObject = oInject.messageHandler.createMessageObject({
					code : '5211'
				});
			}
			if (oMessageObject) {
				fnCallback({
					oResponse : oResponse,
					status : "failed"
				}, oEntityTypeMetadata, oMessageObject);
			} else {
				fnCallback({
					paths : oResponse.data.results,
					status : "successful"
				}, oEntityTypeMetadata, oMessageObject);
			}
		}
	};
	/**
	 * @description Deletes a path. 
	 * @param {String} sAnalysisPathId GUID to identify the path
	 * @param {function} fnCallback(oResponse, oEntitiyMetadata, oMessageObject) 
	 */
	this.deletePath = function(sAnalysisPathId, fnCallback) {
		var oRequest = {
			method : "DELETE"
		};
		sendRequest(oRequest, fnRequestCallback.bind(this), sAnalysisPathId);
		function fnRequestCallback(oResponse, oEntityTypeMetadata, oMessageObject) {
			if ((oResponse.statusCode !== 204 || oResponse.statusText !== "No Content") && (!oMessageObject)) {
				oMessageObject = oInject.messageHandler.createMessageObject({
					code : 5201
				});
				oMessageObject.setPrevious(oInject.messageHandler.createMessageObject({
					code : 5200,
					aParameters : [ oResponse.statusCode, oResponse.statusText ]
				}));
			}
			if (oMessageObject) {
				fnCallback({
					oResponse : oResponse,
					status : "failed"
				}, oEntityTypeMetadata, oMessageObject);
			} else {
				fnCallback({
					status : "successful"
				}, oEntityTypeMetadata, oMessageObject);
			}
		}
	};
	/**
	 * @description Modifies a data object based on the state of the current path and overwrites the old path on the server. 
	 * @param {String} sAnalysisPathId GUID to identify the path
	 * @param {String} sName name of the path
	 * @param {function} fnCallback(oResponse, oEntitiyMetadata, oMessageObject)
	 * @param {object} [oExternalObject] Object containing non-core objects to be serialized
	 * @param {object} [oExternalObject.filterIdHandler] Serializable FilterIdHandler
	 */
	this.modifyPath = function(sAnalysisPathId, sName, fnCallback, oExternalObject) {
		var oSerializablePath = oInject.coreApi.serializePath();
		if (oExternalObject) {
			oSerializablePath.filterIdHandler = oExternalObject.filterIdHandler;
			oSerializablePath.startFilterHandler = oExternalObject.startFilterHandler;
		}
		var oStructuredPath = getStructuredAnalysisPath(oSerializablePath);
		getLogicalSystemAsPromise().then(function(logicalSystem) {
			var oRequest = {
				data : {
					AnalysisPathName : sName,
					LogicalSystem : logicalSystem,
					ApplicationConfigurationURL : oInject.coreApi.getApplicationConfigurationURL(),
					SerializedAnalysisPath : JSON.stringify(oSerializablePath),
					StructuredAnalysisPath : JSON.stringify(oStructuredPath)
				},
				method : "PUT"
			};
			sendRequest(oRequest, fnRequestCallback.bind(this), sAnalysisPathId);
		}, function(messageObject) {
			fnCallback({
				oResponse : undefined,
				status : "failed"
			}, {}, messageObject);
		});
		function fnRequestCallback(oResponse, oEntityTypeMetadata, oMessageObject) {
			if ((oResponse.statusCode !== 204 || oResponse.statusText !== "No Content") && (!oMessageObject)) {
				oMessageObject = oInject.messageHandler.createMessageObject({
					code : 5201
				});
				oMessageObject.setPrevious(oInject.messageHandler.createMessageObject({
					code : 5200,
					aParameters : [ oResponse.statusCode, oResponse.statusText ]
				}));
			}
			if (oMessageObject) {
				fnCallback({
					oResponse : oResponse,
					status : "failed"
				}, oEntityTypeMetadata, oMessageObject);
			} else {
				fnCallback({
					AnalysisPath : sAnalysisPathId,
					status : "successful"
				}, oEntityTypeMetadata, oMessageObject);
			}
		}
	};
	/**
	 * @description Gets the stored path and deserializes it in the runtime environment. As a result, the current path is replaced
	 * by the path, that has been loaded from the server.
	 * @param {String} sAnalysisPathId GUID to identify the path
	 * @param {function} fnCallback(oResponse, oEntitiyMetadata, oMessageObject) 
	 * @param {Number} nActiveStep active step of current path
	 */
	this.openPath = function(sAnalysisPathId, fnCallback, nActiveStep) {
		var oRequest = {
			method : "GET"
		};
		sendRequest(oRequest, fnRequestCallback.bind(this), sAnalysisPathId);
		function fnRequestCallback(oResponse, oEntityTypeMetadata, oMessageObject) {
			var oMessageObjectForUI;
			if (!oMessageObject && oResponse && oResponse.statusCode === 200 && oResponse.data && oResponse.data.SerializedAnalysisPath) {
				oResponse.data.SerializedAnalysisPath = JSON.parse(oResponse.data.SerializedAnalysisPath);
				oMessageObject = createPathFromReceivedData(oResponse.data, nActiveStep);
			}
			if (oMessageObject) {
				oMessageObjectForUI = oInject.messageHandler.createMessageObject({
					code : '5210'
				});
				oMessageObjectForUI.setPrevious(oMessageObject);
				oInject.messageHandler.putMessage(oMessageObjectForUI);
			}
			if (oMessageObjectForUI) {
				fnCallback({
					oResponse : oResponse,
					status : "failed"
				}, oEntityTypeMetadata, oMessageObjectForUI);
			} else {
				fnCallback({
					path : oResponse.data,
					status : "successful"
				}, oEntityTypeMetadata, oMessageObjectForUI);
			}
		}
	};
	function sendRequest(oRequest, fnLocalCallback, sAnalysisPathId) {
		var fnSuccess = function(oData, oResponse) {
			fnLocalCallback(oResponse, getMetadata(), undefined);
		};
		var fnError = function(oError) {
			var oMessageObject;
			if (oError.messageObject && oError.messageObject.getCode && oError.messageObject.getCode() === 5021) { // timeout
				fnLocalCallback(oError, getMetadata(), oError.messageObject);
				return;
			}
			var sServerSideCode = checkForErrorCode(oError.response.body); // server side error code check				
			if (sServerSideCode !== undefined) {
				oMessageObject = oInject.messageHandler.createMessageObject({
					code : sServerSideCode
				});
			}
			if (oError.response.body.match("274")) { // Inserted value too large; probably maximum length of analysis path name exceeded
				oMessageObject = oInject.messageHandler.createMessageObject({
					code : '5207'
				});
			}
			if (oError.response.statusCode === 400) { // Bad request; data is structured incorrectly
				oMessageObject = oInject.messageHandler.createMessageObject({
					code : '5203'
				});
			}
			if (oError.response.statusCode === 403) { // Access forbidden; insufficient privileges
				oMessageObject = oInject.messageHandler.createMessageObject({
					code : '5206'
				});
			}
			if (oError.response.statusCode === 405) { // Method not allowed; probably incorrect URL parameter.
				oMessageObject = oInject.messageHandler.createMessageObject({
					code : '5202'
				});
			}
			if (oError.response.statusCode === 404) { // Error during path persistence; request to server can not be proceed due to invalid ID
				oMessageObject = oInject.messageHandler.createMessageObject({
					code : '5208'
				});
			}
			if (!oMessageObject && oError.response.statusCode === 500) { // Server error during processing a path: {0} {1}
				oMessageObject = oInject.messageHandler.createMessageObject({
					code : '5200',
					aParameters : [ oError.response.statusCode, oError.response.statusText ]
				});
			}
			if (!oMessageObject) { // Unknown server error
				oMessageObject = oInject.messageHandler.createMessageObject({
					code : '5201'
				});
			}
			oInject.messageHandler.putMessage(oMessageObject);
			// signature: oResponse, oEntityTypeMetadata, oMessageObject
			fnLocalCallback(oError, getMetadata(), oMessageObject);
		};
		var sUrl = getPersistenceServiceUrl();
		oRequest.headers = {
			"x-csrf-token" : oInject.coreApi.getXsrfToken(getPersistenceServiceUrl())
		};
		switch (oRequest.method) {
			case "GET":
				if (!oRequest.data && sAnalysisPathId) {
					oRequest.requestUri = sUrl + "('" + sAnalysisPathId + "')";
					oInject.coreApi.odataRequest(oRequest, fnSuccess, fnError);
				} else if (!oRequest.data && !sAnalysisPathId) {
					getUrlForReadPathsAsPromise().then(function(restUrl) {
						oRequest.requestUri = sUrl + restUrl;
						oInject.coreApi.odataRequest(oRequest, fnSuccess, fnError);
					}, function(messageObject) {
						fnLocalCallback({}, getMetadata(), messageObject);
					});
				}
				break;
			case "POST":
				if (oRequest.data && !sAnalysisPathId) {
					oRequest.requestUri = sUrl;
				}
				oInject.coreApi.odataRequest(oRequest, fnSuccess, fnError);
				break;
			case "DELETE":
				if (!oRequest.data && sAnalysisPathId) {
					oRequest.requestUri = sUrl + "('" + sAnalysisPathId + "')";
				}
				oInject.coreApi.odataRequest(oRequest, fnSuccess, fnError);
				break;
			case "PUT":
				if (oRequest.data && sAnalysisPathId) {
					oRequest.requestUri = sUrl + "('" + sAnalysisPathId + "')";
				}
				oInject.coreApi.odataRequest(oRequest, fnSuccess, fnError);
				break;
			default:
				oInject.coreApi.odataRequest(oRequest, fnSuccess, fnError);
				break;
		}
	}
	function getUrlForReadPathsAsPromise() {
		var deferred = jQuery.Deferred();
		getLogicalSystemAsPromise().then(
				function(logicalSystem) {
					var analyticalConfigurationInURL = "";
					if (oInject.coreApi.getStartParameterFacade().getAnalyticalConfigurationId()) {
						analyticalConfigurationInURL = "AnalyticalConfiguration%20eq%20'" + oInject.coreApi.getStartParameterFacade().getAnalyticalConfigurationId().configurationId + "'%20and%20";
					}
					var urlForReadPaths = "?$select=AnalysisPath,AnalysisPathName,StructuredAnalysisPath,CreationUTCDateTime,LastChangeUTCDateTime&$filter=(" + analyticalConfigurationInURL + "LogicalSystem%20eq%20'" + logicalSystem + "'%20and%20"
							+ "ApplicationConfigurationURL%20eq%20'" + oInject.coreApi.getApplicationConfigurationURL() + "')" + "&$orderby=LastChangeUTCDateTime%20desc";
					deferred.resolve(urlForReadPaths);
				}, function(messageObject) {
					deferred.fail(messageObject);
				});
		return deferred.promise();
	}
	function checkForErrorCode(oError) {
		var errorCode = oError.match("52[0-9]{2}");
		if (errorCode) {
			return errorCode[0];
		}
		return undefined;
	}
	function createPathFromReceivedData(oReceivedData, nActiveStep) {
		var fnPutMessageOrig;
		var oMessageObject;

		function restorePutMessage() {
			oInject.messageHandler.putMessage = fnPutMessageOrig;
		}
		function redefinePutMessage() {
			fnPutMessageOrig = oInject.messageHandler.putMessage;
			oInject.messageHandler.putMessage = function(oMessageObject) {

				var messageConf = oInject.messageHandler.getConfigurationByCode(oMessageObject.getCode());

				if (messageConf && messageConf.severity && messageConf.severity === "warning") {
					return;
				}
				throw oMessageObject;
			};
		}
		if (nActiveStep !== undefined) {
			oReceivedData.SerializedAnalysisPath.path.indicesOfActiveSteps[0] = nActiveStep;
		}
		oInject.coreApi.resetPath(true);
		redefinePutMessage();
		try {
			oInject.coreApi.deserializePath(oReceivedData.SerializedAnalysisPath);
		} catch (oError) {
			oInject.coreApi.restoreOriginalPath();
			
			oMessageObject = convertErrorToMessageObject(oError);
		} finally {
			restorePutMessage();
		}
		return oMessageObject;
	}
	function convertErrorToMessageObject(oError) {
		var oMessageObject;
		if (oError.type && oError.type === "messageObject") {
			oMessageObject = oError;
		} else {
			oMessageObject = new sap.apf.core.MessageObject({
				code : sap.apf.core.constants.message.code.errorUnknown
			//configure in message definition
			});
			oMessageObject.setSeverity(sap.apf.core.constants.message.severity.error);
			oMessageObject.setMessage("Unknown exception caught " + oError.message);
		}
		return oMessageObject;
	}
	function getPersistenceServiceUrl() {
		var oPersistencePathConfig = oInject.coreApi.getPersistenceConfiguration().path;
		var sService = oPersistencePathConfig.service + "/" + oPersistencePathConfig.entitySet;
		return sService;
	}
	function getStructuredAnalysisPath(oSerializablePath) {
		var aStructuredSteps = [];
		var aSteps = oSerializablePath.path.steps;
		var StructuredAnalysisPath;
		for( var i in aSteps) {
			aStructuredSteps.push({
				stepId : aSteps[i].stepId,
				selectedRepresentationId : aSteps[i].binding.selectedRepresentationId
			});
		}
		StructuredAnalysisPath = {
			steps : aStructuredSteps,
			indexOfActiveStep : oSerializablePath.path.indicesOfActiveSteps[0]
		};
		return StructuredAnalysisPath;
	}
	function getMetadata() {
		var oConfig = oInject.coreApi.getPersistenceConfiguration();
		var oEntityTypeMetadata = oInject.coreApi.getEntityTypeMetadata(oConfig.path.service, oConfig.path.entitySet);
		return oEntityTypeMetadata;
	}
	function getSAPClientFromContextFilter(oContextFilter) {
		var aTerms = oContextFilter && oContextFilter.getFilterTermsForProperty('SAPClient');
		if (aTerms === undefined || aTerms.length !== 1) {
			return undefined;
		}
		return aTerms[0].getValue();
	}
	function resolveLogicalSystemWithSapClient(deferred, sapClient) {
		var messageHandler = oInject.messageHandler;
		var logicalSystemConfiguration = oInject.coreApi.getPersistenceConfiguration().logicalSystem;
		if (!logicalSystemConfiguration) {
			logicalSystem = sapClient;
			deferred.resolve(sapClient);
			return deferred.promise();
		}
		var sServiceRoot = logicalSystemConfiguration.service;
		var sEntityType = logicalSystemConfiguration.entitySet || logicalSystemConfiguration.entityType;
		if (sServiceRoot === null) {
			logicalSystem = sapClient;
			deferred.resolve(sapClient);
			return deferred.promise();
		}
		if (sEntityType === undefined) {
			sEntityType = sap.apf.core.constants.entitySets.logicalSystem;
		}
		var oFilter = new sap.apf.core.utils.Filter(messageHandler, "SAPClient", 'eq', sapClient);
		var sUrl = oInject.coreApi.getUriGenerator().getAbsolutePath(sServiceRoot);
		sUrl = sUrl + oInject.coreApi.getUriGenerator().buildUri(messageHandler, sEntityType, [ 'LogicalSystem' ], oFilter, undefined, undefined, undefined, undefined, undefined, 'Results');
		var oRequest = {
			requestUri : sUrl,
			method : "GET",
			headers : {
				"x-csrf-token" : oInject.coreApi.getXsrfToken(getPersistenceServiceUrl())
			}
		};
		var fnOnSuccess = function(oData) {
			var messageObject;
			if (oData && oData.results && oData.results instanceof Array && oData.results.length === 1 && oData.results[0].LogicalSystem) {
				logicalSystem = oData.results[0].LogicalSystem;
				deferred.resolve(logicalSystem);
			} else {
				messageObject = messageHandler.createMessageObject({
					code : "5026",
					aParameters : [ sapClient ]
				});
				deferred.fail(messageObject);
			}
		};
		var fnError = function(oError) {
			var messageObject = messageHandler.createMessageObject({
				code : "5026",
				aParameters : [ sapClient ]
			});
			if (oError.messageObject !== undefined && oError.messageObject.type === "messageObject") {
				messageObject.setPrevious(oError.messageObject);
			}
			deferred.fail(messageObject);
		};
		oInject.coreApi.odataRequest(oRequest, fnOnSuccess, fnError);
	}
	/**
	 * returns the logical system as promise, that is used on xs engine or otherwise the sap client from start parameters, if persistence config
	 * has no logical system odata service specified.
	 */
	function getLogicalSystemAsPromise() {
		var deferred = jQuery.Deferred();
		if (logicalSystem) {
			deferred.resolve(logicalSystem);
			return deferred.promise();
		}
		var sapClient = oInject.coreApi.getStartParameterFacade().getSapClient();
		if (sapClient) {
			resolveLogicalSystemWithSapClient(deferred, sapClient);
			return deferred.promise();
		}
		oInject.coreApi.getCumulativeFilter().done(function(oContextFilter) {
			sapClient = getSAPClientFromContextFilter(oContextFilter);
			if (!sapClient) {
				deferred.resolve('');
			} else {
				resolveLogicalSystemWithSapClient(deferred, sapClient);
			}
		});
		return deferred.promise();
	}
};
}());
}; // end of sap/apf/core/persistence.js
if ( !jQuery.sap.isDeclared('sap.apf.core.representationTypes') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.apf.core.representationTypes");

/**
 * @memberOf sap.apf.core
 * @description Default configuration of representation types. Can be overwritten in the analytical configuration file.
 * @returns {object[]} representation types array with configuration objects for representation types
 */
sap.apf.core.representationTypes = function() {
	return [ {
		"type" : "representationType",
		"id" : "ColumnChart",
		"constructor" : "sap.apf.ui.representations.columnChart",
		"picture" : "sap-icon://bar-chart",
		"label" : {
			"type" : "label",
			"kind" : "text",
			"key" : "ColumnChart"
		},
		"metadata" : {
			"dimensions" : {
				"supportedKinds" : [ {
					"kind" : sap.apf.core.constants.representationMetadata.kind.XAXIS,
					"min" : "1",
					"max" : "*"
				}, {
					"kind" : sap.apf.core.constants.representationMetadata.kind.LEGEND,
					"min" : "0",
					"max" : "*"
				} ]
			},
			"measures" : {
				"supportedKinds" : [ {
					"kind" : sap.apf.core.constants.representationMetadata.kind.YAXIS,
					"min" : "1",
					"max" : "*"
				} ]
			}
		}
	}, {
		"type" : "representationType",
		"id" : "BarChart",
		"constructor" : "sap.apf.ui.representations.barChart",
		"picture" : "sap-icon://horizontal-bar-chart",
		"label" : {
			"type" : "label",
			"kind" : "text",
			"key" : "BarChart"
		},
		"metadata" : {
			"dimensions" : {
				"supportedKinds" : [ {
					"kind" : sap.apf.core.constants.representationMetadata.kind.XAXIS,
					"min" : "1",
					"max" : "*"
				}, {
					"kind" : sap.apf.core.constants.representationMetadata.kind.LEGEND,
					"min" : "0",
					"max" : "*"
				} ]
			},
			"measures" : {
				"supportedKinds" : [ {
					"kind" : sap.apf.core.constants.representationMetadata.kind.YAXIS,
					"min" : "1",
					"max" : "*"
				} ]
			}
		}
	}, {
		"type" : "representationType",
		"id" : "LineChart",
		"constructor" : "sap.apf.ui.representations.lineChart",
		"picture" : "sap-icon://line-chart",
		"label" : {
			"type" : "label",
			"kind" : "text",
			"key" : "LineChart"
		},
		"metadata" : {
			"dimensions" : {
				"supportedKinds" : [ {
					"kind" : sap.apf.core.constants.representationMetadata.kind.XAXIS,
					"min" : "1",
					"max" : "*"
				}, {
					"kind" : sap.apf.core.constants.representationMetadata.kind.LEGEND,
					"min" : "0",
					"max" : "*"
				} ]
			},
			"measures" : {
				"supportedKinds" : [ {
					"kind" : sap.apf.core.constants.representationMetadata.kind.YAXIS,
					"min" : "1",
					"max" : "*"
				} ]
			}
		}
	}, {
		"type" : "representationType",
		"id" : "PieChart",
		"constructor" : "sap.apf.ui.representations.pieChart",
		"picture" : "sap-icon://pie-chart",
		"label" : {
			"type" : "label",
			"kind" : "text",
			"key" : "PieChart"
		},
		"metadata" : {
			"dimensions" : {
				"supportedKinds" : [ {
					"kind" : sap.apf.core.constants.representationMetadata.kind.SECTORCOLOR,
					"min" : "1",
					"max" : "*"
				} ]
			},
			"measures" : {
				"supportedKinds" : [ {
					"kind" : sap.apf.core.constants.representationMetadata.kind.SECTORSIZE,
					"min" : "1",
					"max" : "1"
				} ]
			}
		}
	}, {
		"type" : "representationType",
		"id" : "ScatterPlotChart",
		"constructor" : "sap.apf.ui.representations.scatterPlotChart",
		"picture" : "sap-icon://scatter-chart",
		"label" : {
			"type" : "label",
			"kind" : "text",
			"key" : "ScatterPlotChart"
		},
		"metadata" : {
			"dimensions" : {
				"supportedKinds" : [ {
					"kind" : sap.apf.core.constants.representationMetadata.kind.REGIONCOLOR,
					"min" : "1",
					"max" : "*"
				}, {
					"kind" : sap.apf.core.constants.representationMetadata.kind.REGIONSHAPE,
					"min" : "0",
					"max" : "*"
				} ]
			},
			"measures" : {
				"supportedKinds" : [ {
					"kind" : sap.apf.core.constants.representationMetadata.kind.XAXIS,
					"min" : "1",
					"max" : "1"
				}, {
					"kind" : sap.apf.core.constants.representationMetadata.kind.YAXIS,
					"min" : "1",
					"max" : "1"
				} ]
			},
			"sortable" : false
		}
	}, {
		"type" : "representationType",
		"id" : "BubbleChart",
		"constructor" : "sap.apf.ui.representations.bubbleChart",
		"picture" : "sap-icon://bubble-chart",
		"label" : {
			"type" : "label",
			"kind" : "text",
			"key" : "BubbleChart"
		},
		"metadata" : {
			"dimensions" : {
				"supportedKinds" : [ {
					"kind" : sap.apf.core.constants.representationMetadata.kind.REGIONCOLOR,
					"min" : "1",
					"max" : "*"
				}, {
					"kind" : sap.apf.core.constants.representationMetadata.kind.REGIONSHAPE,
					"min" : "0",
					"max" : "*"
				} ]
			},
			"measures" : {
				"supportedKinds" : [ {
					"kind" : sap.apf.core.constants.representationMetadata.kind.XAXIS,
					"min" : "1",
					"max" : "1"
				}, {
					"kind" : sap.apf.core.constants.representationMetadata.kind.YAXIS,
					"min" : "1",
					"max" : "1"
				}, {
					"kind" : sap.apf.core.constants.representationMetadata.kind.BUBBLEWIDTH,
					"min" : "1",
					"max" : "1"
				}, {
					"kind" : sap.apf.core.constants.representationMetadata.kind.BUBBLEHEIGHT,
					"min" : "0",
					"max" : "1"
				} ]
			},
			"sortable" : false
		}
	}, {
		"type" : "representationType",
		"id" : "StackedColumnChart",
		"constructor" : "sap.apf.ui.representations.stackedColumnChart",
		"picture" : "sap-icon://vertical-stacked-chart",
		"label" : {
			"type" : "label",
			"kind" : "text",
			"key" : "StackedColumnChart"
		},
		"metadata" : {
			"dimensions" : {
				"supportedKinds" : [ {
					"kind" : sap.apf.core.constants.representationMetadata.kind.XAXIS,
					"min" : "1",
					"max" : "*"
				}, {
					"kind" : sap.apf.core.constants.representationMetadata.kind.LEGEND,
					"min" : "0",
					"max" : "*"
				} ]
			},
			"measures" : {
				"supportedKinds" : [ {
					"kind" : sap.apf.core.constants.representationMetadata.kind.YAXIS,
					"min" : "1",
					"max" : "*"
				} ]
			}
		}
	}, {
		"type" : "representationType",
		"id" : "StackedBarChart",
		"constructor" : "sap.apf.ui.representations.stackedBarChart",
		"picture" : "sap-icon://horizontal-stacked-chart",
		"label" : {
			"type" : "label",
			"kind" : "text",
			"key" : "StackedBarChart"
		},
		"metadata" : {
			"dimensions" : {
				"supportedKinds" : [ {
					"kind" : sap.apf.core.constants.representationMetadata.kind.XAXIS,
					"min" : "1",
					"max" : "*"
				}, {
					"kind" : sap.apf.core.constants.representationMetadata.kind.LEGEND,
					"min" : "1",
					"max" : "*"
				} ]
			},
			"measures" : {
				"supportedKinds" : [ {
					"kind" : sap.apf.core.constants.representationMetadata.kind.YAXIS,
					"min" : "1",
					"max" : "*"
				} ]
			}
		}
	}, {
		"type" : "representationType",
		"id" : "PercentageStackedColumnChart",
		"constructor" : "sap.apf.ui.representations.percentageStackedColumnChart",
		"picture" : "sap-icon://full-stacked-column-chart",
		"label" : {
			"type" : "label",
			"kind" : "text",
			"key" : "PercentageStackedColumnChart"
		},
		"metadata" : {
			"dimensions" : {
				"supportedKinds" : [ {
					"kind" : sap.apf.core.constants.representationMetadata.kind.XAXIS,
					"min" : "1",
					"max" : "*"
				}, {
					"kind" : sap.apf.core.constants.representationMetadata.kind.LEGEND,
					"min" : "0",
					"max" : "*"
				} ]
			},
			"measures" : {
				"supportedKinds" : [ {
					"kind" : sap.apf.core.constants.representationMetadata.kind.YAXIS,
					"min" : "1",
					"max" : "*"
				} ]
			}
		}
	}, {
		"type" : "representationType",
		"id" : "PercentageStackedBarChart",
		"constructor" : "sap.apf.ui.representations.percentageStackedBarChart",
		"picture" : "sap-icon://full-stacked-chart",
		"label" : {
			"type" : "label",
			"kind" : "text",
			"key" : "PercentageStackedBarChart"
		},
		"metadata" : {
			"dimensions" : {
				"supportedKinds" : [ {
					"kind" : sap.apf.core.constants.representationMetadata.kind.XAXIS,
					"min" : "1",
					"max" : "*"
				}, {
					"kind" : sap.apf.core.constants.representationMetadata.kind.LEGEND,
					"min" : "1",
					"max" : "*"
				} ]
			},
			"measures" : {
				"supportedKinds" : [ {
					"kind" : sap.apf.core.constants.representationMetadata.kind.YAXIS,
					"min" : "1",
					"max" : "*"
				} ]
			}
		}
	}, {
		"type" : "representationType",
		"id" : "TableRepresentation",
		"constructor" : "sap.apf.ui.representations.table",
		"picture" : "sap-icon://table-chart",
		"label" : {
			"type" : "label",
			"kind" : "text",
			"key" : "TableRepresentation"
		},
		"metadata" : {
			"dimensions" : {
				"supportedKinds" : [ {
					"kind" : sap.apf.core.constants.representationMetadata.kind.COLUMN,
					"min" : "1",
					"max" : "*"
				} ]
			},
			"measures" : {
				"supportedKinds" : [ {
					"kind" : sap.apf.core.constants.representationMetadata.kind.COLUMN,
					"min" : "1",
					"max" : "*"
				} ]
			}
		}
	}, {
		"type" : "representationType",
		"id" : "ColumnChartSorted",
		"constructor" : "sap.apf.ui.representations.columnChart",
		"picture" : "sap-icon://vertical-bar-chart",
		"label" : {
			"type" : "label",
			"kind" : "text",
			"key" : "ColumnChartSorted"
		}
	}, {
		"type" : "representationType",
		"id" : "ColumnChartClustered",
		"constructor" : "sap.apf.ui.representations.columnChart",
		"picture" : "sap-icon://bar-chart",
		"label" : {
			"type" : "label",
			"kind" : "text",
			"key" : "ColumnChartClustered"
		}
	}, {
		"type" : "representationType",
		"id" : "ColumnChartClusteredSorted",
		"constructor" : "sap.apf.ui.representations.columnChart",
		"picture" : "sap-icon://vertical-bar-chart-2",
		"label" : {
			"type" : "label",
			"kind" : "text",
			"key" : "ColumnChartClusteredSorted"
		}
	}, {
		"type" : "representationType",
		"id" : "StackedColumnSorted",
		"constructor" : "sap.apf.ui.representations.stackedColumnChart",
		"picture" : "sap-icon://upstacked-chart",
		"label" : {
			"type" : "label",
			"kind" : "text",
			"key" : "StackedColumnSorted"
		}
	} ];
};

}; // end of sap/apf/core/representationTypes.js
if ( !jQuery.sap.isDeclared('sap.apf.core.utils.checkForTimeout') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */


jQuery.sap.declare('sap.apf.core.utils.checkForTimeout');


/**
 * @description tests, whether the server response is time out. Returns a message object in case of time out.
 * @param {object} oServerResponse
 * @returns {sap.apf.core.MessageObject|undefined}
 */
sap.apf.core.utils.checkForTimeout = function(oServerResponse) {
	'use strict';

	var status;
	var oMessage;
	var redirect = false;
	//OData timeout redirect xse
	if(oServerResponse && oServerResponse.headers && oServerResponse.headers['x-sap-login-page']){
		redirect = true;
	}
	//ajax timeout redirect xse
	if(oServerResponse && oServerResponse.getResponseHeader && oServerResponse.getResponseHeader('x-sap-login-page') !== null) {
		redirect = true;
	}
	//set status code from OData Response
	if (oServerResponse && oServerResponse.status) {
		status = oServerResponse.status;
	}
	//set status code from Ajax Response
	if (oServerResponse && oServerResponse.response && oServerResponse.response.statusCode) {
		status = oServerResponse.response.statusCode;
	}
	if (status === 303 || status === 401 || status === 403 || redirect) {
		oMessage = new sap.apf.core.MessageObject({
			code : "5021"
		});
	}
	return oMessage;
};


}; // end of sap/apf/core/utils/checkForTimeout.js
if ( !jQuery.sap.isDeclared('sap.apf.core.utils.fileExists') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/*global jQuery, sap */

jQuery.sap.declare('sap.apf.core.utils.fileExists');

/**
 * @description Checks, whether a file with given fully specified path exists on server. Address must be valid URL.
 * @param {string} sUrl path to file on server 
 * @returns {boole}
 */
sap.apf.core.utils.fileExists = function(sUrl) {
	'use strict';
	var bFileExists = false;
	jQuery.ajax({
		url : sUrl,
		type : "HEAD",
		success : function(oData, sStatus, oJqXHR) {
			var oMessage = sap.apf.core.utils.checkForTimeout(oJqXHR);
			bFileExists = !oMessage;
		},
		error : function() {
			bFileExists = false;
		},
		async : false
	});
	return bFileExists;
};

}; // end of sap/apf/core/utils/fileExists.js
if ( !jQuery.sap.isDeclared('sap.apf.core.utils.uriGenerator') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.core.utils.uriGenerator");


(function(){
	'use strict';
/**
 * @descriptions Module for uri generation and location helper functions for the resource location
 */
sap.apf.core.utils.uriGenerator = {};

/**
 * @memberOf sap.apf.core.utils.uriGenerator
 * @description Returns the absolute URL path of the service root. The slash as last character is fixed, if not existing.
 * @param {String} sPathToRoot Absolute Path to the service root like /sap/hba/apps/wca/s/odata/wca.xsodata/ .
 * @returns {String}
 */
sap.apf.core.utils.uriGenerator.getAbsolutePath = function(sPathToRoot) {
	if (sPathToRoot.slice(-1) === '/') {
		return sPathToRoot;
	}
	return sPathToRoot + "/";
};

/**
 * @memberOf sap.apf.core.utils.uriGenerator
 * @param {string} sPathToServiceDocument 
 * @description Returns the relative url path of the oadata service.
 * @returns {String}
 */
sap.apf.core.utils.uriGenerator.getODataPath = function(sPathToServiceDocument) {
	var aSplitt = sPathToServiceDocument.split('/');
	var i;
	var aSplittContent = [];
	for(i = 0; i < aSplitt.length; i++) {
		if (aSplitt[i] !== "") {
			aSplittContent.push(aSplitt[i]);
		}
	}
	var sReturn = '';
	var len = aSplittContent.length - 1;
	for(i = 0; i < len; i++) {
		sReturn = sReturn + '/' + aSplittContent[i];
	}
	return sReturn + '/';
};
/**
 * @memberOf sap.apf.core.utils.uriGenerator
 * @description adds a relative url to an absolute url 
 * @param {string} absoluteURL
 * @param {string} relativeURL
 * @returns {string} composedURL
 */
sap.apf.core.utils.uriGenerator.addRelativeToAbsoluteURL = function(absoluteURL, relativeURL) {
	
	var absoluteUrlParts = absoluteURL.split('/');
	var relativeUrlParts = relativeURL.split('/');
	
	relativeUrlParts.forEach(function(part){
		if (part === '..') {
			absoluteUrlParts.pop();
		} else if (part != '.') {
			absoluteUrlParts.push(part);
		}
	});
	
	return absoluteUrlParts.join('/');
};

/**
 * @description returns the url for a given component up to this component (not including).
 * @param (string} componentName
 * @returns {string} absoluteUrlUpToComponent
 */
sap.apf.core.utils.uriGenerator.getBaseURLOfComponent = function(componentName) {
	var baseComponentNameParts = componentName.split('.');
	baseComponentNameParts.pop();
	var base = baseComponentNameParts.join('.');
	return jQuery.sap.getModulePath(base);
};



/**
 * @memberOf sap.apf.core.utils.uriGenerator
 * @description gets the location of the apf libary. sap.apf.core.utils.uriGenerator is required for loading texts, images and so on.
 * @returns {String}
 */
sap.apf.core.utils.uriGenerator.getApfLocation = function() {
	return jQuery.sap.getModulePath("sap.apf") + '/';
};
/**
 * @memberOf sap.apf.core.utils.uriGenerator
 * @description builds a URI based on parameters
 * @param {sap.apf.core.MessageHandler} oMsgHandler
 * @param {string} sEntityType
 * @param [aSelectProperties]
 * @param {object} oFilter
 * @param {object} oParameter - HANA XSE parameter entity set parameters
 * @param {object} [sortingFields]
 * @param {object} oPaging - values of properties 'top','skip' and 'inlineCount' are evaluated and added to '$top','$skip' and '$inlinecount' URI string parameters if available 
 * @param {string} sFormat of HTTP response,e.g. 'json' or 'xml'. If omitted 'json' is taken as default.
 * @param {function} [fnFormatValue] callback method to format the values 
 * @param {sNavigationProperty} Suffix after the parameter - old default is "Results"
 * @returns {string} complete URI
 */
sap.apf.core.utils.uriGenerator.buildUri = function(oMsgHandler, sEntityType, aSelectProperties, oFilter, oParameter, sortingFields, oPaging, sFormat, fnFormatValue, sNavigationProperty) {
	var sReturn = "";
	sReturn += sEntityType;
	sReturn += addParamsToUri(oParameter,sNavigationProperty);
	sReturn = sReturn + "?";
	sReturn += addSelectPropertiesToUri(aSelectProperties);
	sReturn += addFilterToUri(oFilter, fnFormatValue);
	sReturn += addSorting(sortingFields, aSelectProperties);
	sReturn += addPaging(oPaging);
	sReturn += addFormatToUri(sFormat);
	return sReturn;
	function addParamsToUri(oParameter,sNavigationProperty) {
		var sReturn = '';
		var bParametersExist = false;
		var sParameter;
		for(sParameter in oParameter) {
			if (!bParametersExist) {
				sReturn += '(';
				bParametersExist = true;
			} else {
				sReturn += ',';
			}
			sReturn += sParameter.toString() + '=' + oParameter[sParameter];
		}
		if (bParametersExist) {
			sReturn += ')/';
		}
		sReturn += sNavigationProperty || '';	
		return sReturn;
	}
	function addSelectPropertiesToUri(aSelectProperties) {
		if (!aSelectProperties[0]) {
			return '';
		}
		var field;
		var sResult = "$select=";
		for( field in aSelectProperties) {
			sResult += jQuery.sap.encodeURL(sap.apf.utils.escapeOdata(aSelectProperties[field]));
			if (field < aSelectProperties.length - 1) {
				sResult += ",";
			}
		}
		return sResult;
	}
	function addFilterToUri(oFilter, fnFormatValue) {
		if (!(oFilter && oFilter instanceof sap.apf.core.utils.Filter)) {
			return '';
		}
		var sFilterValues = oFilter.toUrlParam( { formatValue : fnFormatValue });
		if (sFilterValues === "" || sFilterValues === '()' ) {
			return '';
		}	
		return '&$filter=' + sFilterValues;	
	}
	function addSorting(sortingFields, aSelectProperties) {
		var sOrderByValues = '';
		var sSingleValue = '';
		var i;
		if (!sortingFields) {
			return '';
		}
		switch (true) {
			case jQuery.isArray(sortingFields):
				for( i = 0; i < sortingFields.length; i++) {
					sSingleValue = makeOrderByValue(sortingFields[i], aSelectProperties);
					if (sOrderByValues.length > 0 && sSingleValue.length > 0) {
						sOrderByValues += ',';
					}
					sOrderByValues += sSingleValue;
				}
				break;
			case jQuery.isPlainObject(sortingFields):
				sOrderByValues += makeOrderByValue(sortingFields, aSelectProperties);
				break;
			case typeof sortingFields === 'string':
				sOrderByValues += makeOrderByValue({
					property : sortingFields
				}, aSelectProperties);
				break;
		}
		if (sOrderByValues.length > 0) {
			return "&$orderby=" + sOrderByValues;
		}
		return '';
		function makeOrderByValue(oOrderBy, aSelectProperties) {
			var sValue = '';
			if (jQuery.inArray(oOrderBy.property, aSelectProperties) > -1) {
				sValue += oOrderBy.property;
				if (oOrderBy.descending === true) {
					sValue += ' desc';
				} else {
					sValue += ' asc';
				}
			} else {
				oMsgHandler.putMessage(oMsgHandler.createMessageObject({
					code : '5019',
					aParameters : [ sEntityType, oOrderBy.property ]
				}));
			}
			return jQuery.sap.encodeURL(sValue);
		}
	}
	function addPaging(oPaging) {
		
		function checkPropertyOptionsConsistency(oPaging) {
			var aPropertyNames, i;
			aPropertyNames = Object.getOwnPropertyNames(oPaging);
			for (i = 0; i < aPropertyNames.length;i++) {
				if (aPropertyNames[i] !== 'top' && aPropertyNames[i] !== 'skip' && aPropertyNames[i] !== 'inlineCount') {
					oMsgHandler.putMessage(oMsgHandler.createMessageObject({
						code : '5032',
						aParameters : [ sEntityType, aPropertyNames[i] ]
					}));
				}
			}
		}
		
		var sReturn = '';
		
		if (!oPaging) {
			return sReturn;
		}
		checkPropertyOptionsConsistency(oPaging);

		if (oPaging.top) {
			sReturn += '&$top=' + oPaging.top;
		}
		if (oPaging.skip) {
			sReturn += '&$skip=' + oPaging.skip;
		}
		if (oPaging.inlineCount === true) {
			sReturn += '&$inlinecount=allpages';
		}
		return sReturn;
	}
	function addFormatToUri(sFormat) {
		if (!sFormat) {
			sFormat = 'json'; // eslint-disable-line
		}
		return '&$format=' + sFormat;
	}
};
}());

}; // end of sap/apf/core/utils/uriGenerator.js
if ( !jQuery.sap.isDeclared('sap.apf.library') ) {
/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.apf (1.32.6)
 */
jQuery.sap.declare("sap.apf.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * Analysis Path Framework
 *
 * @namespace
 * @name sap.apf
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained

jQuery.sap.require('sap.ca.ui.library'); // unlisted dependency retained

jQuery.sap.require('sap.m.library'); // unlisted dependency retained

jQuery.sap.require('sap.ui.layout.library'); // unlisted dependency retained

jQuery.sap.require('sap.ushell.library'); // unlisted dependency retained

jQuery.sap.require('sap.viz.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
	name : "sap.apf",
	dependencies : ["sap.ui.core","sap.ca.ui","sap.m","sap.ui.layout","sap.ushell","sap.viz"],
	types: [],
	interfaces: [],
	controls: [],
	elements: [],
	noLibraryCSS: true,
	version: "1.32.6"
});


}; // end of sap/apf/library.js
if ( !jQuery.sap.isDeclared('sap.apf.modeler.core.configurationObjects') ) {
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
/*global sap, jQuery*/

jQuery.sap.declare("sap.apf.modeler.core.configurationObjects");

(function () {
    'use strict';

    /**
     * @private
     * @name sap.apf.modeler.core.ConfigurationObjects
     * @class Defines the schema of configuration objects, their validation, their serialization in the modeler.
     * De-serialization is in a different class which share the deserialize method with the run-time.
     * @param {Object} inject - Injection of required APF object references, constructors and functions.
     * @param {sap.apf.core.utils.MessageHandler} inject.instance.messageHandler MessageHandler instance
     * @param {sap.apf.modeler.core.TextPool} inject.instance.textPool- TextPool instance
     * @param {Object} inject.constructor Injected constructors
     * @param {sap.apf.core.utils.Hashtable} inject.constructor.hashtable Hashtable constructor
     * @param {sap.apf.core.utils.TextPool} inject.instance.textPool textPool instance
     * @param {sap.apf.core.utils.OdataProxy} inject.instance.persistenceProxy persistenceProxy instance 
     * @param {sap.apf.core.messageHandler} inject.instance.messageHandler messageHandler instance  
     * @constructor
     */
    sap.apf.modeler.core.ConfigurationObjects = function (inject) {
        /* @type {sap.apf.modeler.core.ConfigurationObjects} */
        var that = this;
        var Hashtable,
            textPool,
            persistenceProxy,
            messageHandler;
        if(inject.constructor.hashtable){
        	Hashtable = inject.constructor.hashtable;
          }
        if(inject.instance.textPool){
          textPool = inject.instance.textPool;
        }
        if(inject.instance.persistenceProxy){
        	persistenceProxy = inject.instance.persistenceProxy;
        }
        if(inject.instance.messageHandler){
        	messageHandler = inject.instance.messageHandler;
        }

        function complain(messageNumber, parameter) {
        	var aParams = [];
        	if (parameter) {
        		aParams.push(parameter);
        	}
        	messageHandler.putMessage(messageHandler.createMessageObject({ code : messageNumber, aParameters : aParams}));
        }
        function isValidLabel(label) {
            var result =
                label &&
                label.type && label.type === "label" &&
                label.kind && label.kind === "text" &&
                label.key && typeof label.key === "string";
            if (!result) {
                complain(11030, label.key);
            }
            return result;
        }


        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationObjects#serializeLabel
         * @param {string} textKey
         * @returns {object}
         */
        this.serializeLabelKey = function (textKey) {
            return {
                type: "label",
                kind: "text",
                key: textPool.getPersistentKey(textKey)
            };
        };

        /**
         * @private
         * @function
         * @description Parameter configObject will be enhanced by a thumbnail attribute with the following structure
         *              {type: string, leftUpper: Object, leftLower: Object, rightUpper: Object, rightLower: Object}}
         * @name sap.apf.modeler.core.ConfigurationObjects#serializeAndAddThumbnail
         * @param {sap.apf.modeler.core.Step|sap.apf.modeler.core.Representation} modelerObject
         * @param {Object} configObject Will be enhanced by a new attribute "thumbnail"
         */
        this.serializeAndAddThumbnail = function (modelerObject, configObject) {
            var leftLower = modelerObject.getLeftLowerCornerTextKey();
            var leftUpper = modelerObject.getLeftUpperCornerTextKey();
            var rightUpper = modelerObject.getRightUpperCornerTextKey();
            var rightLower = modelerObject.getRightLowerCornerTextKey();
            var thumbnail = {
                type: "thumbnail"
            };
            if (leftUpper) {
            	thumbnail.leftUpper = this.serializeLabelKey(leftUpper);
            }
            if (leftLower) {
            	thumbnail.leftLower = this.serializeLabelKey(leftLower);
            }
            if (rightUpper) {
            	thumbnail.rightUpper = this.serializeLabelKey(rightUpper);
            }
            if (rightLower) {
            	thumbnail.rightLower = this.serializeLabelKey(rightLower);
            }
           
            if (thumbnail.leftLower || thumbnail.leftUpper || thumbnail.rightLower || thumbnail.rightUpper) { // fixme: optional thumbnail???
            	configObject.thumbnail = thumbnail;
            }
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationObjects#serializeCategory
         * @param {object} category
         * @param {array} steps
         * @returns {object}
         */
        this.serializeCategory = function (category, steps) {
        	var TextElement = textPool.get(category.labelKey);
        	var stepObjects = [];
        	if(steps){
        		steps.forEach(function(stepId){
        			stepObjects.push({type : "step", id: stepId});
        		});
        	}
        	var description = (TextElement && TextElement.TextElementDescription) || "";
            return {
                type: "category",
                description: description,
                id: category.getId(),
                label: that.serializeLabelKey(category.labelKey),
                steps: stepObjects
            };
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationObjects#validateCategory
         * @description Return true if the category configuration object is valid.
         * @param {object} category
         * @returns {boolean}
         */
        this.validateCategory = function (category) {
            var result = category &&
                category.type && category.type === "category" &&
                category.id &&
                category.steps &&
                isValidLabel(category.label);
            if(result){
                category.steps.forEach(function (object) {
              	  if (!object.type || object.type !== "step" || !object.id) {
              	         result = false;
              	                }
              });	
            }
            if (!result) {
            	complain(11031,  category.id);
            	 
            }
            return result;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationObjects#validateRequest
         * @description Return true if the request configuration object is valid.
         * @param {object} request
         * @returns {boolean}
         */
        this.validateRequest = function (request) {
            var result = request &&
                request.id && // id
                request.type === "request" &&
                request.service && typeof request.service === "string" &&
                ((request.entityType && typeof request.entityType === "string") || (request.entitySet && typeof request.entitySet === "string")) &&
                request.selectProperties && // id
                request.selectProperties && request.selectProperties instanceof Array && request.selectProperties.length >= 0;
            if (!result) {
            	 complain(11032, request.id);
            }
            return result;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationObjects#validateBinding
         * @description Return true if the binding configuration object is valid.
         * @param {object} binding
         * @returns {boolean}
         */
        this.validateBinding = function (binding) {
            var result = binding &&
                binding.id &&
                binding.type === "binding" &&
                binding.requiredFilters && binding.requiredFilters instanceof Array && binding.requiredFilters.length >= 0 &&
                binding.representations && binding.representations instanceof Array;
            if (!result) {
           	 complain(11033, binding.id);
            }
            return result;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationObjects#validateFacetFilter
         * @description Return true if the facetFilter configuration object is valid.
         *      Note, the validated object structurally corresponds to the result of serializing an object of type sap.apf.modeler.core.FacetFilter.
         * @param {object} facetFilter
         * @returns {boolean}
         */
        this.validateFacetFilter = function (facetFilter) {
            var result = facetFilter &&
                facetFilter.id && // id
                facetFilter.property &&
                facetFilter.type === "facetFilter";
            if (!result) {
            	complain(11034, facetFilter.id);
            }
            return result;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationObjects#validateNavigationTarget
         * @description Return true if the navigationTarget configuration object is valid.
         *      Note, the validated object structurally corresponds to the result of serializing an object of type sap.apf.modeler.core.NavigationTarget.
         * @param {object} navigationTarget
         * @returns {boolean}
         */
        this.validateNavigationTarget = function (navigationTarget) {
            var result = navigationTarget &&
                navigationTarget.id && // id
                navigationTarget.semanticObject &&
                navigationTarget.action &&
                navigationTarget.type === "navigationTarget" &&
                navigationTarget.hasOwnProperty("isStepSpecific");
            if (!result) {
            	complain(11040, navigationTarget.id);
            }
            return result;
        };
        
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationObjects#validateStep
         * @description Return true if the step configuration object is valid.
         *      Note, the validated object structurally corresponds to the result of serializing an object of type sap.apf.modeler.core.Step.
         * @param {object} step
         * @returns {boolean}
         */
        this.validateStep = function (step) {
            var result = step &&
                step.id && // id
                step.type === "step" &&
                isValidLabel(step.title) &&
                isValidLabel(step.longTitle) &&
                step.hasOwnProperty("navigationTargets");
            if (!result) {
            	 complain(11035, step.id);
            }
            return result;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationObjects#validateConfiguration
         * @description Return true if the configuration object is valid.
         * @param {object} configuration
         * @returns {boolean}
         */
        this.validateConfiguration = function (configuration) {
            var result = configuration && 
            	configuration.applicationTitle && configuration.applicationTitle.key && typeof configuration.applicationTitle.key === 'string' &&
                configuration.steps && configuration.steps instanceof Array && configuration.steps.length >= 0 &&
                configuration.requests && configuration.requests instanceof Array && configuration.requests.length >= 0 &&
                configuration.bindings && configuration.bindings instanceof Array && configuration.bindings.length >= 0 &&
                configuration.representationTypes && configuration.representationTypes instanceof Array && configuration.representationTypes.length >= 0 &&
                configuration.facetFilters && configuration.facetFilters instanceof Array && configuration.facetFilters.length >= 0 &&
                configuration.categories && configuration.categories instanceof Array && configuration.categories.length >= 0;
            if (!result) {
            	 complain(11036);
            }
            return result;
        };

        function serializeRepresentations(step) {
            var representationValues = [];
            var dimensionValues,
                dimensions;
            var measureValues,
                measures;
            var orderbyValues;
            var configurationObject;
            var topN;

            var representations = step.getRepresentations();
            representations.forEach(function (representation) {
                dimensionValues = [];
                dimensions = representation.getDimensions();
                dimensions.forEach(function (dimension) {
                    var dimensionValue = {
                        fieldName: dimension
                    };
                    if (representation.getDimensionKind(dimension)) {
                        dimensionValue.kind = representation.getDimensionKind(dimension);
                    }
                    if (representation.getDimensionTextLabelKey(dimension)) {
                        dimensionValue.fieldDesc = {
                            type: 'label',
                            kind: 'text',
                            key: representation.getDimensionTextLabelKey(dimension)
                        };
                    }
                    dimensionValues.push(dimensionValue);
                });
                measureValues = [];
                measures = representation.getMeasures();
                measures.forEach(function (measure) {
                    var measureValue = {
                        fieldName: measure
                    };
                    if (representation.getMeasureKind(measure)) {
                        measureValue.kind = representation.getMeasureKind(measure);
                    }
                    if (representation.getMeasureTextLabelKey(measure)) {
                        measureValue.fieldDesc = {
                            type: 'label',
                            kind: 'text',
                            key: representation.getMeasureTextLabelKey(measure)
                        };
                    }
                    measureValues.push(measureValue);
                });
                orderbyValues = [];
                representation.getOrderbySpecifications().forEach(function (spec) {
                    orderbyValues.push({
                        property: spec.property,
                        ascending: spec.ascending
                    });
                });

                configurationObject = {
                    id: representation.getId(),
                    representationTypeId: representation.getRepresentationType(),
                    parameter: {
                        dimensions: dimensionValues,
                        measures: measureValues,
                        alternateRepresentationTypeId: representation.getAlternateRepresentationType()
                    }
                };
                if (representation.getWidthProperties()) { // optional
                    configurationObject.parameter.width = representation.getWidthProperties();
                }
                if (orderbyValues.length > 0) {
                    configurationObject.parameter.orderby = orderbyValues;
                }
                topN = representation.getTopN();
                if (topN && topN > 0) {
                	configurationObject.parameter.top = topN;
                }
                that.serializeAndAddThumbnail(representation, configurationObject);

                representationValues.push(configurationObject);
            });
            return representationValues;
        }

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationObjects#serializeBinding
         * @param {sap.apf.modeler.core.Step} step
         * @param {object} containers - Hashes for generated objects like request, binding, etc.
         * @param {sap.apf.modeler.core.ElementContainer} containers.bindingIdHash - Generator for Id's of type binding.
         * @param {object[]} containers.bindings - binding list of configuration
         * @returns {String} - The Id.
         */
        this.serializeBinding = function (step, containers) {
            var bindingId = "binding-for-" + step.getId();
            var TextElement = textPool.get(step.getTitleId());	
        	var stepDescription = (TextElement && TextElement.TextElementDescription) || "";
            containers.bindings.push({
                type: "binding",
                id: bindingId,
                stepDescription : stepDescription,
                requiredFilters: step.getFilterProperties(),
                representations: serializeRepresentations(step)
            });
            return bindingId;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationObjects#serializeRequest
         * @param {sap.apf.modeler.core.Step} step
         * @param {object} containers - Hashes for generated objects like request, binding, etc.
         * @param {sap.apf.modeler.core.ElementContainer} containers.requestIdHash - Generator for Id's of type request.
         * @param {object[]} containers.requests - request list of configuration
         * @returns {String} - Id
         */
        this.serializeRequest = function (step, containers) {
            var request;
            var requestId = "request-for-" + step.getId();
            request = {
                type: "request",
                id: requestId,
                service: step.getService(),
                entitySet: step.getEntitySet(),
                selectProperties: step.getSelectProperties()
            };
            containers.requests.push(request);
            return requestId;
        };
        
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationObjects#serializeFilterMappingRequest
         * @param {sap.apf.modeler.core.Step|sap.apf.modeler.core.NavigationTarget} objectWithFilterMapping
         * @param {object} containers - Hashes for generated objects like request, binding, etc.
         * @param {sap.apf.modeler.core.ElementContainer} containers.requestIdHash - Generator for Id's of type request.
         * @param {object[]} containers.requests - request list of configuration
         * @returns {String} - Id
         */
        this.serializeFilterMappingRequest = function (objectWithFilterMapping, containers) {
            var requestId = "request-for-FilterMapping" + objectWithFilterMapping.getId();
            var request = {
                type: "request",
                id: requestId,
                service: objectWithFilterMapping.getFilterMappingService(),
                entitySet: objectWithFilterMapping.getFilterMappingEntitySet(),
                selectProperties: objectWithFilterMapping.getFilterMappingTargetProperties()
            };
            containers.requests.push(request);
            return requestId;
        };
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationObjects#serializeStep
         * @param {sap.apf.modeler.core.Step} step
         * @param {object} containers - Hashes for generated objects like request, binding, etc.
         * @param {sap.apf.modeler.core.ElementContainer} containers.requestIdHash - Generator for Id's of type request.
         * @param {sap.apf.modeler.core.ElementContainer} containers.bindingIdHash - Generator for Id's of type binding.
         * @returns {object}
         */
        this.serializeStep = function (step, containers) {
            var requestId = that.serializeRequest(step, containers);
            var bindingId = that.serializeBinding(step, containers);
            var TextElement = textPool.get(step.getTitleId());	
        	var description = (TextElement && TextElement.TextElementDescription) || "";
            var longTitleId = step.getLongTitleId();
            var topNsettings;
            
            var result = {
                type: "step",
                description : description,
                request: requestId,
                binding: bindingId,
                id: step.getId(),
                title: that.serializeLabelKey(step.getTitleId()),
                navigationTargets : []
            };
            
            if(step.getFilterMappingService()){
            	result.filterMapping = {
					requestForMappedFilter : that.serializeFilterMappingRequest(step, containers),
					target : step.getFilterMappingTargetProperties(),
					keepSource : step.getFilterMappingKeepSource() ? "true" : "false"
				};
            }
            topNsettings = step.getTopN();
            if (topNsettings) {
            	result.topNSettings = topNsettings;
            }
            if (longTitleId !== "" && longTitleId !== undefined ) {
            	result.longTitle =  that.serializeLabelKey(step.getLongTitleId());
            }
            this.serializeAndAddThumbnail(step,result);
            
            step.getNavigationTargets().forEach(function(navTargetId){
            	result.navigationTargets.push({type : "navigationTarget", id : navTargetId});
            });
            
            return result;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationObjects#serializeFacetFilter
         * @param {sap.apf.modeler.core.FacetFilter} facetFilter
         * @param {object} containers - Hashes for generated objects like request, binding, etc.
         * @param {sap.apf.modeler.core.ElementContainer} containers.requestIdHash - Generator for Id's of type request.
         * @returns {object}
         */
        this.serializeFacetFilter = function (facetFilter, containers) {
            var requestForFilterResolutionId,
                requestForValueHelpId;
            if(facetFilter.getServiceOfFilterResolution()) {
                requestForFilterResolutionId = serializeFacetFilterRequest("FilterResolution", facetFilter, containers);
            }
            
            if(facetFilter.getUseSameRequestForValueHelpAndFilterResolution()) {
            	requestForValueHelpId = requestForFilterResolutionId;
            } else if(facetFilter.getServiceOfValueHelp()) {
                requestForValueHelpId = serializeFacetFilterRequest("ValueHelp", facetFilter, containers);
            }
        	var TextElement = textPool.get(facetFilter.getLabelKey());
        	var description = (TextElement && TextElement.TextElementDescription) || "";
            return {
                type: "facetFilter",
                description : description,
                id: facetFilter.getId(),
                alias: facetFilter.getAlias(),
                property: facetFilter.getProperty(),
                multiSelection: facetFilter.isMultiSelection() + "",
                preselectionFunction: facetFilter.getPreselectionFunction(),
                preselectionDefaults: facetFilter.getPreselectionDefaults(),
                label: that.serializeLabelKey(facetFilter.getLabelKey()),
                filterResolutionRequest: requestForFilterResolutionId,
                valueHelpRequest: requestForValueHelpId,
                hasAutomaticSelection : facetFilter.getAutomaticSelection() + "",
                useSameRequestForValueHelpAndFilterResolution : facetFilter.getUseSameRequestForValueHelpAndFilterResolution() + ""
            };

        	function serializeFacetFilterRequest(requestType, facetFilter, containers) {
                var request;
                var service;
                var entitySet;
                var selectProperties;
                
                switch(requestType) {
	                case "ValueHelp":
	                	service = facetFilter.getServiceOfValueHelp();
	                	entitySet = facetFilter.getEntitySetOfValueHelp();
	                	selectProperties = facetFilter.getSelectPropertiesOfValueHelp();
	                    break;
	                case "FilterResolution":
	                	service = facetFilter.getServiceOfFilterResolution();
	                	entitySet = facetFilter.getEntitySetOfFilterResolution();
	                	selectProperties = facetFilter.getSelectPropertiesOfFilterResolution();
	                    break;
                }
                var requestId = requestType + "-request-for-" + facetFilter.getId();
                request = {
                        type: "request",
                        id: requestId,
                        service: service,
                        entitySet: entitySet,
                        selectProperties: selectProperties
                };
                containers.requests.push(request);
                return requestId;
        	}
        };


	    /**
	     * @private
	     * @function
	     * @name sap.apf.modeler.core.ConfigurationObjects#serializeNavigationTarget
	     * @param {sap.apf.modeler.core.NavigationTarget} navigationTarget
	     * @param {object} containers - Hashes for generated objects like request, binding, etc.
	     * @returns {object}
	     */
        this.serializeNavigationTarget = function (navigationTarget, containers) {
        	var result = {
                 type: "navigationTarget",
                 id: navigationTarget.getId(),
                 semanticObject: navigationTarget.getSemanticObject(),
        	     action: navigationTarget.getAction(),
        	     isStepSpecific: navigationTarget.isStepSpecific()
        	 };
             if(navigationTarget.getFilterMappingService()){
             	result.filterMapping = {
 					requestForMappedFilter : that.serializeFilterMappingRequest(navigationTarget, containers),
 					target : navigationTarget.getFilterMappingTargetProperties()
 				};
             }
             return result;
        };	
        	
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationObjects#serializeConfiguration
         * @description Return a serializable configuration.
         *      It recursively serializes all referenced objects, e.g. steps, representations, categories.
         * @param {sap.apf.modeler.core.ConfigurationEditor} editor
         * @returns{Object}
         */
        this.serializeConfiguration = function (editor) {
            var serializableConfiguration = {
            		analyticalConfigurationName : editor.getConfigurationName(),
	            	applicationTitle : that.serializeLabelKey(editor.getApplicationTitle()),
	                steps: [],
	                requests: [],
	                bindings: [],
	                representationTypes: [],
	                categories: [],
	                facetFilters: [],
	                navigationTargets: []
            };
            
            // add navigation configuration hard coded. Configuration editor must learn this format
            var containers = {
                requests: serializableConfiguration.requests,
                bindings: serializableConfiguration.bindings
            };

            editor.getCategories().forEach(function (category) {
            	var steps = editor.getCategoryStepAssignments(category.getId());
                serializableConfiguration.categories.push(that.serializeCategory(category,steps));
            });
            editor.getSteps().forEach(function (step) {
                var configStep = that.serializeStep(step, containers);
                serializableConfiguration.steps.push(configStep);
            });
            editor.getFacetFilters().forEach(function (facetFilter) {
                var configFacetFilter = that.serializeFacetFilter(facetFilter, containers);
                serializableConfiguration.facetFilters.push(configFacetFilter);
            });
            editor.getNavigationTargets().forEach(function (navigationTarget) {
                var configNavigationTarget = that.serializeNavigationTarget(navigationTarget, containers);
                serializableConfiguration.navigationTargets.push(configNavigationTarget);
            });
            return serializableConfiguration;
        };

        function mapOptionalThumbnail(configObject, modelObject) {
            var thumbnail = configObject.thumbnail;
            if (!thumbnail) {
                return;
            }
            if (thumbnail.leftLower) {
                modelObject.setLeftLowerCornerTextKey(thumbnail.leftLower.key);
            }
            if (thumbnail.leftUpper) {
                modelObject.setLeftUpperCornerTextKey(thumbnail.leftUpper.key);
            }
            if (thumbnail.rightLower) {
                modelObject.setRightLowerCornerTextKey(thumbnail.rightLower.key);
            }
            if (thumbnail.rightUpper) {
                modelObject.setRightUpperCornerTextKey(thumbnail.rightUpper.key);
            }
        }

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationObjects#mapStepToDesignTime
         * @param {object} configStep - configuration object
         * @param {sap.apf.modeler.core.ConfigurationEditor} configurationEditor
         * @param {sap.apf.modeler.core.RegistryWrapper} registry
         */
        function mapStepToDesignTime(configStep, registry, configurationEditor) {
            var stepId = configurationEditor.createStepWithId(configStep.id);
            var modelStep = configurationEditor.getStep(stepId);
            var request = registry.getItem(configStep.request);
            
        	if(request.entityType) { // TODO: remove workaround earliest 5th November
        		request.entitySet = request.entityType;
        		delete request.entityType;
        	}
        	if(request.service){
        		configurationEditor.registerService(request.service);	
        	}
            modelStep.setService(request.service);
            modelStep.setEntitySet(request.entitySet);
            modelStep.setTitleId(configStep.title.key);
            if (configStep.longTitle && configStep.longTitle.key) {
            	modelStep.setLongTitleId(configStep.longTitle.key);
            }
            if(configStep.navigationTargets){
            	configStep.navigationTargets.forEach(function(navTarget){
            		modelStep.addNavigationTarget(navTarget.id);
            	});
            }
            mapOptionalThumbnail(configStep, modelStep);
            request.selectProperties.forEach(function (property) {
                modelStep.addSelectProperty(property);
            });
            var binding = registry.getItem(configStep.binding);
            binding.requiredFilters.forEach(function (property) {
                modelStep.addFilterProperty(property);
            });
            
            binding.representations.forEach(function (configRepresentation) {
                var member;
                var modelRepresentation = modelStep.getRepresentation(modelStep.createRepresentation().getId());
               
                modelRepresentation.setRepresentationType(configRepresentation.representationTypeId);
                modelRepresentation.setAlternateRepresentationType(configRepresentation.parameter.alternateRepresentationTypeId);
                configRepresentation.parameter.dimensions.forEach(function (dimensionConfig) {
                        modelRepresentation.addDimension(dimensionConfig.fieldName);
                        if (dimensionConfig.fieldDesc) {
                            modelRepresentation.setDimensionTextLabelKey(dimensionConfig.fieldName, dimensionConfig.fieldDesc.key);
                        }
                        if (dimensionConfig.kind) {
                            modelRepresentation.setDimensionKind(dimensionConfig.fieldName, dimensionConfig.kind);
                        }
                    }
                );
                configRepresentation.parameter.measures.forEach(function (measureConfig) {
                        modelRepresentation.addMeasure(measureConfig.fieldName);
                        if (measureConfig.fieldDesc) {
                            modelRepresentation.setMeasureTextLabelKey(measureConfig.fieldName, measureConfig.fieldDesc.key);
                        }
                        if (measureConfig.kind) {
                            modelRepresentation.setMeasureKind(measureConfig.fieldName, measureConfig.kind);
                        }
                    }
                );
                if (configRepresentation.parameter.width) {
                    for (member in configRepresentation.parameter.width) {
                        if (configRepresentation.parameter.width.hasOwnProperty(member)) {
                            modelRepresentation.setWidthProperty(member, configRepresentation.parameter.width[member]);
                        }
                    }
                }
                if (configRepresentation.parameter.orderby && !configRepresentation.parameter.topN) { // optional
                    configRepresentation.parameter.orderby.forEach(function (obj) {
                        modelRepresentation.addOrderbySpec(obj.property, obj.ascending);
                    });
                }
               
                mapOptionalThumbnail(configRepresentation, modelRepresentation);
            });
            
            if(configStep.filterMapping){
               	mapFilterMappingToDesignTime(configStep.filterMapping, modelStep, registry);
            }
            if (configStep.topNSettings) {
            	modelStep.setTopN(configStep.topNSettings.top, configStep.topNSettings.orderby);
            }
        }

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationObjects#mapFacetFilterToDesignTime
         * @param {object} configFacetFilter - configuration object
         * @param {sap.apf.modeler.core.RegistryWrapper} registry
         * @param {sap.apf.modeler.core.ConfigurationEditor} configurationEditor
         */
        function mapFacetFilterToDesignTime(configFacetFilter, registry, configurationEditor) {
            var id = configurationEditor.createFacetFilterWithId(configFacetFilter.id);
            var modelFacetFilter = configurationEditor.getFacetFilter(id);
            
            modelFacetFilter.setLabelKey(configFacetFilter.label.key);
            modelFacetFilter.setAlias(configFacetFilter.alias);
            modelFacetFilter.setProperty(configFacetFilter.property);
            if (configFacetFilter.preselectionFunction && configFacetFilter.preselectionFunction !== "") {
            	modelFacetFilter.setPreselectionFunction(configFacetFilter.preselectionFunction);
            } else {
            	modelFacetFilter.setPreselectionDefaults(configFacetFilter.preselectionDefaults);
            }
            
            
            if (configFacetFilter.useSameRequestForValueHelpAndFilterResolution && configFacetFilter.useSameRequestForValueHelpAndFilterResolution === "true") {
            	modelFacetFilter.setUseSameRequestForValueHelpAndFilterResolution(true);
            } else {
            	modelFacetFilter.setUseSameRequestForValueHelpAndFilterResolution(false);
            }
            if (configFacetFilter.multiSelection === "true") {
            	modelFacetFilter.setMultiSelection(true); 
            } 
            if (configFacetFilter.hasAutomaticSelection === "true") {
            	modelFacetFilter.setAutomaticSelection(true); 
            } else {
            	modelFacetFilter.setAutomaticSelection(false); 
            }
            if(configFacetFilter.valueHelpRequest){
            	var configRequestForValueHelp = registry.getItem(configFacetFilter.valueHelpRequest);
            	if(configRequestForValueHelp.entityType) {
            		configRequestForValueHelp.entitySet = configRequestForValueHelp.entityType;
            		delete configRequestForValueHelp.entityType;
            	}
            	
            	if (configRequestForValueHelp.service) {
            		configurationEditor.registerService(configRequestForValueHelp.service);
            		modelFacetFilter.setServiceOfValueHelp(configRequestForValueHelp.service);
            	}
            	if (configRequestForValueHelp.entitySet) {
            		modelFacetFilter.setEntitySetOfValueHelp(configRequestForValueHelp.entitySet);
            	}
            	
            	configRequestForValueHelp.selectProperties.forEach(function(property) {
            		modelFacetFilter.addSelectPropertyOfValueHelp(property);
            	});
            }
            
            if(configFacetFilter.filterResolutionRequest){
            	var configRequestForFilterResolution = registry.getItem(configFacetFilter.filterResolutionRequest);
            	if(configRequestForFilterResolution.entityType) {
            		configRequestForFilterResolution.entitySet = configRequestForFilterResolution.entityType;
            		delete configRequestForFilterResolution.entityType;
            	}
            	
            	if (configRequestForFilterResolution.service) {
            		configurationEditor.registerService(configRequestForFilterResolution.service);
            		modelFacetFilter.setServiceOfFilterResolution(configRequestForFilterResolution.service);
            	}
            	if (configRequestForFilterResolution.entitySet) {
            		modelFacetFilter.setEntitySetOfFilterResolution(configRequestForFilterResolution.entitySet);
            	}
            	configRequestForFilterResolution.selectProperties.forEach(function(property) {
            		modelFacetFilter.addSelectPropertyOfFilterResolution(property);
            	});
            }
        }

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationObjects#mapNavigationTargetToDesignTime
         * @param {object} configNavigationTarget - configuration object
         * @param {sap.apf.modeler.core.RegistryWrapper} registry
         * @param {sap.apf.modeler.core.ConfigurationEditor} configurationEditor
         */
        function mapNavigationTargetToDesignTime(configNavigationTarget, registry, configurationEditor) {
            var id = configurationEditor.createNavigationTargetWithId(configNavigationTarget.id);
            var modelNavigationTarget = configurationEditor.getNavigationTarget(id);
            modelNavigationTarget.setSemanticObject(configNavigationTarget.semanticObject);
            modelNavigationTarget.setAction(configNavigationTarget.action);
            if (configNavigationTarget.isStepSpecific === true) {
//                modelNavigationTarget.setStepSpecific(configNavigationTarget.isStepSpecific);
                modelNavigationTarget.setStepSpecific();
            } else {
                modelNavigationTarget.setGlobal();
            }
            if(configNavigationTarget.filterMapping){
            	mapFilterMappingToDesignTime(configNavigationTarget.filterMapping, modelNavigationTarget, registry);
            }
        }
       
        function mapFilterMappingToDesignTime(configFilterMapping, modelWithFilterMapping, registry){
           	var requestForFilterMapping = registry.getItem(configFilterMapping.requestForMappedFilter);
            if(requestForFilterMapping.entityType) { 
                requestForFilterMapping.entitySet = requestForFilterMapping.entityType;
                delete requestForFilterMapping.entityType;
            }
            modelWithFilterMapping.setFilterMappingService(requestForFilterMapping.service);
            modelWithFilterMapping.setFilterMappingEntitySet(requestForFilterMapping.entitySet);
        	 
            configFilterMapping.target.forEach(function (property) {
        		 modelWithFilterMapping.addFilterMappingTargetProperty(property);
        	});
        	 
        	if(configFilterMapping.hasOwnProperty("keepSource")){
        		 if(configFilterMapping.keepSource === "true"){
        			 modelWithFilterMapping.setFilterMappingKeepSource(true);
        		 }else{
        			 modelWithFilterMapping.setFilterMappingKeepSource(false);
        		 }
        	}
        }
        
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationObjects#mapToDesignTime
         * @description Retrieve all first class citizens (e.g. steps and categories) from the hashtable and transfer them to the containers in the configurationEditor.
         *      Assumption: all input entities have identifier.
         * @param {sap.apf.modeler.core.RegistryWrapper} registry
         * @param {sap.apf.modeler.core.ConfigurationEditor} configurationEditor
         */
        this.mapToDesignTime = function (registry, configurationEditor) {
        	configurationEditor.setApplicationTitle(registry.getItem('applicationTitle').key);
        	registry.getSteps().forEach(function (step) {
        		mapStepToDesignTime(step, registry, configurationEditor);
        	});
            registry.getCategories().forEach(function (category) {
                configurationEditor.createCategoryWithId({labelKey: category.label.key}, category.id);
                category.steps.forEach(function(step){
                	configurationEditor.addCategoryStepAssignment(category.id, step.id);
                });
            });
            registry.getFacetFilters().forEach(function (facetFilter) {
                mapFacetFilterToDesignTime(facetFilter, registry, configurationEditor);
            });
            registry.getNavigationTargets().forEach(function (navigationTarget) {
                mapNavigationTargetToDesignTime(navigationTarget, registry, configurationEditor);
            });
        }; 
         /**
          * @private
          * @function
          * @name sap.apf.modeler.core.ConfigurationObjects#loadAllConfigurations
          * @description Load all configuration objects for a given application from server
          * @param {String} applicationId - Id of the application
          * @param {Function} callbackAfterLoad - callback with signature callbackAfterLoad(result, metadata, messageObject)
          */
         this.loadAllConfigurations = function (applicationId, callbackAfterLoad) {
         	var filterApplication = new sap.apf.core.utils.Filter(messageHandler, 'Application', 'eq', applicationId);
         	persistenceProxy.readCollection(
         			"configuration",
         			function(result, metadata, messageObject){
         				callbackAfterLoad(result, metadata, messageObject); //needed: for debugging purposes
         			},
         			undefined,
         			undefined,
         			filterApplication,
         			true );
         };
         /**
          * @private
          * @function
          * @name sap.apf.modeler.core.ConfigurationObjects#loadAllConfigurations
          * @description Load thext keys for all configuration objects of a given application
          * @param {String} applicationId - Id of the application
          * @param {Function} callbackAfterGet - callback with signature callbackAfterGet(textKeys, messageObject)
          * @param {sap.apf.core.utils.Hashtable} callbackAfterGet.textKeys - Hashtable with textKeys from all configurations
          */
         this.getTextKeysFromAllConfigurations = function (applicationId, callbackAfterGet) {
        
        	 this.loadAllConfigurations(applicationId, function(configurations, metadata, messageObject){
        		 var textKeys = new Hashtable(messageHandler);
        		 if(messageObject){
        			 callbackAfterGet(undefined, messageObject);
        			 return;
        		 }
        		 configurations.forEach(function(configuration){
        			var config = JSON.parse(configuration.SerializedAnalyticalConfiguration);
        			var textKeysForConfig = sap.apf.modeler.core.ConfigurationObjects.getTextKeysFromConfiguration(config);
        			textKeysForConfig.forEach(function(textKey){
        				textKeys.setItem(textKey, textKey);
        			});
        		 });
        		 callbackAfterGet(textKeys, undefined);
        	 }); 
         };

    };//ctor
    
    /**
     * @private
     * @function
     * @name sap.apf.modeler.core.ConfigurationObjects.deepDataCopy
     * @description Build a deep copy of the input Data considering explicit copy methods.
     * @param {Object} inputData input  object 
     * @returns {Object} Deep copy of the context object
     */
    sap.apf.modeler.core.ConfigurationObjects.deepDataCopy = function deepDataCopy(inputData) {
    	var resultData;
	    if(!inputData){
	      resultData = inputData; //shallow copy for falsy values
	    } else if( inputData.copy && typeof inputData.copy === "function" ) {
		   resultData = inputData.copy();  //Priority for explicit copy methods
  		} else if( inputData && typeof inputData === "object") {
  		  if( inputData instanceof Array) {
  			 resultData = [];
  			 inputData.forEach(function(item){
  				resultData.push(deepDataCopy(item)); //Deep copy for all array elements
  			 });
  		  } else {
  			 resultData = {};
  			 for( var item in inputData){
  				if(!inputData.hasOwnProperty(item)){
  				 continue;
  				}
  	  			resultData[item] = deepDataCopy(inputData[item]); //Deep copy for all object attributes
  	  		  }
  		  }
  	    } else {
  	      resultData = inputData; //Shallow copy for everything else	
  	    }
    	return resultData;
    };
    
    /**
     * @private
     * @function
     * @name sap.apf.modeler.core.ConfigurationObjects.getTextKeysFromConfiguration
     * @description deeply get all text keys for a stringifiable configuration object and its references
     * @param {Object} configuration - Stringifiable configuration object
     * @return {Array} Text keys
     */
    sap.apf.modeler.core.ConfigurationObjects.getTextKeysFromConfiguration = function getTextKeysFromConfiguration (configuration) {
    	 var resultValue = [];
    	 if(!configuration){
    		 return;
    	 }
    	 if(configuration.type && configuration.type === "label" &&
    	    configuration.kind && configuration.kind === "text" &&
    	    configuration.key){
    		return [configuration.key];
    	 } else {
    		for( var item in configuration ){
    			if(typeof configuration[item] !== "object" || !configuration.hasOwnProperty(item)){
    			  continue;
    			}
    			Array.prototype.push.apply(resultValue, getTextKeysFromConfiguration(configuration[item]));
    		} 
    		return resultValue;
    	 }
     };   

}());

}; // end of sap/apf/modeler/core/configurationObjects.js
if ( !jQuery.sap.isDeclared('sap.apf.modeler.core.elementContainer') ) {
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
/*global sap, jQuery*/

jQuery.sap.declare("sap.apf.modeler.core.elementContainer");

(function () {
    'use strict';

    /**
     * @private
     * @name sap.apf.modeler.core.ElementContainer
     * @description Managed object on top of some hashtable, simplifies code.
     * @param {String} name
     * @param {Function|undefined|{}} ElementConstructor - When a constructor function is provided then a new instance is created in method createElement.
     *  When undefined or an empty object are given then an empty object instance is created.
     * @param {Object} inject
     * @param {Object} inject.instance.messageHandler
     * @param {Object} dataFromCopy                optional parameter to set the internal state of the new instance during a copy operation
     * @param {Object} dataFromCopy.elements
     * @param {Object} dataFromCopy.elementCounter
     * @constructor
     */
    sap.apf.modeler.core.ElementContainer = function (name, ElementConstructor, inject, dataFromCopy) {
        var elements,
            elementCounter,
            regexp = new RegExp( "^" + name + "-([123456789]\\d*)$"),
            regexp2 = new RegExp( "^" + name);

        /** @type sap.apf.modeler.core.ElementContainer
         * @description NOTE: due to the way of binding functions used in classes ConfigurationEditor and Step
         * "this" in many functions is bound to the calling object, not to this of type sap.apf.modeler.core.ElementContainer.
         * Thus, always use that inside functions!
         */
        var that = this;

        inject.instance.messageHandler.check(name !== undefined, "ElementContainer: Element has been created without name");
        if(!dataFromCopy){
        	elements = new inject.constructor.hashtable(inject.instance.messageHandler);
        	elementCounter = 0;
        } else {
        	elements = dataFromCopy.elements;
        	elementCounter = dataFromCopy.elementCounter;
        }

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ElementContainer#generateId
         * @description Create a unique Id, unique in this container.
         * @returns {string} - Id
         */
        this.generateId = function() {
			return name + "-" + (++elementCounter);
		};

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ElementContainer#createElement
         * @description Create an empty element.
         * @param {Object} [element] - Optional object whose members are merged into the created element.
         * @returns {{getId:string}}
         */
        this.createElement = function (element) {
            var elementId;

            elementId = that.generateId();
            return createElementWithId(element, elementId);
           
        };
        
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ElementContainer#createElementWithProposedId
         * @description Create an empty element with an proposed id. Use the proposed id, if not yet used.
         * @param {Object} [element] - Optional object whose members are merged into the created element.
		 * @param {String} proposedId Id, that should be used, if not already another object has this id
         */
        this.createElementWithProposedId = function(element, proposedId) {
        	
        	function adaptElementCounter(newId) {
    			/* If the newId obeys to the naming conventions for internal IDs, we might need
    			 to update the elementCounter with the number extracted from newId,
    			 so that still new element Ids are created by the internal numbering algorithm
    			 in method createElement. */
    			var match = regexp.exec(newId);
    			if (match) {
    				var number = parseInt(match[1], 10);
    				if (number > elementCounter) {
    					elementCounter = number;
    				}
    			}
    		}
        	
        	var created;       	
        	var existingElementWithSameId = elements.getItem(proposedId);
        	
        	if (existingElementWithSameId) {
        		return that.createElement(element);
        	}
        	created = createElementWithId(element, proposedId);
        	adaptElementCounter(proposedId);
        	return created;   	
        };
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ElementContainer#removeElement
         * @description Remove an existing element.
         * @param {String} id
         */
        this.removeElement = function (id) {
            return elements.removeItem(id);
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ElementContainer#getElement
         * @description Get an identified existing element.
         * @param {Object} elementId
         * @returns {{getId:string}}
         */
        this.getElement = function (elementId) {
            return elements.getItem(elementId);
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ElementContainer#updateElement
         * @description Update an existing element.
         * @param {String} elementId
         * @param {Object} element
         * @returns {String} The elementId
         */
        this.updateElement = function (elementId, element) {
        	inject.instance.messageHandler.check(elementId !== undefined, "ElementContainer: Element has been updated with undefined elementId");
            if ((!element.getId) || element.getId() !== elementId) {
                element.getId = function () {
                    return elementId;
                };
            }
            elements.setItem(elementId, element);
            return elementId;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ElementContainer#setElement
         * @description Create a new element or update an existing element. An element gets assigned a member "getId()" that returns the generated elementId.
         * See {@link sap.apf.modeler.core.ElementContainer#createElement} and {@link sap.apf.modeler.core.ElementContainer#updateElement}.
         * Trying to set an element with a given elementId when the element is not yet existing will result in an error. Thus, elementIds cannot be determined externally.
         * @param {object} element
         * @param {String} [elementId] element identifier. If parameter is omitted, then the function has the meaning of create, otherwise update.
         * @returns{String|undefined} Returns the id of a newly created or updated element
         */
        this.setElement = function (element, elementId) {
            var createdItem;
            if (elementId) {
                if (!(elements.getItem(elementId))) {
                    inject.instance.messageHandler.putMessage(inject.instance.messageHandler.createMessageObject({
                        code: '11006',
                        aParameters: [ elementId ]
                    }));
                    return undefined;
                }
                that.updateElement(elementId, element);
                return elementId;
            }
            createdItem = that.createElement(element);
            return createdItem.getId();
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ElementContainer#getElements
         * @description Get all existing elements.
         * @returns {Object[]}
         */
        this.getElements = function () {
            var list = [];
            elements.forEachOrdered(function (id, element) {
                list.push(element);
            });
            return list;
        };

        /**
         * Change the ordering by moving one key some positions.
         * @private
         * @function
         * @name sap.apf.modeler.core.ElementContainer#moveUpOrDown
         * @param {string} elementId
         * @param {number} distance
         * @returns {number|null} WHEN either elementId is not contained or undefined THEN return null.
         *      Otherwise return the index of the index position of moved elementId, after the move.
         */
        this.moveUpOrDown = function(elementId, distance) {
        	return elements.moveUpOrDown(elementId, distance);
        };
        
        /**
         * Change the ordering by moving one key in the ordering before another key.
         * @private
         * @function
         * @name sap.apf.modeler.core.ElementContainer#moveBefore
         * @param {string} beforeElementId
         * @param {string} movedElementId
         * @returns {number|null} WHEN either elementId is not contained or undefined THEN return null.
         *      Otherwise return the index of the index position of movedElementId, after the move.
         */
        this.moveBefore = function(beforeElementId, movedElementId) {
        	return elements.moveBefore(beforeElementId, movedElementId);
        };
        
        
        /**
         * Change the ordering by moving one element in the ordering to the end.
         * @private
         * @function
         * @name sap.apf.modeler.core.ElementContainer#moveToEnd
         * @param {string} elementId
         * @returns {number|null} WHEN the key elementId is not contained or undefined THEN return null.
         *      Otherwise return the index of the index position of moveKey, after the move.
         */
        this.moveToEnd = function(elementId) {
        	return elements.moveToEnd(elementId);
        };
        
        
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ElementContainer#copyElement
         * @description Copy an element (deep).
         * @param {String} id - Id to be copied
         * @returns {string} - Id of the result of the copy
         */
        this.copyElement = function(id){
        	var element, 
        	    copiedElement, 
        	    newId;
        	
        	element = elements.getItem(id);
        	if(!element){
        		return; 
        		}
        	
        	newId = that.generateId();
        	if( element.copy && typeof element.copy === "function" ) {
        	  copiedElement = element.copy(newId); 
        	} else {
        	  copiedElement = sap.apf.modeler.core.ConfigurationObjects.deepDataCopy(element); 
        	}
        	
        	copiedElement.getId = function () {return newId;}; 
        	elements.setItem(newId, copiedElement); 
        	
        	return newId;
        };
        
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ElementContainer#copy
         * @description Execute a deep copy of the element container and the contained objects
         * @param {String} newName - optional new name for the copied element container
         * @returns {Object} sap.apf.modeler.core.ElementContainer# New element container object being a copy of this
         */
        this.copy = function(newName){
        	var copiedData = {
        			elements : new inject.constructor.hashtable(inject.instance.messageHandler),
        			elementCounter : elementCounter 
        		};
        	var element;
        	var copiedElement;
 
        	elements.getKeysOrdered().forEach(function(id){
        		
        		element = elements.getItem(id);	
        		copiedElement = sap.apf.modeler.core.ConfigurationObjects.deepDataCopy(element);
        		
        	    if(newName && id.indexOf(name) === 0){
        	        id = id.replace(regexp2, newName);
        		}
        	    inject.instance.messageHandler.check(id !== undefined, "ElementContainer: Element has been created without name in copy - 1");
            	
        	    
	        	if(typeof copiedElement === "object" && copiedElement.getId && typeof copiedElement.getId === "function"){
	        		  copiedElement.getId = function(){return id;};
	        	}
        		
	        	copiedData.elements.setItem(id, copiedElement);
        	});
        	inject.instance.messageHandler.check(name !== undefined || newName !== undefined, "ElementContainer: Element has been created without name in copy 2");
        	
        	return new sap.apf.modeler.core.ElementContainer((newName || name), ElementConstructor, inject, copiedData);
        };
        
        /**
         * private functions
         */
        
        function createElementWithId(element, elementId) {
			var created;

			inject.instance.messageHandler.check(elementId !== undefined, "ElementContainer: Element has been created with undefined id");
			if (typeof ElementConstructor === 'function') {
				if(ElementConstructor !== sap.apf.modeler.core.ElementContainer){
					created = new ElementConstructor(elementId, inject);
				}else{
					created = new ElementConstructor(elementId, undefined, inject);
				}
			} else {
				created = {};
			}
			created.getId = function() {
				return elementId;
			};
			
			if (element) {
				created = jQuery.extend(created, element);
			}
			elements.setItem(elementId, created);
			return created;
		}
    };

}());

}; // end of sap/apf/modeler/core/elementContainer.js
if ( !jQuery.sap.isDeclared('sap.apf.modeler.core.facetFilter') ) {
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
/*global sap, jQuery*/

jQuery.sap.declare("sap.apf.modeler.core.facetFilter");

(function () {
    'use strict';

    /**
     * @private
     * @name sap.apf.modeler.core.FacetFilter
     * @class A facet filter proxy object providing editor methods on configuration objects.
     * @param {String} facetFilterId - unique Id within configuration.
     * @param {Object} inject - Injection of required APF object references, constructors and functions.
     * @param {sap.apf.core.utils.MessageHandler} inject.instance.messageHandler - MessageHandler instance
     * @param {Object} inject.constructor - Injected constructors
     * @param {sap.apf.core.utils.Hashtable} inject.constructor.hashtable - Hashtable constructor
     * @param {Object} dataFromCopy - Optional parameter to set the internal state of the new instance during a copy operation 
     * @constructor
     */
	
    sap.apf.modeler.core.FacetFilter = function (facetFilterId, inject, dataFromCopy) {
            var request,
            selectPropertyForValueHelp,
            selectPropertyForFilterResolution,
            metadata,
            label,
            preselectionDefaults,
            property,
            alias,
            labelKey,
            preselectionFunction,
            hasAutomaticSelection = true,
            isMultiSelectionActive,
            useSameRequestForValueHelpAndFilterResolution;
            
         if(!dataFromCopy){
        	 request = {
                 	forValueHelp : {
                 		service : undefined,
                 		entitySet : undefined
                 	},
                 	forFilterResolution : {
                 		service : undefined,
                 		entitySet : undefined
                 	}
                 };
        	 selectPropertyForValueHelp = new inject.constructor.elementContainer("SelectPropertyValueHelp", undefined, inject);
             selectPropertyForFilterResolution = new inject.constructor.elementContainer("SelectPropertyFilterResolution", undefined, inject);
             metadata = {};
             label = {};
             preselectionDefaults = [];
             isMultiSelectionActive = false;
             useSameRequestForValueHelpAndFilterResolution = false;
         }else{
        	 request = dataFromCopy.request;
             selectPropertyForValueHelp = dataFromCopy.selectPropertyForValueHelp;
             selectPropertyForFilterResolution = dataFromCopy.selectPropertyForFilterResolution;
             metadata = dataFromCopy.metadata;
             label = dataFromCopy.label;
             preselectionDefaults = dataFromCopy.preselectionDefaults;
             property = dataFromCopy.property;
             alias = dataFromCopy.alias;
             labelKey = dataFromCopy.labelKey;
             preselectionFunction = dataFromCopy.preselectionFunction;
             isMultiSelectionActive = dataFromCopy.isMultiSelectionActive;
             hasAutomaticSelection = dataFromCopy.hasAutomaticSelection;
             useSameRequestForValueHelpAndFilterResolution = dataFromCopy.useSameRequestForValueHelpAndFilterResolution;
         }   

        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#getId
         * @function
         * @description The immutable id of the facet filter
         * @returns {String} id
         */
        this.getId = function () {
            return facetFilterId;
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#setMultiSelection
         * @function
         * @description Set property multiselection
         * @param {boolean} bool isMultiSelectionActive
         */
        this.setMultiSelection = function(bool) {
        	isMultiSelectionActive = bool;
        };

        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#isMultiSelection
         * @function
         * @description Get property multi selection
         * @returns {boolean} isMultiSelectionActive
         */
        this.isMultiSelection = function() {
        	return isMultiSelectionActive;
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#setAlias
         * @function
         * @description Sets alias to facet filter
         * @param {string} aliasString
         */
        this.setAlias = function(aliasString) {
        	alias = aliasString;
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#getAlias
         * @function
         * @returns {String} alias
         */
        this.getAlias = function() {
        	return alias;
        };

        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#setAutomaticSelection
         * @function
         * @description Sets Indicator, that there will be a auto selection.
         * This means, that for single selection the first value will be selected in the facet filter at run time or all values will be selected for multiple selection
         * @param {boolean} value preselectionFunction
         */
        this.setAutomaticSelection = function(value) { 
        	inject.instance.messageHandler.check(typeof value === "boolean", "facetFilter wrong input for setAutomaticSelection");
        	hasAutomaticSelection = value;
        	if (hasAutomaticSelection) {
        		this.removePreselectionFunction();
        		this.removePreselectionDefaults();
        	}
        };
        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#getAutomaticSelection
         * @function
         * @description gets Indicator, that there will be a auto selection.
         */
        this.getAutomaticSelection = function() {      	
        	return hasAutomaticSelection;
        };
        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#setPreselectionFunction
         * @function
         * @description Sets preselectionFunction to facet filter
         * @param {string} value preselectionFunction
         */
        this.setPreselectionFunction = function(value) {
        	preselectionFunction = value;
        	hasAutomaticSelection = false;
        	this.removePreselectionDefaults();
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#getPreselectionFunction
         * @function
         * @returns {String} preselectionFunction
         */
        this.getPreselectionFunction = function() {
        	return preselectionFunction;
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#removePreselectionFunction
         * @description Removes preselectionFunction from facet filter
         * @function
         */
        this.removePreselectionFunction = function() {
        	preselectionFunction = undefined;
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#setPreselectionDefaults
         * @function
         * @description Sets preselectionDefaults to facet filter
         * @param {String[]} array preselectionDefaults
         */
        this.setPreselectionDefaults = function(array) {
        	preselectionDefaults = array;
        	hasAutomaticSelection = false;
        	this.removePreselectionFunction();
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#getPreselectionDefaults
         * @function
         * @returns {String[]} preselectionDefaults
         */
        this.getPreselectionDefaults = function() {
        	return preselectionDefaults;
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#removePreselectionDefaults
         * @description Removes preselectionDefaults from facet filter
         * @function
         */
        this.removePreselectionDefaults = function() {
        	preselectionDefaults = [];
        };

        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#setLabelKey
         * @function
         * @description Sets labelKey to facet filter
         * @param {string} labelKey_
         */
        this.setLabelKey = function(labelKey_) {
        	labelKey = labelKey_;
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#getLabelKey
         * @function
         * @returns {String} labelKey
         */
        this.getLabelKey = function() {
        	return labelKey;
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#setProperty
         * @function
         * @description Sets property to facet filter
         * @param {string} prop property
         */
        this.setProperty = function(prop) {
        	property = prop;
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#getProperty
         * @function
         * @returns {String} property
         */
        this.getProperty = function() {
        	return property;
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#setUseSameRequestForValueHelpAndFilterResolution
         * @function
         * @description Set Indicator, whether value help and filter resolution request should use the same request
         * @param {boolean} OnOff
         */
        this.setUseSameRequestForValueHelpAndFilterResolution = function(OnOff) {
        	var that = this;
			if (OnOff) {
				var service = this.getServiceOfValueHelp();
				this.setServiceOfFilterResolution(service);
				var entitySet = this.getEntitySetOfValueHelp();
				this.setEntitySetOfFilterResolution(entitySet);

				var selectProperties = this.getSelectPropertiesOfFilterResolution();
				selectProperties.forEach(function(property) {
					that.removeSelectPropertyOfFilterResolution(property);
				});	
				
				selectProperties = this.getSelectPropertiesOfValueHelp();
				
				selectProperties.forEach(function(property) {
					that.addSelectPropertyOfFilterResolution(property);
				});
			}
			useSameRequestForValueHelpAndFilterResolution = OnOff;

		};
        
        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#getUseSameRequestForValueHelpAndFilterResolution
         * @function
         * @description get Indicator, whether value help and filter resolution request should use the same request
         */
        this.getUseSameRequestForValueHelpAndFilterResolution = function() {
        	return useSameRequestForValueHelpAndFilterResolution;
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#setServiceOfValueHelp
         * @function
         * @description Set service of request for value help
         * @param {string} servicePath
         */
        this.setServiceOfValueHelp = function(servicePath) {
        	request.forValueHelp.service = servicePath;
        	if (useSameRequestForValueHelpAndFilterResolution) {
        		request.forFilterResolution.service = servicePath;
        	}
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#getServiceOfValueHelp
         * @function
         * @description Returns service of value help
         * @returns {String} serviceForValueHelp
         */
        this.getServiceOfValueHelp = function() {
        	return request.forValueHelp.service;
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#setEntitySetOfValueHelp
         * @function
         * @description Set entity set to request for value help
         * @param {String} entitySetName
         */
        this.setEntitySetOfValueHelp = function(entitySetName) {
        	request.forValueHelp.entitySet = entitySetName;
        	if (useSameRequestForValueHelpAndFilterResolution) {
        		request.forFilterResolution.entitySet = entitySetName;
        	}
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#getEntitySetOfValueHelp
         * @function
         * @description Returns entity set of value help
         * @returns {String} entityForValueHelp
         */
        this.getEntitySetOfValueHelp = function() {
        	return request.forValueHelp.entitySet;
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#getSelectPropertiesOfValueHelp
         * @function
         * @description Returns select properties of value help request
         * @returns {String[]} selectProperties
         */
        this.getSelectPropertiesOfValueHelp = function() {
            var selectProperties = [];
            var elementList;
        	elementList = selectPropertyForValueHelp.getElements();
        	elementList.forEach(function (element) {
        		selectProperties.push(element.getId());
            });
            return selectProperties;
        };
        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#removeSelectPropertyOfValueHelp
         * @function
         * @description Removes select property from request for value help
         * @param {String} selectProperty
         */
        this.removeSelectPropertyOfValueHelp = function(selectProperty) {
        	selectPropertyForValueHelp.removeElement(selectProperty);
        	if (useSameRequestForValueHelpAndFilterResolution) {
        		selectPropertyForFilterResolution.removeElement(selectProperty);
        	}
        };
        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#addSelectPropertyOfValueHelp
         * @function
         * @description Add select property to request for value help
         * @param {String} selectProperty
         */
        this.addSelectPropertyOfValueHelp = function(selectProperty) {
        	selectPropertyForValueHelp.createElementWithProposedId(undefined, selectProperty);
        	if (useSameRequestForValueHelpAndFilterResolution) {
        		selectPropertyForFilterResolution.createElementWithProposedId(undefined, selectProperty);
        	}
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#setServiceOfFilterResolution
         * @function
         * @description Set service of request for filter resolution
         * @param {String} servicePath
         */
        this.setServiceOfFilterResolution = function(servicePath) {
        	if (useSameRequestForValueHelpAndFilterResolution) {
        		return;
        	}
        	request.forFilterResolution.service = servicePath;
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#getServiceOfFilterResolution
         * @function
         * @description Returns service of filter resolution
         * @returns {String} serviceOfFilterResolution
         */
        this.getServiceOfFilterResolution = function() {
        	return request.forFilterResolution.service;
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#setEntitySetOfFilterResolution
         * @function
         * @description Set entity set to request for filter resolution
         * @param {String} entitySetName
         */
        this.setEntitySetOfFilterResolution = function(entitySetName) {
        	if (useSameRequestForValueHelpAndFilterResolution) {
        		return;
        	}
        	request.forFilterResolution.entitySet = entitySetName;
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#getEntitySetOfFilterResolution
         * @function
         * @description Returns entity set of filter resolution
         * @returns {String} entitySetOfFilterResolution
         */
        this.getEntitySetOfFilterResolution = function() {
        	return request.forFilterResolution.entitySet;
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#getSelectPropertiesOfFilterResolution
         * @function
         * @description Returns select properties of filter resolution
         * @returns {String[]} selectProperties
         */
        this.getSelectPropertiesOfFilterResolution = function() {
            var selectProperties = [];
            var elementList;
        	elementList = selectPropertyForFilterResolution.getElements();
        	elementList.forEach(function (element) {
        		selectProperties.push(element.getId());
            });
            return selectProperties;
        };
        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#removeSelectPropertyOfFilterResolution
         * @function
         * @description Removes select property from request for filter resolution
         * @param {String} selectProperty
         */
        this.removeSelectPropertyOfFilterResolution = function(selectProperty) {
        	if (useSameRequestForValueHelpAndFilterResolution) {
        		return;
        	}
        	selectPropertyForFilterResolution.removeElement(selectProperty);
        };
        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#addSelectPropertyOfFilterResolution
         * @function
         * @description Add select property to request for filter resolution
         * @param {String} selectProperty
         */
        this.addSelectPropertyOfFilterResolution = function(selectProperty) {
        	if (useSameRequestForValueHelpAndFilterResolution) {
        		return;
        	}
        	selectPropertyForFilterResolution.createElementWithProposedId(undefined, selectProperty);
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.FacetFilter#copy
         * @function
         * @description Execute a deep copy of the facet filter and its referenced objects
         * @param {String} newIdForCopy - New Id for the copied instance
         * @returns {Object} sap.apf.modeler.core.FacetFilter# - New facet filter object being a copy of this object
         */
        this.copy = function( newIdForCopy ){
        	var dataForCopy = {
		        	request : request,
		            selectPropertyForValueHelp : selectPropertyForValueHelp,
		            selectPropertyForFilterResolution : selectPropertyForFilterResolution,
		            metadata : metadata,
		            label : label,
		            preselectionDefaults : preselectionDefaults,
		            property : property,
		            alias : alias,
		            labelKey : labelKey,
		            preselectionFunction : preselectionFunction,
		            isMultiSelectionActive : isMultiSelectionActive,
		            hasAutomaticSelection : hasAutomaticSelection };
        	var dataFromCopy = sap.apf.modeler.core.ConfigurationObjects.deepDataCopy( dataForCopy );
        	return new sap.apf.modeler.core.FacetFilter( (newIdForCopy || this.getId()), inject, dataFromCopy);
        };
    };
}()); 
}; // end of sap/apf/modeler/core/facetFilter.js
if ( !jQuery.sap.isDeclared('sap.apf.modeler.core.lazyLoader') ) {
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
/*global sap, jQuery*/

jQuery.sap.declare("sap.apf.modeler.core.lazyLoader");

(function () {
    'use strict';

    /**
     * @private
     * @name sap.apf.modeler.core.lazyLoader
     * @class A lazy load manager providing the logic for loading objects asynchronously
     * @param {Object} inject - Injection of required APF object references, constructors and functions
     * @param {sap.apf.core.utils.messageHandler} inject.instance.MessageHandler - messageHandler instance
     * @param {sap.apf.core.utils.Hashtable} inject.constructor.hashtable - Hashtable constructor
     * @param {Function} fnLoadInstance - A function that executes the asynchronous load with the following signature: fnLoadInstance(id, callbackFromLoad(id, instance, messageObject), oldInstance)
     * @param {Object} dataForInstantiation - Optional data that can be used for the instantiation
     * @param {String} dataForInstantiation.id Id used for instantiation
     * @param {Object} dataForInstantiation.instance Instance used for instantiation                                   
     * @constructor
     */
    sap.apf.modeler.core.LazyLoader = function (inject, fnLoadInstance, dataForInstantiation) {
    	
		var object = {
			id              : null,
			instance        : null,
			messageObject   : null,
			isInitializing  : false,
			callbacksFromAsyncGet : new inject.constructor.hashtable(inject.instance.messageHandler)	
		},
		oldInstance = null;
	    
		if(dataForInstantiation){
			object.id       = dataForInstantiation.id;
			object.instance = dataForInstantiation.instance;
		}
		
		this.type = "lazyLoader";
		
		 /**
         * @private
         * @name sap.apf.modeler.core.lazyLoader#getId
         * @function
         * @description Return the id that is currently loaded
         * @returns {String|Null}                    
         */    	
    	this.getId = function(){
    		return object.id;
    		};
		/**
         * @private
         * @name sap.apf.modeler.core.lazyLoader#getInstance
         * @function
         * @description Return the instance that is currently loaded
         * @returns {Object|Null}                    
         */    	
    	this.getInstance = function(){
    		return object.instance;
    	};
    	/**
         * @private
         * @name sap.apf.modeler.core.lazyLoader#isInitializing
         * @function
         * @description Returns whether the loader is initializing
         * @returns {Boolean}                    
         */    	
    	this.isInitializing = function(){
    		return object.isInitializing;
    	};
        /**
         * @private
         * @name sap.apf.modeler.core.lazyLoader#reset
         * @function
         * @description Reset the internal state of the lazyLoad object                    
         */    	
    	this.reset = function(){
    		oldInstance = object.instance; // !!!: to be able to reload the data for the new Id into the old instance
    		object = {
    				id              : null,
    				instance        : null,
    				messageObject   : null,
    				isInitializing  : false,
    				callbacksFromAsyncGet : new inject.constructor.hashtable(inject.instance.messageHandler)
    			};
    	};

 

        /**
         * @private
         * @name sap.apf.modeler.core.lazyLoader#asyncGetInstance
         * @function
         * @description Execute an asynchronous get for a certain object id
         * @param {String} id - Id of the object
         * @param {function(id, instance, messageObject)} callbackAfterAsyncGet - Callback returns the id and either the loaded object instance or a message object
         * @param {object} callbackAfterAsyncGet.instance
         * @param {sap.apf.core.MessageObject} callbackAfterAsyncGet.messageObject
         * @param {string} callbackAfterAsyncGet.id
         */
    	this.asyncGetInstance = function(id, callbackFromAsyncGet){
    		
    		if(!id){
    		 return;	
    		}
    		
    		if(object.id && id !== object.id){ 
    			this.reset();
    		}
    		if(object.id && (object.instance || object.messageObject)){
    			callbackFromAsyncGet(object.instance, object.messageObject, object.id);
    			return;  
    		} 
    		
    		memorizeCallback(callbackFromAsyncGet);
    		
    		if(!object.isInitializing){
    			object.isInitializing = true;    			
    			object.id = id;
    		    fnLoadInstance(id, callbackFromFnLoadInstance, oldInstance);
    		   }
    	};
    	
        function callbackFromFnLoadInstance(id, instance, messageObject){
            if(id !== object.id){
                return;
            }
            object.isInitializing = false;
            if(!messageObject){
                object.instance = instance;
            } else {
            	object.messageObject = messageObject;
            }
            object.callbacksFromAsyncGet.each(function(key, callbackArray){
                callbackArray.forEach(function(callbackFromAsyncGet){
                    callbackFromAsyncGet( object.instance, messageObject, object.id);
                });
            });
            object.callbacksFromAsyncGet = null;
        }
        
        function memorizeCallback(callbackFromAsyncGet){
            var i;
            var found,
                callbackArray;
            callbackArray = object.callbacksFromAsyncGet.getItem(callbackFromAsyncGet);
            if(!callbackArray){
                object.callbacksFromAsyncGet.setItem(callbackFromAsyncGet, [callbackFromAsyncGet]);
                return;
            }
            found = false;
            for(i = 0; i < callbackArray.length; i++){
                if(callbackArray[i] === callbackFromAsyncGet){
                    found = true;
                    break;
                }
            }
            if(!found){
                callbackArray.push(callbackFromAsyncGet);
            }
        }
    	
    };
}());

}; // end of sap/apf/modeler/core/lazyLoader.js
if ( !jQuery.sap.isDeclared('sap.apf.modeler.core.messageDefinition') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.apf.modeler.core.messageDefinition");

sap.apf.modeler.core.messageDefinition = [ {
	code : "11005",
	severity : "technError",
	text : "Bad HTTP request returned status code {0} with status text {1}."
}, {
	code : "11006",
	severity : "technError",
	text : "Unknown identifier: {0}"
}, {
	code : "11007",
	severity : "technError",
	text : "Cannot export unsaved configuration. Configuration ID: {0}"
}, {
	code : "11008",
	severity : "error",
	description : "Format information is missing at least for text element {0} - please edit the exported text property file manually",
	key : "11008"
}, {
	code : "11009",
	severity : "error",
	description : "Application id {0} cannot be used as translation uuid in text property file - please edit the exported text property file manually",
	key : "11009"
}, {
	code : "11010",
	severity : "error",
	description : "Imported text property file does not contain the APF application id - expected an entry like #ApfApplicationId=543EC63F05550175E10000000A445B6D.",
	key : "11010"
}, {
	code : "11011",
	severity : "error",
	description : "Expected a valid text entry <key>=<value> in line {0}, but could not find - key must be in valid guid format.",
	key : 11011
}, {
	code : "11012",
	severity : "error",
	description : "No valid text entry <key>=<value> in line {0}, key is not in valid guid format like 543EC63F05550175E10000000A445B6D.",
	key : 11012
}, {
	code : "11013",
	severity : "technError",
	text : "Metadata request {3} to server failed with http status code {0}, http error message {1}, and server response {2}",
	key : "11013"
}, {
	code : "11014",
	severity : "error",
	description : "ApfApplicationId in line {0} has invalid format - a valid application id looks like 543EC63F05550175E10000000A445B6D.",
	key : "11014"
}, {
	code : "11015",
	severity : "error",
	description : "Date in line {0} has invalid format.",
	key : "11015"
}, {
	code : "11016",
	severity : "error",
	description : "Sorting options must be supplied when setting top n",
	key : "11016"
},{
	code : "11020",
	severity : "error",
	description : "Text property has invalid format and cannot be imported - see previous messages for details",
	key : "11020"
}, {
	code : "11021",
	severity : "error",
	description : "ApfApplicationId {0} referenced in the text property is not yet existing - please load one configuration of the application before importing the texts.",
	key : "11021"
},
{
	code : "11030",
	severity : "error",
	description : "Label {0} is not valid",
	key : "11030"
},
{
	code : "11031",
	severity : "error",
	description : "Category {0} is not valid",
	key : "11031"
},
{
	code : "11032",
	severity : "error",
	description : "Request {0} is not valid",
	key : "11032"
},
{
	code : "11033",
	severity : "error",
	description : "Binding {0} is not valid",
	key : "11033"
},
{
	code : "11034",
	severity : "error",
	description : "Facet filter {0} is not valid",
	key : "11034"
},
{
	code : "11035",
	severity : "error",
	description : "Step {0} is not valid",
	key : "11035"
},
{
	code : "11036",
	severity : "error",
	description : "Configuration is not valid",
	key : "11036"
},
{
	code : "11037",
	severity : "error",
	description : "Invalid application guid {0}",
	key : "11037"
},
{
	code : "11038",
	severity : "error",
	description : "Invalid configuration guid {0}",
	key : "11038"
},
{
	code : "11039",
	severity : "error",
	description : "Invalid text guid {0}",
	key : "11039"
},
{
	code : "11040",
	severity : "error",
	description : "Navigation target {0} is not valid",
	key : "11040"
},{
	code : "11041",
	severity : "technError",
	text : "Network service for retrieving semantic objects failed - see console."
},{
	code : "11042",
	severity : "technError",
	text : "Error occurred when retrieving actions for semantic object - see console."
},{
	code : "11500",
	severity : "error",
	description : "An error occurred while attempting to save the application.",
	key : "11500"
},{
	code : "11501",
	severity : "error",
	description : "An error occurred while attempting to delete the application.",
	key : "11501"
},{
	code : "11502",
	severity : "error",
	description : "An error occurred while importing the configuration.",
	key : "11502"
},{
	code : "11503",
	severity : "error",
	description : "An error occurred while importing the text properties file.",
	key : "11503"
},{
	code : "11504",
	severity : "error",
	description : "An error occurred while retrieving the semantic objects available.",
	key : "11504"
},{
	code : "11505",
	severity : "error",
	description : "An error occurred while retrieving the actions for the given semantic object.",
	key : "11505"
}
];
}; // end of sap/apf/modeler/core/messageDefinition.js
if ( !jQuery.sap.isDeclared('sap.apf.modeler.core.navigationTarget') ) {
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2015 SAP SE. All rights reserved
 */
/*global sap, jQuery*/

jQuery.sap.declare("sap.apf.modeler.core.navigationTarget");

(function () {
    'use strict';

    /**
     * @private
     * @name sap.apf.modeler.core.navigationTarget
     * @class A navigation target proxy object providing editor methods on configuration objects.
     * @param {string} [navigationTargetId] - Optional parameter - Id of the instance
     * @param {Object} inject.constructor - Injected constructors
     * @param {Object} [dataFromCopy] - Optional parameter to set the internal state of the new instance during a copy operation 
     * @constructor
     */
    sap.apf.modeler.core.NavigationTarget = function (navigationTargetId, inject, dataFromCopy) {
    	var semObject,
    	    actn,
    	    isStepSpecific = false,
    	    requestForFilterMapping, 
            targetPropertiesForFilterMapping;
    	
    	if(dataFromCopy){
    		semObject = dataFromCopy.semObject;
    		actn = dataFromCopy.actn;
    		isStepSpecific = dataFromCopy.isStepSpecific;
            requestForFilterMapping = dataFromCopy.requestForFilterMapping;
            targetPropertiesForFilterMapping = dataFromCopy.targetPropertiesForFilterMapping;
    	} else {
    		requestForFilterMapping = {}; 
            targetPropertiesForFilterMapping = new inject.constructor.elementContainer("TargetPropertyForFilterMapping", undefined, inject);
    	}
    	
    	 /**
         * @private
         * @name sap.apf.modeler.core.NavigationTarget#getId
         * @function
         * @description The immutable id of the navigation target
         * @returns {String} id
         */
        this.getId = function () {
            return navigationTargetId;
        };
    	/**
         * @private
         * @name sap.apf.modeler.core.NavigationTarget#setSemanticObject
         * @function
         * @description Set the semantic object of the navigation target
         * @param {string} semanticObject
         */
        this.setSemanticObject = function(semanticObject) {
        	semObject = semanticObject;
        };
      	/**
         * @private
         * @name sap.apf.modeler.core.NavigationTarget#getSemanticObject
         * @function
         * @description Get the semantic object of the navigation target
         * @returns {String} semantic object 
         */
        this.getSemanticObject = function() {
        	return semObject;
        };
     	/**
         * @private
         * @name sap.apf.modeler.core.NavigationTarget#setAction
         * @function
         * @description Set the action of the navigation target
         * @param {string} action
         */
        this.setAction = function(action) {
        	actn = action;
        };
      	/**
         * @private
         * @name sap.apf.modeler.core.NavigationTarget#getAction
         * @function
         * @description Get the action of the navigation target
         * @returns {String} action 
         */
        this.getAction = function() {
        	return actn;
        };
        /**
         * @private
         * @name sap.apf.modeler.core.NavigationTarget#isGlobal
         * @function
         * @description Returns true if the navigation target is a global one, otherwise false
         * @returns {boolean} 
         */
        this.isGlobal = function(){
        	return !isStepSpecific;
        };
        /**
         * @private
         * @name sap.apf.modeler.core.NavigationTarget#isStepSpecific
         * @function
         * @description Returns true if the navigation target is a step specific one, otherwise false
         * @returns {boolean} 
         */
        this.isStepSpecific = function(){
        	return isStepSpecific;
        };
        /**
         * @private
         * @name sap.apf.modeler.core.NavigationTarget#setGlobal
         * @function
         * @description Make the navigation target global
         */
        this.setGlobal = function(){
        	isStepSpecific = false;
        };
        /**
         * @private
         * @name sap.apf.modeler.core.NavigationTarget#setStepSpecific
         * @function
         * @description Make the navigation target global
         */
        this.setStepSpecific = function(){
        	isStepSpecific = true;
        };
        /**
         * @private
         * @name sap.apf.modeler.core.sap.apf.modeler.core.NavigationTarget#setFilterMappingService
         * @function
         * @description Sets the service root for filter mapping. 
         * @param {string} serviceRoot - service root for filter mapping
         */
        this.setFilterMappingService = function(serviceRoot){
        	requestForFilterMapping.service = serviceRoot;
        };
        /**
         * @private
         * @name sap.apf.modeler.core.sap.apf.modeler.core.NavigationTarget#getFilterMappingService
         * @function
         * @description Returns the service root for filter mapping. 
         * @returns {string} - Service root for filter mapping
         */
        this.getFilterMappingService = function () {
            return requestForFilterMapping.service;
        };
        /**
         * @private
         * @name sap.apf.modeler.core.sap.apf.modeler.core.NavigationTarget#setFilterMappingEntitySet
         * @function
         * @description Sets the entity set for filter mapping. 
         * @param {string} entitySet - Entity set for filter mapping
         */
        this.setFilterMappingEntitySet = function(entitySet){
        	requestForFilterMapping.entitySet = entitySet;
        };
        /**
         * @private
         * @name sap.apf.modeler.core.sap.apf.modeler.core.NavigationTarget#getFilterMappingEntitySet
         * @function
         * @description Returns the entity set for filter mapping. 
         * @returns {string} - Entity set for filter mapping
         */
        this.getFilterMappingEntitySet = function () {
            return requestForFilterMapping.entitySet;
        };
        /**
         * @private
         * @name sap.apf.modeler.core.sap.apf.modeler.core.NavigationTarget#addFilterMappingTargetProperty
         * @function
         * @description Adds a target property for filter mapping.
         * @param {string} property - Property name
         */
        this.addFilterMappingTargetProperty = function (property) {
            targetPropertiesForFilterMapping.createElementWithProposedId(undefined, property);
        };
        /**
         * @private
         * @name sap.apf.modeler.core.sap.apf.modeler.core.NavigationTarget#getFilterMappingTargetProperties
         * @function
         * @description Returns an array of target properties for filter mapping.
         * @returns {String[]}
         */
        this.getFilterMappingTargetProperties = function () {
            var propertylist = [];
            var propertyElementList = targetPropertiesForFilterMapping.getElements();
            propertyElementList.forEach(function (item) {
            	propertylist.push(item.getId());
            });
            return propertylist;
        };
        /**
         * @private
         * @name sap.apf.modeler.core.sap.apf.modeler.core.NavigationTarget#removeFilterMappingTargetProperty
         * @function
         * @description Removes a filter mapping target property
         * @param {string} property - Property name
         */
        this.removeFilterMappingTargetProperty = function (property) {
        	targetPropertiesForFilterMapping.removeElement(property);
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.NavigationTargetr#copy
         * @function
         * @description Execute a deep copy of the navigation target
         * @param {String} [newIdForCopy] - Optional new Id for the copied instance
         * @returns {Object} sap.apf.modeler.core.NavigationTarget# - New navigation target object being a copy of this object
         */
        this.copy = function( newIdForCopy ){
        	var dataForCopy = {
        			semObject 						 : semObject,
		            actn      						 : actn,
		            isStepSpecific 					 : isStepSpecific,
		            requestForFilterMapping 		 : requestForFilterMapping,
		            targetPropertiesForFilterMapping : targetPropertiesForFilterMapping};
        	var dataFromCopy = sap.apf.modeler.core.ConfigurationObjects.deepDataCopy( dataForCopy );
        	return new sap.apf.modeler.core.NavigationTarget( (newIdForCopy || this.getId()), inject, dataFromCopy);
        };
    };

}()); 
}; // end of sap/apf/modeler/core/navigationTarget.js
if ( !jQuery.sap.isDeclared('sap.apf.modeler.core.registryWrapper') ) {
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
/*global sap, jQuery*/

jQuery.sap.declare("sap.apf.modeler.core.registryWrapper");

(function () {
    'use strict';

    /**
     * @private
     * @memberOf sap.apf.modeler.core
     * @name sap.apf.modeler.core.RegistryWrapper
     * @class Defines a wrapper around the registry received by injection from the ConfigurationFactory.
     *  This class defines access methods to first class citizen configuration objects after loading them from file or service.
     * @param {sap.apf.core.utils.Hashtable} hashtable - Registry that will be wrapped.
     * @constructor
     */
    sap.apf.modeler.core.RegistryWrapper = function (hashtable) {

        /**
         * @private
         * @function
         * @name getItemsByType
         * @description Retrieve all configuration objects (after loading) from a registry.
         * @param {String} type - value domain: "step", "request", "binding", "category", "facetFilter", "representationType"
         * @returns {Object[]}
         */
        function getItemsByType(type) {
            var aResults = [];
            if (hashtable.getNumberOfItems() !== 0) {
                hashtable.each(function (index, element) {
                    if (element.type === type) {
                        aResults.push(element);
                    }
                });
            }
            return aResults;
        }
        
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.RegistryWrapper#getItem
         * @description Retrieve any item by its key (after loading) from a registry.
         * @returns {Object}
         */
        this.getItem = function(key) {
            return hashtable.getItem(key);
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.RegistryWrapper#getSteps
         * @description Retrieve all steps (after loading) from a registry.
         * @returns {Object[]}
         */
        this.getSteps = function() {
            return getItemsByType("step");
        };

        /**
         * Retrieve all categories (after loading) from a registry.
         * @private
         * @function
         * @name sap.apf.modeler.core.RegistryWrapper#getCategories
         * @returns {Object[]}
         */
        this.getCategories = function() {
            return getItemsByType("category");
        };
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.RegistryWrapper#getFacetFilters
         * @description Retrieve all facet filters from a registry.
         * @returns {Object[]}
         */
        this.getFacetFilters = function() {
            return getItemsByType("facetFilter");
        };
        
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.RegistryWrapper#getNavigationTargets
         * @description Retrieve all facet filters from a registry.
         * @returns {Object[]}
         */
        this.getNavigationTargets = function() {
            return getItemsByType("navigationTarget");
        };

    };
}());

}; // end of sap/apf/modeler/core/registryWrapper.js
if ( !jQuery.sap.isDeclared('sap.apf.modeler.core.representation') ) {
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
/*global sap, jQuery*/

jQuery.sap.declare("sap.apf.modeler.core.representation");

(function () {
    'use strict';

    /**
     * @private
     * @memberOf sap.apf.modeler.core
     * @name sap.apf.modeler.core.Representation
     * @class A proxy object for representations providing editor methods on configuration objects.
     * @param {String} representationId - identifier.
     * @param {Object} inject - Injection of required APF object references, constructors and functions.
     * @param {sap.apf.core.utils.MessageHandler} inject.instance.messageHandler - MessageHandler instance
     * @param {Object} inject.constructor - Injected constructors
     * @param {sap.apf.core.utils.Hashtable} inject.constructor.hashtable - Hashtable constructor
     * @param {Object} dataFromCopy - Optional parameter to set the internal state of the new instance during a copy operation 
     * @constructor
     */
    sap.apf.modeler.core.Representation = function (representationId, inject, dataFromCopy) {
        var representationTypeId,
            alternateRepresentationTypeId,
            width,
            dimensions,
            measures,
            leftUpperCornerTextKey,
            rightUpperCornerTextKey,
            leftLowerCornerTextKey,
            rightLowerCornerTextKey,
            orderByProperties,
            topN;

        if(!dataFromCopy){
            width = {};	
            dimensions = new inject.constructor.elementContainer("dimension", undefined, inject);
            measures = new inject.constructor.elementContainer("measure", undefined, inject);
            orderByProperties = new inject.constructor.elementContainer("orderBy", undefined, inject);
        }else{
	    	representationTypeId = dataFromCopy.representationTypeId;
	        alternateRepresentationTypeId = dataFromCopy.alternateRepresentationTypeId;
	        width = dataFromCopy.width;
	        dimensions = dataFromCopy.dimensions;
	        measures = dataFromCopy.measures;
	        leftUpperCornerTextKey = dataFromCopy.leftUpperCornerTextKey;
	        rightUpperCornerTextKey = dataFromCopy.rightUpperCornerTextKey;
	        leftLowerCornerTextKey = dataFromCopy.leftLowerCornerTextKey;
	        rightLowerCornerTextKey = dataFromCopy.rightLowerCornerTextKey;
	        orderByProperties = dataFromCopy.orderByProperties;
	        topN =  dataFromCopy.topN;	
        }

        /**
         * @private
         * @name sap.apf.modeler.core.Representation#getId
         * @function
         * @description Return the immutable id.
         * @returns {String}
         */
        this.getId = function () {
            return representationId;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#setRepresentationType
         * @description Mandatory member representationType
         * @param {String} - Representation type Id
         */
        this.setRepresentationType = function (typeId) {
            representationTypeId = typeId;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#getRepresentationType
         * @description Mandatory member representationType
         * @returns {String} typeId
         */
        this.getRepresentationType = function () {
            return representationTypeId;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#setAlternateRepresentationType
         * @description Optional property of a representation.
         * @param {String} typeId
         */
        this.setAlternateRepresentationType = function (typeId) {
            alternateRepresentationTypeId = typeId;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#getAlternateRepresentationType
         * @returns {String} typeId
         */
        this.getAlternateRepresentationType = function () {
            return alternateRepresentationTypeId;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#getDimensions
         * @description Return a list ID's of parameter objects describing dimensions of a representation.
         *      Each parameter object has a method getId() which returns the propertyName.
         * @returns {String[]} - an array of ID's
         */
        this.getDimensions = function () {
            var list = [];
            dimensions.getElements().forEach(function (obj) {
                list.push(obj.propertyName);
            });
            return list;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#addDimension
         * @description Create and add a parameter object describing a dimension.
         *      Each stored parameter object has a method getId() which returns the given propertyName.
         *      WHEN calling twice on the same propertyName (without removing it) THEN the second call will be ignored and null returned.
         * @param {String} propertyName - OData property name
         * @param {String} [textLabelKey] - Optional property of the identified dimension parameter.
         * @returns {String} - An id which is the given propertyName
         */
        this.addDimension = function (propertyName, textLabelKey) {
            var obj;
            if (dimensions.getElement(propertyName)) { // when exists
                return null;
            }
            obj = {
                propertyName: propertyName,
                textLabelKey: textLabelKey
            };
            return dimensions.createElementWithProposedId(obj, propertyName).getId();
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#removeDimension
         * @description Remove the parameter object that is identified by the given OData property name.
         * @param {String} propertyName
         */
        this.removeDimension = function (propertyName) {
            dimensions.removeElement(propertyName);
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#setDimensionKind
         * @description Set the kind of the dimension for a given representationType. The representationType defines the supported kinds.
         * @param {String} propertyName - OData property name
         * @param {String} kind - A kind of dimension.
         */
        this.setDimensionKind = function (propertyName, kind) {
            var object = dimensions.getElement(propertyName);
            if (object) {
                object.kind = kind;
            }
        };
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#getDimensionKind
         * @description Return the kind of dimension.
         *      The property is optional, and the default value undefined.
         * @param {String} propertyName - OData property name
         * @returns {String|undefined} - A kind of dimension.
         */
        this.getDimensionKind = function (propertyName) {
            var object = dimensions.getElement(propertyName);
            if (object) {
                return object.kind;
            }
            return undefined;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#setDimensionTextLabelKey
         * @description Set the text key of the parameter object identified by the propertyName. This property of the parameter object is optional.
         * @param {String} propertyName - OData property name
         * @param {String} textLabelKey - A text id/key (GUID).
         */
        this.setDimensionTextLabelKey = function (propertyName, textLabelKey) {
            var object = dimensions.getElement(propertyName);
            if (object) {
                object.textLabelKey = textLabelKey;
            }
        };
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#getDimensionTextLabelKey
         * @description Return the text key of the identified parameter object.
         *      Return undefined if there is no object defined for the given propertyName.
         * @param {String} propertyName - OData property name
         * @returns {String|undefined} - A text id/key (GUID).
         */
        this.getDimensionTextLabelKey = function (propertyName) {
            var object = dimensions.getElement(propertyName);
            if (object) {
                return object.textLabelKey;
            }
            return undefined;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#getMeasures
         * @description Return a list of parameter objects describing measures of a representation.
         *      Each parameter object has a method getId() which returns the propertyName.
         * @returns {String[]} - list of ids which are propertyNames
         */
        this.getMeasures = function () {
            var list = [];
            measures.getElements().forEach(function (obj) {
                list.push(obj.propertyName);
            });
            return list;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#addMeasure
         * @description Add a parameter object describing a measure.
         *      WHEN calling twice on the same propertyName (without removing it) THEN the second call will be ignored and nul returned.
         * @param {String} propertyName
         */
        this.addMeasure = function (propertyName) {
            var obj;
            if (measures.getElement(propertyName)) {
                return null;
            }
            obj = {
                propertyName: propertyName
            };
            return measures.createElementWithProposedId(obj, propertyName).getId();
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#removeMeasure
         * @description Remove the measure which is identified by its OData property name.
         * @param {String} propertyName
         */
        this.removeMeasure = measures.removeElement;

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#setMeasureTextLabelKey
         * @description Set the text key of the parameter object. This part of the parameter object is optional.
         * @param {String} propertyName - OData property name
         * @param {String} textLabelKey - A text id/key (GUID).
         */
        this.setMeasureTextLabelKey = function (propertyName, textLabelKey) {
            var object = measures.getElement(propertyName);
            if (object) {
                object.textLabelKey = textLabelKey;
            }
        };
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#getMeasureTextLabelKey
         * @description Return the text key of the parameter object.
         *      Return undefined if there is no object defined for the given propertyName.
         * @param {String} propertyName - OData property name
         * @returns {String|undefined} - A text id/key (GUID).
         */
        this.getMeasureTextLabelKey = function (propertyName) {
            var object = measures.getElement(propertyName);
            if (object) {
                return object.textLabelKey;
            }
            return undefined;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#setMeasureKind
         * @description Set the kind of the measure for a given representationType. The representationType defines the supported kinds.
         * @param {String} propertyName - OData property name
         * @param {String} kind - A kind of measure.
         */
        this.setMeasureKind = function (propertyName, kind) {
            var object = measures.getElement(propertyName);
            if (object) {
                object.kind = kind;
            }
        };
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#getMeasureKind
         * @description Return the kind of measure.
         *      The property is optional, and the default value undefined.
         * @param {String} propertyName - OData property name
         * @returns {String|undefined} - A kind of measure.
         */
        this.getMeasureKind = function (propertyName) {
            var object = measures.getElement(propertyName);
            if (object) {
                return object.kind;
            }
            return undefined;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#setWidthProperty
         * @description Add a width property to the representation.
         *      The width is optional and used for table representations specifying the width of table columns.
         * @param {String} propertyName
         * @param {Object} propertyValue
         */
        this.setWidthProperty = function (propertyName, propertyValue) {
            width[propertyName] = propertyValue;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#getWidthProperties
         * @description Return a width object literal containing all width properties of a representation.
         *      The width object is optional and used for table representations specifying the width of table columns.
         * @return {Object|undefined}
         */
        this.getWidthProperties = function () {
            return width;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#setLeftUpperCornerTextKey
         * @description Optional member.
         *          When the value is null or undefined the corner text will be omitted from the serialized configuration object.
         *          The initial value is set to undefined.
         * @param {String|null} textKey
         */
        this.setLeftUpperCornerTextKey = function (textKey) {
            leftUpperCornerTextKey = textKey;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#getLeftUpperCornerTextKey
         * @description Get optional member.
         * @returns {String|undefined|null} Return a textKey (GUID). Returns undefined when initial, null or undefined when set to null or undefined.
         */
        this.getLeftUpperCornerTextKey = function () {
            return leftUpperCornerTextKey;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#setRightUpperCornerTextKey
         * @description Optional member
         * @param {String|null} textKey
         */
        this.setRightUpperCornerTextKey = function (textKey) {
            rightUpperCornerTextKey = textKey;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#getRightUpperCornerTextKey
         * @description Optional member
         * @returns {String} typeId
         */
        this.getRightUpperCornerTextKey = function () {
            return rightUpperCornerTextKey;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#setLeftLowerCornerTextKey
         * @description Optional member
         * @param {String|null} textKey
         */
        this.setLeftLowerCornerTextKey = function (textKey) {
            leftLowerCornerTextKey = textKey;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#getLeftLowerCornerTextKey
         * @description Optional member
         * @returns {String} typeId
         */
        this.getLeftLowerCornerTextKey = function () {
            return leftLowerCornerTextKey;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#setRightLowerCornerTextKey
         * @description Optional member
         * @param {String|null} textKey
         */
        this.setRightLowerCornerTextKey = function (textKey) {
            rightLowerCornerTextKey = textKey;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#getRightLowerCornerTextKey
         * @description Optional member
         * @returns {String} typeId
         */
        this.getRightLowerCornerTextKey = function () {
            return rightLowerCornerTextKey;
        };

        
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#setTopN
         * @description Sets the value for the request option top
         * @param {number} top
         */
        this.setTopN = function(top) {
        	topN = top;
        };
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#getTopN
         * @description gets the value for top n
         * @param {number} counter
         */
         this.getTopN = function() {
        	 return topN;
         };
        
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#addOrderbySpec
         * @description Add a specification describing the ordering of a property in OData.
         *      Can be used to update an existing specification identified by the property name.
         *      The specification is optional.
         * @param {String} propertyName
         * @param {boolean} propertyName - when ascending == true then the "asc" will be omitted in the OData URI.
         *      Otherwise "desc" will be rendering in the URI.
         */
        this.addOrderbySpec = function (propertyName, ascending) {
            var obj;
            obj = orderByProperties.getElement(propertyName);
            if (obj) {
                obj.ascending = ascending;
                return obj;
            }
            obj = {
                property: propertyName,
                ascending: ascending
            };
            return orderByProperties.createElementWithProposedId(obj, propertyName).getId();
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#removeOrderbySpec
         * @description Remove the order specification that is identified by the given OData property name.
         * @param {String} propertyName
         */
        this.removeOrderbySpec = function (propertyName) {
            orderByProperties.removeElement(propertyName);
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Representation#getMeasures
         * @description Return a list of parameter objects describing measures of a representation.
         *      Each parameter object has a method getId() which returns the propertyName.
         * @returns {String[]} - list of ids which are propertyNames
         */
        this.getOrderbySpecifications = function () {
            var list = [];
            orderByProperties.getElements().forEach(function (obj) {
                list.push({
                    property: obj.property,
                    ascending: obj.ascending
                });
            });//forEach
            return list;
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.Representation#copy
         * @function
         * @description Execute a deep copy of the representation and its referenced objects
         * @param {String} newIdForCopy - New Id for the copied instance
         * @returns {Object} sap.apf.modeler.core.Representation# - New representation object being a copy of this object
         */
        this.copy = function( newIdForCopy ){
        	var dataForCopy = {
        			representationTypeId : representationTypeId,
                    alternateRepresentationTypeId : alternateRepresentationTypeId,
                    width : width,
                    dimensions : dimensions,
                    measures : measures,
                    leftUpperCornerTextKey : leftUpperCornerTextKey,
                    rightUpperCornerTextKey : rightUpperCornerTextKey,
                    leftLowerCornerTextKey : leftLowerCornerTextKey,
                    rightLowerCornerTextKey : rightLowerCornerTextKey,
                    orderByProperties : orderByProperties,
                    topN : topN 
                    };
        	
        	var dataFromCopy = sap.apf.modeler.core.ConfigurationObjects.deepDataCopy( dataForCopy );
        	return new sap.apf.modeler.core.Representation( (newIdForCopy || this.getId()), inject, dataFromCopy);
        };
    };
}());
}; // end of sap/apf/modeler/core/representation.js
if ( !jQuery.sap.isDeclared('sap.apf.modeler.core.step') ) {
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
/*global sap, jQuery*/

jQuery.sap.declare("sap.apf.modeler.core.step");

(function () {
    'use strict';

    /**
     * @private
     * @name sap.apf.modeler.core.Step
     * @class A step proxy object providing editor methods on configuration objects.
     * @param {String} stepId - unique Id within configuration.
     * @param {Object} inject - Injection of required APF object references, constructors and functions.
     * @param {sap.apf.core.utils.MessageHandler} inject.instance.messageHandler - MessageHandler instance
     * @param {Object} inject.constructor - Injected constructors
     * @param {sap.apf.core.utils.Hashtable} inject.constructor.hashtable - Hashtable constructor
     * @param {Object} dataFromCopy - Optional parameter to set the internal state of the new instance during a copy operation
     * @constructor
     */
    sap.apf.modeler.core.Step = function (stepId, inject, dataFromCopy) {
        var representationContainer,
            request,
            selectProperties,
            filterProperties,
            requestForFilterMapping, 
            selectPropertiesForFilterMapping,
            targetPropertiesForFilterMapping,
            navigationTargets,
            keepSourceForFilterMapping,
            titleId,
            longTitleId,
            leftUpperCornerTextKey,
            rightUpperCornerTextKey,
            leftLowerCornerTextKey,
            rightLowerCornerTextKey,
            topNSettings,
            messageHandler;

        messageHandler = inject.instance.messageHandler;
        
        if(!dataFromCopy){
        	representationContainer = new inject.constructor.elementContainer(stepId + "-Representation", inject.constructor.representation, inject);
            request = {};
            selectProperties = new inject.constructor.elementContainer("SelectProperty", undefined, inject);
            filterProperties = new inject.constructor.elementContainer("FilterProperty", undefined, inject);
            requestForFilterMapping = {}; 
            selectPropertiesForFilterMapping = new inject.constructor.elementContainer("SelectPropertyForFilterMapping", undefined, inject);
            targetPropertiesForFilterMapping = new inject.constructor.elementContainer("TargetPropertyForFilterMapping", undefined, inject);
            keepSourceForFilterMapping = false;
            navigationTargets    = new inject.constructor.elementContainer("NavigationTarget", undefined, inject);
        }else{
        	representationContainer = dataFromCopy.representationContainer;
            request = dataFromCopy.request;
            selectProperties = dataFromCopy.selectProperties;
            filterProperties = dataFromCopy.filterProperties;
            requestForFilterMapping = dataFromCopy.requestForFilterMapping;
            selectPropertiesForFilterMapping = dataFromCopy.selectPropertiesForFilterMapping;
            targetPropertiesForFilterMapping = dataFromCopy.targetPropertiesForFilterMapping;
            keepSourceForFilterMapping = dataFromCopy.keepSourceForFilterMapping;
            navigationTargets = dataFromCopy.navigationTargets;
            titleId = dataFromCopy.titleId;
            longTitleId = dataFromCopy.longTitleId;
            leftUpperCornerTextKey = dataFromCopy.leftUpperCornerTextKey;
            rightUpperCornerTextKey = dataFromCopy.rightUpperCornerTextKey;
            leftLowerCornerTextKey = dataFromCopy.leftLowerCornerTextKey;
            rightLowerCornerTextKey = dataFromCopy.rightLowerCornerTextKey;
            topNSettings = dataFromCopy.topNSettings;
        }

        /**
         * @private
         * @name sap.apf.modeler.core.Step#getId
         * @function
         * @description The immutable id of the step
         * @returns {String}
         */
        this.getId = function () {
            return stepId;
        };

        /**
         * @description When setting topN to a numeric value, then only the number of topN data sets shall be retrieved and displayed by the representations of the particular step. 
         * The sorting order of the properties has to be specified too. Otherwise the top n makes no sense. The top n information will be forwarded to the representation of the step, that need this information at runtime (method representation.getRequestOptions)
         * @private
         * @name sap.apf.modeler.core.Step#setTopN
         * @function
         * @param {number} count the top n value
         * @param orderBySpec array of orderBy specifications like [ { property : "propertyName1", ascending : true}, { property : "propertyName2", ascending : false}]
         */        
        this.setTopN = function( count, orderBySpec) {
        	
        	this.resetTopN();
        	topNSettings = {};
        	topNSettings.top = count;
        	if (orderBySpec && orderBySpec  instanceof Array && orderBySpec.length > 0) {
        		topNSettings.orderby = orderBySpec;
        	} else {
        		messageHandler.putMessage(messageHandler.createMessageObject({ code : 11016 }));
        		return;
        	}
        	representationContainer.getElements().forEach(function(representation){
        		representation.setTopN(count);
        		topNSettings.orderby.forEach(function(orderBySpec) {
        			representation.addOrderbySpec(orderBySpec.property, orderBySpec.ascending);
        		})
        	});
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.Step#getTopN
         * @description returns the topN settings in format { top : topN, orderby : [ { property: p1, ascending: true}, ...] }
         * @function
         * @returns {object} topNSettings or if nothing is set, then undefined is returned;
         */
        this.getTopN = function() {
        	if (topNSettings && topNSettings.top > 0) {
        		return jQuery.extend({}, true, topNSettings);
        	} else { 
        		return undefined;
        	}
        };
        
        /**
         * @private
         * @description The top n is reset. The representation will no longer restrict data selection to top n records. 
         * @name sap.apf.modeler.core.Step#resetTopN
         * @function

         */
        this.resetTopN = function() {
        	topNSettings = undefined;
        	representationContainer.getElements().forEach(function(representation){
        		representation.setTopN(undefined);
        		representation.getOrderbySpecifications().forEach(function(orderBySpec) {
        			representation.removeOrderbySpec(orderBySpec.property);
        		})
        	});
        	
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.Step#getService
         * @function
         * @returns {string} - service root
         */
        this.getService = function () {
            return request.service;
        };

        /**
         * @private
         * @name sap.apf.modeler.core.Step#setService
         * @function
         * @description Set the service root.
         * @param {string} serviceRoot - serviceRoot URI
         */
        this.setService = function (serviceRoot) {
            request.service = serviceRoot;
        };

        /**
         * @private
         * @name sap.apf.modeler.core.Step#getEntitySet
         * @function
         * @returns {string} - entitySetName
         */
        this.getEntitySet = function () {
            return request.entitySet;
        };

        /**
         * @private
         * @name sap.apf.modeler.core.Step#setEntitySet
         * @function
         * @description Set the entitySet.
         * @param {string} entitySet - entitySet name
         */
        this.setEntitySet = function (entitySet) {
            request.entitySet = entitySet;
        };

        /**
         * @private
         * @name sap.apf.modeler.core.Step#setTitleId
         * @function
         * @description Set the title id.
         * @param {String} id Title id
         */
        this.setTitleId = function (id) {
            titleId = id;
        };

        /**
         * @private
         * @name sap.apf.modeler.core.Step#getTitleId
         * @function
         * @description Returns the title id.
         * @returns {String}
         */
        this.getTitleId = function () {
            return titleId;
        };

        /**
         * @private
         * @name sap.apf.modeler.core.Step#setLongTitleId
         * @function
         * @description Set the longTitle id.
         * @param {String} id LongTitle id
         */
        this.setLongTitleId = function (id) {
            longTitleId = id;
        };

        /**
         * @private
         * @name sap.apf.modeler.core.Step#getLongTitleId
         * @function
         * @description Returns the longTitle id.
         * @returns {String}
         */
        this.getLongTitleId = function () {
            return longTitleId;
        };

        /**
         * @private
         * @name sap.apf.modeler.core.Step#getSelectProperties
         * @function
         * @description Return an array of the mutable OData properties of the step and its request.
         * @returns {String[]}
         */
        this.getSelectProperties = function () {
            var list = [];
            var lll = selectProperties.getElements();
            lll.forEach(function (item) {
                list.push(item.getId());
            });
            return list;
        };

        /**
         * @private
         * @name sap.apf.modeler.core.Step#addSelectProperty
         * @function
         * @description Add an OData properties.
         * @param {string} property - property name
         */
        this.addSelectProperty = function (property) {
            selectProperties.createElementWithProposedId(undefined, property);
        };
        /**
         * @private
         * @name sap.apf.modeler.core.Step#removeSelectProperty
         * @function
         * @description Remove an OData properties.
         * @param {string} property - property name
         */
        this.removeSelectProperty = function (property) {
            selectProperties.removeElement(property);
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Step#getFilterProperties
         * @description The mutable filter properties.
         * @returns {String[]}
         */
        this.getFilterProperties = function () {
            var list = [];
            var lll = filterProperties.getElements();
            lll.forEach(function (item) {
                list.push(item.getId());
            });
            return list;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Step#addFilterProperty
         * @description Add an OData properties.
         * @param {string} property - property name
         */
        this.addFilterProperty = function (property) {
            return filterProperties.createElementWithProposedId(undefined, property).getId();
        };
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Step#removeFilterProperty
         * @description Remove an OData properties.
         * @param {string} property - property name
         */
        this.removeFilterProperty = function (property) {
            filterProperties.removeElement(property);
        };

        /**
         * @private
         * @name sap.apf.modeler.core.Step#setFilterMappingService
         * @function
         * @description Sets the service root for filter mapping. 
         * @param {string} serviceRoot - service root for filter mapping
         */
        this.setFilterMappingService = function(serviceRoot){
        	requestForFilterMapping.service = serviceRoot;
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.Step#getFilterMappingService
         * @function
         * @description Returns the service root for filter mapping. 
         * @returns {string} - Service root for filter mapping
         */
        this.getFilterMappingService = function () {
            return requestForFilterMapping.service;
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.Step#setFilterMappingEntitySet
         * @function
         * @description Sets the entity set for filter mapping. 
         * @param {string} entitySet - Entity set for filter mapping
         */
        this.setFilterMappingEntitySet = function(entitySet){
        	requestForFilterMapping.entitySet = entitySet;
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.Step#getFilterMappingEntitySet
         * @function
         * @description Returns the entity set for filter mapping. 
         * @returns {string} - Entity set for filter mapping
         */
        this.getFilterMappingEntitySet = function () {
            return requestForFilterMapping.entitySet;
        };
        
       
        
        /**
         * @private
         * @name sap.apf.modeler.core.Step#addFilterMappingTargetProperty
         * @function
         * @description Adds a target property for filter mapping.
         * @param {string} property - Property name
         */
        this.addFilterMappingTargetProperty = function (property) {
            targetPropertiesForFilterMapping.createElementWithProposedId(undefined, property);
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.Step#getFilterMappingTargetProperties
         * @function
         * @description Returns an array of target properties for filter mapping.
         * @returns {String[]}
         */
        this.getFilterMappingTargetProperties = function () {
            var propertylist = [];
            var propertyElementList = targetPropertiesForFilterMapping.getElements();
            propertyElementList.forEach(function (item) {
            	propertylist.push(item.getId());
            });
            return propertylist;
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.Step#removeFilterMappingTargetProperty
         * @function
         * @description Removes a filter mapping target property
         * @param {string} property - Property name
         */
        this.removeFilterMappingTargetProperty = function (property) {
        	targetPropertiesForFilterMapping.removeElement(property);
        };
        
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Step#addNavigationTarget
         * @description Add a navigation target to the step
         * @param {string} navigationTargetId - navigation target id
         */
        this.addNavigationTarget = function(navigationTargetId){
           navigationTargets.createElementWithProposedId(undefined, navigationTargetId);
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.Step#getNavigationTargets
         * @function
         * @description Returns an array of navigation targets.
         * @returns {String[]}
         */
        this.getNavigationTargets = function () {
            var navigationTargetIds = [];
            var navigationTargetList = navigationTargets.getElements();
            navigationTargetList.forEach(function (item) {
            	navigationTargetIds.push(item.getId());
            });
            return navigationTargetIds;
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.Step#removeNavigationTarget
         * @function
         * @description Removes a navigation target
         * @param {string} navigationTargetId - navigation target id
         */
        this.removeNavigationTarget = function (navigationTargetId) {
        	navigationTargets.removeElement(navigationTargetId);
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.Step#setFilterMappingKeepSource
         * @function
         * @description Sets the keepSource property for filter mapping. 
         * @param {boolean} keepSource 
         */
        this.setFilterMappingKeepSource = function(keepSource){
        	keepSourceForFilterMapping = keepSource;
        };
        /**
         * @private
         * @name sap.apf.modeler.core.Step#getFilterMappingKeepSource
         * @function
         * @description Returns the keepSource property for filter mapping.
         * @returns {boolean}
         */
        this.getFilterMappingKeepSource = function () {
            return keepSourceForFilterMapping;
        };
        
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Step#getRepresentations
         * @description A list of representation objects, see {@link sap.apf.modeler.core.Representation}.
         * @returns {sap.apf.modeler.core.Representation[]}
         */
        this.getRepresentations = representationContainer.getElements;

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Step#getRepresentation
         * @description Return an element if existing, see {@link sap.apf.modeler.core.Representation}.
         * @param {string} representationId
         * @returns {sap.apf.modeler.core.Representation}
         */
        this.getRepresentation = representationContainer.getElement;

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Step#createRepresentation
         * @param {Object} [element] - Fields of optional object will be merged into created object.
         * @returns {sap.apf.modeler.core.Representation}
         */
        this.createRepresentation = function(element) {
        	var representation = representationContainer.createElement(element);
        	if (topNSettings && topNSettings.top) {
        		representation.setTopN(topNSettings.top);
        		topNSettings.orderby.forEach(function(orderbySpec) {
        			representation.addOrderbySpec(orderbySpec.property, orderbySpec.ascending);
        		});
        	}
        	return representation;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Step#removeRepresentation
         * @param {string} representationId
         */
        this.removeRepresentation = representationContainer.removeElement;

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Step#copyRepresentation
         * @param {string} representationId
         * @returns {string} Id for new representation
         */
        this.copyRepresentation = representationContainer.copyElement;
        
        /**
         * Change the ordering by moving one representation in the ordering before another representation.
         * @private
         * @function
         * @name sap.apf.modeler.core.Step#moveRepresentationBefore
         * @param {string} beforeRepresentationId
         * @param {string} movedRepresentationId
         * @returns {number|null} WHEN either Id is not contained or undefined THEN return null.
         *      Otherwise return the index of the index position of movedRepresentationId, after the move.
         */
        this.moveRepresentationBefore = function(beforeRepresentationId, movedRepresentationId) {
        	return representationContainer.moveBefore(beforeRepresentationId, movedRepresentationId);
        };
        
        /**
         * Move a representation up or down some places specified by distance
         * @private
         * @function
         * @name sap.apf.modeler.core.Step#moveRepresentationUpOrDown
         * @param {string} representationId id of the representation, that shall be moved
         * @param {string} distance number of places
         */
        this.moveRepresentationUpOrDown = function(representationId, distance) {
        	return representationContainer.moveUpOrDown(representationId, distance);
        };
        /**
         * Change the ordering of representations by moving one representation in the ordering to the end.
         * @private
         * @function
         * @name sap.apf.modeler.core.Step#moveRepresentationToEnd
         * @param {string} representationId
         * @returns {number|null} WHEN the key representationId is not contained or undefined THEN return null.
         *      Otherwise return the index of the index position of representation(Id), after the move.
         */
        this.moveRepresentationToEnd = function(representationId) {
        	return representationContainer.moveToEnd(representationId);
        };
        
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Step#setLeftUpperCornerTextKey
         * @description Optional member.
         *          When the value is null or undefined the corner text will be omitted from the serialized configuration object.
         *          The initial value is set to undefined.
         * @param {String|null} textKey
         */
        this.setLeftUpperCornerTextKey = function (textKey) {
            leftUpperCornerTextKey = textKey;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Step#getLeftUpperCornerTextKey
         * @description Get optional member.
         * @returns {String|undefined|null} Return a textKey (GUID). Returns undefined when initial, null or undefined when set to null or undefined.
         */
        this.getLeftUpperCornerTextKey = function () {
            return leftUpperCornerTextKey;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Step#setRightUpperCornerTextKey
         * @description Optional member
         * @param {String|null} textKey
         */
        this.setRightUpperCornerTextKey = function (textKey) {
            rightUpperCornerTextKey = textKey;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Step#getRightUpperCornerTextKey
         * @description Optional member
         * @returns {String} typeId
         */
        this.getRightUpperCornerTextKey = function () {
            return rightUpperCornerTextKey;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Step#setLeftLowerCornerTextKey
         * @description Optional member
         * @param {String|null} textKey
         */
        this.setLeftLowerCornerTextKey = function (textKey) {
            leftLowerCornerTextKey = textKey;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Step#getLeftLowerCornerTextKey
         * @description Optional member
         * @returns {String} typeId
         */
        this.getLeftLowerCornerTextKey = function () {
            return leftLowerCornerTextKey;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Step#setRightLowerCornerTextKey
         * @description Optional member
         * @param {String|null} textKey
         */
        this.setRightLowerCornerTextKey = function (textKey) {
            rightLowerCornerTextKey = textKey;
        };


        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.Step#getRightLowerCornerTextKey
         * @description Optional member
         * @returns {String} typeId
         */
        this.getRightLowerCornerTextKey = function () {
            return rightLowerCornerTextKey;
        };

        /**
         * @private
         * @name sap.apf.modeler.core.step#copy
         * @function
         * @description Execute a deep copy of the step and its referenced objects
         * @param {String} newStepIdForCopy - New step id for the copied instance
         * @returns {Object} sap.apf.modeler.core.step# - New step object being a copy of this object
         */
        this.copy = function( newStepIdForCopy ){
        	var dataForCopy = {
				request : request,
				selectProperties : selectProperties,
				filterProperties : filterProperties,
				requestForFilterMapping : requestForFilterMapping,
				selectPropertiesForFilterMapping : selectPropertiesForFilterMapping,
				targetPropertiesForFilterMapping : targetPropertiesForFilterMapping,
				navigationTargets : navigationTargets,
				keepSourceForFilterMapping : keepSourceForFilterMapping,
				titleId : titleId,
				longTitleId : longTitleId,
				leftUpperCornerTextKey : leftUpperCornerTextKey,
				rightUpperCornerTextKey : rightUpperCornerTextKey,
				leftLowerCornerTextKey : leftLowerCornerTextKey,
				rightLowerCornerTextKey : rightLowerCornerTextKey,
				topNSettings : topNSettings
			};
        	
        	var dataFromCopy = sap.apf.modeler.core.ConfigurationObjects.deepDataCopy( dataForCopy );
        	dataFromCopy.representationContainer = representationContainer.copy(newStepIdForCopy + "-Representation");
        	
        	return new sap.apf.modeler.core.Step( (newStepIdForCopy || this.getId()), inject, dataFromCopy);
        };    
    };
}());

}; // end of sap/apf/modeler/core/step.js
if ( !jQuery.sap.isDeclared('sap.apf.modeler.core.textHandler') ) {
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
/*global sap, jQuery*/

jQuery.sap.declare("sap.apf.modeler.core.textHandler");

(function () {
    'use strict';

    /**
     * @private
     * @class Provides access to message texts and ui texts for the modeler
     */
    sap.apf.modeler.core.TextHandler = function () {
    	
    	var oBundleApf, oBundleModelerSpecificTexts;
    	/**
    	 * @description returns a message text for message handling
    	 * @param {string} sRessourceKey - Key of the message in the Ressourcefile
    	 * @param {string[]} [aParameters] - Parameter for placeholder replacement in the message bundle
    	 * @returns {string}
    	 */
    	this.getMessageText = function(sRessourceKey, aParameters) {
    		return this.getText(sRessourceKey, aParameters);
    	};
    	
    	/**
    	 * @description returns text
    	 * @param {string} sRessourceKey - Key of the message in the Ressourcefile
    	 * @param {string[]} [aParameters] - Parameter for placeholder replacement in the message bundle
    	 * @returns {string}
    	 */
    	this.getText = function(sRessourceKey, aParameters) {
    		var sText;
    		
    		sText = oBundleModelerSpecificTexts.getText(sRessourceKey, aParameters);
    		if (sText !== sRessourceKey) {
				return sText;
			}
    		return oBundleApf.getText(sRessourceKey, aParameters);
    	};
    	
    	function initBundles() {
    		var sUrl;
    		var sIncludeInfo = sap.ui.getCore().getConfiguration().getOriginInfo();
    		var sModulePath = jQuery.sap.getModulePath("sap.apf");
    		
    		sUrl = sModulePath + '/modeler/resources/i18n/texts.properties';
    		oBundleModelerSpecificTexts = jQuery.sap.resources({
					url : sUrl,
					includeInfo : sIncludeInfo
				});
    		sUrl = sModulePath + '/resources/i18n/apfUi.properties';
    		oBundleApf = jQuery.sap.resources({
					url : sUrl,
					includeInfo : sIncludeInfo
			});
    		 
    	}
    	
    	 initBundles();
    };
}());
}; // end of sap/apf/modeler/core/textHandler.js
if ( !jQuery.sap.isDeclared('sap.apf.modeler.ui.utils.APFRouter') ) {
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
/**
  * Router Helper Functions
**/
jQuery.sap.declare('sap.apf.modeler.ui.utils.APFRouter');
sap.apf.modeler.ui.utils.APFRouter = {
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.APFRouter#patternMatch
	 * @param {sap.apf.modeler.ui.controller.configurationList} context - Configuration List Context.
	 * @description Handles the startup sequence operations as well as bookmarking.Populate the respective view with the route pattern match and retains selection on the tree.
	 * */
	patternMatch : function(context) {
		this.params = {};
		var oSelf = this;
		sap.ui.core.UIComponent.getRouterFor(context).attachRoutePatternMatched(function(oEvent) {
			var configDetailView = {};
			oSelf.params = {
				name : oEvent.getParameter("name"),
				arguments : oEvent.getParameter("arguments")
			};
			if (oSelf.params.name !== "applicationList") {
				var oCoreApi = context.oCoreApi;
				context.appId = oSelf.params.arguments.appId;
				context.configId = oSelf.params.arguments.configId;
				oCoreApi.getApplicationHandler(function(oApplicationHandler) {
					context.applicationHandler = oApplicationHandler;
					context.appName = oApplicationHandler.getApplication(context.appId).ApplicationName;
					var titleText = context.byId("idConfigTitleMaster").getText();
					if (titleText === "" || oSelf.params.name === "configurationList") {
						context.setConfigListMasterTitle(context.appName);
					}
					oCoreApi.getConfigurationHandler(context.appId, function(configurationHandler) {
						context.configurationHandler = configurationHandler;
						context.oTextPool = context.configurationHandler.getTextPool();
						//Startup sequence
						if (context.configurationHandler.getList().length > context.getView().getModel().getData().aConfigDetails.length) {
							context.createConfigList(); //creates list of only configurations
							if (oSelf.params.name === "configurationList") {
								context.updateConfigListView(); //Handles what has to be shown in detail area in case of single or multiple configurations
							}
						}
						//If the configuration list length is empty then insert a new configuration
						if (context.configurationHandler.getList().length === 0 && (context.configId === undefined)) {
							context.oTreeInstance.addNodeInTree(sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CONFIGURATION);
							var aConfigurationArray = context.oTreeInstance.getNodes(); //total number of configurations
							var newAddedTreeNode = aConfigurationArray[aConfigurationArray.length - 1];
							context.oTreeInstance.setSelectedNode(newAddedTreeNode);
						}
						//Loads the current editor of selected configuration and loads the detail view
						if (context.configId !== undefined) {
							var oExistingConfig = configurationHandler.getConfiguration(context.configId);
							if (oExistingConfig) {
								configurationHandler.loadConfiguration(context.configId, function(configurationEditor) {
									context.configEditor = configurationEditor;
									var sPathForConfig = context.getSPathForConfig(context.configId);
									if (context.oModel.getData().aConfigDetails[sPathForConfig.split('/')[2]].bIsLoaded === false) {//checks whether structure has been got already
										context.updateTree();
										if(oSelf.params.name !== "navigationTarget"){
											oSelf.setCurrentSelectionState(oSelf.params, context);
										}
									} else {
										oSelf.setCurrentSelectionState(oSelf.params, context);
									}
								});
							} else {
								oSelf.setCurrentSelectionState(oSelf.params, context);
							}
						}
					});
				});
			}
		});
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.APFRouter#setCurrentSelectionState
	 * @param URL Context.
	 * @param {sap.apf.modeler.ui.controller.configurationList} context - Configuration List Context.
	 * @description Sets selection on the tree,Populates the respective detail view based on URL context,updates the title and breadcrumb
	 * */
	setCurrentSelectionState : function(params, context) {
		var oValidURLContext = context.getSPathFromURL(params);
		if (params.name !== "configurationList") {
			if (oValidURLContext && oValidURLContext.objectType) {
				//Update the valid subview,set selection on the tree and update breadcrumb
				context.updateSubView(params);
				if (oValidURLContext.sPath) {
					context.setSelectionOnTree(oValidURLContext.sPath);
				}
				context.updateTitleAndBreadCrumb();
			} else {
				context.showNoConfigSelectedText();
				context.removeSelectionOnTree();
			}
		}
	}
};
}; // end of sap/apf/modeler/ui/utils/APFRouter.js
if ( !jQuery.sap.isDeclared('sap.apf.modeler.ui.utils.constants') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare('sap.apf.modeler.ui.utils.constants');
sap.apf.modeler.ui.utils.CONSTANTS = {
	configurationObjectTypes : {
		CONFIGURATION : "configuration",
		FACETFILTER : "facetFilter",
		CATEGORY : "category",
		STEP : "step",
		REPRESENTATION : "representation",
		NAVIGATIONTARGET : "navigationTarget",
		ISNEWCONFIG : "apf1972-"
	}
};
}; // end of sap/apf/modeler/ui/utils/constants.js
if ( !jQuery.sap.isDeclared('sap.apf.modeler.ui.utils.helper') ) {
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
/*global window*/
/**
  * Static helper functions
  */
jQuery.sap.declare('sap.apf.modeler.ui.utils.helper');
sap.apf.modeler.ui.utils.helper = {
	/**
	 * @description callback on resize of the window
	 */
	onResize : function(callback) {
		jQuery(window).resize(function() {
			callback();
		});
	},
	/**
	 * @description applies height and width to child element from respective parent or values passed
	 */
	applySize : function(wParent, hParent, child, options) {
		var width, height;
		if (hParent !== undefined) {
			if(hParent.getDomRef !== undefined) {
				height = jQuery(hParent.getDomRef()).height();
			} else if(jQuery.isNumeric(hParent)) {
				height = hParent;
			} else {
				height = jQuery(hParent).height();
			}
		}
		if (wParent !== undefined) {
			if(wParent.getDomRef !== undefined) {
				width = jQuery(hParent.getDomRef()).width();
			} else if(jQuery.isNumeric(wParent)) {
				width = wParent;
			} else {
				height = jQuery(wParent).width();
			}
		}
		var childEle = (child.getDomRef !== undefined) ? jQuery(child.getDomRef()) : jQuery(child);
		var offsetHeight = (options === undefined) ? 0 : (options.offsetHeight || 0);
		var offsetWidth = (options === undefined) ? 0 : (options.offsetWidth || 0);
		//Apply Height & Width to Child
		childEle.css({
			height : (hParent === undefined) ? "100%" : height + offsetHeight + "px",
			width : (wParent === undefined) ? "100%" : width + offsetWidth + "px"
		});
	}
};

}; // end of sap/apf/modeler/ui/utils/helper.js
if ( !jQuery.sap.isDeclared('sap.apf.modeler.ui.utils.navigationHandler') ) {
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
/**
  * Navigation Handler Class
**/
jQuery.sap.declare('sap.apf.modeler.ui.utils.navigationHandler');
sap.apf.modeler.ui.utils.navigationHandler = (function() {
	//Global Variables
	var instance, dialogInstance = {};
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.navigationHandler#onConfigurationSwitch
	 * @param {Boolean} isSaved - Whether configuration is saved or not before navigation 
	 * @param {Boolean} isDifferentConfig - Whether configuration is different or same 
	 * @param {Object} configListInstance - Pass the configuration list instance 
	 * @description On switch of one configuration to another handle scenarios below
	 * Yes : The unsaved changes are saved and the user navigates to the new configuration 
	 * No : The user navigates without saving the changes (this reverts back to the last saved state or the last in memory state depending on whether this object was saved before or not).
	 * Cancel : The pop up closes and user remains in the current configuration.
	 * */
	var throwLossOfDataPopup = function(configListInstance, callback) {
		_openMessageDialogForSwitchState(configListInstance, {
			isSwitchConfiguration : true
		}, callback);
	};
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.navigationHandler#onCheckValidationState
	 * @param {Boolean} isSaved - Whether configuration is saved or not before navigation 
	 * @param {Object} configListInstance - Pass the configuration list instance 
	 * @description On switch of one configuration to another handle scenarios below
	 * Yes : -> if this is saved object, restore the value to the previously saved value,
			-> if not saved, then change the value to the previously saved in memory value                 
			-> if the user has just created this object and is trying to navigate to the another node or action, the object is lost.
	 * No : -> He remains on the current form with the mandatory fields.
	 * */
	var throwMandatoryPopup = function(configListInstance, callback) {
		_openMessageDialogForValidationState(configListInstance, {
			isValidationCheck : true
		}, callback);
	};
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.navigationHandler#_openMessageDialogForSwitchState
	 * @param {Object} configListInstance  - configurationList Instance 
	 * @param {Object} switchState - Current Switch state property isTraverseBack, isSwitchConfiguration etc
	 * @description On switch of sub view to another open pop up dialog
	 * */
	var _openMessageDialogForValidationState = function(configListInstance, switchState, callback) {
		var oCoreApi = configListInstance.oCoreApi;
		var dialogMessage = oCoreApi.getText("mandatoryField");
		var currSwitchStateKey = Object.keys(switchState)[0];
		var handlerContext = {
			_handleValidationNavigation : _handleValidationNavigation,
			_handlePreventNavigation : _handlePreventNavigation,
			configListInstance : configListInstance,
			callback : callback
		};
		handlerContext[currSwitchStateKey] = switchState[currSwitchStateKey];
		//Create New Instance of dialog
		dialogInstance.oConfirmValidationDialog = sap.ui.xmlfragment("idMandatoryValidationDialogFragement", "sap.apf.modeler.ui.fragment.mandatoryDialog", handlerContext);
		configListInstance.getView().addDependent(dialogInstance.oConfirmValidationDialog);
		_setMessageDialogText(oCoreApi, "validationDialog");
		var oValidationMessageLabel = new sap.m.Label();
		oValidationMessageLabel.addStyleClass("dialogText");
		oValidationMessageLabel.setText(dialogMessage);
		dialogInstance.oConfirmValidationDialog.removeAllContent();
		dialogInstance.oConfirmValidationDialog.addContent(oValidationMessageLabel); // add the confirmation message to the dialog
		dialogInstance.oConfirmValidationDialog.open();
	};
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.navigationHandler#_openMessageDialogForSwitchState
	 * @param {Object} configListInstance  - configurationList Instance 
	 * @param {Object} switchState - Current Switch state property isTraverseBack, isSwitchConfiguration etc
	 * @description On switch of one configuration to another open pop up dialog
	 * */
	var _openMessageDialogForSwitchState = function(configListInstance, switchState, callback) {
		var oCoreApi = configListInstance.oCoreApi;
		var dialogMessage = oCoreApi.getText("unsavedConfiguration");
		var currSwitchStateKey = Object.keys(switchState)[0];
		var handlerContext = {
			_handleNavigationWithSave : _handleNavigationWithSave,
			_handleNavigateWithoutSave : _handleNavigateWithoutSave,
			_handlePreventNavigation : _handlePreventNavigation,
			configListInstance : configListInstance,
			callback : callback
		};
		handlerContext[currSwitchStateKey] = switchState[currSwitchStateKey];
		//Create New Instance of dialog
		dialogInstance.oConfirmNavigationDialog = sap.ui.xmlfragment("idMessageDialogFragment", "sap.apf.modeler.ui.fragment.messageDialog", handlerContext);
		configListInstance.getView().addDependent(dialogInstance.oConfirmNavigationDialog);
		_setMessageDialogText(oCoreApi, "naviagtionDialog");
		var oConfirmationMessageLabel = new sap.m.Label();
		oConfirmationMessageLabel.addStyleClass("dialogText");
		oConfirmationMessageLabel.setText(dialogMessage);
		dialogInstance.oConfirmNavigationDialog.removeAllContent();
		dialogInstance.oConfirmNavigationDialog.addContent(oConfirmationMessageLabel); // add the confirmation message to the dialog
		dialogInstance.oConfirmNavigationDialog.open();
	};
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.navigationHandler#_closeDialog
	 * @param {dialogInstance}  - DialogInstance to be destroyed
	 * @description Destroys the passed dialog instance
	 * */
	var _closeDialog = function(dialogInstance) {
		dialogInstance.close();
		dialogInstance.destroy();
	};
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.navigationHandler#_setMessageDialogText
	 * @param {Object} oCoreApi - Core API instance
	 * @description Sets the text for dialog pop up
	 * */
	var _setMessageDialogText = function(oCoreApi, dialogType) {
		if (dialogType === "naviagtionDialog") {
			sap.ui.core.Fragment.byId("idMessageDialogFragment", "idMessageDialog").setTitle(oCoreApi.getText("warning"));
			sap.ui.core.Fragment.byId("idMessageDialogFragment", "idYesButton").setText(oCoreApi.getText("yes"));
			sap.ui.core.Fragment.byId("idMessageDialogFragment", "idNoButton").setText(oCoreApi.getText("no"));
			sap.ui.core.Fragment.byId("idMessageDialogFragment", "idCancelButton").setText(oCoreApi.getText("cancel"));
		} else if (dialogType === "validationDialog") {
			sap.ui.core.Fragment.byId("idMandatoryValidationDialogFragement", "idMandatoryValidationDialog").setTitle(oCoreApi.getText("warning"));
			sap.ui.core.Fragment.byId("idMandatoryValidationDialogFragement", "idYesButton").setText(oCoreApi.getText("yes"));
			sap.ui.core.Fragment.byId("idMandatoryValidationDialogFragement", "idNoButton").setText(oCoreApi.getText("no"));
		}
	};
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.navigationHandler#_handleValidationNavigation
	 * @description Handles Navigation Back to sub views
	 * */
	var _handleValidationNavigation = function() {
		var configListInstance = this.configListInstance;
		var callback = this.callback;
		_closeDialog(dialogInstance.oConfirmValidationDialog);
		if (typeof callback.yes === "function") {
			callback.yes();
		}
	};
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.navigationHandler#_handleNavigationWithSave
	 * @description Handles Navigation Scenario With Save 
	 * */
	var _handleNavigationWithSave = function() {
		var configListInstance = this.configListInstance;
		var callback = this.callback;
		var saveEditor = function(callback) {
			//Save Editor Instance
			configListInstance.configEditor.save(function(id, metadata, messageObject) {
				configListInstance.configId = id;
				if (messageObject === undefined) {
					if (typeof callback === "function") {
						callback();
					}
					var successMessageOnSave = configListInstance.oCoreApi.getText("successOnSave");
					sap.m.MessageToast.show(successMessageOnSave, {
						width : "20em"
					});
				} else {
					var oMessageObject = configListInstance.oCoreApi.createMessageObject({
						code : "12000"
					});
					oMessageObject.setPrevious(messageObject);
					configListInstance.oCoreApi.putMessage(oMessageObject);
					var errorMessageOnSave = configListInstance.oCoreApi.getText("errorOnSave");
					sap.m.MessageToast.show(errorMessageOnSave, {
						width : "20em"
					});
				}
			});
		};
		_closeDialog(dialogInstance.oConfirmNavigationDialog);
		if (typeof callback.yes === "function") {
			callback.yes(saveEditor);
		}
	};
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.navigationHandler#_handleNavigateWithoutSave
	 * @description Handles Navigation Scenario Without Save 
	 * */
	var _handleNavigateWithoutSave = function() {
		var configListInstance = this.configListInstance;
		var callback = this.callback;
		_closeDialog(dialogInstance.oConfirmNavigationDialog);
		configListInstance.configurationHandler.resetConfiguration(configListInstance.configId);
		if (typeof callback.no === "function") {
			callback.no();
		}
	};
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.navigationHandler#_handlePreventNavigation
	 * @description Prevents the navigation retains in the same state 
	 * */
	var _handlePreventNavigation = function() {
		var isTraverseBack = this.isTraverseBack;
		var isSwitchConfiguration = this.isSwitchConfiguration;
		var isValidationCheck = this.isValidationCheck;
		var configListInstance = this.configListInstance;
		var callback = this.callback;
		if (!isValidationCheck) {
			_closeDialog(dialogInstance.oConfirmNavigationDialog);
		} else {
			_closeDialog(dialogInstance.oConfirmValidationDialog);
		}
		if (typeof callback.cancel === "function") {
			callback.cancel();
		} else if (typeof callback.no === "function" && isValidationCheck) {
			callback.no();
		}
	};
	//Create Navigation Handler Instance
	var createInstance = function() {
		return {
			throwLossOfDataPopup : throwLossOfDataPopup,
			throwMandatoryPopup : throwMandatoryPopup
		};
	};
	return {
		getInstance : function() {
			return instance || (instance = createInstance());
		}
	};
}());
}; // end of sap/apf/modeler/ui/utils/navigationHandler.js
if ( !jQuery.sap.isDeclared('sap.apf.modeler.ui.utils.textPoolHelper') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare('sap.apf.modeler.ui.utils.textPoolHelper');
/**
 * @private
 * @class Text Pool Helper
 * @description Helps UI Controllers in handling Text Pool related operations (AutoFill, setText etc.).
 * @param {sap.apf.modeler.core.TextPool} oTextPool - Text Pool instance used in the controller context.
 * @name sap.apf.modeler.ui.utils.TextPoolHelper
 */
sap.apf.modeler.ui.utils.TextPoolHelper = function(oTextPool) {
	this.oTextPool = oTextPool;
};
sap.apf.modeler.ui.utils.TextPoolHelper.prototype = {
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.TextPoolHelper#setAutoCompleteOn
	 * @param {sap.m.Input} oInputControl - Input Control on which suggestions has to be shown.
	 * @param {sap.apf.modeler.ui.utils.TranslationFormatMap} oTranslationFormat - Translation format of the input control.
	 * @description Sets 'Auto Complete Feature' on the given input control with relevant suggestion items based on translation format.
	 * */
	setAutoCompleteOn : function(oInputControl, oDependencies) {
		// Set showSuggestion to true.
		oInputControl.setShowSuggestion(true);
		var aSuggestionItems = [];
		// Fetch all Suggestion Items according to translation format.
		if (oDependencies.type === "text") {
			var aExistingItems = this._getSuggestionItems(oDependencies.oTranslationFormat);
			aExistingItems.forEach(function(oText) {
				var object = {};
				object.suggetionText = oText.TextElementDescription;
				aSuggestionItems.push(object);
			});
		} else if (oDependencies.type === "service") {
			var aExistingSerices = oDependencies.oConfigurationEditor.getAllServices();
			aExistingSerices.forEach(function(service) {
				var object = {};
				object.suggetionText = service;
				aSuggestionItems.push(object);
			});
		}
		// Prepare and set the JSONModel.
		var oInputControlModel = oInputControl.getModel();
		var oModel = oInputControlModel || new sap.ui.model.json.JSONModel({});
		if (!oModel.getData().suggestions) {
			oModel.getData().suggestions = aSuggestionItems;
		}
		if (!oInputControlModel) {
			oInputControl.setModel(oModel);
		}
		/*
		var oSuggestionModel = new sap.ui.model.json.JSONModel({
			suggestions : aSuggestionItems
		});
		oInputControl.setModel(oSuggestionModel);*/
		// Bind 'suggestionItems' aggregation.
		oInputControl.bindAggregation("suggestionItems", {
			path : "/suggestions",
			template : new sap.ui.core.Item({
				text : "{suggetionText}"
			})
		});
		// Attach Listener to 'suggest' event.
		oInputControl.attachSuggest(this._handleSuggestion);
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.TextPoolHelper#_handleSuggestion
	 * @param {oControlEvent} oEvent - Suggest Event.
	 * @description Handler for 'suggest' event triggered on input control.
	 * */
	_handleSuggestion : function(oEvent) {
		var sValue = oEvent.getParameter("suggestValue");
		var oFilter = new sap.ui.model.Filter("suggetionText", sap.ui.model.FilterOperator.Contains, sValue);
		oEvent.getSource().getBinding("suggestionItems").filter([ oFilter ]);
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.TextPoolHelper#_getSuggestionItems
	 * @param {sap.apf.modeler.ui.utils.TranslationFormatMap} oTranslationFormat - Translation format of the input control.
	 * @description Handler for 'suggest' event triggered on input control.
	 * @returns {object[]} Array of Translation Text Objects
	 * */
	_getSuggestionItems : function(oTranslationFormat) {
		return this.oTextPool.getTextsByTypeAndLength(oTranslationFormat.TextElementType, oTranslationFormat.MaximumLength);
	}
};
/**
 * @private
 * @name sap.apf.modeler.ui.utils.TranslationFormatMap
 * @description Look up map for Translation Format from Input Type
 */
sap.apf.modeler.ui.utils.TranslationFormatMap = {
	APPLICATION_TITLE : {
		TextElementType : "XTIT",
		MaximumLength : 250
	},
	CATEGORY_TITLE : {
		TextElementType : "XTIT",
		MaximumLength : 60
	},
	FACETFILTER_LABEL : {
		TextElementType : "XFLD",
		MaximumLength : 50
	},
	STEP_TITLE : {
		TextElementType : "XTIT",
		MaximumLength : 100
	},
	STEP_LONG_TITLE : {
		TextElementType : "XTIT",
		MaximumLength : 200
	},
	STEP_CORNER_TEXT : {
		TextElementType : "XFLD",
		MaximumLength : 25
	},
	REPRESENTATION_LABEL : {
		TextElementType : "XTIT",
		MaximumLength : 80
	},
	REPRESENTATION_CORNER_TEXT : {
		TextElementType : "XFLD",
		MaximumLength : 25
	}
};
}; // end of sap/apf/modeler/ui/utils/textPoolHelper.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.controls.draggableCarousel.DraggableCarousel') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/*global window, document*/ 
jQuery.sap.declare("sap.apf.ui.controls.draggableCarousel.DraggableCarousel");
(function(un) {
	"use strict";
	var isTouchDevice;
	var deviceDetect = (function() {
		isTouchDevice = window.hasOwnProperty('ontouchstart') || window.hasOwnProperty('onmsgesturechange'); //first one works on most browsers, second one works on ie10 
	}());
	sap.apf.ui.controls.draggableCarousel.DraggableCarousel = function(opts) {
		var options = opts || {};
		this.eleRefs = {
			blocks : [],
			containerEle : opts.containerEle
		};
		this._editState = options.editable === un ? true : options.editable;
		this._dragState = this._editState;
		this._removeState = this._editState;
		this.styles = {
			containerHeight : options.containerHeight,
			containerWidth : options.containerWidth,
			blockHeight : options.blockHeight,
			blockWidth : options.blockWidth,
			blockMargin : options.blockMargin,
			separatorHeight : options.separatorHeight,
			removeIconHeight : options.removeIconHeight
		};
		this.elems = {
			separator : options.separator,
			removeIcon : options.removeIcon
		};
		this.callbacks = {
			onBeforeDrag : options.onBeforeDrag,
			onAfterDrop : options.onAfterDrop,
			onAfterRemove : options.onAfterRemove,
			onAfterSelect : options.onAfterSelect
		};
		this.eleRefs.containerEle = this._drawSkeleton();
		this._initDimensions();
		this._isMouseDown = false;
	};
	sap.apf.ui.controls.draggableCarousel.DraggableCarousel.prototype = {
		_initDimensions : function() {
			var sMargin = this.styles.blockMargin;
			this._blockMargin = parseInt(sMargin.replace("px"), 10);
			var sBlockHeight = this.styles.blockHeight;
			this._blockHeight = parseInt(sBlockHeight.replace("px"), 10);
			this._blockTotalHeight = this._blockHeight + (2 * this._blockMargin);
			this._separatorHeight = 0;
			if (this.elems.separator !== un) {
				var sSeparatorHeight = this.styles.separatorHeight;
				this._separatorHeight = parseInt(sSeparatorHeight.replace("px"), 10);
			}
			this._mFactor = this._blockTotalHeight + this._separatorHeight;
		},
		_drawSkeleton : function() {
			var containerEle;
			if (this.eleRefs.containerEle === un) {
				containerEle = document.createElement('div');
			} else {
				containerEle = this.eleRefs.containerEle;
			}
			containerEle.style.cssText += this._getContainerStyles();
			containerEle.classList.add('DnD-container');
			var self = this;
			var tapEndEvent = isTouchDevice ? "touchend" : "mouseup";
			document.addEventListener(tapEndEvent, function(e) {
				self._onMouseUp(e, self);
			});
			return containerEle;
		},
		_getBlockWrapper : function(blockObj) {
			var block = blockObj.blockElement;
			var blocks = this.eleRefs.blocks;
			var dragState = blockObj.dragState === un ? true : blockObj.dragState;
			var dropState = blockObj.dropState === un ? true : blockObj.dropState;
			var removable = blockObj.removable === un ? true : blockObj.removable;
			var blockWrapper = document.createElement('div');
			blockWrapper.style.cssText += this._getBlockStyles();
			blockWrapper.setAttribute('class', 'DnD-block');
			blockWrapper.setAttribute('drag-state', dragState);
			blockWrapper.setAttribute('drop-state', dropState);
			if (removable) {
				var removeIconEle = this._getRemoveIconEle();
				blockWrapper.appendChild(removeIconEle);
			}
			var self = this;
			var tapEvent = isTouchDevice ? "touchstart" : "mousedown";
			blockWrapper.addEventListener(tapEvent, function(e) {
				self._onMouseDown(e, self, this);
			});
			var tapMoveEvent = isTouchDevice ? "touchmove" : "mousemove";
			blockWrapper.addEventListener(tapMoveEvent, function(e) {
				window.clearTimeout(self._TIMEOUTID);
			});
			
			//Select the block using space + enter key
			this._keypress(blockWrapper, 13, function (ele, e) {
				var selectIndex = blocks.indexOf(ele);
				self.callbacks.onAfterSelect.apply(ele, [selectIndex]);
			});
			
			this._keypress(blockWrapper, 32, function (ele, e) {
				var selectIndex = blocks.indexOf(ele);
				self.callbacks.onAfterSelect.apply(ele, [selectIndex]);
			});
			
			//Home + End Key - focus first and last block
			this._keypress(blockWrapper, 36, function (ele, e) {
				jQuery(blocks).removeAttr("tabindex");
				jQuery(blocks).attr("tabindex", -1);
				jQuery(blocks[0]).attr("tabindex", 0);
				jQuery(blocks[0]).focus();
			});
			
			this._keypress(blockWrapper, 35, function (ele, e) {
				jQuery(blocks).removeAttr("tabindex");
				jQuery(blocks).attr("tabindex", -1);
				jQuery(blocks[blocks.length - 1]).attr("tabindex", 0);
				jQuery(blocks[blocks.length - 1]).focus();
			});
			
			//Check the removable state 
			if(removable === true){
				//Delete Event on press of the block
				this._keypress(blockWrapper, 46, function (ele, e) {
					var removeIndex = blocks.indexOf(ele);
					self.removeBlock(removeIndex, self.callbacks.onAfterRemove);
					
					//Tab Index Grouping
					self._grouping(blocks);
					
					//Set focus to tab-index active
					jQuery(blocks).parent().wrap("<div>").find("[tabindex='0']").focus();
				});
			}
			
			blockWrapper.appendChild(block);
			return blockWrapper;
		},
		_getSeparatorEle : function() {
			var separator = document.createElement('div');
			separator.style.cssText += this._getSeparatorStyles();
			separator.setAttribute('class', 'DnD-separator');
			separator.innerHTML = this.elems.separator.outerHTML;
			return separator;
		},
		_getRemoveIconEle : function() {
			var removeIcon = this.elems.removeIcon;
			var removeIconWrapper = document.createElement('div');
			removeIconWrapper.style.cssText += this._getRemoveIconStyles();
			removeIconWrapper.setAttribute('class', 'DnD-removeIconWrapper');
			removeIconWrapper.innerHTML = removeIcon.outerHTML;
			var self = this;
			var tapEvent = isTouchDevice ? "touchstart" : "mousedown";
			removeIconWrapper.addEventListener(tapEvent, function(e) {
				self._onRemoveBlock(e, self, this);
			});
			return removeIconWrapper;
		},
		addBlock : function(blockObj) {
			if (blockObj instanceof Array) {
				var i;
				for(i = 0; i < blockObj.length; i++) {
					this.addBlock(blockObj[i]);
				}
				return;
			}
			var blockWrapper = this._getBlockWrapper(blockObj);
			var blockIndex = this.eleRefs.blocks.length;
			var blocks = this.eleRefs.blocks;
			var self = this;
			var y = blockIndex * this._mFactor;
			blockWrapper.style.cssText = blockWrapper.style.cssText + this._getTransformCss(y);
			this.eleRefs.blocks.push(blockWrapper);
			var container = this.eleRefs.containerEle;
			container.appendChild(blockWrapper);
			this._setHorizontalBlockMargin();
			if (this.elems.separator !== un) {
				var separator = this._getSeparatorEle();
				var separatorYValue = y + this._blockHeight + 2 * this._blockMargin;
				separator.style.cssText = separator.style.cssText + this._getTransformCss(separatorYValue);
				container.appendChild(separator);
			}
	
			//Tab Index Grouping
			this._grouping(blocks);
		},
		swapBlocks : function(fromIndex, toIndex) {
			var fromBlock = this.eleRefs.blocks[fromIndex];
			var toBlock = this.eleRefs.blocks[toIndex];
			if ((fromBlock.getAttribute('drag-state') !== "true" && fromBlock.getAttribute('drop-state') !== "true") || (toBlock.getAttribute('drag-state') !== "true" && toBlock.getAttribute('drop-state') !== "true")) {
				return false;
			}
			var fromBlockYValue = fromIndex * this._mFactor;
			var toBlockYValue = toIndex * this._mFactor;
			var toBlockTopValue = toBlockYValue;
			var toBlockBottomValue = toBlockTopValue + this._blockHeight + (2 * this._blockMargin);
			var containerEle = document.getElementsByClassName('scrollContainerEle')[0] ? document.getElementsByClassName('scrollContainerEle')[0] : this.eleRefs.containerEle; // Scroll Container Hack
			var scrollValue = containerEle.scrollTop;
			if ((fromIndex > toIndex) && toBlockTopValue < containerEle.scrollTop) {
				scrollValue = toBlockTopValue;
			}
			if ((fromIndex < toIndex) && toBlockBottomValue - containerEle.offsetHeight > containerEle.scrollTop) {
				scrollValue = toBlockBottomValue - containerEle.offsetHeight;
			}
			var prevScrollTop;
			var damping = 40;
			var easeOutLoop = window.setInterval(function() {
				containerEle.scrollTop += (scrollValue - containerEle.scrollTop) / damping;
				if (containerEle.scrollTop === prevScrollTop) {
					window.clearInterval(easeOutLoop);
				}
				prevScrollTop = containerEle.scrollTop;
			}, 1000 / 60);
			this._setTransformYValue(fromBlock, toBlockYValue);
			this._setTransformYValue(toBlock, fromBlockYValue);
			this._swapArray(this.eleRefs.blocks, fromIndex, toIndex);
			return true;
		},
		insertBlock : function(blockObj, index) {
			var blocks = this.eleRefs.blocks;
			blocks.push({});
			var i;
			for(i = blocks.length - 1; i > index; i--) {
				blocks[i] = blocks[i - 1];
				var yValue = i * this._mFactor;
				this._setTransformYValue(blocks[i], yValue);
			}
			var blockWrapper = this._getBlockWrapper(blockObj);
			blocks[i] = blockWrapper;
			var y = index * this._mFactor;
			blockWrapper.style.cssText = blockWrapper.style.cssText + this._getTransformCss(y);
			var container = this.eleRefs.containerEle;
			container.appendChild(blockWrapper);
			this._setHorizontalBlockMargin();
			if (this.elems.separator !== un) {
				var separator = this._getSeparatorEle();
				var separatorYValue = y + this._blockHeight + 2 * this._blockMargin;
				separator.style.cssText = separator.style.cssText + this._getTransformCss(separatorYValue);
				container.appendChild(separator);
			}
			
			//Tab Index Grouping
			this._grouping(blocks);
		},
		removeBlock : function(index, callback) {
			var blocks = this.eleRefs.blocks;
			var containerEle = this.eleRefs.containerEle;
			var i;
			var removeBlock = blocks[index];
			containerEle.removeChild(removeBlock);
			for(i = index; i < blocks.length - 1; i++) {
				blocks[i] = blocks[i + 1];
				var yValue = i * this._mFactor;
				this._setTransformYValue(blocks[i], yValue);
			}
			blocks.pop();
			if (this.elems.separator !== un) {
				var separators = containerEle.querySelectorAll('.DnD-separator');
				var lastSeparator = separators[separators.length - 1];
				containerEle.removeChild(lastSeparator);
			}
			callback.apply(containerEle, [ index ]);
			
			//Tab Index Grouping
			this._grouping(blocks);
		},
		placeAt : function(id) {
			var ele = document.getElementById(id);
			ele.appendChild(this.eleRefs.containerEle);
			this._setHorizontalBlockMargin();
		},
		getEditable : function() {
			return this._editState;
		},
		setEditable : function(editState) {
			this._editState = editState;
			this._setDragState(editState);
			this._setRemoveState(editState);
		},
		_setDragState : function(dragState) {
			this._dragState = dragState;
		},
		_setRemoveState : function(removeState) {
			this._removeState = removeState;
			var removeIcons = this.eleRefs.containerEle.querySelectorAll('.DnD-removeIconWrapper');
			var displayCss;
			if (removeState) {
				displayCss = "display : block";
			} else {
				displayCss = "display : none";
			}
			var i;
			for(i = 0; i < removeIcons.length; i++) {
				removeIcons[i].style.cssText += displayCss;
			}
		},
		_getContainerStyles : function() {
			var sStyle = [ "height : ", this.styles.containerHeight, ";width : ", this.styles.containerWidth, "overflow : auto; position : relative" ].join("");
			return sStyle;
		},
		_getBlockStyles : function() {
			if (this.styles.horizontalBlockMargin === un) {
				var containerWidth = this.eleRefs.containerEle.clientWidth;
				var blockWidth = this.eleRefs.blocks[0] === un ? 0 : this.eleRefs.blocks[0].clientWidth;
				this.styles.horizontalBlockMargin = ((containerWidth - blockWidth) / 2) + "px";
			}
			var sStyle = [ "height : ", this.styles.blockHeight, ";width : ", this.styles.blockWidth, ";margin : ", this.styles.blockMargin, " ", this.styles.horizontalBlockMargin, ";position : absolute" ].join("");
			return sStyle;
		},
		_getSeparatorStyles : function() {
			var sStyle = [ "height : ", this.styles.separatorHeight, ";width : 100%", ";position : absolute" ].join("");
			return sStyle;
		},
		_getRemoveIconStyles : function() {
			var sStyle = [ "height : ", this.styles.removeIconHeight, ";width : ", this.styles.removeIconHeight, ";float : right", ";margin : -10px -13px -10px 0", ";z-index : 2", ";position : relative", ";cursor : pointer" ].join("");
			if (this._removeState) {
				sStyle += ";display : block";
			} else {
				sStyle += ";display : none";
			}
			return sStyle;
		},
		_getTransformCss : function(yValue) {
			var sYValue = yValue + "px";
			var transformPropertyStrings = [ "transform", "-webkit-transform", "-moz-transform", "-ms-transform", "-o-transform" ];
			var cssString = "";
			var i;
			for(i = 0; i < transformPropertyStrings.length; i++) {
				cssString += transformPropertyStrings[i] + ": translate3d(0px," + sYValue + ", 0px); ";
			}
			return cssString;
		},
		_setTransformYValue : function(ele, yValue) {
			var vendorProperty = [ {
				"WebkitTransform" : "-webkit-transform"
			}, {
				"MozTransform" : "-moz-transform"
			}, {
				"MsTransform" : "-ms-transform"
			}, {
				"OTransform" : "-o-transform"
			} ];
			var transformPropertyString = "transform";
			var i;
			for(i = 0; i < vendorProperty.length; i++) {
				if (ele.style.hasOwnProperty(Object.keys(vendorProperty[i])[0])) {
					transformPropertyString = vendorProperty[i][Object.keys(vendorProperty[i])[0]];
				}
			}
			var sYValue = yValue + 'px';
			ele.style.cssText = ele.style.cssText + " " + transformPropertyString + ": translate3d(0px," + sYValue + ", 0px);";
		},
		_setHorizontalBlockMargin : function() {
			var blocks = this.eleRefs.blocks;
			var container = this.eleRefs.containerEle;
			var blockWidth = blocks[0] === un ? 0 : blocks[0].clientWidth;
			var containerWidth = container.clientWidth;
			this.styles.horizontalBlockMargin = ((containerWidth - blockWidth) / 2) + "px";
			var marginHorizontal = this.styles.horizontalBlockMargin;
			[].forEach.call(blocks, function(block) {
				block.style.cssText += "margin-right : " + marginHorizontal + ";margin-left : " + marginHorizontal;
			});
		},
		_onMouseDown : function(e, ctx, blockWrapper) {
			ctx._isMouseDown = true;
			ctx._TIMEOUTID = window.setTimeout(function() {
				if (ctx._isMouseDown) {
					ctx._onDragStart(e, ctx, blockWrapper);
				}
			}, 500);
		},
		_onMouseUp : function(e, ctx) {
			ctx._isMouseDown = false;
			if (ctx._dragEle !== un && ctx._dragEle.ele !== un) {
				ctx._onDrop(e, ctx);
			}
		},
		_onDragStart : function(e, ctx, blockWrapper) {
			if (!ctx._dragState || blockWrapper.getAttribute('drag-state') !== 'true') {
				return;
			}
			ctx._dragIndex = ctx.eleRefs.blocks.indexOf(blockWrapper);
			var yValue = ctx._dragIndex * ctx._mFactor;
			var containerEle = document.getElementsByClassName('scrollContainerEle')[0] ? document.getElementsByClassName('scrollContainerEle')[0] : ctx.eleRefs.containerEle; // Scroll Container Hack			
			ctx._containerEleOffsetHeight = containerEle.offsetHeight;
			ctx._containerEleScrollHeight = containerEle.scrollHeight;
			ctx._blockEleOffsetHeight = blockWrapper.offsetHeight;
			ctx._containerEleScrollTop = containerEle.scrollTop;
			var eleTopValue = yValue + ctx._blockMargin;
			var eleBottomValue = eleTopValue + ctx._blockHeight;
			if (eleTopValue < ctx._containerEleScrollTop) {
				containerEle.scrollTop = eleTopValue;
				ctx._containerEleScrollTop = Math.max(0, eleTopValue);
			}
			if (eleBottomValue - ctx._containerEleOffsetHeight > containerEle.scrollTop) {
				containerEle.scrollTop = eleBottomValue - ctx._containerEleOffsetHeight;
				ctx._containerEleScrollTop = Math.min(ctx._containerEleScrollHeight - ctx._containerEleOffsetHeight, eleBottomValue - ctx._containerEleOffsetHeight);
			}
			ctx._diffTop = e.pageY - yValue + ctx._containerEleScrollTop;
			ctx._dragEle = {
				ele : blockWrapper,
				pos : {
					y : yValue
				}
			};
			ctx.callbacks.onBeforeDrag.apply(blockWrapper, [ ctx._dragIndex ]);
			ctx._dragEle.ele.className = ctx._dragEle.ele.className + " " + "DnD-drag";
			var tapMoveEvent = isTouchDevice ? "touchmove" : "mousemove";
			document.addEventListener(tapMoveEvent, function(e) {
				if (ctx._dragEle.ele !== un) {
					e.preventDefault();
					ctx._onDrag(e, ctx);
					e.stopPropagation();
				}
			});
		},
		_onDrag : function(e, ctx) {
			var containerEle = document.getElementsByClassName('scrollContainerEle')[0] ? document.getElementsByClassName('scrollContainerEle')[0] : ctx.eleRefs.containerEle; // Scroll Container Hack
			var yValue = e.pageY - ctx._diffTop + ctx._containerEleScrollTop;
			var eleTopValue = yValue + ctx._blockMargin;
			var eleBottomValue = eleTopValue + ctx._blockHeight;
			var isDraggingDown = ((e.pageY - ctx._diffTop) > ctx._prevPageY);
			var isDraggingUp = ((e.pageY - ctx._diffTop) < ctx._prevPageY);
			ctx._prevPageY = (e.pageY - ctx._diffTop);
			if (isDraggingUp && (eleTopValue < ctx._containerEleScrollTop)) {
				containerEle.scrollTop = eleTopValue;
				ctx._containerEleScrollTop = Math.max(0, eleTopValue);
				yValue = e.pageY - ctx._diffTop + ctx._containerEleScrollTop;
			}
			if (isDraggingDown && ((eleBottomValue - ctx._containerEleOffsetHeight) > ctx._containerEleScrollTop)) {
				containerEle.scrollTop = eleBottomValue - ctx._containerEleOffsetHeight;
				ctx._containerEleScrollTop = Math.min(ctx._containerEleScrollHeight - ctx._containerEleOffsetHeight, eleBottomValue - ctx._containerEleOffsetHeight);
				yValue = e.pageY - ctx._diffTop + ctx._containerEleScrollTop;
			}
			ctx._setTransformYValue(ctx._dragEle.ele, yValue);
			var sMargin = ctx.styles.blockMargin; // margin-top and bottom.
			var margin = parseInt(sMargin.replace("px"), 10);
			var currentTopValue = yValue;
			var currentBottomValue = yValue + ctx._blockEleOffsetHeight;
			var minTopValue = ctx._dragEle.pos.y - (ctx._mFactor - (ctx._blockHeight / 2));
			var maxBottomValue = (ctx._dragEle.pos.y + ctx._blockEleOffsetHeight) + (ctx._mFactor - (ctx._blockHeight / 2));
			var eleYValue = ctx._dragEle.pos.y;
			var currentIndex = eleYValue / (ctx._mFactor);
			var blocks = ctx.eleRefs.blocks;
			var aboveSwappableIndex = -1, belowSwappableIndex = blocks.length;
			var i, blockEle;
			for(i = currentIndex - 1; i >= 0; i--) {
				blockEle = blocks[i];
				if (blockEle.getAttribute('drop-state') === 'true') {
					aboveSwappableIndex = i;
					break;
				}
			}
			for(i = currentIndex + 1; i < blocks.length; i++) {
				blockEle = blocks[i];
				if (blockEle.getAttribute('drop-state') === 'true') {
					belowSwappableIndex = i;
					break;
				}
			}
			minTopValue = ctx._dragEle.pos.y - ((currentIndex - aboveSwappableIndex) * ctx._mFactor - (ctx._blockHeight / 2));
			maxBottomValue = (ctx._dragEle.pos.y + ctx._blockEleOffsetHeight) + ((belowSwappableIndex - currentIndex) * ctx._mFactor - (ctx._blockHeight / 2));
			var swapIndex;
			var bSwapNeeded = false;
			if (currentTopValue < minTopValue) {
				bSwapNeeded = true;
				swapIndex = aboveSwappableIndex;
			} else if (currentBottomValue > maxBottomValue) {
				bSwapNeeded = true;
				swapIndex = belowSwappableIndex;
			}
			if (bSwapNeeded && (swapIndex >= 0) && (swapIndex <= blocks.length - 1)) {
				ctx._dragEle.pos.y = swapIndex * (ctx._mFactor);
				var moveEle = blocks[swapIndex];
				if (moveEle !== un) {
					ctx._setTransformYValue(moveEle, eleYValue);
					ctx._swapArray(blocks, currentIndex, swapIndex);
				}
			}
		},
		_onDrop : function(e, ctx) {
			ctx._dragEle.ele.className = ctx._dragEle.ele.className.replace(" DnD-drag", "");
			var blocks = ctx.eleRefs.containerEle.querySelectorAll('.DnD-drag');
			var i;
			for(i = 0; i < blocks.length; i++) {
				blocks[i].className = blocks[i].className.replace(" DnD-drag", "");
			}
			var eleYValue = ctx._dragEle.pos.y;
			ctx._dropIndex = eleYValue / (ctx._mFactor);
			ctx._setTransformYValue(ctx._dragEle.ele, eleYValue);
			ctx.callbacks.onAfterDrop.apply(ctx._dragEle.ele, [ ctx._dragIndex, ctx._dropIndex ]);
			ctx._dragEle = {};
		},
		_onRemoveBlock : function(e, ctx, removeIconWrapper) {
			e.stopPropagation();
			var removeBlock = removeIconWrapper.parentElement;
			var removeIndex = ctx.eleRefs.blocks.indexOf(removeBlock);
			ctx.removeBlock(removeIndex, ctx.callbacks.onAfterRemove);
		},
		_swapArray : function(array, from, to) {
			var temp = array[from];
			array[from] = array[to];
			array[to] = temp;
			return array;
		},
		_grouping : function (arrEle) {
			
			var childNode = arrEle;
			var activeIndex = (arrEle.length > 2) ? arrEle.length - 2 : 0;
			
			//Set first child or last child as tabindex active and other inactive
			jQuery(childNode).removeAttr("tabindex");
			jQuery(childNode).attr("tabindex", -1);
			jQuery(childNode[activeIndex]).attr("tabindex", 0);

			//Up arrow key hit
			this._keypress(childNode, 38, function (ele, e) {
				var index = childNode.indexOf(ele);
				if (index === 0) {
					return;
				}
				jQuery(childNode).removeAttr("tabindex");
				jQuery(childNode).attr("tabindex", -1);
				jQuery(childNode[index - 1]).attr("tabindex", 0);
				jQuery(childNode[index - 1]).focus();
				
			});
			
			//Down arrow key hit
			this._keypress(childNode, 40, function (ele, e) {
				var index = childNode.indexOf(ele);
				if (index === childNode.length - 1) {
					return;
				}
				jQuery(childNode).removeAttr("tabindex");
				jQuery(childNode).attr("tabindex", -1);
				jQuery(childNode[index + 1]).attr("tabindex", 0);
				jQuery(childNode[index + 1]).focus();
			});
			
		},
		_keypress : function (ele, keyCode, callback) {
			
			jQuery(ele).keydown(function (e) {
				//e.which is set by jQuery for those browsers that do not normally support e.keyCode.
				var keyCodePress = e.keyCode || e.which;
				
				if (keyCodePress === keyCode) {
					callback(this, e);
					return false;
				}
			});

		}
	};
}(undefined));

}; // end of sap/apf/ui/controls/draggableCarousel/DraggableCarousel.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.representations.representationInterface') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.apf.ui.representations.representationInterface');

(function () {
    'use strict';

    /**
     * @public
     * @experimental The complete interface is subject to ongoing work and not yet stable (as of Version 1.24.0).
     * @class The interface proxy passed to a representation which provides access to required APF methods. This constructor is used by apf.api.
     * It can be also used to build unit tests that need an interface proxy between APF and representations.
     * @name sap.apf.ui.representations.RepresentationInterfaceProxy
     * @param {sap.apf.core.Instance} oCoreApi
     * @param {sap.apf.ui.Instance} oUiApi
     */
    sap.apf.ui.representations.RepresentationInterfaceProxy = function (oCoreApi, oUiApi) {
        this.type = 'RepresentationInterfaceProxy';

        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.RepresentationInterfaceProxy#putMessage
         * @description see {@link sap.apf.Api#putMessage}
         */
        this.putMessage = function (oMessage) {
            return oCoreApi.putMessage(oMessage);
        };

        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.RepresentationInterfaceProxy#createMessageObject
         * @description see {@link sap.apf.Api#createMessageObject}
         */
        this.createMessageObject = function (oConfig) {
            return oCoreApi.createMessageObject(oConfig);
        };

        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.ui.representations.RepresentationInterfaceProxy#getActiveStep
         * @description see {@link sap.apf.Api#getActiveStep}
         */
        this.getActiveStep = function () {
            return oCoreApi.getActiveStep();
        };

        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.ui.representations.RepresentationInterfaceProxy#setActiveStep
         * @description see {@link sap.apf.Api#setActiveStep}
         */
        this.setActiveStep = function (oStep) {
            return oCoreApi.setActiveStep(oStep);
        };

        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.RepresentationInterfaceProxy#getTextNotHtmlEncoded
         * @description see {@link sap.apf.Api#getTextNotHtmlEncoded}
         */
        this.getTextNotHtmlEncoded = function (oLabel, aParameters) {
            return oCoreApi.getTextNotHtmlEncoded(oLabel, aParameters);
        };

        /**
         * @private
         * @deprecated since Version 1.23.1. Instead use the method {@link sap.apf.ui.representations.RepresentationInterfaceProxy#selectionChanged}.
         * @function
         * @name sap.apf.ui.representations.RepresentationInterfaceProxy#updatePath
         * @description see {@link sap.apf.Api#updatePath}
         */
        this.updatePath = function (fnStepProcessedCallback) {
            return oCoreApi.updatePath(fnStepProcessedCallback); // fixme planned change in Wave 7 to call update on uiApi so that UI gets notified on changes.
        };

        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.RepresentationInterfaceProxy#createFilter
         * @description see {@link sap.apf.Api#createFilter}
         */
        this.createFilter = function () {
            return oCoreApi.createFilter();
        };

        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.ui.representations.RepresentationInterfaceProxy#selectionChanged
         * @description see {@link sap.apf.Api#selectionChanged}
         */
        this.selectionChanged = function (bRefreshAllSteps) {
            return oUiApi.selectionChanged(bRefreshAllSteps);
        };

        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.ui.representations.RepresentationInterfaceProxy#getEventCallback
         * @description see {@link sap.apf.Api#getEventCallback}
         */
        this.getEventCallback = function (sEventType) { // fixme to be removed in Wave 7, part of formatter, not representation!
            return oUiApi.getEventCallback(sEventType);
        };
    }; // InterfaceProxy


    /**
     * @public
     * @experimental The complete interface is subject to ongoing work and not yet stable (as of Version 1.24.0).
     * @class This is not a runtime class, but it describes the interface that a representation (chart) has to implement for to interact with the APF.
     * @name sap.apf.ui.representations.representationInterface
     * @param {sap.apf.ui.representations.RepresentationInterfaceProxy} dependencies - specific interface proxy for communication between the representation and APF.<br>
     * @param {object} configuration - Configuration object that allows to define representation specific configuration values.<br>
     * Fixed interface property names:
     * <ul><li><b>alternateRepresentationTypeId</b>: A reference to a representation type in analytical configuration
     * <li><b>alternateRepresentationType</b>: A property dynamically added to the parameter object by APF core based on reference in alternateRepresentationTypeId and containing
     * configuration values of the representation type ID referenced by alternateRepresentationTypeId.
     * </ul>
     */
    sap.apf.ui.representations.representationInterface = function (dependencies, configuration) {
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#setData
         * @description The binding sets the data (received from the request) that has to be visualized. The array aDataResponse is shared between all representations
         * of a step and the binding. When lines are moved, deleted or changed, you modify the visualization of the original data! When displaying the data, one can determine which record
         * is selected by aSelectedIndices.
         * @param {sap.apf.core.Metadata} oMetadata oMetadata holds meta information about the received data.
         * @param {array} aDataResponse Data response from the request.
         */
        this.setData = function (oMetadata, aDataResponse) {
            // remember aDataResponse and transform it, so that the chart can display the data
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#getSelectionAsArray
         * @description This is the basic method with which the step can detect data selected in the chart.
         * @returns {number[]} An array with indices is returned.<br>E.g. if the first and the third line of the array aDataResponse have been selected,
         * then aIndices = [0, 2]. Counting of indices start from 0.
         * If all data has been selected, and aDataResponse.length == 4, then the array [0,1,2,3] is returned. In general [ 0 .. aDataResponse.length - 1]
         * If no data has been selected at all, then [] is returned.
         * In case of an empty selection, the value undefined has to be returned. An empty selection may occur, when selections in the previous step has been changed,
         * so that the visual selection on the chart is now empty (empty rectangle).
         */
        this.getSelectionAsArray = function () {
            return [ 0, 2 ]; // just an example. Here data points/series, that correspond to  aDataResponse[0] and aDataResponse[2] have been selected
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#adoptSelection
         * @description Called on representation by binding when a representation type is set.
         * Intention is to trigger transfer of selections that might exist on a representation (source) that is replaced by the "new" representation (target) to be set.
         * Therefore the target representation receives a reference pointing to the source representation.
         * In order to check whether selection transfer is possible the target representation initiates a negotiation process with the source representations (3-way-handshake).
         * If a common method can be determined between target and source representation the selection will be exchanged.
         * @param {object} oSourceRepresentation Source representation implementing the representationInterface.
         */
        this.adoptSelection = function (oSourceRepresentation) {
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#getFilterMethodType
         * @description This method has to be implemented so that binding can determine which method has to be used for the filter retrieval from a representations.
         * @returns {sap.apf.constants.filterMethodTypes} The filter method type the representation supports
         */
        this.getFilterMethodType = function () {
            return sap.apf.constants.filterMethodTypes.selectionAsArray; // returns the filter method type the representation supports
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#getRequestOptions
         * @description Additionally to parameters being set in the request configuration and filter values that are derived from the path logic,
         * a request can be enriched with additional options such as <b>$top</b>, <b>$skip</b> and <b>$orderby</b>.<p>
         * Dependent on the actual options a representation may require for a request, an object containing the correspondent properties may be returned by this method.
         * <br>In case no additional options are required an empty object should be returned.<p>
         *
         * The supported optional properties of the return object are:
         * <ul><li><b>paging</b>: An object containing optional properties<ul><li><b>top</b> for OData system query option $top <br>A numeric value is expected<li><b>skip</b> for query string option $skip<br> A numeric value is expected
         * <li><b>inlineCount</b> for OData system query option $inlineCount<br>A boolean value 'true' is expected if inline count is requested</ul>
         * <li><b>orderby</b> for OData system query option $orderby: Values could be of type<ul>
         *    <li><b>string</b> that holds a property name (in this case the default sort order 'ascending' is applied)
         *  <li><b>object</b> with properties:<ul>
         *    <li>'property' A string containing the property name is expected.
         *    <li>'descending' A boolean value 'true' is expected, if descending sort order is required for the property. If omitted default sort order 'ascending' is applied.
         *  </ul>
         *  <li><b>array</b> holding objects with properties 'property' and 'descending' as described above.</ul>
         * @returns {object}
         *Example:
         *<pre class="javascript">
         *{ paging : {
	 *		top : 10,
	 *		skip : 30,
	 *		inlineCount : true
	 *  },
	 *  orderby : [ 
	 *		{ property : "nameProperty1",
	 *		}, {
	 *		property : "nameProperty2",
	 *		descending : true
	 *		}
	 *  ]
	 *}
         *</pre>
         * See also <a href="http://www.odata.org/documentation/odata-version-2-0/uri-conventions/">http://www.odata.org/documentation/odata-version-2-0/uri-conventions/</a>
         */
        this.getRequestOptions = function () {
            return {}; // Default
            // return { paging : { top : 10, skip : 30, inlineCount : true }, orderby : [ { property : "propertyName", descending : true }] };
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#getParameter
         * @description The method returns the constructor arguments which will be used to create toggle representation.
         * @returns {object} oParameters
         */
        this.getParameter = function () {
            var oParameters = {dimensions: [], measures: []};
            return oParameters;
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#getMainContent
         * @description This method holds the logic to draw the content to be shown on main representation area.
         * @returns {object} oUiObject The UI object that has to be shown in main representation area. Example: Line chart instance for a line chart representation.
         */
        this.getMainContent = function () {
            var oUiObject = {};
            return oUiObject;
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#getThumbnailContent
         * @description This method holds the logic to draw the content to be shown on thumbnail area.
         * @returns {object} oUiObject The UI object that has to be shown in thumbnail area. Example: Line chart instance for a line chart representation.
         */
        this.getThumbnailContent = function () {
            var oUiObject = {};
            return oUiObject;
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#getPrintContent
         * @description This method holds the logic to draw the content to be printed.
         * @returns {object} oUiObject The UI object that has to be printed. Example: Line chart instance for a line chart representation.
         */
        this.getPrintContent = function () {
            var oUiObject = {};
            return oUiObject;
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#getTooltipContent
         * @description This method holds the logic to draw the content to be shown as tooltip for a thumbnail.
         * It will be shown inside a tooltip Popup when the thumbnail content overflows the thumbnail container area with a gradient effect to indicate that it is overflowing.
         * @returns {object} oUiObject The UI object that has to be shown as tooltip for a thumbnail. Example: Detailed content of a form representation.
         */
        this.getTooltipContent = function () {
            var oUiObject = {};
            return oUiObject;
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#removeAllSelection
         * @description This method holds the logic to remove all selection from the chart. It also updates the step.
         */
        this.removeAllSelection = function () {
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#serialize
         * @description This method returns the selection for serialization. This is required for the Persisting selection of current representation.
         * It includes selection mode and selections.
         * @returns {object} oSerializationInformation
         */
        this.serialize = function () {
            var oSerializationInformation = {};
            return oSerializationInformation;
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#deserialize
         * @description This method uses the serialization information from serialized data and sets the selection to representation based on mode and selection string returned.
         * @param {object} oSerializationInformation
         */
        this.deserialize = function (oSerializationInformation) {
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#getAlternateRepresentation
         * @description Returns the alternate representation of current step (i.e. list representation for the charts)
         * @returns {object} oAlternateRepresentation
         */
        this.getAlternateRepresentation = function () {
            return this.oAlternateRepresentation;  //fixme: undefined
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#getMetaData
         * @description Returns meta data for representation type
         * @returns {sap.apf.core.EntityTypeMetadata} metadata
         */
        this.getMetaData = function () {
            return this.metadata;  //fixme: undefined
        };
        /**
         * @public
         * @function
         * @name sap.apf.ui.representations.representationInterface#getData
         * @description Returns data for representation type
         * @returns {array} aDataResponse
         */
        this.getData = function () {
            return this.aDataResponse; //fixme: undefined
        };
    };
}());

}; // end of sap/apf/ui/representations/representationInterface.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.representations.utils.UI5ChartHelper') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
/**
 * @class utils
 * @name utils
 * @memberOf sap.apf.ui.representations
 * @description holds utility functions used by viz representations 
 */
jQuery.sap.declare("sap.apf.ui.representations.utils.UI5ChartHelper");
/**
 * @class UI5ChartHelper
 * @name UI5ChartHelper
 * @memberOf sap.apf.ui.representations.utils
 * @description holds utility functions used by viz representations 
 */
sap.apf.ui.representations.utils.UI5ChartHelper = function(oApi, oParameters) {
	var self = this;
	this.parameter = oParameters;
	this.classifiedData = [];
	this.extendedDataSet = [];
	this.fieldKeysLookup = {};
	this.displayNameLookup = {};
	this.fieldNameLookup = {};
	this.filterLookup = {};
	this.datasetObj = {};
	this.cachedSelection = [];
	this.filterValues = [];
	this.dataAlreadySorted = false;
	/**
	 * @memberOf sap.apf.ui.representations.utils.UI5ChartHelper
	 * @method init
	 * @description Initialize hash maps, extended data response and dataset.
	 */
	this.init = function(aDataResponse, metadata, bIsGroupTypeChart, oDataSetHelper, oFormatter) {
		this.metadata = metadata;
		this.formatter = oFormatter;
		initFieldsKeyLookup.bind(this)(metadata, aDataResponse);
		initExtendedDataResponse.bind(this)(aDataResponse);
		initDataset.bind(this)(bIsGroupTypeChart, oDataSetHelper);
		if (this.parameter.requiredFilters !== undefined && this.parameter.requiredFilters.length !== 0) {
			validateSelections();
		}
	};
	var validateSelections = function() {
		self.filterValues = self.filterValues.filter(function(filterTerm) {
			for( var i = 0; i < self.extendedDataResponse.length; i++) {
				var counter = 0;
				for( var j = 0; j < self.parameter.requiredFilters.length; j++) {
					if (filterTerm[j] === self.extendedDataResponse[i][self.parameter.requiredFilters[j]]) {
						counter = counter + 1;
					}
				}
				if (counter === self.parameter.requiredFilters.length) {
					return true;
				} else if (i === self.extendedDataResponse.length - 1) {
					return false;
				}
			}
		});
		self.cachedSelection = getHighlightPoints();
	};
	var initFieldsKeyLookup = function(metadata, aDataResponse) {
		var fieldObjects = this.parameter.dimensions.concat(this.parameter.measures);
		var aRequiredFilters = [];
		var checkRequiredFilterPresent = function(requiredFilter) {//Function to determine whether the required filter is one of the dimensions or measures
			var counter = 0;
			for( var i = 0; i < fieldObjects.length; i++) {
				if (fieldObjects[i].fieldName === requiredFilter) {
					counter++;
				}
			}
			return (counter === 0 ? false : true);
		};
		if (this.parameter.requiredFilters) {
			this.parameter.requiredFilters.forEach(function(requiredFilter) {
				if (!checkRequiredFilterPresent(requiredFilter)) {//If required filter not present in dimension or measure then it is pushed to field object
					var requiredFilterObject = {
						fieldName : requiredFilter
					};
					aRequiredFilters.push(requiredFilterObject);
				}
			});
		}
		if (aRequiredFilters.length !== 0) {
			fieldObjects = fieldObjects.concat(aRequiredFilters);
		}
		for( var i = 0; i < fieldObjects.length; i++) {
			var fieldObject = fieldObjects[i];
			var fieldName = fieldObject.fieldName;
			this.displayNameLookup[fieldName] = {};
			if (metadata !== undefined) {
				if (metadata.getPropertyMetadata(fieldName).hasOwnProperty('text') && (metadata.getPropertyMetadata(fieldName)["aggregation-role"] !== "measure")) {
					var textField = metadata.getPropertyMetadata(fieldName).text;
					var textFieldName = metadata.getPropertyMetadata(textField).label;
					this.displayNameLookup[fieldName].DISPLAY_NAME = textFieldName;
					this.displayNameLookup[fieldName].VALUE = "formatted_" + fieldName;
				} else if (metadata.getPropertyMetadata(fieldName)["aggregation-role"] === "dimension") {
					this.displayNameLookup[fieldName].DISPLAY_NAME = metadata.getPropertyMetadata(fieldName).label;
					this.displayNameLookup[fieldName].VALUE = "formatted_" + fieldName;
				} else {
					this.displayNameLookup[fieldName].DISPLAY_NAME = metadata.getPropertyMetadata(fieldName).label;
					this.displayNameLookup[fieldName].VALUE = fieldName;
				}
				if (fieldObject.fieldDesc !== undefined && oApi.getTextNotHtmlEncoded(fieldObject.fieldDesc).length) {
					this.displayNameLookup[fieldName].DISPLAY_NAME = oApi.getTextNotHtmlEncoded(fieldObject.fieldDesc);
				}
				if (metadata.getPropertyMetadata(fieldName).unit !== undefined) {
					var sUnitReference = metadata.getPropertyMetadata(fieldName).unit;
					var sUnitValue;
					if (aDataResponse !== undefined && aDataResponse.length !== 0) {
						sUnitValue = aDataResponse[0][sUnitReference];
						this.displayNameLookup[fieldName].DISPLAY_NAME = this.displayNameLookup[fieldName].DISPLAY_NAME + ' (' + sUnitValue + ')';
					}
				}
			}
			this.fieldNameLookup[this.displayNameLookup[fieldName].DISPLAY_NAME] = {};
			this.fieldNameLookup[this.displayNameLookup[fieldName].DISPLAY_NAME].FIELD_NAME = fieldName;
			this.fieldNameLookup[this.displayNameLookup[fieldName].DISPLAY_NAME].VALUE = this.displayNameLookup[fieldName].VALUE;
		}
	};
	var initExtendedDataResponse = function(aDataResponse) {
		this.extendedDataResponse = jQuery.extend([], true, aDataResponse);
		var i, j, k;
		//Extend the aDataResponse
		if (this.extendedDataResponse.length !== 0) {
			for(i = 0; i < this.extendedDataResponse.length; i++) {
				for(k = 0; k < this.parameter.measures.length; k++) {
					if (this.extendedDataResponse[i][this.parameter.measures[k].fieldName] !== null) {
						this.extendedDataResponse[i][this.parameter.measures[k].fieldName] = parseFloat(this.extendedDataResponse[i][this.parameter.measures[k].fieldName]);
					}
				}
				for(j = 0; j < Object.keys(this.displayNameLookup).length; j++) {
					var fieldName = Object.keys(this.displayNameLookup)[j];
					var formattedFieldExists = (this.displayNameLookup[fieldName].VALUE.search('formatted_') !== -1); // To check whether property exists or not
					if (formattedFieldExists) {
						var textExists = this.metadata.getPropertyMetadata(fieldName).hasOwnProperty('text'); // To check whether property exists or not
						if (!textExists) {
							this.extendedDataResponse[i][this.displayNameLookup[fieldName].VALUE] = this.formatter.getFormattedValue(fieldName, this.extendedDataResponse[i][fieldName]);
						} else {
							var textField = this.metadata.getPropertyMetadata(fieldName).text;
							var oTextToBeFormatted = {
								text : this.extendedDataResponse[i][textField],
								key : this.extendedDataResponse[i][fieldName]
							};
							this.extendedDataResponse[i][this.displayNameLookup[fieldName].VALUE] = this.formatter.getFormattedValueForTextProperty(fieldName, oTextToBeFormatted);
						}
					}
				}
				var filterKeyText = "";
				for(j = 0; j < this.parameter.dimensions.length; j++) {
					var dimensionValueField = this.displayNameLookup[this.parameter.dimensions[j].fieldName].VALUE;
					this.extendedDataResponse[i][dimensionValueField] = this.extendedDataResponse[i][dimensionValueField] === null ? this.extendedDataResponse[i][dimensionValueField] : this.extendedDataResponse[i][dimensionValueField].toString();
					filterKeyText = filterKeyText + this.extendedDataResponse[i][dimensionValueField];
					this.filterLookup[filterKeyText] = [];
					if (this.parameter.requiredFilters) {
						for(k = 0; k < this.parameter.requiredFilters.length; k++) {
							var filterValue = {};
							filterValue.id = this.extendedDataResponse[i][this.parameter.requiredFilters[k]];
							filterValue.text = this.extendedDataResponse[i][this.displayNameLookup[this.parameter.requiredFilters[k]].VALUE];
							this.filterLookup[filterKeyText].push(filterValue);
						}
					}
				}
			}
		} else {
			var obj = {};
			for(k = 0; k < this.parameter.measures.length; k++) {
				obj[self.displayNameLookup[this.parameter.measures[k].fieldName].VALUE] = undefined;
			}
			for(j = 0; j < this.parameter.dimensions.length; j++) {
				obj[self.displayNameLookup[this.parameter.dimensions[j].fieldName].VALUE] = undefined;
			}
			this.extendedDataResponse.push(obj);
		}
	};
	var initDataset = function(bIsGroupTypeChart, oDataSetHelper) {
		var obj = this.extendedDataResponse;
		var oModel = new sap.ui.model.json.JSONModel();
		oModel.setData({
			data : obj
		});
		var aDimensions = [];
		var aMeasures = [];
		var i = 0;
		for(i = 0; i < this.parameter.dimensions.length; i++) {
			aDimensions[i] = {
				name : this.displayNameLookup[this.parameter.dimensions[i].fieldName].DISPLAY_NAME,
				value : this.displayNameLookup[this.parameter.dimensions[i].fieldName].VALUE,
				kind : this.parameter.dimensions[i].kind ? this.parameter.dimensions[i].kind : undefined,
				axisfeedItemId : this.parameter.dimensions[i].axisfeedItemId ? this.parameter.dimensions[i].axisfeedItemId : undefined
			};
		}
		self.measureAxisType = bIsGroupTypeChart;
		for(i = 0; i < this.parameter.measures.length; i++) {
			aMeasures[i] = {
				name : this.displayNameLookup[this.parameter.measures[i].fieldName].DISPLAY_NAME,
				value : this.displayNameLookup[this.parameter.measures[i].fieldName].VALUE,
				kind : this.parameter.measures[i].kind ? this.parameter.measures[i].kind : undefined,
				axisfeedItemId : this.parameter.measures[i].axisfeedItemId ? this.parameter.measures[i].axisfeedItemId : undefined
			};
		}
		var oParameter = {
			dimensions : aDimensions,
			measures : aMeasures
		};
		var flattendeDataSetObj = oDataSetHelper.getDataset(oParameter);
		if (this.metadata !== undefined) {
			for(i = 0; i < this.parameter.dimensions.length; i++) {
				var oMetaData = this.metadata.getPropertyMetadata(this.parameter.dimensions[i].fieldName);
				if (oMetaData.isCalendarYearMonth === "true") {
					if (this.parameter.dimensions.length > 1) {
						flattendeDataSetObj.data.sorter = new sap.ui.model.Sorter(this.parameter.dimensions[0].fieldName, false);
					}
				}
			}
		}
		this.datasetObj = flattendeDataSetObj;
	};
	/**
	 * @memberOf sap.apf.ui.representations.utils.UI5ChartHelper
	 * @method getDataset
	 * @description returns new flattended data set.
	 */
	this.getDataset = function() {
		return new sap.viz.ui5.data.FlattenedDataset(this.datasetObj);
	};
	/**
	 * @memberOf sap.apf.ui.representations.utils.UI5ChartHelper
	 * @method getModel
	 * @description returns json model with data set.
	 */
	this.getModel = function() {
		var obj = this.extendedDataResponse;
		var oModel = new sap.ui.model.json.JSONModel();
		oModel.setData({
			data : obj
		});
		return oModel;
	};
	/**
	 * @deprecated since version 1.27.0 and using getFilters API instead
	 * @memberOf sap.apf.ui.representations.utils.UI5ChartHelper
	 * @method getFilterCount
	 * @description returns the number of filters.
	 */
	this.getFilterCount = function() {
		return this.filterValues.length;
	};
	/**
	 * @memberOf sap.apf.ui.representations.utils.UI5ChartHelper
	 * @method getFilters
	 * @description returns the filter object id and text
	 */
	this.getFilters = function() {
		var filterLookupKeys = Object.keys(this.filterLookup);
		var aFilterValueObjects = [];
		var self = this;
		var filterLookup = function(filterId) {//Function to match filterValue id and filter lookup to get the text for the id
			for( var i = 0; i < filterLookupKeys.length; i++) {
				var filterValueObject = {};
				var key = filterLookupKeys[i];
				for( var j = 0; j < self.filterLookup[key].length; j++) {
					if (filterId === self.filterLookup[key][j].id) {
						filterValueObject.id = filterId;
						filterValueObject.text = self.filterLookup[key][j].text;
						aFilterValueObjects.push(filterValueObject);
						return;// Exit loops when a match is found
					}
				}
			}
		};
		for( var i = 0; i < this.filterValues.length; i++) {
			filterLookup(this.filterValues[i][0]);
		}
		return aFilterValueObjects;
	};
	/**
	 * @memberOf sap.apf.ui.representations.utils.UI5ChartHelper
	 * @method getSelectionFromFilter
	 * @description returns highlight points from currently selected filters.
	 */
	this.getSelectionFromFilter = function() {
		if (this.parameter.requiredFilters === undefined || this.parameter.requiredFilters.length === 0) {
			return [];
		}
		var highlightPoints = getHighlightPoints();
		return highlightPoints;
	};
	/**
	 * @memberOf sap.apf.ui.representations.utils.UI5ChartHelper
	 * @method getHighlightPointsFromSelectionEvent
	 * @description manage filters and returns highlight points from currently selected filters.
	 */
	this.getHighlightPointsFromSelectionEvent = function(allSelections) {
		var selections = [];
		var newSelections = [];
		selections = getExclusiveSelections(allSelections, this.cachedSelection);
		for( var i = 0; i < selections.length; i++) {
			var selObj = selections[i];
			if (this.parameter.measures.length === 1) {
				var measureDisplayName = this.displayNameLookup[this.parameter.measures[0].fieldName].DISPLAY_NAME;
				if (selObj.data[measureDisplayName] === undefined || selObj.data[measureDisplayName] === null) {
					continue; // null selection scenario encountered when a series has missing data. (StackedColumn, % StackedColumn etc.)
				}
			}
			var filterKeyText = "";
			for( var j = 0; j < this.parameter.dimensions.length; j++) {
				var dimensionDisplayName = this.displayNameLookup[this.parameter.dimensions[j].fieldName].DISPLAY_NAME;
				filterKeyText = filterKeyText + selObj.data[dimensionDisplayName];
			}
			var filterTermArray = this.filterLookup[filterKeyText];
			var resultArray = this.filterValues.filter(function(existingTerm) {
				var counter = 0;
				for( var i = 0; i < self.parameter.requiredFilters.length; i++) {
					if (existingTerm[i] === filterTermArray[i].id) {
						counter = counter + 1;
					} else {
						break;
					}
				}
				if (counter === self.parameter.requiredFilters.length) {
					return true;
				} else if (i === self.parameter.requiredFilters.length) {
					return false;
				}
			});
			if (resultArray.length === 0) {
				var aModifiedFilterTermArray = filterTermArray.map(function(oTerm) {
					return oTerm.id;
				});
				this.filterValues.push(aModifiedFilterTermArray);
			}
		}
		newSelections = getHighlightPoints();
		this.cachedSelection = newSelections;
		return newSelections;
	};
	var getExclusiveSelections = function(allSelections, newSelection) {
		var exclusiveSelections = allSelections.filter(function(selObj) {
			for( var i = 0; i < newSelection.length; i++) {
				var counter = 0;
				for( var j = 0; j < Object.keys(selObj.data).length; j++) {
					if (newSelection[i].data[Object.keys(selObj.data)[j]] === selObj.data[Object.keys(selObj.data)[j]]) {
						counter = counter + 1;
					} else {
						break;
					}
				}
				if (counter === Object.keys(selObj.data).length) {
					return false;
				} else if (j === Object.keys(selObj.data).length) {
					return true;
				}
			}
			return true;
		});
		return exclusiveSelections;
	};
	/**
	 * @memberOf sap.apf.ui.representations.utils.UI5ChartHelper
	 * @method getFilterFromSelection
	 * @description returns filter objects from current selections.
	 */
	this.getFilterFromSelection = function() {
		var reqFilterValues = [];
		var i;
		for(i = 0; i < self.filterValues.length; i++) {
			reqFilterValues.push(self.filterValues[i][0]);
		}
		var oFilter = oApi.createFilter();
		var EQ = oFilter.getOperators().EQ;
		var oFilterExpression;
		var oAddedOrCondition = oFilter.getTopAnd().addOr('exprssionOr');
		for(i = 0; i < reqFilterValues.length; i++) {
			var dataType = this.metadata.getPropertyMetadata(self.parameter.requiredFilters[0]).dataType.type;
			if (dataType === "Edm.Int32") {
				reqFilterValues[i] = reqFilterValues[i] === null ? reqFilterValues[i] : parseFloat(reqFilterValues[i]);
			}
			oFilterExpression = {
				id : reqFilterValues[i],
				name : self.parameter.requiredFilters[0],
				operator : EQ,
				value : reqFilterValues[i]
			};
			oAddedOrCondition.addExpression(oFilterExpression);
		}
		return oFilter;
	};
	var getHighlightPoints = function() {
		var reqFilterValues = [];
		reqFilterValues[0] = [];
		var i, j, k, l;
		for(i = 0; i < self.filterValues.length; i++) {
			reqFilterValues[0].push(self.filterValues[i][0]);
		}
		var newSelections = [];
		for(i = 0; i < self.extendedDataResponse.length; i++) {
			var dataRow = self.extendedDataResponse[i];
			for(j = 0; j < reqFilterValues[0].length; j++) {
				var counter = 0;
				for(k = 0; k < reqFilterValues.length; k++) {
					if (dataRow[self.parameter.requiredFilters[k]] === reqFilterValues[k][j]) {
						counter = counter + 1;
					}
				}
				if (counter === reqFilterValues.length) {
					var newSelObject = {
						data : {}
					};
					var displayFieldName;
					var valueFieldName;
					for(k = 0; k < self.getDataset().getDimensions().length; k++) {
						var dimensionDisplayFieldName = self.getDataset().getDimensions()[k].getName();
						var dimensionValueFieldName = self.fieldNameLookup[dimensionDisplayFieldName].VALUE;
						newSelObject.data[dimensionDisplayFieldName] = dataRow[dimensionValueFieldName];
					}
					if (!self.measureAxisType) {
						var measureDisplayFieldName;
						var measureValueFieldName;
						for(l = 0; l < self.getDataset().getMeasures().length; l++) {
							var newSelObjClone = jQuery.extend(true, {}, newSelObject);
							measureDisplayFieldName = self.getDataset().getMeasures()[l].getName();
							measureValueFieldName = self.fieldNameLookup[measureDisplayFieldName].VALUE;
							newSelObjClone.data[measureDisplayFieldName] = dataRow[measureValueFieldName] === null ? dataRow[measureValueFieldName] : parseFloat(dataRow[measureValueFieldName]);
							newSelections.push(newSelObjClone);
						}
					} else {
						for(k = 0; k < self.getDataset().getMeasures().length; k++) {
							displayFieldName = self.getDataset().getMeasures()[k].getName();
							valueFieldName = self.fieldNameLookup[displayFieldName].VALUE;
							newSelObject.data[displayFieldName] = dataRow[valueFieldName] === null ? dataRow[valueFieldName] : parseFloat(dataRow[valueFieldName]);
						}
						newSelections.push(newSelObject);
					}
				}
			}
		}
		return newSelections;
	};
	/**
	 * @memberOf sap.apf.ui.representations.utils.UI5ChartHelper
	 * @method getHighlightPointsFromDeselectionEvent
	 * @description manage filters and returns highlight points from current selection.
	 */
	this.getHighlightPointsFromDeselectionEvent = function(currentSelection) {
		var i, j;
		var deselectedObjs = getExclusiveSelections(this.cachedSelection, currentSelection);
		for(i = 0; i < deselectedObjs.length; i++) {
			var deselObj = deselectedObjs[i];
			var filterKeyText = "";
			for(j = 0; j < this.parameter.dimensions.length; j++) {
				var dimensionDisplayName = this.displayNameLookup[this.parameter.dimensions[j].fieldName].DISPLAY_NAME;
				filterKeyText = filterKeyText + deselObj.data[dimensionDisplayName];
			}
			var filterTermArray = this.filterLookup[filterKeyText];
			this.filterValues = this.filterValues.filter(function(currentFilter, index) {
				var counter = 0;
				for( var i = 0; i < filterTermArray.length; i++) {
					if (filterTermArray[i].id === currentFilter[i]) {
						counter = counter + 1;
					}
				}
				if (counter === filterTermArray.length) {
					return false;
				} else {
					return true;
				}
			});
		}
		var newSelections = getHighlightPoints();
		this.cachedSelection = newSelections;
		return newSelections;
	};
	/**
	 * @memberOf sap.apf.ui.representations.utils.UI5ChartHelper
	 * @method destroy
	 * @description Destroys instances
	 */
	this.destroy = function(){
		if (self.formatter) {
			self.formatter.destroy();
			self.formatter = null;
		}
	
		self.metadata = null;
		self.extendedDataResponse = null;
	};
};
}; // end of sap/apf/ui/representations/utils/UI5ChartHelper.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.representations.utils.vizDatasetHelper') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
/**
 * @class utils
 * @name utils
 * @memberOf sap.apf.ui.representations
 * @description holds utility functions used by viz representations
 */
jQuery.sap.declare("sap.apf.ui.representations.utils.vizDatasetHelper");

/**
 * @class vizDatasetHelper
 * @name vizdatasetHelper
 * @memberOf sap.apf.ui.representations.utils
 * @param bIsGroupTypeChart- boolean to indicate if the chart is of type group (bubble,scatter)
 * @description holds utility functions used by viz representations
 */
sap.apf.ui.representations.utils.VizDatasetHelper = function(bIsGroupTypeChart) {
	// axisType for viz charts is either axis(Eg: Column, Bar, Pie, Line, Stacked Column, Percentage Stacked Column, Clustered Column) or group(Bubble, Scatter)
	/*
	 * If kind(supportedKind) is defined for dimensions 
	 * Dimensions for axis type charts are : xAxis(axis : 1), legend(axis: 2) and sectorColor(axis: 1)
	 * Dimensions for group type charts are : regionColor(axis : 1) and regionShape(axis: 2)
	 */
	/**
	 * @memberOf sap.apf.ui.representations.utils.vizDatasetHelper
	 * @method getAxis
	 * @description Returns the axis (1 or 2) based on kind attribute
	 * */
	var getAxis = function(sKind) {
		var nAxis;
		var oSupportedKinds = sap.apf.core.constants.representationMetadata.kind;
		if (!bIsGroupTypeChart) {
			if (sKind === oSupportedKinds.LEGEND) {
				nAxis = 2;
			} else if (sKind === oSupportedKinds.XAXIS || sKind === oSupportedKinds.SECTORCOLOR) {
				nAxis = 1;
			}
		} else {
			if (sKind === oSupportedKinds.REGIONCOLOR) {
				nAxis = 1;
			} else if (sKind === oSupportedKinds.REGIONSHAPE) {
				nAxis = 2;
			}
		}
		return nAxis;
	};
	/**
	 * @memberOf sap.apf.ui.representations.utils.vizDatasetHelper
	 * @method getDataset
	 * @param oParameters defines parameters required for chart such as Dimension/Measures, tooltip, axis information.
	 * @description Prepares and returns the data set for viz charts
	 * */
	this.getDataset = function(oParameters) {
		this.parameter = oParameters;
		var aDimensions = [];
		var aMeasures = [];
		this.parameter.dimensions.forEach(function(dimension, index) {
			if (dimension.kind !== undefined) {// If kind(supportedKind) is defined for dimensions in parameter
				aDimensions[index] = {
					name : dimension.name,
					value : '{' + dimension.value + '}',
					axis : getAxis(dimension.kind)
				};
			} else {// If kind(supportedKind) is not defined for dimensions in parameter, first dimension is set to axis = 1 and rest to 2
				aDimensions[index] = {
					name : dimension.name,
					value : '{' + dimension.value + '}',
					axis : index === 0 ? 1 : 2
				};
			}
		});
		/*
		 * If kind(supportedKind) is defined for measures in parameter 
		 * Measures for axis type charts are : yAxis(axis :1) and sectorSize(axis: 1) 
		 * Measures for group type charts are : xAxis(axis : 1), yAxis(axis: 2), bubbleWidth(axis:3) and bubbleWidth(axis: 4)
		 */
		this.parameter.measures.forEach(function(measures, index) {
			var sAxisType;
			if (bIsGroupTypeChart) {
				sAxisType = sap.apf.ui.utils.CONSTANTS.axisTypes.GROUP;
			} else {
				sAxisType = sap.apf.ui.utils.CONSTANTS.axisTypes.AXIS;
			}
			if (measures.kind !== undefined) {
				aMeasures[index] = {
					name : measures.name,
					value : '{' + measures.value + '}'
				};
				var oSupportedKinds = sap.apf.core.constants.representationMetadata.kind;
				switch (measures.kind) {
					case oSupportedKinds.XAXIS:
						aMeasures[index][sAxisType] = 1;
						break;
					case oSupportedKinds.YAXIS:
						if (!bIsGroupTypeChart) {
							aMeasures[index][sAxisType] = 1;
						} else {
							aMeasures[index][sAxisType] = 2;
						}
						break;
					case oSupportedKinds.SECTORSIZE:
						aMeasures[index][sAxisType] = 1;
						break;
					case oSupportedKinds.BUBBLEWIDTH:
						aMeasures[index][sAxisType] = 3;
						break;
					case oSupportedKinds.BUBBLEHEIGHT:
						aMeasures[index][sAxisType] = 4;
						break;
					default :
						break;
				}
			} else {// If kind(supportedKind) is not defined for measures in parameter
				aMeasures[index] = {
					name : measures.name,
					value : '{' + measures.value + '}'
				};
				aMeasures[index][sAxisType] = index + 1;
			}
		});
		var flattendeDataSetObj = {
			dimensions : aDimensions,
			measures : aMeasures,
			data : {
				path : "/data"
			}
		};
		return flattendeDataSetObj;
	};
};
}; // end of sap/apf/ui/representations/utils/vizDatasetHelper.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.representations.utils.vizFrameDatasetHelper') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
/**
 * @class utils
 * @name utils
 * @memberOf sap.apf.ui.representations
 * @description holds utility functions used by viz representations
 */

jQuery.sap.declare("sap.apf.ui.representations.utils.vizFrameDatasetHelper");
/**
 * @class vizFrameDatasetHelper
 * @name vizFrameDatasetHelper
 * @memberOf sap.apf.ui.representations.utils
 * @description holds utility functions to determine the feedItem type id for dimensions and measures for each vizFrame chart
 * 
 */
sap.apf.ui.representations.utils.vizFrameDatasetHelper = function(bIsGroupTypeChart) {
	var getAxisFeedItemId = function(sKind) {
		var oSupportedTypes = sap.apf.core.constants.representationMetadata.kind;
		var aFeedItemTypes = sap.apf.core.constants.vizFrame.feedItemTypes;
		//TODO add more feedItem ids when the document is provided by vizFrame
		var axisfeedItemId;
		switch (sKind) {
			case oSupportedTypes.XAXIS:
				if (!bIsGroupTypeChart) {
					axisfeedItemId = sap.apf.core.constants.vizFrame.feedItemTypes.CATEGORYAXIS;
				} else {
					axisfeedItemId = sap.apf.core.constants.vizFrame.feedItemTypes.VALUEAXIS;
				}
				break;
			case oSupportedTypes.YAXIS:
				if (!bIsGroupTypeChart) {
					axisfeedItemId = sap.apf.core.constants.vizFrame.feedItemTypes.VALUEAXIS;
				} else {
					axisfeedItemId = sap.apf.core.constants.vizFrame.feedItemTypes.VALUEAXIS2;
				}
				break;
			case oSupportedTypes.SECTORCOLOR:
				axisfeedItemId = sap.apf.core.constants.vizFrame.feedItemTypes.COLOR;
				break;
			case oSupportedTypes.LEGEND:
				axisfeedItemId = sap.apf.core.constants.vizFrame.feedItemTypes.COLOR;
				break;
			case oSupportedTypes.REGIONCOLOR:
				axisfeedItemId = sap.apf.core.constants.vizFrame.feedItemTypes.COLOR;
				break;
			case oSupportedTypes.SECTORSIZE:
				axisfeedItemId = sap.apf.core.constants.vizFrame.feedItemTypes.SIZE;
				break;
			case oSupportedTypes.REGIONSHAPE:
				axisfeedItemId = sap.apf.core.constants.vizFrame.feedItemTypes.SHAPE;
				break;
			case oSupportedTypes.BUBBLEWIDTH:
				axisfeedItemId = sap.apf.core.constants.vizFrame.feedItemTypes.BUBBLEWIDTH;
				break;
			case oSupportedTypes.BUBBLEHEIGHT:
				axisfeedItemId = sap.apf.core.constants.vizFrame.feedItemTypes.BUBBLEHEIGHT;
				break;
			default :
				break;
		}
		return axisfeedItemId;
	};
	this.getDataset = function(oParameters) {
		this.parameter = oParameters;
		var aDimensions = [];
		var aMeasures = [];
		this.parameter.dimensions.forEach(function(dimension, index) {
			if (dimension.kind !== undefined) {
				aDimensions[index] = {
					name : dimension.name,
					value : '{' + dimension.value + '}',
					axisfeedItemId : getAxisFeedItemId(dimension.kind)
				};
			} else {
				aDimensions[index] = {
					name : dimension.name,
					value : '{' + dimension.value + '}',
					axisfeedItemId : dimension.axisfeedItemId
				};
			}
		});
		this.parameter.measures.forEach(function(measure, index) {
			if (measure.kind !== undefined) {
				aMeasures[index] = {
					name : measure.name,
					value : '{' + measure.value + '}',
					axisfeedItemId : getAxisFeedItemId(measure.kind)
				};
			} else {
				aMeasures[index] = {
					name : measure.name,
					value : '{' + measure.value + '}',
					axisfeedItemId : measure.axisfeedItemId
				};
			}
		});
		var flattendeDataSetObj = {
			dimensions : aDimensions,
			measures : aMeasures,
			data : {
				path : "/data"
			}
		};
		return flattendeDataSetObj;
	};
};
}; // end of sap/apf/ui/representations/utils/vizFrameDatasetHelper.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.utils.constants') ) {
/*!
* SAP APF Analysis Path Framework
* 
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
*/
jQuery.sap.declare("sap.apf.ui.utils.constants");
/**
* @class CONSTANTS
* @name CONSTANTS
* @memberOf sap.apf.ui.utils
* @description defines application constants for UI classes
*/
sap.apf.ui.utils.CONSTANTS = {
	step : {
		OPEN_OVERLAY_IMAGE_HEIGHT : 15,
		DROP_MARKER_HEIGHT : 1
	},
	representationTypes : {
		FORM_REPRESENTATION : "FormRepresentation",
		TABLE_REPRESENTATION : "TableRepresentation",
		COLUMN_CHART : "ColumnChart",
		LINE_CHART : "LineChart",
		PIE_CHART : "PieChart",
		GEO_MAP : "GeoMap",
		STACKED_COLUMN_CHART : "StackedColumnChart",
		SCATTERPLOT_CHART : "ScatterPlotChart",
		PERCENTAGE_STACKED_COLUMN_CHART : "PercentageStackedColumnChart",
		BUBBLE_CHART : "BubbleChart",
		BAR_CHART : "BarChart",
		STACKED_BAR_CHART : "StackedBarChart",
		PERCENTAGE_STACKED_BAR_CHART : "PercentageStackedBarChart"
	},
	vizChartTypes : {
		COLUMN : "Column",
		LINE : "Line",
		PIE : "Pie",
		STACKED_COLUMN : "StackedColumn",
		PERCENTAGE_STACKED_COLUMN : "StackedColumn100",
		SCATTERPLOT : "Scatter",
		BUBBLE : "Bubble"
	},
	vizFrameChartTypes : {
		COLUMN : "column",
		LINE : "line",
		PIE : "pie",
		STACKED_COLUMN : "stacked_column",
		PERCENTAGE_STACKED_COLUMN : "100_stacked_column",
		SCATTERPLOT : "scatter",
		BUBBLE : "bubble",
		BAR : "bar",
		STACKED_BAR : "stacked_bar",
		PERCENTAGE_STACKED_BAR : "100_stacked_bar"
	},
	axisTypes : {
		AXIS : "axis",
		GROUP : "group"
	},
	thumbnailDimensions : {
		HEIGHT : "75px",
		WIDTH : "180px",
		STEP_WIDTH : "202px",
		STEP_HEIGHT : "170px",
		STEP_MARGIN : "20px",
		SEPARATOR_HEIGHT : "25px",
		REMOVE_ICON_HEIGHT : "20px",
		TOTAL_STEP_HEIGHT : 215
	// Step height + margin + separator.
	},
	printChartDimensions : {
		WIDTH : "0.89",
		POTRAITWIDTH : "793.700787402",
		LANDSCAPEWIDTH : "1122.519685039"
	},
	analysisPathArea : {
		HEADERHEIGHT : 140
	},
	chartArea : {
		CHARTHEADERHEIGHT : 120
	},
	carousel : {
		SCROLLCONTAINER : 275,
		DNDBOX : 280
	},
	landingPage : "landingPage"
};

}; // end of sap/apf/ui/utils/constants.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.utils.facetFilterListConverter') ) {
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare('sap.apf.ui.utils.facetFilterListConverter');
/**
 * @class Facet filter list converter
 * @name sap.apf.ui.utils.FacetFilterListConverter
 * @description Converter for values to facet filter list data
 * @returns {sap.apf.ui.utils.FacetFilterListConverter}
 */
sap.apf.ui.utils.FacetFilterListConverter = function() {
	"use strict";
	/**
	 * @public
	 * @function
	 * @name sap.apf.ui.utils.FacetFilterListConverter#getFFListDataFromFilterValues
	 * @param {Array} Filter values 
	 * Example :
	 * [ {
			"StartDate" : "20000101",
			"formattedValue" : "1/1/2000"
		}, {
			"StartDate" : "20000201",
			"formattedValue" : "2/1/2000"
		} ]
	 * {String} Facet filter property name - Example: "StartDate"
	 * @description Gets filter values and converts the values in the form understandable by facet filter list control.
	 * @returns {Array} facet filter list data
	 * Example:
	 * [ {
			"key" : "20100101",
			"text" : "1/1/2010",
			"selected" : false
		}, {
			"key" : "20100201",
			"text" : "2/1/2010",
			"selected" : false
		} ]
	 * */
	this.getFFListDataFromFilterValues = function(aFilterValues, sPropertyName) {
		var aModifiedFilterValues = [];
		aFilterValues.forEach(function(oFilterValue) {
			var oFFListItemData = {};
			oFFListItemData.key = oFilterValue[sPropertyName];
			oFFListItemData.text = oFilterValue.formattedValue;
			oFFListItemData.selected = false;
			aModifiedFilterValues.push(oFFListItemData);
		});
		return aModifiedFilterValues;
	};
};
}; // end of sap/apf/ui/utils/facetFilterListConverter.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.utils.formatter') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
/**
 * @class utils
 * @name utils
 * @memberOf sap.apf.ui.utils
 * @description holds utility functions used by UI5ChartHelper and representations 
 */
jQuery.sap.declare("sap.apf.ui.utils.formatter");
/**
 * @class formatter
 * @name formatter
 * @memberOf sap.apf.ui.utils
 * @param oFormatterArgs - getEventCallback, getTextNotHtmlEncoded
 * @param {sap.apf.core.Metadata} metadata
 * @param {array} dataResponse
 * @description holds utility functions used by UI5ChartHelper and  representations 
 */
sap.apf.ui.utils.formatter = function(oFormatterArgs, metadata, dataResponse) {
	var self = this;
	//metadata is either the the sap.apf.core.entityTypeMetadata or only the particular metadata of the property(Currently in case of facet filters)
	this.metadata = metadata;
	this.dataResponse = dataResponse;
	/**
	 * @memberOf sap.apf.ui.utils.formatter
	 * @method getPropertyMetadata
	 * @returns the metadata of the property passed
	 */
	this.getPropertyMetadata = function(fieldName) {
		if (this.metadata && this.metadata.getPropertyMetadata) {
			return this.metadata.getPropertyMetadata(fieldName);
		}
		return this.metadata;
	};
	/**
	 * @memberOf sap.apf.ui.utils.formatter
	 * @method getFormattedValue
	 * @description formats the given value
	 * @returns formatted value according to the type
	 */
	this.getFormattedValue = function(fieldName, originalFieldValue) {
		var formattedFieldValue, yearMetadata, quarterMetadata, dateFromMetadata, yearInfoFromDate, weekMetadata, dateFormat;
		var oMetadata = this.getPropertyMetadata(fieldName);
		if (oMetadata.isCalendarYearMonth) { //calenderYearMonth
			if (originalFieldValue !== null) {
				formattedFieldValue = this.doYearMonthFormat(originalFieldValue);
			} else {
				formattedFieldValue = "";
			}
		} else if (oMetadata.dataType && oMetadata.dataType.type === "Edm.DateTime") { //dateTime
			if (originalFieldValue !== null) {
				dateFormat = new Date(parseInt(originalFieldValue.slice(6, originalFieldValue.length - 2), 10));
				dateFormat = dateFormat.toLocaleDateString();
				if (dateFormat === "Invalid Date") {
					formattedFieldValue = "-";
				} else {
					formattedFieldValue = dateFormat;
				}
			} else {
				formattedFieldValue = "-";
			}
		} else if (oMetadata.unit) { //unit for currency
			if (originalFieldValue !== null) {
				var currencyMetadata = self.getPropertyMetadata(oMetadata.unit);
				if (currencyMetadata.semantics === "currency-code") {
					var precision = this.dataResponse[0][oMetadata.scale];
					originalFieldValue = parseFloat(originalFieldValue).toFixed(precision).toString();
					var store = originalFieldValue.split(".");
					var amountValue = parseFloat(store[0]).toLocaleString();
					var sample = 0.1;
					sample = sample.toLocaleString();
					if (amountValue.split(sample.substring(1, 2)).length > 1) {
						amountValue = amountValue.split(sample.substring(1, 2))[0];
					}
					amountValue = amountValue.concat(sample.substring(1, 2), store[1]);
					formattedFieldValue = amountValue;
				} else {
					formattedFieldValue = originalFieldValue;
				}
			} else {
				formattedFieldValue = "-";
			}
		} else if (oMetadata.isCalendarDate) {
			if (originalFieldValue !== null) {
				yearMetadata = originalFieldValue.substr(0, 4);
				var monthMetadata = parseInt(originalFieldValue.substr(4, 2), 10) - 1;
				var dateMetadata = originalFieldValue.substr(6, 2);
				dateFormat = new Date(yearMetadata, monthMetadata, dateMetadata);
				dateFormat = dateFormat.toLocaleDateString();
				if (dateFormat === "Invalid Date") {
					formattedFieldValue = "-";
				} else {
					formattedFieldValue = dateFormat;
				}
			} else {
				formattedFieldValue = "-";
			}
		} else if (oMetadata.isCalendarYearQuarter) {
			if (originalFieldValue !== null) {
				yearMetadata = originalFieldValue.substr(0, 4);
				quarterMetadata = originalFieldValue.substr(4, 1);
				dateFromMetadata = new Date(yearMetadata);
				yearInfoFromDate = dateFromMetadata.getFullYear();
				var quarterInfo;
				quarterInfo = "Q" + quarterMetadata;
				var formattedYearQuarter = quarterInfo + " " + yearInfoFromDate;
				formattedFieldValue = formattedYearQuarter;
			} else {
				formattedFieldValue = "";
			}
		} else if (oMetadata.isCalendarYearWeek) {
			if (originalFieldValue !== null) {
				yearMetadata = originalFieldValue.substr(0, 4);
				weekMetadata = originalFieldValue.substr(4, 2);
				dateFromMetadata = new Date(yearMetadata);
				yearInfoFromDate = dateFromMetadata.getFullYear();
				var weekInfo;
				weekInfo = "CW" + weekMetadata;
				var formattedYearWeek = weekInfo + " " + yearInfoFromDate;
				formattedFieldValue = formattedYearWeek;
			} else {
				formattedFieldValue = "";
			}
		} else { //default value
			if (originalFieldValue === null) {
				formattedFieldValue = "null";
			} else {
				formattedFieldValue = originalFieldValue;
			}
		}
		// application formatter callback
		var metadataObject = jQuery.extend({}, this.getPropertyMetadata(fieldName));
		formattedFieldValue = this._applyCustomFormatting(metadataObject, fieldName, originalFieldValue, formattedFieldValue);
		return formattedFieldValue;
	};
	/**
	 * @memberOf sap.apf.ui.utils.formatter
	 * @method doYearMonthFormat
	 * @param fieldValue
	 * @description yearMonth formatting 
	 */
	this.doYearMonthFormat = function(fieldValue) {
		var jan = oFormatterArgs.getTextNotHtmlEncoded("month-1-shortName");
		var feb = oFormatterArgs.getTextNotHtmlEncoded("month-2-shortName");
		var mar = oFormatterArgs.getTextNotHtmlEncoded("month-3-shortName");
		var apr = oFormatterArgs.getTextNotHtmlEncoded("month-4-shortName");
		var may = oFormatterArgs.getTextNotHtmlEncoded("month-5-shortName");
		var jun = oFormatterArgs.getTextNotHtmlEncoded("month-6-shortName");
		var jul = oFormatterArgs.getTextNotHtmlEncoded("month-7-shortName");
		var aug = oFormatterArgs.getTextNotHtmlEncoded("month-8-shortName");
		var sep = oFormatterArgs.getTextNotHtmlEncoded("month-9-shortName");
		var oct = oFormatterArgs.getTextNotHtmlEncoded("month-10-shortName");
		var nov = oFormatterArgs.getTextNotHtmlEncoded("month-11-shortName");
		var dec = oFormatterArgs.getTextNotHtmlEncoded("month-12-shortName");
		var monthsArray = [ jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec ];
		var year = fieldValue.substr(0, 4);
		var month = monthsArray[fieldValue.substr(4, 6) - 1];
		return month + " " + year;
	};
	/**
	 * @memberOf sap.apf.ui.utils.formatter
	 * @method isAmountField
	 * @param fieldName
	 * @description checks if the field is amount field 
	 */
	this.isAmountField = function(fieldName) {
		var isAmntField = false;
		if (this.metadata && this.dataResponse) {
			var oMetadata = this.getPropertyMetadata(fieldName);
			if (oMetadata !== undefined && oMetadata.unit) {
				var currencyMetadata = this.getPropertyMetadata(oMetadata.unit);
				if (currencyMetadata !== undefined && currencyMetadata.semantics === "currency-code") {
					isAmntField = true;
				}
			}
		}
		return isAmntField;
	};
	/**
	 * @method getPrecision
	 * @param fieldName
	 * @description gets the precision for a given fieldName 
	 */
	this.getPrecision = function(fieldName) {
		var oMetadata = this.getPropertyMetadata(fieldName);
		if (oMetadata !== undefined && this.dataResponse !== undefined && this.dataResponse[0] !== undefined) {
			return this.dataResponse[0][oMetadata.scale];
		}
	};
	/**
	 * @method getFormatString
	 * @param measures- measures of chart
	 * @description returns the stringFormat 
	 */
	this.getFormatString = function(measure) {
		var zeroStr = "";
		var sFormatString;
		var fieldName = measure.fieldName;
		var isAmountField = this.isAmountField(fieldName);
		if (isAmountField === true) {
			//check for precision point
			var precision = this.getPrecision(fieldName);
			if (precision !== undefined) {
				for( var i = 0; i < precision; i++) {
					zeroStr = zeroStr + "0";
				}
				sFormatString = "#,#0" + "." + zeroStr;
			} else {
				sFormatString = "";
			}
		} else {
			sFormatString = "";
		}
		return sFormatString;
	};
	/**
	 * @method getFormattedValueForTextProperty
	 * @param {oTextToBeFormatted} - the texts which has to be concatenated 
	 *    oTextToBeFormatted ={
	 *                         text:textField,
	 *                        key:fieldName
	 *                        }
	 * @description returns the concatenated string (e.g. Customer Name(Customer Id) for a text field 
	 */
	this.getFormattedValueForTextProperty = function(fieldName, oTextToBeFormatted) {
		var sFormattedText;
		if (oTextToBeFormatted.key) {
			sFormattedText = oTextToBeFormatted.text + "(" + oTextToBeFormatted.key + ")";
		} else {
			sFormattedText = oTextToBeFormatted.text;
		}
		var metadataObject = jQuery.extend({}, this.getPropertyMetadata(fieldName));
		sFormattedText = this._applyCustomFormatting(metadataObject, fieldName, oTextToBeFormatted.text, sFormattedText);// application formatter callback
		return sFormattedText;
	};
	/**
	 * @private
	 * @method _applyCustomFormatting
	 * @description calls the application specific formatting if it is available
	 */
	this._applyCustomFormatting = function(metadataObject, fieldName, originalFieldValue, formattedFieldValue) {
		var callback = oFormatterArgs.getEventCallback(sap.apf.core.constants.eventTypes.format);
		if (typeof callback === "function") {
			var appFormattedFieldValue = callback.apply(oFormatterArgs, [ metadataObject, fieldName, originalFieldValue, formattedFieldValue ]);
			if (appFormattedFieldValue !== undefined) {
				formattedFieldValue = appFormattedFieldValue;
			}
			if (appFormattedFieldValue === null) {
				formattedFieldValue = "";
			}
		}
		return formattedFieldValue;
	};
	/**
	* @method destroy
	* @description Preparation of the instance for garbage collection 
	*/
	this.destroy = function() {
		self.metadata = null;
		self.dataResponse = null;
	};
};
}; // end of sap/apf/ui/utils/formatter.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.utils.helper') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.apf.ui.utils.helper');
sap.apf.ui.utils.Helper = function(oCoreApi) {
	"use strict";
	this.oCoreApi = oCoreApi;
	/**
	*@memberOf sap.apf.ui.utils.helper
	*@method getRepresentationSortInfo
	*@param {object} Representation
	*@description reads the orderBy field (array of values) from the parameters of representation.
	*                           
	*                            i.e "orderby": [{
	*                               property	:	OverdueDebitAmtInDisplayCrcy_E
	*                            ascending	:	false
	*                             }]
	*                             
	* Reads the label from dimensions/measures if the orderby property matches the consolidated list of dimension and measures of the representation
	* 
	* Otherwise reads the value from metaDataFacade for the orderby properties.
	* @return {string} comma separated value of all the orderBy properties as sort description
	*/
	this.getRepresentationSortInfo = function(oRepresentation) {
		var self = this;
		var aConsolidatedProperty = oRepresentation.parameter.dimensions.concat(oRepresentation.parameter.measures); //Consolidated array of dimension and measures
		var aSortField = oRepresentation.parameter.orderby; // orderby fields
		var aSortDescription = aSortField.map(function(oSortField) { //sort field descrptions for all the sort fields
			var sSortDescription;
			aConsolidatedProperty.forEach(function(oConsolidatedproperty) { //check if the property label exists in dimensions or measures
				if (oSortField.property === oConsolidatedproperty.fieldName && oConsolidatedproperty.fieldDesc && self.oCoreApi.getTextNotHtmlEncoded(oConsolidatedproperty.fieldDesc)) { //if label for property is available in dimension/measures
					sSortDescription = self.oCoreApi.getTextNotHtmlEncoded(oConsolidatedproperty.fieldDesc); //read sort description for properties from dimensions/measures
					return;
				}
			});
			if (!sSortDescription) { //read sort description for properties from metadata
				self.oCoreApi.getMetadataFacade().getProperty(oSortField.property, function(metadata) {
					if (metadata.label || metadata.name) { // metadata can have label or name
						if(metadata.label) {
							sSortDescription = metadata.label;
						} else if(metadata.name) {
							sSortDescription = metadata.name;
						} else {
							sSortDescription = "";
						}
					}
				});
			}
			return sSortDescription;
		});
		return aSortDescription.join(", "); //comma separated value of all the sort fields
	};
};
}; // end of sap/apf/ui/utils/helper.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.utils.print') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/* global  window*/
jQuery.sap.declare("sap.apf.ui.utils.print");

/** 
 *@class PrintHelper
 *@memberOf sap.apf.ui.utils
 *@description has functions to perform printing of Analysis Path
 *  
 */
sap.apf.ui.utils.PrintHelper = function(oInject) {
	"use strict";
	var oCoreApi = oInject.oCoreApi;
	var oUiApi = oInject.uiApi;
	var oFilterIdHandler = oInject.oFilterIdHandler;
	var nStepRenderCount, oChartSelectionPromise, nNoOfNonTableSteps;
	this.oPrintLayout = {};
	/**
	 *@method _increaseStepRenderCount increases the step render count as and when each step is rendered
	 **/
	function _increaseStepRenderCount() {
		nStepRenderCount++;
		if (nNoOfNonTableSteps === nStepRenderCount) {
			oChartSelectionPromise.resolve();
		}
	}
	/**
	 *@method _createDivForPrint removes the existing div apfPrintArea. Later creates the div apfPrintArea
	 **/
	function _createDivForPrint(oContext) {
		if (!jQuery.isEmptyObject(oContext.oPrintLayout)) {
			oContext.oPrintLayout.removeContent();
		}
		jQuery('#apfPrintArea').remove(); // removing the div which holds the printable content
		jQuery("body").append('<div id="apfPrintArea"></div>'); //div which holds the printable content
		oUiApi.createApplicationLayout(false).setBusy(true);//sets the Local Busy Indicator for the print
	}
	/**
	 *@method _findNoOfNonTableSteps used to find the non table steps in the path
	 *@param aAllSteps - array of steps in the path
	 */
	function _findNoOfNonTableSteps(aAllSteps) {
		var oSelectedRepresentation;
		nNoOfNonTableSteps = 0;
		nStepRenderCount = 0;
		aAllSteps.forEach(function(oStep) {
			oSelectedRepresentation = oStep.getSelectedRepresentation();
			oSelectedRepresentation = oSelectedRepresentation.bIsAlternateView ? oSelectedRepresentation.toggleInstance : oSelectedRepresentation;
			if (oSelectedRepresentation.type !== sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION) {
				nNoOfNonTableSteps++;
			}
		});
	}
	/**
	 *@method _getHeaderForFirstPage creates a header for the first page of print
	 *@returns header for first page of print
	 */
	function _getHeaderForFirstPage() {
		var date = new Date();
		var sAppName = oCoreApi.getApplicationConfigProperties().appName;
		var sAnalysisPathTitle = oUiApi.getAnalysisPath().oSavedPathName.getTitle();
		var headerForFirstPage = new sap.ui.core.HTML({
			id : 'idAPFHeaderForFirstPage',
			content : [ '<div class="subHeaderPrintWrapper"><p class="printHeaderTitle"> ' + oCoreApi.getTextHtmlEncoded(sAppName) + ' : ' + jQuery.sap.encodeHTML(sAnalysisPathTitle) + '</p>',
					'<p class="printHeaderDate"> ' + date.toTimeString() + ' </p></div><div class="clear"></div>' ].join(""),
			sanitizeContent : true
		});
		return headerForFirstPage;
	}
	/**
	 *@method _getPrintLayoutForFacetFiltersAndFooters creates a layout for facet filter and footers page
	 *@description Gets application specific filters and formats them for printing. Gets facet filter values for printing.
	 *@returns print layout for facet filters and footers
	 */
	function _getPrintLayoutForFacetFiltersAndFooters() {
		var i, j, nIndex, oFacetFilterLists, oAppSpecificFilter, mFilterName, mFilterValue, aFiltersForPrining, filterObj, oFormatter, oFacetFilter, aSelectedItems, oFacetAndFooterLayout;
		var aAppSpecificFilterExp = [], aAppSpecificFilters = [], sFilterValue = "", sFilterName = "", aSelectedFilters = [], filterValues = [], aAppSpecificFormattedFilters = [], aFacetFilters = [], oFilterValue = {};
		//First : Get application specific filter values
		var callback = oUiApi.getEventCallback(sap.apf.core.constants.eventTypes.printTriggered);
		var callbackContext = {
			getTextNotHtmlEncoded : oCoreApi.getTextNotHtmlEncoded
		};
		var aAllAppSpecificFilterIds = oFilterIdHandler.getAllInternalIds(); //get application specific filters
		//Get the filter expression for the application specific filters(footers)
		if (aAllAppSpecificFilterIds.length > 0) {
			for(i = 0; i < aAllAppSpecificFilterIds.length; i++) {
				oAppSpecificFilter = oFilterIdHandler.get(aAllAppSpecificFilterIds[i]).getExpressions();
				aAppSpecificFilterExp.push(oAppSpecificFilter[0]);
			}
		}
		//Returns formatted filter values from APF for application specific filters
		function getAppSpecificFormattedFilters() {
			function prepareFormattedFilterValues(oPropertyMetadata) {
				sFilterName = "";
				filterValues = [];
				oFormatter = new sap.apf.ui.utils.formatter({
					getEventCallback : oUiApi.getEventCallback.bind(oUiApi),
					getTextNotHtmlEncoded : oCoreApi.getTextNotHtmlEncoded
				}, oPropertyMetadata);
				sFilterName = oPropertyMetadata.label;
				filterValues.push(oFormatter.getFormattedValue(oPropertyMetadata.name, aAppSpecificFilterExp[i][j].value));
			}
			for(i = 0; i < aAppSpecificFilterExp.length; i++) {
				for(j = 0; j < aAppSpecificFilterExp[i].length; j++) {
					filterObj = aAppSpecificFilterExp[i][j];
					oCoreApi.getMetadataFacade().getProperty(aAppSpecificFilterExp[i][j].name, prepareFormattedFilterValues);
					filterObj["sName"] = sFilterName;
					filterObj["value"] = filterValues;
					aAppSpecificFilters.push(filterObj);
				}
			}
			return aAppSpecificFilters;
		}
		if (callback !== undefined) { //If application has a print functionality on its own use it otherwise get formatted filter values for application specific filters from APF
			aAppSpecificFormattedFilters = callback.apply(callbackContext, aAppSpecificFilterExp) || [];
			aAppSpecificFormattedFilters = (aAppSpecificFormattedFilters.length > 0) ? aAppSpecificFormattedFilters : getAppSpecificFormattedFilters();
		} else { //APF default formatting
			aAppSpecificFormattedFilters = getAppSpecificFormattedFilters();
		}
		//Second : Get all the configured facet filters from APF
		oFacetFilter = oUiApi.getFacetFilterForPrint();
		function getTextsFromSelectedItems(aSelectedItems) {
			aSelectedFilters = [];
			aSelectedItems.forEach(function(oItem) {
				aSelectedFilters.push(oItem.getText());
			});
		}
		if (oFacetFilter) {//If there is a facet filter
			oFacetFilterLists = oFacetFilter.getLists();
			for(nIndex = 0; nIndex < oFacetFilterLists.length; nIndex++) {
				aSelectedItems = [];
				oFilterValue = {};
				oFilterValue.sName = oFacetFilterLists[nIndex].getTitle();
				if (!oFacetFilterLists[nIndex].getSelectedItems().length) {
					aSelectedItems = oFacetFilterLists[nIndex].getItems();
				} else {
					aSelectedItems = oFacetFilterLists[nIndex].getSelectedItems();
				}
				getTextsFromSelectedItems(aSelectedItems);
				oFilterValue.value = aSelectedFilters;
				aFacetFilters.push(oFilterValue);
			}
		}
		//Later : Merge the APF filters and application specific filters for printing; Application specific filters if available are printed first
		aFiltersForPrining = aAppSpecificFormattedFilters.length > 0 ? aAppSpecificFormattedFilters.concat(aFacetFilters) : aFacetFilters;
		oFacetAndFooterLayout = new sap.ui.layout.VerticalLayout({
			id : 'idAPFFacetAndFooterLayout'
		});
		//Formatting the filter array
		for(i = 0; i < aFiltersForPrining.length; i++) {
			sFilterName = aFiltersForPrining[i].sName;
			for(j = 0; j < aFiltersForPrining[i].value.length; j++) {
				if (j !== aFiltersForPrining[i].value.length - 1) {
					sFilterValue += aFiltersForPrining[i].value[j] + ", ";
				} else {
					sFilterValue += aFiltersForPrining[i].value[j];
				}
			}
			mFilterName = new sap.m.Text({
				text : sFilterName
			}).addStyleClass("printFilterName");
			mFilterValue = new sap.m.Text({
				text : sFilterValue
			}).addStyleClass("printFilterValue");
			//Facet UI Layout
			oFacetAndFooterLayout.addContent(mFilterName);
			oFacetAndFooterLayout.addContent(mFilterValue);
			//Reset the filter value
			sFilterValue = "";
		}
		return oFacetAndFooterLayout;
	}
	/**
	 *@method _getHeaderForEachStep creates a header for each step page
	 *@returns header for step page
	 */
	function _getHeaderForEachStep(nIndex, nStepsLength) {
		var oMessageObject;
		var date = new Date();
		var sAppName = oCoreApi.getApplicationConfigProperties().appName;
		var sAnalysisPathTitle = oUiApi.getAnalysisPath().oSavedPathName.getTitle();
		if (!sAppName) {
			oMessageObject = oCoreApi.createMessageObject({
				code : "6003",
				aParameters : [ "sAppName" ]
			});
			oCoreApi.putMessage(oMessageObject);
		}
		var headerForEachStep = new sap.ui.core.HTML({
			id : 'idAPFHeaderForEachStep' + nIndex,
			content : [ '<div class="subHeaderPrintWrapper"><p class="printHeaderTitle"> ' + oCoreApi.getTextHtmlEncoded(sAppName) + ' : ' + jQuery.sap.encodeHTML(sAnalysisPathTitle) + '</p>',
					'<p class="printHeaderDate"> ' + date.toTimeString() + ' </p></div><div class="clear"></div>', '<div class="printChipName"><p>' + oCoreApi.getTextHtmlEncoded("print-step-number", [ nIndex, nStepsLength ]) + '</p></div>' ]
					.join(""),
			sanitizeContent : true
		});
		return headerForEachStep;
	}
	/**
	 *@method _getRepresentationForPrint
	 *@param oStep is used to get the step information
	 *@returns the representation for printing
	 */
	function _getRepresentationForPrint(oStep) {
		var data, metadata, oPrintContent, bIsLegendVisible = false, oRepresentation = {};
		var oStepTitle = oCoreApi.getTextNotHtmlEncoded(oStep.title);
		var oSelectedRepresentation = oStep.getSelectedRepresentation();
		var oStepRepresentation = oSelectedRepresentation.bIsAlternateView ? oSelectedRepresentation.toggleInstance : oSelectedRepresentation;
		//If alternate view(table representation)
		if (oSelectedRepresentation.bIsAlternateView) {
			data = oStep.getSelectedRepresentation().getData();
			metadata = oStep.getSelectedRepresentation().getMetaData();
			oStepRepresentation.setData(data, metadata);
		}
		if (oStepRepresentation.type === sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION) {
			oRepresentation = oStepRepresentation.getPrintContent(oStepTitle);
			oRepresentation.setWidth("1000px");
		} else {//If not a table representation
			oPrintContent = oStepRepresentation.getPrintContent(oStepTitle);
			oRepresentation = oPrintContent.oChartForPrinting;
			//If the chart is vizFrame make selections after rendering of chart and update the step render count
			if (oRepresentation.vizSelection) {
				oRepresentation.attachEventOnce("renderComplete", function() {
					oRepresentation.vizSelection(oPrintContent.aSelectionOnChart);
					_increaseStepRenderCount();
				});
			} else {//If the chart is Viz make selections after initialization of chart and update the step render count
				oRepresentation.attachInitialized(function() {
					oRepresentation.selection(oPrintContent.aSelectionOnChart);
					_increaseStepRenderCount();
				});
			}
		}
		//Show/Hide Legend for print content
		if (oStepRepresentation.bIsLegendVisible === undefined || oStepRepresentation.bIsLegendVisible === true) {
			bIsLegendVisible = true;
		}
		if (oRepresentation.setVizProperties) { //Check if it is Viz Frame Charts
			oRepresentation.setVizProperties({
				legend : {
					visible : bIsLegendVisible
				},
				sizeLegend : {
					visible : bIsLegendVisible
				}
			});
		} else {//fall back for viz charts
			if (oRepresentation.setLegend !== undefined) {
				oRepresentation.setLegend(new sap.viz.ui5.types.legend.Common({
					visible : bIsLegendVisible
				}));
			}
			if (oRepresentation.setSizeLegend !== undefined) {
				oRepresentation.setSizeLegend(new sap.viz.ui5.types.legend.Common({
					visible : bIsLegendVisible
				}));
			}
		}
		return oRepresentation;
	}
	/**
	 *@method _getPrintLayoutForEachStep defines layout used by each step when being printed
	 *@usage _getPrintLayoutForEachStep has to be used to get the layout for individual steps in analysis path.
	 *@param oStep is used to get the step information
	 *@param nIndex is index of the step being printed
	 *@param nStepsLength is the total number of steps in an Analysis Path
	 *@returns the printLayout for a step in an Analysis Path.
	 */
	function _getPrintLayoutForEachStep(oStep, nIndex, nStepsLength) {
		var oStepLayout;
		var oChartLayout = new sap.ui.layout.VerticalLayout({
			id : 'idAPFChartLayout' + nIndex
		});
		oChartLayout.addContent(_getRepresentationForPrint(oStep));
		oStepLayout = new sap.ui.layout.VerticalLayout({
			id : 'idAPFStepLayout' + nIndex,
			content : [ _getHeaderForEachStep(nIndex, nStepsLength), oChartLayout ]
		}).addStyleClass("representationContent"); // @comment : apfoPrintLayout class not provided in css
		return oStepLayout;
	}
	/**
	 *@method Print used to print all the steps in Analysis Path.
	 *@usage PrintHelper().doPrint has to be used for printing Analysis Path
	 */
	this.doPrint = function() {
		var i, j, nIndex, oChart, colCount, table, stepNo, oSelectedRepresentation, oPrintFirstPageLayout;
		var domContent = "", pTimer = 2000, self = this;
		var aAllSteps = oCoreApi.getSteps();
		this.oPrintLayout = new sap.ui.layout.VerticalLayout({
			id : "idAPFPrintLayout"
		});
		_createDivForPrint(this);
		oChartSelectionPromise = new jQuery.Deferred();
		_findNoOfNonTableSteps(aAllSteps);
		if (nNoOfNonTableSteps === 0) {
			oChartSelectionPromise.resolve();
		}
		//Facet Filter and footers are printed in the initial page along with the header
		oPrintFirstPageLayout = new sap.ui.layout.VerticalLayout({
			id : 'idAPFPrintFirstPageLayout',
			content : [ _getHeaderForFirstPage(), _getPrintLayoutForFacetFiltersAndFooters() ]
		}).addStyleClass("representationContent");
		this.oPrintLayout.addContent(oPrintFirstPageLayout);
		//Consecutive pages with one step each is printed
		for(j = 0; j < aAllSteps.length; j++) {
			nIndex = parseInt(j, 10) + 1;
			this.oPrintLayout.addContent(_getPrintLayoutForEachStep(aAllSteps[j], nIndex, aAllSteps.length));
		}
		this.oPrintLayout.placeAt("apfPrintArea");
		if (jQuery(".v-geo-container").length) {//set the timer if geomap exists
			pTimer = 4000;
		}
		window.setTimeout(function() {
			oUiApi.createApplicationLayout(false).setBusy(false); //Removes the Local Busy Indicator after the print
		}, pTimer - 150);
		window.setTimeout(function() { //Set Timeout to load the content on to dom
			jQuery("#" + self.oPrintLayout.sId + " > div").after("<div class='page-break'> </div>");
			domContent = self.oPrintLayout.getDomRef(); // Get the DOM Reference
			table = jQuery('#apfPrintArea .sapUiTable');
			if (table.length) {
				colCount = jQuery('#apfPrintArea .printTable .sapMListTblHeader .sapMListTblCell').length;
				if (colCount > 11) {
					jQuery("#setPrintMode").remove();
					jQuery("<style id='setPrintMode' > @media print and (min-resolution: 300dpi) { @page {size : landscape;}}</style>").appendTo("head");
				} else {
					jQuery("#setPrintMode").remove();
					jQuery("<style id='setPrintMode'>@media print and (min-resolution: 300dpi) { @page {size : portrait;}}</style>").appendTo("head");
				}
			}
			jQuery("#apfPrintArea").empty(); //Clear the apfPrintArea
			jQuery("#sap-ui-static > div").hide(); // Hide popup
			jQuery("#apfPrintArea").append(jQuery(domContent).html()); //Push it to apfPrintArea
			for(i = 0; i < jQuery("#apfPrintArea").siblings().length; i++) {
				//TODO alternate way of hiding the content and printing only the representations?????     
				jQuery("#apfPrintArea").siblings()[i].hidden = true; // hiding the content apart from apfPrintArea div
			}
			//Wait until all the have been rendered with selections and then print
			oChartSelectionPromise.then(function() {
				window.print(); //print the content
			});
			//Workaround to get the width of the column cell
			window.setTimeout(function() {
				for(i = 0; i < jQuery("#apfPrintArea").siblings().length; i++) {
					jQuery("#apfPrintArea").siblings()[i].hidden = false;
				}
				for(stepNo = 0; stepNo < aAllSteps.length; stepNo++) {
					oSelectedRepresentation = aAllSteps[stepNo].getSelectedRepresentation();
					oSelectedRepresentation = oSelectedRepresentation.bIsAlternateView ? oSelectedRepresentation.toggleInstance : oSelectedRepresentation;
					//Check if the representation is not a table representation; if not destroy the chart instance
					if (oSelectedRepresentation.type !== sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION) {
						//Access layout content to retrieve the chart; Destroy the chart to prevent memory leaks
						oChart = self.oPrintLayout.getContent()[stepNo + 1].getContent()[1].getContent()[0];
						oChart.destroy();
						oChart = null;
					}
				}
				self.oPrintLayout.destroy(); //Destroy the reference & remove from dom
				self.oPrintLayout = null;
			}, 10);
		}, pTimer);
	};
};
}; // end of sap/apf/ui/utils/print.js
if ( !jQuery.sap.isDeclared('sap.apf.utils.filterIdHandler') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare('sap.apf.utils.filterIdHandler');
/**
 * @private
 * @class Filter ID handler
 * @description Provides methods that allow to manage application specific
 *              filter restrictions for each path update.
 * @param {Object}
 *            inject Object containing functions to be used by filter id handler.
 * @param {sap.apf.core.MessageHandler}
 *            msgHandler Message handler instance.
 * @name sap.apf.utils.FilterIdHandler
 * @returns {sap.apf.utils.FilterIdHandler}
 */
(function() {
    'use strict';
    sap.apf.utils.FilterIdHandler = function(inject) {
        var msgHandler = inject.instance.messageHandler;
        var uniqueConsumerId = 1;
        var internallyGeneratedIds = [];
        var filterIdToProperty = {};
        /**
         * @private
         * @function
         * @name sap.apf.utils.FilterIdHandler#add
         * @description Adds an application specfic filter ID and maps it to the property used in the filter.
         *              Creates a unique fragment and a corresponding identifier.
         *              Subsequent changes need to be done by the update method
         *              providing the identifier.
         * @param {sap.apf.utils.Filter}
         *            filter filter Requires a filter instance
         * @returns {number} Unique numeric ID to be provided for later updates
         *          of the same fragment. Consecutive numbers for the different
         *          unique IDs are not guaranteed.
         */
        this.add = function(filter) {
            filterIdToProperty[uniqueConsumerId] = getPropertyNameOfFirstFilterTerm(filter);
            internallyGeneratedIds.push(uniqueConsumerId);
            inject.functions.setRestrictionByProperty(filter);
            return uniqueConsumerId++;
        };

        /**
         * @private
         * @function
         * @name sap.apf.utils.FilterIdHandler#update
         * @description Updates a context fragment for the given identifier by
         *              fully replacing the existing one.
         * @param {id}
         *            id Either requires numeric identifier of the context
         *            fragment that was returned by add method or requires an
         *            external identifier of type string that has to be
         *            determined by the consumer. When using identifiers of type
         *            string the add method must not be used. Update is
         *            sufficient. It either overwrites an existing context
         *            fragment for the identifier or creates a new one.
         * @param {sap.apf.utils.Filter}
         *            filter Requires a filter instance
         */
        this.update = function(id, filter) {
            if (id && typeof id == 'number') {
                msgHandler.check((id > 0 && id < uniqueConsumerId), 'Passed unknown numeric identifier during update of path context handler');
                if (!(id > 0 && id < uniqueConsumerId)) {
                    return;
                }
            } else if (!id || typeof id != 'string') {
                msgHandler.check(false, 'Passed false identifier during update of path context handler');
                return;
            }
            
            inject.functions.setRestrictionByProperty(filter);
            filterIdToProperty[id] = getPropertyNameOfFirstFilterTerm(filter);
        };

        /**
         * @private
         * @function
         * @name sap.apf.utils.FilterIdHandler#get
         * @description Returns a context fragment for the given identifier
         * @param {number|string}
         *            id Requires identifier of the context fragment. The id was
         *            returned by the add method.
         * @returns {sap.apf.utils.Filter} Context assigned to identifier
         */
        this.get = function(id) {
            switch (typeof id) {
	            case 'number':
	                msgHandler.check((id > 0 && id < uniqueConsumerId), 'Passed unknown numeric identifier during get from path context handler');
	                break;
	            case 'string':
	                msgHandler.check(filterIdToProperty[id], 'Passed unknown string identifier during get from path context handler');
	                break;
            }
            return inject.functions.getRestrictionByProperty(filterIdToProperty[id]);
        };

        /**
         * @private
         * @function
         * @name sap.apf.utils.FilterIdHandler#getAllInternalIds
         * @description Returns alll internally generated IDs
         * @returns {Array} List of internally generated IDs
         */
        this.getAllInternalIds = function(id) {
            return jQuery.sap.extend(true, [], internallyGeneratedIds);
        };
        /**
         * @private
         * @function
         * @name sap.apf.utils.FilterIdHandler#serialize
         * @description Serializes the content of the filterIdHandler.
         * @returns {object} Serialized data as deep JS object
         */
        this.serialize = function() {
        	return jQuery.extend(true, {}, filterIdToProperty);
        };

        /**
         * @private
         * @function
         * @name sap.apf.utils.FilterIdHandler#deserialize
         * @description Re-initializes filter ID handler from
         *              serialized data.
         * @param deserializableData
         *            Serialized data used to re-initialize filter ID handler
         * @returns {object} Re-initialize instance of
         *          sap.apf.utils.filterIdHandler
         */
        this.deserialize = function(deserializableData) {
        	uniqueConsumerId = 1;
        	var property;
        	for(property in deserializableData){
        		if (typeof ifPossibleConvertToNumber(property) === 'number'){
        			uniqueConsumerId++;
        		}
        	}
        	filterIdToProperty = jQuery.extend(true, {}, deserializableData);
        };
        
        function getPropertyNameOfFirstFilterTerm(filter){
        	return filter.getInternalFilter().getProperties()[0];
        }
        function ifPossibleConvertToNumber(property) {
            if(isNaN(Number(property))) {
                return property;
            }
            return Number(property);
        }
    };
}());
}; // end of sap/apf/utils/filterIdHandler.js
if ( !jQuery.sap.isDeclared('sap.apf.utils.hashtable') ) {
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
/*global sap, jQuery*/


jQuery.sap.declare('sap.apf.utils.hashtable');

(function () {
    'use strict';
    /**
     * @name sap.apf.utils.Hashtable
     * @class hash table
     * @description Stores and returns objects under unique key. Keys are provided by the caller, not generated.
     * @param {sap.apf.core.MessageHandler} oMessageHandler - A handler for error messages.
     */
    sap.apf.utils.Hashtable = function (oMessageHandler) {
        var nNumberOfItems = 0;
        var oItemHolder = {};
        var orderList = []; // ordered by arrival (create)

        /**
         * @description type information
         */
        this.type = "hashTable";

        /**
         * @description Add or update an object to the hash table with key and value.
         * @param {string} key - Unique key.
         *      WHEN the key is new to the hashtable THEN a new entry is created and undefined returned.
         *      Otherwise WHEN the key already exists THEN the associated value is updated and the previous value returned.
         *      WHEN the key equals to undefined or null THEN an error message is put and undefined returned.
         * @param {*} value - Item, can be anything like javascript object, string, function or number
         * @returns {*|undefined} Previous object or undefined.
         */
        this.setItem = function (key, value) {
            var oPreviousValue;
            oMessageHandler.check((key !== undefined && key !== null), "sap.apf.utils.HashTable.setItem: key undefined");
            oMessageHandler.check((value !== undefined && value !== null), "sap.apf.utils.HashTable.setItem: value undefined");
            if (this.hasItem(key)) {
                oPreviousValue = oItemHolder[key];
            } else {
                nNumberOfItems++;
                orderList.push(key);
            }
            oItemHolder[key] = value;
            return oPreviousValue;
        };

        /**
         * @descriptions Returns the number of items in the hash table
         * @returns {number} Number of items in hash table
         */
        this.getNumberOfItems = function () {
            return nNumberOfItems;
        };

        /**
         * @description Get the value by the key.
         * @param {string} key
         * @returns {*|undefined} Hashed item or undefined
         */
        this.getItem = function (key) {
            oMessageHandler.check((key !== undefined && key !== null), "sap.apf.utils.HashTable.getItem key undefined");
            return this.hasItem(key) ? oItemHolder[key] : undefined;
        };

        /**
         * @description Tests whether an item with key exists in the hash table.
         * @param {*} key - WHEN undefined or null THEN put error message.
         * @returns {boolean} True if key exists, false otherwise.
         */
        this.hasItem = function (key) {
            oMessageHandler.check((key !== undefined && key !== null), "sap.apf.utils.HashTable.hasItem key undefined");
            return oItemHolder.hasOwnProperty(key);
        };

        /**
         * @description Removes a key and its associated item from the hash table.
         * @param {*} key - WHEN undefined or null THEN put error message.
         * @returns {*|undefined} Removed item or undefined when ke was not existing.
         */
        this.removeItem = function (key) {
            oMessageHandler.check((key !== undefined && key !== null), "sap.apf.utils.HashTable.removeItem key undefined");
            var oItemRemoved;
            if (this.hasItem(key)) {
                oItemRemoved = oItemHolder[key];
                nNumberOfItems--;
                orderList.splice(orderList.indexOf(key), 1);
                delete oItemHolder[key];
                return oItemRemoved;
            }
            return undefined;
        };

        /**
         * @description Returns all keys of the hash table.
         * @returns {object[]} Array with keys.
         */
        this.getKeys = function () {
            var aKeys = [];
            var k;
            //noinspection JSLint
            for (k in oItemHolder) {
                //noinspection JSUnfilteredForInLoop
                if (this.hasItem(k)) {
                    //noinspection JSUnfilteredForInLoop
                    aKeys.push(k);
                }
            }
            return aKeys;
        };

        /**
         * @description Applies a function on each item in the hash table.
         * @param {function} fn - A function to be applied with k and item as parameters.
         * @param {string} fn.key - The key.
         * @param {*} fn.item - The item associated to that key.
         */
        this.each = function (fn) {
            var k;
            //noinspection JSLint
            for (k in oItemHolder) {
                //noinspection JSUnfilteredForInLoop
                if (this.hasItem(k)) {
                    //noinspection JSUnfilteredForInLoop
                    fn(k, oItemHolder[k]);
                }
            }
        };

        /**
         * @description Applies a function on each item in the hash table.
         *      It applies the function corresponding to the associated ordering of all items in the hash table.
         *      The ordering is determined by the order of creation by setItem() and by methods that change the ordering.
         * @param {Function} fn
         * @param {string} fn.key - The key.
         * @param {*} fn.item - The item associated to that key.
         */
        this.forEachOrdered = function (fn) {
            var that = this;
            orderList.forEach(function (key) {
                if (!that.hasItem(key)) {
                    oMessageHandler.check(false, "sap.apf.utils.HashTable.forEachOrdered: key not contained");
                } else {
                    fn(key, oItemHolder[key]);
                }
            });
        };

        /**
         * @description Return an ordered array of keys. The order is determined by the order of creation and order changing methods.
         * @returns {String[]} - An array of keys.
         */
        this.getKeysOrdered = function() {
            var list = [];
            this.forEachOrdered(function(key) {
               list.push(key);
            });
            return list;
        };

        /**
         * Move the item with key movedKey up or down in the order by distance. If distance is negative, then move it up distance places
         * in the order. If distance is positive, then move it down by distance in the order. The maximum move is to the array boundaries!
         * @param {object} movedKey key to move
         * @param {number} distance
         * @returns {number|null} when movedKey is not contained then return null. Otherwise the position, where it has been moved to.
         * 
         */
        this.moveUpOrDown = function(movedKey, distance) {
        	   oMessageHandler.check((movedKey !== undefined && movedKey !== null), "sap.apf.utils.HashTable.moveItemUpOrDown movedKey undefined");
        	   var index = orderList.indexOf(movedKey);
        	   
        	   var newPosition = index + distance;
        	   
        	   if (index < 0) {
        		   return null;
        	   }
        	   if (distance < 0) {
        		   orderList.splice( index, 1); //remove
        		   
        		   if (newPosition < 0) {
        			   orderList.splice(0, 0, movedKey); 
        			   return 0;
        		   } else {
        			   orderList.splice(index + distance, 0, movedKey); 
        			   return index + distance;
        		   }		   
        	   } else if (distance === 0) {
        		   return index;
        	   } else if (distance > 0) {
        		   orderList.splice( index, 1); //remove
        		   if (newPosition >=  orderList.length) {
        			   orderList.splice(orderList.length, 0, movedKey); 
        			   return orderList.length;
        		   } else {
        			   orderList.splice(newPosition, 0, movedKey);
        			   return newPosition;
        		   }
        	   }
        };
        /**
         * Change the ordering by moving one key in the ordering before another key.
         * @param beforeKey
         * @param movedKey
         * @returns {number|null} WHEN either key is not contained or undefined THEN return null.
         *      Otherwise return the index of the index position of moveKey, after the move.
         */
        this.moveBefore = function (beforeKey, movedKey) {
            if ( orderList.indexOf(beforeKey) < 0 || orderList.indexOf(movedKey) < 0) {
                return null;
            }
            if ( beforeKey === movedKey ) {
                return orderList.indexOf(movedKey);
            }
            orderList.splice( orderList.indexOf(movedKey), 1); // remove
            orderList.splice(orderList.indexOf(beforeKey), 0, movedKey); // insert
            return orderList.indexOf(movedKey);
        };

        /**
         * Change the ordering by moving one key in the ordering to the end.
         * @param beforeKey
         * @returns {number|null} WHEN the key is not contained or undefined THEN return null.
         *      Otherwise return the index of the index position of moveKey, after the move.
         */
        this.moveToEnd = function (movedKey) {
            if ( orderList.indexOf(movedKey) < 0 ) {
                return null;
            }
            orderList.splice( orderList.indexOf(movedKey), 1); // remove
            orderList.push(movedKey); // insert
            return orderList.indexOf(movedKey);
        };

        /**
         * @description Deletes all key/value pairs of the hash table.
         */
        this.reset = function () {
            oItemHolder = {};
            orderList = [];
            nNumberOfItems = 0;
        };
    };
}());

}; // end of sap/apf/utils/hashtable.js
if ( !jQuery.sap.isDeclared('sap.apf.utils.navigationHandler') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/*global sap, jQuery, window*/

(function() {
	'use strict';

	jQuery.sap.declare("sap.apf.utils.navigationHandler");
	jQuery.sap.require('sap.ui.core.routing.HashChanger'); // unlisted dependency retained
 //FIXME Necessary due to lazy loading bug in UI5 library.js in 1.28.0. Can be deleted after 1.28.1 fix is tested

	/**
	 * @class This class manages the navigation to a target and the navigation from another target into this class;
	 * @param {Object} oInject Injection of required APF objects
	 * @param {Object} oInject.instance Injected instances
	 * @param {sap.apf.core.MessageHandler} oInject.instances.messageHandler
	 * @param {sap.apf.Component} oInject.instances.component
	 * @param {Object} oInject.functions Injected functions
	 * @param {Function} oInject.functions.getCumulativeFilterUpToActiveStep 
	 * @param {Function} oInject.functions.getNavigationTargets
	 * @param {Function} oInject.functions.getActiveStep 
	 * @param {Function} oInject.functions.serializePath 
	 * @param {Function} oInject.functions.serializeFilterIds 
	 * @param {Function} oInject.functions.deserializePath 
	 * @param {Function} oInject.functions.deserializeFilterIds 
	 * @param {Function} oInject.functions.createRequest 
	 * @param {Function} oInject.functions.getXappStateId 
	 */
	sap.apf.utils.NavigationHandler = function(oInject) {
		var configuredNavigationTargets;
		var enrichedNavigationTargets;
		var messageHandler = oInject.instances.messageHandler;

		/**
		 * Returns all possible navigation targets with text (from intent)
		 * @returns Promise with [object] Object containing properties global and stepSpecific. Each containing an array of navigation targets with properties id, semanticObject, action and text. The id is
		 * used in the navigateToApp function.
		 * Derivation of step specific navigation targets implicitly considers only navigation targets that are assigned to the currently active step.
		 * If there is no active step set or the active step has no navigation targets assigned in its configuration an empty array will be assigned to property stepSpecific of the result object. 
		 */
		this.getNavigationTargets = function() {
			var deferred;
			var navigationService = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService("CrossApplicationNavigation");
			var semanticObjects = [];

			if (enrichedNavigationTargets) {
				deferred = jQuery.Deferred();
				deferred.resolve(convertToResultObject(enrichedNavigationTargets));
				return deferred.promise();
			}

			if (!configuredNavigationTargets) {
				initNavigationTargets();
			}

			configuredNavigationTargets.forEach(function(navTarget) {
				if (jQuery.inArray(navTarget.semanticObject, semanticObjects) === -1) {
					semanticObjects.push(navTarget.semanticObject);
				}
			});

			enrichedNavigationTargets = jQuery.extend(true, [], configuredNavigationTargets);
			enrichedNavigationTargets.forEach(function(navTarget) {
				navTarget.text = "";
			});

			deferred = jQuery.Deferred();
			collectIntentTexts(0).done(function() {
				deferred.resolve(convertToResultObject(enrichedNavigationTargets));
			}).fail(function() {
				deferred.resolve(convertToResultObject(enrichedNavigationTargets));
			});
			return deferred.promise();

			function addText(semanticObject, action, text) {
				enrichedNavigationTargets.forEach(function(navTarget) {
					if (semanticObject === navTarget.semanticObject && action === navTarget.action) {
						navTarget.text = text;
					}
				});
			}

			function collectIntentTexts(semanticObjectCounter) {
				var deferred = jQuery.Deferred();

				var finalNavTargets = [];
				if (semanticObjectCounter === semanticObjects.length) {
					deferred = jQuery.Deferred();
					enrichedNavigationTargets.forEach(function(navTargetWithText) {
						if (navTargetWithText.text !== "") {
							finalNavTargets.push(navTargetWithText);
						}
					});
					enrichedNavigationTargets = finalNavTargets;
					deferred.resolve(enrichedNavigationTargets);
					return deferred.promise();
				}
				var semanticObject = semanticObjects[semanticObjectCounter];

				navigationService.getSemanticObjectLinks(semanticObject, undefined, false, oInject.instances.component, undefined).done(function(aIntents) {
					aIntents.forEach(function(intentDefinition) {
						var actionWithParameters = intentDefinition.intent.split("-");
						var action = actionWithParameters[1].split("?");
						action = action[0].split("~");
						addText(semanticObject, action[0], intentDefinition.text);

					});
					collectIntentTexts(semanticObjectCounter + 1).done(function() {
						deferred.resolve(enrichedNavigationTargets);
					});
				}).fail(function() {
					return collectIntentTexts(semanticObjectCounter + 1);
				});

				return deferred.promise();
			}
		};
		/**
		 * receives an id of a navigation target and starts the navigation
		 * @param {string} navigationId navigation target id
		 * @returns undefined
		 */
		this.navigateToApp = function(navigationId) {

			if (!configuredNavigationTargets) {
				initNavigationTargets();
			}
			var oNavigationTarget = getNavigationTarget(navigationId);
			if (!oNavigationTarget) {
				return;
			}

			var hashChanger = sap.ui.core.routing.HashChanger && sap.ui.core.routing.HashChanger.getInstance();

			oInject.functions.getCumulativeFilterUpToActiveStep().done(function(oCumulativeFilter){
				if (!oNavigationTarget.filterMapping || !oNavigationTarget.filterMapping.requestForMappedFilter) {
					callbackForFilterMapping(null, null);
				} else {
					var oMappingRequest = oInject.functions.createRequest(oNavigationTarget.filterMapping.requestForMappedFilter);
					sap.apf.utils.executeFilterMapping(oCumulativeFilter, oMappingRequest, oNavigationTarget.filterMapping.target, callbackForFilterMapping, messageHandler);
				}
				
				function callbackForFilterMapping(oFilterFromFilterMapping, oMessageObject) {
					var appState;
					if (oMessageObject) {
						return;
					}
					
					if (oFilterFromFilterMapping) {
						oCumulativeFilter = oCumulativeFilter.addAnd(oFilterFromFilterMapping);
					}
					
					var oCrossAppNavigator = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService("CrossApplicationNavigation");
					
					if (oCrossAppNavigator) {
						
						var serializableState = {
								sapApfState : oInject.functions.serializePath()
						};
						
						oInject.instances.startFilterHandler.serialize().done(function(serializedStartFilterHandler){ 
							serializableState.sapApfState.filterIdHandler = oInject.functions.serializeFilterIds();
							serializableState.sapApfState.startFilterHandler = serializedStartFilterHandler;
							serializableState.sapApfCumulativeFilter = oCumulativeFilter.mapToSapUI5FilterExpression();
							
							appState = oCrossAppNavigator.createEmptyAppState(oInject.instances.component);
							appState.setData(serializableState);
							
							appState.save();
							if (hashChanger) {
								hashChanger.replaceHash("sap-iapp-state=" + appState.getKey());
							}
							
							oCrossAppNavigator.toExternal({
								target : {
									semanticObject : oNavigationTarget.semanticObject,
									action : oNavigationTarget.action
								},
								appStateKey : appState.getKey()
							});
						});
					}
				}
			});
		};

		this.checkMode = function() {
			var deferred = jQuery.Deferred();

			var hashChanger = sap.ui.core.routing.HashChanger && sap.ui.core.routing.HashChanger.getInstance && sap.ui.core.routing.HashChanger.getInstance();
			var iappStateKeyMatcher = /(?:sap-iapp-state=)([^&=]+)/;
			var innerAppStateKey, crossAppStateKey, iappMatch, containerData;

			if (hashChanger) {
				iappMatch = iappStateKeyMatcher.exec(hashChanger.getHash());
				if (iappMatch) {
					innerAppStateKey = iappMatch[1];
				}
			}
			
			crossAppStateKey = oInject.functions.getXappStateId();

			if (innerAppStateKey) {
				sap.ushell.Container.getService("CrossApplicationNavigation").getAppState(oInject.instances.component, innerAppStateKey).done(function(appContainer) {
					containerData = appContainer.getData();
					if (containerData.sapApfState) {
						oInject.functions.deserializeFilterIds(containerData.sapApfState.filterIdHandler);
						oInject.functions.deserializePath(containerData.sapApfState);
						
						oInject.instances.startFilterHandler.getStartFilters().done(function(){
							oInject.instances.startFilterHandler.deserialize(containerData.sapApfState.startFilterHandler);
							deferred.resolve({
								navigationMode : "backward"
							});
						});
					}
				});
			} else if (crossAppStateKey) {
				sap.ushell.Container.getService("CrossApplicationNavigation").getAppState(oInject.instances.component, crossAppStateKey).done(function(appContainer) {
					containerData = appContainer.getData();
					if (containerData && containerData.sapApfCumulativeFilter) {
						deferred.resolve({
							navigationMode : "forward",
							sapApfCumulativeFilter : containerData.sapApfCumulativeFilter
						});
					} else {
						deferred.resolve({
							navigationMode : "forward"
						});
					}
				});
			} else {
				deferred.resolve({
					navigationMode : "forward"
				});
			}
        	
			//removes sap-iapp-state from URL hash
        	if(hashChanger) {
			    hashChanger.replaceHash("");
			}
        	
			return deferred.promise();
		};
		function initNavigationTargets() {
			configuredNavigationTargets = oInject.functions.getNavigationTargets();
		}
		function getNavigationTarget(navigationId) {
			for(var i = 0, len = configuredNavigationTargets.length; i < len; i++) {
				if (configuredNavigationTargets[i].id === navigationId) {
					return configuredNavigationTargets[i];
				}
			}
		}
		function convertToResultObject(targets) {
			var copyOfTargets = jQuery.extend(true, [], targets);
			var resultObject = {
				global : [],
				stepSpecific : []
			};
			copyOfTargets.forEach(function(target) {
				if (target.isStepSpecific && isAssignedToActiveStep(target.id)) {
					delete target.isStepSpecific;
					resultObject.stepSpecific.push(target);
				} else if (!target.isStepSpecific) {
					delete target.isStepSpecific;
					resultObject.global.push(target);
				}
			});
			return resultObject;

			function isAssignedToActiveStep(id) {
				var result = false;
				var assignedNavigationTargets;
				var activeStep = oInject.functions.getActiveStep();

				if (activeStep && activeStep.getAssignedNavigationTargets) {
					assignedNavigationTargets = activeStep.getAssignedNavigationTargets();
					if (assignedNavigationTargets && jQuery.isArray(assignedNavigationTargets)) {
						assignedNavigationTargets.forEach(function(assignedNavigationTarget) {
							if (id === assignedNavigationTarget.id) {
								result = true;
							}
						});
					}
				}
				return result;
			}
		}
	};
}());

}; // end of sap/apf/utils/navigationHandler.js
if ( !jQuery.sap.isDeclared('sap.apf.utils.parseTextPropertyFile') ) {
jQuery.sap.declare("sap.apf.utils.parseTextPropertyFile");
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained



(function() {
	'use strict';

	/**
	 * @private
	 * @function
	 * @description parses a text property file and returns the text elements and the application id
	 *  plus messages
	 *  @param {string} textFileString property file as string
	 *  @param {object} inject injected instances 
	 *  @param {sap.apf.core.MessageHandler} inject.instance.messageHandler injected messageHandler 
	 * @returns {object} result with properties Application, TextElements, Messages
	 */
	sap.apf.utils.parseTextPropertyFile = function(textFileString, inject) {

		function complain(messageNumber, lineNumber) {
			var message = messageHandler.createMessageObject({
				code : messageNumber,
				aParameters : [ lineNumber ]
			});
			
			parseResult.Messages.push(message);
		}
		function complainWrongFormatApplicationId(lineNumber) {
			complain(11013, lineNumber);
		}

		function complainMissingTextEntry(lineNumber) {
			complain(11011, lineNumber);
		}

		function isValidGuidFormatForTextElement(textElement, lineNumber) {
			var isValid = sap.apf.utils.isValidGuid(textElement);

			if (!isValid) {
				complain(11012, lineNumber);
				return false;
			} else {
				return true;
			}
		}
		
		function complainWrongDateFormat(lineNumber){
			complain(11015, lineNumber);
		}

		function complainInvalidTextEntryGuid(lineNumber) {
			complain(11012, lineNumber);
		}
		
		var messageHandler = inject.instance.messageHandler;
		var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({
			pattern : "yyyy/MM/dd HH:mm:ss"
		});
		var oDate;
		var aLines = textFileString.split(/\r?\n/);
		var len = aLines.length;
		var i;
		var indexOfExpectedEntry = -1;
		var indexOfLastChangeDate = -1;
		var textElementEntry;
		var formatWithHint, formatWithoutHint, entry;
		var bApplicationIdFound = false;
		var parseResult = {
			Application : undefined,
			TextElements : [],
			Messages : []
		};

		for(i = 0; i < len; i++) {

			if (!bApplicationIdFound) {

				var applicationId = /^\#\s*ApfApplicationId=[0-9A-F]+\s*$/.exec(aLines[i]);
				if (applicationId !== null) {
					parseResult.Application = aLines[i].split('=')[1];
					if (!sap.apf.utils.isValidGuid(parseResult.Application)) {
						parseResult.Application = "";
						complainWrongFormatApplicationId(i);
					}
					bApplicationIdFound = true;

					continue;
				}
			}

			if (aLines[i] === "") {
				continue;
			}
			
			if (indexOfLastChangeDate === i && /^\#\s*LastChangeDate/.exec(aLines[i])) {
				//# LastChangeDate=2014/10/07 16:30:29
				entry = aLines[i].split('=');
				if (entry.length === 2) {
					oDate = oDateFormat.parse(entry[1]);
					if (!oDate) {
						complainWrongDateFormat(i);
						textElementEntry.LastChangeUTCDateTime = "";
					} else {
						textElementEntry.LastChangeUTCDateTime = '/Date(' + oDate.getTime() + ')/';
					}	
					parseResult.TextElements.push(textElementEntry);
				} else {
					complainWrongDateFormat(i);
				}
				textElementEntry = null;
				continue;
			}

			if (indexOfExpectedEntry === i) {
				entry = aLines[i].split('=');
				if (entry.length === 2) {

					// take over only proper entries
					if (isValidGuidFormatForTextElement(entry[0], i)) {
						textElementEntry.TextElement = entry[0];
						textElementEntry.TextElementDescription = entry[1];
					} else {
						complainInvalidTextEntryGuid(i);
					}

				} else {
					complainMissingTextEntry(i);
				}
				continue;
			}

			formatWithHint = /^\#(X|Y)[A-Z]{3},[0-9]+:/.exec(aLines[i]);
			if (formatWithHint) {
				if (indexOfExpectedEntry === i) {
					complainMissingTextEntry(i);
				}
				textElementEntry = {};
				textElementEntry.Language = sap.apf.core.constants.developmentLanguage;  //Default development language
				textElementEntry.Application = parseResult.Application;
				textElementEntry.TextElementType = aLines[i].match(/(X|Y)[A-Z]{3}/)[0];
				textElementEntry.MaximumLength = aLines[i].match(/,[0-9]+/);
				textElementEntry.MaximumLength = parseInt(textElementEntry.MaximumLength[0].substring(1), 10);
				textElementEntry.TranslationHint = aLines[i].match(/:\s*[0-9a-zA-Z\s]+$/);
				textElementEntry.TranslationHint = textElementEntry.TranslationHint[0].substring(1);

				indexOfExpectedEntry = i + 1;
				indexOfLastChangeDate = i + 2;
			} else {

				formatWithoutHint = /^\#(X|Y)[A-Z]{3},[0-9]+/.exec(aLines[i]);
				if (formatWithoutHint) {
					if (indexOfExpectedEntry === i) {
						complainMissingTextEntry(i);
					}
					textElementEntry = {};
					textElementEntry.Language = sap.apf.core.constants.developmentLanguage;  //Default development language
					textElementEntry.Application = parseResult.Application;
					textElementEntry.TextElementType = aLines[i].match(/(X|Y)[A-Z]{3}/)[0];
					textElementEntry.MaximumLength = aLines[i].match(/,[0-9]+/);
					textElementEntry.MaximumLength = parseInt(textElementEntry.MaximumLength[0].substring(1), 10);
					textElementEntry.TranslationHint = "";
					indexOfExpectedEntry = i + 1;
					indexOfLastChangeDate = i + 2;
				} 
			}
		}
		if (!bApplicationIdFound) {
			complain(11010, 0);
		}
		return parseResult;
	}; 
}()); 
}; // end of sap/apf/utils/parseTextPropertyFile.js
if ( !jQuery.sap.isDeclared('sap.apf.utils.serializationMediator') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.utils.serializationMediator");
/**
 * @private
 * @class Serialization Mediator gets, collects and distributes non-core objects for persistence operations (save, open and delete).
 * @param {object} oInject Object containing an instance of {@link sap.apf.utils.FilterIdHandler} and {@link sap.apf.core.Instance}
 * @param {object} oInject.filterIdHandler Instance of {@link sap.apf.utils.FilterIdHandler} 
 * @param {object} oInject.coreApi Instance of {@link sap.apf.core.Instance}
 * @returns {sap.apf.utils.SerializationMediator}
 */
sap.apf.utils.SerializationMediator = function(oInject){
    /**
     * @private
     * @function
     * @name sap.apf.utils.SerializationMediator#savePath
     * @description Saves or modifies the current path on server side under the provided name.
     * @param {string} [sPathId] If provided the path identified by the ID is modified with the current path.
     * If omitted the current path will be created as new saved path with a new ID.
     * @param {string} sName Name of the path to be saved
     * @param {function} fnCallback The first argument of the callback function is an object with property AnalysisPath and status.
     * The second argument is {sap.apf.core.EntityTypeMetadata}.
     * The third argument is undefined or {sap.apf.core.MessageObject} if a message occurred.
     * @returns undefined
     */
	this.savePath = function(arg1, arg2, arg3){
		var oExternalObjects;
		oInject.startFilterHandler.serialize().done(afterStartFilterHandlerSerialized);
		
		function afterStartFilterHandlerSerialized(serializedStartFilter){
			oExternalObjects = {
                filterIdHandler : oInject.filterIdHandler.serialize(),
                startFilterHandler : serializedStartFilter
			};			
			if (typeof arg1 === 'string' && typeof arg2 === 'function') {
				//case for create path
				oInject.coreApi.savePath(arg1, arg2, oExternalObjects);
			}else if (typeof arg1 === 'string' && typeof arg2 === 'string' && typeof arg3 === 'function'){
				//case for update path
				oInject.coreApi.savePath(arg1, arg2, arg3, oExternalObjects);
			}
		}
	};

    /**
     * @private
     * @function
     * @name sap.apf.utils.SerializationMediator#openPath
     * @description Opens a path, that has been stored on server side and replaces the current path.
     * @param {string} sPathId Identifies the analysis path to be opened
     * @param {function} fnCallback The first argument of the callback function is a JS object with property path, that holds the stored path and status. The second argument is {sap.apf.core.EntityTypeMetadata}. The third argument is undefined or {sap.apf.core.MessageObject} if a message occurred.
     * @param {number} [nActiveStep] Sets the active step.
     * @returns undefined
     */
	this.openPath = function(sPathId, fnCallback, nActiveStep){
		var fnCallbackFromCoreApi = function(oResponse, oEntityTypeMetadata, oMessageObjectForUI){
            if(oResponse && oResponse.path && oResponse.path.SerializedAnalysisPath && oResponse.path.SerializedAnalysisPath.filterIdHandler){
                oInject.filterIdHandler.deserialize(oResponse.path.SerializedAnalysisPath.filterIdHandler);
                delete oResponse.path.SerializedAnalysisPath.filterIdHandler;
            }
            if(oResponse && oResponse.path && oResponse.path.SerializedAnalysisPath && oResponse.path.SerializedAnalysisPath.startFilterHandler){
            	oInject.startFilterHandler.deserialize(oResponse.path.SerializedAnalysisPath.startFilterHandler);
            	delete oResponse.path.SerializedAnalysisPath.startFilterHandler;
            }
            fnCallback(oResponse, oEntityTypeMetadata, oMessageObjectForUI);
        };

        oInject.coreApi.openPath(sPathId, fnCallbackFromCoreApi, nActiveStep);
	};
    /**
     * @private
     * @function
     * @name sap.apf.utils.SerializationMediator#deletePath
     * @description Deletes the path with the given ID on server
     * @param {string} sPathId Identifies the analysis path to be deleted
     * @param {function} fnCallback The first argument of the callback function is a JS object, that holds the property status. The second argument is {sap.apf.core.EntityTypeMetadata}. The third argument is undefined or {sap.apf.core.MessageObject} if a message occurred.
     * @returns undefined
     */
	this.deletePath = function(sPathId, fnCallback){
		oInject.coreApi.deletePath(sPathId, fnCallback);
	};

	/**
	 * @private
	 * @function
	 * @name sap.apf.utils.SerializationMediator#readPaths
	 * @description Reads all stored paths from server
	 * @param {function} fnCallback This callback function is called after function readPaths has been executed.
	 * @param {function} fnCallback(oResponse, oEntitiyMetadata, oMessageObject)
	 * @returns undefined
	 */
	this.readPaths = function(fnCallback){
		oInject.coreApi.readPaths(fnCallback);
	};
};
}; // end of sap/apf/utils/serializationMediator.js
if ( !jQuery.sap.isDeclared('sap.apf.utils.startFilter') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare('sap.apf.utils.startFilter');

/**
 * @private
 * @class Start filter
 * @description -
 * @param -
 * @name sap.apf.utils.StartFilter
 * @returns {sap.apf.utils.startFilter}
 */
sap.apf.utils.StartFilter = function(inject, config, context) {
	'use strict';
	
    var externallySetSelectedValues;
    var restriction;
    var deferredValueHelpRequest;
    var deferredFilterResolutionRequest;
    var initiallySelectedValues;
   
    convertRequestResponseToArrayList = convertRequestResponseToArrayList.bind(this);
    createAvailableValuesHashMap = createAvailableValuesHashMap.bind(this);
    sendFilterResolutionRequest = sendFilterResolutionRequest.bind(this);
	
	this.getPropertyName = function(){
	    return config.property;
	};
	
	this.getLabel = function(){
	    return config.label;
	};
	
    this.getAliasNameIfExistsElsePropertyName = function(){
            return config.alias || config.property;
    };
    
    this.isMultiSelection = function() {
        if(config.multiSelection === 'true' || config.multiSelection === true){
            return true;
        }
        return false;
    };
    
    this.isVisible = function() {
        if(context && context.type === 'internalFilter' && !config.filterResolutionRequest) {
            return false;
        }
        return !config.invisible;
    };
    
    this.setRestriction = function(filter){
    	deferredValueHelpRequest = undefined;
    	deferredFilterResolutionRequest = undefined;
    	restriction = filter; 
    };
    
    this.getValues = function() {
        var deferred;
        var valueHelpList = [];
        var preselectionValues;
        prependListValuesIfNotContainedInResponse = prependListValuesIfNotContainedInResponse.bind(this);
        prependFilterResolutionResponseIfNotContained = prependFilterResolutionResponseIfNotContained.bind(this);
        
    	if(config.valueHelpRequest && jQuery.isArray(context)){
    		return sendValueHelpRequest().then(function(response){
    			var valueHelpList = response.data;
    			prependListValuesIfNotContainedInResponse(context, valueHelpList);
    		    return valueHelpList;
    		});
    	}else if(context && context.type === 'internalFilter' && config.valueHelpRequest && config.filterResolutionRequest){
    		deferred = jQuery.when(sendValueHelpRequest(), sendFilterResolutionRequest());
    		return deferred.then(function(responseValueHelp, responseFilterResolution){
    			var valueHelpList = responseValueHelp.data;
    			
    			prependFilterResolutionResponseIfNotContained(responseFilterResolution.data, valueHelpList); 
    			return valueHelpList;
    		});
    	}else if(config.valueHelpRequest && ((config.preselectionDefaults && config.preselectionDefaults.length > 0) || jQuery.isFunction(config.preselectionFunction)) ){
    		return sendValueHelpRequest().then(function(response){
    			var valueHelpList = response.data;
    			var preselectionValues;
    			
    			if(config.preselectionDefaults && config.preselectionDefaults.length > 0) {
        			preselectionValues = config.preselectionDefaults;
        		} else {
        			preselectionValues = config.preselectionFunction();
        		}
    			
    			prependListValuesIfNotContainedInResponse(preselectionValues, valueHelpList);
    		    return valueHelpList;
    		});
    	}else if(config.valueHelpRequest){
    		return sendValueHelpRequest().then(function(response){
    			return response.data;
    		});
    	}else if(context && context.type === 'internalFilter' && config.filterResolutionRequest){
    		return sendFilterResolutionRequest().then(function(response){
    			return response.data;
    		});
    	}else if(jQuery.isArray(context) && config.filterResolutionRequest && !config.valueHelpRequest){
    		return sendFilterResolutionRequest().then(function(response){
    			return response.data;
    		});
    	}else if(jQuery.isArray(context)){
    		deferred = jQuery.Deferred();
    		prependListValuesIfNotContainedInResponse(context, valueHelpList);
    		deferred.resolve(valueHelpList);
    		return deferred.promise();
    	}else if(((config.preselectionDefaults && config.preselectionDefaults.length > 0) || jQuery.isFunction(config.preselectionFunction)) && !config.valueHelpRequest && !config.filterResolutionRequest && !context){
    		if(config.preselectionDefaults && config.preselectionDefaults.length > 0) {
    			preselectionValues = config.preselectionDefaults;
    		} else {
    			preselectionValues = config.preselectionFunction();
    		}
    		if(this.isMultiSelection()){
    			 prependListValuesIfNotContainedInResponse(preselectionValues, valueHelpList);
    		}else{
    			prependListValuesIfNotContainedInResponse([preselectionValues[0]], valueHelpList);
    		}
    		return jQuery.Deferred().resolve(valueHelpList).promise();
    	}else if(((config.preselectionDefaults && config.preselectionDefaults.length > 0) || jQuery.isFunction(config.preselectionFunction)) && config.filterResolutionRequest && !context){
    		if(config.preselectionDefaults && config.preselectionDefaults.length > 0) {
    			preselectionValues = config.preselectionDefaults;
    		} else {
    			preselectionValues = config.preselectionFunction();
    		}
    		if(this.isMultiSelection()){
    			 prependListValuesIfNotContainedInResponse(preselectionValues, valueHelpList);
    		}else{
    			prependListValuesIfNotContainedInResponse([preselectionValues[0]], valueHelpList);
    		}
    		return jQuery.Deferred().resolve(valueHelpList).promise();
    	}else if(context && context.type === 'internalFilter' || !context){
    		return jQuery.Deferred().resolve(null).promise();
    	}
    	
    	function prependFilterResolutionResponseIfNotContained(responseFilterResolution, responseValueHelp){
    		var valuesInValueHelp = createAvailableValuesHashMap(responseValueHelp);
    		
    		for(var i = responseFilterResolution.length - 1; i >= 0; i--) {
    			if(!valuesInValueHelp[responseFilterResolution[i][this.getAliasNameIfExistsElsePropertyName()]]) {
    				responseValueHelp.unshift(responseFilterResolution[i]);
    			}
    		}
    	}
    	function prependListValuesIfNotContainedInResponse(list, response) {
  			var valuesInresponse = createAvailableValuesHashMap(response);
			var element;
			
			for(var i = list.length - 1; i >= 0; i--) {
				if(!valuesInresponse[list[i]]) {
					element = {};
					element[this.getAliasNameIfExistsElsePropertyName()] = list[i];
					response.unshift(element);
				}
			}
    	}
    };
    
    this.getMetadata = function() {
    	if(config.valueHelpRequest){
    		return sendValueHelpRequest().then(function(response){
    			return response.metadata.getPropertyMetadata(this.getAliasNameIfExistsElsePropertyName());
    		}.bind(this));
    	}else if(config.filterResolutionRequest){
    		return sendFilterResolutionRequest().then(function(response){
    			return response.metadata.getPropertyMetadata(this.getAliasNameIfExistsElsePropertyName());
    		}.bind(this));
    	}
    	return jQuery.Deferred().resolve({});
    };
    this.setSelectedValues = function(values) {
    	if(!initiallySelectedValues){
    		initiallySelectedValues = true;
    		this.getSelectedValues().done(function(selectedValues){
    			initiallySelectedValues = selectedValues;
    		});
    	}
    	if(values.type === 'internalFilter'){
    		externallySetSelectedValues = values;
    	}else{
    		externallySetSelectedValues = jQuery.extend(true, [], values);  
    	}
    };
    this.getSelectedValues = function() {
    	var deferred = jQuery.Deferred();
    	var selectedValues;
    	var preselectionValues;
    	var availableValues;

    	if(externallySetSelectedValues) {
    		if(!config.invisible) {
    			this.getValues().done(function(values){
    				if(values !== null){
    					selectedValues = [];
    					availableValues = createAvailableValuesHashMap(values);
    					externallySetSelectedValues.forEach(function(value){
    						if(availableValues[value]){
    							selectedValues.push(value);
    						}
    					});
    					externallySetSelectedValues = selectedValues;
    				}else{
    					selectedValues = null;
    				}
    				resolvePromise();
    			});
    		} else {
    			selectedValues = externallySetSelectedValues;
    			resolvePromise();
    		}
    	}else if(jQuery.isFunction(config.preselectionFunction) && !config.valueHelpRequest){
    		selectedValues = config.preselectionFunction();
    		resolvePromise();
    	}else if(context && context.type === 'internalFilter' && !config.filterResolutionRequest) {
    		deferred.resolve(context);
    	}else if(config.filterResolutionRequest && !context && !config.valueHelpRequest && !(config.preselectionDefaults && config.preselectionDefaults.length > 0)){
    		deferred.resolve(null);
    	}else if(context && context.type === 'internalFilter' && config.filterResolutionRequest){
    		sendFilterResolutionRequest().then(function(response){
    			var filterResolutionList = convertRequestResponseToArrayList(response);
    			
    			if(this.isMultiSelection()){
    				selectedValues = filterResolutionList;
    			}else{
    				selectedValues = [filterResolutionList[0]];
    			}
    			
    			resolvePromise();
    		}.bind(this));
    	}else if(config.valueHelpRequest && !jQuery.isArray(context)){
    		sendValueHelpRequest().then(function(response){
    			var valueHelpList = [];
    			var responseList = convertRequestResponseToArrayList(response);
    			
    			if(config.preselectionDefaults && config.preselectionDefaults.length > 0){
    				preselectionValues = config.preselectionDefaults;
    			}else{
    				preselectionValues = config.preselectionFunction && config.preselectionFunction();
    			}
    			
    			if(preselectionValues) {
    				preselectionValues.forEach(function(value) {
    					if(jQuery.inArray(value, responseList) > -1) {
    						valueHelpList.push(value);
    					}
    				});
    			} else {
    				valueHelpList = responseList;
    			}
    			
    			if(this.isMultiSelection()){
    				selectedValues = valueHelpList;
    			}else{
    				selectedValues = [valueHelpList[0]];
    			}
    			
    			resolvePromise();
    		}.bind(this));
    	}else if(jQuery.isArray(context)) {
    		if(this.isMultiSelection()){
    			selectedValues = context;
    		}else{
    			selectedValues = context[0] ? [context[0]] : [];
    		}
    		
    		resolvePromise();
    	}else if(config.preselectionDefaults && config.preselectionDefaults.length > 0){
		    selectedValues = config.preselectionDefaults;
		    if(!this.isMultiSelection()) {
		        selectedValues = [selectedValues[0]];
    		}
    		resolvePromise();
    	}else{
    		deferred.resolve(null);
    	}
    	return deferred.promise();
    	
    	function resolvePromise(){
    		if(selectedValues && selectedValues.type === 'internalFilter'){
    			deferred.resolve(selectedValues);
        	}else{
        		deferred.resolve(jQuery.extend(true, [], selectedValues));
        	}
    	}
    };
    
    this.serialize = function(){
    	var deferredSerialization = jQuery.Deferred();
    	var serializedStartFilter = {
    			propertyName : this.getPropertyName()
    	};
    	this.getSelectedValues().done(function(values){
    		if(values.type === 'internalFilter'){
    			values = values.mapToSapUI5FilterExpression();
    		}
    		serializedStartFilter.selectedValues = values;
    		deferredSerialization.resolve(serializedStartFilter);
    	});
    	return deferredSerialization;
    };
    
    this.deserialize = function(serializedStartFilter){
    	if(serializedStartFilter.selectedValues.filters || serializedStartFilter.selectedValues.path){
    		serializedStartFilter.selectedValues = sap.apf.core.utils.Filter.transformUI5FilterToInternal(inject.instance.messageHandler, serializedStartFilter.selectedValues);
    	}
    	externallySetSelectedValues = undefined;
    	initiallySelectedValues = undefined;
    	context = serializedStartFilter.selectedValues;
    };
    
    this.reset = function(){
    	if(initiallySelectedValues){
    		externallySetSelectedValues = initiallySelectedValues;
    	}
    };
    
    function sendFilterResolutionRequest(){
    	var request;
    	var mergedFilter;
    	var contextFilter;
    	
    	if(jQuery.isArray(context)){
    		contextFilter = new sap.apf.core.utils.Filter(inject.instance.messageHandler);
    		context.forEach(function(value){
    			contextFilter.addOr(this.getAliasNameIfExistsElsePropertyName(), 'eq', value);
			}.bind(this));
    	}else{
    		contextFilter = context;
    	}
    	
    	if(deferredFilterResolutionRequest){
    		return deferredFilterResolutionRequest;
    	}
    	deferredFilterResolutionRequest = jQuery.Deferred();
    	
    	if(restriction){
    	    mergedFilter = new sap.apf.core.utils.Filter(inject.instance.messageHandler);
    	    mergedFilter.addAnd(restriction).addAnd(contextFilter);
    	}else{
    	    mergedFilter = contextFilter;
    	}
    	
    	request = inject.functions.createRequest(config.filterResolutionRequest);
    	request.sendGetInBatch(mergedFilter, callback, undefined);
    	return deferredFilterResolutionRequest.promise();
    	
    	function callback(response) {
    		deferredFilterResolutionRequest.resolve(response);
    	}	
    }
    function sendValueHelpRequest(){
    	var request;
    	if(deferredValueHelpRequest){
    		return deferredValueHelpRequest; 
    	}
    	deferredValueHelpRequest = jQuery.Deferred();
    	
    	request = inject.functions.createRequest(config.valueHelpRequest);
    	request.sendGetInBatch(restriction, callback, undefined);
    	return deferredValueHelpRequest.promise();
    	
    	function callback(response) {
    		deferredValueHelpRequest.resolve(response);
    	}
    }
    function convertRequestResponseToArrayList(response){
    	var values = [];
		response.data.forEach(function(val) {
			values.push(val[this.getAliasNameIfExistsElsePropertyName()]);
		}.bind(this));
		return values;
    }
    function createAvailableValuesHashMap(arrayOfResponseObjects){
    	var valuesHashMap = {};
    	arrayOfResponseObjects.forEach(function(responseObject){
    		valuesHashMap[responseObject[this.getAliasNameIfExistsElsePropertyName()]] = true;
		}.bind(this));
    	return valuesHashMap;
    }
};

}; // end of sap/apf/utils/startFilter.js
if ( !jQuery.sap.isDeclared('sap.apf.utils.startParameter') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

(function () {
	'use strict';

	jQuery.sap.declare('sap.apf.utils.startParameter');
	
	/**
	 * @private 
	 * @class Provides convenience functions to receive parameter set through component`s startup parameter or basic URL parameter.
	 * 		  When both parameter are set then the component`s startup parameter wins.
	 * @param {object} component 
	 */
	sap.apf.utils.StartParameter = function(component){
		var analyticalConfigurationId = null;
		var stepId = null;
		var representationId = null;
		var appConfigPath;
		var evaluationId;
		var startParameters;
		var lrepActive = false;
		var sapClient;
		var filterReduction = false;
		
		if(component && component.getComponentData && component.getComponentData() && component.getComponentData().startupParameters) {
			startParameters = component.getComponentData().startupParameters;
			if(startParameters['sap-apf-configuration-id']) {
				analyticalConfigurationId = startParameters['sap-apf-configuration-id'][0];
			}
			if(startParameters['sap-apf-step-id']) {
				stepId = startParameters['sap-apf-step-id'][0];
			}
			if(startParameters['sap-apf-representation-id']) {
				representationId = startParameters['sap-apf-representation-id'][0];
			}
			if(startParameters['sap-apf-app-config-path']) {
				appConfigPath = startParameters['sap-apf-app-config-path'][0];
			}
			if(startParameters['evaluationId']) {
				evaluationId = startParameters['evaluationId'][0];
			}
			if(startParameters['sap-apf-activate-lrep']) {
				lrepActive = startParameters['sap-apf-activate-lrep'][0];
			}
			if(startParameters['sap-client']) {
				sapClient = startParameters['sap-client'][0];
			}
			if(startParameters['sap-apf-filter-reduction']) {
				filterReduction = startParameters['sap-apf-filter-reduction'][0];
			}
			
		}
		
		/**
		 * @private
		 * @function
		 * @name sap.apf.utils.StartParameter#getSteps
		 * @description Returns analytical configuration ID. In case of lrep, it also returns applicationId
		 * @returns {undefined|object} with format { configurationId : "xxx", applicationId : "yyy" }
		 */
		this.getAnalyticalConfigurationId = function() {
			var parameters, config;
			
			if (!analyticalConfigurationId) {
				analyticalConfigurationId = jQuery.sap.getUriParameters().get('sap-apf-configuration-id');
			}
			if (analyticalConfigurationId) {
				config = {};
				parameters = analyticalConfigurationId.split(".");
				
				if (parameters.length === 2) {
				    config.applicationId = parameters[0]
					config.configurationId = parameters[1];
				} else {
					config.configurationId = analyticalConfigurationId;
				} 
			}
			
			return config;
		};

        /**
         * @private
         * @function
         * @name sap.apf.utils.StartParameter#getAnalyticalConfigurationId
         * @description Returns step IDs and representation IDs.
         * @returns {Array} steps Step contains step ID and optional representation ID
         */
		this.getSteps = function() {
			if(!stepId) {
				stepId = jQuery.sap.getUriParameters().get('sap-apf-step-id');
			}
			if(!representationId) {
				representationId = jQuery.sap.getUriParameters().get('sap-apf-representation-id');
			}
			if(!stepId) {
				return null;
			} else {
				return [{
					stepId : stepId,
					representationId : representationId
				}];
			}
		};
		
		/**
         * @private
         * @function
         * @name sap.apf.utils.StartParameter#getXappStateId
         * @description Returns sap-xapp-state ID from URL hash
         * @returns {string} sap-xapp-state ID
         */
		this.getXappStateId = function() {
				var xappStateKeyMatcher = /(?:sap-xapp-state=)([^&=]+)/;
				var xappMatch = xappStateKeyMatcher.exec(window.location.hash);
				
				if(xappMatch){
					return xappMatch[1];
				}else{
					return null;
				}
		};
		
		this.getApplicationConfigurationPath = function() {
			return appConfigPath;
		};
		
		this.getEvaluationId = function() {
			return evaluationId;
		};
		
		this.isLrepActive = function() {
			return lrepActive;
		};
		
		this.getSapClient = function() {
			return sapClient;
		};
		
		this.isFilterReductionActive = function() {
			return filterReduction;
		}
	};
}());
}; // end of sap/apf/utils/startParameter.js
if ( !jQuery.sap.isDeclared('sap.apf.utils.utils') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

/*global sap, jQuery, window */
 
 /**
   * Static helper functions
   */
jQuery.sap.declare('sap.apf.utils.utils');
jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained


(function(){
    'use strict';

	var bFormatInformationIsMissing;

sap.apf.utils.renderHeaderOfTextPropertyFile = function(applicationId, messageHandler) {

	var translationUuid = applicationId.toLowerCase();
	var checkValidFormatRegex = /^[0-9a-f]+$/;
	var isValid = checkValidFormatRegex.test(translationUuid);

	if (!isValid || applicationId.length !== 32) {
		messageHandler.putMessage(messageHandler.createMessageObject({
			code : "11009",
			aParameters : [ applicationId ]
		}));

		translationUuid = "<please enter valid translation uuid, if you want to upload into a SAP translation system>";
	} else {
		translationUuid = translationUuid.substring(0, 8) + '-' + translationUuid.substring(8, 12) + '-' + translationUuid.substring(12, 16) + '-' + translationUuid.substring(16, 20) + '-' + translationUuid.substring(20);
	}

	return "#FIORI: insert Fiori-Id\n" + "# __ldi.translation.uuid=" + translationUuid + "\n" + "#ApfApplicationId=" + applicationId + "\n\n";
};

/**
 * @description Returns the URL parameters. Is a wrapper function for the jQuery.sap.getUriParameters function. For more details, please see SAPUI5 documentation 
 * @returns {object}
 */
sap.apf.utils.getUriParameters = function() {
	return jQuery.sap.getUriParameters().mParams;
};

sap.apf.utils.renderTextEntries = function(hashTableForTexts, messageHandler) {
	bFormatInformationIsMissing = false;
	
	var keys = hashTableForTexts.getKeys();

	keys.sort(function(a, b) {
		var valueA = hashTableForTexts.getItem(a);
		var valueB = hashTableForTexts.getItem(b);

		if (valueA.LastChangeUTCDateTime < valueB.LastChangeUTCDateTime) {
			return -1;
		}
		if (valueA.LastChangeUTCDateTime > valueB.LastChangeUTCDateTime) {
			return 1;
		}
		return 0;
	});

	var length = keys.length;
	var result = '';
	var i;
	for(i = 0; i < length; i++) {
		result = result + sap.apf.utils.renderEntryOfTextPropertyFile(hashTableForTexts.getItem(keys[i]), messageHandler);
	}
	return result;
};




sap.apf.utils.renderEntryOfTextPropertyFile = function(textData, messageHandler) {
	var dateString, oDate;
	
	if (!bFormatInformationIsMissing && (!textData.TextElementType || !textData.MaximumLength)) {
		bFormatInformationIsMissing = true;
		messageHandler.putMessage(messageHandler.createMessageObject({
			code : "11008",
			aParameters : [ textData.TextElement ]
		}));

	}
	var entry = "#" + (textData.TextElementType || "<Add text type>") + "," + ( textData.MaximumLength || "<Add maximum length>");

	if (textData.TranslationHint && textData.TranslationHint !== "") {
		entry = entry + ':' + textData.TranslationHint;
	}
	entry = entry + "\n" + textData.TextElement + "=" + textData.TextElementDescription + "\n";
	
	var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({pattern: "yyyy/MM/dd HH:mm:ss"});
	
	if (textData.LastChangeUTCDateTime && textData.LastChangeUTCDateTime !== "") {
		dateString = textData.LastChangeUTCDateTime.replace(/\/Date\(/,'').replace(/\)\//, '');
		oDate = new Date(parseInt(dateString,10));
		
	} else {
		 oDate = new Date();
	}
	entry = entry + "# LastChangeDate=" +  oDateFormat.format(oDate) + '\n\n';
	
	return entry;
};

/**
 * @description Eliminates duplicate values in an array. To be used for elementary types only!
 * @param {*[]} oMsgHandler
 * @param {*[]} aWithDuplicates
 * @returns {*[]}
 */
sap.apf.utils.eliminateDuplicatesInArray = function(oMsgHandler, aWithDuplicates) {
	oMsgHandler.check((aWithDuplicates !== undefined && typeof aWithDuplicates === 'object' && aWithDuplicates.hasOwnProperty('length') === true), 'Error - aArray is undefined');
	var aReturn = [];
	var i, j;
	for( i = 0; i < aWithDuplicates.length; i++) {
		for( j = i + 1; j < aWithDuplicates.length; j++) {
			// If this[i] is found later in the array
			if (aWithDuplicates[i] === aWithDuplicates[j]) {
				j = ++i;
			}
		}
		aReturn.push(aWithDuplicates[i]);
	}
	return aReturn;
};
/**
 * @description Returns a hash code of a string
 * @param {string} sValue
 * @returns {number}
 */
sap.apf.utils.hashCode = function(sValue) {
	var nHash = 0;
	var i;
	var nCharCode = 0;
	sValue = sValue.toString();
	var len = sValue.length;
	for(i = 0; i < len; i++) {
		nCharCode = sValue.charCodeAt(i);
		nHash = (17 * nHash + nCharCode) << 0;
	}
	return nHash;
};
/**
 * @description Escapes data according to the SAP XSE OData specification, that is doubling the single quote
 * @param {string} sValue
 * @returns {string} || {object}
 */
sap.apf.utils.escapeOdata = function(sValue) {
	if (typeof sValue === "string") {
		return sValue.replace("'", "''");
	}
	return sValue;
};
/**
 * @description Formats a value in json format in the javascript object.  
 * @param {object} value some value
 * @param {string} sType edm type name
 * @returns {object} javascriptValue
 */
sap.apf.utils.json2javascriptFormat = function(value, sType) {
	var intermediateValue;
	
	switch(sType) {
		case "Edm.Boolean":
			if (typeof value === "boolean") {
				return value;
			}
			if (typeof value === "string") {
				return value.toLowerCase() === "true";
			}
			return false;		 
		case "Edm.Decimal":
		case "Edm.Guid" :
		case "Edm.Int64" :
		case "Edm.String" :
			return value;
		case "Edm.Int16":
		case "Edm.Int32":
			return parseInt(value, 10);
		case "Edm.Single":
		case "Edm.Float" :
			return parseFloat(value);
		case "Edm.Time":
			return value;
		case "Edm.DateTime":
			intermediateValue = value.replace('/Date(', '').replace(')/', '');
			intermediateValue = parseFloat(intermediateValue);
			return new Date(intermediateValue);
		case "Edm.DateTimeOffset":
			intermediateValue = value.replace('/Date(', '');
			intermediateValue = intermediateValue.replace(')/', '');
			intermediateValue = parseFloat(intermediateValue);
			return new Date(intermediateValue);
			
	}
	return value; //default
};

/**
  * @description Formats a value for usage in odata conformant url as filter or parameter with given Edm type
  * @param {object} value some value
  * @param {string} sType edm type name
  * @returns {string} sFormatedValue
  */
sap.apf.utils.formatValue = function(value, sType) {
	
	function convertValueToDate (v) {
		var val;
		
		if (v instanceof Date) {
			return v;
		}
		if (typeof v === 'string') {
			if (v.substring(0, 6) === '/Date(') {
				val = v.replace('/Date(', '');
				val = val.replace(')/', '');
				val = parseInt(val, 10);
				return new Date(val);
			}
			return new Date(v);
		}
	}
	
	var oDate;
	var sFormatedValue = "";
	// null values should return the null literal
	if (value === null || value === undefined) {
		return "null";
	}
	
	
	switch(sType) {
		case "Edm.String":
			// quote
			sFormatedValue = "'" + String(value).replace(/'/g, "''") + "'";
			break;
		case "Edm.Time":
			if (typeof value === 'number') {
				oDate = new Date();
				oDate.setTime(value);
				var hours = oDate.getUTCHours();
				if (hours < 10) {
					hours = '0' + hours;
				}
				var minutes = oDate.getUTCMinutes();
				if (minutes < 	10) {
					minutes = '0' + minutes;
				}
				var seconds = oDate.getUTCSeconds();
				if (seconds < 10) {
					seconds = '0' + seconds;
				}
				sFormatedValue =  "time'" + hours + ':' + minutes + ':' + seconds + "'";
			} else {
				sFormatedValue = "time'" + value + "'";
				
			}
			
			break;
		case "Edm.DateTime":
			if (!sap.apf.utils.formatValue.oDateTimeFormat) {
				sap.apf.utils.formatValue.oDateTimeFormat = sap.ui.core.format.DateFormat.getDateInstance({
					pattern: "'datetime'''yyyy-MM-dd'T'HH:mm:ss''"
				});
			}

			oDate = convertValueToDate(value);
			sFormatedValue = sap.apf.utils.formatValue.oDateTimeFormat.format(oDate, true);
			break;
		case "Edm.DateTimeOffset":
			
			if (!sap.apf.utils.formatValue.oDateTimeOffsetFormat) {
				sap.apf.utils.formatValue.oDateTimeOffsetFormat = sap.ui.core.format.DateFormat.getDateInstance({
					pattern: "'datetimeoffset'''yyyy-MM-dd'T'HH:mm:ss'Z'''"
				});
			}
			oDate = convertValueToDate(value); //
			sFormatedValue = sap.apf.utils.formatValue.oDateTimeOffsetFormat.format(oDate, true);
			break;
		case "Edm.Guid":
			sFormatedValue = "guid'" + value + "'";
			break;
		case "Edm.Decimal":
			sFormatedValue = value + "M";
			break;
		case "Edm.Int64":
			sFormatedValue = String(value) + "L";
			break;
		case "Edm.Single":
			sFormatedValue = value + "f";
			break;
		case "Edm.Binary":
			sFormatedValue = "binary'" + value + "'";
			break;
		default:
			sFormatedValue = value;
			break;
	}
	return sFormatedValue;	
			
};

/**
 * @description Transforms a string into a callable function. Method should only be called internally by APF.
 * @param {string} sFunctionPath
 * @returns {function|undefined}
 */	
sap.apf.utils.extractFunctionFromModulePathString = function(sFunctionPath) {

    if (jQuery.isFunction(sFunctionPath)) {
        return sFunctionPath;
    }
    var oDeepestNameSpaceLevel, aNameSpaceParts, sFunction;
    aNameSpaceParts = sFunctionPath.split('.');
    oDeepestNameSpaceLevel = window;
	var i;
    for( i = 0; i < aNameSpaceParts.length - 1; i++) {
        oDeepestNameSpaceLevel = oDeepestNameSpaceLevel[aNameSpaceParts[i]];
        if(!oDeepestNameSpaceLevel) {
            return undefined;
        }
    }
    sFunction = aNameSpaceParts[aNameSpaceParts.length - 1];
    return oDeepestNameSpaceLevel[sFunction];
}; 

/**
* @description Checks whether a give string is a valid server guid: exactly 32 digits long and characters only from 0-9 or A-F
* @param {string} guid
* @returns {boolean}
*/	
sap.apf.utils.isValidGuid = function(guid){
	//noinspection JSLint
	return /^[0-9A-F]{32}$/.test(guid);
};

/**
* @description Checks whether a give string is a valid server guid: exactly 32 digits long and characters only from 0-9 or A-F
* @param {string} guid
* @returns {boolean}
*/
sap.apf.utils.isValidPseudoGuid = function(guid){
	//noinspection JSLint
	return /^[0-9A-F]{32}$/.test(guid);
};

/**
* @description Creates a pseudo guid: exactly 32 digits long and created with the date and a random number
* @param {number} len, length of guid to be created, default is 32
* @returns {boolean}
*/
sap.apf.utils.createPseudoGuid = function(len){
	if(!len) {
		len = 32;
	}
	var guid = Date.now().toString();
	var digitsToAdd = len - guid.length;
	guid += getRandomNumberString(digitsToAdd);
	return guid;
};

/*
 * returns a string of random numbers of a specified length
 */
function getRandomNumberString(len) {
	var result = "";
	var addOnLength, mathLen;
	while(result.length < len) {
		addOnLength = Math.min(10, len - result.length);
		mathLen = Math.pow(10, addOnLength);
		result += Math.floor((Math.random() * mathLen));
	}
	return result;	
}

/**
 * @description In old analytical configurations categories were assigned to step objects. To enable an individual sorting of steps beneath categories category objects have now step assignments
 * @param {object} analyticalConfiguration - configuration to migrate, if needed
 * @param {object} inject - inject logic 
 * @param {object} inject.instance.messageHandler - constructor for messageHandler 
 * @param {object} inject.constructor.hashTable - constructor for hashTable
 */
sap.apf.utils.migrateConfigToCategoryStepAssignment = function(analyticalConfiguration, inject){
	var categoryStepAssignments = new inject.constructor.hashtable(inject.instance.messageHandler);
	if(analyticalConfiguration.steps){
		analyticalConfiguration.steps.forEach(function(step){
			if(step.categories){
				step.categories.forEach(function(category){
					var categoryStepAssignment = categoryStepAssignments.getItem(category.id);
					if(!categoryStepAssignment){
						categoryStepAssignment = { category : category.id, steps : [ {type: "step", id : step.id} ] };
						categoryStepAssignments.setItem(category.id, categoryStepAssignment);
					} else {
						categoryStepAssignment.steps.push({type : "step", id : step.id});
					}
				});
				delete step.categories;
			}
		});
	}
	if(analyticalConfiguration.categories){
		analyticalConfiguration.categories.forEach(function(category){
			if(!category.steps){
				var categoryStepAssignment = categoryStepAssignments.getItem(category.id);
				if(categoryStepAssignment){
					category.steps = categoryStepAssignment.steps;
				} else{
					category.steps = [];
				}	
			}
		});
	}

};
/**
 * @description Execute a filter mapping via the given request by creating a disjunction for the given request result data records of conjunctions for the given target properties
 * @param {sap.apf.utils.Filter} oInputFilter - Input filter for the mapping request
 * @param {sap.apf.core.Request} oMappingRequest - Request used for the mapping
 * @param {Array} aTargetProperties - Target properties for the mapping
 * @param {Function} fnCallback(oMappedFilter) - callback function for the mapped filter
 * @param {sap.apf.utils.Filter} fnCallback.oMappedFilter - Result of the filter mapping
 * @param {sap.apf.core.MessageObject} fnCallback.oMessageObject - MessageObject in case of error
 * @param {sap.apf.core.MessageHandler} oMessageHandler - Message handler
*/
sap.apf.utils.executeFilterMapping = function (oInputFilter, oMappingRequest, aTargetProperties, fnCallback, oMessageHandler){

	oMappingRequest.sendGetInBatch(oInputFilter, callbackAfterMappingRequest);
	 
	 function callbackAfterMappingRequest(oResponse){
 		var oFilter;
 		if (oResponse && oResponse.type && oResponse.type === "messageObject") {
 			oMessageHandler.putMessage(oResponse); // technically logging
 			fnCallback(undefined, oResponse);
 		}else{
 			oFilter = new sap.apf.core.utils.Filter(oMessageHandler);
 			oResponse.data.forEach(function(oDataRecord){
 				var oFilterAnd = new sap.apf.core.utils.Filter(oMessageHandler);
 				aTargetProperties.forEach(function(sTargetProperty){
 					oFilterAnd.addAnd(new sap.apf.core.utils.Filter(oMessageHandler, sTargetProperty, sap.apf.core.constants.FilterOperators.EQ, oDataRecord[sTargetProperty]));
 				});
 				oFilter.addOr(oFilterAnd);
 			});
 			fnCallback(oFilter, undefined);
 		}
 	 }
};
}());

}; // end of sap/apf/utils/utils.js
if ( !jQuery.sap.isDeclared('sap.apf.core.ajax') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.core.ajax");



/**
 * @memberOf sap.apf.core
 * @description Wraps a jQuery (jQuery.ajax) request in order to handle a server time-out.
 * @param {object} oSettings Configuration of the jQuery.ajax request.
 * @returns {object} jqXHR
 */
sap.apf.core.ajax = function(oSettings) {
	var oAjaxSettings = jQuery.extend(true, {}, oSettings);
	var fnBeforeSend = oAjaxSettings.beforeSend;
	var fnSuccess = oAjaxSettings.success;
	var fnError = oAjaxSettings.error;

	oAjaxSettings.beforeSend = function(jqXHR, settings) {
		if (fnBeforeSend) {
			fnBeforeSend(jqXHR, settings);
		}
	};
	oAjaxSettings.success = function(data, textStatus, jqXHR) {
		var oMessage = sap.apf.core.utils.checkForTimeout(jqXHR);
		
		if(oMessage) {
			fnError(data, "error", undefined, oMessage);
		} else {
			fnSuccess(data, textStatus, jqXHR);
		}
		
	};
	oAjaxSettings.error = function(jqXHR, textStatus, errorThrown) {
		var oMessage = sap.apf.core.utils.checkForTimeout(jqXHR);
		if (oMessage) {
			fnError(jqXHR, textStatus, errorThrown, oMessage);
		} else {
			fnError(jqXHR, textStatus, errorThrown);
		}
		
	};
	return jQuery.ajax(oAjaxSettings);
};
}; // end of sap/apf/core/ajax.js
if ( !jQuery.sap.isDeclared('sap.apf.core.layeredRepositoryProxy') ) {
jQuery.sap.declare("sap.apf.core.layeredRepositoryProxy");

jQuery.sap.require('sap.ui.thirdparty.datajs'); // unlisted dependency retained



jQuery.sap.require('sap.ui.fl.LrepConnector'); // unlisted dependency retained


(function() {
	'use strict';
	/**
	 * @param {String} serviceConfiguration -  this param is yet of no interest in case of layered repository proxy
	 * @param {object] inject injection of instances and constructor functions
	 * @param {sap.apf.core.MessageHandler} inject.instance.messageHandler
	 * @param {sap.ui.fl.LrepConnector} inject.constructor.LrepConnector connector interface to the layered repository
	 */
	sap.apf.core.LayeredRepositoryProxy = function(serviceConfiguration, inject) {
		/** @type sap.apf.core.Instance */
		var coreApi = inject.instance.coreApi;
		var connector;
		var messageHandler = inject.instance.messageHandler;
		var namespace = 'sap/apf/dt';
		var textfileName = 'text.properties';
		var applicationTextsTable = new sap.apf.utils.Hashtable(inject.instance.messageHandler);
		var applicationConfigurationsTable = new sap.apf.utils.Hashtable(inject.instance.messageHandler);
		// convenience functions
		function determineLayerFromOptions (options) {
			var layer = (options && options.layer) || "CUSTOMER";
			if (layer === "ALL") {  // do not read with layer!
				return undefined;
			}
			return layer;				
		}
		
		function createErrorMessageObject(messageCode, parameters) {
			return messageHandler.createMessageObject({
				code : messageCode,
				aParameters : parameters
			});
		}
		function getMetadata() {
			return {};
		}
		function getApplicationNamespace(applicationGuid) {
			return namespace + '/' + applicationGuid;
		}
		function deleteText(data, callback) {
			var application = data.application;
			var textElement = data.inputParameters[0].value;
			var textTable;

			initTexts(application).done(function() {
				textTable = applicationTextsTable.getItem(application);
				textTable.removeItem(textElement);
				callback(data, getMetadata());
			}).fail(function() {
				callback(undefined, getMetadata(), createErrorMessageObject('5201'));
			})
		}
		// handling of texts

		function textLoading(application, callbackForComplete, sync) {
			var mOptions;
			var aParams = [];
			var sRequestPath = "/sap/bc/lrep/content/";
			sRequestPath += namespace + "/" + application + '/' + textfileName;
			aParams.push({
				name : "layer",
				value : "CUSTOMER"
			});
			mOptions = {
				async : !sync,
				contentType : 'text/plain'
			};
			if (sync) {
				mOptions.complete = callbackForComplete;
			}
			sRequestPath += connector._buildParams(aParams);

			return connector.send(sRequestPath, 'GET', {}, mOptions);
		}
		function initTexts(application, bAsync) {
			var deferred = jQuery.Deferred();
			var promise;
			var textTable = applicationTextsTable.getItem(application);

			var processReceivedTexts = function(result) {
				
				var textFile =  (result && result.response) || (result && result.responseText) || "";
				
				var parseResult = sap.apf.utils.parseTextPropertyFile(textFile, { instance : { messageHandler : messageHandler }});
				
				textTable = new sap.apf.utils.Hashtable(inject.instance.messageHandler);
				parseResult.TextElements.forEach(function(text) {
					textTable.setItem(text.TextElement, text);
				});

				applicationTextsTable.setItem(application, textTable);
				deferred.resolve({});
			};

		
			if (textTable === undefined) {

				if (bAsync !== undefined && bAsync === false) {
					textLoading(application, processReceivedTexts, true);
				} else {

					promise = textLoading(application, undefined, false);
					promise.then(function(result) {
						 processReceivedTexts(result);
					}, function(error) {
						deferred.reject(createErrorMessageObject('5201'));
					});
				}

			} else {
				deferred.resolve({});
			}

			return deferred.promise();
		}
		function createText(data, callback, bAsync) {
			var application = data.Application;
			if (data.TextElement === undefined || !sap.apf.utils.isValidGuid(data.TextElement)) {
				data.TextElement = sap.apf.utils.createPseudoGuid();
			}

			initTexts(application, bAsync).done(function() {
				var textTable = applicationTextsTable.getItem(application);
				textTable.setItem(data.TextElement, data);
				callback(data, getMetadata());
			}).fail(function() {
				callback(undefined, getMetadata(), createErrorMessageObject('5201'));
			})
		}
		// handling of configurations
		function listConfigurations(application, callback) {
			var i, configurations;
			var applicationNamespace = getApplicationNamespace(application);
			var promise = connector.listContent(applicationNamespace, 'CUSTOMER');
			promise.then(function(result) {
				var files = result.response;
				configurations = [];
				for(i = 0; i < files.length; i++) {
					if (files[i].fileType === "apfconfiguration") {
						configurations.push(files[i].name);
					}
				}
				callback(configurations);
			}, function(error) {
				callback([]);
			});
		}
		function updateTexts(applicationGuid, callback, doNotReadTexts) {
			function upsertTexts() {
				var textPropertyFile = sap.apf.utils.renderHeaderOfTextPropertyFile(applicationGuid, messageHandler);
				textPropertyFile = textPropertyFile + sap.apf.utils.renderTextEntries(textsTable, messageHandler);
				var promiseForUpdateTexts = connector.upsert(applicationNamespace, 'text', 'properties', "CUSTOMER", textPropertyFile, 'text/plain');
				promiseForUpdateTexts.then(function(result) {
					callback(getMetadata());
				}, function(error) {
					callback(getMetadata(), createErrorMessageObject('5201'));
				});
			}
			var applicationNamespace = getApplicationNamespace(applicationGuid);
			var textsTable = applicationTextsTable.getItem(applicationGuid);
			if (!textsTable) {
				callback(getMetadata());
				return;
			}
			if (doNotReadTexts) {
				upsertTexts();
			} else {
				var promise = textLoading(applicationGuid, undefined, false);
				promise.then(function(result) {
					var textFile =  (result && result.response) || (result && result.responseText) || "";
					var parseResult = sap.apf.utils.parseTextPropertyFile(textFile, {
						instance : {
							messageHandler : messageHandler
						}
					});
					parseResult.TextElements.forEach(function(text) {
						textsTable.setItem(text.TextElement, text);
					});
					upsertTexts();
				}, function(error) {
					callback(getMetadata(), createErrorMessageObject('5201'));
				});
			}
		}
		function updateConfigurationTable(application, configuration, callback) {
			var applicationNamespace = getApplicationNamespace(application);
			var promiseForMetadata = connector.getFileAttributes(applicationNamespace, configuration, 'apfconfiguration', "CUSTOMER");
			promiseForMetadata.then(function(result) {
				var configMetadata = result.response;
				var applicationHashtable = applicationConfigurationsTable.getItem(application);
				if (applicationHashtable === undefined) {
					applicationHashtable = new sap.apf.utils.Hashtable(inject.instance.messageHandler);
				}
				applicationHashtable.setItem(configuration, configMetadata);
				applicationConfigurationsTable.setItem(application, applicationHashtable);
				updateTexts(application, callback);
			}, function(error) {
				callback(undefined, getMetadata(), createErrorMessageObject('5201'));
			});
		}
		function updateConfiguration(configurationData, callback) {
			var applicationGuid = configurationData.Application;
			var configurationGuid = configurationData.AnalyticalConfiguration;
			var analyticalConfiguration = JSON.parse(configurationData.SerializedAnalyticalConfiguration);
			var applicationNamespace = getApplicationNamespace(applicationGuid);
			var promiseForApplicationData = connector.getStaticResource(applicationNamespace, "metadata", "apfapplication");
			promiseForApplicationData.then(function(result) {
				var configHeader = {
					Application : applicationGuid,
					ApplicationName : result.response.ApplicationName,
					SemanticObject : result.response.SemanticObject,
					AnalyticalConfiguration : configurationGuid,
					AnalyticalConfigurationName : configurationData.AnalyticalConfigurationName,
					//UI5Version : ,
					CreationUTCDateTime : configurationData.CreationUTCDateTime,
					LastChangeUTCDateTime : configurationData.LastChangeUTCDateTime
				};
				analyticalConfiguration = jQuery.extend(true, analyticalConfiguration, {
					configHeader : configHeader
				});
				analyticalConfiguration = JSON.stringify(analyticalConfiguration);

				var promiseForCreate = connector.upsert(applicationNamespace, configurationGuid, 'apfconfiguration', 'CUSTOMER', analyticalConfiguration, 'application/json');
				return promiseForCreate;
			}, function(error) {
				callback(undefined, getMetadata(), createErrorMessageObject('5201'));
			}).then(function(result) {
				updateConfigurationTable(applicationGuid, configurationGuid, callback);
			}, function(error) {
				callback(getMetadata(), createErrorMessageObject('5201'));
			});
		}
		function createConfiguration(configurationData, callback, options) {

			var layer = determineLayerFromOptions(options);
			
			function createAnalyticalConfigurationInLrep(applicationGuid, configurationGuid, AnalyticalConfigurationName, analyticalConfiguration, callback) {
				var applicationNamespace = getApplicationNamespace(applicationGuid);
				var promiseForCreate = connector.upsert(applicationNamespace, configurationGuid, 'apfconfiguration', layer, analyticalConfiguration, 'application/json');
				promiseForCreate.then(function(result) {
					updateConfigurationTable(applicationGuid, configurationGuid, function(response, data, messageObject) {
						
						if (!messageObject) {
							callback({
								AnalyticalConfiguration : configurationGuid,
								AnalyticalConfigurationName : configurationData.AnalyticalConfigurationName
							}, getMetadata());
						} else {
							callback(undefined, getMetadata(), createErrorMessageObject('5201'));
						}
						
					});
			
				}, function(error) {
					callback(undefined, getMetadata(), createErrorMessageObject('5201'));
				});
			}
			
			
			var applicationGuid = configurationData.Application;
			var configurationGuid = configurationData.AnalyticalConfiguration;
			if (configurationGuid === undefined || !sap.apf.utils.isValidGuid(configurationGuid)) {
				configurationGuid = sap.apf.utils.createPseudoGuid(32);
			}
			var analyticalConfiguration = JSON.parse(configurationData.SerializedAnalyticalConfiguration);
			var applicationNamespace = getApplicationNamespace(applicationGuid);
			var promiseForApplicationData = connector.getStaticResource(applicationNamespace, "metadata", "apfapplication");
			promiseForApplicationData.then(function(result) {
				var configHeader = {
					Application : applicationGuid,
					ApplicationName : result.response.ApplicationName,
					SemanticObject : result.response.SemanticObject,
					AnalyticalConfiguration : configurationGuid,
					AnalyticalConfigurationName : analyticalConfiguration.analyticalConfigurationName,
					//UI5Version : ,
					CreationUTCDateTime : configurationData.CreationUTCDateTime,
					LastChangeUTCDateTime : configurationData.LastChangeUTCDateTime
				};
				analyticalConfiguration = jQuery.extend(true, analyticalConfiguration, {
					configHeader : configHeader
				});
				analyticalConfiguration = JSON.stringify(analyticalConfiguration);
				createAnalyticalConfigurationInLrep(applicationGuid, configurationGuid, configurationData.AnalyticalConfigurationName, analyticalConfiguration, callback);

			}, function(error) {
				callback(undefined, getMetadata(), createErrorMessageObject('5201'));
			});
		}
		function deleteConfiguration(configurationData, callback, applicationGuid) {
			var configurationGuid = configurationData[0].value;
			messageHandler.check(configurationGuid !== undefined, "configuration may not be undefined");
			messageHandler.check(applicationGuid !== undefined, "application of configuration not found");
			var applicationNamespace = getApplicationNamespace(applicationGuid);
			var promiseForDelete = connector.deleteFile(applicationNamespace, configurationGuid, 'apfconfiguration', 'CUSTOMER');
			promiseForDelete.then(function(result) {
				callback(getMetadata());
			}, function(error) {
				callback(getMetadata(), createErrorMessageObject('5201'));
			});
		}
		function renameProperties(applicationGuid, applicationProperties) {
			var i = 0;
			var data = {
				Application : applicationGuid
			};
			var propertyName, propertyValue;
			for(i = 0; i < applicationProperties.length; i++) {
				propertyName = applicationProperties[i].name;
				propertyValue = applicationProperties[i].value;
				if (propertyName === "apfdt-applname") {
					propertyName = "ApplicationName";
				} else if (propertyName === 'createdAt') {
					propertyName = "CreationUTCDateTime";
				} else if (propertyName === 'createdBy') {
					propertyName = "CreatedByUser";
				} else if (propertyName === 'lastChangedAt') {
					propertyName = "LastChangeUTCDateTime";
				} else if (propertyName === 'lastChangedBy') {
					propertyName = "LastChangedByUser";
				} else if (propertyName === "apfdt-configname") {
					propertyName = 'AnalyticalConfigurationName';
				} else if (propertyName === 'size' || propertyName === 'layer') {
					continue;
				}
				data[propertyName] = propertyValue;
			}
			return data;
		}
		function createApplication(applicationData, callback, options) {
			messageHandler.check(applicationData.ApplicationName !== undefined && applicationData.ApplicationName !== "", "Valid application name is required");
			var applicationGuid = applicationData.Application;
			if (applicationGuid === undefined || !sap.apf.utils.isValidGuid(applicationGuid)) {
				applicationGuid = sap.apf.utils.createPseudoGuid(32);
			}
			var content = JSON.stringify({
				ApplicationName : applicationData.ApplicationName,
				SemanticObject : applicationData.SemanticObject,
				Application : applicationGuid
			});
			
			var textfile = sap.apf.utils.renderHeaderOfTextPropertyFile(applicationGuid, messageHandler);
			var layer = determineLayerFromOptions(options);
			 
			function errorResponse() {
				callback(undefined, getMetadata(), createErrorMessageObject('5201'));
			}
			var applicationNamespace = getApplicationNamespace(applicationGuid);
			var promiseForMetadataUpsert = connector.upsert(applicationNamespace, 'metadata', 'apfapplication', layer, content, 'application/json');
			promiseForMetadataUpsert.then(function(metadataUpsertResult) {

				return connector.upsert(applicationNamespace, 'text', 'properties', layer, textfile, 'text/plain');
			}, errorResponse).then(function(textUpsertResult) {
				applicationTextsTable.setItem(applicationGuid, new sap.apf.utils.Hashtable(inject.instance.messageHandler));
				callback({
					Application : applicationGuid,
					ApplicationName : applicationData.ApplicationName,
					SemanticObject : applicationData.SemanticObject
				}, getMetadata());
			}, errorResponse);
		}
		function updateApplication(applicationData, callback) {
			messageHandler.check(applicationData.ApplicationName !== undefined && applicationData.ApplicationName !== "", "Valid application name is required");
			var applicationGuid = applicationData.Application;
			var content = JSON.stringify({
				ApplicationName : applicationData.ApplicationName,
				SemanticObject : applicationData.SemanticObject,
				Application : applicationGuid
			});
			function errorResponse() {
				callback(undefined, createErrorMessageObject('5201'));
			}
			var applicationNamespace = getApplicationNamespace(applicationGuid);
			var promiseForUpdateApplication = connector.upsert(applicationNamespace, 'metadata', 'apfapplication', 'CUSTOMER', content, 'application/json');
			promiseForUpdateApplication.then(function(metadataUpdateResult) {
				callback({
					Application : applicationGuid,
					ApplicationName : applicationData.ApplicationName,
					SemanticObject : applicationData.SemanticObject
				});
			}, errorResponse);
		}
		function deleteApplication(applicationData, callback) {
			var applicationGuid = applicationData[0].value;
			function fnError(oError) {
				var messageObject = createMessageObjectFromErrorResponse(oError);
				callback(getMetadata(), messageObject);
			}
			var sApplicationNamespace = getApplicationNamespace(applicationGuid);
			var promiseGetFilesUnderApplication = connector.listContent(sApplicationNamespace, 'CUSTOMER');
			promiseGetFilesUnderApplication.then(function(result) {
				var aFiles = result.response;
				var aPromises = [];
				aFiles.forEach(function(file) {
					aPromises.push(connector.deleteFile(sApplicationNamespace, file.name, file.fileType, file.layer));
				});
				var promiseForDeleteApplicationContent = Promise.all(aPromises);
				return promiseForDeleteApplicationContent;
			}, fnError).then(function(result) {
				callback(getMetadata());
			}, fnError);
		}
		function createMessageObjectFromErrorResponse(oError) {
			var messageObject;
			if (oError.messageObject && oError.messageObject.getCode) {
				messageObject = oError.messageObject;
			} else if (oError.response && oError.response.statusCode && oError.response.statusCode >= 400) { //Bad HTTP request returned status code {0} with status text {1}
				messageObject = messageHandler.createMessageObject({
					code : '11005',
					aParameters : [ oError.response.statusCode.toString(), oError.response.statusText ]
				});
			} else {
				messageObject = messageHandler.createMessageObject({ //Unknown server error.
					code : '5201'
				});
			}
			messageHandler.putMessage(messageObject);
			return messageObject;
		}
		function readCollectionOfApplications(callback) {
			function fnError(error) {
				callback(undefined, getMetadata(), messageHandler.createMessageObject({
					code : '5201'
				}));
			}
			
			var promiseForListApplications = connector.listContent(namespace, 'CUSTOMER');
			var numberOfValidApplications = 0;
			var promisesForAllValidApplications = [];
			promiseForListApplications.then(function(result) {
				var numberOfApplications = result.response.length;
				for(var i = 0; i < numberOfApplications; i++) {
					var applicationGuid = result.response[i].name;
					if (sap.apf.utils.isValidPseudoGuid(applicationGuid)) {
						var applicationNamespace = getApplicationNamespace(applicationGuid);
						var promiseForApplicationData = connector.getStaticResource(applicationNamespace, 'metadata', 'apfapplication');
						numberOfValidApplications++;
						promisesForAllValidApplications.push(promiseForApplicationData);
					}
				}
				return Promise.all(promisesForAllValidApplications);
			}, fnError).then(function(result) {
				var applications = [];
				var promiseResponse = result;
				if (promiseResponse.length === undefined && numberOfValidApplications > 0) {
					//needed for testing
					for(var j = 0; j < numberOfValidApplications; j++) {
						applications.push(promisesForAllValidApplications[j].response);
					}
				}
				var i;
				for(i = 0; i < promiseResponse.length; i++) {
					applications.push(promiseResponse[i].response);
				}
				callback(applications, getMetadata());
			}, fnError);
		}
		function readConfigurationsSync(callback, configuration, application, selectList, options) {
			// 
			
			var layer = determineLayerFromOptions(options);
			var mOptions = {
				async : false,
				complete : function(result) {
					var data = {};
					data.SerializedAnalyticalConfiguration = result.responseText;
					callback(data, getMetadata());
				}
			};
			var aParams = [];
			var promiseForGetConfiguration;
			var sRequestPath = "/sap/bc/lrep/content/";
			inject.instance.messageHandler.check(selectList === undefined || selectList.indexOf("SerializedAnalyticalConfiguration") >= 0, "layered repository proxy - read configuration async without analytical configuration - not supported call");

			sRequestPath += namespace + "/" + application + '/' + configuration + '.apfconfiguration';
			
			if (layer) {
				aParams.push({
					name : "layer",
					value : layer
				});
			}
			
			sRequestPath += connector._buildParams(aParams);
			promiseForGetConfiguration = connector.send(sRequestPath, 'GET', {}, mOptions);
			promiseForGetConfiguration.then(function(result) {

			}, function(error) {
				callback(undefined, getMetadata(), createErrorMessageObject('5201'));
			});
		}
		function init() {
			if (inject.constructor && inject.constructor.LrepConnector) {
				connector = inject.constructor.LrepConnector.createConnector();
			} else {
				connector = sap.ui.fl.LrepConnector.createConnector();
			}
			if (!connector._sClient) {
				connector._sClient = coreApi.getStartParameterFacade().getSapClient();
			}
		}
		/**
		 * @private
		 * @returns {sap.ui.fl.LrepConnector} connector
		 */
		this.getConnector = function() { return connector; };
		/**
		 * odata get operation for specific single entity (application or configuration)
		 * @param {string} entitySet value from sap.apf.core.constants.entitySets
		 * @param {function} callback function of form fn(entityData, metadata, messageObject)
		 * @param {object[]} [inputParameters]
		 * @param {string[]} [selectList] holds all properties, that shall be in the select list
		 * @param {boolean} [async] Boolean value has to be set to false, if request should be send synchronously. Default value is true. 
		 * @param {string} application guid of the Application
		 * @param {string} options.layer has values VENDOR, PARTNER, CUSTOMER, and ALL, if the highest conf shall be read.
		 */
		this.readEntity = function(entitySetName, callback, inputParameters, selectList, async, application, options) {

			var configuration = inputParameters[0].value;
			var applicationNamespace = getApplicationNamespace(application);
			var promises = [];
			var serializedConfigurationRequested = false;
			var metadataIndex = 1;
			var configurationDataIndex = 0;
			var metadata;
			var applicationHashtable = applicationConfigurationsTable.getItem(application);
			var promiseForRead;
			var data;
			var i;
			var numSelections;
			var resultingData;
			var selection;
			var configFile;
			var layer = determineLayerFromOptions(options);
				
			inject.instance.messageHandler.check(entitySetName === 'configuration', "layered repository proxy - only read entity of configuration supported");

			if (async !== undefined && async === false) {
				return readConfigurationsSync(callback, configuration, application, selectList, options);
			}

			if (selectList === undefined || selectList.indexOf("SerializedAnalyticalConfiguration") >= 0) {
				serializedConfigurationRequested = true;
				var promiseForGetConfiguration = connector.getStaticResource(applicationNamespace, configuration, 'apfconfiguration');
				promises.push(promiseForGetConfiguration);
			} else {
				metadataIndex = 0;
			}

			if (applicationHashtable === undefined) {
				applicationHashtable = new sap.apf.utils.Hashtable(inject.instance.messageHandler);
			}
			metadata = applicationHashtable.getItem(configuration);
			if (metadata === undefined) {
				var promiseForGetConfigurationMetadata = connector.getFileAttributes(applicationNamespace, configuration, 'apfconfiguration', layer);
				promises.push(promiseForGetConfigurationMetadata);
			}
			promiseForRead = Promise.all(promises);
			promiseForRead.then(function(aResults) {
				applicationHashtable = applicationConfigurationsTable.getItem(application);
				if (applicationHashtable === undefined) {
					applicationHashtable = new sap.apf.utils.Hashtable(inject.instance.messageHandler);
				}
				metadata = applicationHashtable.getItem(configuration);
				if (metadata === undefined) {
					metadata = aResults[metadataIndex].response;
				}
				applicationHashtable.setItem(configuration, metadata);
				applicationConfigurationsTable.setItem(application, applicationHashtable);
				data = renameProperties(application, metadata);
				if (serializedConfigurationRequested) {
					configFile = aResults[configurationDataIndex].response;
					data.SerializedAnalyticalConfiguration = JSON.stringify(configFile);
					data = jQuery.extend({}, true, configFile, data);
				}
				data.AnalyticalConfiguration = configuration;
				if (selectList && selectList.length !== 0) {

					numSelections = selectList.length;
					resultingData = {};
					for(i = 0; i < numSelections; i++) {
						selection = selectList[i];
						resultingData[selection] = data[selection];
					}
					data = resultingData;
				}
				callback(data, getMetadata());
			}, function(error) {
				callback(undefined, getMetadata(), createErrorMessageObject('5201'));
			});

		};
		/**
		 * multiple change operations in batch
		 * @param {object[]} requestConfigurations with properties entitySetName, filter, selectList, inputParameters, method
		 * @param {function} callback with parameters undefined or messageObject in case of Error
		 * @param {string} application guid associated with the texts to be deleted
		 */
		this.doChangeOperationsInBatch = function(requestConfigurations, callback, application) {
			function callbackFromUpdateTexts(metadata, messageObject) {
				callback(messageObject);
			}
			var i, request;
			function doNothing() {
			}
			initTexts(application).then(function() {
				for(i = 0; i < requestConfigurations.length; i++) {
					request = requestConfigurations[i];
					request.application = application;
					if (request.method === 'DELETE' && request.entitySetName === 'texts') {
						deleteText(request, doNothing);
					} else if (request.method === 'POST' && sap.apf.utils.isValidPseudoGuid(request.data.TextElement)) {
						createText(request.data, doNothing);
					} else {
						createText(request.data, doNothing);
					}
				}
				updateTexts(application, callbackFromUpdateTexts, true);
			}).fail(function(messageObject) {
				callback(messageObject);
			});

		};
		/**
			 * multiple reads in a batch operation
			 * @param {object[]} requestConfigurations with properties entitySetName, filter, selectList, inputParameters, method
			 * @param {function} callback with parameters data - array with results and messageObject
			 * @param {boolean} [async] Boolean value has to be set to false, if request should be send synchronously. Default value is true. 
			 */
		this.readCollectionsInBatch = function(requestConfigurations, callback, async) {
			var that = this;
			var numberOfRequests = requestConfigurations.length;
			var result = [];
			var requestsFulfilled = 0;
			function createCallbackForReadCollection(callNumber) {
				function callbackFromProcessRequest(data, metadata, messageObject) {
					if (messageObject) {
						callback(undefined, messageObject);
					} else {
						requestsFulfilled++;
						result[callNumber] = data;
						if (requestsFulfilled === numberOfRequests) {
							callback(result);
						}
					}
				}
				return callbackFromProcessRequest;
			}
			for(var i = 0; i < numberOfRequests; i++) {
				var request = requestConfigurations[i];
				that.readCollection(request.entitySetName, createCallbackForReadCollection(i), request.inputParameters, request.selectList, request.filter, async);
			}
		};
		/**
		* odata get operation for specific type (application or configuration)
		* @param {string} entitySetName value from sap.apf.core.constants.entitySets
		* @param {function} callback function of form fn(result, metadata, messageObject)
		* @param {object[]|undefined} [inputParameters]
		* @param {string[]|undefined} [selectList] holds all properties, that shall be in the select list
		* @param {sap.apf.core.utils.Filter} [filter] additional filter expressions
		* @param {boolean} [async] Boolean value has to be set to false, if request should be send synchronously. Default value is true. 
		*/
		this.readCollection = function(entitySetName, callback, inputParameters, selectList, filter, async) {
			var that = this;
			var aTerms, application, result;
			var promiseForGetTexts;

			var handleReceivedTexts = function(result) {
				var textTable = new sap.apf.utils.Hashtable(inject.instance.messageHandler);
				var texts = [];
				var textFile =  (result && result.response) || (result && result.responseText) || "";
				
				var parseResult = sap.apf.utils.parseTextPropertyFile(textFile, { instance : { messageHandler : messageHandler }});
				
				textTable = new sap.apf.utils.Hashtable(inject.instance.messageHandler);
				parseResult.TextElements.forEach(function(text) {
					textTable.setItem(text.TextElement, text);
					texts.push(text);
				});
				
				applicationTextsTable.setItem(application, textTable);
				callback(texts, getMetadata());
			};

			if (entitySetName === 'application') {
				messageHandler.check(!inputParameters && !selectList && !filter, "unsupported parameters when calling readCollection for application");
				messageHandler.check(async === undefined || async === true, 'no async readCollection of application supported');
				readCollectionOfApplications(callback);
			} else if (entitySetName === 'texts') {
				aTerms = filter.getFilterTermsForProperty('Application');
				application = aTerms[0].getValue();

				if (async !== undefined && async === false) {
					textLoading(application, handleReceivedTexts, true);
				} else {
					promiseForGetTexts = textLoading(application, undefined, false);

					promiseForGetTexts.then(function(result) {
						handleReceivedTexts(result);
					}, function(error) {
						var messageObject = createMessageObjectFromErrorResponse(Error);
						callback(undefined, getMetadata(), messageObject);
					});
				}
			} else if (entitySetName === 'configuration') {
				aTerms = filter.getFilterTermsForProperty('Application');
				application = aTerms[0].getValue();
				result = [];
				var callbackFromListConfigurations = function(configurations, messageObject) {
					function callbackFromReadEntity(data, metadata, messageObject) {
						result.push(data);
						if (result.length === configurations.length) {
							callback(result, getMetadata(), messageObject);
						}
					}
					if (configurations.length === 0) {
						callback(result, getMetadata(), messageObject);
					}
					configurations.forEach(function(configuration) {
						that.readEntity('configuration', callbackFromReadEntity, [ {
							value : configuration
						} ], selectList, async, application);
					});
				};
				listConfigurations(application, callbackFromListConfigurations);
			}
		};
		/**
		 * odata delete operation for specific type (application or configuration)
		 * @param {string} entitySetName value from sap.apf.core.constants.entitySets
		 * @param {object[]} [inputParameters]
		 * @param {function} callback function of form fn(metadata, messageObject)
		 * @param {sap.apf.core.utils.Filter} [filter]
		 * @param {string} application guid of the Application
		 */
		this.remove = function(entitySetName, inputParameters, callback, filter, application) {
			if (entitySetName === 'application') {
				deleteApplication(inputParameters, callback);
			} else if (entitySetName === 'configuration') {
				deleteConfiguration(inputParameters, callback, application);
			} else {
				messageHandler.check(false, 'the remove operation on entity set ' + entitySetName + ' is currently not supported by the lrep proxy');
			}
		};
		/**
		 * odata post operation for specific type (application or configuration)
		 * @param {string} entitySetName value from sap.apf.core.constants.entitySets
		 * @param {object} applicationData object with properties of object, that shall be posted
		 * @param {function} callback function of form fn(result, metadata, messageObject)
		 * @param {undefined|boolean} async asynchronous operation default is false
		 * @param {object} options special options for the layered repository
		 */
		this.create = function(entitySetName, data, callback, async, options) {
			if (entitySetName === 'application') {
				messageHandler.check(async === undefined || async === true, 'no async creation of application supported');
				createApplication(data, callback, options);
			} else if (entitySetName === 'configuration') {
				messageHandler.check(async === undefined || async === true, 'no async creation of configuration supported');
				createConfiguration(data, callback,  options);
			} else if (entitySetName === 'texts' && async === false) {
				createText(data, callback, false);
			} else {
				messageHandler.check(false, 'the create operation on entity set ' + entitySetName + ' is currently not supported by the lrep proxy');
			}
		};
		
		/**
		 * odata put operation for specific type (application or configuration)
		 * @param {string} entitySetName value from sap.apf.core.constants.entitySets
		 * @param {object} data object with properties of object, that shall be posted
		 * @param {function} callback function of form fn( metadata, messageObject)
		 * @param {object[]} [inputParameters]
		 */
		this.update = function(entitySetName, data, callback, inputParameters) {
			if (entitySetName === 'configuration') {
				updateConfiguration(data, callback);
			} else if (entitySetName === 'application') {
				updateApplication(data, callback);

			} else {
				messageHandler.check(false, 'the update operation on entity set ' + entitySetName + ' is currently not supported by the lrep proxy');
			}
		};
		init();
	};
}());

}; // end of sap/apf/core/layeredRepositoryProxy.js
if ( !jQuery.sap.isDeclared('sap.apf.core.messageHandler') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.apf.core.messageHandler");




/** 
 * @class MessageHandler of APF
 */
sap.apf.core.MessageHandler = function(bLogOnCreate) {	

	// Private Vars
	var that = this;
	var oTextResourceHandler;
	var aLogMessages = [];
	var nCurrentLogMessageNumber = 0;
	var idRegistry;
	var fnMessageCallback;
	var fnApplicationMessageCallback = function() {};
	var bOnErrorHandling = false;
	var bDoNotFurtherProcessException = false;
	var bDuringLogWriting = false;
	var bHintForFirefoxErrorIsThrown = false;
	var sUniqueErrorId = "";

	var oDefaultMessageConfiguration = {
		code : sap.apf.core.constants.message.code.errorUnknown,
		severity : sap.apf.core.constants.message.severity.error,
		rawText : "Unknown Error occurred"
	};

	// Public Func
	/**
	 * @description Creates a message object. The message processing is started with sap.api.putMessage, which expects as argument a message object 
	 * of type sap.apf.core.MessageObject. So first create the message object and afterwards call sap.apf.api.putMessage with the message object as argument.
	 * @param {object} oConfig Configuration of the message.
	 * @param {string} oConfig.code The message is classified by its code. The code identifies an entry in the message configuration.
	 * @param {string[]} oConfig.aParameters Additional parameters for the message. The parameters are filled into the message text, when the message
	 * will be processed by the message handler. 
	 * @param {object} oConfig.oCallingObject Reference of the calling object. This can be used later to visualize on the user interface, 
	 * where the error happened, e.g. path or step.
	 * @returns {sap.apf.core.MessageObject}
	 */
	this.createMessageObject = function(oConfig) {
		if(bLogOnCreate){
			var oMessageObject = new sap.apf.core.MessageObject(oConfig);
			if (oMessageObject.getCode() === undefined) {
				oMessageObject.setCode(sap.apf.core.constants.message.code.errorUnknown);
			}
			enrichInfoInMessageObject.bind(this)(oMessageObject);	
			logMessage(oMessageObject, 1);
		}
		return new sap.apf.core.MessageObject(oConfig);
	};

	/**
	 * @description The handling of the window.onerror by the message handler is either switched on or off.
	 * @param {boolean} bOnOff
	 * @returns {undefined}
	 */
	this.activateOnErrorHandling = function(bOnOff) {
		/*global window: false */
		bOnErrorHandling = bOnOff;
		if (bOnErrorHandling === true) {
			jQuery(window).on("error", handleOwnErrors);
			
		} else {
			jQuery(window).off("error");
		}
	};

	/**
	 * @description Injection setter. Injection is optional. If not injected, putMessage doesn't retrieve the text but instead reacts with some generic message. 
	 * @param {object} textResourceHandler
	 */
	this.setTextResourceHandler = function(textResourceHandler) {
		oTextResourceHandler = textResourceHandler;
	};

	/**
	 * @description Loads all message from the  configuration. This method is called from the resource path handler.
	 * @param {object[]} aMessages Array with message configuration objects.
	 * @param {boolean} bResetRegistry  Flag to reset registry.
	 * @returns {undefined}
	 */
	this.loadConfig = function(aMessages, bResetRegistry) {
		if (idRegistry === undefined || bResetRegistry) {
			idRegistry = new sap.apf.utils.Hashtable(that);
		}
		for(var i = 0; i < aMessages.length; i++) {
			loadMessage(aMessages[i]);
		}
	};

	/**
	 * @description Sets a callback function, so that a message can be further processed. This includes the display of the message on the user interface 
	 * and throwing an error to stop processing in case of errors.
	 * @param {function} fnCallback Either a function or undefined. The callback function will be called  with the messageObject of type 
	 * sap.apf.core.MessageObject as only parameter.
	 * @returns {undefined}
	 */
	this.setMessageCallback = function(fnCallback) {
		if (fnCallback !== undefined && typeof fnCallback === "function") {
			fnMessageCallback = fnCallback;
		} else {
			fnMessageCallback = undefined;
			// log technical error - putMessage with technical error
		}
	};

	/**
	 * @description Sets an application callback function, which allows applications to register a message callback.
	 * @param {function} fnCallback Either a function or undefined. The callback function will be called  with the messageObject of type 
	 * sap.apf.core.MessageObject as only parameter.
	 * @returns {undefined}
	 */
	this.setApplicationMessageCallback = function(fnCallback) {
		if (fnCallback !== undefined && typeof fnCallback === "function") {
			fnApplicationMessageCallback = fnCallback;
		} else {
			fnApplicationMessageCallback = function() {};
			this.putMessage(this.createMessageObject({
				code : "5031"
			}));
		}
	};

	/**
	 * @description A message is passed to the message handler for further processing. This can be an information, warning or error. 
	 * @param {sap.apf.core.MessageObject} oMessageObject The message object shall be created by method sap.apf.api.createMessageObject.
	 * @returns {undefined}
	 */
	this.putMessage = function(oMessageObject) {
		var oPreviousMessageObject;
		var nMaxPreviousObjects = 0;
		var oMessageObjectFatal;
		
		if (oMessageObject.getCode() === undefined) {
			oMessageObject.setCode(sap.apf.core.constants.message.code.errorUnknown);
		}
		
		enrichInfoInMessageObject.bind(this)(oMessageObject);
		
		if (oMessageObject.getSeverity() === sap.apf.core.constants.message.severity.fatal) {
			
			oMessageObjectFatal = that.createMessageObject({ code : sap.apf.core.constants.message.code.errorExitTriggered });
			enrichInfoInMessageObject.bind(this)(oMessageObjectFatal);
			oMessageObjectFatal.setSeverity(sap.apf.core.constants.message.severity.fatal);
			if (oMessageObjectFatal.getMessage() === "") {
				oMessageObjectFatal.setMessage("You must log out of the application due to a critical error");
			}
		}
		

		oPreviousMessageObject = oMessageObject.getPrevious();
		while (oPreviousMessageObject !== undefined && oPreviousMessageObject.type && oPreviousMessageObject.type === "messageObject" && nMaxPreviousObjects < 10) {
			if (oPreviousMessageObject.getCode() === undefined) {
				oPreviousMessageObject.setCode(sap.apf.core.constants.message.code.errorUnknown);
			}
			enrichInfoInMessageObject.bind(this)(oPreviousMessageObject);
			oPreviousMessageObject = oPreviousMessageObject.getPrevious();
			nMaxPreviousObjects++;
		}
		
		if (oMessageObjectFatal !== undefined) {
			oMessageObjectFatal.setPrevious(oMessageObject);
			oMessageObject = oMessageObjectFatal;
		}
		
		if(!bLogOnCreate){
			logMessage(oMessageObject, 10);	
		}

		if (bDoNotFurtherProcessException) { // no cycles from ui
			return;
		}
		
		if (fnMessageCallback !== undefined) {
			//noinspection JSUnusedAssignment
            bDoNotFurtherProcessException = true; // exception could be raised
			fnMessageCallback(oMessageObject, fnApplicationMessageCallback);
			bDoNotFurtherProcessException = false;
		} 
		//leave current execution control flow
		if (oMessageObject.getSeverity() === sap.apf.core.constants.message.severity.fatal) {
			if (sap.ui.Device.browser.firefox) {
				bHintForFirefoxErrorIsThrown = true;
			}
			
			throw new Error(sUniqueErrorId);
		}
	};

	/**
	 * @description Test whether condition is violated and puts a corresponding message.
	 * @param {boolean} booleExpression Boolean expression, that is evaluated.
	 * @param {string} sMessage A text, that is included in the message text
	 * @param {string} [sCode] Error code 5100 is default, 5101 for warning. Other codes can be used, if the default message text is not specific enough.
	 * @returns {undefined}
	 */
	this.check = function(booleExpression, sMessage, sCode) {
		var sErrorCode = sCode || sap.apf.core.constants.message.code.errorCheck;

		if (!booleExpression) {
			var oMessageObject = this.createMessageObject({
				code : sErrorCode,
				aParameters : [ sMessage ]
			});
			that.putMessage(oMessageObject);
		}
	};

	/**
	 * @description Returns a reference of a message configuration object. Not a copy.
	 * @param {string} sErrorCode
	 * @returns {object} oConfiguration
	 */
	this.getConfigurationByCode = function(sErrorCode) {
		if (idRegistry === undefined) { //before loading the configuration
			return undefined;
		}
		return idRegistry.getItem(sErrorCode);
	};

	/**
	 * @description Returns a copy of APF log messages. The last message put is on first position in array.
	 * @returns {string[]}
	 */
	this.getLogMessages = function() {
		return jQuery.extend(true, [], aLogMessages);
	};

	/**
	 * @description Resets the message handler: Unset the message callback function, loads default message configuration and cleans message log. 
	 * @returns {undefined}
	 */
	this.reset = function() {
		idRegistry = undefined;
		fnMessageCallback = undefined;
		fnApplicationMessageCallback = undefined;
		aLogMessages = [];
	};

	// Private Functions
	function isOwnErrorEvent(oEvent) {

		if (sap.ui.Device.browser.firefox) {
			return bHintForFirefoxErrorIsThrown;
		} 
		return (oEvent.originalEvent && oEvent.originalEvent.message && oEvent.originalEvent.message.search(sUniqueErrorId) > -1);
	}
    function isErrorEventFromOtherApfInstance(oEvent) {
    	return (oEvent.originalEvent && oEvent.originalEvent.message && oEvent.originalEvent.message.search(sUniqueErrorId) === -1 
    			&& oEvent.originalEvent.message.search(sap.apf.core.constants.message.code.suppressFurtherException) > -1);
    }
    function getUniqueErrorId() {
    	var date = new Date();
	    var uniqueInteger = Math.random( ) * date.getTime();
		return sap.apf.core.constants.message.code.suppressFurtherException + uniqueInteger;
    }
	function isKnownCodeWithoutConfiguration(sCode) {
		var sNumber = parseInt(sCode, 10);
		
		if (sNumber == sap.apf.core.constants.message.code.errorExitTriggered ) {
			return true;
		} else if (sNumber >= sap.apf.core.constants.message.code.errorUnknown && sNumber <= sap.apf.core.constants.message.code.warningAnalyticalConfig) {
			return true;
		} 
		return false;
	}

	function isFatalMessageWithoutConfiguration(sCode) {
		var sNumber = parseInt(sCode, 10);
		if (sNumber > sap.apf.core.constants.message.code.errorUnknown && sNumber <= sap.apf.core.constants.message.code.errorInAnalyticalConfig) {
			return true;
		}
		return false;
	}
	
	function isWarningWithoutConfiguration(sCode) {
		var sNumber = parseInt(sCode, 10);
		if (sNumber === sap.apf.core.constants.message.code.warningAnalyticalConfig) {
			return true;
		}
		return false;
	}

	// Determine and set message text according to configuration
	function enrichInfoInMessageObject(oMessageObject) {
		var sCode = oMessageObject.getCode();

		var oMessageConfiguration = that.getConfigurationByCode(sCode);
		if (oMessageConfiguration === undefined) {
			oMessageConfiguration = jQuery.extend(true, {}, oDefaultMessageConfiguration);
			if (isKnownCodeWithoutConfiguration(sCode)) {
				if (oMessageObject.hasRawText()) {
					oMessageConfiguration.rawText = oMessageObject.getRawText();
				}
				oMessageConfiguration.rawText += ' ' + oMessageObject.getParameters();
				if (isFatalMessageWithoutConfiguration(sCode)) {
					oMessageConfiguration.severity = sap.apf.core.constants.message.severity.fatal;
				} else if (isWarningWithoutConfiguration(sCode)) {
					oMessageConfiguration.severity = sap.apf.core.constants.message.severity.warning;
				}
			} else {
				oMessageConfiguration.rawText = "Message " + sCode + "  " + oMessageObject.getParameters() + " (Message Code has no Configuration)";
			}
			if (!isKnownCodeWithoutConfiguration(sCode)) {
				oMessageObject.setCode(oMessageConfiguration.code);
			}
		}
		if (oMessageConfiguration.severity !== undefined) {
			oMessageObject.setSeverity(oMessageConfiguration.severity);
		} else {
			oMessageObject.setSeverity(sap.apf.core.constants.message.severity.technError);
		}
		if (oMessageConfiguration.rawText) {
			oMessageObject.setMessage(oMessageConfiguration.rawText);
		} else {
			var aParameters = oMessageObject.getParameters();

			if (oMessageObject.getSeverity() === sap.apf.core.constants.message.severity.technError) {
				var sTechnText = that.getConfigurationByCode(oMessageConfiguration.code).text;
				if(!sTechnText){
					sTechnText = that.getConfigurationByCode(oMessageConfiguration.code).description;
				}
				var nParamIndex = 0;
				while (sTechnText.indexOf("{" + nParamIndex + "}") > -1) {
					if (typeof aParameters[nParamIndex] === "string") {
						sTechnText = sTechnText.replace("{" + nParamIndex + "}", aParameters[nParamIndex]);
					} else {
						sTechnText = sTechnText.replace("{" + nParamIndex + "}", "undefined");
					}
					nParamIndex++;
				}

				oMessageObject.setMessage(sTechnText);
			} else {
				try {
					if (oTextResourceHandler) {
						oMessageObject.setMessage(oTextResourceHandler.getMessageText(oMessageConfiguration.key, oMessageObject.getParameters()));
					} else {
						oMessageObject.setMessage("Message Code: " + sCode + " " + aParameters.toString());
					}
				} catch (oError) {
					oMessageObject.setMessage("Message Code: " + sCode + " " + aParameters.toString());
				}
			}
		}
	}
	function logMessage(oMessage, nMaxPreviousObjects) {
		var sLogPrefix = "APF message ";
		var sPreviousTxt = "";
		var nMaxPreviousObjectsInNextLog = nMaxPreviousObjects - 1;

		if (nMaxPreviousObjects === 0) {
			return;
		}
		// logging of previous message(s) first!
		var oPrevious = oMessage.getPrevious();
		if (oPrevious !== undefined) {
			logMessage(oPrevious, nMaxPreviousObjectsInNextLog);
			sPreviousTxt = " - (see previous message for more information)";
		}
		nCurrentLogMessageNumber++;
		var sLog = sLogPrefix + '(' + nCurrentLogMessageNumber + '): ' + oMessage.getCode() + " - " + oMessage.getMessage() + sPreviousTxt;
		if (bDuringLogWriting) {
			/*eslint-disable no-alert */
			alert("Fatal Error during Log Writing " + sLog); 
			/*eslint-enable no-alert */
			return;
		}
		bDuringLogWriting = true;

		//adds fatal log message on first position in array
		if (oMessage.getSeverity() === sap.apf.core.constants.message.severity.fatal) {
			if (aLogMessages.length < 2) { // do not show to many fatal messages!
				aLogMessages.unshift(sLog); 
			}
		}

		switch (oMessage.getSeverity()) {
			case sap.apf.core.constants.message.severity.warning:
				jQuery.sap.log.warning(sLog);
				break;
			case sap.apf.core.constants.message.severity.error:
				jQuery.sap.log.error(sLog);
				break;
			case sap.apf.core.constants.message.severity.fatal:
				jQuery.sap.log.error(sLog);
				break;
			case sap.apf.core.constants.message.severity.technError:
				jQuery.sap.log.error(sLog);
				break;
			default:
				jQuery.sap.log.info(sLog);
		}
		bDuringLogWriting = false;
	}
	function setItem(oItem) {
		that.check(oItem !== undefined && oItem.hasOwnProperty("code") !== false, "MessageHandler setItem: oItem is undefined or property 'code' is missing", sap.apf.core.constants.message.code.errorStartUp);
		var result = idRegistry.setItem(oItem.code, oItem);
		that.check((result === undefined), "MessageHandler setItem: Configuration includes duplicated codes", sap.apf.core.constants.message.code.errorStartUp);
	}
	function loadMessage(oMessage) {
		if (oMessage.type === undefined) {
			oMessage.type = "message";
		}
		setItem(oMessage);
	}
	// handle on error will be activated after initialization of the message
	// handler.
	function handleOwnErrors(oEvent) {
	
		var oMessage;
		var sMessage = "";
		var lineNumber = "";
		var sUrl = "";
		var sText = "";
		var bBrowserSupportErrorEvent = true;
		
		if (sap.ui.Device.browser.firefox) {
			bBrowserSupportErrorEvent = false;
		}
		
		if (bBrowserSupportErrorEvent && oEvent && oEvent.originalEvent) {
			sMessage = oEvent.originalEvent.message;
			sUrl = oEvent.originalEvent.filename;
			lineNumber = oEvent.originalEvent.lineno;
		}
		
		if (isOwnErrorEvent(oEvent)) {
			
			oEvent.stopImmediatePropagation();
			oEvent.preventDefault();
		} else if (isErrorEventFromOtherApfInstance(oEvent)) {
			return;
		} else if (bDoNotFurtherProcessException) {
			oMessage = new sap.apf.core.MessageObject({
				code : sap.apf.core.constants.message.code.errorStopProcessing
			});
			oMessage.setSeverity(sap.apf.core.constants.message.severity.error);
			sText = "Unknown exception happened during processing of error by callback function ";
			if (bBrowserSupportErrorEvent) {
				sText = sText + sMessage + " (source: " + sUrl + ":" + lineNumber + ")";
			}
			
			oMessage.setMessage(sText);
			logMessage(oMessage, 1);
		} else {
			oMessage = new sap.apf.core.MessageObject({
				code : sap.apf.core.constants.message.code.errorUnknown
			});
			oMessage.setSeverity(sap.apf.core.constants.message.severity.error);
			sText = "Unknown exception ";
			if (bBrowserSupportErrorEvent) {
				sText = sText + sMessage + " (source: " + sUrl + ":" + lineNumber + ")";
			}
			oMessage.setMessage(sText);
			logMessage(oMessage, 1);
		}
	}
	
	function initialize() {
		sUniqueErrorId = getUniqueErrorId(); 
	}
	
	initialize();
};
}; // end of sap/apf/core/messageHandler.js
if ( !jQuery.sap.isDeclared('sap.apf.core.metadata') ) {
/*global sap */
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.core.metadata");



/**
 * @class This class initializes the metadata and the annotations and merges them together. The class provides methods to access metadata information like parameters of an entity type and their
 *        data types.
 * @param {Object} oInject Injection of dependencies, which are Hashtable, MessageHandler, coreAi.
 * @param {string} sAbsolutePathToServiceDocument Absolute Path to service document like "/sap/hba/apps/wca/s/odata/wca.xsodata"
 */
sap.apf.core.Metadata = function (oInject, sAbsolutePathToServiceDocument) {
    'use strict';

    /**
     * @description Contains 'metadata'
     * @returns {String}
     */
    this.type = "metadata";
    // Private vars
    var that = this;
    var oCoreApi = oInject.coreApi;
    var aAllEntityTypes = [];
    var aAllAggregateProperties = [];
    var oHtPropertyMetadata = new oInject.hashtable(oInject.messageHandler);
    var oHtFilterableProperties = new oInject.hashtable(oInject.messageHandler);
    var oHtAllProperties = new oInject.hashtable(oInject.messageHandler);
    var oHtParameterEntitySetKeyProperties = new oInject.hashtable(oInject.messageHandler);
    var oHtEntityTypeMetadata = new oInject.hashtable(oInject.messageHandler);
    var oHtEntityTypeOfEntitySet = new oInject.hashtable(oInject.messageHandler);
    var oHtGetSapSemantics = new oInject.hashtable(oInject.messageHandler);
    var oHtAssociationByParameterEntitySet = new oInject.hashtable(oInject.messageHandler);
    var oHtAssociationByParameterEntityType = new oInject.hashtable(oInject.messageHandler);
    var oHtAssociationByAggregateEntitySet = new oInject.hashtable(oInject.messageHandler);
    var oHtEntityTypes = new oInject.hashtable(oInject.messageHandler);
    var ODataModel = oInject.ODataModel || sap.ui.model.odata.ODataModel;
    var bDeactivateFatalError = false;
    if (oInject.deactivateFatalError) {
        bDeactivateFatalError = true;
    }
    var oMetaModel;
    var sEntityTypeQualifier;
    var sEntityTypeAnnotationsPreFix;
    
    // Private functions
    /**
     * @description Returns all entity types of service documents that are referenced by an entity set
     * @returns {Array} - EntityTypes Returns entity types
     */
    function getEntityTypes() {
        return aAllEntityTypes;
    }

    function defineApiResult(input) {
    	var object;
        function moveToDataType(property) {
            if (!object.dataType) {
                object.dataType = {};
            }
            object.dataType[property] = object[property];
            delete object[property];
        }

        function map(sAlternativeName, property) {
            if (jQuery.isArray(object[property]) === true) {
                (object[property]).forEach(function(obj){
                    object[obj.name] = obj.value;
                });
                delete object[property];
            } else if (property !== "dataType" && typeof (object[property]) === "object") { // dataType is explicit set by the APF has not to be modified
                if (Object.keys(object[property]).length === 0) {
                    object[sAlternativeName] = "true";
                }
                jQuery.each(object[property], function(objProperty, itsValue){
                    object[sAlternativeName] = itsValue;
                });
                delete object[property];
            } else {
                object[sAlternativeName] = object[property];
            }
        }
        
        if(input === null){
         return {};
        }
        object = jQuery.extend(true, {}, input);
        jQuery.each(object, function( sProperty){
            switch (sProperty) {
                case 'type':
                    moveToDataType(sProperty);
                    break;
                case 'maxLength':
                    moveToDataType(sProperty);
                    break;
                case 'precision':
                    moveToDataType(sProperty);
                    break;
                default:
                    var sPropertyName = sProperty.split(".").pop();
                    if (sPropertyName.search("ISO") === 0) {
                        map(sPropertyName, sProperty);
                    } else {
                        map(sPropertyName.replace(/^./, sPropertyName[0].toLowerCase()), sProperty);
                    }
                    break;
            }
        });
        removePropertyAnnotations(object);
        return object;
    }
    
    function removePropertyAnnotations(property){
    	for(var i in property){
			if(/^sap:/.test(i)){
				delete property[i];
			}
		} 
    }

    function getParameterPropertiesFromEntityType(sEntityType, bOnlyKeyProperties) {
        if (oHtParameterEntitySetKeyProperties.hasItem(sEntityType) !== true) {
            var oEntityType;
            var oKeyProperties = {};
            var oResult = {allParameters: [], keyParameters: []};
            if (isParameterEntityType(sEntityType)){	
            	oEntityType = getEntityType(sEntityType);
	            if (oEntityType.key && oEntityType.key.propertyRef) {
	            	oEntityType.key.propertyRef.forEach(function (oPropRef) {
	                    oKeyProperties[oPropRef.name] = null;
	                });
	            }
	            oEntityType.property.forEach(function(oProperty){ 
			                var oParameter = defineApiResult(oProperty);
			                oParameter.isKey = oKeyProperties.hasOwnProperty(oParameter.name);
			                oResult.allParameters.push(oParameter);
			                if (oParameter.isKey) {
			                    oResult.keyParameters.push(oParameter);
			                }
			    });
	        }
            oHtParameterEntitySetKeyProperties.setItem(sEntityType, oResult);
        }
        if (!bOnlyKeyProperties) {
            return oHtParameterEntitySetKeyProperties.getItem(sEntityType).allParameters;
        }
        return oHtParameterEntitySetKeyProperties.getItem(sEntityType).keyParameters;
    }

    function getAllAggregatePropertiesOfEntityType(sEntityType) {
        var aPropertyNames = [];
        if (isParameterEntityType(sEntityType)) {
            sEntityType = getEntityTypeOfAggregateEntitySet(sEntityType);
        }
        if (isAggregateEntityType(sEntityType)){
	        var entityType = getEntityType(sEntityType);
	        entityType.property.forEach(function (property) {
	            aPropertyNames.push(property.name);
	        });
        }
        return aPropertyNames;
    }

    function getAllPropertiesOfExtendedEntityType(sEntityType) {
        var i;
        if (oHtAllProperties.hasItem(sEntityType) === true) {
            return oHtAllProperties.getItem(sEntityType);
        }
        var aAllProperties;
        var aPropertyNames = [];
        var aParameterNames = [];

        var sAggregateEntityType = getEntityTypeOfAggregateEntitySet(sEntityType);
        if(sAggregateEntityType && isAggregateEntityType(sAggregateEntityType)){
        	var oEntityType = getEntityType(sAggregateEntityType);
	        oEntityType.property.forEach( function(oProperty) {
	            aPropertyNames.push(oProperty.name);
	        });
        }

        var aParameters = getParameterPropertiesFromEntityType(sEntityType, false);
        for (i = 0; i < aParameters.length; i++) {
            aParameterNames.push(aParameters[i].name);
        }

        aAllProperties = aPropertyNames.concat(aParameterNames);

        oHtAllProperties.setItem(sEntityType, aAllProperties);
        return aAllProperties;
    }

    function getEntityTypeName(sEntitySet){
    	return oHtEntityTypeOfEntitySet.getItem(sEntitySet);
    }
    
    function determineEntityTypeName(sEntityTypeOrSetName) {

        var sEntityType;
        if (getEntityType(sEntityTypeOrSetName)){
            sEntityType = sEntityTypeOrSetName;
        } else {
            sEntityType = getEntityTypeName(sEntityTypeOrSetName);
            sEntityType = sEntityType || getEntityTypeName(sEntityTypeOrSetName + "Results"); // compatibility!!!
        }
        return sEntityType;
    }

    function getFilterablePropertiesFromEntityType(sEntityType) {
        if (oHtFilterableProperties.hasItem(sEntityType) === false) {
	        var aResult = [];
	        if(isAggregateEntityType(sEntityType)){
		        var oEntityType = getEntityType(sEntityType);
		        oEntityType.property.forEach(function(property){
		        	if(!(property["sap:filterable"] === "false" || property.filterable && property.filterable === "true")){
		        		aResult.push(property.name);
		        	}
		        });
	        }
	        oHtFilterableProperties.setItem(sEntityType, aResult);
        }
        return oHtFilterableProperties.getItem(sEntityType);
    }

    function isParameterEntityType(sEntityType) {
   		 return getSapSemantics(sEntityType) === "parameters";
    }
    
    function isAggregateEntityType(sEntityType) {
  		 return getSapSemantics(sEntityType) === "aggregate";
   }
    
    function getSapSemantics(sEntityType){
    	if(!oHtGetSapSemantics.hasItem(sEntityType)){
    		 var entityType = getEntityType(sEntityType);
    		 var result = entityType && entityType["sap:semantics"] || "undefined";
    		  oHtGetSapSemantics.setItem(sEntityType, result);
    	 }
    	 return  oHtGetSapSemantics.getItem(sEntityType);
    }

    function getPropertyMetadataFromEntityType(sEntityType, sPropertyName) {
        if (oHtPropertyMetadata.hasItem(sEntityType + sPropertyName) === false) {
        	var bIsParameterEntityType = isParameterEntityType(sEntityType);
            var entityType = getEntityType(sEntityType);
            var property = oMetaModel .getODataProperty(entityType, sPropertyName);
            if(!property && bIsParameterEntityType){
            	var sAggregateEntityType = getEntityTypeOfAggregateEntitySet(sEntityType);
            	entityType = getEntityType(sAggregateEntityType);
            	property = oMetaModel .getODataProperty(entityType, sPropertyName);
            }
            oHtPropertyMetadata.setItem(sEntityType + sPropertyName, defineApiResult(property));
        }
        return oHtPropertyMetadata.getItem(sEntityType + sPropertyName);
    }

    //KS sEntityType either from parameter entity set or aggregate entity set
    function getEntityTypeOfAggregateEntitySet(sEntityType) {
      	var oRelevantAssociation = oHtAssociationByParameterEntityType.getItem(sEntityType);
      	if(oRelevantAssociation){
        	return getEntityTypeName(oRelevantAssociation.toAggregateEntitySet);
        } else {
            return sEntityType;
        }
    }

    function getEntityType(sEntityType){
      if(!sEntityType){
    	  return;
      }
      if(!oHtEntityTypes.hasItem(sEntityType)){
    	  var oEntityType = oMetaModel .getODataEntityType(sEntityTypeQualifier + sEntityType);
    	  if(!oEntityType){
    		  return oEntityType;
    	  }
    	  oHtEntityTypes.setItem(sEntityType, oEntityType); 
      }
      return oHtEntityTypes.getItem(sEntityType); 
    }
    
    function initMetadata() {
        
        var oOdataModel = getOdataModel();
        var sMessageCode;
        
        if(!oOdataModel.getServiceMetadata()){
          sMessageCode = "5018";
          if (bDeactivateFatalError) {
              sMessageCode = "11013";
          }
          oInject.messageHandler.putMessage(oInject.messageHandler.createMessageObject({
              code: sMessageCode,
              aParameters: [sAbsolutePathToServiceDocument],
              oCallingObject: that
          }));
          that.failed = true;
          return;
        }
        
        oMetaModel  = oOdataModel.getMetaModel();
      
        initializeEntityTypeOfEntitySetsAndAllEntityTypes();
        
        initializeEntityTypeQualifier();
        
        initializeEntityTypeAnnotationsPreFix(oOdataModel);
        
        initializeRelevantAssociations();
    
        //>>>
       function initializeEntityTypeOfEntitySetsAndAllEntityTypes(){
       	 var oCollector = {};
       	 oMetaModel .getODataEntityContainer().entitySet.forEach( function(entitySet){
    	        	var entityType = entitySet.entityType.split(/[. ]+/).pop();
    	            oHtEntityTypeOfEntitySet.setItem(entitySet.name, entityType);   
                if(!oCollector.hasOwnProperty(entityType)){
                	oCollector[entityType] = true;
                	aAllEntityTypes.push(entityType);
                }
            });
       }
       
       function initializeEntityTypeQualifier(){
       	  var aServiceDocumentParts = oMetaModel .getODataEntityContainer().entitySet[0].entityType.split(".");
             aServiceDocumentParts.pop();
             sEntityTypeQualifier = aServiceDocumentParts.join(".") + ".";
             	
       }
       
       function initializeEntityTypeAnnotationsPreFix (odataModel){
           var oAnnotation = odataModel.getServiceAnnotations();
           if (oAnnotation && oAnnotation.aliasDefinitions && oAnnotation.aliasDefinitions.Capabilities ){
           	sEntityTypeAnnotationsPreFix = oAnnotation.aliasDefinitions.Capabilities + ".";
           }
       }
       
       function initializeRelevantAssociations() {
    	   var oEntityContainer = oMetaModel.getODataEntityContainer(); 
    	   if(!oEntityContainer.associationSet){
    		 return;
    	   }
    	   oEntityContainer.associationSet.forEach(function(oEntitySetAssociation){
    		   
    		   var sEntitySet1 = oEntitySetAssociation.end[0].entitySet,
    		       sEntitySet2 = oEntitySetAssociation.end[1].entitySet,
    		       sParameterEntitySet,
    		       sAggregateEntitySet;
    		   if(isParameterEntityType(getEntityTypeName(sEntitySet1))){
    			   sParameterEntitySet = sEntitySet1;
    		   } else if(isAggregateEntityType(getEntityTypeName(sEntitySet1))){
    			   sAggregateEntitySet = sEntitySet1;
    		   }
    		   if(isParameterEntityType(getEntityTypeName(sEntitySet2))){
    			   sParameterEntitySet = sEntitySet2;
    		   } else if(isAggregateEntityType(getEntityTypeName(sEntitySet2))){
    			   sAggregateEntitySet = sEntitySet2;
    		   }
    		   if(!sParameterEntitySet || !sAggregateEntitySet){
    			   return;
    		   }
    		   
    		   var sNavigationProperty;
    		   var oParameterEntityType = getEntityType(getEntityTypeName(sParameterEntitySet));
    		   var done;
    		   oParameterEntityType.navigationProperty.forEach(function(oNavigationProperty){
    			   
    			   if(done){
    				  return; 
    			   }
    			   if(oNavigationProperty.relationship === oEntitySetAssociation.association){
    				   sNavigationProperty = oNavigationProperty.name;
    				   done = true;
    			   }
    		   });
    		   if(!sNavigationProperty){
    			   return;
    		   }
    		   
    		  
    		   var oRelevantAssociation = { 
   					        navigationProperty      : sNavigationProperty,
	                        fromParameterEntitySet  : sParameterEntitySet,
	                        toAggregateEntitySet    : sAggregateEntitySet,
	                        fromIsUnique : undefined,
	                        toIsUnique   : undefined };
    		   
    		   if(oHtAssociationByParameterEntitySet.hasItem(sParameterEntitySet)){
    			   oRelevantAssociation.fromIsUnique = false;
    			   oHtAssociationByParameterEntitySet.getItem(sParameterEntitySet).fromIsUnique = false;
    		   } else {
    			   oRelevantAssociation.fromIsUnique = true;
    			   oHtAssociationByParameterEntitySet.setItem(sParameterEntitySet, oRelevantAssociation);
    			   oHtAssociationByParameterEntityType.setItem(getEntityTypeName(sParameterEntitySet), oRelevantAssociation);
	   		   }
    		   
    		   if(oHtAssociationByAggregateEntitySet.hasItem(sAggregateEntitySet)){
    			   oHtAssociationByAggregateEntitySet.getItem(sAggregateEntitySet).toIsUnique = false;
    		   } else {
    			   oRelevantAssociation.toIsUnique = true;
    			   oHtAssociationByAggregateEntitySet.setItem(sAggregateEntitySet, oRelevantAssociation);
    		   }
    		   
    	   });
       }
       
       function getOdataModel(){
       	 var sAnnotationUri = oCoreApi.getUriGenerator().getODataPath(sAbsolutePathToServiceDocument) + "annotation.xml";
            var bAnnotationsExist = sap.apf.core.utils.fileExists(sAnnotationUri);
            if (bAnnotationsExist) {
                 var parameterSet = {loadMetadataAsync: false, annotationURI: sAnnotationUri, json: true};
            } else {
                 parameterSet = {loadMetadataAsync: false, json: true};
            }
           
            return new ODataModel(sAbsolutePathToServiceDocument, parameterSet);           
       }
       
    }
    

    // Public functions
    /**
     * @description Returns all metadata for the property of the provided entity type
     * @param {String} sEntitySet - identifier of the used OData entity set
     * @param {String} sPropertyName - identifier of the used OData property
     * @returns {Object} - metadata of the property
     */
    this.getPropertyMetadata = function (sEntitySet, sPropertyName) {
        oInject.messageHandler.check(sEntitySet !== undefined && typeof sEntitySet === "string", "sap.apf.core.Metadata:getPropertyMetadata incorrect EntityType name or type");
        oInject.messageHandler.check(sPropertyName !== undefined && typeof sPropertyName === "string", "sap.apf.core.Metadata:getPropertyMetadata incorrect sPropertyName name or type");

        //noinspection JSLint
        var sEntityType = determineEntityTypeName(sEntitySet);
        if (!sEntityType) {
            return {};
        }

        //noinspection JSLint
        return getPropertyMetadataFromEntityType(sEntityType, sPropertyName);
    };

    /**
     * @description Returns the entity set and navigation property that are needed e. g. for building the Uri for executing an OData request
     * @param {String} sEntitySet - identifier of the used OData entity set
     * @returns {Object} 		   - uriComponents 
     * @returns {String|undefined} - uriComponents.entitySet 			- is undefined, if it cannot be determined
     * @returns {string|undefined} - uriComponents.navigationProperty 	- is undefined, if it is needed and cannot be determined
     */
    this.getUriComponents = function (sEntitySet) {
    	
        if (!getEntityTypeName(sEntitySet)) {
            if (getEntityTypeName(sEntitySet + "Results")) {
            	return {entitySet : sEntitySet + "Results", 
            		    navigationProperty : "" };
            }
            return null;
        }
        
        var oRelevantAssociation;
        switch(getSapSemantics(getEntityTypeName(sEntitySet))){
	        case "undefined":
	        	return {entitySet : sEntitySet, 
	        	        navigationProperty : "" };
	        case "parameters":
	        	oRelevantAssociation = oHtAssociationByParameterEntitySet.getItem(sEntitySet);
	        	if(!oRelevantAssociation || oRelevantAssociation.fromIsUnique === false){
	        		return {entitySet : sEntitySet, 
	        			    navigationProperty : undefined };
	        	}
	        	return {entitySet : sEntitySet, 
	             		navigationProperty : oRelevantAssociation.navigationProperty };
	        case "aggregate":
	        	oRelevantAssociation = oHtAssociationByAggregateEntitySet.getItem(sEntitySet);
	        	if(!oRelevantAssociation){
	        		return {entitySet : sEntitySet, 
	        			    navigationProperty : "" };
	        	}
	        	if(oRelevantAssociation.toIsUnique === false){
	        		return {entitySet : undefined, 
	        			    navigationProperty : undefined };
	        	}
	        	return {entitySet : oRelevantAssociation.fromParameterEntitySet, 
	        		    navigationProperty : oRelevantAssociation.navigationProperty };
        }
        
    };
    
    /**
     * @description Returns names of all filterable properties of the provided entity type.
     * @param {String} sEntitySet - identifier of the used OData entity type
     * @returns {Array} aResult - names of the filterable properties
     */
    this.getFilterableProperties = function (sEntitySet) {
        oInject.messageHandler.check(sEntitySet !== undefined && typeof sEntitySet === "string", "sap.apf.core.Metadata:getFilterableProperties incorrect EntityType name or type");

        var sEntityType = determineEntityTypeName(sEntitySet);
        if (!sEntityType) {
            return [];
        }

        sEntityType = getEntityTypeOfAggregateEntitySet(sEntityType);
        return getFilterablePropertiesFromEntityType(sEntityType);
        
    };

    /**
     * @description Returns all properties (incl. parameters) for a given entity set provided the entitySet has an "extension".
     *      Extension means an annotation in the entityType of metadata.xml which is equal to "sap:semantics"="aggregate" or "sap:semantics"="parameter".
     *      When the entityType does not have this annotation then the result array is empty.
     * @param {String} sEntitySet - identifier of the used OData entity set
     * @returns {Array} aResult - property names
     */
    this.getAllPropertiesOfExtendedEntityType = function (sEntitySet) {
        oInject.messageHandler.check(sEntitySet !== undefined && typeof sEntitySet === "string", "sap.apf.core.Metadata:getAllProperties incorrect EntityType name or type");

        var sEntityType = determineEntityTypeName(sEntitySet);
        if (!sEntityType) {
            return [];
        }
        return getAllPropertiesOfExtendedEntityType(sEntityType);
    };
    /**
     * @description Returns all aggregate properties for a given entity set.
     * @param {String} sEntitySet - identifier of the used OData entity set
     * @returns {String[]} array of aggregate property names
     */
    this.getAllAggregatePropertiesOfEntitySet = function (sEntitySet) {
        oInject.messageHandler.check(sEntitySet !== undefined && typeof sEntitySet === "string", "sap.apf.core.Metadata:getAllProperties incorrect EntityType name or type");

        var sEntityType = determineEntityTypeName(sEntitySet);

        return getAllAggregatePropertiesOfEntityType(sEntityType);
    };


    /**
     * @description Returns names of all aggregate properties of all entity types.
     *            Return empty when the entity type does not contain an annotation "sap:semantics".
     * @returns {String[]} array of all aggregate property names
     */
    this.getAllAggregateProperties = function () {
        if(aAllAggregateProperties.length === 0){
	        getEntityTypes().forEach(function (sEntityType) {
	        	if(isParameterEntityType(sEntityType) !== false) {
	        	 return;
	        	}
	            aAllAggregateProperties = aAllAggregateProperties.concat(getAllAggregatePropertiesOfEntityType(sEntityType));
	        });
	        aAllAggregateProperties = sap.apf.utils.eliminateDuplicatesInArray(oInject.messageHandler, aAllAggregateProperties);
        }
        return aAllAggregateProperties;
    };

    /**
     * @description Returns names of all properties (incl. parameters) of all entity types.
     *            Return empty when the entity type does not contain an annotation "sap:semantics".
     * @returns {String[]} array of all property names
     */
    this.getAllProperties = function () {
        var aAllProperties = [];

        getEntityTypes().forEach(function (entityType) {
            aAllProperties = aAllProperties.concat(getAllPropertiesOfExtendedEntityType(entityType));
        });
        aAllProperties = sap.apf.utils.eliminateDuplicatesInArray(oInject.messageHandler, aAllProperties);

        return aAllProperties;
    };

    /**
     * @description Returns names of all parameter entity set key properties of all entity types.
     * @returns {Array} aResult - parameter names
     */
    this.getParameterEntitySetKeyPropertiesForService = function () {
        var aAllParameters = [];

        getEntityTypes().forEach(function (entityType) {
            getParameterPropertiesFromEntityType(entityType, true).forEach(function (parameter) {
                aAllParameters.push(parameter.name);
            });
        });
        aAllParameters = sap.apf.utils.eliminateDuplicatesInArray(oInject.messageHandler, aAllParameters);

        return aAllParameters;
    };

    /**
     * @description Returns names of all key properties of all entity types.
     * @returns {Array} aResult - key names
     */
    this.getAllKeys = function () {
        var aAllKeys = [];
        var aKeys = [];

        getEntityTypes().forEach(function (entityType) {
        	if(!isParameterEntityType(entityType) && !isAggregateEntityType(entityType)){
        		return;
        	}
            var oEntityType = getEntityType(entityType);
            aKeys = [];
            if (oEntityType.key && oEntityType.key.propertyRef) {
            	oEntityType.key.propertyRef.forEach(function (propertyRef) {
                    aKeys.push(propertyRef.name);
                });
            }
            
            aAllKeys = aAllKeys.concat(aKeys);
        });
        aAllKeys = sap.apf.utils.eliminateDuplicatesInArray(oInject.messageHandler, aAllKeys);
        return aAllKeys;
    };


    /**
     * @description Returns all metadata attributes for a given property. It
     *              will be searched over all entity types for this property
     *              and the first match will be returned.
     * @param {String} sPropertyName
     *            sPropertyName - identifier of the used OData property
     * @returns {Object} - Object with attributes of the property
     */
    this.getAttributes = function (sPropertyName) {
        var done = false;
        var oPropertyAttributes;
        getEntityTypes().forEach(function (entityType) {
            if (done) {
                return;
            }
            oPropertyAttributes = getPropertyMetadataFromEntityType(entityType, sPropertyName);
            if (oPropertyAttributes.name) {
                done = true;
            }
        });
        return oPropertyAttributes;
    };
    /**
     * @description Returns metadata which includes parameter entity set key properties and their attributes (data type, default value, ...) for the provided entity type.
     * @param {String} sEntitySet - identifier of the used OData entity type
     * @returns {Array} or {undefined} - parameters of the entity type
     */
    this.getParameterEntitySetKeyProperties = function (sEntitySet) {
        oInject.messageHandler.check(sEntitySet !== undefined && typeof sEntitySet === "string", "sap.apf.core.Metadata:getParameterEntitySetKeyProperties incorrect EntityType name or type");
        var sEntityType = determineEntityTypeName(sEntitySet);

        if (!sEntityType) {
            return [];
        }
        return getParameterPropertiesFromEntityType(sEntityType, true);

    };


    /**
     * @description Returns the entityType annotations which includes extensions for OData 4.0 like "RequiresFilter"
     * @param {String} sEntitySet - identifier of the used OData entity set
     * @returns {Object} - annotations of the entity type
     */
    this.getEntityTypeAnnotations = function (sEntitySet) {    
        oInject.messageHandler.check(sEntitySet !== undefined && typeof sEntitySet === "string", "sap.apf.core.Metadata:getEntityTypeAnnotations incorrect EntityType name or type");

        var sEntityType = determineEntityTypeName(sEntitySet);

        if (oHtEntityTypeMetadata.hasItem(sEntityType) === true) {
            return oHtEntityTypeMetadata.getItem(sEntityType);
        } else {
            
            var object = {};
            
            addAnnotations(sEntityType, object);
            
            var sAggregatedEntityType = getEntityTypeOfAggregateEntitySet(sEntityType);
            if (sAggregatedEntityType !== sEntityType) {
            	addAnnotations(sAggregatedEntityType, object);
            }

            oHtEntityTypeMetadata.setItem(sEntityType, object);
            return oHtEntityTypeMetadata.getItem(sEntityType);
        }
        
        function addAnnotations(sEntityType, oAnnotations){
        	var oEntityType = getEntityType(sEntityType);
            for (var sAttributeName in oEntityType) { // jshint ignore:line
            	if(sAttributeName.indexOf(sEntityTypeAnnotationsPreFix) !== 0){         
            		continue;
            	}
                var sAnnotationName = sAttributeName.split(".").pop();
                sAnnotationName = sAnnotationName.replace(/^./, sAnnotationName[0].toLowerCase()); //!!!
                for (var shape in oEntityType[sAttributeName]) { // jshint ignore:line
                	oAnnotations[sAnnotationName] = oEntityType[sAttributeName][shape];
                }
            }
        }
    };
    /**
     * @description Returns all entity sets of the service document that can be used as entity set for analytical configuration.
     * These are all entity sets except those, that have an corresponding parameter entity set. The discovery uses the
     * associations. They are not the end of an association.
     * @returns {Array} - EntitySets Returns entity sets
     */
    this.getEntitySets = function() {

		var dependencies = {};
		var validEntitySets = [];
		var container = oMetaModel.getODataEntityContainer();
		if (container.associationSet) {
			container.associationSet.forEach(function(association) {
				
				var entitySetNameEnd, entityTypeNameEnd;
				entitySetNameEnd = association.end[1].entitySet;
				entityTypeNameEnd = determineEntityTypeName(entitySetNameEnd);
					
				if (!isParameterEntityType(entityTypeNameEnd)) {
						dependencies[association.end[1].entitySet] = true;
				}
			});
		}
		if (container.entitySet) {
			container.entitySet.forEach(function(entitySet) {
				if (!dependencies[entitySet.name]) {
					validEntitySets.push(entitySet.name);
				}
			});
		}

		return validEntitySets;
	};

    initMetadata();

}; 

}; // end of sap/apf/core/metadata.js
if ( !jQuery.sap.isDeclared('sap.apf.core.metadataFacade') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.core.metadataFacade");


/** 
 * @class Provides convenience functions for accessing metadata 
 * @param {Object} oInject - tbd
 * @param {String} sAbsolutePathToServiceDocument Absolute Path to service document
 * @returns {sap.apf.core.MetadataProperty}
 */
sap.apf.core.MetadataFacade = function(oInject, sAbsolutePathToServiceDocument) {
	/**
	 * @description Contains 'metadataFacade'
	 * @returns {String}
	 */
	this.type = "metadataFacade";
	// Private vars
	var fnMetadataProperty = oInject.metadataProperty;
	var oMessageHandler = oInject.messageHandler;
	var oMetadataFactory = oInject.metadataFactory;
	var aPropertyNames;
	var aParameterNames;
	var oProperties = {};
	
	// Public functions
	/**
	 * @description Returns all property names
	 * @param {Function} callback - callback function providing array of properties as strings
	 */
	this.getAllProperties = function(callback){
		if(aPropertyNames){
            callback(aPropertyNames);
        }else{
            var aMetadataServiceDocuments = getServiceDocuments();
            var oMetadata;
            aPropertyNames = [];
            for(var i = 0; i < aMetadataServiceDocuments.length; i++){
                oMetadata = oMetadataFactory.getMetadata(aMetadataServiceDocuments[i]);
                aPropertyNames = aPropertyNames.concat(oMetadata.getAllProperties());
            }
            aPropertyNames = sap.apf.utils.eliminateDuplicatesInArray(oMessageHandler, aPropertyNames);
            callback(aPropertyNames);
		}
	};
	/**
	 * @description Returns all properties which are paramenter key properties
	 * @param {Function} callback - callback function providing array of properties which are parameter entity set key properties as strings
	 */
	this.getAllParameterEntitySetKeyProperties = function(callback){
		if(aParameterNames){
            callback(aParameterNames);
        }else{
            var aMetadataServiceDocuments = getServiceDocuments();
            var oMetadata;
            aParameterNames = [];
            for(var i = 0; i < aMetadataServiceDocuments.length; i++){
                oMetadata = oMetadataFactory.getMetadata(aMetadataServiceDocuments[i]);
                aParameterNames = aParameterNames.concat(oMetadata.getParameterEntitySetKeyPropertiesForService());
            }
            aParameterNames = sap.apf.utils.eliminateDuplicatesInArray(oMessageHandler, aParameterNames);
            callback(aParameterNames);
		}
	};
	/**
	 * @description Returns a object of type {sap.apf.core.MetadataProperty} for
	 *              accessing attributes of a metadata property
	 * @param {String} sName - property name
	 * @param {Function} callback - callback function providing {sap.apf.core.MetadataProperty} object
	 */
	this.getProperty = function(sName, callback){
		if(oProperties[sName]){
            callback(oProperties[sName]);
        }else{
            var aMetadataServiceDocuments = getServiceDocuments();
            var oPropertyAttributes;
            var oMetadata;
            for(var i = 0; i < aMetadataServiceDocuments.length; i++){
                oMetadata = oMetadataFactory.getMetadata(aMetadataServiceDocuments[i]);
                oPropertyAttributes = oMetadata.getAttributes(sName);
                if(oPropertyAttributes.name){
                    //add attribute isHanaViewParameter
                    if(oMetadata.getParameterEntitySetKeyPropertiesForService().indexOf(sName) > -1){
                        //add attribute isKey
                        oPropertyAttributes.isParameterEntitySetKeyProperty = true;
                    }
                    if(oMetadata.getAllKeys().indexOf(sName) > -1){
                        //resolution of dataType
                        oPropertyAttributes.isKey = true;
                    }
                    break;
                }
            }

            for(var name in oPropertyAttributes){
                if(name === "dataType") {
                    for(var dataTypeName in oPropertyAttributes.dataType){
                        oPropertyAttributes[dataTypeName] = oPropertyAttributes.dataType[dataTypeName];
                    }
                }
            }

			var oMetadataProperty = new fnMetadataProperty(oPropertyAttributes);
            oProperties[sName] = oMetadataProperty;
            callback(oProperties[sName]);
		}
	};

    // Private functions
    function getServiceDocuments(){
        if(typeof sAbsolutePathToServiceDocument === "string"){
            return [sAbsolutePathToServiceDocument];
        }else{
            return oMetadataFactory.getServiceDocuments();
        }
    }
};
}; // end of sap/apf/core/metadataFacade.js
if ( !jQuery.sap.isDeclared('sap.apf.core.odataProxy') ) {
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
/*global sap, jQuery, OData*/

jQuery.sap.declare("sap.apf.core.odataProxy");

jQuery.sap.require('sap.ui.thirdparty.datajs'); // unlisted dependency retained



(function() {
	'use strict';

	/**
	 * simplified interface to odata
	 * @private
	 * @constructor
	 * @param {object} serviceConfiguration Describes the service root  
	 * @param {object} inject Injected constructors, instances and functions
	 * @param {object} inject.instance Instances
	 * @param {object} inject.instance.messageHandler Message handler instance
	 * @param {object} inject.instance.coreApi CoreAPI instance
	 */
	sap.apf.core.OdataProxy = function(serviceConfiguration, inject) {
		/** @type sap.apf.core.Instance */
		var coreApi = inject.instance.coreApi;
		var messageHandler = inject.instance.messageHandler;
		var serviceRoot = serviceConfiguration.serviceRoot;
		var entitySetForFormatValue = "";

		function determineAsyncMode(async) {
			if (async === undefined) {
				return  true;
			} 
			return async;
		}
		
		function getMetadata(serviceRoot, entitySet) {
			return coreApi.getEntityTypeMetadata(serviceRoot, entitySet);
		}

		function addInputParametersToUrl(inputParameters) {
			var i, len, str;
			if (!inputParameters) {
				return "";
			}
			len = inputParameters.length;
			if (len === 1) {
				return "('" + inputParameters[0].value + "')";
			}
			str = "(";
			for(i = 0; i < len; i++) {
				if (i > 0) {
					str = str + ",";
				}
				str = str + inputParameters[i].name + "='" + inputParameters[i].value + "'";
			}
			return str + ")";
		}

		function createMessageObjectFromErrorResponse(oError) {
			var messageObject;

			if (oError.messageObject && oError.messageObject.getCode) {
				messageObject = oError.messageObject;
			} else if (oError.response && oError.response.statusCode && oError.response.statusCode >= 400) { //Bad HTTP request returned status code {0} with status text {1}
				messageObject = messageHandler.createMessageObject({
					code : '11005',
					aParameters : [ oError.response.statusCode.toString(), oError.response.statusText ]
				});
			} else {
				messageObject = messageHandler.createMessageObject({ //Unknown server error.
					code : '5201'
				});
			}
			messageHandler.putMessage(messageObject);
			return messageObject;
		}

		function errorOnRead(oError, callback) {
			var messageObject = createMessageObjectFromErrorResponse(oError);
			callback(undefined, undefined, messageObject);
		}

		function successOnRead(oData, serviceRoot, entitySet, callback) {
			var result;
			var messageObject;

			if (oData && oData.results) {
				result = oData.results;
			} else if (oData) {
				result = oData;
			} else {
				messageObject = messageHandler.createMessageObject({
					code : '5201'
				});
			}
			callback(result, getMetadata(serviceRoot, entitySet), messageObject);
		}

	
		/**
		 * odata get operation for specific single entity (application or configuration)
		 * @param {string} entitySet value from sap.apf.core.constants.entitySets
		 * @param {function} callback function of form fn(entityData, metadata, messageObject)
		 * @param {object[]} [inputParameters]
		 * @param {string[]} [selectList] holds all properties, that shall be in the select list
		 * @param {boolean} [async] Boolean value has to be set to false, if request should be send synchronously. Default value is true. 
		 * @param {string} application guid of the Application
		 */
		this.readEntity = function(entitySetName, callback, inputParameters, selectList, async, application) {
			var bAsync = determineAsyncMode(async);
			var entitySet = sap.apf.core.constants.entitySets[entitySetName];

			var xsrfToken = coreApi.getXsrfToken(serviceRoot);
			var url = serviceRoot + '/' + entitySet;

			url = url + addInputParametersToUrl(inputParameters);

			if (selectList && selectList.length > 0) {
				url = url + "?$select=" + selectList.join();
			}

			

			var request = {
				requestUri : url,
				async : bAsync,
				method : "GET",
				headers : {
					"x-csrf-token" : xsrfToken
				}
			};

			coreApi.odataRequest(request, function(oData) {
				successOnRead(oData, serviceRoot, entitySet, callback);
			}, function(oError) {
				errorOnRead(oError, callback);
			});
		};

		function formatValue(sProperty, value) {
			var strDelimiter = "'";

			var oEntityMetadata = getMetadata(serviceRoot, entitySetForFormatValue).getPropertyMetadata(sProperty);
			if (oEntityMetadata && oEntityMetadata.dataType) {
				return sap.apf.utils.formatValue(value, oEntityMetadata.dataType.type);
			}
			if (typeof value === 'number') {
				return value;
			}
			return strDelimiter + sap.apf.utils.escapeOdata(value) + strDelimiter;
		}

		function buildBatchRequests(requestConfigurations) {

			var xsrfToken = coreApi.getXsrfToken(serviceRoot);
			var batchRequests = [];
			var i, len = requestConfigurations.length;
			var url, entitySet, bSelectListSet, method, request;

			for(i = 0; i < len; i++) {
				bSelectListSet = false;
				entitySet = sap.apf.core.constants.entitySets[requestConfigurations[i].entitySetName];
				url = entitySet;
				url = url + addInputParametersToUrl(requestConfigurations[i].inputParameters);

				if (requestConfigurations[i].selectList && requestConfigurations[i].selectList.length > 0) {
					url = url + "?$select=" + requestConfigurations[i].selectList.join();
					bSelectListSet = true;
				}
				if (requestConfigurations[i].filter) {
					if (bSelectListSet) {
						url = url + '&';
					} else {
						url = url + '?';
					}
					entitySetForFormatValue = entitySet;
					url = url + '$filter=' + requestConfigurations[i].filter.toUrlParam({
						formatValue : formatValue
					});
				}

				method = requestConfigurations[i].method || 'GET';
				request = {
					requestUri : url,
					method : method,
					headers : {
						"Accept-Language" : sap.ui.getCore().getConfiguration().getLanguage(),
						"x-csrf-token" : xsrfToken
					}
				};
				if (method !== "GET") {
					request.data = requestConfigurations[i].data;
				}
				batchRequests.push(request);
			}
			return batchRequests;
		}
		
		function buildUrlForReadCollection(entitySet, inputParameters, selectList, filter) {
			var sQueryString = '';
			
			var url = entitySet + addInputParametersToUrl(inputParameters);

			if (selectList && selectList.length > 0) {
				sQueryString = "$select=" + selectList.join();
			}
			if (filter) {
			    if(sQueryString) {
			        sQueryString = sQueryString + '&';
			    }
			    entitySetForFormatValue = entitySet;
			    sQueryString = sQueryString + '$filter=' + filter.toUrlParam({
					formatValue : formatValue
				});
			}
			if(entitySet === sap.apf.core.constants.entitySets.application) {
	             if(sQueryString) {
	                    sQueryString = sQueryString + '&';
                 }
	             sQueryString = sQueryString + '$orderby=ApplicationName';
			}
			if(sQueryString) {
			    url = url + '?' + sQueryString;
			}
			
			return url;
		}
		
		function handleErrorInBatch(error, callback) {
			var message = "unknown error";
			var errorDetails = "unknown error";
			var url = "";

			if (error.message !== undefined) {
				message = error.message;
			}
			var httpStatusCode = "unknown";
			if (error.response && error.response.statusCode) {
				httpStatusCode = error.response.statusCode;
				errorDetails = error.response.statusText || "";
				url = error.response.requestUri;
			}

			if (error.messageObject && error.messageObject.type === "messageObject") {
				callback([], error.messageObject);
			} else {
				callback([], messageHandler.createMessageObject({
					code : "5001",
					aParameters : [ httpStatusCode, message, errorDetails, url ]
				}));
			}
		}
		/**
		 * multiple change operations in batch
		 * @param {object[]} requestConfigurations with properties entitySetName, filter, selectList, inputParameters, method
		 * @param {function} callback with parameters undefined or messageObject in case of Error
		 */
		this.doChangeOperationsInBatch = function(requestConfigurations, callback) {
			var xsrfToken = coreApi.getXsrfToken(serviceRoot);
			var batchRequests = buildBatchRequests(requestConfigurations);

			var batchRequest = {
				requestUri : serviceRoot + '/' + '$batch',
				method : "POST",
				headers : {
					"x-csrf-token" : xsrfToken
				},
				data : {
					__batchRequests : [ {
						__changeRequests : batchRequests
					} ]
				}
			};
			var fnSuccess = function(data, response) {

				var messageObject;
				var changeResponse;
				var url = "";
				var i, j;
				if (data && data.__batchResponses) {

					for(i = 0; i < data.__batchResponses.length; i++) {
						
						if (data.__batchResponses[i].message) {

							var message = data.__batchResponses[i].message;
							
							var httpStatusCode = "";
							url = response.requestUri;
							messageObject = messageHandler.createMessageObject({
								code : "5001",
								aParameters : [ httpStatusCode, message, "", url ]
							});
							break;
						}
						
						for(j = 0; j < data.__batchResponses[i].__changeResponses.length; j++) {

							changeResponse = data.__batchResponses[i].__changeResponses[j];

							if (changeResponse.message) {

								var message = changeResponse.message;
								var errorDetails = changeResponse.data;
								var httpStatusCode = changeResponse.statusCode;
								url = response.requestUri;
								messageObject = messageHandler.createMessageObject({
									code : "5001",
									aParameters : [ httpStatusCode, message, errorDetails, url ]
								});
								break;
							}

						}
					}
					callback(messageObject);
				}
			};
			var fnError = function(error) {
				handleErrorInBatch(error, callback);
			};
			coreApi.odataRequest(batchRequest, fnSuccess, fnError, OData.batchHandler);
		};
		/**
		 * multiple reads in a batch operation
		 * @param {object[]} requestConfigurations with properties entitySetName, filter, selectList, inputParameters, method
		 * @param {function} callback with parameters data - array with results and messageObject
		 * @param {boolean} [async] Boolean value has to be set to false, if request should be send synchronously. Default value is true. 
		 */
		this.readCollectionsInBatch = function(requestConfigurations, callback, async) {
			var xsrfToken = coreApi.getXsrfToken(serviceRoot);
			var batchRequests = buildBatchRequests(requestConfigurations);
			var bAsync = determineAsyncMode(async);

			var batchRequest = {
				requestUri : serviceRoot + '/' + '$batch',
				async : bAsync,
				method : "POST",
				headers : {
					"x-csrf-token" : xsrfToken
				},
				data : {
					__batchRequests : batchRequests
				}
			};

			var fnSuccess = function(data) {
				var response = [];
				var messageObject;
				var url = "";
				var i;
				if (data && data.__batchResponses) {

					for(i = 0; i < data.__batchResponses.length; i++) {
						if (data.__batchResponses[i].data && data.__batchResponses[i].data.results) {
							response.push(data.__batchResponses[i].data.results);
						} else if (data.__batchResponses[i].message) {
							var message = data.__batchResponses[i].message;
							var errorDetails = data.__batchResponses[i].response.body;
							var httpStatusCode = data.__batchResponses[i].response.statusCode;
							url = response.requestUri;
							messageObject = messageHandler.createMessageObject({
								code : "5001",
								aParameters : [ httpStatusCode, message, errorDetails, url ]
							});
							break;
						} else {
							url = response.requestUri;
							messageObject = messageHandler.createMessageObject({
								code : "5001",
								aParameters : [ "unknown", "unknown error", "unknown error", url ]
							});
							break;
						}
					}
					callback(response, messageObject);
				}
			};
			var fnError = function(error) {
				handleErrorInBatch(error, callback);
			};
			coreApi.odataRequest(batchRequest, fnSuccess, fnError, OData.batchHandler);

		};
		/**
		 * odata get operation for specific type (application or configuration)
		 * @param {string} entitySetName value from sap.apf.core.constants.entitySets
		 * @param {function} callback function of form fn(result, metadata, messageObject)
		 * @param {object[]|undefined} [inputParameters]
		 * @param {string[]|undefined} [selectList] holds all properties, that shall be in the select list
		 * @param {sap.apf.core.utils.Filter} [filter] additional filter expressions
		 * @param {boolean} [async] Boolean value has to be set to false, if request should be send synchronously. Default value is true. 
		 */
		this.readCollection = function(entitySetName, callback, inputParameters, selectList, filter, async) {
			var bAsync = determineAsyncMode(async);
			
			if (bAsync) {
				readSingleCollectionInBatch(entitySetName, callback, inputParameters, selectList, filter);
			} else {
				readCollectionSynchronously(entitySetName, callback, inputParameters, selectList, filter);
			}
		};
		
		function readCollectionSynchronously(entitySetName, callback, inputParameters, selectList, filter) {
			
			var entitySet = sap.apf.core.constants.entitySets[entitySetName];
			var xsrfToken = coreApi.getXsrfToken(serviceRoot);
			var url = serviceRoot + '/' + buildUrlForReadCollection( entitySet, inputParameters, selectList, filter);
	
			var request = {
				requestUri : url,
				async : false,
				method : "GET",
				headers : {
					"x-csrf-token" : xsrfToken
				}
			};
			coreApi.odataRequest(request, function(oData) {
				successOnRead(oData, serviceRoot, entitySet, callback);
			}, function(oError) {
				errorOnRead(oError, callback);
			});
		}
		
		function readSingleCollectionInBatch(entitySetName, callback, inputParameters, selectList, filter) {
			var entitySet = sap.apf.core.constants.entitySets[entitySetName];
			var success = function(data, response) {
				var response;
				var messageObject;
				var url = "";
				
				if (data && data.__batchResponses) {

					
						if (data.__batchResponses[0].data && data.__batchResponses[0].data.results) {
							response = data.__batchResponses[0].data.results;
						} else if (data.__batchResponses[0].message) {
							var message = data.__batchResponses[0].message;
							var errorDetails = data.__batchResponses[0].response.body;
							var httpStatusCode = data.__batchResponses[0].response.statusCode;
							url = response.requestUri;
							messageObject = messageHandler.createMessageObject({
								code : "5001",
								aParameters : [ httpStatusCode, message, errorDetails, url ]
							});
						
						} else {
							url = response.requestUri;
							messageObject = messageHandler.createMessageObject({
								code : "5001",
								aParameters : [ "unknown", "unknown error", "unknown error", url ]
							});
							
						}
		
					callback(response, getMetadata(serviceRoot, entitySet), messageObject);
				}
			};
				

			var xsrfToken = coreApi.getXsrfToken(serviceRoot);

			var batchRequest = {
					requestUri : serviceRoot + '/' + '$batch',
					async : true,
					method : "POST",
					headers : {
						"x-csrf-token" : xsrfToken
					},
					data : {
						__batchRequests : [{
							requestUri : buildUrlForReadCollection(entitySet, inputParameters, selectList, filter),
							method : "GET",
							headers : {
								"x-csrf-token" : xsrfToken,
								"Accept-Language": sap.ui.getCore().getConfiguration().getLanguage()
							}
						}]
					}
				};
			
			coreApi.odataRequest(batchRequest, success, function(oError) {
				errorOnRead(oError, callback);
			}, OData.batchHandler);

		}
		/**
		 * odata post operation for specific type (application or configuration)
		 * @param {string} entitySetName value from sap.apf.core.constants.entitySets
		 * @param {object} applicationData object with properties of object, that shall be posted
		 * @param {function} callback function of form fn(result, metadata, messageObject)
		 */
		this.create = function(entitySetName, applicationData, callback, async) {
			var bAsync = determineAsyncMode(async);
			var entitySet = sap.apf.core.constants.entitySets[entitySetName];
			var xsrfToken = coreApi.getXsrfToken(serviceRoot);
			var url = serviceRoot + '/' + entitySet;

			var request = {
				requestUri : url,
				async : bAsync,
				method : "POST",
				headers : {
					"x-csrf-token" : xsrfToken
				},
				data : applicationData
			};

			function successOnCreate(oData, oResponse) {
				var result;
				var messageObject;

				if (oData && oResponse.statusText === "Created") {
					result = oData;
				} else {
					messageObject = messageHandler.createMessageObject({
						code : '5201'
					});
				}
				callback(result, getMetadata(serviceRoot, entitySet), messageObject);
			}

			function errorOnCreate(oError) {
				var messageObject = createMessageObjectFromErrorResponse(oError);
				callback(undefined, undefined, messageObject);
			}

			coreApi.odataRequest(request, successOnCreate, errorOnCreate);

		};

		/**
		 * odata put operation for specific type (application or configuration)
		 * @param {string} entitySetName value from sap.apf.core.constants.entitySets
		 * @param {object} applicationData object with properties of object, that shall be posted
		 * @param {function} callback function of form fn( metadata, messageObject)
		 * @param {object[]} [inputParameters]
		 */
		this.update = function(entitySetName, applicationData, callback, inputParameters) {
			var entitySet = sap.apf.core.constants.entitySets[entitySetName];
			var xsrfToken = coreApi.getXsrfToken(serviceRoot);
			var url = serviceRoot + '/' + entitySet + addInputParametersToUrl(inputParameters);
			var request = {
				requestUri : url,
				method : "PUT",
				headers : {
					"x-csrf-token" : xsrfToken
				},
				data : applicationData
			};

			//noinspection JSUnusedLocalSymbols
			function successOnUpdate(oData, oResponse) {
				var messageObject;

				if (oResponse.statusCode !== 204) {
					messageObject = messageHandler.createMessageObject({
						code : '5201'
					});
				}
				callback(getMetadata(serviceRoot, entitySet), messageObject);
			}

			function errorOnUpdate(oError) {
				var messageObject = createMessageObjectFromErrorResponse(oError);
				callback(undefined, messageObject);
			}

			coreApi.odataRequest(request, successOnUpdate, errorOnUpdate);

		};

		/**
		 * odata delete operation for specific type (application or configuration)
		 * @param {string} entitySetName value from sap.apf.core.constants.entitySets
		 * @param {object[]} [inputParameters]
		 * @param {function} callback function of form fn(metadata, messageObject)
		 * @param {sap.apf.core.utils.Filter} [filter] 
		 */
		this.remove = function(entitySetName, inputParameters, callback, filter) {
			var entitySet = sap.apf.core.constants.entitySets[entitySetName];
			var xsrfToken = coreApi.getXsrfToken(serviceRoot);
			var url = serviceRoot + '/' + entitySet + addInputParametersToUrl(inputParameters);

			if (filter) {
				entitySetForFormatValue = entitySet;
				url = url + '$filter=' + filter.toUrlParam({
					formatValue : formatValue
				});
			}
			var request = {
				requestUri : url,
				method : "DELETE",
				headers : {
					"x-csrf-token" : xsrfToken
				}
			};

			//noinspection JSUnusedLocalSymbols
			function successOnDelete(oData, oResponse) {
				var messageObject;
				var metadata;

				if (oResponse.statusText === "No Content") {
					metadata = getMetadata(serviceRoot, entitySet);
				} else {
					messageObject = messageHandler.createMessageObject({
						code : '5201'
					});
				}
				callback(metadata, messageObject);
			}

			function errorOnDelete(oError) {
				var messageObject = createMessageObjectFromErrorResponse(oError);
				callback(undefined, messageObject);
			}

			coreApi.odataRequest(request, successOnDelete, errorOnDelete);

		};

	};
}());

}; // end of sap/apf/core/odataProxy.js
if ( !jQuery.sap.isDeclared('sap.apf.core.odataRequest') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

/*global OData */

jQuery.sap.declare("sap.apf.core.odataRequest");
jQuery.sap.require('sap.ui.thirdparty.datajs'); // unlisted dependency retained



/**
 * @memberOf sap.apf.core
 * @description Wraps a OData request in order to handle a server time-out. It uses a POST $batch operation wrapping the GET.
 * @param {sap.apf.core.MessageHandler} oMessageHandler for error handling
 * @param {object} oRequest An Object that represents the HTTP request to be sent.
 * @param {function} fnSuccess A callback function called after the response was successfully received and parsed.
 * @param {function} fnError A callback function that is executed if the request fails. In case of time out the error object has property messageObject, that holds sap.apf.core.MessageObject.
 * @param {object} oBatchHandler A handler object for the request data.
 */
sap.apf.core.odataRequestWrapper = function(oMessageHandler, oRequest, fnSuccess, fnError, oBatchHandler) {
	function success(data, response) {
		var oMessage = sap.apf.core.utils.checkForTimeout(response);
		var oError = {};
		
		if(oMessage) {
			oError.messageObject = oMessage;
			fnError(oError);
		} else {
			fnSuccess(data, response);
		}
	}
	function error(oError) {
		var oMessage = sap.apf.core.utils.checkForTimeout(oError);

		if (oMessage) {
			oError.messageObject = oMessage;
		}
		fnError(oError);
	}
	OData.request(oRequest, success, error, oBatchHandler);
};

}; // end of sap/apf/core/odataRequest.js
if ( !jQuery.sap.isDeclared('sap.apf.core.textResourceHandler') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/*global jQuery, sap */
jQuery.sap.declare("sap.apf.core.textResourceHandler");

jQuery.sap.require('jquery.sap.resources'); // unlisted dependency retained

(function() {
    'use strict';
/**
 * @class The text resource handler retrieves the texts from text bundles or
 *        property files. Text bundles which are not default loaded via apf, will
 *        be loaded on demand by the resource path handler.
 */
sap.apf.core.TextResourceHandler = function(oInject) {
	var that = this;
	var oMessageHandler = oInject.messageHandler;
	var oCoreApi = oInject.coreApi;
	var oHTBundles = new sap.apf.utils.Hashtable(oMessageHandler);
	var oHashedTextElements = new sap.apf.utils.Hashtable(oMessageHandler);
	/**
	 * @description retrieves the not encoded text by label object
	 * @param {object} oLabel - label object from configuration
	 * @param {string[]} [aParameters] - array with parameters to replace place holders in text bundle
	 * @returns {string}
	 */
	this.getTextNotHtmlEncoded = function(oLabel, aParameters) {
		if (typeof oLabel === "string") {
			return handleKeyOnlyKind(oLabel, aParameters);
		}
		oMessageHandler.check((oLabel !== undefined && oLabel.kind !== undefined), "Error - oLabel is not compatible");
		if (oLabel.kind === "text") {
			oMessageHandler.check((oLabel.key !== undefined), "Error - oLabel is not compatible");
			return handleTextKind(oLabel, aParameters);
		} 	
		// unknown type
		return "";
	};
	/**
	 * @description retrieves the encoded text by label object
	 * @param {object} oLabel - label object from configuration
     * @param {string[]} [aParameters] - Parameter for placeholder replacement in the message bundle
	 * @returns {string}
	 */
	this.getTextHtmlEncoded = function(oLabel, aParameters) {
		return jQuery.sap.encodeHTML(this.getTextNotHtmlEncoded(oLabel, aParameters));
	};
	/**
	 * @description returns a message text for message handling
	 * @param {string} sRessourceKey - Key of the message in the Ressourcefile
	 * @param {string[]} [aParameters] - Parameter for placeholder replacement in the message bundle
	 * @returns {string}
	 */
	this.getMessageText = function(sRessourceKey, aParameters) {
		var sText;
		loadTextBundles(sap.apf.core.constants.resourceLocation.apfUiTextBundle, sap.apf.core.constants.resourceLocation.applicationMessageTextBundle);
		if (oHTBundles.hasItem(sap.apf.core.constants.resourceLocation.applicationMessageTextBundle)) {
			sText = oHTBundles.getItem(sap.apf.core.constants.resourceLocation.applicationMessageTextBundle).getText(sRessourceKey, aParameters);
			if (sText !== sRessourceKey) {
				return sText;
			}
		}
		return oHTBundles.getItem(sap.apf.core.constants.resourceLocation.apfUiTextBundle).getText(sRessourceKey, aParameters);
	};
	
	/**
	 * @description called from ressource path handler to load the application texts, that come from the data base
	 * @param {textElements[]} array with text elements
	 */
	this.loadTextElements = function(textElements) {
		var i, len;
		
		len = textElements.length;
		for (i = 0; i < len; i++) {
			oHashedTextElements.setItem(textElements[i].TextElement, textElements[i].TextElementDescription);
		}
	};
	// Private Functions 
	function loadTextBundles(oApfBundle, oApplicationBundle) {
		var sUrl;
		if (oHTBundles.hasItem(oApfBundle) === false) {
			sUrl = oCoreApi.getResourceLocation(oApfBundle);
			addCustomTextResource(oApfBundle, sUrl);
		}
		sUrl = oCoreApi.getResourceLocation(oApplicationBundle);
		if (sUrl !== "" && oHTBundles.hasItem(oApplicationBundle) === false) {
			addCustomTextResource(oApplicationBundle, sUrl);
		}
	}
	function handleTextKind(oLabel, aParameters) {

		if (oLabel.key === sap.apf.core.constants.textKeyForInitialText) {
			return "";
		}
		loadTextBundles(sap.apf.core.constants.resourceLocation.apfUiTextBundle, sap.apf.core.constants.resourceLocation.applicationUiTextBundle);
		// first look in textbundle from application (applicationUiTextBundle), otherwise fallback is used (apfUiTextBundle)
		if (bKeyInTextBundle(oLabel.key, sap.apf.core.constants.resourceLocation.applicationUiTextBundle)) {
			return oHTBundles.getItem(sap.apf.core.constants.resourceLocation.applicationUiTextBundle).getText(oLabel.key, aParameters);
		} else if (bKeyInTextBundle(oLabel.key, sap.apf.core.constants.resourceLocation.apfUiTextBundle)) {
			return oHTBundles.getItem(sap.apf.core.constants.resourceLocation.apfUiTextBundle).getText(oLabel.key, aParameters);
		} else if (oHashedTextElements.hasItem(oLabel.key)) {
			return oHashedTextElements.getItem(oLabel.key);
		}
		oMessageHandler.putMessage(oMessageHandler.createMessageObject({
			code : "3001",
			aParameters : [ oLabel.key ],
			oCallingObject : that
		}));
		return "# text not available: " + oLabel.key;
	}
	function handleKeyOnlyKind(key, aParameters) {
		
		if (key === sap.apf.core.constants.textKeyForInitialText) {
			return "";
		}
		loadTextBundles(sap.apf.core.constants.resourceLocation.apfUiTextBundle, sap.apf.core.constants.resourceLocation.applicationUiTextBundle);
		// first look in textbundle from application (applicationUiTextBundle), otherwise fallback is used (apfUiTextBundle)
		if (bKeyInTextBundle(key, sap.apf.core.constants.resourceLocation.applicationUiTextBundle)) {
			return oHTBundles.getItem(sap.apf.core.constants.resourceLocation.applicationUiTextBundle).getText(key, aParameters);
		} else if (bKeyInTextBundle(key, sap.apf.core.constants.resourceLocation.apfUiTextBundle)) {
			return oHTBundles.getItem(sap.apf.core.constants.resourceLocation.apfUiTextBundle).getText(key, aParameters);
		} else if (oHashedTextElements.hasItem(key)) {
			return oHashedTextElements.getItem(key);
		}
		oMessageHandler.putMessage(oMessageHandler.createMessageObject({
			code : "3001",
			aParameters : [ key ],
			oCallingObject : this
		}));
		return "# text not available: " + key;
	}
		  
	function bKeyInTextBundle(key, sTextBundle) {
		var oTextBundle = oHTBundles.getItem(sTextBundle);
		var i;		
		if (oTextBundle) {
		 oTextBundle.getText(key); // start reload next text bundle if necessary
		}
		if (oTextBundle && oTextBundle.aPropertyFiles && oTextBundle.aPropertyFiles.length > 0 && oTextBundle.aPropertyFiles[0].aKeys instanceof Array) {
			for(i = 0; i < oTextBundle.aPropertyFiles.length; i++) {
				if (jQuery.inArray(key, oTextBundle.aPropertyFiles[i].aKeys) >= 0) {
					return true;
				} 
			}
		}
		return false;
	}
	function addCustomTextResource(sKey, sUrl) {
		var oBundle = jQuery.sap.resources({
			url : sUrl,
			includeInfo : sap.ui.getCore().getConfiguration().getOriginInfo()
		});
		// remember the bundle under the given Key
		oHTBundles.setItem(sKey, oBundle);
	}
};
}());

}; // end of sap/apf/core/textResourceHandler.js
if ( !jQuery.sap.isDeclared('sap.apf.core.utils.filterTerm') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2015 SAP SE. All rights reserved
 */
jQuery.sap.declare('sap.apf.core.utils.filterTerm');


(function() {
	'use strict';
	/**
	 * @private
	 * @class This class implements a simple term in a filter in the form (property,
	 *        operator, value). It is used by sap.apf.core.utils.Filter.
	 * @param {sap.apf.core.MessageHandler} oMsgHandler
	 * @param {string} propertyName This is the property name of the term. Property name here relates
	 *            to oData and corresponds to a field/attribute/column name of an analytical
	 *            view.
	 * @param {string} operatorName Is the operator name. Operator must be a value of
	 *            {sap.apf.core.constants.FilterOperators}.
	 * @param {string|number|boolean|Date} value Some constant value like 1000 or 'Jan'.
	 * @param {string|number|boolean|Date} highvalue required, if operator is BT.
	 * @returns {sap.apf.core.utils.FilterTerm}
	 */
	sap.apf.core.utils.FilterTerm = function(oMsgHandler, propertyName, operatorName, value, highvalue) {
		this.type = "filterTerm";
		var sProperty = propertyName;
		var sOperator = operatorName;
		var val = value; // value can be string or number
		if (sOperator.length == 2) {
			sOperator = sOperator.toUpperCase();
		}
		// do some checks
		oMsgHandler.check(sOperator !== undefined, "sap.apf.utils.FilterTerm.constructor operator undefined");
		oMsgHandler.check(jQuery.inArray(sOperator, sap.apf.core.constants.aSelectOpt) > -1, "sap.apf.core.utils.FilterTerm operator " + sOperator + " not supported");
		oMsgHandler.check(sProperty !== undefined, "sap.apf.utils.core.FilterTerm sProperty undefined");
		oMsgHandler.check(val !== undefined, "sap.apf.utils.FilterTerm value undefined");
		/**
		 * @description The method checks if "property EQ value" is logically consistent with this filter term.
		 * 		This is a helper function of the isConsistentWithFilter method.
		 * @param {string} property The property of the value.
		 * @param {string|number|boolean|Date} valueChecked Value, that shall be checked for consistency.
		 * @returns {boolean} bContained Returns true, if the value is consistent.
		 *          Otherwise false. If the property differs, then true is returned,
		 *          because the filter term holds no restriction on the property.
		 */
		var containsSingleValue = function (property, valueChecked) {
			var prefix;
			var index;
			if (property !== sProperty) {
				return true;
			}
			if (sOperator === sap.apf.core.constants.FilterOperators.EQ) {
				if (value instanceof Date && valueChecked instanceof Date) {
					return (value.valueOf() === valueChecked.valueOf());
				}
				return (value === valueChecked);
			} else if (sOperator === sap.apf.core.constants.FilterOperators.LT) {
				if (value instanceof Date && valueChecked instanceof Date) {
					return (value.valueOf() > valueChecked.valueOf());
				}
				return (value > valueChecked);
			} else if (sOperator === sap.apf.core.constants.FilterOperators.LE) {
				if (value instanceof Date && valueChecked instanceof Date) {
					return (value.valueOf() >= valueChecked.valueOf());
				}
				return (value >= valueChecked);
			} else if (sOperator === sap.apf.core.constants.FilterOperators.GT) {
				if (value instanceof Date && valueChecked instanceof Date) {
					return (value.valueOf() < valueChecked.valueOf());
				}
				return (value < valueChecked);
			} else if (sOperator === sap.apf.core.constants.FilterOperators.BT) {
				if (value instanceof Date && valueChecked instanceof Date) {
					return (value.valueOf() <= valueChecked.valueOf() && valueChecked.valueOf() <= highvalue.valueOf());
				}
				return (value <= valueChecked && valueChecked <= highvalue);
			} else if (sOperator === sap.apf.core.constants.FilterOperators.GE) {
				if (value instanceof Date && valueChecked instanceof Date) {
					return (value.valueOf() <= valueChecked.valueOf());
				}
				return (value <= valueChecked);
			} else if (sOperator === sap.apf.core.constants.FilterOperators.NE) {
				if (value instanceof Date && valueChecked instanceof Date) {
					return !(value.valueOf() === valueChecked.valueOf());
				}
				return !(value === valueChecked);
			} else if (sOperator === sap.apf.core.constants.FilterOperators.StartsWith) {
				if (value.length > valueChecked.length) {
					return false;
				}
				prefix = valueChecked.slice(0, value.length);
				return (prefix === value);
			} else if (sOperator === sap.apf.core.constants.FilterOperators.EndsWith) {
				if (value.length > valueChecked.length) {
					return false;
				}
				prefix = valueChecked.slice(-value.length);
				return (prefix === value);
			} else if (sOperator === sap.apf.core.constants.FilterOperators.Contains) {
				index = valueChecked.indexOf(value);
				return (index > -1);
			}
		};
		/**
		 * @description The method checks if "property EQ value" is logically consistent with this filter term.
		 * @param {string} property The property for the value.
		 * @param {string|number|boolean|Date} value The value to be checked.
		 */
		this.isConsistentWithFilter = function (property, value) {
			return containsSingleValue(property, value);
		};
		/**
		 * @description Transforms the object into a string, that can be used in the
		 *              filter part of an odata request.
		 * @param {object} conf Configuration for returning the result.
		 * @param {boolean} [conf.asFilterArray] If an array with single lines for each
		 *            property has to be returned.
		 * @param conf.formatValue callback function for correct rendering of the value. The callback function is called with
		 * property and value.
		 */
		this.toUrlParam = function (conf) {
			var strDelimiter = "'";
			var spaceCharacter = " ";
			var param = "";
			var aParam = [];
			var value, hvalue;
			if (conf && conf.formatValue) {
				value = conf.formatValue(sProperty, val);
				if (highvalue) {
					hvalue = conf.formatValue(sProperty, highvalue);
				}
			} else {
				if (typeof val === 'number') {
					value = val;
				} else {
					value = strDelimiter + sap.apf.utils.escapeOdata(val) + strDelimiter;
				}
				if (highvalue) {
					if (typeof val === 'number') {
						hvalue = highvalue;
					} else {
						hvalue = strDelimiter + sap.apf.utils.escapeOdata(highvalue) + strDelimiter;
					}
				}
			}
			if (sOperator === sap.apf.core.constants.FilterOperators.StartsWith) {
				param = 'startswith(' + sap.apf.utils.escapeOdata(sProperty) + ',' + value + ')';
				param = jQuery.sap.encodeURL(param);
			} else if (sOperator === sap.apf.core.constants.FilterOperators.EndsWith) {
				param = 'endswith(' + sap.apf.utils.escapeOdata(sProperty) + ',' + value + ')';
				param = jQuery.sap.encodeURL(param);
			} else if (sOperator === sap.apf.core.constants.FilterOperators.Contains) {
				// substringof is odata 2.0, and isConsistentWithFilter will be odata 4.0
				param = 'substringof(' + value + ',' + sap.apf.utils.escapeOdata(sProperty) + ')';
				param = jQuery.sap.encodeURL(param);
			} else if (sOperator === sap.apf.core.constants.FilterOperators.BT) {
				param = '((' + jQuery.sap.encodeURL(sap.apf.utils.escapeOdata(sProperty) + spaceCharacter + "ge" + spaceCharacter + value) + ')' + jQuery.sap.encodeURL(spaceCharacter + 'and' + spaceCharacter) + '('
					+ jQuery.sap.encodeURL(sap.apf.utils.escapeOdata(sProperty) + spaceCharacter + "le" + spaceCharacter + hvalue) + '))';
			} else {
				param = '(' + jQuery.sap.encodeURL(sap.apf.utils.escapeOdata(sProperty) + spaceCharacter + sOperator.toLowerCase() + spaceCharacter + value) + ')';
			}
			if (conf && conf.asFilterArray === true) {
				aParam.push(param);
				return aParam;
			}
			return param;
		};
		/**
		 * @description Returns the property.
		 * @returns {string} property
		 */
		this.getProperty = function () {
			return sProperty;
		};
		/**
		 * @description Returns the operator.
		 * @returns {string} op
		 */
		this.getOp = function () {
			return sOperator;
		};
		/**
		 * @description Returns the value.
		 * @returns {string|number|boolean} value
		 */
		this.getValue = function () {
			return val;
		};
		/**
		 * @description Returns the high value (.
		 * @returns {string|number|boolean} value
		 */
		this.getHighValue = function () {
			return highvalue;
		};
		/**
		 * @description Returns the hash value of the filter term. The hash value is
		 *              needed for simple comparison. The hash uniquely identifies a
		 *              filter term.
		 * @returns {number} hash value - Hash as int32
		 */
		this.getHash = function () {
			var sString = sProperty + sOperator + val;
			return sap.apf.utils.hashCode(sString);
		};
		/**
		 * @description Copy constructor.
		 * @returns {sap.apf.core.utils.FilterTerm} Fiterterm
		 */
		this.copy = function () {
			return new sap.apf.core.utils.FilterTerm(oMsgHandler, sProperty, sOperator, val, highvalue);
		};
		/**
		 * @description This function either returns undefined, if the filter term
		 *              is defined for the property or a copy of itself, if not.
		 * @param {string|string[]} property This is either a property or an array of properties.
		 *            If it is an array, then the test is done against each of the
		 *            properties.
		 * @returns {undefined|sap.apf.core.utils.FilterTerm} oFilterTerm Returns
		 *          filter term or undefined, if the property equals the property of
		 *          the filter term.
		 */
		this.removeTermsByProperty = function (property) {
			var i = 0;
			var len = 0;
			if (property instanceof Array) {
				len = property.length;
				for (i = 0; i < len; i++) {
					if (sProperty === property[i]) {
						return undefined;
					}
				}
				// not found - return copy
				return this.copy();
			}
			if (sProperty === property) {
				return undefined;
			}
			return this.copy();
		};
		/**
		 * @description This function either returns undefined, if the filter term
		 *              is defined for the property or a copy of itself, if not.
		 * @param {string|string[]} property This is either a property or an array of properties.
		 *            If it is an array, then the test is done against each of the
		 *            properties.
		 * @param {string} option option
		 * @param {boolean|number|string} value Value of the expression.
		 * @returns {sap.apf.core.utils.FilterTerm|undefined} oFilterTerm The filter
		 *          term or undefined is returned, if the property equals the
		 *          property of the filter term.
		 */
		this.removeTerms = function (property, option, value) {
			var i = 0;
			var len = 0;
			if (property instanceof Array) {
				len = property.length;
				for (i = 0; i < len; i++) {
					if (sProperty === property[i] && sOperator === option && val === value) {
						return undefined;
					}
				}
				// not found - return copy
				return this.copy();
			}
			if (sProperty === property && sOperator === option && val === value) {
				return undefined;
			}
			return this.copy();
		};
		/*
		 * returns an object, that is similar to constructor for sap ui5 filter
		 */
		this.mapToSapUI5FilterExpression = function () {
			if (sOperator === sap.apf.core.constants.FilterOperators.BT) {
				return {
					path: sProperty,
					operator: sOperator,
					value1: val,
					value2: highvalue
				};
			}
			return {
				path: sProperty,
				operator: sOperator,
				value1: val
			};
		};
		/**
		 * Structural traversal and application of a visitor, base case for FilterTerm.
		 * @param {*} visitor - A visitor.
		 * 		Shall at lest provide the following method:
		 * 			processTerm({sap.apf.core.utils.FilterTerm}),
		 * @returns {*}
		 */
		this.traverse = function(visitor) {
			return visitor.processTerm(this);
		};
	};
}());

}; // end of sap/apf/core/utils/filterTerm.js
if ( !jQuery.sap.isDeclared('sap.apf.modeler.core.applicationHandler') ) {
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
/*global sap, jQuery*/

jQuery.sap.declare("sap.apf.modeler.core.applicationHandler");


(function () {
    'use strict';

    /**
     * @private
     * @class Application Handler manages the applications of the APF Configuration Modeler  
     * @param {object} inject Injection of required APF objects
     * @param {object} inject.instance Injection of required instances
     * @param {object} inject.instance.persistenceProxy Instance of the persistenceProxy - provides necessary CRUD functionality
     * @param {object} inject.instance.messageHandler Instance of the MessageHandler
     * @param {object} inject.constructor Injection of required constructors
     * @param {object} inject.constructor.hashtable  Injection of hashtable constructor      * 
     * @param {function} initCallback Function is called after initialization 
     */
    sap.apf.modeler.core.ApplicationHandler = function (inject, initCallback) {
    	
    	var that = this;
    	var persistenceProxy = inject.instance.persistenceProxy;
    	var messageHandler = inject.instance.messageHandler;
    	var Hashtable = inject.constructor.hashtable;
    	var applicationList;
    	
    	this.type = "application";
    	
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.applicationHandler#setAndSave
         * @description Saves or modifies an application on database
         * 
         * @param {object} appObject Application to be saved/modified
         * @param {string} appObject.ApplicationName Name of application
         * @param {string} appObject.SemanticObject Semantic object of application
         * 
         * @param {function(response, metadata, messageObject)} callback Callback returns after create/update operation has been executed
         * @param {string} callback.response ID of the saved/modified application
         * @param {string} callback.metadata Metadata
         * @param {sap.apf.core.MessageObject} callback.messageObject Identifier of corrupt process flow
         * 
         * @param {string} [id] Modifies the application identified by the ID with the committed application
         * @param {boolean} [isImport] If true, id is used for creating a new application with an external id
         */
    	this.setAndSave = function(appObject, callback, id, isImport){
    		if(typeof appObject === "object" && typeof callback === "function" && typeof id === "string" && !isImport){ //update
    			var callbackUpdate = function(metadata, messageObject) {
    				if(messageObject) {
    					callback(undefined, metadata, messageObject);
    				} else {
    					applicationList.setItem(appObject.Application, appObject);
    					callback(appObject.Application, metadata, messageObject);
    				}
    			};
    			if(!appObject.SemanticObject) {
    				appObject.SemanticObject = "";
    			}
    			appObject.Application = id;
                persistenceProxy.update(this.type, appObject, callbackUpdate, [ {name : "Application", value : id }]);
            }else if(typeof appObject === "object" && typeof callback === "function"){ //create
    			var callbackCreate = function(response, metadata, messageObject) {
    				if(messageObject) {
    					callback(response, metadata, messageObject);
    				} else {
    					applicationList.setItem(response.Application, {
                			Application : response.Application,
                			ApplicationName : response.ApplicationName,
                			SemanticObject : response.SemanticObject
        				});
    					callback(response.Application, metadata, messageObject);
    				}
    			};
    			if(!appObject.SemanticObject) {
    				appObject.SemanticObject = "";
    			}
                if(isImport && id){
                    appObject.Application = id;
                }else{
                    appObject.Application = "";
                }
            	persistenceProxy.create(this.type, appObject, callbackCreate);
    		}
    	};
    	
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.applicationHandler#removeApplication
         * @description Removes an application from the database
         * 
         * @param {function(response, metadata, messageObject)} callback Callback returns after remove operation has been executed
         * @param {string} id applicationId
         * @param {string} callback.response ID of application to be removed
         * @param {string} callback.metadata Metadata
         * @param {sap.apf.core.MessageObject} callback.messageObject Identifier of corrupt process flow
         */
    	this.removeApplication = function(id, callback) {
    		var callbackRemove = function(metadata, messageObject) {
    			if(!messageObject) {
    				applicationList.removeItem(id);
    			}
    			inject.functions.resetConfigurationHandler(id);
    			callback(id, metadata, messageObject);
    		};
    		persistenceProxy.remove(this.type, [ {name : "Application", value : id }], callbackRemove);
    	};
    	
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.applicationHandler#getList
         * @description Returns list of all applications
         * @returns {Array.<Object>} Array of all applications
         */
        this.getList = function() {
        	var applicationArray = [];
        	var addAppsToArray = function(key, item) {
        		applicationArray.push(item);
        	};
        	applicationList.forEachOrdered(addAppsToArray);
        	
        	return applicationArray;
        };
        
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.applicationHandler#getApplication
         * @description Returns the requested application based on the ID
         * @param {string} [id] ID of application
         * @returns {object} Application
         */
        this.getApplication = function(id) {
        	return applicationList.getItem(id);
        };
        
        function initialize() {
        	applicationList = new Hashtable(messageHandler);
        	var callbackRead = function(response, metadata, messageObject) {
        		if(response instanceof Array && messageObject === undefined) {
        			response.forEach( function(object) {
        				applicationList.setItem(object.Application,{
                			Application : object.Application,
                			ApplicationName : object.ApplicationName,
                			SemanticObject : object.SemanticObject
        				});
        			});
        		}
        		initCallback(that, messageObject);
        	};
        	persistenceProxy.readCollection(that.type, callbackRead);
        }
        
        initialize();
        
    };
}());
}; // end of sap/apf/modeler/core/applicationHandler.js
if ( !jQuery.sap.isDeclared('sap.apf.modeler.core.configurationEditor') ) {
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
/*global sap, jQuery*/

jQuery.sap.declare("sap.apf.modeler.core.configurationEditor");


(function () {
    'use strict';

    /**
     * @private
     * @name sap.apf.modeler.core.ConfigurationEditor
     * @class Configuration Editor manages the different configuration objects like categories, steps etc.
     * @param {String} configuration - ConfigurationEditor configuration guid
     * @param {Object} inject - Injection of required APF objects
     * @param {Object} inject.instance - Injected instances
     * @param {sap.apf.core.utils.MessageHandler} inject.instance.messageHandler - MessageHandler instance
     * @param {sap.apf.modeler.core.OdataProxy} inject.instance.persistenceProxy - PersistenceProxy instance
     * @param {sap.apf.modeler.core.ConfigurationHandler} inject.instance.configurationHandler - ConfigurationHandler instance
     * @param {sap.apf.modeler.core.TextPool} inject.instance.textPool - TextPool instance
     * @param {sap.apf.modeler.core.Instance} inject.instance.coreApi - Modeler core instance
     * @param {sap.ui.thirdparty.datajs} inject.instance.datajs
     * @param {Object} inject.constructor - Injected constructors
     * @param {sap.apf.core.utils.Hashtable} inject.constructor.hashtable - Hashtable constructor
     * @param {sap.apf.modeler.core.ConfigurationObjects} inject.constructor.configurationObjects
     * @param {sap.apf.modeler.core.Step} inject.constructor.step
     * @param {sap.apf.modeler.core.Representation} inject.constructor.representation
     * @param {sap.apf.modeler.core.ElementContainer} inject.constructor.elementContainer
     * @param {sap.apf.modeler.core.RegistryWrapper} inject.constructor.registryProbe
     * @param {sap.apf.core.ConfigurationFactory} inject.constructor.configurationFactory
     * @param {sap.apf.core.Metadata} inject.constructor.metadata
     * @param {sap.apf.core.EntityTypeMetadata} inject.constructor.entityTypeMetadata
     * @param {sap.apf.core.MetadataFacade} inject.constructor.metadataFacade
     * @param {sap.apf.core.MetadataProperty} inject.constructor.metadataProperty
     * @param {sap.apf.core.MetadataFactory} inject.constructor.configurationFactory
     * @param {Function} callbackAfterLoad - Callback called after load from server with signature callbackAfterLoad(instance, messageObject)
     * @param {Object} dataFromCopy - Optional parameter to set the internal state of the new instance during a copy operation
     * @constructor
     */
    sap.apf.modeler.core.ConfigurationEditor = function (configuration, inject, callbackAfterLoad, dataFromCopy) {
        var that = this;
        var applicationTitle;
        var configurationName;
        var configurationHandler = inject.instance.configurationHandler;
        var persistenceProxy = inject.instance.persistenceProxy;
        var messageHandler = inject.instance.messageHandler;
        var metadataFactory = inject.instance.metadataFactory;
        var isSaved = true;
        var stepContainer,
            categoryContainer,
            facetFilterContainer,
            navigationTargetContainer,
            categoryStepAssignmentContainer,
            serviceList;
        var configurationObjects = new inject.constructor.configurationObjects(inject);
    
        var configurationFactory = new inject.constructor.configurationFactory({
        	messageHandler : messageHandler,
        	constructor : {
        		registryProbe : inject.constructor.registryProbe
        	}
        });
        if(!dataFromCopy){
        	stepContainer        = new inject.constructor.elementContainer("Step", inject.constructor.step, inject);
            categoryContainer    = new inject.constructor.elementContainer("Category", undefined, inject);
            facetFilterContainer = new inject.constructor.elementContainer("FacetFilter", inject.constructor.facetFilter, inject);
            navigationTargetContainer = new inject.constructor.elementContainer("NavigationTarget", inject.constructor.navigationTarget, inject);
            categoryStepAssignmentContainer = new inject.constructor.elementContainer("CategoryStepAssignment", inject.constructor.elementContainer, inject);
            serviceList          = [];
        }else{
        	stepContainer        			= dataFromCopy.stepContainer;
            categoryContainer    			= dataFromCopy.categoryContainer;
            facetFilterContainer 			= dataFromCopy.facetFilterContainer;
            navigationTargetContainer       = dataFromCopy.navigationTargetContainer;
            categoryStepAssignmentContainer = dataFromCopy.categoryStepAssignmentContainer;
            serviceList          			= dataFromCopy.serviceList;	
        }
        
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationEditor#registerService
         * @description Registers service for value help collection. Message will be thrown in case of invalid service.
         * @param {String} serviceRoot
         * @returns {Boolean} isServiceRegistered - Returns true if service is registered successfully
         */
        this.registerService = function(serviceRoot) {
        	var isServiceRegistered = false;
        	if(serviceList.indexOf(serviceRoot) === -1) {
        		if(metadataFactory.getMetadata(serviceRoot)) {
        			serviceList.push(serviceRoot);
        			isServiceRegistered = true;
        		}
        	} else {
        		isServiceRegistered = true;
        	}
        	return isServiceRegistered;
        };
        
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationEditor#getAllServices
         * @description Returns all successfully registered services.
         * @returns {Object[]} serviceList
         */
        this.getAllServices = function() {
        	return serviceList;
        };
        
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationEditor#getAllEntitySetsOfService
         * @description Returns all entity sets of service.
         * @param {String} serviceRoot 
         * @returns {Object[]} entitySets
         */
        this.getAllEntitySetsOfService = function(serviceRoot) {
        	var entitySets = [];
        	if(serviceList.indexOf(serviceRoot) > -1) {
        		entitySets = metadataFactory.getEntitySets(serviceRoot);
        	}
        	return entitySets;
        };
        
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationEditor#getAllEntitySetsOfServiceWithGivenProperties
         * @description Returns all entity sets of service that have the given set of properties as filterable properties.
         * @param {String} serviceRoot 
         * @param {Array} properties
         * @returns {Object[]} entitySets
         */
        this.getAllEntitySetsOfServiceWithGivenProperties = function(serviceRoot, properties) {
        	var result = [],
        	    metadata;
        	
        	var entitySets = this.getAllEntitySetsOfService(serviceRoot);
        	if(!properties || properties.length === 0){
        		return entitySets;
        	}
        	
        	metadata = metadataFactory.getMetadata(serviceRoot);
        	
        	entitySets.forEach(function(entitySet){
        		var filterableProperties = metadata.getFilterableProperties(entitySet);
        		var hasAllProperties = true;
        		for(var i = 0; i < properties.length; i++){
        			if( filterableProperties.indexOf( properties[i]) <= -1 ){
        				hasAllProperties = false;
        				break;
        			}
        		}
        		if(hasAllProperties){
        			result.push(entitySet);
        		}
        	});
      
        	return result;
        };
        
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationEditor#getAllPropertiesOfEntitySet
         * @description Returns all properties of an entity set provided the entitySet has an "extension".
         *      Extension means an annotation in the entityType of metadata.xml equak to "sap:semantics"="aggregate" or "sap:semantics"="parameter".
         *      When the entityType does not have this annotation then the result array is empty.
         * @param {String} serviceRoot 
         * @param {String} entitySet 
         * @returns {Object[]} entitySetProperties
         */
        this.getAllPropertiesOfEntitySet = function(serviceRoot, entitySet) {
        	var entitySetProperties = [];
        	if(serviceList.indexOf(serviceRoot) > -1) {
        		entitySetProperties = metadataFactory.getMetadata(serviceRoot).getAllAggregatePropertiesOfEntitySet(entitySet);
        	}
        	return entitySetProperties;
        };
        
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationEditor#getAllKnownProperties
         * @description Returns all known properties of registered services including parameter entity set key properties. 
         * @returns {Object[]} allKnownProperties
         */
        this.getAllKnownProperties = function() {
        	var allKnownProperties = [];
        	var metadata;
        	serviceList.forEach(function(serviceRoots) {
        		metadata = metadataFactory.getMetadata(serviceRoots);
        		allKnownProperties = allKnownProperties.concat(metadata.getAllProperties());
			});
        	allKnownProperties = sap.apf.utils.eliminateDuplicatesInArray(messageHandler, allKnownProperties);
        	return allKnownProperties;
        };
        
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationEditor#setApplicationTitle
         * @description Set application title of analytical configuration.
         * @param {String} textKey Text key for application title
         */
        this.setApplicationTitle = function(textKey) {
            isSaved = false;
        	applicationTitle = textKey;
        };
        /**
         * @private
         * @function
         * @description Get application title of analytical configuration.
         * @name sap.apf.modeler.core.ConfigurationEditor#getApplicationTitle
         * @returns {String} textKey Text key of application title
         */
        this.getApplicationTitle = function() {
        	return applicationTitle;
        };
        /**
         * @private
         * @function
         * @description Get configuration name of analytical configuration.
         * Only needed modeler core internally in order to synchronize the configuration list of configuration handler during reset.
         * @name sap.apf.modeler.core.ConfigurationEditor#getConfigurationName
         * @returns {String} name Configuration name
         */
        this.getConfigurationName = function() {
        	if (!configurationName) {
        		configurationName = configurationHandler && configurationHandler.getConfiguration && configurationHandler.getConfiguration(configuration.id || configuration).AnalyticalConfigurationName;
        	}
            return configurationName;
        };
        
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationEditor#getCategoryStepAssignments
         * @description Get the assignments of steps for a given category
         * @param {String} id Category identifier
         * @returns {array|boolean} Returns the step assignments or false for a not existing category
         */
        this.getCategoryStepAssignments = function(categoryId){
        	var result = [];
        	if(!this.getCategory(categoryId)){
        		return false;
        	}
        	var categoryStepAssignment = categoryStepAssignmentContainer.getElement(categoryId);
        	if(categoryStepAssignment){
            	categoryStepAssignment.getElements().forEach(function(step){
            		result.push(step.stepId);
            	});	
        	}
        	return result;
        };
        
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationEditor#addCategoryStepAssignment
         * @description Create a new category step assignment
         * @param {string} categoryId
         * @param {string} stepId
         * @returns {boolean} Returns true if a new category step assignment has been created
         */
        this.addCategoryStepAssignment = function (categoryId, stepId) {
        	if(!this.getCategory(categoryId) || !this.getStep(stepId)){
        		return false;
        	}
        	var categoryStepAssignment = categoryStepAssignmentContainer.getElement(categoryId);
        	if(!categoryStepAssignment){
        		categoryStepAssignmentContainer.createElementWithProposedId({}, categoryId);
        		categoryStepAssignment = categoryStepAssignmentContainer.getElement(categoryId);
        	}
        	if(!categoryStepAssignment.getElement(stepId)){
        		categoryStepAssignment.createElementWithProposedId({stepId: stepId}, stepId);
        		return true;
        	}
        	return false;
        };
        
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationEditor#removeCategoryStepAssignment
         * @description Remove an existing category step assignment. 
         * @description If the last category assignment for a step is removed, the step is removed as well.
         * @description  - If the assignment changes please use first(!) addCategoryStepAssignment for the new assignments
         * @description  - Afterwards(!) remove the not needed assignments with removeCategoryStepAssignment 
         * @description  - Otherwise(!) you might loose the step object in between 
         * @param {string} categoryId - category
         * @param {string} [stepId] - optional parameter for step
         * @returns {boolean} Returns true if a category step assignment was removed
         */
        this.removeCategoryStepAssignment = function (categoryId, stepId) {
        	var removedItem;
        	
        	if(!stepId){
        		var steps = this.getCategoryStepAssignments(categoryId);
        		removedItem = categoryStepAssignmentContainer.removeElement(categoryId);
        		
        		if(removedItem){
        			_removeDanglingSteps(steps);	
        		}
        		
        		return !!removedItem;
        	}
        	
        	var categoryStepAssignment = categoryStepAssignmentContainer.getElement(categoryId);
        	if(!categoryStepAssignment){
        		return false;
        	}
        	removedItem = categoryStepAssignment.removeElement(stepId);
        	if(categoryStepAssignment.getElements().length === 0){
        		categoryStepAssignmentContainer.removeElement(categoryId);
        	}
        	
        	if(removedItem){
    			_removeDanglingSteps([stepId]);	
    		}
        	
        	return !!removedItem;
        };
        
        function _removeDanglingSteps(steps) {
        	if(!steps){
        		return;
        	}
        	steps.forEach(function(stepId){
        		if(that.getCategoriesForStep(stepId).length === 0){
        			_removeStep(stepId);
        		}
        	});
        }
        
        /**
         * Change the ordering by moving one category step assignment in the ordering before another category step assignments.
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationObjects#moveCategoryStepAssignmentBefore
         * @param {string} beforeStepId
         * @param {string} movedStepId
         * @returns {number|null} WHEN either Id is not contained or undefined THEN return null.
         *      Otherwise return the index of the index position of movedStepId, after the move.
         */
        this.moveCategoryStepAssignmentBefore = function(categoryId, beforeStepId, movedStepId) {
          	var categoryStepAssignment = categoryStepAssignmentContainer.getElement(categoryId);
        	if(!categoryStepAssignment){
        		return null;
        	}
        	return categoryStepAssignment.moveBefore(beforeStepId, movedStepId);
        };
        
        /**
         * Change the ordering of category step assignments by moving one category step assignment in the ordering to the end.
         * The move only happens within the steps for a given category
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationObjects#moveCategoryStepAssignmentToEnd
         * @param {string} categoryId
         * @param {string} stepId
         * @returns {number|null} WHEN the category step assignment is not contained or undefined THEN return null.
         *      Otherwise return the index of the index position of the stepId for the given categoryId, after the move.
         */
        this.moveCategoryStepAssignmentToEnd = function(categoryId, stepId) {
          	var categoryStepAssignment = categoryStepAssignmentContainer.getElement(categoryId);
        	if(!categoryStepAssignment){
        		return null;
        	}
        	return categoryStepAssignment.moveToEnd(stepId);
        };
        
        /**
         * Move a category step assignment up or down some places specified by distance
         * The move only happens within the steps for a given category
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationEditor#moveCategoryStepAssignmentUpOrDown
        * @param {string} categoryId
         * @param {string} stepId
         * @param {number} distance number of places
         */
        this.moveCategoryStepAssignmentUpOrDown = function(categoryId, stepId, distance) {
          	var categoryStepAssignment = categoryStepAssignmentContainer.getElement(categoryId);
        	if(!categoryStepAssignment){
        		return null;
        	}
        	return categoryStepAssignment.moveUpOrDown(stepId, distance);
        };
        
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationEditor#getCategory
         * @description Get an existing category
         * @param {String} id Category identifier
         * @returns {object|undefined} Returns the category object for the ID or undefined for a not existing category
         */
        this.getCategory = categoryContainer.getElement;

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationEditor#setCategory
         * @description Create a new or update an existing category. A new category object assigns a member "id" with its id.
         * @param {object} category
         * @param {string} [category.labelKey] Text key for the category
         * @param {String} [categoryId] Category identifier. If parameter is omitted, then the function has the meaning of create, otherwise update.
         * @returns{String} Returns the id of a newly created or updated category
         */
        this.setCategory = function (category, categoryId) {
            isSaved = false;
            return categoryContainer.setElement( category, categoryId);
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationEditor#createCategoryWithId
         * @description Create a new category and set its given Id.
         * @param {object} category
         * @param {string} category.labelKey Text key for the category
         * @param {String} categoryId Category identifier.
         * @returns{String} Returns the given id.
         */
        this.createCategoryWithId = function (category, categoryId) {
            isSaved = false;
            return categoryContainer.createElementWithProposedId( category, categoryId).getId();  
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationEditor#removeCategory
         * @description Remove an existing category and its corresponding steps which are not assigned to other categories.
         * @param {String} categoryId - Category identifier.
         */
        this.removeCategory = function(categoryId){
            
        	var steps = that.getCategoryStepAssignments(categoryId);
            if(steps){
            	steps.forEach(function(stepId){
            		var categories = that.getCategoriesForStep(stepId);
            		if(!categories || categories.length < 2){
            			_removeStep(stepId);
            		}
            	});
            }
            categoryContainer.removeElement(categoryId);
            
        };


        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationEditor#getCategories
         * @description Get all existing categories.
         * @returns {Object[]}
         */
        this.getCategories = categoryContainer.getElements;

        /**
         * @private
         * @name sap.apf.modeler.core.ConfigurationEditor#copyCategory
         * @function
         * @param {String} categoryId - Category identifier
         * @description Copy a category.
         * @returns {String} - New category id or undefined for not existing category
         */
        this.copyCategory = function(categoryId) {
        	var newCategoryId = categoryContainer.copyElement(categoryId),
        	    newStepId;
        	if(!newCategoryId){
        		return;
        	}
        	that.getCategoryStepAssignments(categoryId).forEach(function(stepId){
        		newStepId = _copyStep(stepId, newCategoryId);
        	});
        	return newCategoryId;
        };
        
        /**
         * Change the ordering by moving one category in the ordering before another category.
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationObjects#moveCategoryBefore
         * @param {string} beforeCategoryId
         * @param {string} movedCategoryId
         * @returns {number|null} WHEN either Id is not contained or undefined THEN return null.
         *      Otherwise return the index of the index position of movedCategoryId, after the move.
         */
        this.moveCategoryBefore = function(beforeCategoryId, movedCategoryId) {
        	return categoryContainer.moveBefore(beforeCategoryId, movedCategoryId);
        };
        
        
        /**
         * Change the ordering of categories by moving one category in the ordering to the end.
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationObjects#moveCategoryToEnd
         * @param {string} categoryId
         * @returns {number|null} WHEN the key categoryId is not contained or undefined THEN return null.
         *      Otherwise return the index of the index position of category(Id), after the move.
         */
        this.moveCategoryToEnd = function(categoryId) {
        	return categoryContainer.moveToEnd(categoryId);
        };
        
        /**
         * Move a category up or down some places specified by distance
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationEditor#moveCategoryUpOrDown
         * @param {string} categoryId id of the category, that shall be moved
         * @param {number} distance number of places
         */
        this.moveCategoryUpOrDown = function(categoryId, distance) {
        	return categoryContainer.moveUpOrDown(categoryId, distance);
        };
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationObjects#serialize
         * @description Get a serializable object for the configuration
         * @returns{Object}
         */
        this.serialize = function () {
            return configurationObjects.serializeConfiguration(that);
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationEditor#isSaved
         * @description Returns "false" if the configuration has unsaved changes, else "true"
         * @returns{Boolean}
         */
        this.isSaved = function () {
            return isSaved;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationEditor#setIsUnsaved
         * @description Sets the ConfigurationEditor to an unsaved state, such that isSaved()===false.
         * This method shall be called by the UI whenever it edited some configuration sub-entity, e.g. the entitySet of a request.
         */
        this.setIsUnsaved = function () {
            isSaved = false;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationEditor#save
         * @description Saves or modifies a configuration on database and replaces the temporary configuration id with a server generated one
         * @param {function(response, metadata, messageObject)} callback Callback returns after create/update operation has been executed
         * @param {string} callback.response ID of the saved/modified configuration
         * @param {string} callback.metadata Metadata
         * @param {sap.apf.core.MessageObject} callback.messageObject Identifier of corrupt process flow
         *
         */
        this.save = function (callback) {
            function callbackCreate(response, metadata, messageObject) {
                if (!messageObject) {
                    isSaved = true;
                    configurationName = config.AnalyticalConfigurationName;
                    configurationHandler.replaceConfigurationId(configuration.id || configuration, response.AnalyticalConfiguration);
                    configuration = response.AnalyticalConfiguration;
                }
                callback(configuration, metadata, messageObject);
            }

            function callbackUpdate(metadata, messageObject) {
                if (!messageObject) {
                    isSaved = true;
                    configurationName = config.AnalyticalConfigurationName;
                }
                callback(configuration.id || configuration, metadata, messageObject);
            }

            var config = {
                AnalyticalConfiguration: "",
                AnalyticalConfigurationName: configurationHandler.getConfiguration(configuration.id || configuration).AnalyticalConfigurationName,
                Application: configurationHandler.getApplicationId(),
                SerializedAnalyticalConfiguration: JSON.stringify(this.serialize()),
               
                //TODO: Workaround for MockServer: the following properties needs to be added at least as an empty string for every configuration. 
                //If not, these properties are not available in the result data set of the MockServer and OData requests containing one of the 
                //these select properties ($select) below will fail. 
                //Assumption: these properties are set on server side in "exits". Holds for PUT and POST. 
                CreatedByUser: "", 
                CreationUTCDateTime: null,
                LastChangeUTCDateTime: null,
                LastChangedByUser: ""
            };
            if(typeof configuration === 'string') {
                if (configuration.indexOf("apf1972-") === 0) {
                    //noinspection JSCheckFunctionSignatures
                    persistenceProxy.create("configuration", config, callbackCreate);
                } else {
                    config.AnalyticalConfiguration = configuration;
                    persistenceProxy.update("configuration", config, callbackUpdate, [{name: "AnalyticalConfiguration", value: configuration }]);
                }
            } else {
            	if (configuration.id.indexOf("apf1972-") === 0) {
            		config.AnalyticalConfiguration = "";
                    config.CreationUTCDateTime = null;
                    config.LastChangeUTCDateTime = null;
            	}else{
            		config.AnalyticalConfiguration = configuration.id;
                    config.CreationUTCDateTime = configuration.creationDate;
                    config.LastChangeUTCDateTime = configuration.lastChangeDate;
            	}
                if(configuration.updateExisting){
                    persistenceProxy.update("configuration", config, callbackUpdate,[{name: "AnalyticalConfiguration", value: configuration.id}]);
                } else {
                    
                    persistenceProxy.create("configuration", config, callbackCreate);
                }
            }
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationEditor#createFacetFilterWithId
         * @description Create an empty facet filter managed by this editor.
         * @param {string} facetFilterId - Given Id used to identify the facet filter.
         * @returns {String} - facetFilterId
         */
        this.createFacetFilterWithId = function(facetFilterId) {
           return facetFilterContainer.createElementWithProposedId(undefined, facetFilterId).getId();
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationEditor#createFacetFilter
         * @description Create an empty facet filter managed by this editor.
         * @returns {String} - facetFilterId
         */
        this.createFacetFilter = function() {
            return facetFilterContainer.createElement().getId();
        };

        /**
         * @private
         * @name sap.apf.modeler.core.ConfigurationEditor#removeFacetFilter
         * @function
         * @description Remove an existing facet filter.
         * @param {String} id
         */
        this.removeFacetFilter = facetFilterContainer.removeElement;

        /**
         * @private
         * @name sap.apf.modeler.core.ConfigurationEditor#getFacetFilter
         * @function
         * @param {String} facetFilterId
         * @returns {sap.apf.modeler.core.FacetFilter}
         */
        this.getFacetFilter = facetFilterContainer.getElement;

        /**
         * @private
         * @name sap.apf.modeler.core.ConfigurationEditor#getFacetFilters
         * @function
         * @description Get all existing facet filter.
         * @returns {sap.apf.modeler.core.FacetFilter[]} {@link sap.apf.modeler.core.FacetFilter}
         */
        this.getFacetFilters = facetFilterContainer.getElements;
        
        /**
         * @private
         * @name sap.apf.modeler.core.ConfigurationEditor#copyFacetFilter
         * @function
         * @param {String} facetFilterId
         * @description Copy a facet filter.
         * @returns {String} - New facet filter id or undefined for not existing facet filter
         */
        this.copyFacetFilter = facetFilterContainer.copyElement;      
        
        /**
         * Change the ordering by moving one facet filter in the ordering before another facet filter.
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationObjects#moveFacetFilterBefore
         * @param {string} beforeFacetFilterId
         * @param {string} movedFacetFilterId
         * @returns {number|null} WHEN either Id is not contained or undefined THEN return null.
         *      Otherwise return the index of the index position of movedFacetFilterId, after the move.
         */
        this.moveFacetFilterBefore = function(beforeFacetFilterId, movedFacetFilterId) {
        	return facetFilterContainer.moveBefore(beforeFacetFilterId, movedFacetFilterId);
        };
        
        /**
         * Change the ordering of facet filters by moving one facet filter in the ordering to the end.
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationObjects#moveFacetFilterToEnd
         * @param {string} facetFilterId
         * @returns {number|null} WHEN the key facetFilterId is not contained or undefined THEN return null.
         *      Otherwise return the index of the index position of facetFilter(Id), after the move.
         */
        this.moveFacetFilterToEnd = function(facetFilterId) {
        	return facetFilterContainer.moveToEnd(facetFilterId);
        };
        
        /**
         * Move a facet filter up or down some places specified by distance
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationEditor#moveFacetFilterUpOrDown
         * @param {string} facetFilterId id of the facetFilter, that shall be moved
         * @param {number} distance number of places
         */
        this.moveFacetFilterUpOrDown = function(facetFilterId, distance) {
        	return facetFilterContainer.moveUpOrDown(facetFilterId, distance);
        };
        
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationEditor#createNavigationTargetWithId
         * @description Create an empty navigation target managed by this editor.
         * @param {string} navigationTargetId - Given Id used to identify the navigation target.
         * @returns {String} - navigationTargetId
         */
        this.createNavigationTargetWithId = function(navigationTargetId) {
            return navigationTargetContainer.createElementWithProposedId(undefined, navigationTargetId).getId();
           
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationEditor#createNavigationTarget
         * @description Create an empty navigation target managed by this editor.
         * @returns {String} - navigationTargetId
         */
        this.createNavigationTarget = function() {
            return navigationTargetContainer.createElement().getId();
        };

        /**
         * @private
         * @name sap.apf.modeler.core.ConfigurationEditor#removeNavigationTarget
         * @function
         * @description Remove an existing navigation target.
         * @param {String} id
         */
        this.removeNavigationTarget = navigationTargetContainer.removeElement;

        /**
         * @private
         * @name sap.apf.modeler.core.ConfigurationEditor#getNavigationTarget
         * @function
         * @param {String} navigationTargetId
         * @returns {sap.apf.modeler.core.NavigationTarget}
         */
        this.getNavigationTarget = navigationTargetContainer.getElement;

        /**
         * @private
         * @name sap.apf.modeler.core.ConfigurationEditor#getNavigationTargets
         * @function
         * @description Get all existing navigation targets
         * @returns {sap.apf.modeler.core.NavigationTarget[]} {@link sap.apf.modeler.core.NavigationTarget}
         */
        this.getNavigationTargets = navigationTargetContainer.getElements;
        
        /**
         * @private
         * @name sap.apf.modeler.core.ConfigurationEditor#copyNavigationTarget
         * @function
         * @param {String} navigationTargetId
         * @description Copy a navigation target.
         * @returns {String} - New navigation target id or undefined for not existing navigation target
         */
        this.copyNavigationTarget = navigationTargetContainer.copyElement;  
        
        /**
         * Change the ordering by moving one navigation target in the ordering before another navigation target.
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationObjects#moveNavigationTargetBefore
         * @param {string} beforeNavigationTargetId
         * @param {string} movedNavigationTargetId
         * @returns {number|null} WHEN either Id is not contained or undefined THEN return null.
         *      Otherwise return the index of the index position of movedNavigationTargetId, after the move.
         */
        this.moveNavigationTargetBefore = function(beforeNavigationTargetId, movedNavigationTargetId) {
        	return navigationTargetContainer.moveBefore(beforeNavigationTargetId, movedNavigationTargetId);
        };
        
        /**
         * Change the ordering of navigation targets by moving one navigation target in the ordering to the end.
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationObjects#moveNavigationTargetToEnd
         * @param {string} navigationTargetId
         * @returns {number|null} WHEN the key navigationTargetId is not contained or undefined THEN return null.
         *      Otherwise return the index of the index position of navigationTarget(Id), after the move.
         */
        this.moveNavigationTargetToEnd = function(navigationTargetId) {
        	return navigationTargetContainer.moveToEnd(navigationTargetId);
        };
        
        /**
         * Move a navigation target up or down some places specified by distance
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationEditor#moveNavigationTargetUpOrDown
         * @param {string} navigationTargetId id of the navigationTarget, that shall be moved
         * @param {number} distance number of places
         */
        this.moveNavigationTargetUpOrDown = function(navigationTargetId, distance) {
        	return navigationTargetContainer.moveUpOrDown(navigationTargetId, distance);
        };
        
        /**
        
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationEditor#createStepWithId
         * @description Create an empty step managed by this editor.
         * @param {string} stepId - Given Id used to identify the step.
         * @returns {String} - stepId 
         */
        this.createStepWithId = function(stepId) {   
        	return stepContainer.createElementWithProposedId(undefined, stepId).getId(); 
        };
        
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationEditor#createStep
         * @description Create an empty step managed by this editor.
         * @param {string} categoryId - Given categoryId the step shall be assigned to
         * @returns {String|undefined} - stepId or undefined if the category does not exist
         */
        this.createStep = function(categoryId) {
         	if(!this.getCategory(categoryId)){
        		return;
        	}
        	var stepId = stepContainer.createElement().getId();
        	this.addCategoryStepAssignment(categoryId, stepId);
            return stepId;
        };
        
        
        var _removeStep = stepContainer.removeElement; // private now. If called from external use removeCategoryStepAssignment instead
        
        /**
         * @private
         * @name sap.apf.modeler.core.ConfigurationEditor#getStep
         * @function
         * @param {String} stepId
         * @returns {sap.apf.modeler.core.Step}
         */
        this.getStep = stepContainer.getElement;
        
        /**
         * @private
         * @name sap.apf.modeler.core.ConfigurationEditor#getSteps
         * @function
         * @description Get all existing steps.
         * @returns {sap.apf.modeler.core.Step[]} {@link sap.apf.modeler.core.Step}
         */
        this.getSteps = stepContainer.getElements;
        
        /**
         * @private
         * @name sap.apf.modeler.core.ConfigurationEditor#getStepsNotAssignedToCategory
         * @function
         * @description Returns all step ids which are not assigned to the given category ID.
         * @param {String} categoryId
         * @returns {String[]} - Step IDs
         */
        this.getStepsNotAssignedToCategory = function(categoryId) {
        	var assignedSteps = this.getCategoryStepAssignments(categoryId);
        	var unassignedSteps = [];
        	
        	that.getSteps().forEach(function(step){
        		var stepId = step.getId();
	        	if(assignedSteps.indexOf(stepId) === -1){
	        		unassignedSteps.push(stepId);
	        	}
            });
        	return unassignedSteps;
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.ConfigurationEditor#copyStep
         * @function
         * @param {String} stepId - Step identifier
         * @description Copy a step.
         * @returns {String} - New step id or false in case of error
         */
        this.copyStep = function(stepId){
        	var newStepId = _copyStep(stepId);
        	if(!newStepId){
        	 return false;
        	}
        	var categories = this.getCategoriesForStep(stepId);
        	if(categories){
             	categories.forEach(function(categoryId){
            	    that.addCategoryStepAssignment(categoryId, newStepId);
            	});	
        	}
        	return newStepId;
        };
        
        function _copyStep(stepId, categoryIdForNewStep) {
        	if(categoryIdForNewStep && !that.getCategory(categoryIdForNewStep)){
        		return false;
        	}
        	var newStepId = stepContainer.copyElement(stepId);
        	if(!newStepId){
        		return false;
        	}
        	if(categoryIdForNewStep){
        	 that.addCategoryStepAssignment(categoryIdForNewStep, newStepId);
        	}
        	return newStepId;
        }
        
        /**
         * @private
         * @name sap.apf.modeler.core.ConfigurationEditor#getCategoriesForStep
         * @function
         * @param {String} stepId - Step identifier
         * @description Get all categories the step is assigned to
         * @returns {array} - Array of category Ids 
         */
        this.getCategoriesForStep = function getCategoriesForStep(stepId){
        	var result = [];
        	var categories = that.getCategories();
        	if(categories){
             	categories.forEach(function(category){
             		var categoryId = category.getId();
            		var steps = that.getCategoryStepAssignments(categoryId);
            		if(steps && steps.indexOf(stepId) > -1){
            			result.push(categoryId);
            		}
            	});	
        	}
        	return result;
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.ConfigurationEditor#getAssignableStepsForNavigationTarget
         * @function
         * @param {String} navigationTargetId - Navigation target identifier
         * @description Get all steps that can be assigned to the given navigation target
         * @returns {array} - Array of step Ids 
         */
        this.getAssignableStepsForNavigationTarget = function(navigationTargetId){
        	var result = [];
        	that.getSteps().forEach(function(step){
        		var found = false;
        		step.getNavigationTargets().forEach(function(navTarId){
        			if(navigationTargetId === navTarId){
        				found = true;
        			}
        		});
        		if(!found){
        		 result.push(step.getId());	
        		}
        	});
        	return result;
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.ConfigurationEditor#getStepsAssignedToNavigationTarget
         * @function
         * @param {String} navigationTargetId - Navigation target identifier
         * @description Get all steps that are assigned to the given navigation target
         * @returns {array} - Array of step Ids 
         */
        this.getStepsAssignedToNavigationTarget = function(navigationTargetId){
        	var result = [];
        	that.getSteps().forEach(function(step){
        		var found = false;
        		step.getNavigationTargets().forEach(function(navTarId){
        			if(navigationTargetId === navTarId){
        				found = true;
        			}
        		});
        		if(found){
        		 result.push(step.getId());	
        		}
        	});
        	return result;
        };
        
        /**
         * @private
         * @name sap.apf.modeler.core.ConfigurationEditor#copy
         * @function
         * @description Execute a deep copy of the configuration editor and its referenced objects
         * @param {String} newConfigurationId - New configuration id for the copied instance
         * @returns {Object} sap.apf.modeler.core.ConfigurationEditor# - New configuration editor being a copy of this object
         */
        this.copy = function( newConfigurationId){
        	var dataForCopy = {
        			stepContainer        			: stepContainer,
                    categoryContainer    			: categoryContainer,
                    facetFilterContainer 			: facetFilterContainer,
                    navigationTargetContainer 		: navigationTargetContainer,
                    categoryStepAssignmentContainer : categoryStepAssignmentContainer,
                    serviceList          			: serviceList };
        	
        	var dataFromCopy = sap.apf.modeler.core.ConfigurationObjects.deepDataCopy( dataForCopy );
        	return new sap.apf.modeler.core.ConfigurationEditor(newConfigurationId, inject, undefined, dataFromCopy);
        };  
        
        if(typeof configuration === 'string') {
            if (configuration.indexOf("apf1972-") === 0) { // temporary id means new unsaved config
            	isSaved = false;
            	if(callbackAfterLoad){
            	  callbackAfterLoad(that, undefined); 
            	}
            } else {
            	if(!dataFromCopy){
	            	loadConfigurationFromServer(configuration, persistenceProxy, function(result, messageObject){
	            	   if(!messageObject){
	            		   var serializedAnalyticalConfiguration = JSON.parse(result.SerializedAnalyticalConfiguration);
	            		   that.setApplicationTitle(serializedAnalyticalConfiguration.applicationTitle);
	            		   configurationFactory.loadConfig(serializedAnalyticalConfiguration);	
	                       configurationObjects.mapToDesignTime(configurationFactory.getRegistry(), that);
	                       isSaved = true;
	                       configurationName = result.AnalyticalConfigurationName;
	                       callbackAfterLoad(that, undefined);   
	            	   } else {
	            		   callbackAfterLoad(undefined, messageObject);  
	            	   }	  
	            	});
            	}
            }
        } else {
            configurationFactory.loadConfig(configuration.content);
            configurationObjects.mapToDesignTime(configurationFactory.getRegistry(), this);
        	if(callbackAfterLoad){
          	  callbackAfterLoad(that, undefined); 
          	}
        }
        
        function loadConfigurationFromServer(configId, persistProxy, callbackAfterLoad) {
            persistProxy.readEntity(
                "configuration",
                function(result, metadata, messageObject) {
                    callbackAfterLoad(result, messageObject);
                },
                [{
                    name : "AnalyticalConfiguration",
                    value: configId
                }],
                undefined,
                true,  configurationHandler.getApplicationId()
            );
        }
    };
}());

}; // end of sap/apf/modeler/core/configurationEditor.js
if ( !jQuery.sap.isDeclared('sap.apf.modeler.core.configurationHandler') ) {
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
/*global sap, jQuery*/

jQuery.sap.declare("sap.apf.modeler.core.configurationHandler");




(function () {
    'use strict';

    /**
     * @private
     * @class Configuration Handler manages the different configurations for an application
     * @param {Object} inject Injection of required APF objects
     * @param {Object} inject.instance Injected instances
     * @param {Object} inject.instance.messageHandler messageHandler instance
     * @param {Object} inject.instance.persistenceProxy persistenceProxy instance
     * @param {Object} inject.constructor Injected constructors
     * @param {Object} inject.constructor.configurationEditor ConfigurationEditor constructor
     * @param {Object} inject.constructor.hashtable Hashtable constructor
     * @param {Object} inject.constructor.lazyLoader LazyLoader constructor
     * @param {Function} inject.functions.getApplication Function for getting application data for a given id
     */
    sap.apf.modeler.core.ConfigurationHandler = function (inject) {

    	var that = this;
        var messageHandler = inject.instance.messageHandler;
        var persistenceProxy = inject.instance.persistenceProxy;

        var ConfigurationEditor = inject.constructor.configurationEditor;
        var Hashtable = inject.constructor.hashtable;
        var LazyLoader = inject.constructor.lazyLoader;
        
        var configList = new Hashtable(messageHandler);
        var lazyLoadersForConfigEditor =  new Hashtable(messageHandler);
        var memorizedConfigurationEditorInstances =  new Hashtable(messageHandler);

        var applicationId, textPool;
        
     	 var injectLazyLoader = {
          		constructor : { hashtable      : Hashtable },
          		instance    : { messageHandler : messageHandler}
          };
     	 
        /**
         * @private
         * @see sap.apf.modeler.core.TextPool#exportTexts
         */
        this.exportTexts = function() {
        	return textPool.exportTexts();
        };

        this.getTextPool = function() {
        	return textPool;
        };
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationHandler#setApplicationId
         * @description Sets the application id
         * @param {String} id Application identifier
         * @param {Array} existingAnalyticalConfigurations (fetched from DB)
         * @param {sap.apf.core.modeler.TextPool} oTextPool existing text pool
         */
        this.setApplicationIdAndContext = function(id, existingAnalyticalConfigurations, oTextPool){
        	textPool = oTextPool || textPool;
        	configList = new Hashtable(messageHandler);
        	var  i, len = existingAnalyticalConfigurations.length;
        	
        	for (i = 0; i < len; i++) {
        		configList.setItem(existingAnalyticalConfigurations[i].AnalyticalConfiguration, existingAnalyticalConfigurations[i]);
        	}
        	applicationId = id;
        };
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationHandler#getApplicationId
         * @description Returns the application ID
         * @returns {string} Application ID
         */
        this.getApplicationId = function(){
        	return applicationId;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationHandler#setConfiguration
         * @description Creates or updates the configuration header information.
         * @param {Object} configObject Configuration object
         * @param {String} configObject.AnalyticalConfigurationName Configuration name
         * @param {String} [id] Configuration identifier
         */
        this.setConfiguration = function(configObject, id){
            configObject.AnalyticalConfiguration = id || getTempId();
            configObject.Application = applicationId;
            configList.setItem(configObject.AnalyticalConfiguration, configObject);
            return configObject.AnalyticalConfiguration;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationHandler#getList
         * @description Returns a list of configurations as array
         * @returns {Array.<Object>} Array of configurations
         */
        this.getList = function(){
            var configurationArray = [];
            var addConfigToArray = function(key, item) {
                configurationArray.push(item);
            };
            configList.each(addConfigToArray);
            return configurationArray;
        };

        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationHandler#getConfiguration
         * @description Returns a configuration object for a given id
         * @param {String} id Configuration identifier
         * @returns {Object} Configuration object
         */
        this.getConfiguration = function(id){
            return configList.getItem(id);
        };
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationHandler#loadConfiguration
         * @description Returns a configuration editor for a given configuration that is specified by its id
         * @param {String|object} configuration If string, value is configuration id. If object, configuration id is contained in property "id" 
         * @param {function(configurationEditor)} callback Callback returns after configuration editor has been instantiated
         * @param {sap.apf.modeler.core.ConfigurationEditor} callback.configurationEditor Configuration editor instance
         */
        this.loadConfiguration = function(configuration, callback){

        	var lazyLoaderForConfigEditor,
        	    configId = configuration.id || configuration;
        	
        	if(!configuration.updateExisting){
        	    lazyLoaderForConfigEditor = lazyLoadersForConfigEditor.getItem(configId);
        	}
        	
        	if(!lazyLoaderForConfigEditor){
        		lazyLoaderForConfigEditor = new LazyLoader(injectLazyLoader, loadConfigurationEditor);
        		lazyLoadersForConfigEditor.setItem(configId, lazyLoaderForConfigEditor);
        	}
        	
        	lazyLoaderForConfigEditor.asyncGetInstance(configId, callbackAfterAsyncGet);
  			function callbackAfterAsyncGet(instance, messageObject, configurationId){
  				callback(instance, messageObject);
  			}
  			
        	function loadConfigurationEditor(configId, callbackAfterLoad, oldInstance){
               	var newInject = {
            			instance: {
            				 coreApi : inject.instance.coreApi,
            			   	 messageHandler : messageHandler,
            			   	 datajs : inject.instance.datajs,
            	        	 configurationHandler : that,
            	        	 persistenceProxy : persistenceProxy, 
            	        	 textPool : textPool, 
            	        	 metadataFactory : inject.instance.metadataFactory
            			},
    		        	 constructor : {
    		            	 hashtable : Hashtable,
    		            	 step : inject.constructor.step,
                             facetFilter: inject.constructor.facetFilter,
                             navigationTarget: inject.constructor.navigationTarget,
                             representation: inject.constructor.representation,
                             configurationObjects: inject.constructor.configurationObjects,
                             elementContainer: inject.constructor.elementContainer,
                             configurationFactory: inject.constructor.configurationFactory,
                             registryProbe : inject.constructor.registryProbe 
    		        	 }          	 		
            	};       
               new ConfigurationEditor(configuration, newInject, function(instance, messageObject){
                	  callbackAfterLoad(configId, instance, messageObject);
                }); // this object will bind itself to the callback --> what does this mean? TODO clarify
            }
        };
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationHandler#resetConfiguration
         * @description Resets the buffered configuration state for a certain Id to the previously saved state
         * @param {String} configurationId - Configuration id 
         * @return {String} Returns the removed configuration id on success, else undefined
         */
        this.resetConfiguration = function(configurationId){
            var currentConfig;
        	if(lazyLoadersForConfigEditor.hasItem(configurationId)){
        	    currentConfig = configList.getItem(configurationId);
        	    currentConfig.AnalyticalConfigurationName = lazyLoadersForConfigEditor.getItem(configurationId).getInstance().getConfigurationName();
        	    lazyLoadersForConfigEditor.removeItem(configurationId);
        		return configurationId;	
        	}      
        };
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationHandler#copyConfiguration
         * @description Returns a new configuration editor for a copied configuration
         * @param {String} id - Configuration identifier for the configuration that shall be copied
         * @param {function(newConfigurationId)} callback - Callback returns after the editor with the copied configuration has been instantiated
         * @param {string} callback.newConfigurationId - New (temporary) configuration Id of the copy result (use loadConfiguration to access it)
         */
        this.copyConfiguration = function(id, callback){
        	var configObject = this.getConfiguration(id);
        	if(!configObject){
    			callback(null); //Error exit: Source configuration does not exist
    			return;
    		}
        	that.loadConfiguration(id, callbackAfterLoad);
        	
        	function callbackAfterLoad(configEditor){
        		var newId,
        		    newConfigEditor,
        		    newLazyLoader,
        		    newConfigObject;
        		    
        		    newConfigObject = sap.apf.modeler.core.ConfigurationObjects.deepDataCopy(configObject);
        			newId = getTempId();

        			newConfigObject.AnalyticalConfiguration = newId;
        		    that.setConfiguration(newConfigObject, newId);
        		    
        			newConfigEditor = configEditor.copy(newId);
        			newLazyLoader = new LazyLoader(injectLazyLoader, undefined, {id : newId, instance : newConfigEditor});
        			lazyLoadersForConfigEditor.setItem(newId, newLazyLoader);
        			
        			callback(newId); //Return Id of deeply copied configuration
        	}
        };
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationHandler#replaceConfigurationId
         * @description Replaces temporary configuration id with server generated id
         * @param {String} tempId Temporary id
         * @param {String} serverGeneratedId Server generated id
         */
        this.replaceConfigurationId = function(tempId, serverGeneratedId){
        	if(tempId.indexOf("apf1972-") === 0){
        		var tempConfigListItem = configList.getItem(tempId);
        		var tempConfigEditor = lazyLoadersForConfigEditor.getItem(tempId).getInstance();
        		var newLazyLoader = new LazyLoader(injectLazyLoader, undefined, {id : serverGeneratedId, instance : tempConfigEditor});
        		
        		tempConfigListItem.AnalyticalConfiguration = serverGeneratedId;
        		configList.setItem(serverGeneratedId, tempConfigListItem);
        		configList.removeItem(tempId);
        		
        		lazyLoadersForConfigEditor.setItem(serverGeneratedId, newLazyLoader);
        		lazyLoadersForConfigEditor.removeItem(tempId);
        	}
        };
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationHandler#exportConfiguration
         * @description Exports a configuration for a given id
         * @param {String} configId Configuration id
         * @param {function(String|Null)} callback Callback returns the configuration string after configuration export is complete or Null in case of error
         */
        this.exportConfiguration = function(configId, callback){
        	var objectForExport;
        	this.loadConfiguration(configId, callbackAfterLoadConfiguration);
        	function callbackAfterLoadConfiguration(configEditor){
        		if(!configEditor.isSaved()){
        			 messageHandler.putMessage(messageHandler.createMessageObject({
                         code: "11007",
                         aParameters : [configId]
                     }));
        			 callback(null);
        		}else{
        			var appInformation = inject.functions.getApplication(applicationId);
                    	 
        			objectForExport = configEditor.serialize();
        			objectForExport.configHeader = {
    	  					Application : applicationId, 
    	  					ApplicationName : appInformation.ApplicationName,
    	  	                SemanticObject : appInformation.SemanticObject, 
    	  	                AnalyticalConfiguration : configId, 
    	  	                AnalyticalConfigurationName : that.getConfiguration(configId).AnalyticalConfigurationName,
    	  	                UI5Version : sap.ui.version
    	  			};
        			
        			persistenceProxy.readEntity(
        	                "configuration",
        	                function(result, metadata, messageObject) {
        	                    if(messageObject) {
        	                        messageHandler.putMessage(messageHandler.createMessageObject({
        	                            code: "5022",
        	                            aParameters : [configId]
        	                        }));
        	                        callback(null);
        	                    } else {
        	                    	objectForExport.configHeader.CreationUTCDateTime = result.CreationUTCDateTime;
        	                    	objectForExport.configHeader.LastChangeUTCDateTime = result.LastChangeUTCDateTime;
        	                    	callback(JSON.stringify(objectForExport));
        	                    }
        	                },
        	                [{
        	                    name : "AnalyticalConfiguration",
        	                    value: configId
        	                }],
        	                ["CreationUTCDateTime", "LastChangeUTCDateTime"],
        	                true, applicationId
        	            );        			
        		}
        	}
        };
        /**
        * @private
        * @function
        * @name sap.apf.modeler.core.ConfigurationHandler#memorizeConfiguration
        * @description Memorizes a configuration for a given id
        * @param {String} configId Configuration id
        * @returns {String|Null} Returns the memorized configuration id or null if the id does not exist
        */
       this.memorizeConfiguration = function(configId){
    	   var configEditor,
    	       lazyLoaderForConfigEditor;
    	   
    	   lazyLoaderForConfigEditor = lazyLoadersForConfigEditor.getItem(configId);
    	   if(!lazyLoaderForConfigEditor){
    		  return null; 
    	   }
    	   
    	   configEditor = lazyLoaderForConfigEditor.getInstance();
    	   if(configEditor) {
    		   memorizedConfigurationEditorInstances.setItem(configId, configEditor.copy(configId)); 
    		   return configId;
    	   }
    	   return null;
        };
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationHandler#restoreMemorizedConfiguration
         * @description Restore a memorized configuration for a given id
         * @param {String} configId Configuration id
         * @returns {sap.apf.modeler.core.ConfigurationEditor|Null} Returns the instance of the restored configuration editor or null if nothing was memorized for this id
         */
        this.restoreMemorizedConfiguration = function(configId){
           var newLazyLoader,
               configEditor;
           
           configEditor = memorizedConfigurationEditorInstances.removeItem(configId);
     	   if(configEditor) {
     		  newLazyLoader = new LazyLoader(injectLazyLoader, undefined, {id : configId, instance : configEditor});
  			  lazyLoadersForConfigEditor.setItem(configId, newLazyLoader);
     		  return configEditor;
     	   }
     	   
     	   return null;
         };
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationHandler#removeConfiguration
         * @description Removes configuration from hashtable and server
         * @param {String} configurationId Configuration ID
         * @param {function(configurationId, metadata, messageObject)} removeCallback Callback returns after remove operation has been executed 
         * @param {String} removeCallback.configurationId ID of removed configuration
         * @param {sap.apf.core.EntityTypeMetadata} removeCallback.metadata Metadata
         * @param {sap.apf.core.MessageObject} removeCallback.messageObject MessageObject
         */
        this.removeConfiguration = function(configurationId, removeCallback) {
        	function callbackRemove(metadata, messageObject) {
        		if(!messageObject) {
        			configList.removeItem(configurationId);
        			lazyLoadersForConfigEditor.removeItem(configurationId);
        		}
        		removeCallback(configurationId, metadata, messageObject);
        	}
        	if (configurationId.indexOf("apf1972-") !== 0) {
        		persistenceProxy.remove("configuration", [ {name : "AnalyticalConfiguration", value : configurationId }], callbackRemove, 
        				undefined, applicationId);
            } else {
            	configList.removeItem(configurationId);
            	lazyLoadersForConfigEditor.removeItem(configurationId);
            	removeCallback(configurationId, undefined, undefined);
            }
        };
        
        /**
         * @private
         * @function
         * @name sap.apf.modeler.core.ConfigurationHandler#removeAllConfigurations
         * @description Remove all configurations (after delete of corresponding application)
         */
        this.removeAllConfigurations = function(){
        	configList = new Hashtable(messageHandler);
        };
        
       function getTempId() {
            return  "apf1972-" + (Math.random( ) * new Date().getTime());
        }
    };
}());

}; // end of sap/apf/modeler/core/configurationHandler.js
if ( !jQuery.sap.isDeclared('sap.apf.modeler.ui.controller.applicationList.controller') ) {
  jQuery.sap.declare('sap.apf.modeler.ui.controller.applicationList.controller');
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
/*global FileReader*/

sap.ui.controller("sap.apf.modeler.ui.controller.applicationList", {
	onInit : function() {
		var viewInstance = this.getView();
		viewInstance.addStyleClass("sapUiSizeCompact");//For non touch devices- compact style class increases the information density on the screen by reducing control dimensions
		this._addApplicationStyleClass(); //add the style class
		var oComponent = this.getOwnerComponent();
		if (oComponent !== undefined) {
			this.oCoreApi = oComponent.oCoreApi;
			this._setDisplayText();
			var self = this;
			this.oCoreApi.getApplicationHandler(function(oApplicationHandler) {
				self.applicationHandler = oApplicationHandler;
				self._updateAppList();
			});
		}
		this.oModel = new sap.ui.model.json.JSONModel({});
		this.oModel.setSizeLimit(1000);
		this.bIsEditMode = false;
		this.byId("idAppDescription").attachBrowserEvent("click", this.navToConfigList().fn);
		this.byId("idSemanticObject").attachBrowserEvent("click", this.navToConfigList().fn);
		//Set the height of scroll container initial load and on resize
		var appLayout = viewInstance.byId("idApplicationTable");
		var scrollContainer = viewInstance.byId("idAppListScrollContainer");
		scrollContainer.addEventDelegate({
			onAfterRendering : function() { //Set the height and width of scroll container
				var width = jQuery(viewInstance.byId("idAppPage").getDomRef()).width();
				var height = jQuery(window).height();
				var appTitleBar = jQuery(viewInstance.byId("idAppTitle").getDomRef()).height();
				var appToolbar = jQuery(viewInstance.byId("idApplicationToolbar").getDomRef()).height();
				var header = jQuery(viewInstance.byId("idAppPage").getDomRef()).find("header").height();
				var footer = jQuery(viewInstance.byId("idAppPage").getDomRef()).find("footer").height();
				var offsetHeight;
				if (appTitleBar > 0) { //If onAfterRendering happens before the UI is rendered on the DOM
					appTitleBar = appTitleBar + 80;
					offsetHeight = appTitleBar + appToolbar + header + footer + 25;
				} else {//Fall back if rendered DOM element has height defined as 0 or undefined
					offsetHeight = 232; //Setting constant calculated value
				}
				//Set Initial Height and Width				
				scrollContainer.setHeight(height - offsetHeight + "px");
				scrollContainer.setWidth("100%");
				sap.apf.modeler.ui.utils.helper.onResize(function() {
					if (jQuery(self.getView().getDomRef()).css("display") === "block") {
						width = jQuery(viewInstance.byId("idAppPage").getDomRef()).width();
						height = jQuery(viewInstance.byId("idAppPage").getDomRef()).height();
						scrollContainer.setHeight(height - offsetHeight + "px");
						scrollContainer.setWidth("100%");
					}
				});
				sap.ui.core.UIComponent.getRouterFor(self).attachRoutePatternMatched(function(oEvent) {
					if (oEvent.getParameter("name") === "applicationList") {
						width = jQuery(viewInstance.getDomRef()).width();
						height = jQuery(viewInstance.getDomRef()).height();
						scrollContainer.setHeight(height - offsetHeight + "px");
						scrollContainer.setWidth("100%");
					}
				});
			}
		});
	},
	_setDisplayText : function() {
		this.byId("idAppPage").setTitle(this.oCoreApi.getText("configModelerTitle"));
		this.byId("idAppTitle").setText(this.oCoreApi.getText("applicationOverview"));
		this.byId("idAppNumberTitle").setText(this.oCoreApi.getText("applications"));
		this.byId("idDescriptionLabel").setText(this.oCoreApi.getText("description"));
		this.byId("idSemanticObjectLabel").setText(this.oCoreApi.getText("semanticObject"));
		this.byId("idEditButton").setText(this.oCoreApi.getText("edit"));
		this.byId("idSaveButton").setText(this.oCoreApi.getText("save"));
		this.byId("idCancelButton").setText(this.oCoreApi.getText("cancel"));
		this.byId("idTextCleanupButton").setText(this.oCoreApi.getText("textCleanUp"));
		this.byId("idImportButton").setText(this.oCoreApi.getText("import"));
		this.byId("idNewButton").setTooltip(this.oCoreApi.getText("newApplication"));
	},
	_addConfigStyleClass : function() {
		sap.ui.core.Fragment.byId("idImportConfigurationFragment", "idJsonFileLabel").addStyleClass("importFileUploaderDialogLabels");
		sap.ui.core.Fragment.byId("idImportConfigurationFragment", "idTextFileLabel").addStyleClass("importFileUploaderDialogLabels");
	},
	_setOverwriteConfirmationDialogText : function() {
		sap.ui.core.Fragment.byId("idOverwriteConfirmationFragment", "idOverwriteConfirmationDialog").setTitle(this.oCoreApi.getText("warning"));
		sap.ui.core.Fragment.byId("idOverwriteConfirmationFragment", "idConfirmationMessage").setText(this.oCoreApi.getText("overwriteConfirmationMsg"));
		sap.ui.core.Fragment.byId("idOverwriteConfirmationFragment", "idConfirmationMessage").addStyleClass("dialogText");
		sap.ui.core.Fragment.byId("idOverwriteConfirmationFragment", "idYesButton").setText(this.oCoreApi.getText("yes"));
		sap.ui.core.Fragment.byId("idOverwriteConfirmationFragment", "idNoButton").setText(this.oCoreApi.getText("no"));
	},
	_setImportConfigDialogText : function() {
		sap.ui.core.Fragment.byId("idImportConfigurationFragment", "idImportConfigDialog").setTitle(this.oCoreApi.getText("importConfig"));
		sap.ui.core.Fragment.byId("idImportConfigurationFragment", "idJsonFileLabel").setText(this.oCoreApi.getText("jsonFile"));
		sap.ui.core.Fragment.byId("idImportConfigurationFragment", "idJsonFileUploader").setPlaceholder(this.oCoreApi.getText("jsonFileInputPlaceHolder"));
		sap.ui.core.Fragment.byId("idImportConfigurationFragment", "idTextFileLabel").setText(this.oCoreApi.getText("textFile"));
		sap.ui.core.Fragment.byId("idImportConfigurationFragment", "idTextFileUploader").setPlaceholder(this.oCoreApi.getText("textFileInputPlaceHolder"));
		sap.ui.core.Fragment.byId("idImportConfigurationFragment", "idUploadOfConfig").setText(this.oCoreApi.getText("upload"));
		sap.ui.core.Fragment.byId("idImportConfigurationFragment", "idCancelImportOfConfig").setText(this.oCoreApi.getText("cancel"));
	},
	_setConfirmationDialogText : function() {
		sap.ui.core.Fragment.byId("idConfirmationDialogFragment", "idDeleteConfirmation").setTitle(this.oCoreApi.getText("confirmation"));
		sap.ui.core.Fragment.byId("idConfirmationDialogFragment", "idDeleteButton").setText(this.oCoreApi.getText("deleteButton"));
		sap.ui.core.Fragment.byId("idConfirmationDialogFragment", "idCancelButtonDialog").setText(this.oCoreApi.getText("cancel"));
	},
	_setNewApplicationText : function() {
		sap.ui.core.Fragment.byId("idAddNewApplicationFragment", "idNewApp").setTitle(this.oCoreApi.getText("newApplication"));
		sap.ui.core.Fragment.byId("idAddNewApplicationFragment", "idDescriptionLabelApp").setText("*" + this.oCoreApi.getText("description"));
		sap.ui.core.Fragment.byId("idAddNewApplicationFragment", "idSemanticObjectLabelApp").setText(this.oCoreApi.getText("semanticObject"));
		sap.ui.core.Fragment.byId("idAddNewApplicationFragment", "idSaveButtonApp").setText(this.oCoreApi.getText("save"));
		sap.ui.core.Fragment.byId("idAddNewApplicationFragment", "idCancelButtonApp").setText(this.oCoreApi.getText("cancel"));
	},
	_addApplicationStyleClass : function() {
		this.byId("idAppNumberTitle").addStyleClass("appCountLabel");
		this.byId("idAppDescription").addStyleClass("cursor");
		this.byId("idSemanticObject").addStyleClass("cursor");
		this.byId("idNewButton").addStyleClass("newButton");
		this.byId("idAppListScrollContainer").addStyleClass("applicationListScroll");
		this.byId("idNoOfConfig").addStyleClass("applicationCount");
		this.byId("idAppTitle").addStyleClass("applicationTitle");
		this.byId("idApplicationToolbar").addStyleClass("applicationTitleLayout");
	},
	_updateAppList : function() {
		var applications = this.applicationHandler.getList();
		var appCount = applications.length;
		var aAppDetails = [];
		applications.forEach(function(application) {
			var oAppDetails = {};
			oAppDetails.id = application.Application;
			oAppDetails.description = application.ApplicationName;
			oAppDetails.semanticObject = application.SemanticObject;
			aAppDetails.push(oAppDetails);
		});
		var jsonData = {
			appCount : "(" + appCount + ")",
			tableData : aAppDetails
		};
		if (this.oModel !== undefined) {
			this.oModel.setSizeLimit(1000);
			this.oModel.setData(jsonData);
			this.getView().setModel(this.oModel);
		}
	},
	_enableDisplayMode : function() {
		this.bIsEditMode = false;
		this.byId("idEditButton").setVisible(true);
		this.byId("idSaveButton").setVisible(false);
		this.byId("idSaveButton").setEnabled(false);
		this.byId("idTextCleanupButton").setEnabled(false);
		this.byId("idCancelButton").setVisible(false);
		this.byId("idTextCleanupButton").setVisible(false);
		this.byId("idApplicationTable").setMode("None");
		var items = this.byId("idApplicationTable").getItems();
		items.forEach(function(item) {
			item.setType("Navigation");
			item.getCells()[0].setEditable(false);
			item.getCells()[1].setEditable(false);
			item.getCells()[2].setVisible(false);
		});
		this._updateAppList();
	},
	enableEditMode : function() {
		this.bIsEditMode = true;
		this.byId("idEditButton").setVisible(false);
		this.byId("idSaveButton").setVisible(true);
		this.byId("idCancelButton").setVisible(true);
		this.byId("idTextCleanupButton").setVisible(true);
		this.byId("idApplicationTable").setMode("SingleSelectMaster");
		var items = this.byId("idApplicationTable").getItems();
		if (items.length !== 0) {
			items.forEach(function(item) {
				item.getCells()[0].setEditable(true);
				item.getCells()[1].setEditable(true);
				item.getCells()[2].setVisible(true);
				item.setType("Inactive");
			});
		}
	},
	handleDeletePress : function(evt) {
		var sPath = evt.getSource().getBindingContext().getPath().split("/")[2];
		var removeId = this.getView().getModel().getData().tableData[sPath].id;
		var customData = new sap.ui.core.CustomData({
			value : {
				removeId : removeId,
				sPath : sPath
			}
		});
		if (!this.confirmationDialog) {
			this.confirmationDialog = sap.ui.xmlfragment("idConfirmationDialogFragment", "sap.apf.modeler.ui.fragment.confirmationDialog", this);
			this.getView().addDependent(this.confirmationDialog);
			this._setConfirmationDialogText();
		}
		var confirmationMessage = new sap.m.Label();
		confirmationMessage.addStyleClass("dialogText");
		confirmationMessage.setText(this.oCoreApi.getText("deleteApp"));
		this.confirmationDialog.removeAllContent();
		this.confirmationDialog.addContent(confirmationMessage);
		this.confirmationDialog.removeAllCustomData();
		this.confirmationDialog.addCustomData(customData);
		jQuery.sap.syncStyleClass("sapUiSizeCompact", this.getView(), this.confirmationDialog);
		this.confirmationDialog.open();
	},
	handleConfirmDeletion : function() {
		var removeId = this.confirmationDialog.getCustomData()[0].getValue().removeId;
		if (removeId !== undefined) {
			var self = this;
			this.applicationHandler.removeApplication(removeId, function(oResponse, oMetadata, msgObj) {
				if (msgObj === undefined && (typeof oResponse === "string")) {
					self.confirmationDialog.close();
					self._updateAppList();
					self.enableEditMode();
				} else {
					var oMessageObject = self.oCoreApi.createMessageObject({
						code : "11501"
					});
					oMessageObject.setPrevious(msgObj);
					self.oCoreApi.putMessage(oMessageObject);
				}
			});
		}
	},
	closeDialog : function() {
		if (this.confirmationDialog.isOpen()) {
			this.confirmationDialog.close();
		}
	},
	handleSavePress : function() {
		var self = this;
		var j;
		var updateAppArr = [];
		var appList = this.applicationHandler.getList();
		var tableData = this.getView().getModel().getData().tableData;
		for(j = 0; j < appList.length; j++) {
			if (tableData[j].description !== appList[j].ApplicationName || tableData[j].semanticObject !== appList[j].SemanticObject) {
				updateAppArr.push(tableData[j]);
			}
		}
		updateAppArr.forEach(function(app) {
			var updatedAppObject = {
				ApplicationName : app.description,
				SemanticObject : app.semanticObject
			};
			self.applicationHandler.setAndSave(updatedAppObject, function(oResponse, oMetadata, msgObj) {
				if (msgObj === undefined && (typeof oResponse === "string")) {
					self._enableDisplayMode();
				} else {
					var oMessageObject = self.oCoreApi.createMessageObject({
						code : "11500"
					});
					oMessageObject.setPrevious(msgObj);
					self.oCoreApi.putMessage(oMessageObject);
				}
			}, app.id);
		});
	},
	handleCancelPress : function() {
		var j;
		var updateAppArr = [];
		var appList = this.applicationHandler.getList();
		var tableData = this.getView().getModel().getData().tableData;
		for(j = 0; j < appList.length; j++) {
			if (tableData[j].description !== appList[j].ApplicationName || tableData[j].semanticObject !== appList[j].SemanticObject) {
				updateAppArr.push(tableData[j]);
			}
		}
		if (updateAppArr.length !== 0) {
			this.unsavedDataConfirmationDialog = sap.ui.xmlfragment("idMessageDialogFragment", "sap.apf.modeler.ui.fragment.messageDialog", this);
			this.getView().addDependent(this.unsavedDataConfirmationDialog);
			this._setUnsavedDataConfirmationDialogText();
			jQuery.sap.syncStyleClass("sapUiSizeCompact", this.getView(), this.unsavedDataConfirmationDialog);
			this.unsavedDataConfirmationDialog.open();
		} else {
			this._enableDisplayMode();
		}
	},
	_handleNavigationWithSave : function() {
		this.handleSavePress();
		if (this.unsavedDataConfirmationDialog.isOpen()) {
			this.unsavedDataConfirmationDialog.close();
			this.unsavedDataConfirmationDialog.destroy();
		}
	},
	_handleNavigateWithoutSave : function() {
		if (this.unsavedDataConfirmationDialog.isOpen()) {
			this.unsavedDataConfirmationDialog.close();
			this.unsavedDataConfirmationDialog.destroy();
		}
		this._enableDisplayMode();
	},
	_handlePreventNavigation : function() {
		if (this.unsavedDataConfirmationDialog.isOpen()) {
			this.unsavedDataConfirmationDialog.close();
			this.unsavedDataConfirmationDialog.destroy();
		}
	},
	_setUnsavedDataConfirmationDialogText : function() {
		sap.ui.core.Fragment.byId("idMessageDialogFragment", "idMessageDialog").setTitle(this.oCoreApi.getText("confirmation"));
		sap.ui.core.Fragment.byId("idMessageDialogFragment", "idYesButton").setText(this.oCoreApi.getText("yes"));
		sap.ui.core.Fragment.byId("idMessageDialogFragment", "idNoButton").setText(this.oCoreApi.getText("no"));
		sap.ui.core.Fragment.byId("idMessageDialogFragment", "idCancelButton").setText(this.oCoreApi.getText("cancel"));
		var confirmationMessage = new sap.m.Label();
		confirmationMessage.addStyleClass("dialogText");
		confirmationMessage.setText(this.oCoreApi.getText("unsavedConfiguration"));
		this.unsavedDataConfirmationDialog.removeAllContent();
		this.unsavedDataConfirmationDialog.addContent(confirmationMessage);
	},
	handleListItemSelect : function(evt) { //handler for selection in application list
		var bindingContext = evt.getParameter("listItem").getBindingContext().getPath().split("/")[2];
		this.appId = this.getView().getModel().getData().tableData[bindingContext].id;
		this.byId("idTextCleanupButton").setEnabled(true);
	},
	handleListItemPress : function(evt) { //handler for navigation in application list
		var bindingContext = evt.getParameter("listItem").getBindingContext().getPath().split("/")[2];
		var appId = this.getView().getModel().getData().tableData[bindingContext].id;
		sap.ui.core.UIComponent.getRouterFor(this).navTo("configurationList", {
			appId : appId
		});
	},
	onLiveChange : function() {
		this.byId("idSaveButton").setEnabled(true);
	},
	addNewApplication : function() {
		if (!this.addNewItemDialog) {
			this.addNewItemDialog = sap.ui.xmlfragment("idAddNewApplicationFragment", "sap.apf.modeler.ui.fragment.newApplication", this);
			this.getView().addDependent(this.addNewItemDialog);
			this._setNewApplicationText();
		}
		this.addNewItemDialog.getContent()[0].getContent()[1].setValue("");
		this.addNewItemDialog.getContent()[0].getContent()[3].setValue("FioriApplication");
		this.addNewItemDialog.getBeginButton().setEnabled(false);
		jQuery.sap.syncStyleClass("sapUiSizeCompact", this.getView(), this.addNewItemDialog);
		this.addNewItemDialog.open();
	},
	applicationDescChange : function(oEvent) {
		this.isAppDesc = oEvent.getParameters().value.trim().length !== 0 ? true : false;
		if (this.isAppDesc) {
			this.addNewItemDialog.getBeginButton().setEnabled(true);
		} else {
			this.addNewItemDialog.getBeginButton().setEnabled(false);
		}
	},
	closeNewAppDialog : function() {
		if (this.addNewItemDialog.isOpen()) {
			this.addNewItemDialog.close();
		}
	},
	handleSaveDialogPress : function() {
		var self = this;
		var aDependents = this.getView().getDependents();
		var appObject = {};
		aDependents.forEach(function(oDependent) {
			if (oDependent.sId === "idAddNewApplicationFragment--idNewApp") {
				appObject.ApplicationName = oDependent.getContent()[0].getContent()[1].getValue() !== "" ? oDependent.getContent()[0].getContent()[1].getValue() : undefined;
				appObject.SemanticObject = oDependent.getContent()[0].getContent()[3].getValue() !== "" ? oDependent.getContent()[0].getContent()[3].getValue() : undefined;
			}
		});
		this.applicationHandler.setAndSave(appObject, function(oResponse, oMetadata, msgObj) {
			if (msgObj === undefined && (typeof oResponse === "string")) {
				self._enableDisplayMode();
				self.byId('idApplicationTable').rerender();
				var appTableItemDOM = self.byId('idApplicationTable').getItems()[self.byId('idApplicationTable').getItems().length - 1].$();
				if (appTableItemDOM.length !== 0) {
					appTableItemDOM[0].scrollIntoView();
				}
				self.addNewItemDialog.close();
			} else {
				var oMessageObject = self.oCoreApi.createMessageObject({
					code : "12000"
				});
				oMessageObject.setPrevious(msgObj);
				self.oCoreApi.putMessage(oMessageObject);
			}
		});
	},
	handleImportButtonPress : function() {
		if (!this.importConfigurationDialog) {
			this.importConfigurationDialog = sap.ui.xmlfragment("idImportConfigurationFragment", "sap.apf.modeler.ui.fragment.importConfiguration", this);
			this.getView().addDependent(this.importConfigurationDialog);
			this._setImportConfigDialogText();
			this._addConfigStyleClass();
		}
		sap.ui.core.Fragment.byId("idImportConfigurationFragment", "idJsonFileUploader").setValue("");
		sap.ui.core.Fragment.byId("idImportConfigurationFragment", "idTextFileUploader").setValue("");
		jQuery.sap.syncStyleClass("sapUiSizeCompact", this.getView(), this.importConfigurationDialog);
		this.importConfigurationDialog.open();
	},
	handleUploadOfConfig : function() {
		this.oJSONFileUploader = sap.ui.core.Fragment.byId("idImportConfigurationFragment", "idJsonFileUploader");
		this.oTextPropertyFileUploader = sap.ui.core.Fragment.byId("idImportConfigurationFragment", "idTextFileUploader");
		if ((this.oJSONFileUploader.getValue() && this.oTextPropertyFileUploader.getValue()) || this.oJSONFileUploader.getValue()) {
			this.oJSONFileUploader.upload(); //upload the json file if both the files or only the json file have to be uploaded, properties file will be uploaded after json file
		} else {
			this.oTextPropertyFileUploader.upload(); //upload only the properties file
		}
	},
	addAcceptAttribute : function() {
		var jsonFileInput = jQuery("#idImportConfigurationFragment--idJsonFileUploader-fu");
		var propertyFileInput = jQuery("#idImportConfigurationFragment--idTextFileUploader-fu");
		jsonFileInput.attr('accept', '.json');
		propertyFileInput.attr('accept', '.properties');
	},
	closeImportConfigDialog : function() {
		if (this.importConfigurationDialog.isOpen()) {
			this.importConfigurationDialog.close();
		}
	},
	handleJSONFileUploadComplete : function(oEvent) {
		var self = this;
		var sMsg = this.oCoreApi.getText("errorReadingJSONFile");
		var file = oEvent.getSource().oFileUpload.files[0];
		if (file) {
			var reader = new FileReader();
			reader.readAsText(file, "UTF-8");
			reader.onload = function(evt) {
				self.parsedConfigString = JSON.parse(evt.target.result);
				self.appIdFromConfigFile = self.parsedConfigString.configHeader.Application; //application id in the configuration file
				self._importConfigurationFile(self.parsedConfigString); //only json file has to be imported
			};
			reader.onerror = function() {
				sap.m.MessageToast.show(sMsg);
			};
		}
		this.importConfigurationDialog.close();
	},
	handleTextFileUploadComplete : function(oEvent) {
		var self = this;
		var sMsg = this.oCoreApi.getText("errorReadingPropertiesFile");
		var asyncMsg = this.oCoreApi.getText("asyncMsg");
		var file = oEvent.getSource().oFileUpload.files[0];
		if (file) {
			var reader = new FileReader();
			reader.readAsText(file, "UTF-8");
			reader.onload = function(evt) {
				var aLines = evt.target.result.split(/\r?\n/);
				var len = aLines.length;
				var applicationId, i;
				for(i = 0; i < len; i++) {
					applicationId = /^\#\s*ApfApplicationId=[0-9A-F]+\s*$/.exec(aLines[i]);
					if (applicationId !== null) {
						self.appIdFromTextFile = aLines[i].split('=')[1]; //application id in the properties file
					}
				}
				var bExistingApplication;
				for(i = 0; i < self.applicationHandler.getList().length; i++) { //check if the application exists
					if (self.appIdFromTextFile === self.applicationHandler.getList()[i].Application) {
						bExistingApplication = true;
						break;
					} else {
						bExistingApplication = false;
					}
				}
				if (!bExistingApplication && !self.oJSONFileUploader.getValue()) {
					sap.m.MessageToast.show("chooseJsonFile"); //JSON file has to be selected before properties file if the application does not exist
				} else if (self.oJSONFileUploader.getValue()) {
					if (self.appIdFromConfigFile && self.appIdFromTextFile && self.appIdFromTextFile !== self.appIdFromConfigFile) { //chcek if the id of application is same in both the files
						sap.m.MessageToast.show(asyncMsg);
					} else {
						self._importPropertiesFile(evt.target.result); //only property file has to be imported
					}
				} else if (bExistingApplication && !self.oJSONFileUploader.getValue()) {
					self._importPropertiesFile(evt.target.result);
				}
			};
			reader.onerror = function() {
				sap.m.MessageToast.show(sMsg);
			};
		}
		this.importConfigurationDialog.close();
	},
	_importConfigurationFile : function(parsedConfigString) {
		var self = this;
		var successsMsgForConfigFileImport = this.oCoreApi.getText("successsMsgForConfigFileImport");
		this.oCoreApi.importConfiguration(JSON.stringify(parsedConfigString), function(callbackOverwrite, callbackCreateNew) {
			//Config exists overwrite confirmation popup is shown	
			self.callbackOverwrite = callbackOverwrite;
			self.callbackCreateNew = callbackCreateNew;
			self._openConfirmationDialog();
		}, callbackImport);
		function callbackImport(configuration, metadata, messageObject) {
			if (messageObject === undefined) {
				self._updateAppList();
				sap.m.MessageToast.show(successsMsgForConfigFileImport);
				if (self.oTextPropertyFileUploader.getValue()) {
					self.oTextPropertyFileUploader.upload();
				}
			} else {
				var oMessageObject = self.oCoreApi.createMessageObject({
					code : "11502"
				});
				oMessageObject.setPrevious(messageObject);
				self.oCoreApi.putMessage(oMessageObject);
			}
		}
	},
	_importPropertiesFile : function(aPropertyTexts) {
		var self = this;
		var successsMsgForPropertyFileImport = this.oCoreApi.getText("successsMsgForPropertyFileImport");
		this.oCoreApi.importTexts(aPropertyTexts, function(messageObject) { //import the texts from the property file
			if (messageObject === undefined) {
				sap.m.MessageToast.show(successsMsgForPropertyFileImport);
			} else {
				var oMessageObject = self.oCoreApi.createMessageObject({
					code : "11503"
				});
				oMessageObject.setPrevious(messageObject);
				self.oCoreApi.putMessage(oMessageObject);
			}
		});
	},
	handleTypeMissmatchForJSONFile : function() {
		var sMsg = this.oCoreApi.getText("jsonFileMissmatch");
		sap.m.MessageToast.show(sMsg);
	},
	handleTypeMissmatchForPropertiesFile : function() {
		var sMsg = this.oCoreApi.getText("propertiesFileMissmatch");
		sap.m.MessageToast.show(sMsg);
	},
	_openConfirmationDialog : function() {
		if (!this.overwriteConfirmationDialog) {
			this.overwriteConfirmationDialog = sap.ui.xmlfragment("idOverwriteConfirmationFragment", "sap.apf.modeler.ui.fragment.overwriteConfirmation", this);
			this.getView().addDependent(this.overwriteConfirmationDialog);
			this._setOverwriteConfirmationDialogText();
		}
		jQuery.sap.syncStyleClass("sapUiSizeCompact", this.getView(), this.overwriteConfirmationDialog);
		this.overwriteConfirmationDialog.open();
	},
	handleConfirmOverwriting : function() {
		this.callbackOverwrite();
		this.overwriteConfirmationDialog.close();
	},
	handleNoButtonPress : function() {
		this.callbackCreateNew();
		this.overwriteConfirmationDialog.close();
	},
	handleTextCleanUpPress : function() {
		var self = this;
		this.oCoreApi.getConfigurationHandler(this.appId, function(configurationHandler) {
			self.oTextPool = configurationHandler.getTextPool();
			self.oCoreApi.getUnusedTextKeys(self.appId, function(aUnusedTexts, msgObj) {
				if (msgObj === undefined) {
					self.oTextPool.removeTexts(aUnusedTexts, self.appId,function(msgObj) {
						if (msgObj === undefined) {
							var successMessageOnTextCleanUp = self.oCoreApi.getText("successtextCleanup");
							sap.m.MessageToast.show(successMessageOnTextCleanUp, {
								width : "20em"
							});
						}
					});
				} else {
					var oMessageObject = self.oCoreApi.createMessageObject({
						code : "12000"
					});
					oMessageObject.setPrevious(msgObj);
					self.oCoreApi.putMessage(oMessageObject);
				}
			});
		});
	},
	navToConfigList : function() {
		var oSelf = this;
		return {
			fn : function() {
				if (!oSelf.bIsEditMode) {
					var bindingContext = this.getBindingContext().getPath().split("/")[2];
					var appId = oSelf.getView().getModel().getData().tableData[bindingContext].id;
					sap.ui.core.UIComponent.getRouterFor(oSelf).navTo("configurationList", {
						appId : appId
					});
				}
			}
		};
	},
	handleNavBack : function() {
		window.history.go(-1);//Navigate back to the previous history set
	}
});

}; // end of sap/apf/modeler/ui/controller/applicationList.controller.js
if ( !jQuery.sap.isDeclared('sap.apf.modeler.ui.controller.category.controller') ) {
  jQuery.sap.declare('sap.apf.modeler.ui.controller.category.controller');
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */

/**
* @class category
* @memberOf sap.apf.modeler.ui.controller
* @name category
* @description controller for view.category
*/
sap.ui.controller("sap.apf.modeler.ui.controller.category", {
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.category#onInit
	* @description Called on initialization of the view.
	* 			Sets the static texts for all controls in UI.
	* 			Adds style classes to all UI controls.
	* 			Prepares dependecies.
	*  			Sets dynamic text for input controls
	* */
	onInit : function() {
		this.getView().addStyleClass("sapUiSizeCompact");//For non touch devices- compact style class increases the information density on the screen by reducing control dimensions
		this.oViewData = this.getView().getViewData();
		this.oConfigurationHandler = this.oViewData.oConfigurationHandler;
		this.oConfigurationEditor = this.oViewData.oConfigurationEditor;
		this.oTextPool = this.oConfigurationHandler.getTextPool();
		this.getText = this.oViewData.getText;
		this.params = this.oViewData.oParams;
		var self = this;
		if (!this.oConfigurationEditor) {
			this.oConfigurationHandler.loadConfiguration(this.params.arguments.configId, function(configurationEditor) {
				self.oConfigurationEditor = configurationEditor;
			});
		}
		this._setDisplayText();
		this.setDetailData();
		//Set Mandatory Fields
		var mandatoryFields = [];
		mandatoryFields.push(this.byId("idCategoryTitle"));
		this._setMandatoryFields(mandatoryFields);
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.category#_setDisplayText
	* @description Sets static texts in UI
	* */
	_setDisplayText : function() {
		this.byId("idCategoryBasicData").setTitle(this.getText("categoryData"));
		this.byId("idCategoryTitleLabel").setText(this.getText("categoryTitle"));
		this.byId("idCategoryTitleLabel").setRequired(true);
		this.byId("idCategoryTitle").setPlaceholder(this.getText("newCategory"));
		this.byId("idTotalStepsLabel").setText(this.getText("totalSteps"));
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.category#_addAutoCompleteFeatureOnInputs
	 * @description Adds 'Auto Complete Feature' to the input fields in the view
	 * 		using sap.apf.modeler.ui.utils.TextPoolHelper.
	 * */
	_addAutoCompleteFeatureOnInputs : function() {
		if (this.oConfigurationHandler) {
			var oInputControl = this.byId("idCategoryTitle");
			var oTextPoolHelper = new sap.apf.modeler.ui.utils.TextPoolHelper(this.oTextPool);
			var oTranslationFormat = sap.apf.modeler.ui.utils.TranslationFormatMap.CATEGORY_TITLE;
			var oDependenciesForText = {
				oTranslationFormat : oTranslationFormat,
				type : "text"
			};
			oTextPoolHelper.setAutoCompleteOn(oInputControl, oDependenciesForText);
		}
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.category#setDetailData
	* @description Sets dynamic texts for controls
	* */
	setDetailData : function() {
		var self = this;
		if (this.params && this.params.arguments && this.params.arguments.categoryId) {
			this.oCategory = this.oConfigurationEditor.getCategory(this.params.arguments.categoryId);
		}
		if (this.oCategory) {
			var nSteps = this.oConfigurationEditor.getCategoryStepAssignments(this.oCategory.getId()).length;
			if (this.oTextPool.get(this.oCategory.labelKey) !== undefined) {
				this.byId("idCategoryTitle").setValue(this.oTextPool.get(this.oCategory.labelKey).TextElementDescription);
			} else {
				this.byId("idCategoryTitle").setValue(this.oCategory.labelKey);
			}
			this.byId("idTotalSteps").setValue(nSteps);
			//TODO set the value of the  representations when available, for now placeholder is given
		} else {//create a new category
			var newCategoryId = this.oConfigurationEditor.setCategory();
			this.oCategory = this.oConfigurationEditor.getCategory(newCategoryId);
			var oCategoryInfo = {
				id : newCategoryId,
				icon : "sap-icon://open-folder"
			};
			this.oViewData.updateSelectedNode(oCategoryInfo);
		}
		this._addAutoCompleteFeatureOnInputs();
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.category#handleChangeDetailValue
	* @description Handler for change event on chartTypes dropdwn
	* */
	handleChangeDetailValue : function(oEvent) { //event handler to check if any value is changed in the category form
		this.oConfigurationEditor.setIsUnsaved();
		var sCategoryTitle = this.byId("idCategoryTitle").getValue().trim();
		var oTranslationFormat = sap.apf.modeler.ui.utils.TranslationFormatMap.CATEGORY_TITLE;
		var sCategoryTitleId = this.oTextPool.setText(sCategoryTitle, oTranslationFormat);
		this.categoryObj = {
			labelKey : sCategoryTitleId
		};
		var oCategoryInfo = {};
		if (sCategoryTitle) {
			this.oConfigurationEditor.setCategory(this.categoryObj, this.oCategory.getId());
			oCategoryInfo.name = sCategoryTitle;
			if (sCategoryTitle) {
				this.oViewData.updateSelectedNode(oCategoryInfo);
				var sTitle = this.getText("category") + ": " + sCategoryTitle;
				this.oViewData.updateTitleAndBreadCrumb(sTitle);
			}
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.category#_setMandatoryFields
	 * @param {Array} fields - Array of form fields
	 * @description Set mandatory fields on the instance level  
	 * */
	_setMandatoryFields : function(fields) {
		this.mandatoryFields = this.mandatoryFields || [];
		for( var i = 0; i < fields.length; i++) {
			fields[i].isMandatory = true;
			this.mandatoryFields.push(fields[i]);
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.category#_getMandatoryFields
	 * @param {Object} oEvent - Event instance of the form field 
	 * @description getter for mandatory fields
	 * */
	_getMandatoryFields : function() {
		return this.mandatoryFields;
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.category#_setValidationState
	 * @param {Object} oEvent - Event instance of the form field 
	 * @description Set validation state of sub view
	 * */
	_setValidationState : function() {
		var mandatoryFields = this._getMandatoryFields();
		for( var i = 0; i < mandatoryFields.length; i++) {
			if (mandatoryFields[i].isMandatory === true) {
				this.isValidState = (mandatoryFields[i].getValue().trim() !== "") ? true : false;
				if (this.isValidState === false) {
					break;
				}
			}
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.category#getValidationState
	 * @description Getter for getting the current validation state of sub view
	 * */
	getValidationState : function() {
		this._setValidationState(); //Set the validation state of view
		var isValidState = (this.isValidState !== undefined) ? this.isValidState : true;
		return isValidState;
	}
});

}; // end of sap/apf/modeler/ui/controller/category.controller.js
if ( !jQuery.sap.isDeclared('sap.apf.modeler.ui.controller.configuration.controller') ) {
  jQuery.sap.declare('sap.apf.modeler.ui.controller.configuration.controller');
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */

/**
* @class configuration
* @memberOf sap.apf.modeler.ui.controller
* @name configuration
* @description controller for view.configuration
*/
sap.ui.controller("sap.apf.modeler.ui.controller.configuration", {
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.configuration#onInit
	* @description Called on initialization of the view.
	* 			Sets the static texts for all controls in UI.
	* 			Adds style classes to all UI controls.
	* 			Prepares dependecies.
	*  			Sets dynamic text for input controls
	* */
	onInit : function() {
		this.getView().addStyleClass("sapUiSizeCompact");//For non touch devices- compact style class increases the information density on the screen by reducing control dimensions
		this.oViewData = this.getView().getViewData();
		this.oApplicationHandler = this.oViewData.oApplicationHandler;
		this.oConfigurationHandler = this.oViewData.oConfigurationHandler;
		this.oTextPool = this.oConfigurationHandler.getTextPool();
		this.oConfigurationEditor = this.oViewData.oConfigurationEditor;
		this.getText = this.oViewData.getText;
		this.params = this.oViewData.oParams;
		this._setDisplayText();
		this.setDetailData();
		//Set Mandatory Fields
		var mandatoryFields = [];
		mandatoryFields.push(this.byId("idConfigTitle"));
		this._setMandatoryFields(mandatoryFields);
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.configuration#_setDisplayText
	* @description Sets static texts in UI
	* */
	_setDisplayText : function() {
		this.byId("idConfigurationBasicData").setTitle(this.getText("configurationData"));
		this.byId("idConfigTitleLabel").setText(this.getText("configTitle"));
		this.byId("idConfigTitleLabel").setRequired(true);
		this.byId("idConfigTitle").setPlaceholder(this.getText("newConfiguration"));
		this.byId("idConfigurationIdLabel").setText(this.getText("configurationId"));
		this.byId("idSemanticObjectLabel").setText(this.getText("semanticObject"));
		//this.byId("idOriginOfConfigLabel").setText(this.getText("originOfConfig"));
		this.byId("idNoOfCategoriesLabel").setText(this.getText("noOfCategories"));
		this.byId("idNoOfStepsLabel").setText(this.getText("noOfSteps"));
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.configuration#setDetailData
	* @description Sets dynamic texts for controls
	* */
	setDetailData : function() {
		if (this.params && this.params.arguments && this.params.arguments.configId) {
			var oExistingConfig = this.oConfigurationHandler.getConfiguration(this.params.arguments.configId);
		}
		if (oExistingConfig) {
			this.byId("idConfigTitle").setValue(oExistingConfig.AnalyticalConfigurationName);
			if (oExistingConfig.AnalyticalConfiguration.indexOf(sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.ISNEWCONFIG) === -1) { // set the id of the configuration only when it is saved configuration
				this.byId("idConfigurationId").setValue(oExistingConfig.AnalyticalConfiguration);
			}
			var nCategories = this.oConfigurationEditor.getCategories().length;
			var nSteps = this.oConfigurationEditor.getSteps().length;
			this.byId("idNoOfCategories").setValue(nCategories);
			this.byId("idNoOfSteps").setValue(nSteps);
			var appObject = this.oApplicationHandler.getApplication(this.params.arguments.appId);
			if (appObject !== undefined) {
				//self.getView().byId("idOriginOfConfig").setValue(appObject.ApplicationName);
				this.byId("idSemanticObject").setValue(appObject.SemanticObject);
				//TODO set the value of the number of categories, steps and representations when available, for now placeholder is given
			}
		} else {
			var applicationObject = this.oApplicationHandler.getApplication(this.params.arguments.appId);
			if (applicationObject) {
				this.byId("idSemanticObject").setValue(applicationObject.SemanticObject);
			}
		}
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.configuration#handleChangeDetailValue
	* @description Handler for change event on configuration Title input control
	* */
	handleChangeDetailValue : function() { //event handler to check if any value is changed in the configuration form
		var self = this;
		var configInfo = {};
		var sConfigTitle = this.byId("idConfigTitle").getValue().trim();
		var configObj = {
			AnalyticalConfigurationName : sConfigTitle
		};
		if (this.oConfigurationEditor) {
			this.oConfigurationEditor.setIsUnsaved();
		}
		var tempConfigId;
		var oConfigExist = this.oConfigurationHandler.getConfiguration(this.params.arguments.configId);
		if (sConfigTitle !== "" && sConfigTitle !== undefined) {
			if (oConfigExist !== undefined) { //updates a configuration
				this.oConfigurationHandler.setConfiguration(configObj, this.params.arguments.configId);
				//sets the application title
				this.oConfigurationHandler.loadConfiguration(this.params.arguments.configId, function(configurationEditor) {
					var oTranslationFormat = sap.apf.modeler.ui.utils.TranslationFormatMap.APPLICATION_TITLE;
					var sApplicationTitleId = self.oTextPool.setText(sConfigTitle, oTranslationFormat);
					configurationEditor.setApplicationTitle(sApplicationTitleId);
					configInfo.name = sConfigTitle;
					var sTitle = self.getText("configuration") + ": " + sConfigTitle;
					if (sConfigTitle) {
						self.oViewData.updateSelectedNode(configInfo);
						self.oViewData.updateTitleAndBreadCrumb(sTitle);
					}
				});
			} else { //saves a configuration
				tempConfigId = this.oConfigurationHandler.setConfiguration(configObj);
				//sets the application title
				this.oConfigurationHandler.loadConfiguration(tempConfigId, function(configurationEditor) {
					var oTranslationFormat = sap.apf.modeler.ui.utils.TranslationFormatMap.APPLICATION_TITLE;
					var sApplicationTitleId = self.oTextPool.setText(sConfigTitle, oTranslationFormat);
					configurationEditor.setApplicationTitle(sApplicationTitleId);
					var context = {
						appId : self.params.arguments.appId,
						configId : tempConfigId
					};
					configInfo.name = sConfigTitle;
					var sTitle = self.getText("configuration") + ": " + sConfigTitle;
					configInfo.id = oConfigExist === undefined ? configObj.AnalyticalConfiguration : undefined;
					if (sConfigTitle) {
						self.oViewData.updateSelectedNode(configInfo, context);
						self.oViewData.updateTitleAndBreadCrumb(sTitle);
					}
				});
			}
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.category#_setMandatoryFields
	 * @param {Array} fields - Array of form fields
	 * @description Set mandatory fields on the instance level  
	 * */
	_setMandatoryFields : function(fields) {
		this.mandatoryFields = this.mandatoryFields || [];
		for( var i = 0; i < fields.length; i++) {
			fields[i].isMandatory = true;
			this.mandatoryFields.push(fields[i]);
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.category#_getMandatoryFields
	 * @param {Object} oEvent - Event instance of the form field 
	 * @description getter for mandatory fields
	 * */
	_getMandatoryFields : function() {
		return this.mandatoryFields;
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.category#_setValidationState
	 * @param {Object} oEvent - Event instance of the form field 
	 * @description Set validation state of sub view
	 * */
	_setValidationState : function() {
		var mandatoryFields = this._getMandatoryFields();
		for( var i = 0; i < mandatoryFields.length; i++) {
			if (mandatoryFields[i].isMandatory === true) {
				this.isValidState = (mandatoryFields[i].getValue().trim() !== "") ? true : false;
				if (this.isValidState === false) {
					break;
				}
			}
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.category#getValidationState
	 * @description Getter for getting the current validation state of sub view
	 * */
	getValidationState : function() {
		this._setValidationState(); //Set the validation state of view
		var isValidState = (this.isValidState !== undefined) ? this.isValidState : true;
		return isValidState;
	}
});

}; // end of sap/apf/modeler/ui/controller/configuration.controller.js
if ( !jQuery.sap.isDeclared('sap.apf.modeler.ui.controller.facetFilter.controller') ) {
  jQuery.sap.declare('sap.apf.modeler.ui.controller.facetFilter.controller');
/*!
* SAP APF Analysis Path Framework
*
* (c) Copyright 2012-2014 SAP SE. All rights reserved
*/

/**
* @class facetFilter
* @memberOf sap.apf.modeler.ui.controller
* @name facetFilter
* @description controller for view.facetFilter
*/
sap.ui.controller("sap.apf.modeler.ui.controller.facetFilter", {
	/**
	* @public
	* @function
	* @name sap.apf.modeler.ui.controller.facetFilter#onInit
	* @description Called on initialization of the view.
	* Sets the static texts for all controls in UI.
	* Sets the scroll height for the container.
	* Adds style classes to all UI controls.
	* Prepares dependecies.
	* Sets dynamic text for input controls
	* */
	onInit : function() {
		this.getView().addStyleClass("sapUiSizeCompact");//For non touch devices- compact style class increases the information density on the screen by reducing control dimensions
		this.oViewData = this.getView().getViewData();
		this.getText = this.oViewData.getText;
		this.params = this.oViewData.oParams;
		this.oConfigurationHandler = this.oViewData.oConfigurationHandler;
		this.oConfigurationEditor = this.oViewData.oConfigurationEditor;
		var self = this;
		if (!this.oConfigurationEditor) {
			this.oConfigurationHandler.loadConfiguration(this.params.arguments.configId, function(configurationEditor) {
				self.oConfigurationEditor = configurationEditor;
			});
		}
		this.oTextPool = this.oConfigurationHandler.getTextPool();
		//this._getDependencies(); //get dependencies from router
		//Set Mandatory Fields
		var mandatoryFields = [];
		mandatoryFields.push(this.byId("idffProperty"));
		mandatoryFields.push(this.byId("idLabel"));
		mandatoryFields.push(this.byId("idVHDefaultValues"));
		mandatoryFields.push(this.byId("idVHfunction"));
		mandatoryFields.push(this.byId("idVHEntity"));
		mandatoryFields.push(this.byId("idVHSelectProperties"));
		mandatoryFields.push(this.byId("idFREntity"));
		mandatoryFields.push(this.byId("idFRSelectProperties"));
		this._setMandatoryFields(mandatoryFields);
		this._setDisplayText();
		this.setDetailData();
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.facetFilter#_addAutoCompleteFeatureOnInputs
	* @description Adds 'Auto Complete Feature' to the input fields in the view
	* using sap.apf.modeler.ui.utils.TextPoolHelper.
	* */
	_addAutoCompleteFeatureOnInputs : function() {
		if (this.oConfigurationHandler) {
			var oTextPoolHelper = new sap.apf.modeler.ui.utils.TextPoolHelper(this.oTextPool);
			var oTranslationFormat = sap.apf.modeler.ui.utils.TranslationFormatMap.FACETFILTER_LABEL;
			var oDependenciesForText = {
				oTranslationFormat : oTranslationFormat,
				type : "text"
			};
			var oFacetFilterLabel = this.byId("idLabel");
			oTextPoolHelper.setAutoCompleteOn(oFacetFilterLabel, oDependenciesForText);
			//autocomplete for source
			var oDependenciesForService = {
				oConfigurationEditor : this.oConfigurationEditor,
				type : "service"
			};
			var oFacetFilterValueHelpSource = this.byId("idVHSource");
			oTextPoolHelper.setAutoCompleteOn(oFacetFilterValueHelpSource, oDependenciesForService);
			var oFacetFilterFilterResolutionSource = this.byId("idFRSource");
			oTextPoolHelper.setAutoCompleteOn(oFacetFilterFilterResolutionSource, oDependenciesForService);
		}
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.facetFilte#_setDisplayText
	* @description Sets static texts in UI
	* */
	_setDisplayText : function() {
		this.byId("idFacetFilterBasicData").setTitle(this.getText("basicData"));
		this.byId("idLabel").setPlaceholder(this.getText("New Filter"));
		this.byId("idValueHelpTitle").setTitle(this.getText("valueHelp"));
		this.byId("idFilterResolutionTitle").setTitle(this.getText("filterResolution"));
		this.byId("idFfPropertyLabel").setText(this.getText("ffProperty"));
		this.byId("idFfPropertyLabel").setRequired(true);
		this.byId("idFfLabel").setText(this.getText("ffLabel"));
		this.byId("idFfLabel").setRequired(true);
		this.byId("idFfAliasLabel").setText(this.getText("ffAlias"));
		this.byId("idSelectionModeLabel").setText(this.getText("ffSelectionMode"));
		this.byId("idVhSourceLabel").setText(this.getText("vhSource"));
		this.byId("idVhEntityLabel").setText(this.getText("vhEntity"));
		this.byId("idVhEntityLabel").setRequired(false);
		this.byId("idVhSelectPropertiesLabel").setText(this.getText("vhSelectProperties"));
		this.byId("idVhSelectPropertiesLabel").setRequired(false);
		this.byId("idVhDefaultValueModeLabel").setText(this.getText("vhDefaultValueMode"));
		this.byId("idVhDefaultValuesLabel").setText(this.getText("vhDefaultValues"));
		this.byId("idVhDefaultValuesLabel").setRequired(false);
		this.byId("idVhFunctionLabel").setText(this.getText("function"));//Default Function
		this.byId("idVhFunctionLabel").setRequired(false);
		this.byId("idVhCheckBoxLabel").setText(this.getText("vhCheckBoxLabel"));
		this.byId("idVhSourceLabel1").setText(this.getText("vhSource"));
		this.byId("idVhSourceLabel1").setRequired(false);
		this.byId("idVhEntityLabel1").setText(this.getText("vhEntity"));
		this.byId("idVhEntityLabel1").setRequired(false);
		this.byId("idVhSelectPropertiesLabel1").setText(this.getText("vhSelectProperties"));
		this.byId("idVhSelectPropertiesLabel1").setRequired(false);
		this.byId("single").setText(this.getText("singleSelection"));
		this.byId("multi").setText(this.getText("multipleSelection"));
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.facetFilte#setDetailData
	* @description Sets dynamic texts for controls
	* */
	setDetailData : function() {
		var aPropertiesForControl = [];
		this._addAutoCompleteFeatureOnInputs();
		var aAllKnowProperties = this.oConfigurationEditor.getAllKnownProperties();
		aAllKnowProperties.forEach(function(property) {
			var oProp = {};
			oProp.propertyKey = property;
			oProp.propertyName = property;
			aPropertiesForControl.push(oProp);
		});
		var oDataForProperties = {
			Properties : aPropertiesForControl
		};
		var oModelForFFProp = new sap.ui.model.json.JSONModel();
		oModelForFFProp.setSizeLimit(500);
		oModelForFFProp.setData(oDataForProperties);
		this.byId("idffProperty").setModel(oModelForFFProp);
		var oModelForFFAlias = new sap.ui.model.json.JSONModel();
		oModelForFFAlias.setSizeLimit(500);
		oModelForFFAlias.setData(oDataForProperties);
		this.byId("idAlias").setModel(oModelForFFAlias);
		var DVModes = [
		// Could be uncommented when the feature is implemented in runtime
		//{
		//dvKey : this.getText("automaticValue"),
		//dvName : this.getText("automaticValue")
		//}, 
		{
			dvKey : this.getText("fixedValues"),
			dvName : this.getText("fixedValues")
		}, {
			dvKey : this.getText("function"),
			dvName : this.getText("function")
		} ];
		var oDataForDVMode = {
			DVModes : DVModes
		};
		var oModelForDVMode = new sap.ui.model.json.JSONModel();
		oModelForDVMode.setSizeLimit(500);
		oModelForDVMode.setData(oDataForDVMode);
		this.byId("idVHDefaultValueMode").setModel(oModelForDVMode);
		if (this.params && this.params.arguments && this.params.arguments.facetFilterId) {
			this.facetFilter = this.oConfigurationEditor.getFacetFilter(this.params.arguments.facetFilterId);
		}
		if (this.facetFilter) {
			if (this.params && this.params.arguments && this.params.arguments.facetFilterId) {
				this.facetFilter = this.oConfigurationEditor.getFacetFilter(this.params.arguments.facetFilterId);
			}
			if (this.facetFilter.getProperty() !== undefined && this.facetFilter.getProperty() !== null) {
				this.byId("idffProperty").setValue(this.facetFilter.getProperty());
			}
			if (this.facetFilter.getLabelKey() !== undefined && this.facetFilter.getLabelKey() !== null && this.oTextPool.get(this.facetFilter.getLabelKey())) {
				this.byId("idLabel").setValue(this.oTextPool.get(this.facetFilter.getLabelKey()).TextElementDescription);
			} else {
				this.byId("idLabel").setValue(this.params.arguments.facetFilterId);
			}
			if (this.facetFilter.getAlias() !== undefined) {
				this.byId("idAlias").setValue(this.facetFilter.getAlias());
			}
			if (this.facetFilter.isMultiSelection() !== undefined) {
				this.byId("multi").setSelected(this.facetFilter.isMultiSelection());
				this.byId("single").setSelected(!this.facetFilter.isMultiSelection());
			}
			if (this.facetFilter.getServiceOfValueHelp() !== undefined) {
				this.byId("idVHSource").setValue(this.facetFilter.getServiceOfValueHelp());
				var sSource = this.facetFilter.getServiceOfValueHelp();
				var aAllEntitySets = [];
				var aAllEntitySetsForControll = [];
				aAllEntitySets = this.oConfigurationEditor.getAllEntitySetsOfService(sSource);
				aAllEntitySets.forEach(function(entiset) {
					var oEntitySet = {};
					oEntitySet.entityKey = entiset;
					oEntitySet.entityName = entiset;
					aAllEntitySetsForControll.push(oEntitySet);
				});
				var oDataForEntitySets = {
					Entities : aAllEntitySetsForControll
				};
				var oModel = new sap.ui.model.json.JSONModel();
				oModel.setSizeLimit(500);
				oModel.setData(oDataForEntitySets);
				this.byId("idVHEntity").setModel(oModel);
				this.byId("idVhEntityLabel").setText(this.getText("vhEntity"));
				this.byId("idVhEntityLabel").setRequired(true);
				this.byId("idVhSelectPropertiesLabel").setText(this.getText("vhSelectProperties"));
				this.byId("idVhSelectPropertiesLabel").setRequired(true);
			}
			if (this.facetFilter.getEntitySetOfValueHelp() !== undefined) {
				this.byId("idVHEntity").setSelectedKey(this.facetFilter.getEntitySetOfValueHelp());
				var sEntity = this.facetFilter.getEntitySetOfValueHelp();
				var sServiceRoot = this.facetFilter.getServiceOfValueHelp();
				var aProperties = [];
				aPropertiesForControl = [];
				aProperties = this.oConfigurationEditor.getAllPropertiesOfEntitySet(sServiceRoot, sEntity);
				var sDefaltSelectedProperty = aProperties[0];
				aProperties.forEach(function(property) {
					var oProp = {};
					oProp.propertyKey = property;
					oProp.propertyName = property;
					aPropertiesForControl.push(oProp);
				});
				var oDataForSelProperties = {
					Properties : aPropertiesForControl
				};
				var oModelForSelProp = new sap.ui.model.json.JSONModel();
				oModelForSelProp.setSizeLimit(500);
				oModelForSelProp.setData(oDataForSelProperties);
				this.byId("idVHSelectProperties").setModel(oModelForSelProp);
			}
			if (this.facetFilter.getSelectPropertiesOfValueHelp() && this.facetFilter.getSelectPropertiesOfValueHelp().length > 0) {
				this.byId("idVHSelectProperties").setSelectedKeys(this.facetFilter.getSelectPropertiesOfValueHelp());
			}
			// Could be uncommented when the feature is implemented in runtime
			//			if (this.facetFilter.getAutomaticSelection()) { //hide preselection default and preselection function if the automatic value is selected
			//				this._hideAndResetPreselectionFunction();
			//				this._hideAndResetPreselectionDefault();
			//				this.facetFilter.setAutomaticSelection(true);
			//				this.byId("idVHDefaultValueMode").setSelectedKey(this.getText("automaticValue"));
			//			} else 
			if (this.facetFilter.getPreselectionFunction() !== undefined) { //hide preselection default if the preselection function is selected
				this._hideAndResetPreselectionDefault();
				this._showPreselectionFunction();
				// Could be uncommented when the feature is implemented in runtime
				//this.facetFilter.setAutomaticSelection(false);
				this.byId("idVHDefaultValueMode").setSelectedKey(this.getText("function"));
				this.byId("idVHfunction").setValue(this.facetFilter.getPreselectionFunction());
			} else {
				this._hideAndResetPreselectionFunction();
				this._showPreselectionDefault();
				this.byId("idVHDefaultValueMode").setSelectedKey(this.getText("fixedValues"));
				var sPreselectionDefaults;
				if (this.facetFilter.isMultiSelection()) {
					sPreselectionDefaults = this.facetFilter.getPreselectionDefaults() ? this.facetFilter.getPreselectionDefaults().join(',') : "";// if there are values selected
				} else {
					sPreselectionDefaults = this.facetFilter.getPreselectionDefaults()[0];
				}
				this.byId("idVHDefaultValues").setValue(sPreselectionDefaults);
			}
			if (this.facetFilter.getUseSameRequestForValueHelpAndFilterResolution()) { // if the same request has to be used for filter resolution
				this.byId("idVhCheckBox").setSelected(true);
				this._disableFilterResolutionSourceFields();
				this._setValueHelpSourceAsFilterResolution();
			} else {// if the different request has to be used for filter resolution
				this.byId("idVhCheckBox").setSelected(false);
				this._enableFilterResolutionSourceFields();
				if (this.facetFilter.getServiceOfFilterResolution() !== undefined && this.facetFilter.getServiceOfFilterResolution() !== "" && this.facetFilter.getServiceOfFilterResolution() !== null) {
					sSource = this.facetFilter.getServiceOfFilterResolution();
					this.byId("idFRSource").setValue(sSource);
					aAllEntitySets = [];
					aAllEntitySetsForControll = [];
					aAllEntitySets = this.oConfigurationEditor.getAllEntitySetsOfService(sSource);
					aAllEntitySets.forEach(function(entiset) {
						var oEntitySet = {};
						oEntitySet.entityKey = entiset;
						oEntitySet.entityName = entiset;
						aAllEntitySetsForControll.push(oEntitySet);
					});
					var oDataForEntityFRSets = {
						Entities : aAllEntitySetsForControll
					};
					var oModelForFREntity = new sap.ui.model.json.JSONModel();
					oModelForFREntity.setSizeLimit(500);
					oModelForFREntity.setData(oDataForEntityFRSets);
					this.byId("idFREntity").setModel(oModelForFREntity);
					this.byId("idVhEntityLabel1").setText(this.getText("vhEntity"));
					this.byId("idVhEntityLabel1").setRequired(true);
					this.byId("idVhSelectPropertiesLabel1").setText(this.getText("vhSelectProperties"));
					this.byId("idVhSelectPropertiesLabel1").setRequired(true);
				}
				if (this.facetFilter.getEntitySetOfFilterResolution() !== undefined && this.facetFilter.getEntitySetOfFilterResolution() !== null && this.facetFilter.getEntitySetOfFilterResolution() !== "") {
					sEntity = this.facetFilter.getEntitySetOfFilterResolution();
					sServiceRoot = this.facetFilter.getServiceOfFilterResolution();
					this.byId("idFREntity").setSelectedKey(this.facetFilter.getEntitySetOfFilterResolution());
					aProperties = [];
					aPropertiesForControl = [];
					aProperties = this.oConfigurationEditor.getAllPropertiesOfEntitySet(sServiceRoot, sEntity);
					sDefaltSelectedProperty = aProperties[0];
					aProperties.forEach(function(property) {
						var oProp = {};
						oProp.propertyKey = property;
						oProp.propertyName = property;
						aPropertiesForControl.push(oProp);
					});
					var oDataForFRSelProperties = {
						Properties : aPropertiesForControl
					};
					var oModelForFRSelProp = new sap.ui.model.json.JSONModel();
					oModelForFRSelProp.setSizeLimit(500);
					oModelForFRSelProp.setData(oDataForFRSelProperties);
					this.byId("idFRSelectProperties").setModel(oModelForFRSelProp);
				}
				if (this.facetFilter.getSelectPropertiesOfFilterResolution() !== undefined && this.facetFilter.getSelectPropertiesOfFilterResolution().length > 0) {
					this.byId("idFRSelectProperties").setSelectedKeys(this.facetFilter.getSelectPropertiesOfFilterResolution());
				}
			}
		} else {
			var sFacetFilterId = this.oConfigurationEditor.createFacetFilter();
			this.facetFilter = this.oConfigurationEditor.getFacetFilter(sFacetFilterId);
			this.facetFilter.setMultiSelection(true);
			this.byId("idVHDefaultValueMode").setSelectedKey(this.getText("fixedValues"));
			// Could be uncommented when the feature is implemented in runtime
			this.byId("idVHDefaultValues").isMandatory = false;
			this.byId("idVhDefaultValuesLabel").setRequired(false);
			this._showPreselectionDefault();
			this._hideAndResetPreselectionFunction();
			//			this._hideAndResetPreselectionDefault();
			//this.facetFilter.setAutomaticSelection(true);
			this.byId("multi").setSelected(true);
			var facetFilterInfo = {
				id : sFacetFilterId,
				icon : "sap-icon://filter"
			};
			this.oViewData.updateSelectedNode(facetFilterInfo);
		}
	},
	handleChangeForProperty : function(oEvent) {
		this.oConfigurationEditor.setIsUnsaved();
		var sProperty = this.byId("idffProperty").getValue().trim();
		if (sProperty !== "" && sProperty !== null) {
			this.facetFilter.setProperty(sProperty);
		}
	},
	handleChangeForLabel : function(oEvent) {
		this.oConfigurationEditor.setIsUnsaved();
		var self = this;
		var oTranslationFormat = sap.apf.modeler.ui.utils.TranslationFormatMap.FACETFILTER_LABEL;
		var sFacetFilterLabel = this.byId("idLabel").getValue().trim();
		var sFacetFilterLabelId = self.oTextPool.setText(sFacetFilterLabel, oTranslationFormat);
		if (sFacetFilterLabel !== "" && sFacetFilterLabel !== null) {
			this.facetFilter.setLabelKey(sFacetFilterLabelId);
		}
		var facetFilterInfo = {};
		facetFilterInfo.name = sFacetFilterLabel;
		facetFilterInfo.id = this.facetFilter.getId();
		if (sFacetFilterLabel !== "" && sFacetFilterLabel !== null) {
			this.oViewData.updateSelectedNode(facetFilterInfo, this.bIsNew);
			var sTitle = this.getText("facetFilter") + ": " + sFacetFilterLabel;
			this.oViewData.updateTitleAndBreadCrumb(sTitle);
		}
	},
	handleChangeForAlias : function() {
		this.oConfigurationEditor.setIsUnsaved();
		var sAlias = this.byId("idAlias").getValue().trim();
		this.facetFilter.setAlias(sAlias);
	},
	_setPreselectionDefaultValue : function() {
		if (!this.facetFilter.isMultiSelection()) {
			var aPSDafaults = this.facetFilter.getPreselectionDefaults();
			if (aPSDafaults && aPSDafaults.length > 0) {
				this.facetFilter.setPreselectionDefaults([ aPSDafaults[0] ]);
				if (this.byId("idVHDefaultValues")) {
					this.byId("idVHDefaultValues").setValue(aPSDafaults[0]);
				}
			}
		}
	},
	handleChangeForSelectionModeSingle : function() {
		this.facetFilter.setMultiSelection(false);
		this.oConfigurationEditor.setIsUnsaved();
		this._changeMandatoryTagForSelectionMode();
		this._setPreselectionDefaultValue();
	},
	handleChangeForSelectionModeMulti : function() {
		this.facetFilter.setMultiSelection(true);
		this.oConfigurationEditor.setIsUnsaved();
		this._changeMandatoryTagForSelectionMode();
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.facetFilter#_changeMandatoryTagForSelectionMode
	* @description toggles the mandatory tag from the selection mode values based on what is selected and present on UI.
	* */
	_changeMandatoryTagForSelectionMode : function() {
		if (jQuery(this.byId("idVHfunction").getDomRef()).length >= 1) {
			this.byId("idVhFunctionLabel").setRequired(true);
			this.byId("idVHfunction").isMandatory = true;
			this.byId("idVHDefaultValues").isMandatory = false;
		} else if (jQuery(this.byId("idVHDefaultValues").getDomRef()).length >= 1) {
			this.byId("idVhFunctionLabel").setRequired(true);
			this.byId("idVHfunction").isMandatory = false;
			if (this.facetFilter.isMultiSelection()) {
				this.byId("idVHDefaultValues").isMandatory = false;
				this.byId("idVhDefaultValuesLabel").setRequired(false);
			} else {
				this.byId("idVHDefaultValues").isMandatory = true;
				this.byId("idVhDefaultValuesLabel").setRequired(true);
			}
		}
		// Could be uncommented when the feature is implemented in runtime
		//		else {
		//			this.byId("idVhDefaultValuesLabel").setRequired(false);
		//			this.byId("idVhFunctionLabel").setRequired(false);
		//			this.byId("idVHfunction").isMandatory = false;
		//			this.byId("idVHDefaultValues").isMandatory = false;
		//		}
	},
	_checkValidationStateForService : function(bVHService, param) {
		var self = this;
		var sSource, aOldSelProp, oValidVHService = {
			source : undefined,
			entitySet : undefined,
			selectProperty : undefined
		};
		if (bVHService) {
			sSource = this.byId("idVHSource").getValue().trim();
		} else {
			sSource = this.byId("idFRSource").getValue().trim();
		}
		var bServiceRegistered = this.oConfigurationEditor.registerService(sSource);
		var aAllEntitySets = [];
		var aAllEntitySetsForControll = [];
		if (bServiceRegistered) {
			oValidVHService.source = sSource;
			aAllEntitySets = this.oConfigurationEditor.getAllEntitySetsOfService(sSource);
			var sSelectedEntity;
			if (param === "entitySet" || param === "selectProperties") {
				if (bVHService) {
					sSelectedEntity = this.byId("idVHEntity").getSelectedKey();
				} else {
					sSelectedEntity = this.byId("idFREntity").getSelectedKey();
				}
			} else {
				if (bVHService) {
					sSelectedEntity = this.facetFilter.getEntitySetOfValueHelp();
				} else {
					sSelectedEntity = this.facetFilter.getEntitySetOfFilterResolution();
				}
			}
			if (sSelectedEntity) {
				aAllEntitySets.forEach(function(entitySet) {
					if (sSelectedEntity === entitySet) {
						oValidVHService.entitySet = sSelectedEntity;
						if (param === "source") {
							if (bVHService) {
								self.byId("idVHEntity").setSelectedKey(sSelectedEntity);
							} else {
								self.byId("idFREntity").setSelectedKey(sSelectedEntity);
							}
						}
					}
				});
				var aSelectProperties, aCommonProperty = [];
				if (param === "selectProperties") {
					if (bVHService) {
						aSelectProperties = this.byId("idVHSelectProperties").getSelectedKeys();
					} else {
						aSelectProperties = this.byId("idFRSelectProperties").getSelectedKeys();
					}
				} else {
					if (bVHService) {
						aSelectProperties = this.facetFilter.getSelectPropertiesOfValueHelp();
					} else {
						aSelectProperties = this.facetFilter.getSelectPropertiesOfFilterResolution();
					}
				}
				var aProperties = this.oConfigurationEditor.getAllPropertiesOfEntitySet(sSource, sSelectedEntity);
				aProperties.forEach(function(propertyFromEntity) {
					aSelectProperties.forEach(function(propertyFromControl) {
						if (propertyFromControl === propertyFromEntity) {
							aCommonProperty.push(propertyFromControl);
						}
					});
				});
				if (aCommonProperty.length > 0) {
					oValidVHService.selectProperty = aCommonProperty;
					if (param !== "selectProperties") {
						if (bVHService) {
							this.byId("idVHSelectProperties").setSelectedKeys(aCommonProperty);
						} else {
							this.byId("idFRSelectProperties").setSelectedKeys(aCommonProperty);
						}
					}
				} else {
					if (this.byId("idVhCheckBox").getSelected() === true) {
						this._resetFilterResolutionSelectProperty();
					}
				}
			}
		}
		if (oValidVHService.selectProperty && oValidVHService.entitySet && oValidVHService.source) {
			if (bVHService) {
				this.facetFilter.setServiceOfValueHelp(oValidVHService.source);
				this.facetFilter.setEntitySetOfValueHelp(oValidVHService.entitySet);
				aOldSelProp = this.facetFilter.getSelectPropertiesOfValueHelp();
				aOldSelProp.forEach(function(property) {
					self.facetFilter.removeSelectPropertyOfValueHelp(property);
				});
				oValidVHService.selectProperty.forEach(function(property) {
					self.facetFilter.addSelectPropertyOfValueHelp(property);
				});
				if (this.byId("idVhCheckBox").getSelected() === true) { // if the same request has to be used for filter resolution
					this._setValueHelpSourceAsFilterResolution();
				}
			} else {
				this.facetFilter.setServiceOfFilterResolution(oValidVHService.source);
				this.facetFilter.setEntitySetOfFilterResolution(oValidVHService.entitySet);
				aOldSelProp = this.facetFilter.getSelectPropertiesOfFilterResolution();
				aOldSelProp.forEach(function(property) {
					self.facetFilter.removeSelectPropertyOfFilterResolution(property);
				});
				oValidVHService.selectProperty.forEach(function(property) {
					self.facetFilter.addSelectPropertyOfFilterResolution(property);
				});
			}
		}
	},
	handleChangeForVHSource : function() {
		var self = this;
		this.oConfigurationEditor.setIsUnsaved();
		var sSource = this.byId("idVHSource").getValue().trim();
		var bServiceRegistered;
		if (sSource) {
			bServiceRegistered = this.oConfigurationEditor.registerService(sSource);
			if (bServiceRegistered) {
				this.byId("idVhEntityLabel").setText(this.getText("vhEntity"));
				this.byId("idVhEntityLabel").setRequired(true);
				this.byId("idVhSelectPropertiesLabel").setText(this.getText("vhSelectProperties"));
				this.byId("idVhSelectPropertiesLabel").setRequired(true);
			}
		} else {
			this.facetFilter.setServiceOfValueHelp(sSource);
			this.facetFilter.setEntitySetOfValueHelp(undefined);
			var aOldSelProp = this.facetFilter.getSelectPropertiesOfValueHelp();
			aOldSelProp.forEach(function(property) {
				self.facetFilter.removeSelectPropertyOfValueHelp(property);
			});
			this.byId("idVhEntityLabel").setText(this.getText("vhEntity"));
			this.byId("idVhEntityLabel").setRequired(false);
			this.byId("idVhSelectPropertiesLabel").setText(this.getText("vhSelectProperties"));
			this.byId("idVhSelectPropertiesLabel").setRequired(false);
			if (this.byId("idVhCheckBox").getSelected() === true) {
				this._resetFilterResolutionFields(); // if the service is not entered , reset the filter resolution field
			}
		}
		var sDefaultEntitySetKey, aAllEntitySets = [], aAllEntitySetsForControll = [];
		aAllEntitySets = this.oConfigurationEditor.getAllEntitySetsOfService(sSource);
		aAllEntitySets.forEach(function(entiset) {
			var oEntitySet = {};
			oEntitySet.entityKey = entiset;
			oEntitySet.entityName = entiset;
			aAllEntitySetsForControll.push(oEntitySet);
		});
		var oDataForEntitySets = {
			Entities : aAllEntitySetsForControll
		};
		var oModel = new sap.ui.model.json.JSONModel();
		oModel.setSizeLimit(500);
		oModel.setData(oDataForEntitySets);
		this.byId("idVHEntity").setModel(oModel);
		var aProperties = [], aPropertiesForControl = [];
		if (aAllEntitySets.length >= 1) {
			this.byId("idVHEntity").setSelectedKey(aAllEntitySets[0]);
			this.facetFilter.setEntitySetOfValueHelp(aAllEntitySets[0]);
			aProperties = this.oConfigurationEditor.getAllPropertiesOfEntitySet(sSource, aAllEntitySets[0]);
			aProperties.forEach(function(property) {
				var oProp = {};
				oProp.propertyKey = property;
				oProp.propertyName = property;
				aPropertiesForControl.push(oProp);
			});
		}
		//set model for select properties
		var oDataForProperties = {
			Properties : aPropertiesForControl
		};
		var oModelForSelProp = new sap.ui.model.json.JSONModel();
		oModelForSelProp.setSizeLimit(500);
		oModelForSelProp.setData(oDataForProperties);
		this.byId("idVHSelectProperties").setModel(oModelForSelProp);
		this._checkValidationStateForService(true, "source");
		if (this.byId("idVhCheckBox").getSelected() === true) {
			this._populateServiceForFilterResolution();
		}
	},
	handleChangeForVHEntity : function() {
		var self = this;
		this.oConfigurationEditor.setIsUnsaved();
		var sEntity = this.byId("idVHEntity").getSelectedKey();
		var sServiceRoot = this.byId("idVHSource").getValue().trim();
		var aProperties = [], aPropertiesForControl = [];
		if (sServiceRoot && sServiceRoot !== null && sServiceRoot !== "") {
			aProperties = this.oConfigurationEditor.getAllPropertiesOfEntitySet(sServiceRoot, sEntity);
			aProperties.forEach(function(property) {
				var oProp = {};
				oProp.propertyKey = property;
				oProp.propertyName = property;
				aPropertiesForControl.push(oProp);
			});
			var oDataForProperties = {
				Properties : aPropertiesForControl
			};
			var oModelForSelProp = new sap.ui.model.json.JSONModel();
			oModelForSelProp.setSizeLimit(500);
			oModelForSelProp.setData(oDataForProperties);
			this.byId("idVHSelectProperties").setModel(oModelForSelProp);
			this._checkValidationStateForService(true, "entitySet");
			if (this.byId("idVhCheckBox").getSelected() === true) {
				this._populateEntityForFilterResolution(); //populate the filter resolution entity with the same values as the value help entity
			}
		}
	},
	handleChangeForVHSelectProperties : function() {
		this.oConfigurationEditor.setIsUnsaved();
		this._checkValidationStateForService(true, "selectProperties");
		if (this.byId("idVhCheckBox").getSelected() === true) {
			this._populateSelectPropertyForFilterResolution();
		}
	},
	handleChangeForDVMode : function() {
		var sDVMode = this.byId("idVHDefaultValueMode").getSelectedKey();
		if (sDVMode === this.getText("fixedValues")) { //hide preselection function if the preselection default is selected
			this._hideAndResetPreselectionFunction();
			this._showPreselectionDefault();
		} else if (sDVMode === this.getText("Function")) { //hide preselection default if the preselection function is selected
			this._showPreselectionFunction();
			this._hideAndResetPreselectionDefault();
		}
		// Could be uncommented when the feature is implemented in runtime
		//		else { //hide preselection default and preselection function if automatic value is selected
		//			this._hideAndResetPreselectionFunction();
		//			this._hideAndResetPreselectionDefault();
		//			this.facetFilter.setAutomaticSelection(true);
		//		}
	},
	handleChangeForVHFixedValues : function() {
		this.oConfigurationEditor.setIsUnsaved();
		var sPreselectionDefaults = this.byId("idVHDefaultValues").getValue().trim();
		var aPreselectionDefaults = sPreselectionDefaults.split(',');
		var aValidPreselectionDefaults = [];
		if (this.facetFilter.getPreselectionFunction()) {
			this.facetFilter.removePreselectionFunction();
		}
		aPreselectionDefaults.forEach(function(defaultValue) {
			var sValidString = defaultValue.trim();
			if (sValidString) {
				aValidPreselectionDefaults.push(sValidString);
			}
		});
		if (aValidPreselectionDefaults.length > 0) {
			if (this.facetFilter.isMultiSelection()) {
				this.facetFilter.setPreselectionDefaults(aValidPreselectionDefaults);
				this.byId("idVHDefaultValues").isMandatory = false;
			} else {
				this.facetFilter.setPreselectionDefaults([ aValidPreselectionDefaults[0] ]);//for single selection only first value is sent
				this.facetFilter.setMultiSelection(false);
				this.byId("idVHDefaultValues").isMandatory = true;
			}
		}
	},
	handleChangeForPreselectionFunction : function() {
		this.oConfigurationEditor.setIsUnsaved();
		var sPreselectionFunction = this.byId("idVHfunction").getValue().trim();
		if (this.facetFilter.getPreselectionDefaults().length) {
			this.facetFilter.removePreselectionDefaults();
		}
		this.byId("idVHfunction").isMandatory = true;
		if (sPreselectionFunction) {
			this.facetFilter.setPreselectionFunction(sPreselectionFunction);
		}
	},
	handleChangeForFRSource : function() {
		var self = this;
		this.oConfigurationEditor.setIsUnsaved();
		var sSource = this.byId("idFRSource").getValue().trim();
		var bServiceRegistered;
		var aAllEntitySets = [];
		var aAllEntitySetsForControll = [];
		if (sSource) {
			bServiceRegistered = this.oConfigurationEditor.registerService(sSource);
			if (bServiceRegistered) {
				this.byId("idVhEntityLabel1").setText(this.getText("vhEntity"));
				this.byId("idVhEntityLabel1").setRequired(true);
				this.byId("idVhSelectPropertiesLabel1").setText(this.getText("vhSelectProperties"));
				this.byId("idVhSelectPropertiesLabel1").setRequired(true);
			}
		} else {
			this.facetFilter.setServiceOfFilterResolution(sSource);
			this.facetFilter.setEntitySetOfFilterResolution(undefined);
			var aOldSelProp = this.facetFilter.getSelectPropertiesOfFilterResolution();
			aOldSelProp.forEach(function(property) {
				self.facetFilter.removeSelectPropertyOfFilterResolution(property);
			});
			this.byId("idVhEntityLabel1").setText(this.getText("vhEntity"));
			this.byId("idVhEntityLabel1").setRequired(false);
			this.byId("idVhSelectPropertiesLabel1").setText(this.getText("vhSelectProperties"));
			this.byId("idVhSelectPropertiesLabel1").setRequired(false);
		}
		aAllEntitySets = this.oConfigurationEditor.getAllEntitySetsOfService(sSource);
		aAllEntitySets.forEach(function(entiset) {
			var oEntitySet = {};
			oEntitySet.entityKey = entiset;
			oEntitySet.entityName = entiset;
			aAllEntitySetsForControll.push(oEntitySet);
		});
		var oDataForEntitySets = {
			Entities : aAllEntitySetsForControll
		};
		var oModel = new sap.ui.model.json.JSONModel();
		oModel.setSizeLimit(500);
		oModel.setData(oDataForEntitySets);
		this.byId("idFREntity").setModel(oModel);
		var aProperties = [], aPropertiesForControl = [];
		if (aAllEntitySets.length >= 1) {
			this.byId("idFREntity").setSelectedKey(aAllEntitySets[0]);
			this.facetFilter.setEntitySetOfFilterResolution(aAllEntitySets[0]);
			aProperties = this.oConfigurationEditor.getAllPropertiesOfEntitySet(sSource, aAllEntitySets[0]);
			aProperties.forEach(function(property) {
				var oProp = {};
				oProp.propertyKey = property;
				oProp.propertyName = property;
				aPropertiesForControl.push(oProp);
			});
		}
		var oDataForProperties = {
			Properties : aPropertiesForControl
		};
		var oModelForSelProp = new sap.ui.model.json.JSONModel();
		oModelForSelProp.setSizeLimit(500);
		oModelForSelProp.setData(oDataForProperties);
		this.byId("idFRSelectProperties").setModel(oModelForSelProp);
		this._checkValidationStateForService(false, "source");
	},
	handleChangeForFREntity : function() {
		var self = this;
		this.oConfigurationEditor.setIsUnsaved();
		var sEntity = this.byId("idFREntity").getSelectedKey();
		var sServiceRoot = this.byId("idFRSource").getValue().trim();
		var aProperties = [], aPropertiesForControl = [];
		if (sServiceRoot && sServiceRoot !== null && sServiceRoot !== "") {
			aProperties = this.oConfigurationEditor.getAllPropertiesOfEntitySet(sServiceRoot, sEntity);
			var sDefaltSelectedProperty = aProperties[0];
			aProperties.forEach(function(property) {
				var oProp = {};
				oProp.propertyKey = property;
				oProp.propertyName = property;
				aPropertiesForControl.push(oProp);
			});
			var oDataForProperties = {
				Properties : aPropertiesForControl
			};
			var oModelForSelProp = new sap.ui.model.json.JSONModel();
			oModelForSelProp.setSizeLimit(500);
			oModelForSelProp.setData(oDataForProperties);
			this.byId("idFRSelectProperties").setModel(oModelForSelProp);
			this._checkValidationStateForService(false, "entitySet");
		}
	},
	handleChangeForFRSelectProperties : function() {
		this.oConfigurationEditor.setIsUnsaved();
		this._checkValidationStateForService(false, "selectProperties");
	},
	handleChangeForVHCheckBox : function(oEvent) {
		this.oConfigurationEditor.setIsUnsaved();
		if (oEvent.getParameter("selected")) {
			this.facetFilter.setUseSameRequestForValueHelpAndFilterResolution(true);
			this._disableFilterResolutionSourceFields();//disable the source, entity and properties fileds for value help request in case the checkbox is chceked
		} else {
			this.facetFilter.setUseSameRequestForValueHelpAndFilterResolution(false);
			this._enableFilterResolutionSourceFields(); //enable the source, entity and properties fileds for value help request in case the checkbox is unchceked
		}
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.facetFilter#_enableFilterResolutionSourceFields
	* @description enables the source, entity and properties fileds for value help request
	* */
	_enableFilterResolutionSourceFields : function() {
		this.byId("idFRSource").setEnabled(true);
		this.byId("idFREntity").setEnabled(true);
		this.byId("idFRSelectProperties").setEnabled(true);
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.facetFilter#_disableFilterResolutionSourceFields
	* @description disables the source, entity and properties fileds for value help request 
	* */
	_disableFilterResolutionSourceFields : function() {
		this.byId("idFRSource").setEnabled(false);
		this.byId("idFREntity").setEnabled(false);
		this.byId("idFRSelectProperties").setEnabled(false);
		this._setValueHelpSourceAsFilterResolution();
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.facetFilter#_disableFilterResolutionSourceFields
	* @description reads the value of source , entity and select properties from the value help of facetfilter
	* and sets these values for respective filter resolution fields.
	* Also sets the model for all the fields of filter resolution request from value help request
	* */
	_setValueHelpSourceAsFilterResolution : function() {
		this._populateServiceForFilterResolution();
		this._populateEntityForFilterResolution();
		this._populateSelectPropertyForFilterResolution();
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.facetFilter#_populateServiceForFilterResolution
	* @description on change of value of service in value help, populates the value of service in filter resolution
	* */
	_populateServiceForFilterResolution : function() {
		this.byId("idFRSource").setModel(this.byId("idVHSource").getModel());
		this.byId("idFRSource").setValue(this.byId("idVHSource").getValue());
		this.facetFilter.setServiceOfFilterResolution(this.facetFilter.getServiceOfValueHelp());
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.facetFilter#_populateEntityForFilterResolution
	* @description on change of value of entity in value help, populates the value of entity in filter resolution
	* */
	_populateEntityForFilterResolution : function() {
		this.byId("idFREntity").setModel(this.byId("idVHEntity").getModel());
		this.byId("idFREntity").setSelectedKey(this.byId("idVHEntity").getSelectedKey());
		this.facetFilter.setEntitySetOfFilterResolution(this.facetFilter.getEntitySetOfValueHelp());
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.facetFilter#_populateSelectPropertyForFilterResolution
	* @description on change of value of select properties in value help, populates the value of select properties in filter resolution
	* */
	_populateSelectPropertyForFilterResolution : function() {
		var self = this;
		this.byId("idFRSelectProperties").setModel(this.byId("idVHSelectProperties").getModel());
		this.byId("idFRSelectProperties").setSelectedKeys(this.byId("idVHSelectProperties").getSelectedKeys());
		var aOldSelProp = this.facetFilter.getSelectPropertiesOfFilterResolution();
		aOldSelProp.forEach(function(property) {
			self.facetFilter.removeSelectPropertyOfFilterResolution(property);
		});
		this.facetFilter.getSelectPropertiesOfValueHelp().forEach(function(property) {
			self.facetFilter.addSelectPropertyOfFilterResolution(property);
		});
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.facetFilter#_resetFilterResolutionFields
	* @description restes the value of source , entity and select properties for the filter resolution of facetfilter
	* */
	_resetFilterResolutionFields : function() {
		this._resetFilterResolutionService();
		this._resetFilterResolutionEntity();
		this._resetFilterResolutionSelectProperty();
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.facetFilter#_resetFilterResolutionService
	* @description restes the value of source for the filter resolution of facetfilter
	* */
	_resetFilterResolutionService : function() {
		this.byId("idFRSource").setValue("");
		this.facetFilter.setServiceOfFilterResolution("");
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.facetFilter#_resetFilterResolutionEntity
	* @description restes the value of entity for the filter resolution of facetfilter
	* */
	_resetFilterResolutionEntity : function() {
		this.byId("idFREntity").setSelectedKey();
		//set an empty model to the entity select control on the UI
		var oEmptyModelForEntityOnReset = new sap.ui.model.json.JSONModel().setData({
			NoData : []
		});
		this.byId("idFREntity").setModel(oEmptyModelForEntityOnReset);
		this.facetFilter.setEntitySetOfFilterResolution(undefined);
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.facetFilter#_resetFilterResolutionSelectProperty
	* @description restes the value of select properties for the filter resolution of facetfilter
	* */
	_resetFilterResolutionSelectProperty : function() {
		var self = this;
		this.byId("idFRSelectProperties").setSelectedKeys([]);
		//set an empty model to the select properties control on the UI
		var oEmptyModelForPropOnReset = new sap.ui.model.json.JSONModel().setData({
			NoData : []
		});
		this.byId("idFRSelectProperties").setModel(oEmptyModelForPropOnReset);
		var aSelectedKeys = this.byId("idFRSelectProperties").getSelectedKeys();
		this.byId("idFRSelectProperties").removeSelectedKeys(aSelectedKeys);
		var aOldSelProp = this.facetFilter.getSelectPropertiesOfFilterResolution();
		aOldSelProp.forEach(function(property) {
			self.facetFilter.removeSelectPropertyOfFilterResolution(property);
		});
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.facetFilter#_hideAndResetPreselectionFunction
	* @description restes the value of preselction function and also hides it from UI
	* */
	_hideAndResetPreselectionFunction : function() {
		this.byId("idVHfunction").setValue("");
		if (this.facetFilter.getPreselectionFunction()) {
			this.facetFilter.removePreselectionFunction();
		}
		this.byId("idVhFunctionLabel").setRequired(false);
		this.byId("idVhFunctionLabel").setVisible(false);
		this.byId("idVHfunction").setVisible(false);
		this.byId("idVHfunction").isMandatory = false;
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.facetFilter#_hideAndResetPreselectionDefault
	* @description restes the value of preselction default and also hides it from UI
	* */
	_hideAndResetPreselectionDefault : function() {
		this.byId("idVHDefaultValues").setValue("");
		if (this.facetFilter.getPreselectionDefaults()) {
			this.facetFilter.removePreselectionDefaults();
		}
		this.byId("idVhDefaultValuesLabel").setRequired(false);
		this.byId("idVhDefaultValuesLabel").setVisible(false);
		this.byId("idVHDefaultValues").setVisible(false);
		this.byId("idVHDefaultValues").isMandatory = false;
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.facetFilter#_showPreselectionFunction
	* @description shows preselction default and sets it to mandatory
	* */
	_showPreselectionFunction : function() {
		this.byId("idVhFunctionLabel").setRequired(true);
		this.byId("idVhFunctionLabel").setVisible(true);
		this.byId("idVHfunction").setVisible(true);
		this.byId("idVHfunction").isMandatory = true;
		//this.facetFilter.setAutomaticSelection(false);// Could be uncommented when the feature is implemented in runtime
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.facetFilter#_showPreselectionDefault
	* @description shows preselction default and sets it to mandatory
	* */
	_showPreselectionDefault : function() {
		this.byId("idVhDefaultValuesLabel").setVisible(true);
		this.byId("idVHDefaultValues").setVisible(true);
		if (this.facetFilter.isMultiSelection()) {
			this.byId("idVHDefaultValues").isMandatory = false;
			this.byId("idVhDefaultValuesLabel").setRequired(false);
		} else {
			this.byId("idVHDefaultValues").isMandatory = true;
			this.byId("idVhDefaultValuesLabel").setRequired(true);
		}
		//this.facetFilter.setAutomaticSelection(false);// Could be uncommented when the feature is implemented in runtime
	},
	/**
	 * 
	 * 
	 * 
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.facetFilter#_setSourceValidationState
	* @description set mandatory fields boolean for source
	* */
	_setSourceValidationState : function() {
		var sSource = this.byId("idVHSource").getValue().trim();
		var sFRSource = this.byId("idFRSource").getValue().trim();
		var bServiceRegistered;
		var bFRServiceRegistered;
		if (sSource !== "") {
			bServiceRegistered = this.oConfigurationEditor.registerService(sSource);
			if (bServiceRegistered) {
				this.byId("idVHEntity").isMandatory = true;
				this.byId("idVHSelectProperties").isMandatory = true;
			} else {
				this.byId("idVHEntity").isMandatory = false;
				this.byId("idVHSelectProperties").isMandatory = false;
			}
		} else {
			this.byId("idVHEntity").isMandatory = false;
			this.byId("idVHSelectProperties").isMandatory = false;
		}
		if (sFRSource) {
			bFRServiceRegistered = this.oConfigurationEditor.registerService(sSource);
			if (bFRServiceRegistered) {
				this.byId("idFREntity").isMandatory = true;
				this.byId("idFRSelectProperties").isMandatory = true;
			} else {
				this.byId("idFREntity").isMandatory = false;
				this.byId("idFRSelectProperties").isMandatory = false;
			}
		} else {
			this.byId("idFREntity").isMandatory = false;
			this.byId("idFRSelectProperties").isMandatory = false;
		}
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.facetFilter#_setMandatoryFieldss
	* @param {Array} fields - Array of form fields
	* @description Set mandatory fields on the instance level  
	 * */
	_setMandatoryFields : function(fields) {
		this.mandatoryFields = this.mandatoryFields || [];
		for( var i = 0; i < fields.length; i++) {
			fields[i].isMandatory = true;
			this.mandatoryFields.push(fields[i]);
		}
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.facetFilter#_getMandatoryFields
	* @param {Object} oEvent - Event instance of the form field 
	 * @description getter for mandatory fields
	* */
	_getMandatoryFields : function() {
		return this.mandatoryFields;
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.facetFilter#_setValidationState
	* @param {Object} oEvent - Event instance of the form field 
	 * @description Set validation state of sub view
	* */
	_setValidationState : function() {
		var mandatoryFields = this._getMandatoryFields();
		for( var i = 0; i < mandatoryFields.length; i++) {
			if (mandatoryFields[i].isMandatory === true) {
				if (typeof mandatoryFields[i].getSelectedKeys === "function") {
					this.isValidState = (mandatoryFields[i].getSelectedKeys().length >= 1) ? true : false;
				} else if (typeof mandatoryFields[i].getValue === "function") {
					this.isValidState = (mandatoryFields[i].getValue().trim() !== "") ? true : false;
				} else {
					this.isValidState = (mandatoryFields[i].getSelectedKey().length >= 1) ? true : false;
				}
				if (this.isValidState === false) {
					break;
				}
			}
		}
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.facetFilter#getValidationState
	* @description Getter for getting the current validation state of sub view
	* */
	getValidationState : function() {
		this._setSourceValidationState(); //Set mandatory state for source
		this._setValidationState(); //Set the validation state of view
		var isValidState = (this.isValidState !== undefined) ? this.isValidState : true;
		return isValidState;
	}
});

}; // end of sap/apf/modeler/ui/controller/facetFilter.controller.js
if ( !jQuery.sap.isDeclared('sap.apf.modeler.ui.controller.navigationTarget.controller') ) {
  jQuery.sap.declare('sap.apf.modeler.ui.controller.navigationTarget.controller');
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */

/**
* @class category
* @memberOf sap.apf.modeler.ui.controller
* @name category
* @description controller for view.category
*/
sap.ui.controller("sap.apf.modeler.ui.controller.navigationTarget", {
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.navigationTarget#onInit
	* @description Called on initialization of the view.
	* 			Sets the static texts for all controls in UI.
	* 			Adds style classes to all UI controls.
	* 			Prepares dependencies.
	*  			Sets dynamic text for input controls
	* */
	onInit : function() {
		this.getView().addStyleClass("sapUiSizeCompact");//For non touch devices- compact style class increases the information density on the screen by reducing control dimensions
		this.oViewData = this.getView().getViewData();
		this.oConfigurationHandler = this.oViewData.oConfigurationHandler;
		this.oConfigurationEditor = this.oViewData.oConfigurationEditor;
		this.oTextPool = this.oConfigurationHandler.getTextPool();
		this.getText = this.oViewData.getText;
		this.params = this.oViewData.oParams;
		this.createMessageObject = this.oViewData.createMessageObject;
		this.putMessage = this.oViewData.putMessage;
		this.updateTitleAndBreadCrumb = this.oViewData.updateTitleAndBreadCrumb;
		this.getAllAvailableSemanticObjects = this.oViewData.getAllAvailableSemanticObjects;
		this.getSemanticActions = this.oViewData.getSemanticActions;
		this.setNavigationTargetName = this.oViewData.setNavigationTargetName;
		var self = this;
		if (!this.oConfigurationEditor) {
			this.oConfigurationHandler.loadConfiguration(this.params.arguments.configId, function(configurationEditor) {
				self.oConfigurationEditor = configurationEditor;
			});
		}
		this._setDisplayText();
		this._prepareNavTargetTypeModel();
		//Set Mandatory Fields
		var mandatoryFields = [];
		mandatoryFields.push(this.byId("idSemanticObjectField"));
		mandatoryFields.push(this.byId("idActionField"));
		mandatoryFields.push(this.byId("idContextMapEntitySelect"));
		mandatoryFields.push(this.byId("idMappedPropertiesCombo"));
		this._setMandatoryFields(mandatoryFields);
		//API Callback return an array of semantic objects of with each object having an id and text
		this.getAllAvailableSemanticObjects(function(semanticObjects, messageObject) {
			if (messageObject === undefined) {
				self._populateSemanticObjectModel(semanticObjects);
				self.setDetailData();
				if (self.oNavTarget && (self.oNavTarget.getFilterMappingService() === undefined || self.oNavTarget.getFilterMappingService() === "")) { // if the filter mapping field is not available
					self._removeMandatoryFromContextMap(); //initially context mapping fields should not be mandatory 
				}
			} else {
				var oMessageObject = self.createMessageObject({
					code : "11504"
				});
				oMessageObject.setPrevious(messageObject);
				self.putMessage(oMessageObject);
			}
		});
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.navigationTarget#_populateSemanticObjectModel
	* @description Prepares the model for semantic object field and sets it
	* @param {Array} Array of semantic objects from getAllAvailableSemanticObjects API
	* */
	_populateSemanticObjectModel : function(aAllSemObj) {
		var aAllSemanticObjectsModel;
		var aAllSemanticObjects = [];
		aAllSemObj.forEach(function(oSemanticObject) {
			var oSemOb = {};
			oSemOb.semanticObjectKey = oSemanticObject.id;
			oSemOb.semanticObjectName = oSemanticObject.id;
			aAllSemanticObjects.push(oSemOb);
		});
		var oSemObjData = {
			aAllSemanticObjects : aAllSemanticObjects
		};
		aAllSemanticObjectsModel = new sap.ui.model.json.JSONModel();
		aAllSemanticObjectsModel.setSizeLimit(500);
		aAllSemanticObjectsModel.setData(oSemObjData);
		this.byId("idSemanticObjectField").setModel(aAllSemanticObjectsModel);
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.navigationTarget#_setDisplayText
	* @description Sets static texts in UI
	* */
	_setDisplayText : function() {
		this.byId("idNavigationTargetHeaderLabel").setTitle(this.getText("basicData"));
		this.byId("idSemanticObjectLabel").setText(this.getText("semanticObject"));
		this.byId("idSemanticObjectLabel").setRequired(true);
		this.byId("idActionLabel").setText(this.getText("action"));
		this.byId("idActionLabel").setRequired(true);
		this.byId("idDescriptionLabel").setText(this.getText("navigationTargetTitle"));
		this.byId("idNavigationTargetTypeHeaderLabel").setTitle(this.getText("navigationTargetType"));
		this.byId("idNavigationTargetTypeLabel").setText(this.getText("assignmentType"));
		this.byId("idAssignedStepsLabel").setText(this.getText("assignedSteps"));
		this.byId("idContextMapping").setTitle(this.getText("contextMapping"));
		this.byId("idContextMapSourceLabel").setText(this.getText("source"));
		this.byId("idContextMapEntityLabel").setText(this.getText("entity"));
		this.byId("idMappedPropertiesLabel").setText(this.getText("mappedProperties"));
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.navigationTarget#_prepareNavTargetTypeModel
	* @description Prepares and sets the model for navigation target types
	* */
	_prepareNavTargetTypeModel : function() {
		var aNavTargetTypeData = [ {
			typeKey : this.getText("globalNavTargets"),
			typeName : this.getText("globalNavTargets")
		}, {
			typeKey : this.getText("stepSpecific"),
			typeName : this.getText("stepSpecific")
		} ];
		var oNavTargetTypeModel = new sap.ui.model.json.JSONModel();
		var oNavTargetTypeData = {
			navTargetType : aNavTargetTypeData
		};
		oNavTargetTypeModel.setData(oNavTargetTypeData);
		this.byId("idNavigationTargetTypeField").setModel(oNavTargetTypeModel);
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.navigationTarget#_prepareAssignStepModel
	* @description Prepares and sets the model for assign steps
	* */
	_prepareAssignStepModel : function() {
		var aAssignedStepData = [];
		var oAssignStepModel = new sap.ui.model.json.JSONModel();
		var aSteps = this.oConfigurationEditor.getSteps();//Get all steps in the configuration
		for( var i = 0; i < aSteps.length; i++) {
			var oStepDetails = {};
			oStepDetails.stepKey = aSteps[i].getId();
			oStepDetails.stepName = this.oTextPool.get(aSteps[i].getTitleId()).TextElementDescription;
			aAssignedStepData.push(oStepDetails);
		}
		var oAssignedStepData = {
			allSteps : aAssignedStepData
		};
		oAssignStepModel.setData(oAssignedStepData);
		this.byId("idAssignedStepsCombo").setModel(oAssignStepModel);
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.navigationTarget#setDetailData
	* @description Sets dynamic texts for controls
	* */
	setDetailData : function() {
		var aSemanticObjects = this.byId("idSemanticObjectField").getModel().getData().aAllSemanticObjects;
		if (this.params && this.params.arguments && this.params.arguments.navTargetId) {
			this.oNavTarget = this.oConfigurationEditor.getNavigationTarget(this.params.arguments.navTargetId);
		}
		if (this.oNavTarget) {
			var sSemanticObjectKey;
			var sSemanticObject = this.oNavTarget.getSemanticObject();
			//Loop through semantic objects model to find if the existing navigation target's semantic object is present in the model
			for( var index = 0; index < aSemanticObjects.length; index++) {
				if (sSemanticObject === aSemanticObjects[index].semanticObjectKey) {
					sSemanticObjectKey = true;//If semantic object present in list, set as true
					break;
				}
			}
			this.byId("idSemanticObjectField").setValue(sSemanticObject);
			var semanticObjectInfo = {
				changeSemanticObject : false,
				semanticObjectInList : sSemanticObjectKey ? true : false
			//If semantic object part of the list then set true; else if semantic object is through user input set false
			};
			this._populateActions(sSemanticObject, semanticObjectInfo);
			var navTargetType = this.oNavTarget.isStepSpecific() ? this.getText("stepSpecific") : this.getText("globalNavTargets");
			if (navTargetType === this.getText("stepSpecific")) {
				this.byId("idAssignedStepsLabel").setVisible(true);
				this.byId("idAssignedStepsCombo").setVisible(true);
				this._prepareAssignStepModel();
				var aAssignedStepIds = this.oConfigurationEditor.getStepsAssignedToNavigationTarget(this.oNavTarget.getId());//Get all assigned steps to the navigation target and set them as selected
				this.byId("idAssignedStepsCombo").setSelectedKeys(aAssignedStepIds);
			}
			this.byId("idNavigationTargetTypeField").setSelectedKey(navTargetType);
			//Setting the value for data source for context mapping of a navigation target
			if (this.oNavTarget.getFilterMappingService && this.oNavTarget.getFilterMappingService() !== undefined && this.oNavTarget.getFilterMappingService().length !== 0) {
				this.byId("idContextMapSourceSelect").setValue(this.oNavTarget.getFilterMappingService());
				var sSource = this.oNavTarget.getFilterMappingService();
				var aAllEntitySets = [];
				var aAllEntitySetsForControll = [];
				aAllEntitySets = this.oConfigurationEditor.getAllEntitySetsOfService(sSource); // list of all the entities in the selected service root
				aAllEntitySets.forEach(function(entiset) {
					var oEntitySet = {};
					oEntitySet.entityKey = entiset;
					oEntitySet.entityName = entiset;
					aAllEntitySetsForControll.push(oEntitySet); // form the entity set for the control in set of name, key pair
				});
				var oDataForEntitySets = {
					Entity : aAllEntitySetsForControll
				};
				var oModelForEntitySet = new sap.ui.model.json.JSONModel();
				oModelForEntitySet.setSizeLimit(500);
				oModelForEntitySet.setData(oDataForEntitySets);
				this.byId("idContextMapEntitySelect").setModel(oModelForEntitySet);
				this._addMandatoryToContextMap(); // if the service is available , context mapping fields are mandatory
			} else {// if the service was not saved then reset the context mapping fields
				this._removeMandatoryFromContextMap(); // removes the mandatory tag 
				this._resetContextMappingFields();//resets the values from the context mapping properties and clears the selected keys in control
			}
			//Setting the value for entity sets for context mapping of a navigation target
			if (this.oNavTarget.getFilterMappingEntitySet && this.oNavTarget.getFilterMappingEntitySet() !== undefined && this.oNavTarget.getFilterMappingEntitySet().length !== 0) {
				this.byId("idContextMapEntitySelect").setSelectedKey(this.oNavTarget.getFilterMappingEntitySet());
				var sFilterMapServiceRoot = this.oNavTarget.getFilterMappingService(); // context mapping service
				var sFilterMapEntity = this.oNavTarget.getFilterMappingEntitySet(); // context mapping entity set
				var aFilterMapProperties = [], aPropertiesForFilterMapControl = [];
				if (sFilterMapServiceRoot && sFilterMapServiceRoot !== null && sFilterMapServiceRoot !== "") {
					aFilterMapProperties = this.oConfigurationEditor.getAllPropertiesOfEntitySet(sFilterMapServiceRoot, sFilterMapEntity); //list of all the properties for a given source and enity set
					aFilterMapProperties.forEach(function(property) {
						var oProp = {};
						oProp.propertyKey = property;
						oProp.propertyName = property;
						aPropertiesForFilterMapControl.push(oProp); // form the entity set for the control in set of name, key pair
					});
					var oDataForFilterMapProperties = {
						Properties : aPropertiesForFilterMapControl
					};
					var oModelForFilterMapSelProp = new sap.ui.model.json.JSONModel();
					oModelForFilterMapSelProp.setSizeLimit(500);
					oModelForFilterMapSelProp.setData(oDataForFilterMapProperties);
					this.byId("idMappedPropertiesCombo").setModel(oModelForFilterMapSelProp);
				}
			}
			//Setting the value for mapped property for context mapping of a navigation target
			if (this.oNavTarget.getFilterMappingTargetProperties && this.oNavTarget.getFilterMappingTargetProperties() !== undefined && this.oNavTarget.getFilterMappingTargetProperties().length !== 0) {
				this.byId("idMappedPropertiesCombo").setSelectedKeys(this.oNavTarget.getFilterMappingTargetProperties());
			}
		} else {
			var navigationTargetId = this.oConfigurationEditor.createNavigationTarget();
			this.oNavTarget = this.oConfigurationEditor.getNavigationTarget(navigationTargetId);
			//Adds the empty string key to the semantic object model in case of a new navigation target
			aSemanticObjects.splice(0, 0, {
				semanticObjectKey : "",
				semanticObjectName : ""
			});
			var oSemObjData = {
				aAllSemanticObjects : aSemanticObjects
			};
			this.byId("idSemanticObjectField").getModel().setData(oSemObjData);
			this.byId("idSemanticObjectField").setSelectedKey("");
			var oModelAction = new sap.ui.model.json.JSONModel();
			var oData = {
				aActions : [ {
					id : "",
					text : ""
				} ]
			};
			oModelAction.setData(oData);
			this.byId("idActionField").setModel(oModelAction);
			this.byId("idActionField").setSelectedKey("");
			var oActionInfo = {
				id : navigationTargetId,
				icon : "sap-icon://BusinessSuiteInAppSymbols/icon-where-used"
			};
			this.oViewData.updateSelectedNode(oActionInfo);
			this.oNavTarget.setGlobal();//Set the navigation target to global by default
			this.byId("idNavigationTargetTypeField").setSelectedKey(this.getText("globalNavTargets"));
		}
		this._addAutoCompleteFeatureOnInputs();
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.navigationTarget#handleChangeSemanticObjectValue
	* @description Handler for change event on Semantic Object drop down
	* */
	handleChangeSemanticObjectValue : function(oEvent) {
		var aSemanticObjects = this.byId("idSemanticObjectField").getModel().getData().aAllSemanticObjects;
		if (aSemanticObjects[0].semanticObjectKey === "") {
			aSemanticObjects.splice(0, 1);//Removes the empty string key from the semantic object model after a semantic object is set
			var oSemObjData = {
				aAllSemanticObjects : aSemanticObjects
			};
			this.byId("idSemanticObjectField").getModel().setData(oSemObjData);
		}
		var sSemanticObject = oEvent.getParameter("value");
		var sSemanticObjectKey = this.byId("idSemanticObjectField").getSelectedKey();
		var semanticObjectInfo = {
			changeSemanticObject : true,
			semanticObjectInList : sSemanticObject === sSemanticObjectKey ? true : false
		};
		if (sSemanticObject !== "" && sSemanticObject !== null) {
			this.oConfigurationEditor.setIsUnsaved();
			this.oNavTarget.setSemanticObject(sSemanticObject);
			this._populateActions(sSemanticObject, semanticObjectInfo);
		}
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.navigationTarget#_getActionText
	* @description Matches the selected Navigation target action with the model to find the description of the action
	* @returns {String} The description of the selected action is returned 
	* */
	_getActionText : function() {
		var sTitle;
		var aSemanticActions = this.byId("idActionField").getModel().getData().aActions;
		for( var i = 0; i < aSemanticActions.length; i++) {
			if (aSemanticActions[i].id === this.oNavTarget.getAction()) {
				sTitle = aSemanticActions[i].text;
				break;
			}
		}
		return sTitle;
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.navigationTarget#handleChangeofAction
	* @description Handler for change event on Actions drop down
	* */
	handleChangeofAction : function(oEvent) {
		var sTitle;
		var sAction = oEvent.getParameter("value");
		if (sAction !== "" && sAction !== null) {
			this.oNavTarget.setAction(sAction);
			sTitle = this._getActionText();
		}
		this.oConfigurationEditor.setIsUnsaved();
		if (sTitle === undefined) {//Handle user input of action
			sTitle = this.oNavTarget.getSemanticObject();//If action does not have description(user input case) use the semantic object for title and description
		}
		var oActionInfo = {
			name : sTitle,
			icon : this.oNavTarget.isGlobal() ? "sap-icon://BusinessSuiteInAppSymbols/icon-where-used" : "sap-icon://pushpin-off"
		};
		this.byId("idDescription").setValue(sTitle);
		var navTargetData = {
                key : this.oNavTarget.getId(),
                value : sTitle
            };
		this.setNavigationTargetName(navTargetData);//Set the updated description of the navigation target to the table		
		this.oViewData.updateSelectedNode(oActionInfo);
		sTitle = this.getText("navigationTarget") + ": " + sTitle;
		this.updateTitleAndBreadCrumb(sTitle);
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.navigationTarget#_updateDescriptionAndTitle
	* @param {Object} - {boolean} whether semantic object is part of the list of semantic objects or user input
	* 				  - {boolean} whether change triggered from handleChangeSemanticObjectValue or onInit of navigation target
	* 		 {String} - Title and bread crumb; Also set on description
	* @description Sets the title, bread crumb, description and updates tree node
	* */
	_updateDescriptionAndTitle : function(semanticObjectInfo, sTitle) {
		if (semanticObjectInfo.changeSemanticObject) { //If change is triggered from handleChangeSemanticObjectValue
			if (sTitle === undefined) {//Handle user input of semantic object and action
				sTitle = this.oNavTarget.getSemanticObject();//If action does not have description(user input case) use the semantic object for title and description
			}
			var oActionInfo = {
				name : sTitle,
				icon : this.oNavTarget.isGlobal() ? "sap-icon://BusinessSuiteInAppSymbols/icon-where-used" : "sap-icon://pushpin-off"
			};
			this.byId("idDescription").setValue(sTitle);
			this.oViewData.updateSelectedNode(oActionInfo);
			var navTargetData = {
                    key : this.oNavTarget.getId(),
                    value : sTitle
                };
            this.setNavigationTargetName(navTargetData);//Set the updated description of the navigation target to the table			
            sTitle = this.getText("navigationTarget") + ": " + sTitle;
			this.updateTitleAndBreadCrumb(sTitle);
		}
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.navigationTarget#_populateActions
	* @description Accepts a semantic object and populates the action drop down with the list of actions for the semantic object.
	* Also accepts a boolean changeSemanticObject to differentiate between the call from change of semantic object or at initial load for an existing navigation target.
	* If boolean is true, call is from handleChangeSemanticObjectValue
	* If boolean is false, the call is from on initial load so only certain details like description is updated.
	* Accepts boolean semanticObjectInList to check if the semantic object is part of the semantic object list or an user input. If the boolean is true it is part of the semantic object list else it is an user input
	* The title, bread crumb, tree node and description are updated with the description of the action if semantic object is part of the list else updated with the semantic object
	* @param {String} Semantic object; 
	* 		 {Object} - {boolean} whether semantic object is part of the list of semantic objects or user input
	* 				  - {boolean} whether change triggered from handleChangeSemanticObjectValue or onInit of navigation target
	* */
	_populateActions : function(semanticObject, semanticObjectInfo) {
		var self = this;
		var sTitle;
		if (semanticObjectInfo && semanticObjectInfo.semanticObjectInList) {//Semantic object present in the list of semantic objects
			var oPromise = this.getSemanticActions(semanticObject);//Promise based call to get the list of actions for the given semantic object
			oPromise.then(function(aSemanticActions) {//Once promise is done populate action model
				var oActionsData = {
					aActions : aSemanticActions.semanticActions
				};
				var oActionModel = new sap.ui.model.json.JSONModel();
				oActionModel.setData(oActionsData);
				self.byId("idActionField").setModel(oActionModel);
				if (self.oNavTarget.getAction() && semanticObjectInfo && semanticObjectInfo.changeSemanticObject === false) {//If change is triggered from on load of existing navigation target
					self.byId("idActionField").setValue(self.oNavTarget.getAction());
					var sText = self._getActionText() ? self._getActionText() : self.oNavTarget.getSemanticObject(); //If action is from list of actions, get action's description; If action is from user input use semantic object as description
					self.byId("idDescription").setValue(sText);
				} else if (oActionModel.getData().aActions.length > 0) {//If change is triggered from handleChangeSemanticObjectValue
					self.byId("idActionField").setSelectedKey(oActionModel.getData().aActions[0].id);//Set the first action on the list as selected by default
					self.oNavTarget.setAction(oActionModel.getData().aActions[0].id);
					sTitle = oActionModel.getData().aActions[0].text;
				}
				self._updateDescriptionAndTitle(semanticObjectInfo, sTitle);
			}, function(messageObject) {//If promise fails display a message
				var oMessageObject = self.createMessageObject({
					code : "11505"
				});
				oMessageObject.setPrevious(messageObject);
				self.putMessage(oMessageObject);
			});
		} else {//If the semantic object is an user input
			var oModelAction = new sap.ui.model.json.JSONModel();
			var oData = {
				aActions : []
			};
			oModelAction.setData(oData);//Set the action model as empty for user input of semantic object
			this.byId("idActionField").setModel(oModelAction);
			if (this.oNavTarget.getAction() && semanticObjectInfo && semanticObjectInfo.changeSemanticObject === false) { //If change is triggered from on load of existing navigation target and an action is available
				this.byId("idActionField").setValue(this.oNavTarget.getAction());
				var sText = self.oNavTarget.getSemanticObject();
				self.byId("idDescription").setValue(sText);//For user input semantic objects, set description as semantic object
			} else {
				this.byId("idActionField").setValue("");//If change is triggered from handleChangeSemanticObjectValue and action is not available
			}
			this._updateDescriptionAndTitle(semanticObjectInfo, sTitle);//For user input semantic objects, set title, bread crumb and description as semantic object
		}
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.navigationTarget#handleChangeOfNavigationTargetType
	* @description Handler for change event on Navigation target type select
	* */
	handleChangeOfNavigationTargetType : function() {
		this.oConfigurationEditor.setIsUnsaved();
		var oNavTargetIconInfo = {};
		var navTargetType = this.byId("idNavigationTargetTypeField").getSelectedKey();
		if (navTargetType === this.getText("stepSpecific")) {
			//Set the step specific label and control to visible
			this.byId("idAssignedStepsLabel").setVisible(true);
			this.byId("idAssignedStepsCombo").setVisible(true);
			this._prepareAssignStepModel();
			this.oNavTarget.setStepSpecific();
			oNavTargetIconInfo.name = this.byId("idDescription").getValue();
			oNavTargetIconInfo.icon = "sap-icon://pushpin-off";
		} else {
			//Hide the step specific label and control
			this.byId("idAssignedStepsLabel").setVisible(false);
			this.byId("idAssignedStepsCombo").setVisible(false);
			this.byId("idAssignedStepsCombo").setSelectedKeys([]);//Clear the selected keys
			this.oNavTarget.setGlobal();
			//Remove the steps assigned to the navigation target
			var assignedSteps = this.oConfigurationEditor.getStepsAssignedToNavigationTarget(this.oNavTarget.getId());
			for( var index = 0; index < assignedSteps.length; index++) {
				var oStep = this.oConfigurationEditor.getStep(assignedSteps[index]);
				oStep.removeNavigationTarget(this.oNavTarget.getId());
			}
			oNavTargetIconInfo.name = this.byId("idDescription").getValue();
			oNavTargetIconInfo.icon = "sap-icon://BusinessSuiteInAppSymbols/icon-where-used";
		}
		this.oViewData.updateSelectedNode(oNavTargetIconInfo);
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.navigationTarget#handleChangeForAssignedSteps
	* @description Handler for change event on Assigned Steps
	* */
	handleChangeForAssignedSteps : function() {
		var self = this;
		this.oConfigurationEditor.setIsUnsaved();
		var assignedSteps = this.byId("idAssignedStepsCombo").getSelectedKeys();
		var previousAssignedSteps = this.oConfigurationEditor.getStepsAssignedToNavigationTarget(this.oNavTarget.getId());
		previousAssignedSteps.forEach(function(sStepId) { //Remove the navigation target from all the old steps it was assigned to and are unselected now
			if (assignedSteps.indexOf(sStepId) === -1) {
				var oStep = self.oConfigurationEditor.getStep(sStepId);
				oStep.removeNavigationTarget(self.oNavTarget.getId());
			}
		});
		assignedSteps.forEach(function(sStepId) {
			if (previousAssignedSteps.indexOf(sStepId) === -1) { //Add the navigation target to the steps it was assigned to
				var oStep = self.oConfigurationEditor.getStep(sStepId);
				oStep.addNavigationTarget(self.oNavTarget.getId());
			}
		});
	},
	/**
	 * @function
	 * @name sap.apf.modeler.ui.controller.navigationTarget# handleChangeForService
	 * @description handler for the "service" property of the context mapping based on the event
	 * sets the value for context mapping service
	 * Also , retrieves all the entities from the given source for context mapping. 
	 * Checks if all the properties (entity, properties etc ) are valid for a given service and empties these properties if the service is invalid.
	 * */
	handleChangeForService : function() {
		this.oConfigurationEditor.setIsUnsaved();
		var aAllEntitySets, aAllEntitySetsForControl = [], aSelectPropertiesForControl = [];
		var sSource = this.byId("idContextMapSourceSelect").getValue().trim();
		var bServiceRegistered = this.oConfigurationEditor.registerService(sSource); // check if the service is registered, if not registers the service
		if (bServiceRegistered) { // for valid service , get the entity sets and properties 
			this._addMandatoryToContextMap();
			aAllEntitySets = this.oConfigurationEditor.getAllEntitySetsOfService(sSource); // list of all the entities for a given service
			if (aAllEntitySets.length > 0) {
				aAllEntitySets.forEach(function(entitySet) {
					var oEntitySet = {};
					oEntitySet.entityKey = entitySet;
					oEntitySet.entityName = entitySet;
					aAllEntitySetsForControl.push(oEntitySet); // form the entity set for the control in set of name, key pair
				});
			}
			var oEntitySetData = {
				Entity : aAllEntitySetsForControl
			};
			var oEntitySetModel = new sap.ui.model.json.JSONModel();
			oEntitySetModel.setSizeLimit(500);
			oEntitySetModel.setData(oEntitySetData);
			this.byId("idContextMapEntitySelect").setModel(oEntitySetModel);
			if (aAllEntitySets.length >= 1) { //set default entity set
				var aProperties = this.oConfigurationEditor.getAllPropertiesOfEntitySet(sSource, aAllEntitySets[0]); // if entity is not saved, select the first entity set and fetch the properties
				this.oNavTarget.setFilterMappingEntitySet(aAllEntitySets[0]);
				this.byId("idContextMapEntitySelect").setSelectedKey(aAllEntitySets[0]);
				aProperties.forEach(function(property) { // properties from the selected entity set (either saved one or the first one in the list)
					var oProp = {};
					oProp.propertyKey = property;
					oProp.propertyName = property;
					aSelectPropertiesForControl.push(oProp);// form the properties  for the control in set of name, key pair
				});
			}
			var oSelectPropertiesData = {
				Properties : aSelectPropertiesForControl
			};
			var oSelectPropertiesModel = new sap.ui.model.json.JSONModel();
			oSelectPropertiesModel.setSizeLimit(500);
			oSelectPropertiesModel.setData(oSelectPropertiesData);
			this.byId("idMappedPropertiesCombo").setModel(oSelectPropertiesModel);
			this._validateAndSetDataForContextMapping(); // validate if all the mandatory fields for context mapping is filled, if yes ; set it on navigation target
		} else { // for invalid service , reset the entity sets and properties , empty the controls
			this._resetContextMappingFields(); //reset the context mapping fields , i.e. clear entity sets and mapped properties
			this._removeMandatoryFromContextMap();
		}
	},
	/**
	 * @function
	 * @name sap.apf.modeler.ui.controller.navigationTarget# handleChangeForEntity
	 * @description handler for the "entity" property of the context mapping based on the event
	 * sets the value for context mapping entity
	 * Reads all the properties for the given source and entity and updates the mapped properties based on entity.
	 * */
	handleChangeForEntity : function() {
		this.oConfigurationEditor.setIsUnsaved();
		var aPropertiesForControl = [];
		var sEntity = this.byId("idContextMapEntitySelect").getSelectedKey();
		var sService = this.byId("idContextMapSourceSelect").getValue().trim();
		var aProperties = this.oConfigurationEditor.getAllPropertiesOfEntitySet(sService, sEntity); // list of properties for a given source and entity set
		aProperties.forEach(function(property) {
			var oProp = {};
			oProp.propertyKey = property;
			oProp.propertyName = property;
			aPropertiesForControl.push(oProp); // form the properties  for the control in set of name, key pair
		});
		var oSelectPropertiesData = {
			Properties : aPropertiesForControl
		};
		var oSelectPropertyModel = new sap.ui.model.json.JSONModel();
		oSelectPropertyModel.setSizeLimit(500);
		oSelectPropertyModel.setData(oSelectPropertiesData);
		this.byId("idMappedPropertiesCombo").setModel(oSelectPropertyModel);
		var aMappedProperties = this.oNavTarget.getFilterMappingTargetProperties();
		var aCommonPropertiesInEntity = [];
		aProperties.forEach(function(propertyFromEntity) {
			aMappedProperties.forEach(function(previousMappedProperty) {
				if (previousMappedProperty === propertyFromEntity) {
					aCommonPropertiesInEntity.push(previousMappedProperty); // get all the common properties in the current and previous entity
				}
			});
		});
		this.byId("idMappedPropertiesCombo").setSelectedKeys(aCommonPropertiesInEntity); // select the common properties in case of entity change
		this._validateAndSetDataForContextMapping();// validate if all the mandatory fields for context mapping is filled, if yes ; set it on navigation target
	},
	/**
	 * @function
	 * @name sap.apf.modeler.ui.controller.navigationTarget# handleChangeForMappedProperties
	 * @description handler for the "mapped properties" of the context mapping based on the event
	 * sets the value for context mapping, mapped properties 
	 * */
	handleChangeForMappedProperties : function() {
		this.oConfigurationEditor.setIsUnsaved();
		var aSelectProperty = this.byId("idMappedPropertiesCombo").getSelectedKeys();
		if (aSelectProperty.length !== 0) { // at least one property is selceted
			this._validateAndSetDataForContextMapping();// validate if all the mandatory fields for context mapping is filled, if yes ; set it on navigation target
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.navigationTarget#_getMandatoryFields
	 * @param {Object} oEvent - Event instance of the form field 
	 * @description getter for mandatory fields
	 * */
	_getMandatoryFields : function() {
		return this.mandatoryFields;
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.navigationTarget#_setMandatoryFields
	 * @param {Array} fields - Array of form fields
	 * @description Set mandatory fields on the instance level  
	 * */
	_setMandatoryFields : function(fields) {
		this.mandatoryFields = this.mandatoryFields || [];
		for( var i = 0; i < fields.length; i++) {
			fields[i].isMandatory = true;
			this.mandatoryFields.push(fields[i]);
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.navigationTarget#_setValidationState
	 * @param {Object} oEvent - Event instance of the form field 
	 * @description Set validation state of sub view
	 * */
	_setValidationState : function() {
		var mandatoryFields = this._getMandatoryFields();
		if (mandatoryFields.length !== 0) {
			for( var i = 0; i < mandatoryFields.length; i++) {
				if (mandatoryFields[i].isMandatory === true) {
					if (typeof mandatoryFields[i].getSelectedKeys === "function") {
						this.isValidState = (mandatoryFields[i].getSelectedKeys().length >= 1) ? true : false;
					} else if (typeof mandatoryFields[i].getValue === "function") {
						this.isValidState = (mandatoryFields[i].getValue().trim() !== "") ? true : false;
					} else {
						this.isValidState = (mandatoryFields[i].getSelectedKey() !== "" && mandatoryFields[i].getSelectedKey() !== undefined) ? true : false;
					}
					if (this.isValidState === false) {
						break;
					}
				}
			}
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.navigationTarget#getValidationState
	 * @description Getter for getting the current validation state of sub view
	 * */
	getValidationState : function() {
		this._setValidationState(); //Set the validation state of view
		var isValidState = (this.isValidState !== undefined) ? this.isValidState : true;
		return isValidState;
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.navigationTarget#_validateAndSetDataForContextMapping
	 * @param {navigationTarget}  - navigation target object 
	 * @description checks if the context mapping of the navigation target has all mandatory fields( i.e. entitySet, service, mapped properties)  
	 * and sets the values on the navigation target object
	 * */
	_validateAndSetDataForContextMapping : function() {
		var self = this;
		var sSource = this.byId("idContextMapSourceSelect").getValue().trim();
		var aSelectedEntity = this.byId("idContextMapEntitySelect").getSelectedKey();
		var aMappedProperty = this.byId("idMappedPropertiesCombo").getSelectedKeys();
		if ((sSource !== "" || sSource !== undefined) && (aSelectedEntity !== "" || aSelectedEntity !== undefined) && (aMappedProperty.length !== 0)) {
			this.oNavTarget.setFilterMappingService(sSource); // set the context mapping service
			this.oNavTarget.setFilterMappingEntitySet(aSelectedEntity);// set the context mapping entity set
			var aOldFilterMapSelProp = this.oNavTarget.getFilterMappingTargetProperties();
			aOldFilterMapSelProp.forEach(function(property) {
				self.oNavTarget.removeFilterMappingTargetProperty(property); // remove the old properties 
			});
			aMappedProperty.forEach(function(property) {
				self.oNavTarget.addFilterMappingTargetProperty(property); // add the selected properties 
			});
		}
	},
	/**
	 * @function
	 * @private 
	 * @name sap.apf.modeler.ui.controller.navigationTarget# _addMandatoryToContextMap
	 * @description add the mandatory tags to all the fields in the context mapping if the service is valid
	 * */
	_addMandatoryToContextMap : function() {
		this.byId("idContextMapEntitySelect").isMandatory = true; // make the entity set and mapped property mandatory
		this.byId("idMappedPropertiesCombo").isMandatory = true;
		this.byId("idContextMapEntityLabel").setRequired(true);
		this.byId("idMappedPropertiesLabel").setRequired(true);
	},
	/**
	 * @function
	 * @private 
	 * @name sap.apf.modeler.ui.controller.navigationTarget# _removeMandatoryFromContextMap
	 * @description removes the mandatory tags to all the fields in the context mapping if the service is invalid
	 * */
	_removeMandatoryFromContextMap : function() {
		this.byId("idContextMapEntitySelect").isMandatory = false; // set the manadatory tag to false for entity and mapped properties
		this.byId("idMappedPropertiesCombo").isMandatory = false;
		this.byId("idContextMapEntityLabel").setRequired(false);
		this.byId("idMappedPropertiesLabel").setRequired(false);
	},
	/**
	 * @function
	 * @private 
	 * @name sap.apf.modeler.ui.controller.navigationTarget# _resetContextMappingFields
	 * Resets all the values for the filter mapping properties (service, entitySet, mapped properties)
	 * and clears all the data and selected values from the controls
	 * */
	_resetContextMappingFields : function() {
		var self = this;
		this.oNavTarget.setFilterMappingService("");
		this.oNavTarget.setFilterMappingEntitySet(undefined);
		var aOldFilterMapSelectProperty = this.oNavTarget.getFilterMappingTargetProperties();
		aOldFilterMapSelectProperty.forEach(function(property) {
			self.oNavTarget.removeFilterMappingTargetProperty(property);
		});
		//set an empty model to the controls on the UI
		var oEmptyModelForControlOnReset = new sap.ui.model.json.JSONModel();
		var oEmptyDateSetForControlOnReset = {
			NoData : []
		};
		oEmptyModelForControlOnReset.setData(oEmptyDateSetForControlOnReset);
		this.byId("idContextMapSourceSelect").setValue("");
		this.byId("idContextMapEntitySelect").setModel(oEmptyModelForControlOnReset);
		this.byId("idContextMapEntitySelect").setSelectedKey();
		this.byId("idMappedPropertiesCombo").setModel(oEmptyModelForControlOnReset);
		var aSelectedKeys = this.byId("idMappedPropertiesCombo").getSelectedKeys();
		this.byId("idMappedPropertiesCombo").removeSelectedKeys(aSelectedKeys);
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.navigationTarget#_addAutoCompleteFeatureOnInputs
	 * @description Adds 'Auto Complete Feature' to the input fields in the view
	 * using sap.apf.modeler.ui.utils.TextPoolHelper.
	 * */
	_addAutoCompleteFeatureOnInputs : function() {
		if (this.oConfigurationHandler) {
			var oTextPoolHelper = new sap.apf.modeler.ui.utils.TextPoolHelper(this.oTextPool);
			//autocomplete for source
			var oDependenciesForService = {
				oConfigurationEditor : this.oConfigurationEditor,
				type : "service"
			};
			var oSource = this.byId("idContextMapSourceSelect");
			oTextPoolHelper.setAutoCompleteOn(oSource, oDependenciesForService);
		}
	}
});
}; // end of sap/apf/modeler/ui/controller/navigationTarget.controller.js
if ( !jQuery.sap.isDeclared('sap.apf.modeler.ui.controller.previewContent.controller') ) {
  jQuery.sap.declare('sap.apf.modeler.ui.controller.previewContent.controller');
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
sap.ui.getCore().loadLibrary("sap.viz");




/**
* @class previewContent
* @memberOf sap.apf.modeler.ui.controller
* @name previewContent
* @description controller for view.previewContent
*/
sap.ui.controller("sap.apf.modeler.ui.controller.previewContent", {
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.previewContent#onInit
	 * @description Called on initialization of the view.
	 * 		Accepts parameters through view#getViewData in the following format :
	 * {	 
			sChartType - {sap.apf.ui.utils.CONSTANTS.representationTypes}  eg : "PieChart",
			sStepTitle - {string} Title of the step eg: "DSO by Country over Time",
			sStepLongTitle - {string} Long Title of the step eg: "DSO by Country over Time"
			aDimensions - {string[]} Field Names of All dimensions from select properties eg : [ "Country", "YearMonth" ],
			aMeasures - {string[]} Field Names of All measures from select properties eg: [ "DSO", "OverdueDSO", "Revenue" ],
			oChartParameter : { // chart parameter similar to the one passed to runtime representations.
				dimensions : [ {
					fieldDesc - {string} Name to be displayed eg: "Country of Customer",
					fieldName - {string} Property Name  eg: "Country",
					kind - {sap.apf.core.constants.representationMetadata.kind} eg: "sectorColor"
				} ],
				measures : [ {
					name - {string} Name to be displayed eg: "Day Sales Outstanding",
					value - {string} Property Name  eg: "DSO",
					kind - {sap.apf.core.constants.representationMetadata.kind} eg: "yAxis"
				} ]
			},
			aSort : [
				{	// sort object similar to the one passed to runtime representations.
					sSortField - {string} Property Name eg: "DSO",
					bDescending - {boolean} eg: true
				}
			],
			aCornerTexts : {	// corner text values.
				sLeftUpper - {string} eg: "DSO",
				sRightUpper - {string} eg: "",
				sLeftLower - {string} eg: "",
				sRightLower - {string} eg: "COUNTRY"
			}
	 *	}
	 *
	 *  Reads data from view#getViewData.
	 *  Prepares dummy data for charts.
	 *  Draw main chart and thumb nail preview.		
	 * */
	onInit : function() {
		// Views
		this.oView = this.getView();
		this.oView.addStyleClass("sapUiSizeCompact");//For non touch devices- compact style class increases the information density on the screen by reducing control dimensions
		this.oMainChartHolder = this.oView.byId("idMainChart");
		this.oThumbnailChartHolder = this.oView.byId("idThumbnailChartLayout");
		// Data
		this.mParam = this.oView.getViewData();
		// Actions
		this._prepareRepresentationInstance();
		this._drawContent();
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.previewContent#_drawContent
	 * @description Draws main chart and thumb nail content.
	 * 				Adds necessary style classes to view.
	 * */
	_drawContent : function() {
		this._drawMainChart();
		this._drawThumbnailContent();
		this._addStyleClasses();
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.previewContent#_drawMainChart
	 * @description Gets the mainContent of representation instance and draws it on mainChartHolder.
	 * */
	_drawMainChart : function() {
		var oMainChart = this.oRepresentationInstance.getMainContent(this.mParam.sStepLongTitle, 480, 330);
		this.oMainChartHolder.addItem(oMainChart);
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.previewContent#_drawThumbnailContent
	 * @description Draws thumb nail chart.
	 * 				Set Title to thumb nail content.
	 * 				Draws corner texts.
	 * */
	_drawThumbnailContent : function() {
		this._drawThumbnailChart();
		this.oView.byId("idStepTitleText").setText(this.mParam.sStepTitle);
		this._drawCornerTexts();
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.previewContent#_drawThumbnailChart
	 * @description Gets the thumbnailContent of representation instance and draws it on oThumbnailChartHolder.
	 * */
	_drawThumbnailChart : function() {
		var oThumbnailChart = this.oRepresentationInstance.getThumbnailContent();
		this.oThumbnailChartHolder.addItem(oThumbnailChart);
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.previewContent#_drawCornerTexts
	 * @description Draws corner texts on four place holders.
	 * */
	_drawCornerTexts : function() {
		this.oView.byId("idLeftUpperCornerText").setText(this.mParam.aCornerTexts.sLeftUpper);
		this.oView.byId("idRightUpperCornerText").setText(this.mParam.aCornerTexts.sRightUpper);
		this.oView.byId("idLeftLowerCornerText").setText(this.mParam.aCornerTexts.sLeftLower);
		this.oView.byId("idRightLowerCornerText").setText(this.mParam.aCornerTexts.sRightLower);
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.previewContent#_addStyleClasses
	 * @description Adds style classes to various view controls.
	 * */
	_addStyleClasses : function() {
		this.oView.byId("idChartHolder").addStyleClass("supressDialogPadding");
		this.oView.byId("idMainChart").addStyleClass("previewMainChartHolder");
		this.oView.byId("idThumbnail").addStyleClass("previewThumbnailHolder");
		this.oView.byId("idThumbnailLayout").addStyleClass("previewThumbnailLayout");
		this.oView.byId("idThumbnailChartLayout").addStyleClass("previewThumbnailChartLayout");
		this.oView.byId("idTopLayout").addStyleClass("previewThumbnailTopLayout");
		this.oView.byId("idBottomLayout").addStyleClass("previewThumbnailBottomLayout");
		this.oView.byId("idLeftUpperCornerText").addStyleClass("previewThumbnailText");
		this.oView.byId("idRightUpperCornerText").addStyleClass("previewThumbnailText");
		this.oView.byId("idLeftLowerCornerText").addStyleClass("previewThumbnailText");
		this.oView.byId("idRightLowerCornerText").addStyleClass("previewThumbnailText");
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.previewContent#_generateSampleData
	 * @description Generates dynamic data based on the dimensions and measures.
	 * 				Sorts the data if sort object is provided.
	 * 				Data grows exponentially based on the number of dimensions available.
	 * 				Each dimension will have (nSamplesPerDimension) data with random values for measures.
	 * @returns {object[]} aSampleData
	 * */
	_generateSampleData : function() {
		var aSampleData = [];
		var nSamplesPerDimension = 3; // Change this value to control the amount of data.
		var i = 0;
		var aDimensions = this.mParam.aDimensions;
		var aMeasures = this.mParam.aMeasures;
		var aSelectedDimensions = this.mParam.oChartParameter.dimensions;
		var aSelectedMeasures = this.mParam.oChartParameter.measures;
		/**
		 * Function to add 'FieldDesc' fields to sample data with the same value as 'FieldName'.
		 * */
		var fnInsertValueToFieldDesc = function(aSelectedFields, sFieldName, sValue, oRow) {
			var aCurrentSelectedFields = aSelectedFields.filter(function(oSelectedField) {
				return oSelectedField.fieldName === sFieldName;
			});
			aCurrentSelectedFields.forEach(function(oCurrentSelectedField) {
				if (!oCurrentSelectedField.fieldDesc || !oCurrentSelectedField.fieldDesc.length) {
					oCurrentSelectedField.fieldDesc = oCurrentSelectedField.fieldName;
				}
				oRow[oCurrentSelectedField.fieldDesc] = sValue;
			});
		};
		var len = Math.pow(nSamplesPerDimension, this.mParam.aDimensions.length);
		for(i = 0; i < len; i++) {
			var oRow = {};
			aDimensions.forEach(function(sDimension, nIndex) {
				var sDimensionValue = sDimension + " - " + (Math.floor(i / Math.pow(nSamplesPerDimension, nIndex)) % nSamplesPerDimension + 1);
				oRow[sDimension] = sDimensionValue;
				fnInsertValueToFieldDesc(aSelectedDimensions, sDimension, sDimensionValue, oRow);
			});
			aMeasures.forEach(function(sMeasure) {
				var sMeasureValue = Math.round(Math.random() * 500);
				oRow[sMeasure] = sMeasureValue;
				fnInsertValueToFieldDesc(aSelectedMeasures, sMeasure, sMeasureValue, oRow);
			});
			aSampleData.push(oRow);
		}
		if (this.mParam.aSort && this.mParam.aSort.length) {
			aSampleData = this._sortData(aSampleData, this.mParam.aSort);
		}
		return aSampleData;
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.previewContent#_sortData
	 * @param {object[]} aData - Source data to be sorted.
	 * @param {array} aProperteis - Array of properties by which the data has to be sorted of the form: 
	 * 		[
	 * 			{
	 * 				sProperty - {string}	Name of the property.
	 * 				bDescending - {boolean} Boolean to indicate the order.
	 * 			}
	 * 		]
	 * @description Uses the Array#sort method to sort data.
	 * @returns {object[]} Sorted Data.
	 * */
	_sortData : function(aData, aProperties) {
		return aData.sort(function(oRow1, oRow2) {
			var nResult, i;
			for(i = 0; i < aProperties.length; i++) {
				nResult = 0;
				if (oRow1[aProperties[i].sSortField] < oRow2[aProperties[i].sSortField]) {
					nResult = -1;
				} else if (oRow1[aProperties[i].sSortField] > oRow2[aProperties[i].sSortField]) {
					nResult = 1;
				}
				nResult = nResult * [ 1, -1 ][+!!aProperties[i].bDescending];
				if (nResult !== 0) {
					return nResult;
				}
			}
		});
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.previewContent#_getRepresentationConstructor
	 * @description Returns representation constructor given representation id.
	 * @returns {string} sConstructor - Constructor name space of the representation.
	 * */
	_getRepresentationConstructor : function(sChartName) {
		var aRepresentationTypes = sap.apf.core.representationTypes();
		var oRepresentationType = aRepresentationTypes.filter(function(oRepresentationType) {
			return oRepresentationType.id === sChartName;
		})[0];
		var sConstructor = oRepresentationType.constructor;
		return sConstructor;
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.previewContent#_prepareRepresentationInstance
	 * @description Prepares the representationInstance from the constructor and host it on 'this.oRepresentationInstance'.
	 * 				Invokes 'setData' on the instance by passing sample data and dummy meta data.
	 * */
	_prepareRepresentationInstance : function() {
		var sRepresentationConstructor = this._getRepresentationConstructor(this.mParam.sChartType);
		jQuery.sap.require(sRepresentationConstructor);
		var FnRepresentationConstructor = sap.apf.utils.extractFunctionFromModulePathString(sRepresentationConstructor);
		var oApiStub = {
			getTextNotHtmlEncoded : function(sText) {
				return sText;
			},
			getTextHtmlEncoded : function(sText) {
				return sText;
			},
			getEventCallback : function() {
				return;
			}
		};
		this.oRepresentationInstance = new FnRepresentationConstructor(oApiStub, this.mParam.oChartParameter);
		var oMetadataStub = {
			getPropertyMetadata : function() {
				return {};
			}
		};
		var aSampleData = this._generateSampleData();
		this.oRepresentationInstance.setData(aSampleData, oMetadataStub);
	}
});
}; // end of sap/apf/modeler/ui/controller/previewContent.controller.js
if ( !jQuery.sap.isDeclared('sap.apf.modeler.ui.controller.representation.controller') ) {
  jQuery.sap.declare('sap.apf.modeler.ui.controller.representation.controller');
/*!
* SAP APF Analysis Path Framework
*
* (c) Copyright 2012-2014 SAP SE. All rights reserved
*/



/**
* @class representation
* @memberOf sap.apf.modeler.ui.controller
* @name representation
* @description controller for view.representation
*/
sap.ui.controller("sap.apf.modeler.ui.controller.representation", {
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#onInit
	* @description Called on initialization of the view.
	* Sets the static texts for all controls in UI.
	* Sets the scroll height for the container.
	* Adds style classes to all UI controls.
	* Prepares dependencies.
	* Sets dynamic text for input controls
	* Set a preview button in footer 
	* */
	onInit : function() {
		// Data
		this.getView().addStyleClass("sapUiSizeCompact");//For non touch devices- compact style class increases the information density on the screen by reducing control dimensions
		this.oViewData = this.getView().getViewData();
		this.oConfigurationHandler = this.oViewData.oConfigurationHandler;
		this.oConfigurationEditor = this.oViewData.oConfigurationEditor;
		this.oTextPool = this.oConfigurationHandler.getTextPool();
		this.getText = this.oViewData.getText;
		this.getEntityTypeMetadata = this.oViewData.getEntityTypeMetadata;
		this.getRepresentationTypes = this.oViewData.getRepresentationTypes;
		this.mParam = this.oViewData.oParams;
		var self = this;
		if (!this.oConfigurationEditor) {
			this.oConfigurationHandler.loadConfiguration(this.mParam.arguments.configId, function(configurationEditor) {
				self.oConfigurationEditor = configurationEditor;
			});
		}
		this._addConfigStyleClass();
		this._setDisplayText();
		this.setDetailData();
		// Insert Preview Button into the Footer.
		this._oPreviewButton = new sap.m.Button({
			text : this.getText("preview"),
			press : self._handlePreviewButtonPress.bind(this)
		// the current context should be bound to the event handler
		});
		this._insertPreviewButtonInFooter();
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_addConfigStyleClass
	* @description Adds style classes to the UI controls.
	* */
	_addConfigStyleClass : function() {
		this.byId("idBasicDataLayout").addStyleClass("basicLayoutData");
		this.byId("idChartTypeLabel").addStyleClass("chartTypeLabel");
		this.byId("idSortLayout").addStyleClass("sortLayoutData");
		this.byId("idChartIcon").addStyleClass("repChartIcon");
		this.byId("idRightUpper").addStyleClass("repRightCornerText");
		this.byId("idRightLower").addStyleClass("repRightCornerText");
		this.byId("idLeftUpper").addStyleClass("repLeftCornerText");
		this.byId("idLeftLower").addStyleClass("repLeftCornerText");
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_setDisplayText
	* @description Sets static texts in UI and place holders.
	* */
	_setDisplayText : function() {
		this.byId("idVisualization").setTitle(this.getText("visualization"));
		this.byId("idChartTypeLabel").setText(this.getText("chartType"));
		this.byId("idBasicData").setTitle(this.getText("basicData"));
		this.byId("idSorting").setTitle(this.getText("sorting"));
		this.byId("idThumbnailTexts").setTitle(this.getText("cornerTextLabel"));
		this.byId("idLeftUpper").setPlaceholder(this.getText("leftTop"));
		this.byId("idRightUpper").setPlaceholder(this.getText("rightTop"));
		this.byId("idLeftLower").setPlaceholder(this.getText("leftBottom"));
		this.byId("idRightLower").setPlaceholder(this.getText("rightBottom"));
	},
	/**
	 * @private
	 * @description Handler for change event on chartTypes drop down.
	 * 				Updates the property drop downs according to the new chart type.
	 * 				Updates the representation object with corresponding data.
	 * 				Updates the tree node with selected representation type.
	 * 				Updates the title and bread crumb. 
	 * @name sap.apf.modeler.ui.controller.representation#handleChangeForChartType
	 * @param {oEvent} oEvt - Selection Event
	 **/
	handleChangeForChartType : function(oEvt) {
		var sNewChartType = oEvt.getParameter("selectedItem").getKey();
		var sPrevChart = this.sCurrentChartType;//getting prevChart type
		this.sCurrentChartType = sNewChartType;
		this._updateAndSetDatasetsByChartType(sNewChartType);
		var aRepresentationTypes = sap.apf.ui.utils.CONSTANTS.representationTypes;
		var aBarClassChart = aRepresentationTypes.BAR_CHART;
		var aColumnClassCharts = [ aRepresentationTypes.COLUMN_CHART, aRepresentationTypes.STACKED_COLUMN_CHART, 
		                           aRepresentationTypes.PERCENTAGE_STACKED_COLUMN_CHART, aRepresentationTypes.LINE_CHART ];
		var bIsBarClassType = (aBarClassChart === sNewChartType);
		this.bIsBarClassType = bIsBarClassType;
		// Checking selected chart belongs to ColumnClass,Line Chart
		var bIsColumnClassType = aColumnClassCharts.indexOf(sNewChartType) !== -1;
		//Checking selected chart belongs to same ChartClass
		var bIsColumnClassSameType = (aColumnClassCharts.indexOf(sNewChartType) !== -1 && 
		        aColumnClassCharts.indexOf(sPrevChart) !== -1);
		if (bIsBarClassType || (bIsColumnClassType && !bIsColumnClassSameType)) {
			this._switchLabelForCharts();//Switches the text for "BarClassCharts","ColumnClassCharts" & LineChart
		}
		this.oRepresentation.setRepresentationType(sNewChartType);
		var sAlternateRepresentation;
		if (sNewChartType !== sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION) {
			sAlternateRepresentation = sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION;
		}
		var sSelectedChartIcon = this._getChartPictureDataset().sSelectedChartPicture;
		this.oRepresentation.setAlternateRepresentationType(sAlternateRepresentation);
		// Update Tree Node
		var sRepresentationTypeText = this.getText(this.oRepresentation.getRepresentationType());
		var aStepCategories = this.oConfigurationEditor.getCategoriesForStep(this.oParentStep.getId());
		if (aStepCategories.length === 1) {//In case the step of representation is only assigned to one category
			this.oViewData.updateSelectedNode({
				name : sRepresentationTypeText,
				icon : sSelectedChartIcon
			});
		} else {
			this.oViewData.updateTree();
		}
		var sTitle = this.getText("representation") + ": " + sRepresentationTypeText;
		this.oViewData.updateTitleAndBreadCrumb(sTitle);
		this.oConfigurationEditor.setIsUnsaved();
	},
	/**
	    * @private
	    * @function
	    * @name sap.apf.modeler.ui.controller.representation#_switchLabelForCharts
	    * @description Get all property rows in basic data layout & reads aggregation role & kind                        
	    * */
	_switchLabelForCharts : function() {
		var oSelf = this;
		var oBasicDataLayout = this.byId("idBasicDataLayout").getItems();
		var sAggRole, sKind;
		oBasicDataLayout.forEach(function(dataLayout) {
			//Getting Aggregation role for each property row
			sAggRole = dataLayout.getContent()[0].getBindingContext().getProperty("sAggregationRole");
			//Getting kind for each property row
			sKind = dataLayout.getContent()[0].getBindingContext().getProperty("sKind");
			if (sAggRole && sKind) {
				var sText = oSelf._createDimMeasForCharts(sAggRole, sKind);
				dataLayout.getContent()[0].setText(sText);//setting newly created text for property row label
			}
		});
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_createDimMeasForCharts
	* @return sText :Text for label
	* @description Creates text for property row labels(Dimension&Measure)in respect of chart type
	* 
	* */
	_createDimMeasForCharts : function(sAggRole, sKind) {
		var sHorizontal = sap.apf.core.constants.representationMetadata.kind.XAXIS;
		var sVertical = sap.apf.core.constants.representationMetadata.kind.YAXIS;
		//if chart is bar and Aggregation role is 'dimension' & sKind is 'Horizontal' set sKind = 'Vertical'
		if (sAggRole === "dimension" && sKind === sHorizontal) {
			sKind = sHorizontal;
			if (this.bIsBarClassType) {
				sKind = sVertical;
			}
		}//if chart is bar and Aggregation role is 'measure' set sKind = 'Horizontal' 
		else if (sAggRole === "measure") {
			sKind = sVertical;
			if (this.bIsBarClassType) {
				sKind = sHorizontal;
			}
		}
		sAggRole = this.getText(sAggRole);
		sKind = this.getText(sKind);
		var sText = this.getText("dim-measure-label", [ sAggRole, sKind ]);
		return sText; //Newly created text for Label in respect of Chart type
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#handleChangeForCornerText
	* @param {oEvent} oEvt - Selection Event
	* @description Handler for change event on corner text input boxes.
	* Sets the corresponding corner text on the representation object.                
	* */
	handleChangeForCornerText : function(oEvt) {
		var oCornerTextInput = oEvt.getSource();
		var sCornerTextValue = oCornerTextInput.getValue();
		var oTranslationFormat = sap.apf.modeler.ui.utils.TranslationFormatMap.REPRESENTATION_CORNER_TEXT;
		var sCornerTextId = this.oTextPool.setText(sCornerTextValue, oTranslationFormat);
		var sCornerTextName = oCornerTextInput.getBindingPath('value').replace("/", "");
		var sSetCornerTextMethodName = [ "set", sCornerTextName, "CornerTextKey" ].join("");
		this.oRepresentation[sSetCornerTextMethodName](sCornerTextId);
		this.oConfigurationEditor.setIsUnsaved();
		// Run the fall back logic to update the corner text.
		this.mDataset.oCornerTextsDataset[sCornerTextName] = this._getCornerTextsDataset()[sCornerTextName];
		this.mModel.oCornerTextsModel.updateBindings();
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_addAutoCompleteFeatureOnInputs
	* @description Adds auto complete feature on all the four corner texts.         
	* */
	_addAutoCompleteFeatureOnInputs : function() {
		var oSelf = this;
		var oTextPoolHelper = new sap.apf.modeler.ui.utils.TextPoolHelper(this.oTextPool);
		// Add Feature on Corner Texts
		var oDependenciesForText = {
			oTranslationFormat : sap.apf.modeler.ui.utils.TranslationFormatMap.REPRESENTATION_CORNER_TEXT,
			type : "text"
		};
		var aCornerTextInputIds = [ "idLeftUpper", "idRightUpper", "idLeftLower", "idRightLower" ];
		aCornerTextInputIds.forEach(function(sId) {
			var oInputControl = oSelf.getView().byId(sId);
			oTextPoolHelper.setAutoCompleteOn(oInputControl, oDependenciesForText);
		});
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_bindBasicRepresentationData
	* @description Binds sap.apf.modeler.ui.controller.representation#mModel.oPropertyModel to Basic Data layout.
	* Iteratively binds the data to each and every control in Basic Data Layout.
	* */
	_bindBasicRepresentationData : function() {
		var oSelf = this;
		var oBasicDataLayout = this.byId("idBasicDataLayout");
		var oPropertyRowTemplate = new sap.ui.layout.Grid({ // add the labels and input control to the grid
			width : "100%"
		});
		// Label
		var oAggregationKindLabel = new sap.m.Label({
			width : "100%",
			textAlign : "End",
			layoutData : new sap.ui.layout.GridData({
				span : "L3 M3 S3"
			}),
			text : {
				path : "/",
				formatter : function() {
					var sAggRole = this.getBindingContext().getProperty("sAggregationRole");
					var sKind = this.getBindingContext().getProperty("sKind");
					var sChartName = oSelf.sCurrentChartType;
					var aRepresentationTypes = sap.apf.ui.utils.CONSTANTS.representationTypes;
					var aBarClassCharts = [ aRepresentationTypes.BAR_CHART, aRepresentationTypes.STACKED_BAR_CHART, 
					                        aRepresentationTypes.PERCENTAGE_STACKED_BAR_CHART ];
					oSelf.bIsBarClassType = (aBarClassCharts.indexOf(sChartName) !== -1);
					if (sAggRole && sKind) {
						if (oSelf.bIsBarClassType) { //BarCharts
							return oSelf._createDimMeasForCharts(sAggRole, sKind);
						} else {
							sAggRole = oSelf.getText(sAggRole);
							sKind = oSelf.getText(sKind);
							return oSelf.getText("dim-measure-label", [ sAggRole, sKind ]);
						}
					}
				}
			}
		});
		oPropertyRowTemplate.addContent(oAggregationKindLabel);
		// Select Box
		var oPropertySelectBox = new sap.m.Select({
			width : "100%",
			layoutData : new sap.ui.layout.GridData({
				span : "L3 M3 S3"
			}),
			items : {
				path : "aAllProperties",
				template : new sap.ui.core.ListItem({
					key : "{sName}",
					text : "{sName}"
				})
			},
			selectedKey : "{sSelectedProperty}",
			change : oSelf._handleChangeForBasicDataSelectProperty.bind(this)
		// the current context should be bound to the event handler
		});
		oPropertyRowTemplate.addContent(oPropertySelectBox);
		// Label for 'Label'
		var oLabel = new sap.m.Label({
			textAlign : "End",
			width : "100%",
			layoutData : new sap.ui.layout.GridData({
				span : "L2 M2 S2"
			}),
			text : {
				path : "/",
				formatter : function() {
					var sText;
					var sDefaultLabel, sSelectedProperty;
					var sLabel = this.getBindingContext().getProperty("sLabel");
					if (this.getParent().getContent()[1].getSelectedItem()) {
						sSelectedProperty = this.getParent().getContent()[1].getSelectedItem().getText();
					} else {
						sSelectedProperty = this.getBindingContext().getProperty("sSelectedProperty");
					}
					sText = oSelf.getText("label"); //"label" title has to be displayed
					//if label is default , only then it should be overridden
					if (sSelectedProperty && sSelectedProperty !== oSelf.getText("none")) {// if a property is selected other than none
						sDefaultLabel = oSelf.oEntityMetadata.getPropertyMetadata(sSelectedProperty).label; // read the default label from metadata
						if (!sLabel || (sLabel && sDefaultLabel && (sLabel === sDefaultLabel))) { // if the label is not defined or label is same as default label
							sText = oSelf.getText("label") + "(" + oSelf.getText("default") + ")"; // "Default" has to be prefixed to label title
						}
					}
					return sText;
				}
			}
		}).addStyleClass("repFormRightLabel");
		oPropertyRowTemplate.addContent(oLabel);
		// Input for 'Label'
		var oInputLabel = new sap.m.Input({
			width : "100%",
			layoutData : new sap.ui.layout.GridData({
				span : "L3 M2 S2"
			}),
			value : {
				path : "sLabel",
				formatter : function() {
					var sDefaultLabel, sSelectedProperty;
					if (this.getParent().getContent()[1].getSelectedItem()) {
						sSelectedProperty = this.getParent().getContent()[1].getSelectedItem().getText();
					} else {
						sSelectedProperty = this.getBindingContext().getProperty("sSelectedProperty");
					}
					if (sSelectedProperty && sSelectedProperty !== oSelf.getText("none")) {
						sDefaultLabel = oSelf.oEntityMetadata.getPropertyMetadata(sSelectedProperty).label;
					}
					var sLabel = this.getBindingContext().getProperty("sLabel");
					// if there is a selected property other than none and the label is not defined for it or label is defined and it is same as default label 
					if ((sSelectedProperty && sSelectedProperty !== oSelf.getText("none") && !sLabel) || (sLabel && sDefaultLabel && (sLabel === sDefaultLabel))) {
						return sDefaultLabel; //default label should be displayed
					} else {
						return sLabel; //else manual entered label has to be displayed
					}
				}
			},
			visible : {
				path : "sLabel",
				formatter : function() {
					if (!this.mEventRegistry.suggest) {
						var oTextPoolHelper = new sap.apf.modeler.ui.utils.TextPoolHelper(oSelf.oTextPool);
						// Add Auto Complete Feature on Label inputs.
						var oDependenciesForText = {
							oTranslationFormat : sap.apf.modeler.ui.utils.TranslationFormatMap.REPRESENTATION_LABEL,
							type : "text"
						};
						oTextPoolHelper.setAutoCompleteOn(this, oDependenciesForText);
					}
					return true;
				}
			},
			change : oSelf._handleChangeForBasicDataPropertyRowLabelInput.bind(this)
		// the current context should be bound to the event handler
		});
		oPropertyRowTemplate.addContent(oInputLabel);
		// Add Icon
		var oAddIcon = new sap.ui.core.Icon({
			width : "100%",
			src : "sap-icon://add",
			tooltip : oSelf.getText("addButton"),
			visible : {
				path : "nMax",
				formatter : function(nMax) {
					return (nMax === "*");
				}
			},
			press : oSelf._handlerForBasicDataAddPropertyRow.bind(this)
		// the current context should be bound to the event handler
		}).addStyleClass("addIconRepresentation");
		// Remove Icon
		var oRemoveIcon = new sap.ui.core.Icon({
			width : "100%",
			src : "sap-icon://less",
			tooltip : oSelf.getText("deleteButton"),
			visible : {
				path : "/",
				formatter : function() {
					var bIsFirstOfItsKind = true;
					var oBindingContext = this.getBindingContext();
					var nCurrentIndex = parseInt(oBindingContext.getPath().split("/").pop(), 10);
					if (nCurrentIndex) {
						var aPropertyRows = oSelf.mDataset.oPropertyDataset.aPropertyRows;
						var sCurrentKind = aPropertyRows[nCurrentIndex].sKind;
						var sCurrentAggRole = aPropertyRows[nCurrentIndex].sAggregationRole;
						var nPreviousIndex = nCurrentIndex - 1;
						var sPreviousKind = aPropertyRows[nPreviousIndex].sKind;
						var sPreviousAggRole = aPropertyRows[nPreviousIndex].sAggregationRole;
						bIsFirstOfItsKind = !(sCurrentKind === sPreviousKind && sCurrentAggRole === sPreviousAggRole);
					}
					return !bIsFirstOfItsKind;
				}
			},
			press : oSelf._handlerForBasicDataDeletePropertyRow.bind(this)
		// the current context should be bound to the event handler
		}).addStyleClass("lessIconRepresentation");
		var oIconLayout = new sap.m.HBox({ //layout to hold the add/less icons
			layoutData : new sap.ui.layout.GridData({
				span : "L1 M2 S2"
			}),
			items : [ oAddIcon, oRemoveIcon ]
		});
		oPropertyRowTemplate.addContent(oIconLayout);
		oBasicDataLayout.bindAggregation("items", "/aPropertyRows", function(sId) {
			return oPropertyRowTemplate.clone(sId);
		});
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_handleChangeForBasicDataSelectProperty
	* @param {oControl}
	* @description Handler for change in select property
	* Sets the corresponding properties on the representation object.                
	* */
	_handleChangeForBasicDataSelectProperty : function(oSelectEvent) {
		var oSelf = this;
		var sSelectedKey = oSelectEvent.getSource().getSelectedKey();
		var oLabelControl = oSelectEvent.getSource().getParent().getContent()[2]; // label control for the select property 
		if (sSelectedKey && (sSelectedKey !== oSelf.getText("none"))) { // if a property is selected
			oSelf._setDefaultLabelForSelectedProperty(sSelectedKey, oLabelControl); //pass the selected property and the label control as an argument
		} else {
			oLabelControl.setText(oSelf.getText("label")); // if no property is selected, set the label value as empty string
			oSelectEvent.getSource().getParent().getContent()[3].setValue("");
		}
		oSelf._setPropertiesFromCurrentDataset(); // set the current properties on the representation
		oSelf.oConfigurationEditor.setIsUnsaved();
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_handleChangeForBasicDataPropertyRowLabelInput
	* @param {oControl}
	* @description Handler for change in label for the property row
	* Sets the corresponding properties on the representation object.                
	* */
	_handleChangeForBasicDataPropertyRowLabelInput : function(oInputEvent) {
		var sProperty = oInputEvent.getSource().getBindingContext().getProperty("sSelectedProperty");
		if (sProperty && sProperty !== this.getText("none")) {
			this._updatLabelInPropertyRow(sProperty, oInputEvent.getSource().getValue(), oInputEvent.getSource().getParent().getContent()[2]);
		}
		this._setPropertiesFromCurrentDataset();
		this.oConfigurationEditor.setIsUnsaved();
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_handlerForBasicDataAddPropertyRow
	* @param {oPropertyRow}
	* @description Handler for the "+" icon in the property row
	* adds a new property row in the representation basic data and also sets the corresponding properties on the representation object.          
	* */
	_handlerForBasicDataAddPropertyRow : function(oAddRowEvent) {
		var oBindingContext = oAddRowEvent.getSource().getBindingContext();
		var oCurrentObjectClone = jQuery.extend(true, {}, oBindingContext.getObject());
		delete oCurrentObjectClone.sSelectedProperty;
		delete oCurrentObjectClone.sLabel;
		var nCurrentIndex = parseInt(oBindingContext.getPath().split("/").pop(), 10);
		var aPropertyRows = this.mDataset.oPropertyDataset.aPropertyRows;
		aPropertyRows.splice(nCurrentIndex + 1, 0, oCurrentObjectClone);
		this.mModel.oPropertyModel.updateBindings();
		this._setPropertiesFromCurrentDataset();
		this.oConfigurationEditor.setIsUnsaved();
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_handlerForBasicDataDeletePropertyRow
	* @param {oAddRowEvent}
	* @description Handler for the "-" icon in the property row
	* remove a property row from the representation basic data and also sets the corresponding properties on the representation object.          
	* */
	_handlerForBasicDataDeletePropertyRow : function(oDeleteRowEvent) {
		var oBindingContext = oDeleteRowEvent.getSource().getBindingContext();
		var nCurrentIndex = parseInt(oBindingContext.getPath().split("/").pop(), 10);
		var aPropertyRows = this.mDataset.oPropertyDataset.aPropertyRows;
		aPropertyRows.splice(nCurrentIndex, 1);
		this.mModel.oPropertyModel.updateBindings();
		this._setPropertiesFromCurrentDataset();
		this.oConfigurationEditor.setIsUnsaved();
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_updatLabelInPropertyRow
	* @param {sSelectedProperty,sLabelValue,oLabel} - Selected property in the drop down, the new value of the lable and the lable control
	* @description gets the default label from the metadata, compares if the same value is given by user 
	* and accordingly adds the "default" prefix to the label. Also sets the text on the label control for every select property.       
	* */
	_updatLabelInPropertyRow : function(sSelectedProperty, sLabelValue, oLabelControl) {
		var sDefaultLabel = this.oEntityMetadata.getPropertyMetadata(sSelectedProperty).label;
		var sLableControlText, sLabelControlValue;
		if (sDefaultLabel !== sLabelValue && sLabelValue.length !== 0) {
			sLableControlText = this.getText("label");
			sLabelControlValue = sLabelValue;
		} else {
			sLableControlText = this.getText("label") + "(" + this.getText("default") + ")";
			sLabelControlValue = sDefaultLabel;
		}
		this.mDataset.oPropertyDataset.aPropertyRows.forEach(function(oPropertyRow) {
			if (oPropertyRow.sSelectedProperty === sSelectedProperty) { //Update the dataset with default value of input label
				oPropertyRow.sLabel = sLabelControlValue;
			}
		});
		this.mModel.oPropertyModel.updateBindings();
		oLabelControl.setText(sLableControlText);
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_setDefaultLabelForSelectedProperty
	* @param {sSelectedProperty,oLabelControl} - Selected property in the drop down and the label control
	* @description gets the default label from the metadata, adds the "default" prefix to the label. 
	* Also sets the default text on the label control for every select property.       
	* */
	_setDefaultLabelForSelectedProperty : function(sSelectedProperty, oLabelControl) {
		var sDefaultLabel = this.oEntityMetadata.getPropertyMetadata(sSelectedProperty).label;
		var sLabelText = this.getText("label") + "(" + this.getText("default") + ")";
		this.mDataset.oPropertyDataset.aPropertyRows.forEach(function(oPropertyRow) {
			if (oPropertyRow.sSelectedProperty === sSelectedProperty) {
				oPropertyRow.sLabel = sDefaultLabel; //Update the dataset with default value of input label
			}
		});
		this.mModel.oPropertyModel.updateBindings();
		oLabelControl.setText(sLabelText);
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_bindSortLayoutData
	* @description Binds sap.apf.modeler.ui.controller.representation#mModel.oSortModel to Sort layout.
	*               Iteratively binds the data to both the controls in Sort Data Layout.
	* */
	_bindSortLayoutData : function() {
		var oSelf = this;
		var oSortLayout = this.byId("idSortLayout");
		var oSortRowTemplate = new sap.ui.layout.Grid({ // add the select box controls to the grid.
			width : "100%"
		});
		// "Sort Label" Label
		var oSortFieldLabel = new sap.m.Label({
			width : "100%",
			textAlign : "End",
			layoutData : new sap.ui.layout.GridData({
				span : "L3 M3 S3"
			}),
			text : this.getText("sortingField")
		});
		oSortRowTemplate.addContent(oSortFieldLabel);
		// "Sort Fields" Select Box
		var oSortPropertySelectBox = new sap.m.Select({
			width : "100%",
			layoutData : new sap.ui.layout.GridData({
				span : "L3 M3 S3"
			}),
			items : {
				path : "aAllProperties",
				template : new sap.ui.core.ListItem({
					key : "{sName}",
					text : "{sName}"
				})
			},
			selectedKey : "{sSortProperty}",
			change : oSelf._handleChangeForSortDataProperty.bind(this)
		// the current context should be bound to the event handler
		});
		oSortRowTemplate.addContent(oSortPropertySelectBox);
		// "Direction" Label
		var oDirectionLabel = new sap.m.Label({
			layoutData : new sap.ui.layout.GridData({
				span : "L2 M2 S2"
			}),
			width : "100%",
			textAlign : "End",
			text : this.getText("direction")
		});
		oSortRowTemplate.addContent(oDirectionLabel);
		// "Direction" Select Box
		var oDirectionSelectBox = new sap.m.Select({
			width : "100%",
			layoutData : new sap.ui.layout.GridData({
				span : "L3 M2 S2"
			}),
			items : [ {
				key : this.getText("ascending"),
				text : this.getText("ascending")
			}, {
				key : this.getText("descending"),
				text : this.getText("descending")
			} ],
			selectedKey : "{sDirection}",
			change : oSelf._handleChangeForSortDirection.bind(this)
		// the current context should be bound to the event handler
		});
		oSortRowTemplate.addContent(oDirectionSelectBox);
		// Add Icon
		var oAddIcon = new sap.ui.core.Icon({
			width : "100%",
			src : "sap-icon://add",
			tooltip : this.getText("addButton"),
			visible : true,
			press : oSelf._handleChangeForAddSortRow.bind(this)
		// the current context should be bound to the event handler
		}).addStyleClass("addIconRepresentation");
		// Remove Icon
		var oRemoveIcon = new sap.ui.core.Icon({
			width : "100%",
			src : "sap-icon://less",
			tooltip : this.getText("deleteButton"),
			visible : {
				path : "/",
				formatter : function() {
					var oBindingContext = this.getBindingContext();
					var nCurrentIndex = parseInt(oBindingContext.getPath().split("/").pop(), 10);
					return !!nCurrentIndex;
				}
			},
			press : oSelf._handleChangeForDeleteSortRow.bind(this)
		// the current context should be bound to the event handler
		}).addStyleClass("lessIconRepresentation");
		// Layout to hold the add/less icons
		var oIconLayout = new sap.m.HBox({
			layoutData : new sap.ui.layout.GridData({
				span : "L1 M2 S2"
			}),
			items : [ oAddIcon, oRemoveIcon ]
		});
		oSortRowTemplate.addContent(oIconLayout);
		oSortLayout.bindAggregation("items", "/aSortRows", oSortRowTemplate);
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_handleChangeForSortDataProperty
	* @description handler for the change in sort property in representation.       
	* */
	_handleChangeForSortDataProperty : function() {
		this._setSortFieldsFromCurrentDataset();
		this.oConfigurationEditor.setIsUnsaved();
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_handleChangeForSortDirection
	* @description handler for the change in sort direction for a property in representation.       
	* */
	_handleChangeForSortDirection : function(oSelectEvent) {
		var sSortProperty = oSelectEvent.getSource().getBindingContext().getProperty("sSortProperty");
		if (sSortProperty !== this.getText("none")) {
			this._setSortFieldsFromCurrentDataset();
			this.oConfigurationEditor.setIsUnsaved();
		}
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_handleChangeForAddSortRow
	* @param {oAddRowEvent}
	* @description Handler for the "+" icon in the sort property row
	* adds a new sort property row in the representation sort data and also sets the corresponding properties on the representation object.          
	* */
	_handleChangeForAddSortRow : function(oAddRowEvent) {
		var oBindingContext = oAddRowEvent.getSource().getBindingContext();
		var oCurrentObjectClone = jQuery.extend(true, {}, oBindingContext.getObject());
		delete oCurrentObjectClone.sSortProperty;
		delete oCurrentObjectClone.sDirection;
		var nCurrentIndex = parseInt(oBindingContext.getPath().split("/").pop(), 10);
		var aSortRows = this.mDataset.oSortDataset.aSortRows;
		aSortRows.splice(nCurrentIndex + 1, 0, oCurrentObjectClone);
		this.mModel.oSortModel.updateBindings();
		this._setSortFieldsFromCurrentDataset();
		this.oConfigurationEditor.setIsUnsaved();
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_handleChangeForDeleteSortRow
	* @param {oDeleteRowEvent}
	* @description Handler for the "-" icon in the sort property row
	* removes a sort property row from the representation sort data and also sets the corresponding properties on the representation object.          
	* */
	_handleChangeForDeleteSortRow : function(oDeleteRowEvent) {
		var oBindingContext = oDeleteRowEvent.getSource().getBindingContext();
		var nCurrentIndex = parseInt(oBindingContext.getPath().split("/").pop(), 10);
		var aSortRows = this.mDataset.oSortDataset.aSortRows;
		aSortRows.splice(nCurrentIndex, 1);
		this.mModel.oSortModel.updateBindings();
		this._setSortFieldsFromCurrentDataset();
		this.oConfigurationEditor.setIsUnsaved();
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_validateRepresentationData
	* @description Validates the dimensions and measures of a representation by comparing them with the select properties of the step
	* Removes dimensions or measures that are not part of the step's select properties
	* */
	_validateRepresentationData : function() {
		var oSelf = this;
		//Dimensions set to the representation
		var aDimensions = this.oRepresentation.getDimensions().map(function(dimension) {
			return {
				sType : "Dimension",
				sName : dimension
			};
		});
		//Measures set to the representation
		var aMeasures = this.oRepresentation.getMeasures().map(function(measure) {
			return {
				sType : "Measure",
				sName : measure
			};
		});
		var aRepProperties = aDimensions.concat(aMeasures);
		//Compare representation properties and step properties
		aRepProperties.forEach(function(repProperty) {
			var bPropertyPresent = false;
			oSelf.aSelectProperties.forEach(function(selectProperty) {
				if (repProperty.sName === selectProperty.sName) {
					bPropertyPresent = true;
				}
			});
			//If property is not present in the step's select properties remove the property(dimension or measure) from the representation
			if (bPropertyPresent === false) {
				var sRemoveMethodName = [ "remove", repProperty.sType ].join("");
				oSelf.oRepresentation[sRemoveMethodName](repProperty.sName);
				oSelf.oConfigurationEditor.setIsUnsaved();
			}
		});
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#setDetailData
	* @description Prepares data set and model map to be used within the view.
	* */
	setDetailData : function() {
		var mContextParam = this.mParam.arguments;
		this.oParentStep = this.oConfigurationEditor.getStep(mContextParam.stepId);
		this.oEntityMetadata = this.getEntityTypeMetadata(this.oParentStep.getService(), this.oParentStep.getEntitySet());
		this.aSelectProperties = this._getSelectPropertiesFromParentStep();
		this.oRepresentation = this.oParentStep.getRepresentation(mContextParam.representationId);
		if (!this.oRepresentation) {
			this.oRepresentation = this.oParentStep.createRepresentation();
			// Set Default Chart Type
			this._setDefaultRepresentationType();
			// Set Default Dimensions/Measures
			this._setDefaultProperties();
			this.oConfigurationEditor.setIsUnsaved();
		}
		this._validateRepresentationData();
		// Datasets
		var oChartTypeDataset = this._getChartTypeDataset();
		var oPropertyDataset = this._getPropertyDataset();
		var oSortDataset = this._getSortDataset();
		var oCornerTextsDataset = this._getCornerTextsDataset();
		var oChartPictureDataset = this._getChartPictureDataset();
		this.mDataset = {
			oChartTypeDataset : oChartTypeDataset,
			oPropertyDataset : oPropertyDataset,
			oSortDataset : oSortDataset,
			oCornerTextsDataset : oCornerTextsDataset,
			oChartPictureDataset : oChartPictureDataset
		};
		// Models
		var oChartTypeModel = new sap.ui.model.json.JSONModel(this.mDataset.oChartTypeDataset);
		var oPropertyModel = new sap.ui.model.json.JSONModel(this.mDataset.oPropertyDataset);
		var oSortModel = new sap.ui.model.json.JSONModel(this.mDataset.oSortDataset);
		var oCornerTextsModel = new sap.ui.model.json.JSONModel(this.mDataset.oCornerTextsDataset);
		var oChartPictureModel = new sap.ui.model.json.JSONModel(this.mDataset.oChartPictureDataset);
		this.mModel = {
			oChartTypeModel : oChartTypeModel,
			oPropertyModel : oPropertyModel,
			oSortModel : oSortModel,
			oCornerTextsModel : oCornerTextsModel,
			oChartPictureModel : oChartPictureModel
		};
		// Bindings
		this.byId("idChartType").setModel(this.mModel.oChartTypeModel);
		var sChartType = this.sCurrentChartType;
		this._updateAndSetDatasetsByChartType(sChartType);
		this.byId("idBasicDataLayout").setModel(this.mModel.oPropertyModel);
		this._bindBasicRepresentationData();
		this.byId("idSortLayout").setModel(this.mModel.oSortModel);
		this._bindSortLayoutData();
		this.byId("idLeftLower").setModel(this.mModel.oCornerTextsModel);
		this.byId("idRightLower").setModel(this.mModel.oCornerTextsModel);
		this.byId("idLeftUpper").setModel(this.mModel.oCornerTextsModel);
		this.byId("idRightUpper").setModel(this.mModel.oCornerTextsModel);
		this.byId("idChartIcon").setModel(this.mModel.oChartPictureModel);
		// Actions
		this._addAutoCompleteFeatureOnInputs();
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_insertPreviewButtonInFooter
	* @description Inserts the preview Button into the footer.
	* */
	_insertPreviewButtonInFooter : function() {
		var oFooter = this.oViewData.oFooter;
		oFooter.addContentRight(this._oPreviewButton);
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_removePreviewButtonFromFooter
	* @description Removes the preview Button from the footer.
	* */
	_removePreviewButtonFromFooter : function() {
		var oFooter = this.oViewData.oFooter;
		oFooter.removeContentRight(this._oPreviewButton);
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_handlePreviewButtonPress
	* @description Handler for press event on preview Button.
	*          Opens a dialog and inserts the preview content in it.
	* */
	_handlePreviewButtonPress : function() {
		var oPreviewDetails = this._getPreviewDetails();
		var oPreviewContent = new sap.ui.view({
			type : sap.ui.core.mvc.ViewType.XML,
			viewName : "sap.apf.modeler.ui.view.previewContent",
			viewData : oPreviewDetails
		});
		var oPreviewDialog = new sap.m.Dialog({
			title : this.getText("preview"),
			content : oPreviewContent,
			endButton : new sap.m.Button({
				text : this.getText("close"),
				press : function() {
					oPreviewDialog.close();
				}
			})
		});
		oPreviewDialog.open();
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#onExit
	* @description Called when sub-view is destroyed by configuration list controller.
	*               Removes the preview button from footer.
	* */
	onExit : function() {
		this._removePreviewButtonFromFooter();
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_getPreviewDetails
	* @description Prepares the argument for sap.apf.modeler.ui.controller.PreviewContent.
	*          Iterates through all the models and populates the result object.
	* @returns {Object} Argument for sap.apf.modeler.ui.controller.PreviewContent
	* */
	_getPreviewDetails : function() {
		var oSelf = this;
		var sChartTpype = this.mDataset.oChartTypeDataset.sSelectedChartType;
		var sStepTitle = this._getParentStepTitle();
		var sStepLongTitle = this._getParentStepLongTitle() || sStepTitle;
		var aDimensions = [], aMeasures = [];
		this.aSelectProperties.forEach(function(oSelectProperty) {
			if (oSelectProperty.sAggregationRole === "dimension") {
				aDimensions.push(oSelectProperty.sName);
			} else if (oSelectProperty.sAggregationRole === "measure") {
				aMeasures.push(oSelectProperty.sName);
			}
		});
		var oChartParameter = {
			dimensions : [],
			measures : []
		};
		this.mDataset.oPropertyDataset.aPropertyRows.forEach(function(oPropertyRow) {
			if (oPropertyRow.sSelectedProperty !== oSelf.getText("none")) {
				var sAggregationRole = oPropertyRow.sAggregationRole + "s";
				oChartParameter[sAggregationRole].push({
					fieldDesc : oPropertyRow.sLabel,
					fieldName : oPropertyRow.sSelectedProperty,
					kind : oPropertyRow.sKind
				});
			}
		});
		// Sort Fields
		var aSort = [];
		this.mDataset.oSortDataset.aSortRows.forEach(function(oSortRow) {
			var sSortProperty = oSortRow.sSortProperty || (oSortRow.aAllProperties.length && oSortRow.aAllProperties[0].sName);
			if (sSortProperty && sSortProperty !== oSelf.getText("none")) {
				var bAscending = !oSortRow.sDirection || (oSortRow.sDirection === oSelf.getText("ascending"));
				aSort.push({
					sSortField : sSortProperty,
					bDescending : !bAscending
				});
			}
		});
		var aCornerTexts = {
			sLeftUpper : this.mDataset.oCornerTextsDataset.LeftUpper,
			sRightUpper : this.mDataset.oCornerTextsDataset.RightUpper,
			sLeftLower : this.mDataset.oCornerTextsDataset.LeftLower,
			sRightLower : this.mDataset.oCornerTextsDataset.RightLower
		};
		return {
			sChartType : sChartTpype,
			sStepTitle : sStepTitle,
			sStepLongTitle : sStepLongTitle,
			aDimensions : aDimensions,
			aMeasures : aMeasures,
			oChartParameter : oChartParameter,
			aSort : aSort,
			aCornerTexts : aCornerTexts
		};
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_getParentStepLongTitle
	* @description Getter for parent step's long title
	* @returns {String|undefined} Parent Step's Long Title or undefined if not available.
	* */
	_getParentStepLongTitle : function() {
		var sStepLongTitleId = this.oParentStep.getLongTitleId();
		sStepLongTitleId = !this.oTextPool.isInitialTextKey(sStepLongTitleId) ? sStepLongTitleId : undefined;
		var oStepLongTitleText = sStepLongTitleId && this.oTextPool.get(sStepLongTitleId);
		var sStepLongTitle = oStepLongTitleText && oStepLongTitleText.TextElementDescription;
		return sStepLongTitle;
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_getParentStepTitle
	* @description Getter for parent step's title
	* @returns {String|undefined} Parent Step's Title or undefined if not available.
	* */
	_getParentStepTitle : function() {
		var sStepTitleId = this.oParentStep.getTitleId();
		var oStepTitleText = sStepTitleId && this.oTextPool.get(sStepTitleId);
		var sStepTitle = oStepTitleText && oStepTitleText.TextElementDescription;
		return sStepTitle;
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_getSelectPropertiesFromParentStep
	* @description Getter for Select Property List from parent step.
	* @returns {Object[]} Array of select properties of the form : 
	*          {
	*               sName - Name of the property.
	*               sAggregationRole - dimension/measure.
	*               sLabel - Label of the property
	*          }
	* */
	_getSelectPropertiesFromParentStep : function() {
		var sAbsolutePathToServiceDocument = this.oParentStep.getService();
		var sEntitySet = this.oParentStep.getEntitySet();
		var oEntityMetadata = this.getEntityTypeMetadata(sAbsolutePathToServiceDocument, sEntitySet);
		var aSelectProperties = this.oParentStep.getSelectProperties();
		var aResultSet = aSelectProperties.map(function(sProperty) {
			var oMetadataForProperty = oEntityMetadata.getPropertyMetadata(sProperty);
			return {
				sName : sProperty,
				sAggregationRole : oMetadataForProperty["aggregation-role"],
				sLabel : oMetadataForProperty["label"]
			};
		});
		return aResultSet;
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_getCornerTextsFromConfigObject
	* @param {sap.apf.modeler.core.Step|sap.apf.modeler.core.Representation} oConfigObject - Instance of a configuration object.
	* @description Getter for corner text map of a configuration object.
	* @returns {Object} Map of corner Text of the form : 
	*          {
	*               LeftUpper - Left Upper corner text.
	*               RightUpper - Right Upper corner text.
	*               LeftLower - Left Lower corner text.
	*               RightLower - Right Lower corner text. 
	*          }
	* */
	_getCornerTextsFromConfigObject : function(oConfigObject) {
		var oSelf = this;
		var aCornerTextNames = [ "LeftUpper", "RightUpper", "LeftLower", "RightLower" ];
		var mDataset = {};
		aCornerTextNames.forEach(function(sCornerTextName) {
			var sMethodName = [ "get", sCornerTextName, "CornerTextKey" ].join("");
			var sCornerTextKey = oConfigObject[sMethodName]();
			var oCornerText = sCornerTextKey && oSelf.oTextPool.get(sCornerTextKey);
			var sCornterText = oCornerText && oCornerText.TextElementDescription;
			mDataset[sCornerTextName] = sCornterText;
		});
		return mDataset;
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_getChartTypeDataset
	* @description Returns the data set to be bound to chart type drop down.
	* @returns {Object} Data set for chart type drop down of the form:
	*          {
	*               aChartTypes : [
	*                    {
	*                          sId - {sap.apf.ui.utils.CONSTANTS.representationTypes} Chart Type.
	*                          sText - {String} Display text for the chart type     
	*                    }
	*               ]
	*               sSelectedChartType - {sap.apf.ui.utils.CONSTANTS.representationTypes} Currently selected Chart Type.
	*          }
	* */
	_getChartTypeDataset : function() {
		var self = this;
		var aKeys = Object.keys(this._getRepresentationMetadata());
		var aChartTypes = aKeys.map(function(sKey) {
			return {
				sId : sKey,
				sText : self.getText(sKey)
			};
		});
		var oDataset = {
			aChartTypes : aChartTypes,
			sSelectedChartType : this.oRepresentation.getRepresentationType()
		};
		this.sCurrentChartType = oDataset.sSelectedChartType;
		return oDataset;
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_getChartPictureDataset
	* @description Returns the data set to be bound to representation icon
	* @returns {Object} 
	*          {
	*               id : picture
	*          }
	* */
	_getChartPictureDataset : function() {
		var oRepnMetaData = this.getRepresentationTypes();
		var oDataSet = {};
		oRepnMetaData.forEach(function(o) {
			var sId = o.id;
			oDataSet[sId] = o.picture;
		});
		oDataSet.sSelectedChartPicture = oDataSet[this.oRepresentation.getRepresentationType()];
		return oDataSet;
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_updatePictureDataset
	* @description Update the picture model data set
	*/
	_updatePictureDataset : function(sChartType) {
		var oDataSet = this.mModel.oChartPictureModel.getData();
		oDataSet.sSelectedChartPicture = oDataSet[sChartType];
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_getPropertyDataset
	* @description Returns the data set to be bound to basic data layout.
	* @returns {Object} Data set for basic data layout of the form:
	*          {
	*               aPropertyRows : [
	*                    {
	                           sSelectedProperty - Selected Property of dropdown.
	                           sAggregationRole - dimension/measure.
	                           sLabel - Label of the selected property.
	                           sKind - {sap.apf.core.constants.representationMetadata.kind} kind value of corresponding row.
	                           nMin - Minimum value from representation metadata.
	                           nMax - Maximum value from representation metadata.
	                      }
	*               ]
	*          }
	* */
	_getPropertyDataset : function() {
		var oSelf = this;
		var aPropertyRows = [];
		var fnAddPropertyRowsOfType = function(sType) {
			var sGetterMethodName = [ "get", sType, "s" ].join("");
			var aPropertyList = oSelf.oRepresentation[sGetterMethodName]();
			aPropertyList.forEach(function(sProperty) {
				var sLabelKeyMethodName = [ "get", sType, "TextLabelKey" ].join("");
				var sLabelKey = oSelf.oRepresentation[sLabelKeyMethodName](sProperty);
				var oLabel = sLabelKey && oSelf.oTextPool.get(sLabelKey);
				var sLabel = oLabel && oLabel.TextElementDescription;
				if (sLabel === undefined || sLabel.length === 0) { // if label is undefined or an empty string
					sLabel = oSelf.oEntityMetadata.getPropertyMetadata(sProperty).label;
				}
				var sKindMethodName = [ "get", sType, "Kind" ].join("");
				var sKind = oSelf.oRepresentation[sKindMethodName](sProperty);
				var sChartName = oSelf.oRepresentation.getRepresentationType();
				var oRepMetadata = oSelf._getRepresentationMetadata()[sChartName];
				var aSupportedKinds = oRepMetadata[sType.toLowerCase() + "s"].supportedKinds;
				var nMin, nMax;
				aSupportedKinds.forEach(function(oSupportedKind) {
					if (oSupportedKind.kind === sKind) {
						nMin = oSupportedKind.min;
						nMax = oSupportedKind.max;
					}
				});
				aPropertyRows.push({
					sSelectedProperty : sProperty,
					sAggregationRole : sType.toLowerCase(),
					sLabel : sLabel,
					sKind : sKind,
					nMin : nMin,
					nMax : nMax
				});
			});
		};
		fnAddPropertyRowsOfType("Dimension");
		fnAddPropertyRowsOfType("Measure");
		return {
			aPropertyRows : aPropertyRows
		};
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_getSortDataset
	* @description Returns the data set to be bound to sort data layout.
	* @returns {Object} Data set for sort data layout of the form:
	* {
	       aSortRows : [
	       		{
	       			 aAllProperties : [
	                      {
	                           sName : "None" - "None" value since it is an optional field.
	                      },
	                      {
	                           sName - Name of the property.
	                      }
	                ],
	                sSortProperty - Name of the selected sort property.
	                sDirection - Translated text for 'ascending' and 'descending'.
	       		}
	       ]
	 * }
	* */
	_getSortDataset : function() {
		var oSelf = this;
		var aOrderBySpecs = this.oRepresentation.getOrderbySpecifications();
		var aAllProperties = this.aSelectProperties.slice();
		aAllProperties.unshift({
			sName : this.getText("none")
		});
		if (!aOrderBySpecs.length) {
			aOrderBySpecs.push({});
		}
		var aSortRows = aOrderBySpecs.map(function(oOrderBySpec) {
			var sOrderByProperty = oOrderBySpec.property;
			var sOrderByDirection = oOrderBySpec.ascending !== undefined && !oOrderBySpec.ascending ? oSelf.getText("descending") : oSelf.getText("ascending");
			return {
				sSortProperty : sOrderByProperty,
				sDirection : sOrderByDirection,
				aAllProperties : aAllProperties
			};
		});
		return {
			aSortRows : aSortRows
		};
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_getCornerTextsDataset
	* @description Returns the data set to be bound to corner texts data layout.
	* @returns {Object} Data set for corner texts data layout of the form:
	*          {
	*               LeftUpper - Left Upper corner text.
	*               RightUpper - Right Upper corner text.
	*               LeftLower - Left Lower corner text.
	*               RightLower - Right Lower corner text. 
	*          }
	* */
	_getCornerTextsDataset : function() {
		var mRepresentationCornerText = this._getCornerTextsFromConfigObject(this.oRepresentation);
		var mParentStepCornerText = this._getCornerTextsFromConfigObject(this.oParentStep);
		var oDataset = jQuery.extend({}, mParentStepCornerText, mRepresentationCornerText);
		return oDataset;
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_setDefaultRepresentationType
	* @description Sets the first key from sap.apf.core.representationTypes() list as the default representation type.
	*               Updates the tree node after setting the representation type on the representation object and passes the id of newly created representation.
	* */
	_setDefaultRepresentationType : function() {
		var sDefaultChartType;
		if (this.getRepresentationTypes()[0].metadata) {
			sDefaultChartType = this.getRepresentationTypes()[0].id;
		}
		this.oRepresentation.setRepresentationType(sDefaultChartType);
		this.oRepresentation.setAlternateRepresentationType(sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION);
		// Update Tree Node.
		var sRepresentationTypeText = this.getText(this.oRepresentation.getRepresentationType());
		var sSelectedChartIcon = this._getChartPictureDataset().sSelectedChartPicture;
		var aStepCategories = this.oConfigurationEditor.getCategoriesForStep(this.oParentStep.getId());
		if (aStepCategories.length === 1) {//In case the step of representation is only assigned to one category
			this.oViewData.updateSelectedNode({
				id : this.oRepresentation.getId(),
				icon : sSelectedChartIcon
			});
		} else {
			var aRepresentationContexts = [];
			var representationContext = jQuery.extend(true, {}, this.mParam);
			var oRepresentationInfo = {
				id : this.oRepresentation.getId(),
				aStepCategories : aStepCategories,
				stepContext : representationContext
			};
			this.oViewData.updateTree();
		}
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_setDefaultProperties
	* @description Adds the first dimension from parent step's select properties to representation object and gives it xAxis.
	*          Also adds the first measure to the representation object and gives it yAxis.
	* */
	_setDefaultProperties : function() {
		var sFirstDimension, sFirstMeasure;
		this.aSelectProperties.forEach(function(oSelectProperty) {
			if (!sFirstDimension) {
				if (oSelectProperty.sAggregationRole === "dimension") {
					sFirstDimension = oSelectProperty.sName;
				}
			}
			if (!sFirstMeasure) {
				if (oSelectProperty.sAggregationRole === "measure") {
					sFirstMeasure = oSelectProperty.sName;
				}
			}
		});
		// Add dimension
		if (sFirstDimension) {
			this.oRepresentation.addDimension(sFirstDimension);
			this.oRepresentation.setDimensionKind(sFirstDimension, sap.apf.core.constants.representationMetadata.kind.XAXIS);
		}
		// Add measure
		if (sFirstMeasure) {
			this.oRepresentation.addMeasure(sFirstMeasure);
			this.oRepresentation.setMeasureKind(sFirstMeasure, sap.apf.core.constants.representationMetadata.kind.YAXIS);
		}
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_updateAndSetDatasetsByChartType
	* @param {sap.apf.ui.utils.CONSTANTS.representationTypes} sChartName - Representation Type against which the property dataset has to be updated.
	* @description Updates datasets used in different layouts based on chart type.
	*          This method mutates the sap.apf.modeler.ui.controller.representation#mDataset based on the chart type which is passed.
	*          After the mutation it sets the values on the representation object.
	* */
	_updateAndSetDatasetsByChartType : function(sChartName) {
		this._updatePropertyDatasetByChartType(sChartName);
		this.mModel.oPropertyModel.updateBindings();
		this._setPropertiesFromCurrentDataset();
		this._updateSortDatasetByChartType(sChartName);
		this.mModel.oSortModel.updateBindings();
		this._setSortFieldsFromCurrentDataset();
		this._updatePictureDataset(sChartName);
		this.mModel.oChartPictureModel.updateBindings();
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_updatePropertyDatasetByChartType
	* @param {sap.apf.ui.utils.CONSTANTS.representationTypes} sChartName - Representation Type against which the property dataset has to be updated.
	* @description Property dataset that is used in basic data layout is different for differnt chart types.
	*          This method mutates the sap.apf.modeler.ui.controller.representation#mDataset.oPropertyDataset based on the chart type which is passed.
	*          Contains logic to retain the data rows if old data in row and data row from passed chart type are same.
	* */
	_updatePropertyDatasetByChartType : function(sChartName) {
		var self = this;
		// oDefaultDataset holds the bare-minimum property rows for this particular sChartName.
		var oDefaultDataset = {
			aPropertyRows : []
		};
		var oRepMetadata = this._getRepresentationMetadata()[sChartName];
		var aAggregationRoles = [ "dimensions", "measures" ];
		aAggregationRoles.forEach(function(sAggregationRole) { // for each aggregation role, check the supported kind
			if (oRepMetadata.hasOwnProperty(sAggregationRole)) {
				var aSupportedKinds = oRepMetadata[sAggregationRole].supportedKinds;
				var sSelectedProperty;
				aSupportedKinds.forEach(function(oSupportedKind) { //for each kind, check all the properties 
					var oPropertyRow = {
						sAggregationRole : sAggregationRole.slice(0, -1), // To chop off the letter 's' form 'dimensions' and 'measures'
						sKind : oSupportedKind.kind,
						nMin : oSupportedKind.min,
						nMax : oSupportedKind.max,
						aAllProperties : self.aSelectProperties.filter(function(oProperty) {
							return (oProperty.sAggregationRole === (sAggregationRole.slice(0, -1)));
						})
					};
					if (!parseInt(oSupportedKind.min, 10)) {
						oPropertyRow.aAllProperties.unshift({
							sName : self.getText("none"),
							sAggregationRole : sAggregationRole.slice(0, -1)
						});
					}
					oPropertyRow.aAllProperties.forEach(function(selectedProperty) { //assign the label to each property in one kind
						sSelectedProperty = selectedProperty.sName;
						if (sSelectedProperty) {
							var sType = sAggregationRole.slice(0, -1);
							var sAggregationRoleCamelCase = [ sType.charAt(0).toUpperCase(), sType.substring(1) ].join("");
							var sLabelKeyMethodName = [ "get", sAggregationRoleCamelCase, "TextLabelKey" ].join("");
							var sLabelKey = self.oRepresentation[sLabelKeyMethodName](sSelectedProperty);
							var oLabel = sLabelKey && self.oTextPool.get(sLabelKey);
							var sLabel = oLabel && oLabel.TextElementDescription;
							if (sLabel) { //if the user has given a label manually
								selectedProperty.sLabel = sLabel; // assign the label to the property
							} else { // else read the default label from the metadata
								if (sSelectedProperty !== self.getText("none")) {
									var sDefaultLabel = self.oEntityMetadata.getPropertyMetadata(sSelectedProperty).label;
									if (sDefaultLabel) {
										selectedProperty.sLabel = sDefaultLabel; // assign the label to the property
									}
								}
							}
						}
					});
					oDefaultDataset.aPropertyRows.push(oPropertyRow);
				});
			}
		});
		// oResultDataset combines the oDefaultDataset with the existing mPropertyDataset to retain the similar data entered by the user if any.
		var oResultDataset = {
			aPropertyRows : []
		};
		oDefaultDataset.aPropertyRows.forEach(function(oDefaultPropertyRow) {
			var bExitingRowOfSameKindExists = false;
			self.mDataset.oPropertyDataset.aPropertyRows.forEach(function(oExistingPropertyRow) {
				var bHasSameAggregationRole = oExistingPropertyRow.sAggregationRole === oDefaultPropertyRow.sAggregationRole;
				var bHasSameKind = oExistingPropertyRow.sKind === oDefaultPropertyRow.sKind;
				var bHasSameMinValue = oExistingPropertyRow.nMin === oDefaultPropertyRow.nMin;
				var bHasSameMaxValue = oExistingPropertyRow.nMax === oDefaultPropertyRow.nMax;
				if (bHasSameAggregationRole && bHasSameKind && bHasSameMinValue && bHasSameMaxValue) {
					bExitingRowOfSameKindExists = true;
					var oCompleteRow = jQuery.extend(oExistingPropertyRow, oDefaultPropertyRow);
					oResultDataset.aPropertyRows.push(oCompleteRow);
				}
			});
			if (!bExitingRowOfSameKindExists) {
				oResultDataset.aPropertyRows.push(oDefaultPropertyRow);
			}
		});
		// Update Dataset
		this.mDataset.oPropertyDataset.aPropertyRows = oResultDataset.aPropertyRows;
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_updateSortDatasetByChartType
	* @param {sap.apf.ui.utils.CONSTANTS.representationTypes} sChartName - Representation Type against which the property dataset has to be updated.
	* @description Sort dataset that is used in sort layout is different for differnt chart types.
	*          This method mutates the sap.apf.modeler.ui.controller.representation#mDataset.oPropertyDataset based on the chart type which is passed.
	*          Removes and hides Sort properties if "sortable" is set to false in the metadata of the chart type.
	* */
	_updateSortDatasetByChartType : function(sChartName) {
		var oRepMetadata = this._getRepresentationMetadata()[sChartName];
		if (oRepMetadata.sortable !== undefined && !oRepMetadata.sortable) {
			var aAllProperties = this.aSelectProperties.slice();
			aAllProperties.unshift({
				sName : this.getText("none")
			});
			this.mDataset.oSortDataset.aSortRows = [ {
				aAllProperties : aAllProperties,
				sDirection : this.getText("ascending")
			} ];
			this.byId("idSortLayout").setVisible(false);
			this.byId("idSorting").setVisible(false);
		} else {
			this.byId("idSortLayout").setVisible(true);
			this.byId("idSorting").setVisible(true);
			// <-- Work around to resolve data binding issue while changing visibility. -->
			this.mModel.oSortModel.updateBindings();
			var oSortLayout = this.byId("idSortLayout");
			jQuery.sap.delayedCall(10, oSortLayout, oSortLayout.rerender);
			// <-- Work around to resolve data binding issue while changing visibility. -->
		}
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_setPropertiesFromCurrentDataset
	* @description This function is called on every change event related to properties to adhere to WYSIWYG principle.
	*          Sets new values on the representation object based on the current property model.
	*          Clears the old values from representation object.
	*          Sets new values by iterating through the current property data set.
	* */
	_setPropertiesFromCurrentDataset : function() {
		var oSelf = this;
		// Clear all properties from representation
		var sDimensions = this.oRepresentation.getDimensions();
		sDimensions.forEach(function(sDimension) {
			oSelf.oRepresentation.removeDimension(sDimension);
		});
		var sMeasures = this.oRepresentation.getMeasures();
		sMeasures.forEach(function(sMeasure) {
			oSelf.oRepresentation.removeMeasure(sMeasure);
		});
		// Loop through current dataset and set properties on representation
		this.mDataset.oPropertyDataset.aPropertyRows.forEach(function(oPropertyRow) {
			var sSelectedProperty = oPropertyRow.sSelectedProperty || (oPropertyRow.aAllProperties.length && oPropertyRow.aAllProperties[0].sName);
			if (sSelectedProperty && sSelectedProperty !== oSelf.getText("none")) {
				var sAggregationRole = oPropertyRow.sAggregationRole;
				var sAggregationRoleCamelCase = [ sAggregationRole.charAt(0).toUpperCase(), sAggregationRole.substring(1) ].join("");
				var sDefaultLabel = oSelf.oEntityMetadata.getPropertyMetadata(sSelectedProperty).label;
				var sLabelValue = oPropertyRow.sLabel;
				var sLabelId;
				if (sLabelValue && sLabelValue !== sDefaultLabel) { //if the label exists and it is not same as default label
					var oTranslationFormat = sap.apf.modeler.ui.utils.TranslationFormatMap.REPRESENTATION_LABEL;
					sLabelId = oSelf.oTextPool.setText(sLabelValue, oTranslationFormat);
				}
				var sAddMethodName = [ "add", sAggregationRoleCamelCase ].join("");
				var sSetKindMethondName = [ "set", sAggregationRoleCamelCase, "Kind" ].join("");
				var sSetTextLabelKeyMethodName = [ "set", sAggregationRoleCamelCase, "TextLabelKey" ].join("");
				oSelf.oRepresentation[sAddMethodName](sSelectedProperty);
				oSelf.oRepresentation[sSetKindMethondName](sSelectedProperty, oPropertyRow.sKind);
				oSelf.oRepresentation[sSetTextLabelKeyMethodName](sSelectedProperty, sLabelId);
			} else {
				oPropertyRow.sLabel = "";//clear the label for "None" from the model, from the property row
				oPropertyRow.sSelectedProperty = oSelf.getText("none");//set the selected property to "none" in the model, from the property row
			}
		});
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_setSortFieldsFromCurrentDataset
	* @description This function is called on every change event related to sort layout to adhere to WYSIWYG principle.
	* Sets new values on the representation object based on the current property model.
	* Clears the old values from representation object.
	* Sets new values by iterating through the current sort data set.
	* */
	_setSortFieldsFromCurrentDataset : function() {
		var oSelf = this;
		// Clears current orderBy properties
		this.oRepresentation.getOrderbySpecifications().forEach(function(oOrderBySpec) {
			oSelf.oRepresentation.removeOrderbySpec(oOrderBySpec.property);
		});
		// Loop through current sort model and set orderby properties accordingly.
		this.mDataset.oSortDataset.aSortRows.forEach(function(oSortRow) {
			var sSortProperty = oSortRow.sSortProperty || (oSortRow.aAllProperties.length && oSortRow.aAllProperties[0].sName);
			if (sSortProperty && sSortProperty !== oSelf.getText("none")) {
				var bAscending = !oSortRow.sDirection || (oSortRow.sDirection === oSelf.getText("ascending"));
				oSelf.oRepresentation.addOrderbySpec(sSortProperty, bAscending);
			}
		});
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.representation#_getRepresentationMetadata
	* @description Returns the representation metadata by using the getRepresentationTypes API
	* */
	_getRepresentationMetadata : function() {
		var oRepMetadata = {};
		this.getRepresentationTypes().forEach(function(representationType) {
			if (representationType.metadata) {
				oRepMetadata[representationType.id] = representationType.metadata;
			}
		});
		return oRepMetadata;
	}
});
}; // end of sap/apf/modeler/ui/controller/representation.controller.js
if ( !jQuery.sap.isDeclared('sap.apf.modeler.ui.controller.step.controller') ) {
  jQuery.sap.declare('sap.apf.modeler.ui.controller.step.controller');
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

/**
* @class step
* @memberOf sap.apf.modeler.ui.controller
* @name step
* @description controller for view.step
*/
sap.ui.controller("sap.apf.modeler.ui.controller.step", {
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.step#onInit
	* @description Called on initialization of the view.
	* Sets the static texts for all controls in UI.
	* Sets the scroll height for the container.
	* Adds style classes to all UI controls.
	* Prepares dependecies.
	* Sets dynamic text for input controls
	* */
	onInit : function() {
		this.getView().addStyleClass("sapUiSizeCompact");//For non touch devices- compact style class increases the information density on the screen by reducing control dimensions
		this.oViewData = this.getView().getViewData();
		this.getText = this.oViewData.getText;
		this.params = this.oViewData.oParams;
		this.oConfigurationHandler = this.oViewData.oConfigurationHandler;
		this.oConfigurationEditor = this.oViewData.oConfigurationEditor;
		this.oTextPool = this.oConfigurationHandler.getTextPool();
		this.getNavigationTargetName = this.oViewData.getNavigationTargetName;
		var self = this;
		if (!this.oConfigurationEditor) {
			this.oConfigurationHandler.loadConfiguration(this.params.arguments.configId, function(configurationEditor) {
				self.oConfigurationEditor = configurationEditor;
			});
		}
		this.oTextPool = this.oConfigurationHandler.getTextPool();
		//this._getDependencies(); //get dependencies from router
		this._addConfigStyleClass();
		this._setDisplayText();
		this.setDetailData();
		//Set Mandatory Fields
		var mandatoryFields = [];
		mandatoryFields.push(this.byId("idstepTitle"));
		mandatoryFields.push(this.byId("idSourceSelect"));
		mandatoryFields.push(this.byId("idSelectPropCombo"));
		mandatoryFields.push(this.byId("idCategorySelect"));
		mandatoryFields.push(this.byId("idFilterMapEntitySelect")); //filter map entity,select properties and target filter are mandatory when service is selected
		mandatoryFields.push(this.byId("idFilterMapTargetFilterCombo"));
		this._setMandatoryFields(mandatoryFields);
		if (this.step.getFilterMappingService() === undefined || this.step.getFilterMappingService() === "") { // if the filter mapping field is not available
			this._removeMandatoryFromFilterMap(); //initially filter mapping fields should not be mandatory 
		}
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.step#_setDisplayText
	* @description Sets static texts in UI
	* */
	_setDisplayText : function() {
		this.byId("idStepBasicData").setTitle(this.getText("stepBasicData"));
		this.byId("idStepTitleLabel").setText(this.getText("stepTitle"));
		this.byId("idStepTitleLabel").setRequired(true);
		this.byId("idstepTitle").setPlaceholder(this.getText("newStep"));
		this.byId("idStepLongTitleLabel").setText(this.getText("stepLongTitle"));
		this.byId("idstepLongTitle").setPlaceholder(this.getText("stepLongTitle"));
		this.byId("idCategoryTitleLabel").setText(this.getText("categoryAssignments"));
		this.byId("idCategoryTitleLabel").setRequired(true);
		this.byId("idGlobalLabel").setText(this.getText("globalNavTargets"));
		this.byId("idStepSpecificLabel").setText(this.getText("stepSpecificNavTargets"));
		this.byId("idSourceSelectLabel").setText(this.getText("source"));
		this.byId("idSourceSelectLabel").setRequired(true);
		this.byId("idEntitySelectLabel").setText(this.getText("entity"));
		this.byId("idEntitySelectLabel").setRequired(true);
		this.byId("idSelectPropComboLabel").setText(this.getText("selectProperties"));
		this.byId("idSelectPropComboLabel").setRequired(true);
		this.byId("idReqFilterSelectLabel").setText(this.getText("requiredFilters"));
		this.byId("idDataRequest").setTitle(this.getText("dataRequest"));
		this.byId("idNavigationTarget").setTitle(this.getText("navigationTargetAssignment"));
		this.byId("idCornerTextLabel").setTitle(this.getText("cornerTextLabel"));
		this.byId("idLeftTop").setPlaceholder(this.getText("leftTop"));
		this.byId("idRightTop").setPlaceholder(this.getText("rightTop"));
		this.byId("idLeftBottom").setPlaceholder(this.getText("leftBottom"));
		this.byId("idRightBottom").setPlaceholder(this.getText("rightBottom"));
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.step#_addAutoCompleteFeatureOnInputs
	 * @description Adds 'Auto Complete Feature' to the input fields in the view
	 * using sap.apf.modeler.ui.utils.TextPoolHelper.
	 * */
	_addAutoCompleteFeatureOnInputs : function() {
		if (this.oConfigurationHandler) {
			var oTextPoolHelper = new sap.apf.modeler.ui.utils.TextPoolHelper(this.oTextPool);
			var oStepTitleControl = this.byId("idstepTitle");
			var oTranslationFormatForStepTitle = sap.apf.modeler.ui.utils.TranslationFormatMap.STEP_TITLE;
			var oDependenciesForStepTitle = {
				oTranslationFormat : oTranslationFormatForStepTitle,
				type : "text"
			};
			oTextPoolHelper.setAutoCompleteOn(oStepTitleControl, oDependenciesForStepTitle);
			var oStepLongTitleControl = this.byId("idstepLongTitle");
			var oTranslationFormatForStepLongTitle = sap.apf.modeler.ui.utils.TranslationFormatMap.STEP_LONG_TITLE;
			var oDependenciesForStepLongTitle = {
				oTranslationFormat : oTranslationFormatForStepLongTitle,
				type : "text"
			};
			oTextPoolHelper.setAutoCompleteOn(oStepLongTitleControl, oDependenciesForStepLongTitle);
			var oStepLeftTop = this.byId("idLeftTop");
			var oStepRightTop = this.byId("idRightTop");
			var oStepLeftBottom = this.byId("idLeftBottom");
			var oStepRightBottom = this.byId("idRightBottom");
			var oTranslationFormatForStepCornerText = sap.apf.modeler.ui.utils.TranslationFormatMap.STEP_CORNER_TEXT;
			var oDependenciesForStepCornerText = {
				oTranslationFormat : oTranslationFormatForStepCornerText,
				type : "text"
			};
			oTextPoolHelper.setAutoCompleteOn(oStepLeftTop, oDependenciesForStepCornerText);
			oTextPoolHelper.setAutoCompleteOn(oStepRightTop, oDependenciesForStepCornerText);
			oTextPoolHelper.setAutoCompleteOn(oStepLeftBottom, oDependenciesForStepCornerText);
			oTextPoolHelper.setAutoCompleteOn(oStepRightBottom, oDependenciesForStepCornerText);
			//autocomplete for source
			var oDependenciesForService = {
				oConfigurationEditor : this.oConfigurationEditor,
				type : "service"
			};
			var oSource = this.byId("idSourceSelect");
			oTextPoolHelper.setAutoCompleteOn(oSource, oDependenciesForService);
			var oSourceForFilterMapping = this.byId("idFilterMapSourceSelect");
			oTextPoolHelper.setAutoCompleteOn(oSourceForFilterMapping, oDependenciesForService);
		}
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.step#_addConfigStyleClass
	* @description Adds style classes to the UI controls
	* */
	_addConfigStyleClass : function() {
		this.byId("idChartIcon").addStyleClass("stepChartIcon");
		this.byId("idRightTop").addStyleClass("stepRightCornerText");
		this.byId("idRightBottom").addStyleClass("stepRightCornerText");
		this.byId("idLeftTop").addStyleClass("stepLeftCornerText");
		this.byId("idLeftBottom").addStyleClass("stepLeftCornerText");
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.step#_prepareStepSpecificList
	* @description Prepares the model for step specific targets and sets the step specific targets
	* */
	_prepareStepSpecificList : function() {
		var self = this;
		var aModifiedStepSpecificTargets = [];
		var aAllNavTarget = this.oConfigurationEditor.getNavigationTargets();//Get all the navigation targets in a configuration
		var aStepSpecificNavTargets = this.step.getNavigationTargets();//Get all the navigation targets assigned to the current step
		var aAllStepSpecificNavTargets = aAllNavTarget.filter(function(oNavTarget) {//Filter aAllNavTarget to get only step specific navigation targets
			return oNavTarget.isStepSpecific();
		});
		//If configuration has step specific navigation targets set a busy indicator on the control until texts are read
		if (aAllStepSpecificNavTargets.length !== 0) {
			this.byId("idStepSpecificCombo").setBusy(true);
		}
		aAllStepSpecificNavTargets.forEach(function(oStepSpecificNavTarget) {
			var oNavTarget = {};
			oNavTarget.navTargetKey = oStepSpecificNavTarget.getId();
			self.getNavigationTargetName(oStepSpecificNavTarget.getId()).then(function(value) {
				oNavTarget.navTargetName = value;
				aModifiedStepSpecificTargets.push(oNavTarget);//Push modified step specific target into array
				if (aModifiedStepSpecificTargets.length === aAllStepSpecificNavTargets.length) {
					var stepSpecificModel = new sap.ui.model.json.JSONModel();
					var oStepSpecificData = {
						stepSpecific : aModifiedStepSpecificTargets
					};
					stepSpecificModel.setData(oStepSpecificData);
					self.byId("idStepSpecificCombo").setModel(stepSpecificModel);
					self.byId("idStepSpecificCombo").setSelectedKeys(aStepSpecificNavTargets);//Set navigation targets assigned to the step as selected
					//Remove busy indicator once the model is set on the control
					self.byId("idStepSpecificCombo").setBusy(false);
				}
			});
		});
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.step#_prepareGlobalList
	* @description Prepares the model for global targets and sets the global targets
	* */
	_prepareGlobalList : function() {
		var self = this;
		var aModifiedGlobalTargets = [];
		var aAllNavTarget = this.oConfigurationEditor.getNavigationTargets();//Get all the navigation targets in a configuration
		var aGlobalNavTargets = aAllNavTarget.filter(function(oNavTarget) {//Filter aAllNavTarget to get only global navigation targets
			return oNavTarget.isGlobal();
		});
		//If configuration has global navigation targets set a busy indicator on the control until texts are read
		if (aGlobalNavTargets.length !== 0) {
			this.byId("idGlobalCombo").setBusy(true);
		}
		aGlobalNavTargets = aGlobalNavTargets.map(function(oGlobalNavTarget) {
			return oGlobalNavTarget.getId();
		});
		aGlobalNavTargets.forEach(function(oGlobalTarget) {
			var oGlobalNavTarget = {};
			oGlobalNavTarget.navTargetKey = oGlobalTarget;
			self.getNavigationTargetName(oGlobalTarget).then(function(value) {
				oGlobalNavTarget.navTargetName = value;
				aModifiedGlobalTargets.push(oGlobalNavTarget);//Push modified global target into array
				if (aModifiedGlobalTargets.length === aGlobalNavTargets.length) {
					var globalModel = new sap.ui.model.json.JSONModel();
					var oGlobalData = {
						global : aModifiedGlobalTargets
					};
					globalModel.setData(oGlobalData);
					self.byId("idGlobalCombo").setModel(globalModel);
					self.byId("idGlobalCombo").setSelectedKeys(aGlobalNavTargets);//Set all global targets as selected
					//Remove busy indicator once the model is set on the control
					self.byId("idGlobalCombo").setBusy(false);
				}
			});
		});
	},
	/**
	* @private
	* @function
	* @name sap.apf.modeler.ui.controller.step#setDetailData
	* @description Sets dynamic texts for controls
	* */
	setDetailData : function() {
		var self = this;
		var Categories = [];
		this.oTextPool = this.oConfigurationHandler.getTextPool();
		var aAllCategories = this.oConfigurationEditor.getCategories();
		aAllCategories.forEach(function(oCategory) {
			var oCatOb = {};
			oCatOb.CategoryId = oCategory.getId();
			oCatOb.CategoryTitle = self.oTextPool.get(oCategory.labelKey) ? self.oTextPool.get(oCategory.labelKey).TextElementDescription : oCategory.labelKey;
			Categories.push(oCatOb);
		});
		var oData = {
			Categories : Categories
		};
		var oModel = new sap.ui.model.json.JSONModel();
		oModel.setData(oData);
		this.byId("idCategorySelect").setModel(oModel);
		var oProp = {
			propertyKey : this.getText("none"),
			propertyName : this.getText("none")
		};
		var oDataForPropertiesSel = {
			Properties : [ oProp ]
		};
		var oModelForSelectables = new sap.ui.model.json.JSONModel();
		oModelForSelectables.setSizeLimit(500);
		oModelForSelectables.setData(oDataForPropertiesSel);
		this.byId("idReqFilterSelect").setModel(oModelForSelectables);
		var aSelectPropertiesForTargetFilter = [];
		var oSelectedPropertiesForTargetFilter = this.byId("idFilterMapTargetFilterCombo") ? this.byId("idFilterMapTargetFilterCombo").getSelectedKeys() : [];
		oSelectedPropertiesForTargetFilter.forEach(function(property) { //selected properties from the combo box
			var oProp = {};
			oProp.propertyKey = property;
			oProp.propertyName = property;
			aSelectPropertiesForTargetFilter.push(oProp);
		});
		var oModelForTargetFilter = new sap.ui.model.json.JSONModel();
		oModelForTargetFilter.setSizeLimit(500);
		oModelForTargetFilter.setData(aSelectPropertiesForTargetFilter);
		//all the selected properties will be displayed in the target filter property dropdown, none will not be displayed as one property has to be selected
		this.byId("idFilterMapTargetFilterCombo").setModel(oModelForTargetFilter);
		if (this.params && this.params.arguments && this.params.arguments.stepId) {
			this.step = this.oConfigurationEditor.getStep(this.params.arguments.stepId);
		}
		if (this.step) { //for existing step
			var sNone = this.getText("none");
			var noneProperties = [ sNone ];
			//Setting the value for title for a step
			if (this.step.getTitleId && this.step.getTitleId() !== undefined && this.step.getTitleId() !== null && self.oTextPool.get(this.step.getTitleId())) {
				this.byId("idstepTitle").setValue(self.oTextPool.get(this.step.getTitleId()).TextElementDescription);
			} else {
				this.byId("idstepTitle").setValue(this.params.arguments.stepId);
			}
			//Setting the value for long title for a step
			if (this.step.getLongTitleId && this.step.getLongTitleId() !== undefined && this.step.getLongTitleId() !== null && self.oTextPool.get(this.step.getLongTitleId())) {
				this.byId("idstepLongTitle").setValue(self.oTextPool.get(this.step.getLongTitleId()).TextElementDescription);
			} else {
				this.byId("idstepLongTitle").setValue("");
			}
			//Setting the value for data source for a step
			if (this.step.getService && this.step.getService() !== undefined && this.step.getService() !== null) {
				this.byId("idSourceSelect").setValue(this.step.getService());
				var sSource = this.step.getService();
				var aAllEntitySets = [];
				var aAllEntitySetsForControll = [];
				aAllEntitySets = this.oConfigurationEditor.getAllEntitySetsOfService(sSource);
				aAllEntitySets.forEach(function(entiset) {
					var oEntitySet = {};
					oEntitySet.entityKey = entiset;
					oEntitySet.entityName = entiset;
					aAllEntitySetsForControll.push(oEntitySet);
				});
				var oDataForEntitySets = {
					Entities : aAllEntitySetsForControll
				};
				var oModelForEntitySet = new sap.ui.model.json.JSONModel();
				oModelForEntitySet.setSizeLimit(500);
				oModelForEntitySet.setData(oDataForEntitySets);
				this.byId("idEntitySelect").setModel(oModelForEntitySet);
			}
			//Setting the value for entity sets for a step
			if (this.step.getEntitySet && this.step.getEntitySet() !== undefined && this.step.getEntitySet() !== null) {
				this.byId("idEntitySelect").setSelectedKey(this.step.getEntitySet());
				var sEntity = this.step.getEntitySet();
				var sServiceRoot = this.step.getService();
				var aProperties = [], aPropertiesForControl = [];
				if (sServiceRoot && sServiceRoot !== null && sServiceRoot !== "") {
					aProperties = this.oConfigurationEditor.getAllPropertiesOfEntitySet(sServiceRoot, sEntity);
					aProperties.forEach(function(property) {
						var oProp = {};
						oProp.propertyKey = property;
						oProp.propertyName = property;
						aPropertiesForControl.push(oProp);
					});
					var oDataForProperties = {
						Properties : aPropertiesForControl
					};
					var oModelForSelProp = new sap.ui.model.json.JSONModel();
					oModelForSelProp.setSizeLimit(500);
					oModelForSelProp.setData(oDataForProperties);
					this.byId("idSelectPropCombo").setModel(oModelForSelProp);
				}
			}
			//Setting the value for select properties for a step
			if (this.step.getSelectProperties && this.step.getSelectProperties() !== undefined && this.step.getSelectProperties().length !== 0) {
				this.byId("idSelectPropCombo").setSelectedKeys(this.step.getSelectProperties());
				aProperties = noneProperties.concat(this.step.getSelectProperties());
				aPropertiesForControl = [];
				aProperties.forEach(function(property) {
					var oProp = {};
					oProp.propertyKey = property;
					oProp.propertyName = property;
					aPropertiesForControl.push(oProp);
				});
				oDataForPropertiesSel = {
					Properties : aPropertiesForControl
				};
				oModelForSelectables = new sap.ui.model.json.JSONModel();
				oModelForSelectables.setSizeLimit(500);
				oModelForSelectables.setData(oDataForPropertiesSel);
				this.byId("idReqFilterSelect").setModel(oModelForSelectables);
			}
			//Setting the value for required filter for a step
			if (this.step.getFilterProperties && this.step.getFilterProperties() !== undefined && this.step.getFilterProperties().length !== 0) {
				this.byId("idReqFilterSelect").setSelectedKey(this.step.getFilterProperties()[0]);
				this._showFilterMappingField();
			} else {
				this.byId("idReqFilterSelect").setSelectedKey(this.getText("none"));
				this._hideAndResetFilterMapField();
			}
			//Setting the value for data source for filter mapping of a step
			if (this.step.getFilterMappingService && this.step.getFilterMappingService() !== undefined && this.step.getFilterMappingService().length !== 0) {
				this.byId("idFilterMapSourceSelect").setValue(this.step.getFilterMappingService());
				var sFilterMapSource = this.step.getFilterMappingService();
				var aFilterMapAllEntitySets = [];
				var aFilterMapAllEntitySetsForControl = [];
				var aRequiredProperties = this.step.getFilterProperties();
				aFilterMapAllEntitySets = this.oConfigurationEditor.getAllEntitySetsOfServiceWithGivenProperties(sFilterMapSource, aRequiredProperties);
				aFilterMapAllEntitySets.forEach(function(entity) {
					var oEntitySetFilterMap = {};
					oEntitySetFilterMap.entityKey = entity;
					oEntitySetFilterMap.entityName = entity;
					aFilterMapAllEntitySetsForControl.push(oEntitySetFilterMap);
				});
				var oDataForFilterMapEntitySets = {
					Entities : aFilterMapAllEntitySetsForControl
				};
				var oModelForFilterMapEntitySet = new sap.ui.model.json.JSONModel();
				oModelForFilterMapEntitySet.setSizeLimit(500);
				oModelForFilterMapEntitySet.setData(oDataForFilterMapEntitySets);
				this.byId("idFilterMapEntitySelect").setModel(oModelForFilterMapEntitySet);
				this._addMandatoryfromFilterMap(); //valid service selected, make other fields in filter mapping mandatory
			} else {// if the service was not saved then reset the filter mapping fields
				this._removeMandatoryFromFilterMap(); // removes the mandatory tag 
				this._resetFilterMappingFields();//reset the values from the filter mapping properties and clears the selected keys in control
			}
			//Setting the value for entity sets for filter mapping of a step
			if (this.step.getFilterMappingEntitySet && this.step.getFilterMappingEntitySet() !== undefined && this.step.getFilterMappingEntitySet().length !== 0) {
				this.byId("idFilterMapEntitySelect").setSelectedKey(this.step.getFilterMappingEntitySet());
				var sFilterMapEntity = this.step.getFilterMappingEntitySet();
				var sFilterMapServiceRoot = this.step.getFilterMappingService();
				var aFilterMapProperties = [], aPropertiesForFilterMapControl = [];
				if (sFilterMapServiceRoot && sFilterMapServiceRoot !== null && sFilterMapServiceRoot !== "") {
					aFilterMapProperties = this.oConfigurationEditor.getAllPropertiesOfEntitySet(sFilterMapServiceRoot, sFilterMapEntity);
					aFilterMapProperties.forEach(function(property) {
						var oProp = {};
						oProp.propertyKey = property;
						oProp.propertyName = property;
						aPropertiesForFilterMapControl.push(oProp);
					});
					var oDataForFilterMapProperties = {
						Properties : aPropertiesForFilterMapControl
					};
					var oModelForFilterMapSelProp = new sap.ui.model.json.JSONModel();
					oModelForFilterMapSelProp.setSizeLimit(500);
					oModelForFilterMapSelProp.setData(oDataForFilterMapProperties);
					this.byId("idFilterMapTargetFilterCombo").setModel(oModelForFilterMapSelProp);
				}
			}
			//Setting the value for target property for filter mapping of a step
			if (this.step.getFilterMappingTargetProperties && this.step.getFilterMappingTargetProperties() !== undefined && this.step.getFilterMappingTargetProperties().length !== 0) {
				this.byId("idFilterMapTargetFilterCombo").setSelectedKeys(this.step.getFilterMappingTargetProperties());
			}
			//Setting the value for keep source checkbox for filter mapping of a step
			if (this.step.getFilterMappingKeepSource && this.step.getFilterMappingKeepSource() !== undefined) {
				this.byId("idFilterKeepSourceCheckBox").setSelected(this.step.getFilterMappingKeepSource());
			}
			//Setting the value of categories of a step
			var aSelectedCategories = self.oConfigurationEditor.getCategoriesForStep(this.step.getId());
			if (aSelectedCategories && aSelectedCategories.length !== 0) {
				this.byId("idCategorySelect").setSelectedKeys(aSelectedCategories);
			}
			//Setting the value of left lower corner text of a step
			if (this.step.getLeftLowerCornerTextKey() && self.oTextPool.get(this.step.getLeftLowerCornerTextKey())) {
				this.byId("idLeftBottom").setValue(self.oTextPool.get(this.step.getLeftLowerCornerTextKey()).TextElementDescription);
			} else {
				this.byId("idLeftBottom").setValue(this.step.getLeftLowerCornerTextKey());
			}
			//Setting the value of left upper corner text of a step
			if (this.step.getLeftUpperCornerTextKey() && self.oTextPool.get(this.step.getLeftUpperCornerTextKey())) {
				this.byId("idLeftTop").setValue(self.oTextPool.get(this.step.getLeftUpperCornerTextKey()).TextElementDescription);
			} else {
				this.byId("idLeftTop").setValue(this.step.getLeftUpperCornerTextKey());
			}
			//Setting the value of right upper corner text of a step
			if (this.step.getRightUpperCornerTextKey() && self.oTextPool.get(this.step.getRightUpperCornerTextKey())) {
				this.byId("idRightTop").setValue(self.oTextPool.get(this.step.getRightUpperCornerTextKey()).TextElementDescription);
			} else {
				this.byId("idRightTop").setValue(this.step.getRightUpperCornerTextKey());
			}
			//Setting the value of right lower corner text of a step
			if (this.step.getRightLowerCornerTextKey() && self.oTextPool.get(this.step.getRightLowerCornerTextKey())) {
				this.byId("idRightBottom").setValue(self.oTextPool.get(this.step.getRightLowerCornerTextKey()).TextElementDescription);
			} else {
				this.byId("idRightBottom").setValue(this.step.getRightLowerCornerTextKey());
			}
		} else { //for new step
			var sCategoryId = this.params.arguments.categoryId;
			var sStepId = self.oConfigurationEditor.createStep(sCategoryId);
			this.step = self.oConfigurationEditor.getStep(sStepId);
			var selectedCategory = [ sCategoryId ];
			this.byId("idCategorySelect").setSelectedKeys(selectedCategory);
			var stepInfo = {
				id : sStepId,
				icon : "sap-icon://BusinessSuiteInAppSymbols/icon-phase"
			};
			this.oViewData.updateSelectedNode(stepInfo);
		}
		this._addAutoCompleteFeatureOnInputs();
		this._prepareGlobalList();
		this._prepareStepSpecificList();
	},
	handleChangeDetailValueForTree : function(oEvent) {
		this.oConfigurationEditor.setIsUnsaved();
		var self = this;
		var aStepCategories = this.oConfigurationEditor.getCategoriesForStep(this.step.getId());
		var oTranslationFormat = sap.apf.modeler.ui.utils.TranslationFormatMap.STEP_TITLE;
		var sStepTitle = this.byId("idstepTitle").getValue().trim();
		var sStepTitleId = self.oTextPool.setText(sStepTitle, oTranslationFormat);
		if (sStepTitle !== "" && sStepTitle !== null) {
			this.step.setTitleId(sStepTitleId);
		}
		var stepInfo = {};
		stepInfo.name = sStepTitle;
		stepInfo.id = this.step.getId();
		if (sStepTitle !== "" && sStepTitle !== null) {
			if (aStepCategories.length > 1) {//In case the step is only assigned to one category
				this.oViewData.updateTree();
			} else {//In case the step is assigned to multiple categories, context of step and the list of categories is passed
				this.oViewData.updateSelectedNode(stepInfo);
			}
			var sTitle = this.getText("step") + ": " + sStepTitle;
			this.oViewData.updateTitleAndBreadCrumb(sTitle);
		}
		
	},
	handleChangeForLongTitle : function() {
		this.oConfigurationEditor.setIsUnsaved();
		var sStepLongTitle = this.byId("idstepLongTitle").getValue().trim();
		var oTranslationFormat = sap.apf.modeler.ui.utils.TranslationFormatMap.STEP_LONG_TITLE;
		var sStepLongTitleId = this.oTextPool.setText(sStepLongTitle, oTranslationFormat);
		this.step.setLongTitleId(sStepLongTitleId);
	},
	/**
	 * @function
	 * @name sap.apf.modeler.ui.controller.step# handleChangeForStepSpecific
	 * @description handler for the step specific navigation target control
	 * Assigns the selected step specific navigation targets to the step
	 * */
	handleChangeForStepSpecific : function() {
		var self = this;
		this.oConfigurationEditor.setIsUnsaved();
		var selectedNavTargets = this.byId("idStepSpecificCombo").getSelectedKeys();
		var prevNavTargets = this.step.getNavigationTargets();
		prevNavTargets.forEach(function(navTargetId) { //Remove the old assigned navigation targets from the step it was assigned to and are unselected now
			if (selectedNavTargets.indexOf(navTargetId) === -1) {
				self.step.removeNavigationTarget(navTargetId);
			}
		});
		selectedNavTargets.forEach(function(navTargetId) {
			if (prevNavTargets.indexOf(navTargetId) === -1) { //Add the selected navigation targets to the step
				self.step.addNavigationTarget(navTargetId);
			}
		});
	},
	/**
	 * @function
	 * @name sap.apf.modeler.ui.controller.step# handleChangeForService
	 * @description handler for the "service" property of the step request or filter mapping based on the event
	 * Checks the id of the source control and sets the value for request service or filter mapping service
	 * Reads all the entity set for the given source.
	 * Also , retrieves all the entities based on the required filters from the given source for filter mapping. 
	 * Checks if all the properties (entity, properties etc ) are valid for a given service and empties these properties if the service is invalid.
	 * */
	handleChangeForService : function(oEvent) {
		this.oConfigurationEditor.setIsUnsaved();
		var sSource, aAllEntitySets = [], aAllEntitySetsForControl = [], aProperties = [], aSelectPropertiesForControl = [], aRequiredProperties;
		var sSelectedRequiredFilter = this.byId("idReqFilterSelect").getSelectedKey();
		if (sSelectedRequiredFilter !== this.getText("none")) {
			aRequiredProperties = [ sSelectedRequiredFilter ]; // required filter from the step
		} else {
			aRequiredProperties = this.step.getFilterProperties();
		}
		var soruceControlId = oEvent ? oEvent.getParameter("id") : "";
		var bIsfilterMapControl = soruceControlId.search("FilterMap") !== -1 ? true : false;
		var bServiceRegistered;
		if (bIsfilterMapControl) {
			sSource = this.byId("idFilterMapSourceSelect").getValue().trim();
			bServiceRegistered = this.oConfigurationEditor.registerService(sSource);
			if (bServiceRegistered) {
				this._addMandatoryfromFilterMap(); //valid service selected, make other fields in filter mapping mandatory
				aAllEntitySets = this.oConfigurationEditor.getAllEntitySetsOfServiceWithGivenProperties(sSource, aRequiredProperties);
			} else {
				this._removeMandatoryFromFilterMap(); //remove mandatory tag from the filter mapping fields
			}
		} else {
			if (sSelectedRequiredFilter === this.getText("none") || sSelectedRequiredFilter === "") {//hide the filter mapping field on change of service when required filter is empty or none
				this._hideAndResetFilterMapField();
			} else { // reset the filter mapping 
				this._removeMandatoryFromFilterMap(); // removes the mandatory tag 
				this._resetFilterMappingFields();//reset the values from the filter mapping properties and clears the selected keys in control
			}
			sSource = this.byId("idSourceSelect").getValue().trim();
			bServiceRegistered = this.oConfigurationEditor.registerService(sSource);
			aAllEntitySets = this.oConfigurationEditor.getAllEntitySetsOfService(sSource);
		}
		aAllEntitySets.forEach(function(entitySet) {
			var oEntitySet = {};
			oEntitySet.entityKey = entitySet;
			oEntitySet.entityName = entitySet;
			aAllEntitySetsForControl.push(oEntitySet);
		});
		var oEntitySetData = {
			Entities : aAllEntitySetsForControl
		};
		var oEntitySetModel = new sap.ui.model.json.JSONModel();
		oEntitySetModel.setSizeLimit(500);
		oEntitySetModel.setData(oEntitySetData);
		var sEntitySet;
		if (aAllEntitySets.length >= 1) { //set default entity set
			if (bIsfilterMapControl) { //for filter mapping entity set
				if (this.step.getFilterMappingEntitySet()) {
					sEntitySet = this.step.getFilterMappingEntitySet();
					aProperties = this.oConfigurationEditor.getAllPropertiesOfEntitySet(sSource, sEntitySet);
				} else {
					aProperties = this.oConfigurationEditor.getAllPropertiesOfEntitySet(sSource, aAllEntitySets[0]);
				}
				this.step.setFilterMappingEntitySet(aAllEntitySets[0]);
				this.byId("idFilterMapEntitySelect").setSelectedKey(aAllEntitySets[0]);
			} else {
				if (this.step.getEntitySet()) { //for data source entity set
					sEntitySet = this.step.getEntitySet();
					aProperties = this.oConfigurationEditor.getAllPropertiesOfEntitySet(sSource, sEntitySet);
				} else {
					aProperties = this.oConfigurationEditor.getAllPropertiesOfEntitySet(sSource, aAllEntitySets[0]);
				}
				this.step.setEntitySet(aAllEntitySets[0]);
				this.byId("idEntitySelect").setSelectedKey(aAllEntitySets[0]);
			}
			aProperties.forEach(function(property) {
				var oProp = {};
				oProp.propertyKey = property;
				oProp.propertyName = property;
				aSelectPropertiesForControl.push(oProp);
			});
		}
		var oSelectPropertiesData = {
			Properties : aSelectPropertiesForControl
		};
		var oSelectPropertiesModel = new sap.ui.model.json.JSONModel();
		oSelectPropertiesModel.setSizeLimit(500);
		oSelectPropertiesModel.setData(oSelectPropertiesData);
		var aSelectPropertiesForRequiredFilter = [], aSelectPropertiesForTargetFilter = [];
		var oSelectedPropertiesForRequiredFilter = this.byId("idSelectPropCombo").getSelectedKeys();
		oSelectedPropertiesForRequiredFilter.forEach(function(property) { //selected properties from the combo box
			var oProp = {};
			oProp.propertyKey = property;
			oProp.propertyName = property;
			aSelectPropertiesForRequiredFilter.push(oProp);
		});
		var noneTextobj = {
			propertyKey : this.getText("none"),
			propertyName : this.getText("none")
		};
		var aNoneTextObject = [ noneTextobj ];
		aNoneTextObject = aNoneTextObject.concat(aSelectPropertiesForRequiredFilter);
		var oRequiredFilterMapProertyModel = new sap.ui.model.json.JSONModel();
		oRequiredFilterMapProertyModel.setSizeLimit(500);
		var oDataForReqFilter = {
			Properties : aNoneTextObject
		};
		oRequiredFilterMapProertyModel.setData(oDataForReqFilter);
		var oSelectedPropertiesForTargetFilter = this.byId("idFilterMapTargetFilterCombo") ? this.byId("idFilterMapTargetFilterCombo").getSelectedKeys() : [];
		oSelectedPropertiesForTargetFilter.forEach(function(property) { //selected properties from the combo box
			var oProp = {};
			oProp.propertyKey = property;
			oProp.propertyName = property;
			aSelectPropertiesForTargetFilter.push(oProp);
		});
		if (bIsfilterMapControl) {
			this.byId("idFilterMapEntitySelect").setModel(oEntitySetModel);
			this.byId("idFilterMapTargetFilterCombo").setModel(oSelectPropertiesModel);
		} else {
			this.byId("idEntitySelect").setModel(oEntitySetModel);
			this.byId("idSelectPropCombo").setModel(oSelectPropertiesModel);
			this.byId("idReqFilterSelect").setModel(oRequiredFilterMapProertyModel);
		}
		this._checkValidationStateForService("source", soruceControlId);
	},
	/**
	 * @function
	 * @private 
	 * @name sap.apf.modeler.ui.controller.step# _addMandatoryfromFilterMap
	 * @description add the mandatory tags to all the fields in the filter mapping if the service is valid
	 * */
	_addMandatoryfromFilterMap : function() {
		this.byId("idFilterMapEntitySelect").isMandatory = true;
		this.byId("idFilterMapTargetFilterCombo").isMandatory = true;
		this.byId("idFilterMapEntityLabel").setText(this.getText("entity"));
		this.byId("idFilterMapEntityLabel").setRequired(true);
		this.byId("idFilterMapTargetFilterLabel").setText(this.getText("filterMapTarget"));
		this.byId("idFilterMapTargetFilterLabel").setRequired(true);
		this.byId("idFilterMapKeepSourceLabel").setText(this.getText("filterMapKeepSource"));
		this.byId("idFilterMapKeepSourceLabel").setRequired(true);
	},
	/**
	 * @function
	 * @private 
	 * @name sap.apf.modeler.ui.controller.step# _removeMandatoryFromFilterMap
	 * @description removes the mandatory tags to all the fields in the filter mapping if the service is invalid
	 * */
	_removeMandatoryFromFilterMap : function() {
		this.byId("idFilterMapEntitySelect").isMandatory = false;
		this.byId("idFilterMapTargetFilterCombo").isMandatory = false;
		this.byId("idFilterMapEntityLabel").setText(this.getText("entity"));
		this.byId("idFilterMapEntityLabel").setRequired(false);
		this.byId("idFilterMapTargetFilterLabel").setText(this.getText("filterMapTarget"));
		this.byId("idFilterMapTargetFilterLabel").setRequired(false);
		this.byId("idFilterMapKeepSourceLabel").setText(this.getText("filterMapKeepSource"));
		this.byId("idFilterMapKeepSourceLabel").setRequired(false);
	},
	/**
	 * @function
	 * @private 
	 * @name sap.apf.modeler.ui.controller.step# _resetFilterMappingFields
	 * Resets all the values for the filter mapping properties (service, entitySet, select properties, target filter and keep source)
	 * and clears all the data and selected values from the controls
	 * */
	_resetFilterMappingFields : function() {
		var self = this;
		this.step.setFilterMappingService("");
		this.step.setFilterMappingEntitySet(undefined);
		this.step.setFilterMappingKeepSource(undefined);
		var aOldFilterMapTargetProperty = this.step.getFilterMappingTargetProperties();
		aOldFilterMapTargetProperty.forEach(function(property) {
			self.step.removeFilterMappingTargetProperty(property);
		});
		//set an empty model to the controls on the UI
		var oEmptyModelForControlOnReset = new sap.ui.model.json.JSONModel();
		var oEmptyDateSetForControlOnReset = {
			NoData : []
		};
		oEmptyModelForControlOnReset.setData(oEmptyDateSetForControlOnReset);
		this.byId("idFilterMapSourceSelect").setValue("");
		this.byId("idFilterMapEntitySelect").setModel(oEmptyModelForControlOnReset);
		this.byId("idFilterMapEntitySelect").setSelectedKey();
		this.byId("idFilterMapTargetFilterCombo").setModel(oEmptyModelForControlOnReset);
		var aSelectedKeys = this.byId("idFilterMapTargetFilterCombo").getSelectedKeys();
		this.byId("idFilterMapTargetFilterCombo").removeSelectedKeys(aSelectedKeys);
	},
	/**
	 * @function
	 * @name sap.apf.modeler.ui.controller.step# handleChangeForEntity
	 * @description handler for the "entity" property of the step request or filter mapping based on the event
	 * Checks the id of the source control and sets the value for request entity or filter mapping entity
	 * Reads all the properties for the given source and entity and updates the select properties based on entity.
	 * */
	handleChangeForEntity : function(oEvent) {
		this.oConfigurationEditor.setIsUnsaved();
		var sEntity, sService, aProperties = [], aPropertiesForControl = [];
		var soruceControlId = oEvent.getParameter("id");
		var bIsfilterMapControl = soruceControlId.search("FilterMap") !== -1 ? true : false;
		if (bIsfilterMapControl) {
			sEntity = this.byId("idFilterMapEntitySelect").getSelectedKey();
			sService = this.byId("idFilterMapSourceSelect").getValue().trim();
			aProperties = this.oConfigurationEditor.getAllPropertiesOfEntitySet(sService, sEntity);
		} else {
			sEntity = this.byId("idEntitySelect").getSelectedKey();
			sService = this.byId("idSourceSelect").getValue().trim();
			aProperties = this.oConfigurationEditor.getAllPropertiesOfEntitySet(sService, sEntity);
		}
		aProperties.forEach(function(property) {
			var oProp = {};
			oProp.propertyKey = property;
			oProp.propertyName = property;
			aPropertiesForControl.push(oProp);
		});
		var oSelectPropertiesData = {
			Properties : aPropertiesForControl
		};
		var oSelectPropertyModel = new sap.ui.model.json.JSONModel();
		oSelectPropertyModel.setSizeLimit(500);
		oSelectPropertyModel.setData(oSelectPropertiesData);
		var noneTextobj = {
			propertyKey : this.getText("none"),
			propertyName : this.getText("none")
		};
		var aRequiredPropertiesControl = [ noneTextobj ];
		aRequiredPropertiesControl = aRequiredPropertiesControl.concat(aPropertiesForControl);
		var oRequiredFilterMapProertyModel = new sap.ui.model.json.JSONModel();
		oRequiredFilterMapProertyModel.setSizeLimit(500);
		var oDataForReqFilter = {
			Properties : aRequiredPropertiesControl
		};
		oRequiredFilterMapProertyModel.setData(oDataForReqFilter);
		var oTargetFilterMapProertyModel = new sap.ui.model.json.JSONModel();
		oTargetFilterMapProertyModel.setSizeLimit(500);
		oTargetFilterMapProertyModel.setData(aPropertiesForControl);
		if (bIsfilterMapControl) {
			this.byId("idFilterMapTargetFilterCombo").setModel(oSelectPropertyModel);
		} else {
			this.byId("idSelectPropCombo").setModel(oSelectPropertyModel);
			this.byId("idReqFilterSelect").setModel(oRequiredFilterMapProertyModel);
		}
		this._checkValidationStateForService("entitySet", soruceControlId);
		var sRequiredFilter = this.byId("idReqFilterSelect").getSelectedKey();
		if (sRequiredFilter === this.getText("none")) {
			this._hideAndResetFilterMapField();
		}
	},
	/**
	 * @function
	 * @name sap.apf.modeler.ui.controller.step# handleChangeForSelectProperty
	 * @description handler for the "select property" of the step request or filter mapping based on the event
	 * Checks the id of the source control and sets the value for request select property or filter mapping select property 
	 * Also updates the properties in the required filter list
	 * */
	handleChangeForSelectProperty : function(oEvent) {
		var self = this;
		this.oConfigurationEditor.setIsUnsaved();
		var aSelectProperty, aSelectPropertiesForControl = [];
		var soruceControlId = oEvent.getParameter("id");
		aSelectProperty = this.byId("idSelectPropCombo").getSelectedKeys();
		aSelectProperty.forEach(function(property) {
			self.step.addSelectProperty(property);
			var oProp = {};
			oProp.propertyKey = property;
			oProp.propertyName = property;
			aSelectPropertiesForControl.push(oProp);
		});
		var noneTextobj = {
			propertyKey : this.getText("none"),
			propertyName : this.getText("none")
		};
		var aRequiredPropertiesControl = [ noneTextobj ];
		aRequiredPropertiesControl = aRequiredPropertiesControl.concat(aSelectPropertiesForControl);
		var oRequiredFilterMapProertyModel = new sap.ui.model.json.JSONModel();
		oRequiredFilterMapProertyModel.setSizeLimit(500);
		var oDataForReqFilter = {
			Properties : aRequiredPropertiesControl
		};
		oRequiredFilterMapProertyModel.setData(oDataForReqFilter);
		var oTargetFilterMapProertyModel = new sap.ui.model.json.JSONModel();
		oTargetFilterMapProertyModel.setSizeLimit(500);
		oTargetFilterMapProertyModel.setData(aSelectPropertiesForControl);
		this.byId("idReqFilterSelect").setModel(oRequiredFilterMapProertyModel);
		this._checkValidationStateForService("selectProperties", soruceControlId);
		var sRequiredFilter = this.byId("idReqFilterSelect").getSelectedKey(); //hide the filter mapping fields if required property is none
		if (sRequiredFilter === this.getText("none")) {
			this._hideAndResetFilterMapField();
		}
	},
	/**
	 * @function
	 * @name sap.apf.modeler.ui.controller.step# handleChangeForRequiredFilter
	 * @description handler for the "Required filter" of the step request
	 * Shows and hides the filter mapping field based on required filter availibility in the step
	 * Updates the entity sets present in the filter mapping based on the required filters
	 * */
	handleChangeForRequiredFilter : function(oEvent) {
		var self = this;
		var soruceControlId = oEvent.getParameter("id");
		this.oConfigurationEditor.setIsUnsaved();
		var aOldSelProp = this.step.getFilterProperties();
		aOldSelProp.forEach(function(property) {
			self.step.removeFilterProperty(property);
		});
		var sRequiredFilter = this.byId("idReqFilterSelect").getSelectedKey();
		if (sRequiredFilter !== this.getText("none")) {
			this.step.addFilterProperty(sRequiredFilter);
			this._showFilterMappingField();//show filter mapping field on UI if there is a required filter
		} else {
			this._hideAndResetFilterMapField();//hide filter mapping field from UI if there is no required filter
		}
		this._checkValidationStateForService("requiredFilter", soruceControlId);
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.step# _showFilterMappingField
	 * @description shows the filter mapping field from UI if the required filter is available in the step
	 * */
	_showFilterMappingField : function() {
		this.byId("idFilterMapping").setVisible(true);
		this.byId("idFilterMapSourceLabel").setVisible(true);
		this.byId("idFilterMapSourceSelect").setVisible(true);
		this.byId("idFilterMapEntityLabel").setVisible(true);
		this.byId("idFilterMapEntitySelect").setVisible(true);
		this.byId("idFilterMapTargetFilterLabel").setVisible(true);
		this.byId("idFilterMapTargetFilterCombo").setVisible(true);
		this.byId("idFilterMapKeepSourceLabel").setVisible(true);
		this.byId("idFilterKeepSourceCheckBox").setVisible(true);
		this.byId("idFilterMapping").setTitle(this.getText("filterMap"));
		this.byId("idFilterMapSourceLabel").setText(this.getText("source"));
		this.byId("idFilterMapSourceLabel").setRequired(false);
		this.byId("idFilterMapEntityLabel").setText(this.getText("entity"));
		this.byId("idFilterMapEntityLabel").setRequired(false);
		this.byId("idFilterMapTargetFilterLabel").setText(this.getText("filterMapTarget"));
		this.byId("idFilterMapTargetFilterLabel").setRequired(false);
		this.byId("idFilterMapKeepSourceLabel").setText(this.getText("filterMapKeepSource"));
		this.byId("idFilterMapKeepSourceLabel").setRequired(false);
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.step# _hideAndResetFilterMapField
	 * @description hides the filter mapping field from UI if the required filter is not available in the step
	 * */
	_hideAndResetFilterMapField : function() {
		this.byId("idFilterMapping").setVisible(false);
		this.byId("idFilterMapSourceLabel").setVisible(false);
		this.byId("idFilterMapSourceSelect").setVisible(false);
		this.byId("idFilterMapEntityLabel").setVisible(false);
		this.byId("idFilterMapEntitySelect").setVisible(false);
		this.byId("idFilterMapTargetFilterLabel").setVisible(false);
		this.byId("idFilterMapTargetFilterCombo").setVisible(false);
		this.byId("idFilterMapKeepSourceLabel").setVisible(false);
		this.byId("idFilterKeepSourceCheckBox").setVisible(false);
		this._removeMandatoryFromFilterMap(); // removes the mandatory tag 
		this._resetFilterMappingFields();//reset the values from the filter mapping properties and clears the selected keys in control
	},
	/**
	 * @function
	 * @name sap.apf.modeler.ui.controller.step# handleChangeForTargetFilter
	 * @description handler for the "target property" of the filter mapping  
	 * sets the value of target filter on the step object
	 * */
	handleChangeForTargetFilter : function(oEvent) {
		var self = this;
		var soruceControlId = oEvent.getParameter("id");
		this.oConfigurationEditor.setIsUnsaved();
		var aTargetFilterMapProp = this.byId("idFilterMapTargetFilterCombo").getSelectedKeys();
		if (aTargetFilterMapProp.length > 0) { // if any value is selected then clear the previous value and add the new one , else retain the old values
			var aOldTargetProp = this.step.getFilterMappingTargetProperties();
			aOldTargetProp.forEach(function(property) {
				self.step.removeFilterMappingTargetProperty(property);
			});
			aTargetFilterMapProp.forEach(function(property) {
				self.step.addFilterMappingTargetProperty(property);
			});
		}
		this._checkValidationStateForService("targetProperties", soruceControlId);
	},
	/**
	 * @function
	 * @name sap.apf.modeler.ui.controller.step# handleFilterMapKeepSource
	 * @description handler for the "keep source" property of the filter mapping  
	 * sets the boolean value of the property on the step object
	 * */
	handleFilterMapKeepSource : function() {
		var bIsKeepSourceSelected = this.byId("idFilterKeepSourceCheckBox").getSelected();
		this.oConfigurationEditor.setIsUnsaved();
		this.step.setFilterMappingKeepSource(bIsKeepSourceSelected);
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.step#_checkValidationStateForService
	 * @param param - to determine which property has to be to validated ( e.g. source, entitySet etc) and based on it the other properties has to be checked and updated
	 * @param soruceControlId  - id of the control to determine if the property are being read from a request or filter mapping 
	 * @description chceks if the filter mapping of the step has all mandatory fields( i.e. entitySet, service, select properties and target filter are available in the step)  
	 * and sets the values on the step object
	 * */
	_checkValidationStateForService : function(param, soruceControlId) {
		var self = this;
		var oValidStep = {
			source : undefined,
			entitySet : undefined,
			selectProperty : undefined,
			requiredFilter : undefined,
			targetFilter : undefined
		};
		var sSource, aRequiredProperties, aAllEntitySets = [], aAllEntitySetsForControll = [];
		var bIsfilterMapControl = soruceControlId.search("FilterMap") !== -1 ? true : false;
		sSource = bIsfilterMapControl ? this.byId("idFilterMapSourceSelect").getValue().trim() : this.byId("idSourceSelect").getValue().trim();
		var bServiceRegistered = this.oConfigurationEditor.registerService(sSource);
		if (bServiceRegistered) {
			oValidStep.source = sSource;
			var sSelectedRequiredFilter = this.byId("idReqFilterSelect").getSelectedKey();
			if (sSelectedRequiredFilter !== this.getText("none")) {
				aRequiredProperties = [ sSelectedRequiredFilter ]; // required filter from the step
			} else {
				aRequiredProperties = this.step.getFilterProperties();
			}
			aAllEntitySets = bIsfilterMapControl ? this.oConfigurationEditor.getAllEntitySetsOfServiceWithGivenProperties(sSource, aRequiredProperties) : this.oConfigurationEditor.getAllEntitySetsOfService(sSource);
			var sSelectedEntity;
			if (param === "entitySet" || param === "selectProperties" || param === "targetProperties" || param === "requiredFilter") {
				sSelectedEntity = bIsfilterMapControl ? this.byId("idFilterMapEntitySelect").getSelectedKey() : this.byId("idEntitySelect").getSelectedKey();
			} else {
				sSelectedEntity = bIsfilterMapControl ? this.step.getFilterMappingEntitySet() : this.step.getEntitySet();
			}
			if (sSelectedEntity) {
				aAllEntitySets.forEach(function(entitySet) {
					if (sSelectedEntity === entitySet) {
						oValidStep.entitySet = sSelectedEntity;
						if (param === "source") {
							if (bIsfilterMapControl) {
								self.byId("idFilterMapEntitySelect").setSelectedKey(sSelectedEntity);
							} else {
								self.byId("idEntitySelect").setSelectedKey(sSelectedEntity);
							}
						}
					}
				});
				var aSelectProperties, aCommonProperty = [];
				if (param === "selectProperties") {
					aSelectProperties = this.byId("idSelectPropCombo").getSelectedKeys();
				} else {
					aSelectProperties = this.step.getSelectProperties();
				}
				var aProperties = this.oConfigurationEditor.getAllPropertiesOfEntitySet(sSource, sSelectedEntity); //TODO check
				var aPropertiesForControl = [];
				aProperties.forEach(function(propertyFromEntity) {
					var oProp = {};
					oProp.propertyKey = propertyFromEntity;
					oProp.propertyName = propertyFromEntity;
					aPropertiesForControl.push(oProp);
				});
				var oDataForProperties = {
					Properties : aPropertiesForControl
				};
				var oModelForSelProp = new sap.ui.model.json.JSONModel();
				oModelForSelProp.setSizeLimit(500);
				oModelForSelProp.setData(oDataForProperties);
				this.byId("idSelectPropCombo").setModel(oModelForSelProp);
				this.byId("idFilterMapTargetFilterCombo").setModel(oModelForSelProp);
				aProperties.forEach(function(propertyFromEntity) {
					aSelectProperties.forEach(function(propertyFromControl) {
						if (propertyFromControl === propertyFromEntity) {
							aCommonProperty.push(propertyFromControl);
						}
					});
				});
				var aPropertiesMapControl = [];
				var objNoneText = [ {
					propertyKey : this.getText("none"),
					propertyName : this.getText("none")
				} ];
				if (this.step.getFilterMappingTargetProperties().length === 0) {
					this.byId("idFilterMapTargetFilterCombo").setSelectedKeys([]);// if the target filter is not available then clear the selected items from the control
				}
				if (aCommonProperty.length > 0) {
					oValidStep.selectProperty = aCommonProperty;
					if (param !== "selectProperties") {
						this.byId("idSelectPropCombo").setSelectedKeys(aCommonProperty);
					}
					aCommonProperty.forEach(function(property) {
						var oProp = {};
						oProp.propertyKey = property;
						oProp.propertyName = property;
						aPropertiesMapControl.push(oProp);
					});
				} else { //clear the selected keys from the control if there is no common properties
					var selectedProperties;
					if (!bIsfilterMapControl) {
						selectedProperties = this.byId("idSelectPropCombo").getSelectedKeys();
						this.byId("idSelectPropCombo").removeSelectedKeys(selectedProperties);
						this.byId("idReqFilterSelect").setSelectedKey(this.getText("none"));
					}
				}
				objNoneText = objNoneText.concat(aPropertiesMapControl);
				var oRequiredOrFilterProperties = {
					Properties : objNoneText
				};
				var oRequiredOrFilterPropertyModel = new sap.ui.model.json.JSONModel();
				oRequiredOrFilterPropertyModel.setData(oRequiredOrFilterProperties);
				var aTargetProperties = [], aRequiredFilters = [];
				if (param === "targetProperties") {
					aTargetProperties = this.byId("idFilterMapTargetFilterCombo").getSelectedKeys();
				} else {
					aTargetProperties = this.step.getFilterMappingTargetProperties();
				}
				if (aTargetProperties.length > 0) {
					oValidStep.targetFilter = aTargetProperties;
					this.byId("idFilterMapTargetFilterCombo").setSelectedKeys(aTargetProperties);
				}
				if (param === "requiredFilter") {
					aRequiredFilters.push(this.byId("idReqFilterSelect").getSelectedKey());
				} else {
					aRequiredFilters = this.step.getFilterProperties();
				}
				var aRequiredFilterForValidStep = [];
				aRequiredFilters.forEach(function(requiredFilter) {
					if (requiredFilter !== self.getText("none")) {
						aPropertiesMapControl.forEach(function(oProperty) {
							if (oProperty.propertyKey === requiredFilter) {
								aRequiredFilterForValidStep.push(requiredFilter);
							}
						});
					}
				});
				if (aRequiredFilterForValidStep.length !== 0) {
					oValidStep.requiredFilter = aRequiredFilterForValidStep; //required filters from dropdown - not none text
				} else {
					if (!bIsfilterMapControl) {
						this.byId("idReqFilterSelect").setSelectedKey(this.getText("none"));
					}
				}
				//all the selected properties will be displayed in the target filter property dropdown, none will not be displayed as one property has to be selected
				var oTargetFilterProperties = {
					Properties : aPropertiesMapControl
				};
				var oTargetFilterMapProertyModel = new sap.ui.model.json.JSONModel();
				oTargetFilterMapProertyModel.setSizeLimit(500);
				oTargetFilterMapProertyModel.setData(oTargetFilterProperties);
				if (!bIsfilterMapControl) { //set the model for required filter /target filter
					this.byId("idReqFilterSelect").setModel(oRequiredOrFilterPropertyModel);
				}
			}
			if (bIsfilterMapControl) {
				this._validateStepServiceForFilterMapping(oValidStep);
			} else {
				this._validateStepServiceForDataSource(oValidStep);
			}
		} else { // if service is invalid , reset all the request properties
			if (bIsfilterMapControl) {
				this._resetFilterMappingFields(); //resets the filter mapping target property
			} else {
				this._resetStepRequestProperties();
			}
		}
	},
	/**
	 * @function
	 * @private 
	 * @name sap.apf.modeler.ui.controller.step# _resetStepRequestProperties
	 * Resets all the values for the step request properties (service, entitySet, select properties, required filter)
	 * */
	_resetStepRequestProperties : function() {
		var self = this;
		this.step.setEntitySet(undefined);
		var aOldSelectProperty = this.step.getSelectProperties();
		aOldSelectProperty.forEach(function(property) {
			self.step.removeSelectProperty(property);
		});
		var aOldRequiredFilterProperty = this.step.getFilterProperties();
		aOldRequiredFilterProperty.forEach(function(property) {
			self.step.removeFilterProperty(property);
		});
		this.byId("idEntitySelect").setSelectedKey();
		this.byId("idReqFilterSelect").setSelectedKey();
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.step#_validateStepServiceForDataSource
	 * @param {Step}  - step object 
	 * @description chceks if the data source of the step is has all mandatory fields (i.e. entitySet, service, select properties are available in the step)  
	 * and sets the values on the step object
	 * */
	_validateStepServiceForDataSource : function(oValidStep) {
		var self = this;
		if (oValidStep.selectProperty && oValidStep.entitySet && oValidStep.source) {
			this.step.setService(oValidStep.source);
			this.step.setEntitySet(oValidStep.entitySet);
			var aOldSelProp = this.step.getSelectProperties();
			aOldSelProp.forEach(function(property) {
				self.step.removeSelectProperty(property);
			});
			oValidStep.selectProperty.forEach(function(property) {
				self.step.addSelectProperty(property);
			});
			var aOldRequiredProp = this.step.getFilterProperties();
			aOldRequiredProp.forEach(function(property) {
				self.step.removeFilterProperty(property);
			});
			if (oValidStep.requiredFilter) {
				oValidStep.requiredFilter.forEach(function(property) {
					self.step.addFilterProperty(property);
				});
			}
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.step#_validateStepServiceForFilterMapping
	 * @param {Step}  - step object 
	 * @description chceks if the filter mapping of the step has all mandatory fields( i.e. entitySet, service, select properties and target filter are available in the step)  
	 * and sets the values on the step object
	 * */
	_validateStepServiceForFilterMapping : function(oValidStep) {
		var self = this;
		if (oValidStep.entitySet && oValidStep.source && oValidStep.targetFilter) {
			this.step.setFilterMappingService(oValidStep.source);
			this.step.setFilterMappingEntitySet(oValidStep.entitySet);
			var aOldFilterMapTargetProp = this.step.getFilterMappingTargetProperties();
			aOldFilterMapTargetProp.forEach(function(property) {
				self.step.removeFilterMappingTargetProperty(property);
			});
			oValidStep.targetFilter.forEach(function(property) {
				self.step.addFilterMappingTargetProperty(property);
			});
		}
	},
	handleChangeForCategory : function() {
		this.oConfigurationEditor.setIsUnsaved();
		var self = this;
		var stepId = self.step.getId();
		var currentCategoryId = this.params.arguments.categoryId;
		var aPreCat = this.oConfigurationEditor.getCategoriesForStep(this.step.getId());
		var sSelCategory = this.byId("idCategorySelect").getSelectedKeys();
		var currentCategoryChange = sSelCategory.indexOf(currentCategoryId);
		var aStepContexts = [];
		var unselectedCategories = [];
		var i, j;
		for(i = 0; i < aPreCat.length; i++) {
			var match = false;
			for(j = 0; j < sSelCategory.length; j++) {
				if (aPreCat[i] === sSelCategory[j]) {
					match = true;
					break;
				}
			}
			if (!match) {
				unselectedCategories.push(aPreCat[i]);
			}
		}
		if (sSelCategory.length !== 0) {
			sSelCategory.forEach(function(category) {
				self.oConfigurationEditor.addCategoryStepAssignment(category, stepId); //Add the step to the categories selected
				var oStepContext = {
					oldContext : {
						name : self.params.name,
						arguments : {
							configId : self.params.arguments.configId,
							categoryId : currentCategoryId,
							stepId : stepId
						}
					},
					newContext : {
						arguments : {
							configId : self.params.arguments.configId,
							categoryId : category
						}
					}
				};
				if (category !== currentCategoryId) {
					aStepContexts.push(oStepContext);
				}
			});
			aPreCat.forEach(function(sCatId) { //Remove the step from all the old categories it was present in
				if (sSelCategory.indexOf(sCatId) === -1) { // ... and that are not selected any more
					self.oConfigurationEditor.removeCategoryStepAssignment(sCatId, self.step.getId());
				}
			});
			if (unselectedCategories.length !== 0) {//Prepare context for unselected categories, to be removed from the model
				var newContext = jQuery.extend(true, {}, self.params);
				unselectedCategories.forEach(function(unselectedCategory) {
					var oStepContext = {
						oldContext : {
							name : self.params.name,
							arguments : {
								configId : self.params.arguments.configId,
								categoryId : currentCategoryId,
								stepId : stepId
							}
						},
						newContext : {
							arguments : {
								configId : self.params.arguments.configId,
								categoryId : unselectedCategory
							}
						},
						removeStep : true
					};
					if (currentCategoryChange === -1 && unselectedCategory === currentCategoryId) {//Prepare context for category change, if the current category is removed from the step
						var categoryChangeContext = {
							arguments : {
								appId : self.params.arguments.appId,
								configId : self.params.arguments.configId,
								categoryId : sSelCategory[0],
								stepId : stepId
							}
						};
						oStepContext.categoryChangeContext = categoryChangeContext;
						oStepContext.changeCategory = true;
					}
					aStepContexts.push(oStepContext);
				});
			}
		}
		if (aStepContexts.length !== 0) {
			this.oViewData.updateConfigTree(aStepContexts);//When the categories in the step is changed
		}
	},
	handleChangeForLeftTop : function() {
		this.oConfigurationEditor.setIsUnsaved();
		var sStepLeftTop = this.byId("idLeftTop").getValue().trim();
		var oTranslationFormat = sap.apf.modeler.ui.utils.TranslationFormatMap.STEP_CORNER_TEXT;
		var sStepLeftTopTextId = this.oTextPool.setText(sStepLeftTop, oTranslationFormat);
		this.step.setLeftUpperCornerTextKey(sStepLeftTopTextId);
	},
	handleChangeForRightTop : function() {
		this.oConfigurationEditor.setIsUnsaved();
		var sStepRightTop = this.byId("idRightTop").getValue().trim();
		var oTranslationFormat = sap.apf.modeler.ui.utils.TranslationFormatMap.STEP_CORNER_TEXT;
		var sStepRightTopTextId = this.oTextPool.setText(sStepRightTop, oTranslationFormat);
		this.step.setRightUpperCornerTextKey(sStepRightTopTextId);
	},
	handleChangeForLeftBottom : function() {
		this.oConfigurationEditor.setIsUnsaved();
		var sStepLeftBottom = this.byId("idLeftBottom").getValue().trim();
		var oTranslationFormat = sap.apf.modeler.ui.utils.TranslationFormatMap.STEP_CORNER_TEXT;
		var sStepLeftBottomTextId = this.oTextPool.setText(sStepLeftBottom, oTranslationFormat);
		this.step.setLeftLowerCornerTextKey(sStepLeftBottomTextId);
	},
	handleChangeForRightBottom : function() {
		this.oConfigurationEditor.setIsUnsaved();
		var sStepRightBottom = this.byId("idRightBottom").getValue().trim();
		var oTranslationFormat = sap.apf.modeler.ui.utils.TranslationFormatMap.STEP_CORNER_TEXT;
		var sStepRightBottomTextId = this.oTextPool.setText(sStepRightBottom, oTranslationFormat);
		this.step.setRightLowerCornerTextKey(sStepRightBottomTextId);
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.step#_setMandatoryFields
	 * @param {Array} fields - Array of form fields
	 * @description Set mandatory fields on the instance level  
	 * */
	_setMandatoryFields : function(fields) {
		this.mandatoryFields = this.mandatoryFields || [];
		for( var i = 0; i < fields.length; i++) {
			fields[i].isMandatory = true;
			this.mandatoryFields.push(fields[i]);
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.step#_getMandatoryFields
	 * @param {Object} oEvent - Event instance of the form field 
	 * @description getter for mandatory fields
	 * */
	_getMandatoryFields : function() {
		return this.mandatoryFields;
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.step#_setValidationState
	 * @param {Object} oEvent - Event instance of the form field 
	 * @description Set validation state of sub view
	 * */
	_setValidationState : function() {
		var mandatoryFields = this._getMandatoryFields();
		for( var i = 0; i < mandatoryFields.length; i++) {
			if (mandatoryFields[i].isMandatory === true) {
				if (typeof mandatoryFields[i].getSelectedKeys === "function") {
					this.isValidState = (mandatoryFields[i].getSelectedKeys().length >= 1) ? true : false;
				} else if (typeof mandatoryFields[i].getValue === "function") {
					this.isValidState = (mandatoryFields[i].getValue().trim() !== "") ? true : false;
				} else {
					this.isValidState = (mandatoryFields[i].getSelectedKey().length >= 1) ? true : false;
				}
				if (this.isValidState === false) {
					break;
				}
			}
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.step#getValidationState
	 * @description Getter for getting the current validation state of sub view
	 * */
	getValidationState : function() {
		this._setValidationState(); //Set the validation state of view
		var isValidState = (this.isValidState !== undefined) ? this.isValidState : true;
		return isValidState;
	}
});

}; // end of sap/apf/modeler/ui/controller/step.controller.js
if ( !jQuery.sap.isDeclared('sap.apf.modeler.ui.utils.APFTree') ) {
/*!
* SAP APF Analysis Path Framework
*
* (c) Copyright 2012-2014 SAP SE. All rights reserved
*/
/**
  * APF Custom Tree Control
  */
jQuery.sap.declare('sap.apf.modeler.ui.utils.APFTree');

sap.ui.getCore().loadLibrary("sap.ui.commons");
/**
 * @private
 * @class APF Custom Tree
 * @description APF Custom Tree which exposes certain API's to perform different operations on the tree
 * @name sap.apf.modeler.ui.utils.APFTree
 */
sap.ui.commons.Tree.extend("sap.apf.modeler.ui.utils.APFTree", {
	metadata : {
		events : {},
		properties : {
			translationFunction : {},
			defaultRepresentationType : {}
		}
	},
	renderer : function(oControl, oRM) {
		sap.ui.commons.TreeRenderer.render(oControl, oRM);
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.APFTree#setTranslationFunction
	 * @param {sap.apf.modeler.core.Instance.getText} Function to get translated texts
	 * @description Setter for TranslationFunction property which is used to get the translated texts
	 * */
	setTranslationFunction : function(fnTranslationFunction) {
		this.fnTranslationFunction = fnTranslationFunction;
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.APFTree#setDefaultRepresentationType
	 * @param {String} Default representation type
	 * @description Setter for DefaultRepresentationType property which is used to set the default representation
	 * */
	setDefaultRepresentationType : function(sDefaultRepresentationType) {
		this.defaultRepresentationType = sDefaultRepresentationType;
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.APFTree#getAPFTreeNodeContext
	 * @param {sap.ui.commons.TreeNode} Tree Node - Tree node whose context has to be derived
	 * @description Gets the context of the node
	 * */
	getAPFTreeNodeContext : function(oNode) {
		if (oNode) {
			var oNodeContext = oNode ? oNode.getBindingContext() : undefined;
			var sObjectType = oNodeContext.getObject() ? oNodeContext.getObject().type : undefined;
			var sObjectId;
			if (oNodeContext.getObject() && oNodeContext.getObject().id) {
				sObjectId = oNodeContext.getObject().id;
			} else if (oNodeContext.getObject() && oNodeContext.getObject().AnalyticalConfiguration) {
				sObjectId = oNodeContext.getObject().AnalyticalConfiguration;
			}
			return {
				oNode : oNode,
				nodeContext : oNodeContext.sPath,
				nodeObjectType : sObjectType,
				nodeTitle : oNode.getText(),
				nodeAPFId : sObjectId
			};
		}
		return null;
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.APFTree#getParentNodeContext
	 * @param {sap.ui.commons.TreeNode} Tree Node - Tree node whose context has to be derived
	 * @description Gets the context of the parent node
	 * */
	getParentNodeContext : function(oSelectedNodeDetails) {
		var oModel = this.getModel();
		if (oSelectedNodeDetails !== null) {
			var configIndexInTree = oSelectedNodeDetails.nodeContext.split('/')[2];
			var configurationId = oModel.getData().aConfigDetails[configIndexInTree] ? oModel.getData().aConfigDetails[configIndexInTree].AnalyticalConfiguration : undefined;
			var oRepresentationNode, oStepNode;
			var categoryIndexInConfig = oSelectedNodeDetails.nodeContext.split('/')[6];
			var facetFilterIndexInConfig = oSelectedNodeDetails.nodeContext.split('/')[6];
			var navTargetIndexInConfig = oSelectedNodeDetails.nodeContext.split('/')[6];
			var stepIndexInCategory = oSelectedNodeDetails.nodeContext.split('/')[8];
			var oSelectedNodeParentDetails = {};
			if (oSelectedNodeDetails !== null) {
				switch (oSelectedNodeDetails.nodeObjectType) { // based on the object type get the parent nodes	
					case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.FACETFILTER:
						oSelectedNodeParentDetails.facetFilterId = oModel.getData().aConfigDetails[configIndexInTree].configData[0].filters[facetFilterIndexInConfig].id;
						oSelectedNodeParentDetails.configurationId = configurationId;
						oSelectedNodeParentDetails.configurationName = oModel.getData().aConfigDetails[configIndexInTree].name;
						oSelectedNodeParentDetails.facetFilterName = oModel.getData().aConfigDetails[configIndexInTree].configData[0].filters[facetFilterIndexInConfig].name;
						break;
					case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CATEGORY:
						oSelectedNodeParentDetails.categoryId = oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories[categoryIndexInConfig].id;
						oSelectedNodeParentDetails.configurationId = configurationId;
						oSelectedNodeParentDetails.configurationName = oModel.getData().aConfigDetails[configIndexInTree].name;
						oSelectedNodeParentDetails.categoryName = oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories[categoryIndexInConfig].name;
						break;
					case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.STEP:
						oStepNode = oSelectedNodeDetails.oNode;
						oSelectedNodeParentDetails.configurationId = configurationId;
						oSelectedNodeParentDetails.categoryId = oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories[categoryIndexInConfig].id;
						oSelectedNodeParentDetails.stepId = oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories[categoryIndexInConfig].steps[stepIndexInCategory].id;
						oSelectedNodeParentDetails.configurationName = oModel.getData().aConfigDetails[configIndexInTree].name;
						oSelectedNodeParentDetails.categoryName = oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories[categoryIndexInConfig].name;
						oSelectedNodeParentDetails.stepName = oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories[categoryIndexInConfig].steps[stepIndexInCategory].name;
						break;
					case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.REPRESENTATION:
						oRepresentationNode = oSelectedNodeDetails.oNode;
						oSelectedNodeParentDetails.configurationId = configurationId;
						oSelectedNodeParentDetails.categoryId = oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories[categoryIndexInConfig].id;
						oSelectedNodeParentDetails.stepId = oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories[categoryIndexInConfig].steps[stepIndexInCategory].id;
						oSelectedNodeParentDetails.representationId = oRepresentationNode.getBindingContext().getObject().id;
						oSelectedNodeParentDetails.configurationName = oModel.getData().aConfigDetails[configIndexInTree].name;
						oSelectedNodeParentDetails.categoryName = oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories[categoryIndexInConfig].name;
						oSelectedNodeParentDetails.stepName = oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories[categoryIndexInConfig].steps[stepIndexInCategory].name;
						oSelectedNodeParentDetails.representationName = oRepresentationNode.getBindingContext().getObject().name;
						break;
					case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CONFIGURATION:
						oSelectedNodeParentDetails.configurationId = oSelectedNodeDetails.oNode.getBindingContext().getObject().AnalyticalConfiguration;
						oSelectedNodeParentDetails.configurationName = oSelectedNodeDetails.oNode.getBindingContext().getObject().name;
						break;
					case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.NAVIGATIONTARGET:
						oSelectedNodeParentDetails.navTargetId = oModel.getData().aConfigDetails[configIndexInTree].configData[2].navTargets[navTargetIndexInConfig].id;
						oSelectedNodeParentDetails.configurationId = configurationId;
						oSelectedNodeParentDetails.configurationName = oModel.getData().aConfigDetails[configIndexInTree].name;
						oSelectedNodeParentDetails.navTargetName = oModel.getData().aConfigDetails[configIndexInTree].configData[2].navTargets[navTargetIndexInConfig].name;
						break;
					default :
						break;
				}
			}
			return oSelectedNodeParentDetails;
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.APFTree#isConfigurationSwitched
	 * @param {sap.ui.commons.TreeNode} Tree Node - Previous selected node on the tree
	 * @param {sap.ui.commons.TreeNode} Tree Node - Current selected node on the tree
	 * @description Checks whether a configuration switch has happened
	 * @returns {Boolean} Returns boolean specifying whether configuration switch has happened
	 * */
	isConfigurationSwitched : function(oPreviousSelectedNode, oCurrentSelectedNode) {
		var bIsDifferntConfig = false;
		var oPreviousSelectedNodeParentDetails = this.getParentNodeContext(this.getAPFTreeNodeContext(oPreviousSelectedNode));
		var oCurrentSelectedNodeParentDetails = this.getParentNodeContext(this.getAPFTreeNodeContext(oCurrentSelectedNode));
		if (oPreviousSelectedNodeParentDetails && !jQuery.isEmptyObject(oPreviousSelectedNodeParentDetails) && (oPreviousSelectedNodeParentDetails.configurationId !== oCurrentSelectedNodeParentDetails.configurationId)) {
			bIsDifferntConfig = true;
		}
		return bIsDifferntConfig;
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.APFTree#removeSelection
	 * @param {sap.ui.commons.TreeNode} Tree Node - Current selection on the tree
	 * @description Removes all the selection from the tree
	 * */
	removeSelectionOnTree : function(oSelectedNode) {
		var oSelectionOnTree = this.getSelection();
		if (oSelectedNode) {
			oSelectedNode.getBindingContext().getObject().isSelected = false;
			oSelectedNode.setIsSelected(false);
		} else if (oSelectionOnTree) {
			oSelectionOnTree.getBindingContext().getObject().isSelected = false;
			oSelectionOnTree.setIsSelected(false);
		}
		this.getModel().updateBindings();
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.APFTree#setSelection
	 * @param {String} Binding context of the node which has to be shown selected on the tree
	 * @description Sets selection on the tree
	 * */
	setSelectionOnTree : function(sBindingContextOfSelectedNode) {
		this.selectedNode = this.getNodeByContext(sBindingContextOfSelectedNode);
		var oSelectionOnTree = this.getSelection();
		if (oSelectionOnTree !== this.selectedNode) {
			if (oSelectionOnTree && oSelectionOnTree.getBindingContext().getObject()) {
				oSelectionOnTree.getBindingContext().getObject().isSelected = false;
				oSelectionOnTree.setIsSelected(false);
			}
			this.selectedNode.setIsSelected(true);
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.APFTree#_scrollTreeToNewNode
	 * @param {sap.ui.commons.TreeNode} New added node in the tree
	 * @description Sets the scroll position to the newly added node
	 * */
	_scrollTreeToNewNode : function(oNewAddedTreeNode) {
		if (oNewAddedTreeNode && oNewAddedTreeNode.$().length !== 0) {
			jQuery(oNewAddedTreeNode.$())[0].scrollIntoView();
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.APFTree#setSelectedNode
	 * @param {sap.ui.commons.TreeNode} Tree node which has to be selected
	 * @description Sets node as selected in the tree
	 * */
	setSelectedNode : function(oNode) {
		this.setSelection(this.getNodeByContext(oNode.getBindingContext().sPath));
		this._scrollTreeToNewNode(oNode);
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.APFTree#_getObjectNodesArray
	 * @param {String} Selected Object node type
	 * @param {Integer} Selected configuration index in tree
	 * @param {Integer} Selected category index in tree
	 * @param {Integer} Selected step index in tree
	 * @description Get array of nodes of selected object type
	 * @returns {Array} Returns an array of nodes of selected object type
	 * */
	_getObjectNodesArray : function(sObjectType, configIndexInTree, categoryIndexInConfig, stepIndexInCategory) {
		var aObjectArray;
		switch (sObjectType) {
			case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CONFIGURATION:
				aObjectArray = this.getNodes();
				break;
			case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.FACETFILTER:
				aObjectArray = this.getNodes()[configIndexInTree].getNodes()[0].getNodes();
				break;
			case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CATEGORY:
				aObjectArray = this.getNodes()[configIndexInTree].getNodes()[1].getNodes();
				break;
			case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.STEP:
				aObjectArray = this.getNodes()[configIndexInTree].getNodes()[1].getNodes()[categoryIndexInConfig].getNodes();
				break;
			case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.REPRESENTATION:
				aObjectArray = this.getNodes()[configIndexInTree].getNodes()[1].getNodes()[categoryIndexInConfig].getNodes()[stepIndexInCategory].getNodes();
				break;
			case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.NAVIGATIONTARGET:
				aObjectArray = this.getNodes()[configIndexInTree].getNodes()[2].getNodes();
				break;
			default :
				break;
		}
		return aObjectArray;
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.APFTree#addNodeInTree
	 * @param {String} Selected Object node type
	 * param {Object} Existing Steps Or Representations in existing steps to be added
	 * @description Adds selected object type node into the tree
	 * */
	addNodeInTree : function(sObjectType, params) {
		var oModel = this.getModel();
		var sMethodName;
		var selectedTreeNodeDetails = this.getAPFTreeNodeContext(this.getSelection());
		var configIndexInTree = selectedTreeNodeDetails ? selectedTreeNodeDetails.nodeContext.split('/')[2] : undefined;
		var categoryIndexInConfig = selectedTreeNodeDetails ? selectedTreeNodeDetails.nodeContext.split('/')[6] : undefined;
		var stepIndexInCategory = selectedTreeNodeDetails ? selectedTreeNodeDetails.nodeContext.split('/')[8] : undefined;
		sMethodName = [ "_add", sObjectType ].join("");
		this[sMethodName](configIndexInTree, categoryIndexInConfig, stepIndexInCategory, params);
		var aObjectArray = this._getObjectNodesArray(sObjectType, configIndexInTree, categoryIndexInConfig, stepIndexInCategory);
		var newAddedTreeNode = aObjectArray[aObjectArray.length - 1];
		if (sObjectType !== sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CONFIGURATION) {
			if (newAddedTreeNode.getParent()) {
				newAddedTreeNode.getParent().setExpanded(true);
			}
		}
		this.setSelectedNode(newAddedTreeNode);
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.APFTree#_addconfiguration
	 * @description Adds a configuration node into the tree
	 * */
	_addconfiguration : function() { // adds a new configuration in the tree
		var self = this;
		this.configNewIndex = this.configNewIndex || 1;
		var oModel = this.getModel();
		var idOfConfig;
		//Increment the configuration index each time to traverse to route
		idOfConfig = "I" + this.configNewIndex;
		this.configNewIndex++;
		var allCategoryInConfig = [], aFacetFilter = [], aCategoryWithStepDetails = [], aNavigationTargets = [];
		allCategoryInConfig.push({
			filters : aFacetFilter,
			name : self.fnTranslationFunction("facetFilters"),
			isSelected : false,
			expanded : false,
			selectable : false
		});
		allCategoryInConfig.push({
			categories : aCategoryWithStepDetails,
			name : self.fnTranslationFunction("categories"),
			isSelected : false,
			expanded : false,
			selectable : false
		});
		allCategoryInConfig.push({
			navTargets : aNavigationTargets,
			name : self.fnTranslationFunction("navigationTargets"),
			isSelected : false,
			expanded : false,
			selectable : false
		});
		var oConfigDetails = {};
		oConfigDetails.configData = allCategoryInConfig;
		var newConfigName = this.fnTranslationFunction("newConfiguration");
		var newConfigObject = {
			name : "< " + newConfigName + " >",
			type : sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CONFIGURATION,
			AnalyticalConfiguration : "newConfig" + idOfConfig,
			configData : allCategoryInConfig,
			bIsLoaded : true,
			isSelected : false,
			expanded : false,
			selectable : true
		};
		oModel.getData().aConfigDetails.push(newConfigObject); //push the new configuration at the last index
		oModel.updateBindings();
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.APFTree#_addfacetFilter
	 * @description Adds a facet filter node into the tree
	 * */
	_addfacetFilter : function(configIndexInTree) { // adds a new facet filter in the selected configuration
		var oModel = this.getModel();
		var newFacetFilterName = this.fnTranslationFunction("newFacetFilter");
		var idOfFacetFilter = oModel.getData().aConfigDetails[configIndexInTree].configData[0].filters.length;
		var newFacetFilterObject = {
			name : "< " + newFacetFilterName + " >",
			type : sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.FACETFILTER,
			id : "newFilter" + idOfFacetFilter,
			isSelected : false,
			selectable : true
		};
		oModel.getData().aConfigDetails[configIndexInTree].expanded = true;
		oModel.getData().aConfigDetails[configIndexInTree].configData[0].expanded = true;
		oModel.getData().aConfigDetails[configIndexInTree].configData[0].filters.push(newFacetFilterObject);//push the new facet filter at the last index
		oModel.updateBindings();
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.APFTree#_addnavigationTarget
	 * @description Adds a navigation Target node into the tree
	 * */
	_addnavigationTarget : function(configIndexInTree) { // adds a new navigation Target in the selected configuration
		var oModel = this.getModel();
		var newNavigationTargetName = this.fnTranslationFunction("newNavigationTarget");
		var idOfNavigationTarget = oModel.getData().aConfigDetails[configIndexInTree].configData[2].navTargets.length;
		var newNavigationTargetObject = {
			name : "< " + newNavigationTargetName + " >",
			type : sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.NAVIGATIONTARGET,
			id : "newNavTarget" + idOfNavigationTarget,
			isSelected : false,
			selectable : true
		};
		oModel.getData().aConfigDetails[configIndexInTree].expanded = true;
		oModel.getData().aConfigDetails[configIndexInTree].configData[2].expanded = true;
		oModel.getData().aConfigDetails[configIndexInTree].configData[2].navTargets.push(newNavigationTargetObject);//push the new navigation Target at the last index
		oModel.updateBindings();
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.APFTree#_addcategory
	 * @description Adds a category node into the tree
	 * */
	_addcategory : function(configIndexInTree) {// adds a new category in the selected configuration
		var oModel = this.getModel();
		var newCategoryName = this.fnTranslationFunction("newCategory");
		var idOfCategory = oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories.length;
		var newCategoryObject = {
			name : "< " + newCategoryName + " >",
			type : sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CATEGORY,
			id : "newCategory" + idOfCategory,
			isSelected : false,
			expanded : false,
			selectable : true
		};
		oModel.getData().aConfigDetails[configIndexInTree].expanded = true;
		oModel.getData().aConfigDetails[configIndexInTree].configData[1].expanded = true;
		oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories.push(newCategoryObject);//push the new category at the last index
		oModel.updateBindings();
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.APFTree#_addstep
	 * @description Adds a new step or existing step node into the tree
	 * @param Contains the list of existing steps to be added
	 * */
	_addstep : function(configIndexInTree, categoryIndexInConfig, stepIndexInCategory, params) { // adds a new step or existing step with representations in the selected category under a configuration
		var oModel = this.getModel();
		var newStepObject;
		if (oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories[categoryIndexInConfig].steps === undefined) {
			oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories[categoryIndexInConfig].steps = [];
		}
		if (!params) {// Incase of a new step
			var idOfStep = oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories[categoryIndexInConfig].steps.length;
			var newStepName = this.fnTranslationFunction("newStep");
			newStepObject = {
				name : "< " + newStepName + " >",
				type : sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.STEP,
				id : "newStep" + idOfStep,
				isSelected : false,
				expanded : false,
				selectable : true
			};
			oModel.getData().aConfigDetails[configIndexInTree].expanded = true;
			oModel.getData().aConfigDetails[configIndexInTree].configData[1].expanded = true;
			oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories[categoryIndexInConfig].expanded = true;
			oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories[categoryIndexInConfig].steps.push(newStepObject);
		} else {//In case of existing steps(single or multiple)
			var existingStepObject, i, j;
			for(i = 0; i < params.noOfSteps; i++) {
				existingStepObject = {
					name : params.aExistingStepsToBeAdded[i].step.name,
					type : sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.STEP,
					id : params.aExistingStepsToBeAdded[i].step.id,
					isSelected : false,
					expanded : false,
					selectable : true
				};
				oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories[categoryIndexInConfig].steps.push(existingStepObject);
				if (params.aExistingStepsToBeAdded[i].noOfReps !== 0) {
					stepIndexInCategory = oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories[categoryIndexInConfig].steps.length - 1;
					for(j = 0; j < params.aExistingStepsToBeAdded[i].noOfReps; j++) {
						var representationParams = {
							id : params.aExistingStepsToBeAdded[i].representations[j].id,
							name : params.aExistingStepsToBeAdded[i].representations[j].name,
							icon : params.aExistingStepsToBeAdded[i].representations[j].icon
						};
						this._addrepresentation(configIndexInTree, categoryIndexInConfig, stepIndexInCategory, representationParams);//In case the existing step has representations
					}
				}
			}
		}
		oModel.updateBindings();
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.utils.APFTree#_addrepresentation
	 * @description Adds a new representation node or existing representations into the tree
	 * @param Contains the representation node to be added under an existing step
	 * */
	_addrepresentation : function(configIndexInTree, categoryIndexInConfig, stepIndexInCategory, params) {// adds a new representation in the selected step in a category under a configuration
		var oModel = this.getModel();
		var self = this;
		var stepId;
		if (params === undefined) {//In case of new representation under a step or existing step
			var selectedTreeNodeDetails = this.getAPFTreeNodeContext(this.getSelection());
			if (selectedTreeNodeDetails.nodeObjectType === sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.REPRESENTATION) {
				stepId = this.getParentNodeContext(selectedTreeNodeDetails, oModel).stepId;
			} else if (selectedTreeNodeDetails.nodeObjectType === sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.STEP) {
				stepId = selectedTreeNodeDetails.nodeAPFId;
			}
			var aStepContexts = [];
			oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories.forEach(function(category, categoryIndex) {
				if (oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories[categoryIndex].steps) {
					oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories[categoryIndex].steps.forEach(function(step, stepIndex) {
						var stepContext = {};
						if (step.id === stepId) {
							stepContext.stepIndex = stepIndex;
							stepContext.categoryIndex = categoryIndex;
							aStepContexts.push(stepContext);
						}
					});
				}
			});
			aStepContexts.forEach(function(stepContext) {
				if (oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories[stepContext.categoryIndex].steps[stepContext.stepIndex].representations === undefined) {
					oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories[stepContext.categoryIndex].steps[stepContext.stepIndex].representations = [];
				}
				var idOfRep = oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories[stepContext.categoryIndex].steps[stepContext.stepIndex].representations.length;
				var newRepresentationObject = {
					name : self.fnTranslationFunction(self.defaultRepresentationType),
					type : sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.REPRESENTATION,
					id : "newRepresentation" + idOfRep,
					isSelected : false,
					selectable : true
				};
				oModel.getData().aConfigDetails[configIndexInTree].expanded = true;
				oModel.getData().aConfigDetails[configIndexInTree].configData[1].expanded = true;
				oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories[stepContext.categoryIndex].expanded = true;
				oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories[stepContext.categoryIndex].steps[stepContext.stepIndex].expanded = true;
				oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories[stepContext.categoryIndex].steps[stepContext.stepIndex].representations.push(newRepresentationObject);//push the new representation at the last index
			});
		} else {//In case of adding existing step with representations
			if (oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories[categoryIndexInConfig].steps[stepIndexInCategory].representations === undefined) {
				oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories[categoryIndexInConfig].steps[stepIndexInCategory].representations = [];
			}
			var representationObject = {
				name : params.name,
				type : sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.REPRESENTATION,
				id : params.id,
				isSelected : false,
				selectable : true,
				icon : params.icon
			};
			oModel.getData().aConfigDetails[configIndexInTree].configData[1].categories[categoryIndexInConfig].steps[stepIndexInCategory].representations.push(representationObject);//push the existing representation at the last index
		}
		oModel.updateBindings();
	}
});

}; // end of sap/apf/modeler/ui/utils/APFTree.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.representations.BaseUI5ChartRepresentation') ) {
/*!
* SAP APF Analysis Path Framework
*
* (c) Copyright 2012-2014 SAP SE. All rights reserved
*/


jQuery.sap.declare("sap.apf.ui.representations.BaseUI5ChartRepresentation");
/** 
 * @class representation base class constructor.
* @param oParameters defines parameters required for chart such as Dimension/Measures, tooltip, axis information.
* @returns chart object
*/
sap.apf.ui.representations.BaseUI5ChartRepresentation = function(oApi, oParameters) {
	this.oMessageObject = "";
	this.legendBoolean = true;
	this.aDataResponse = undefined;
	this.dataset = {};
	this.oModel = new sap.ui.model.json.JSONModel();
	this.bDataHasBeenSelected = false;
	this.parameter = oParameters;
	this.orderby = oParameters.orderby;
	this.dimension = oParameters.dimensions;
	this.measure = oParameters.measures;
	this.alternateRepresentation = oParameters.alternateRepresentationType;
	this.requiredFilters = oParameters.requiredFilters;
	this.UI5ChartHelper = new sap.apf.ui.representations.utils.UI5ChartHelper(oApi, this.parameter);
	this.chartInstance = {};
	this.chartParam = "";
	this.thumbnailChartParam = "";
	this.disableSelectEvent = false;
	this.oApi = oApi;
	this.showXaxisLabel = true;
	this.axisType = sap.apf.ui.utils.CONSTANTS.axisTypes.AXIS;
};
sap.apf.ui.representations.BaseUI5ChartRepresentation.prototype = {
	/**
	* @method getParameter
	* @description returns the constructor arguments which will be used to create toggle representation.
	*/
	getParameter : function() {
		return this.parameter;
	},
	/**
	* @method setData
	* @param aDataResponse  Response from oData service
	* @param metadata Metadata of the oData service
	* @description Fetches the data from oData service and updates the selection if present
	* Handles data with multiple dimensions .
	*/
	setData : function(aDataResponse, metadata) {
		this.bIsGroupTypeChart = this.getIsGroupTypeChart();
		this.oDataSetHelper = this.getDataSetHelper();
		this.formatter = new sap.apf.ui.utils.formatter({
			getEventCallback : this.oApi.getEventCallback.bind(this.oApi),
			getTextNotHtmlEncoded : this.oApi.getTextNotHtmlEncoded
		}, metadata, aDataResponse);
		this.UI5ChartHelper.init(aDataResponse, metadata, this.bIsGroupTypeChart, this.oDataSetHelper, this.formatter);
		this.aDataResponse = aDataResponse || [];
		this.metadata = metadata;
		if (!this.metadata) {
			this.oMessageObject = this.oApi.createMessageObject({
				code : "6004",
				aParameters : [ this.oApi.getTextNotHtmlEncoded("step") ]
			});
			this.oApi.putMessage(this.oMessageObject);
		}
	},
	/**
	* @method attachSelectionAndFormatValue
	* @description formats the measure values for the chart and also attaches all the selection events for the chart
	*/
	attachSelectionAndFormatValue : function(oStepTitle) {
		var self = this;
		if (!oStepTitle) {
			this.oMessageObject = this.oApi.createMessageObject({
				code : "6002",
				aParameters : [ "title", this.oApi.getTextNotHtmlEncoded("step") ]
			});
			this.oApi.putMessage(this.oMessageObject);
		}
		if (this.dimension.length === 0) {
			this.oMessageObject = this.oApi.createMessageObject({
				code : "6002",
				aParameters : [ "dimensions", oStepTitle ]
			});
			this.oApi.putMessage(this.oMessageObject);
		}
		if (this.measure.length === 0) {
			this.oMessageObject = this.oApi.createMessageObject({
				code : "6002",
				aParameters : [ "measures", oStepTitle ]
			});
			this.oApi.putMessage(this.oMessageObject);
		}
		if (!this.aDataResponse || this.aDataResponse.length === 0) {
			this.oMessageObject = this.oApi.createMessageObject({
				code : "6000",
				aParameters : [ oStepTitle ]
			});
			this.oApi.putMessage(this.oMessageObject);
		}
		/**
		* @method attachSelectData
		* @param event which is triggered on selection of data on chart
		* @description Adding selection to the chart based on the selected indices provided
		*/
		this.fnHandleSelection = this.handleSelection.bind(self);
		this.chart.attachSelectData(this.fnHandleSelection);
		/**
		* @method attachDeselectData
		* @param event handler on deselect of data
		* @description For deselect of data from the chart on user event
		*/
		this.fnHandleDeselection = this.handleDeselection.bind(self);
		this.chart.attachDeselectData(this.fnHandleDeselection);
	},
	/**
	* @method getFormatStringForMeasure
	* @param {measure}- a measure
	* @description gets the format string for axis label and tooltip
	* @return sFormatString , has the format string and also a boolean which indicated whether all the measure unit semantic are same or not
	*             sFormatString ="#,#0.0"
	
	*/
	getFormatStringForMeasure : function(measure) {
		var sFormatString = this.formatter.getFormatString(measure); // get the format string
		return sFormatString;
	},
	/**
	* @method getIsAllMeasureSameUnit
	* @description checks if all the measures have same unit semantic and sets a boolean accordingly
	* @retun bAllMeasuresSameUnit - boolean to indicate if all the measures have same unit semantic. 
	 * This boolean is used to set the formatting to y axis only when all the measures have same unit (e.g. clustered column chart),
	* otherwise the formatting will not be applied to y axis.
	*/
	getIsAllMeasureSameUnit : function() {
		var bAllMeasuresSameUnit = true;
		var self = this;
		var firstMeasureUnitSemantic = this.metadata.getPropertyMetadata(this.measure[0].fieldName).unit ? this.metadata.getPropertyMetadata(this.metadata.getPropertyMetadata(this.measure[0].fieldName).unit).semantics : undefined;
		var measureUnitSemantic;
		this.measure.forEach(function(measure, index) {
			measureUnitSemantic = self.metadata.getPropertyMetadata(self.measure[index].fieldName).unit ? self.metadata.getPropertyMetadata(self.metadata.getPropertyMetadata(measure.fieldName).unit).semantics : undefined;
			if (bAllMeasuresSameUnit && firstMeasureUnitSemantic !== undefined && measureUnitSemantic && (firstMeasureUnitSemantic !== measureUnitSemantic)) {
				bAllMeasuresSameUnit = false; // bAllMeasuresSameUnit boolean is used to find out if there are measures with different unit semantics
			}
		});
		return bAllMeasuresSameUnit;
	},
	/**
	*@method createThumbnailLayout
	*@description creates a layout for Thumbnail for the current chart type and also shows "no data" in the thumbnail if data is not there 
	 */
	createThumbnailLayout : function() {
		this.thumbnailLayout = new sap.ui.layout.HorizontalLayout().addStyleClass('thumbnailLayout');
		if (this.aDataResponse !== undefined && this.aDataResponse.length !== 0) {
			this.thumbnailChart.setModel(this.oModel);
			this.thumbnailLayout.removeAllContent();
			this.thumbnailLayout.addContent(this.thumbnailChart);
		} else {
			var noDataText = new sap.m.Text({
				text : this.oApi.getTextNotHtmlEncoded("noDataText")
			}).addStyleClass('noDataText');
			this.thumbnailLayout.removeAllContent();
			this.thumbnailLayout.addContent(noDataText);
		}
	},
	/**
	* @method getAlternateRepresentation
	* @description returns the alternate representation of current step (i.e. list representation for the charts)
	*/
	getAlternateRepresentation : function() {
		return this.alternateRepresentation;
	},
	/**
	* @description returns meta data for representation type
	*/
	getMetaData : function() {
		return this.metadata;
	},
	/**
	* @description returns data for representation type
	*/
	getData : function() {
		return this.aDataResponse;
	},
	/**
	* @method getRequestOptions
	* @description provide optional filter properties for odata request URL such as pagging, sorting etc
	*/
	getRequestOptions : function() {
		if (this.orderby && this.orderby.length) {
			var aOrderbyProps = this.orderby.map(function(oOrderby) {
				return {
					property : oOrderby.property,
					descending : !oOrderby.ascending
				};
			});
			return {
				orderby : aOrderbyProps
			};
		} else {
			return {};
		}
	},
	/**
	* @method createDataset
	* @description Intantiates the dataset to be consumed by the chart
	*/
	createDataset : function() {
		this.dataset = this.UI5ChartHelper.getDataset();
		this.oModel = this.UI5ChartHelper.getModel();
	},
	/**
	* @method drawSelectionOnMainChart
	* @param
	* @description Draws the selection on main chart when chart is loaded
	*/
	drawSelectionOnMainChart : function() {
		var aSelections = this.UI5ChartHelper.getSelectionFromFilter(this.filter);
		if (aSelections.length > 0) {
			this.disableSelectEvent = true;
			this.setSelectionOnMainChart(aSelections);
		}
	},
	/**
	* @method drawSelectionOnThumbnailChart
	* @param
	* @description Draws the selection on the thumbnail chart  when chart is loaded
	*/
	drawSelectionOnThumbnailChart : function() {
		var aSelections = this.UI5ChartHelper.getSelectionFromFilter(this.filter);
		if (aSelections.length > 0) {
			this.clearSelectionFromThumbnailChart();
			this.setSelectionOnThumbnailChart(aSelections);
		}
	},
	/**
	* @method handleSelection
	* @param event
	* @description  plots the selections made on the chart
	*/
	handleSelection : function(evt) {
		if (!this.disableSelectEvent) {
			var aSelection = this.getSelectionFromChart();
			var ctxArray = this.UI5ChartHelper.getHighlightPointsFromSelectionEvent(aSelection);
			this.setSelectionOnThumbnailChart(ctxArray);
			this.setSelectionOnMainChart(ctxArray);
			this.bDataHasBeenSelected = true;
			this.oApi.selectionChanged();
		} else {
			this.disableSelectEvent = false;
		}
	},
	/**
	* @method handleDeselection
	* @param event
	* @description  de-selects the selected datapoints on the chart
	*/
	handleDeselection : function(evt) {
		if (!this.disableSelectEvent) {
			this.disableSelectEvent = true;
			var aSelection = this.getSelectionFromChart();
			var newSelection = this.UI5ChartHelper.getHighlightPointsFromDeselectionEvent(aSelection);
			this.removeAllSelection();
			this.setSelectionOnThumbnailChart(newSelection);
			this.setSelectionOnMainChart(newSelection);
			if (!newSelection.length) {
				this.disableSelectEvent = false;
			}
			this.bDataHasBeenSelected = true;
			this.oApi.selectionChanged();
		} else {
			this.disableSelectEvent = false;
		}
	},
	/**
	* @method getSelections
	* @description This method helps in determining the selection count, text and id of selected data of a representation
	* @returns the filter selections of the current representation.
	*/
	getSelections : function() {
		return this.UI5ChartHelper.getFilters();
	},
	/**
	* @deprecated since version 1.27.0 and using getSelections API instead
	* @method getSelectionCount
	* @description This method helps in determining the selection count of a representation
	* @returns the selection count of the current representation.
	*/
	getSelectionCount : function() {
		return this.UI5ChartHelper.getFilterCount();
	},
	/**
	* @method hasSelection
	* @description This method helps in determining the selections of a representation
	* @returns true if the representation holds any selections.
	*/
	hasSelection : function() {
		return this.bDataHasBeenSelected;
	},
	/**
	* @method removeAllSelection
	* @description removes all Selection from Chart
	*/
	removeAllSelection : function() {
		this.clearSelectionFromThumbnailChart();
		this.clearSelectionFromMainChart();
	},
	/**
	* @method getFilterMethodType
	* @description This method helps in determining which method has to be used for the filter retrieval from a representation.
	* @returns {sap.apf.constants.filterMethodTypes} The filter method type the representation supports
	*/
	getFilterMethodType : function() {
		return sap.apf.core.constants.filterMethodTypes.filter; // returns the filter method type the representation supports
	},
	getFilter : function() {
		this.filter = this.UI5ChartHelper.getFilterFromSelection();
		return this.filter;
	},
	/**
	* @method setFilter
	* @param {sap.apf.utils.Filter} oFilter
	* @description sets the initial filter to the representation. The filter holds the values of the start filter of the path.
	*/
	setFilter : function(oFilter) {
		this.filter = oFilter;
		this.bDataHasBeenSelected = false;
	},
	/**
	* @method adoptSelection
	* @param {object} oSourceRepresentation Source representation implementing the representationInterface.
	* @description Called on representation by binding when a representation type is set.
	*/
	adoptSelection : function(oSourceRepresentation) {
		if (oSourceRepresentation && oSourceRepresentation.getFilter) {
			this.UI5ChartHelper.filterValues = oSourceRepresentation.getFilter().getInternalFilter().getFilterTerms().map(function(term) {
				return [ term.getValue() ];
			});
		}
	},
	/**
	* @method serialize
	* @description Getter for Serialized data for a representation
	* @returns selectionObject
	*/
	serialize : function() {
		return {
			oFilter : this.UI5ChartHelper.filterValues,
			bIsAlternateView : this.bIsAlternateView
		};
	},
	/**
	* @method deserialize
	* @description This method uses selection object from serialized data and sets the selection to representation
	*/
	deserialize : function(oSerializable) {
		this.UI5ChartHelper.filterValues = oSerializable.oFilter;
		this.bIsAlternateView = oSerializable.bIsAlternateView;
	},
	/**
	* @method getPrintContent
	* @param oStepTitle title of the step
	* @description gets the printable content of the representation
	*/
	getPrintContent : function(oStepTitle) {
		var oChartForPrinting, vizType = this.chartType, vizProperties = {};
		//Retrieves the current chart instance 
		var oOriginalChart = this.getMainContent(oStepTitle);
		//Check if chart instance is viz frmae
		if (oOriginalChart.setVizProperties) {
			/* 
			 * If the chart is viz frame clone the chart. Limitation with clone in viz frame as it does only shallow clone, Viz type and viz properties need to be set again
			 * Therefore we read existing viz properties set in the original chart and set in on the cloned chart
			 */
			vizProperties = oOriginalChart.getVizProperties();
			oChartForPrinting = oOriginalChart.clone();
			oChartForPrinting.setVizType(vizType);
			oChartForPrinting.setVizProperties(vizProperties);
		} else {
			/*
			 * If the chart is viz, then create a new chart with the same properties as the original chart
			 * Read chart param from baseVizChartRepresentation
			 */
			vizProperties = jQuery.extend(true, {}, this.chartParam);
			delete vizProperties.dataset;
			oChartForPrinting = new sap.viz.ui5[vizType](vizProperties);
		}
		//Set height and width on the chart for printing
		oChartForPrinting.setWidth("1000px");
		oChartForPrinting.setHeight("600px");
		//Create new dataset and model for the chart and set them
		this.createDataset();
		oChartForPrinting.setDataset(this.dataset);
		oChartForPrinting.setModel(this.oModel);
		return {
			oChartForPrinting : oChartForPrinting,
			aSelectionOnChart : this.aStoredSelection
		};
	},
	/**
	* @method destroy
	* @description Destroying instances
	*/
	destroy : function() {
		this.dataset = null;
		this.oModel.destroy();
		this.oDataSetHelper = null;
		if (this.formatter) {
			this.formatter.destroy();
			this.formatter = null;
		}
		this.UI5ChartHelper.destroy();
		this.UI5ChartHelper = null;
		if (this.chart) {
			this.chart.detachSelectData(this.fnHandleSelection);
			this.fnHandleSelection = null;
			this.chart.detachDeselectData(this.fnHandleDeselection);
			this.fnHandleDeselection = null;
			this.chart.destroy();
			this.chart = null;
		}
		if (this.thumbnailChart) {
			this.thumbnailChart.destroy();
			this.thumbnailChart = null;
		}
		if (this.thumbnailLayout) {
			this.thumbnailLayout.removeAllContent();
		}
	}
};
}; // end of sap/apf/ui/representations/BaseUI5ChartRepresentation.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.representations.BaseVizChartRepresentation') ) {
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
jQuery.sap.declare("sap.apf.ui.representations.BaseVizChartRepresentation");


(function() {
	'use strict';
	sap.apf.ui.representations.BaseVizChartRepresentation = function(oApi, oParameters) {
		sap.apf.ui.representations.BaseUI5ChartRepresentation.apply(this, [ oApi, oParameters ]);
	};
	sap.apf.ui.representations.BaseVizChartRepresentation.prototype = Object.create(sap.apf.ui.representations.BaseUI5ChartRepresentation.prototype);
	//Set the "constructor" property to refer to BaseUI5ChartRepresentation
	sap.apf.ui.representations.BaseVizChartRepresentation.prototype.constructor = sap.apf.ui.representations.BaseVizChartRepresentation;
	sap.apf.ui.representations.BaseVizChartRepresentation.prototype.destroy = function() {
		if (this.chart) {
			if (this.chart.getTitle && this.chart.getTitle()) {
				this.chart.destroyTitle();
			}
			if (this.chart.getXAxis && this.chart.getXAxis()) {
				this.chart.destroyXAxis();
			}
			if (this.chart.getYAxis && this.chart.getYAxis()) {
				this.chart.destroyYAxis();
			}
			if (this.chart.getLegend && this.chart.getLegend()) {
				this.chart.destroyLegend();
			}
			if (this.chart.getPlotArea && this.chart.getPlotArea()) {
				this.chart.destroyPlotArea();
			}
			this.chart.detachInitialized(this.fnDrawSelectionOnMainChart);
			this.fnDrawSelectionOnMainChart = null;
		}
		if (this.thumbnailChart) {
			if (this.thumbnailChart.getTitle && this.thumbnailChart.getTitle()) {
				this.thumbnailChart.destroyTitle();
			}
			if (this.thumbnailChart.getXAxis && this.thumbnailChart.getXAxis()) {
				this.thumbnailChart.destroyXAxis();
			}
			if (this.thumbnailChart.getYAxis && this.thumbnailChart.getYAxis()) {
				this.thumbnailChart.destroyYAxis();
			}
			if (this.thumbnailChart.getLegend && this.thumbnailChart.getLegend()) {
				this.thumbnailChart.destroyLegend();
			}
			if (this.thumbnailChart.getToolTip && this.thumbnailChart.getToolTip()) {
				this.thumbnailChart.destroyToolTip();
			}
			if (this.thumbnailChart.getInteraction && this.thumbnailChart.getInteraction()) {
				this.thumbnailChart.destroyInteraction();
			}
			if (this.thumbnailChart.getBackground && this.thumbnailChart.getBackground()) {
				this.thumbnailChart.destroyBackground();
			}
			if (this.thumbnailChart.getGeneral && this.thumbnailChart.getGeneral()) {
				this.thumbnailChart.destroyGeneral();
			}
			if (this.thumbnailChart.getPlotArea && this.thumbnailChart.getPlotArea()) {
				this.thumbnailChart.destroyPlotArea();
			}
			this.thumbnailChart.detachInitialized(this.fnDrawSelectionOnThumbnailChart);
			this.fnDrawSelectionOnThumbnailChart = null;
		}
		sap.apf.ui.representations.BaseUI5ChartRepresentation.prototype.destroy.call(this);
	};
	/**
	 * @method getMeasures
	 * @return the measures for a chart
	 */
	sap.apf.ui.representations.BaseVizChartRepresentation.prototype.getMeasures = function() {
		return this.measure;
	};
	/**
	 * @method getMainContent
	 * @param oStepTitle title of the main chart
	 * @param width width of the main chart
	 * @param height height of the main chart
	 * @description draws Main chart into the Chart area
	 */
	sap.apf.ui.representations.BaseVizChartRepresentation.prototype.getMainContent = function(oStepTitle, width, height) {
		var self = this;
		var superClass = this;
		var chartHeight = height || 600;
		chartHeight = chartHeight + "px";
		var chartWidth = width || 1000;
		chartWidth = chartWidth + "px";
		this.title = oStepTitle;
		if (!this.chartType) { // for charts which are coming from application
			this.chartType = this.getChartTypeFromRepresentationType(this.type); // set the value for chart type for thumbnail and main chart
		}
		this.createDataset();
		if (!this.chart) {//If chart instance does not exist create a new instance
			this.chartParam = {
				width : chartWidth,
				height : chartHeight,
				title : {
					visible : true,
					text : this.title
				},
				xAxis : {
					title : {
						visible : true
					},
					label : {
						visible : this.showXaxisLabel
					}
				},
				yAxis : {
					title : {
						visible : true
					}
				},
				legend : {
					visible : this.legendBoolean,
					title : {
						visible : this.legendBoolean
					}
				},
				plotArea : {
					animation : {
						dataLoading : false,
						dataUpdating : false
					}
				},
				dataset : this.dataset
			};
			this.chart = new sap.viz.ui5[this.chartType](this.chartParam);
			this.validateSelectionModes();
			if (this.metadata) { //if metadata is available, do the formatting for measures
				var tooltipFormatString = [];
				this.measure.forEach(function(measure) {
					var sFormatString = superClass.getFormatStringForMeasure(measure); // get the format string for each measure
					tooltipFormatString.push([ sFormatString ]); // tooltip expects a two dimensional array for format string
					self.setFormatStringOnChart(sFormatString);
				});
				this.setFormatString("tooltip", tooltipFormatString); // apply the formatting for tooltip , with the array of format strings for multiple measures
				if (this.handleCustomFormattingOnChart) { //call the sub class formatting 
					this.handleCustomFormattingOnChart();
				}
			}
			/**
			 * @method attachInitialized
			 * @param event which is triggered on when the chart is initialized
			 * @description Draws the selection
			 */
			this.fnDrawSelectionOnMainChart = this.drawSelectionOnMainChart.bind(self);
			this.chart.attachInitialized(this.fnDrawSelectionOnMainChart);
			superClass.attachSelectionAndFormatValue.call(this, oStepTitle); // call the base class attachSelectionAndFormatValue
		} else {//If chart instance exists only update dataset and then set model
			if (width) {
				this.chart.setWidth(chartWidth);
			}
			if (height) {
				this.chart.setHeight(chartHeight);
			}
			this.chart.destroyDataset();
			this.chart.setDataset(this.dataset);
		}
		this.chart.setModel(this.oModel);
		return this.chart;
	};
	/**
	 * @method validateSelectionModes
	 * @description sets the different selection modes on the charts based on the required filter
	 */
	sap.apf.ui.representations.BaseVizChartRepresentation.prototype.validateSelectionModes = function() {
		var sel = new sap.viz.ui5.types.controller.Interaction_selectability();
		var inter = new sap.viz.ui5.types.controller.Interaction();
		inter.setSelectability(sel);
		this.chart.setInteraction(inter);
		if (this.parameter.requiredFilters === undefined || this.parameter.requiredFilters.length === 0) {
			sel.setMode("none");
		} else {
			sel.setMode("multiple");
			if (this.parameter.dimensions.length > 1) {
				if (this.parameter.requiredFilters[0] === this.parameter.dimensions[1].fieldName) {
					sel.setAxisLabelSelection(false);
				} else if (this.parameter.requiredFilters[0] === this.parameter.dimensions[0].fieldName) {
					sel.setLegendSelection(false);
				}
			}
		}
	};
	/**
	 *@method getThumbnailContent
	 *@description draws Thumbnail for the current chart type and returns to the calling object
	 *@returns thumbnail object for the chart type
	 */
	sap.apf.ui.representations.BaseVizChartRepresentation.prototype.getThumbnailContent = function() {
		var self = this;
		var superClass = this;
		var height = sap.apf.ui.utils.CONSTANTS.thumbnailDimensions.HEIGHT;
		var width = sap.apf.ui.utils.CONSTANTS.thumbnailDimensions.WIDTH;
		if (!this.chartType) { // for charts which are coming from application
			this.chartType = this.getChartTypeFromRepresentationType(this.type); // set the value for chart type for thumbnail and main chart
		}
		this.createDataset();
		if (!this.thumbnailChart) {//If chart instance does not exist create a new instance
			this.thumbnailChartParam = {
				width : width,
				height : height,
				title : {
					visible : false
				},
				xAxis : {
					visible : false,
					title : {
						visible : false
					}
				},
				yAxis : {
					visible : false,
					title : {
						visible : false
					}
				},
				legend : {
					visible : false,
					title : {
						visible : false
					}
				},
				sizeLegend : {
					visible : false,
					title : {
						visible : false
					}
				},
				toolTip : {
					visible : false
				},
				interaction : {
					selectability : {
						axisLabelSelection : false,
						legendSelection : false,
						plotLassoSelection : false,
						plotStdSelection : false
					},
					enableHover : false
				},
				background : {
					visible : false
				},
				general : {
					layout : {
						padding : 0
					}
				},
				plotArea : {
					animation : {
						dataLoading : false,
						dataUpdating : false
					},
					markerSize : 4,
					marker : {
						visible : true,
						size : 4
					}
				},
				dataset : this.dataset
			};
			this.thumbnailChart = new sap.viz.ui5[this.chartType](this.thumbnailChartParam);
			this.fnDrawSelectionOnThumbnailChart = this.drawSelectionOnThumbnailChart.bind(self);
			this.thumbnailChart.attachInitialized(this.fnDrawSelectionOnThumbnailChart);
		} else {//If chart instance exists only update dataset and then set model
			this.thumbnailChart.destroyDataset();
			this.thumbnailChart.setDataset(this.dataset);
		}
		superClass.createThumbnailLayout.call(this);// call the base class createThumbnailLayout
		return this.thumbnailLayout;
	};
	/**
	 * @method setSelectionOnMainChart
	 * @param array of selected objects
	 * @description sets the Selection on main Chart
	 */
	sap.apf.ui.representations.BaseVizChartRepresentation.prototype.setSelectionOnMainChart = function(aSelection) {
		this.chart.selection(aSelection);
	};
	/**
	 * @method setSelectionOnThumbnailChart
	 * @param array of selected objects
	 * @description sets the Selection on thumbnail Chart
	 */
	sap.apf.ui.representations.BaseVizChartRepresentation.prototype.setSelectionOnThumbnailChart = function(aSelection) {
		this.aStoredSelection = aSelection;
		this.clearSelectionFromThumbnailChart();
		this.thumbnailChart.selection(aSelection);
	};
	/**
	 * @method clearSelectionFromMainChart
	 * @description clears all Selection from main Chart
	 */
	sap.apf.ui.representations.BaseVizChartRepresentation.prototype.clearSelectionFromMainChart = function() {
		this.chart.selection([], {
			clearSelection : true
		});
	};
	/**
	 * @method clearSelectionFromThumbnailChart
	 * @description clears all Selection from thumbnail Chart
	 */
	sap.apf.ui.representations.BaseVizChartRepresentation.prototype.clearSelectionFromThumbnailChart = function() {
		this.thumbnailChart.selection([], {
			clearSelection : true
		});
	};
	/**
	 * @method getSelectionFromChart
	 * @description gets the selected datapoints on the chart
	 * @return the array of selections from the chart
	 */
	sap.apf.ui.representations.BaseVizChartRepresentation.prototype.getSelectionFromChart = function() {
		var aSelection = this.chart.selection();
		return aSelection;
	};
	/**
	 * @method setFormatStringOnChart
	 * @param sFormatString - format string
	 * @description sets the format string for axis label and tooltip
	 */
	sap.apf.ui.representations.BaseVizChartRepresentation.prototype.setFormatStringOnChart = function(sFormatString) {
		var superClass = this;
		var bAllMeasuresSameUnit = superClass.getIsAllMeasureSameUnit();
		if (this.chart.getYAxis !== undefined && sFormatString !== "" && bAllMeasuresSameUnit) { // all measures has the unit with same semantics 
			this.setFormatString("yAxis", sFormatString);
		}
	};
	/**
	 * @method setFormatString
	 * @param formatString , the format string which has to be set for yAxis, xAxis or tooltip 
	 * @param sChartPropertyName , chart property on which property has to be applied (e.g. xAxis, yAxis, tooltip)
	 * @description sets the format string for axis label and tooltip
	 */
	sap.apf.ui.representations.BaseVizChartRepresentation.prototype.setFormatString = function(sChartPropertyName, sFormatString) {
		var oChartProperty;
		switch (sChartPropertyName) {
			case "xAxis":
				oChartProperty = this.chart.getYAxis().getLabel();
				break;
			case "yAxis":
				oChartProperty = this.chart.getXAxis().getLabel();
				break;
			case "tooltip":
				oChartProperty = this.chart.getToolTip();
				break;
			case "sizeLegend":
				oChartProperty = this.chart.getSizeLegend().getLabel();
				break;
			default:
				break;
		}
		oChartProperty.setFormatString(sFormatString);
	};
	/**
	 * @method getFormatString
	 * @param [measures] , the array of measures
	 * @description gets the format string information for all the measures
	 * @return oFormatStringInfo.labelFormatString- formatString for labels
	 */
	sap.apf.ui.representations.BaseVizChartRepresentation.prototype.getFormatString = function(aMeasure) {
		var oFormatStringInfo = this.getFormatStringForMeasures(aMeasure);
		return oFormatStringInfo.labelFormatString;
	};
	/**
	 * @method getChartTypeFromRepresentationType
	 * @param sRepresentationType- APF representation type which is set in the charts
	 * @description maps the APF representationtypes to the viz chart types
	 * @return sVizChartType- viz chart type needed by the constructor of viz charts for a given APF representation type
	 */
	sap.apf.ui.representations.BaseVizChartRepresentation.prototype.getChartTypeFromRepresentationType = function(sRepresentationType) {
		var aRepresentationTypes = sap.apf.ui.utils.CONSTANTS.representationTypes;
		var aVizChartTypes = sap.apf.ui.utils.CONSTANTS.vizChartTypes;
		var sVizChartType;
		switch (sRepresentationType) {
			case aRepresentationTypes.COLUMN_CHART:
				sVizChartType = aVizChartTypes.COLUMN;
				break;
			case aRepresentationTypes.LINE_CHART:
				sVizChartType = aVizChartTypes.LINE;
				break;
			case aRepresentationTypes.PIE_CHART:
				sVizChartType = aVizChartTypes.PIE;
				break;
			case aRepresentationTypes.STACKED_COLUMN_CHART:
				sVizChartType = aVizChartTypes.STACKED_COLUMN;
				break;
			case aRepresentationTypes.PERCENTAGE_STACKED_COLUMN_CHART:
				sVizChartType = aVizChartTypes.PERCENTAGE_STACKED_COLUMN;
				break;
			case aRepresentationTypes.SCATTERPLOT_CHART:
				sVizChartType = aVizChartTypes.SCATTERPLOT;
				break;
			case aRepresentationTypes.BUBBLE_CHART:
				sVizChartType = aVizChartTypes.BUBBLE;
				break;
			default:
				this.oMessageObject = this.oApi.createMessageObject({
					code : "6000",
					aParameters : [ sRepresentationType ]
				});
				this.oApi.putMessage(this.oMessageObject);
				break;
		}
		return sVizChartType;
	};
	/**
	 * @method getIsGroupTypeChart
	 * @return a boolean to indicate if the chart is of type "group", e.g. scatter,bubble
	 */
	sap.apf.ui.representations.BaseVizChartRepresentation.prototype.getIsGroupTypeChart = function() {
		var bIsGroupTypeChart;
		if (this.axisType === sap.apf.ui.utils.CONSTANTS.axisTypes.AXIS) {
			bIsGroupTypeChart = false;
		} else {
			bIsGroupTypeChart = true;
		}
		return bIsGroupTypeChart;
	};
	/**
	 * @method getDataSetHelper
	 * @description a boolean to indicate if the chart is of type "group", e.g. scatter,bubble
	 * @return the data set helper for vic chart
	 */
	sap.apf.ui.representations.BaseVizChartRepresentation.prototype.getDataSetHelper = function() {
		var bIsGroupTypeChart = this.getIsGroupTypeChart();
		var oDataSetHelper = new sap.apf.ui.representations.utils.VizDatasetHelper(bIsGroupTypeChart);
		return oDataSetHelper;
	};
}());
}; // end of sap/apf/ui/representations/BaseVizChartRepresentation.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.representations.BaseVizFrameChartRepresentation') ) {
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
jQuery.sap.declare("sap.apf.ui.representations.BaseVizFrameChartRepresentation");



(function() {
	'use strict';
	sap.apf.ui.representations.BaseVizFrameChartRepresentation = function(oApi, oParameters) {
		sap.apf.ui.representations.BaseUI5ChartRepresentation.apply(this, [ oApi, oParameters ]);
	};
	sap.apf.ui.representations.BaseVizFrameChartRepresentation.prototype = Object.create(sap.apf.ui.representations.BaseUI5ChartRepresentation.prototype);
	//Set the "constructor" property to refer to BaseUI5ChartRepresentation
	sap.apf.ui.representations.BaseVizFrameChartRepresentation.prototype.constructor = sap.apf.ui.representations.BaseVizFrameChartRepresentation;
	sap.apf.ui.representations.BaseVizFrameChartRepresentation.prototype.destroy = function() {
		if (this.chart) {
			this.chart.destroyDataset();
			this.chart.destroyFeeds();
			this.chart.detachRenderComplete(this.fnDrawSelectionOnMainChart);
			this.fnDrawSelectionOnMainChart = null;
		}
		if (this.thumbnailChart) {
			this.thumbnailChart.destroyDataset();
			this.thumbnailChart.destroyFeeds();
			this.thumbnailChart.detachRenderComplete(this.fnDrawSelectionOnThumbnailChart);
			this.fnDrawSelectionOnThumbnailChart = null;
		}
		sap.apf.ui.representations.BaseUI5ChartRepresentation.prototype.destroy.call(this);
	};
	/**
	 * @method getMeasures
	 * @return the measures for a chart
	 */
	sap.apf.ui.representations.BaseVizFrameChartRepresentation.prototype.getMeasures = function() {
		return this.measure;
	};
	/**
	 * @method getMainContent
	 * @param oStepTitle title of the main chart
	 * @param width width of the main chart
	 * @param height height of the main chart
	 * @description draws Main chart into the Chart area
	 */
	sap.apf.ui.representations.BaseVizFrameChartRepresentation.prototype.getMainContent = function(oStepTitle, width, height) {
		var self = this;
		var superClass = this;
		var chartHeight = height || 600;
		chartHeight = chartHeight + "px";
		var chartWidth = width || 1000;
		chartWidth = chartWidth + "px";
		this.title = oStepTitle;
		//vizFrame chart type
		if (!this.chartType) { // for charts which are coming from application
			this.chartType = this.getChartTypeFromRepresentationType(this.type); // set the value for chart type for thumbnail and main chart
		}
		// vizFrame chart constructor
		this.createDataset();
		if (!this.chart) {//If chart instance does not exist create a new instance
			this.chart = new sap.viz.ui5.controls.VizFrame({
				vizType : this.chartType,
				dataset : this.dataset,
				width : chartWidth,
				height : chartHeight,
				uiConfig : {
					applicationSet : "fiori"
				}
			});
			this.chart.setVizProperties({
				title : {
					visible : true,
					text : this.title
				},
				categoryAxis : {
					title : {
						visible : true
					},
					label : {
						visible : true
					}
				},
				valueAxis : {
					title : {
						visible : true
					},
					label : {
						visible : true
					}
				},
				legend : {
					visible : this.legendBoolean,
					title : {
						visible : this.legendBoolean
					},
					isScrollable : true
				},
				sizeLegend : {
					visible : true
				},
				valueAxis2 : {
					visible : true,
					title : {
						visible : true
					},
					label : {
						visible : true
					}
				},
				plotArea : {
					animation : {
						dataLoading : false,
						dataUpdating : false
					},
					isFixedDataPointSize : false
				},
				tooltip : {
					visible : true,
					label : {
						visible : true
					}
				},
				interaction : {
					behaviorType : null
				}
			});
			this.validateSelectionModes();
			/**
			* @method attachRenderComplete
			* @param event which is triggered on when the chart is initialized
			* @description Draws the selection
			*/
			this.fnDrawSelectionOnMainChart = this.drawSelectionOnMainChart.bind(self);
			this.chart.attachRenderComplete(this.fnDrawSelectionOnMainChart);
			if (this.metadata) { //if metadata is available, do the formatting for measures
				var oMeasureWithFormatString = {};
				var sFormatStringForTooltip;
				this.measure.forEach(function(measure) {
					var sFormatString = superClass.getFormatStringForMeasure(measure); // get the format string for each measure
					sFormatStringForTooltip = sFormatString; //assign one format string for tooltip
					oMeasureWithFormatString.measure = measure;
					oMeasureWithFormatString.formatString = sFormatString; // associate the format string with each measure
					self.setFormatStringOnChart(oMeasureWithFormatString);
				});
				this.setFormatString("tooltip", sFormatStringForTooltip); //tooltip is not a feedItem Id, formatting has to be applied explicitly
				if (this.handleCustomFormattingOnChart) { //call the sub class formatting 
					this.handleCustomFormattingOnChart();
				}
			}
			superClass.attachSelectionAndFormatValue.call(this, oStepTitle); // call the base class attachSelectionAndFormatValue
		} else {//If chart instance exists only update dataset, feeds and model
			if (width) {
				this.chart.setWidth(chartWidth);
			}
			if (height) {
				this.chart.setHeight(chartHeight);
			}
			this.chart.destroyDataset();
			this.chart.removeAllFeeds();
			this.chart.destroyFeeds();
			this.chart.vizUpdate({
				'data' : this.dataset
			});
		}
		this._createAndAddFeedItemBasedOnId(this.chart);
		this.chart.setModel(this.oModel);
		return this.chart;
	};
	/**
	* @method setFormatStringOnChart
	* @param {oMeasureFormatString}- 
	*              oMeasureFormatString : {
	*              measure : measure1,
	*              formatString : formatString
	              }
	* @description reads the boolean to indicate if all the measures have same unit semantic
	* and based on the axisFeedItemId from measures applies the formatting to the xAxis,yAxis,tooltip or sizeLegend
	*/
	sap.apf.ui.representations.BaseVizFrameChartRepresentation.prototype.setFormatStringOnChart = function(oMeasureFormatString) {
		var sFormatString = oMeasureFormatString.formatString;
		var sChartPropertyName = oMeasureFormatString.measure.axisfeedItemId;
		this.setFormatString(sChartPropertyName, sFormatString); //based on the feedItem Id , set the format string on the chart
	};
	/**
	 * @method setFormatString
	 * @param sChartPropertyName ,chart property on which property has to be applied (e.g. xAxis, yAxis, tooltip) 
	 * @param sFormatString , the format string which has to be set for yAxis, xAxis or tooltip 
	 * @description sets the format string for axis label and tooltip
	 */
	sap.apf.ui.representations.BaseVizFrameChartRepresentation.prototype.setFormatString = function(sChartPropertyName, formatString) {
		var superClass = this;
		var bIsAllMeasureSameUnit = superClass.getIsAllMeasureSameUnit();
		switch (sChartPropertyName) {
			case sap.apf.core.constants.vizFrame.feedItemTypes.VALUEAXIS:
				if (bIsAllMeasureSameUnit) { //apply the formatting only when all the measures have same unit semantic
					this.chart.setVizProperties({
						valueAxis : {
							label : {
								formatString : formatString
							}
						}
					});
				}
				break;
			case sap.apf.core.constants.vizFrame.feedItemTypes.VALUEAXIS2:
				if (bIsAllMeasureSameUnit) { //apply the formatting only when all the measures have same unit semantic
					this.chart.setVizProperties({
						valueAxis2 : {
							label : {
								formatString : formatString
							}
						}
					});
				}
				break;
			case sap.apf.core.constants.vizFrame.feedItemTypes.CATEGORYAXIS:
				this.chart.setVizProperties({
					categoryAxis : {
						label : {
							formatString : formatString
						}
					}
				});
				break;
			case sap.apf.core.constants.vizFrame.feedItemTypes.BUBBLEWIDTH:
				this.chart.setVizProperties({
					sizeLegend : {
						formatString : formatString
					}
				});
				break;
			case "tooltip":
				this.chart.setVizProperties({
					tooltip : {//takes one value unlike viz, in case of multiple measures which value should it be?
						formatString : formatString
					}
				});
				break;
			default:
				break;
		}
	};
	/**
	* @private
	* @function
	* @method _createAndAddFeedItemBasedOnId
	* @param {oChart}- instance of the chart
	* @description creates and adds the feedItem for dimensions/measures of a chart	
	*/
	sap.apf.ui.representations.BaseVizFrameChartRepresentation.prototype._createAndAddFeedItemBasedOnId = function(oChart) {
		var superClass = this;
		var oFlattendeDataSet = superClass.UI5ChartHelper.datasetObj;
		var sameFeedItemMeasureGroup = this._createFeedItemGroup(oFlattendeDataSet.measures); // create feedItem for all the measures
		this._addFeedItemsToChart(oChart, sameFeedItemMeasureGroup, "Measure"); // add measure feedItem to the chart	
		var sameFeedItemDimensionGroup = this._createFeedItemGroup(oFlattendeDataSet.dimensions); // create feedItem for all the dimensions
		this._addFeedItemsToChart(oChart, sameFeedItemDimensionGroup, "Dimension"); // add dimension feedItem to the chart
	};
	/**
	* @private
	* @function
	* @method _createFeedItemGroup
	* @param {aDataToBeGrouped}- dimensions/measures for a chart, which have to be grouped based on the feedItem id assigned
	* @description reads the feedItem id from each dimension/measure
	*         
	*          e.g. dimensions = [{
	*				name : dimension.name,
	*				value : '{' + dimension.value + '}',
	*				axisfeedItemId : "categoryAxis"
	*			}];
	*
	*and groups the dimensions/measures based on the axisfeedItemId , 
	*@return sameFeedItemGroup - associative array for all the feedItems available in the dimensions/measures
	*
	*          e.g. sameFeedItemGroup = {
	*                                valueAxis : [{measure1},{measure2}],
	*                                categoryAxis : {{dimension1},{dimension2}]
	*                               }	
	*/
	sap.apf.ui.representations.BaseVizFrameChartRepresentation.prototype._createFeedItemGroup = function(aDataToBeGrouped) {
		var sameFeedItemGroup = {};
		aDataToBeGrouped.forEach(function(data) { // group all the dimensions/measures based on the feedItem id
			var feedItemList = sameFeedItemGroup[data.axisfeedItemId];
			if (feedItemList) { //if the group name exist for one feedItem id, push the data in that group
				var bFieldAlreadyExists = feedItemList.some(function(oData) {
					return oData.name === data.name;
				});
				if (!bFieldAlreadyExists) {
					feedItemList.push(data);
				}
			} else { //else create a new group name for the feedItem id and push the data into it
				sameFeedItemGroup[data.axisfeedItemId] = [ data ];
			}
		});
		return sameFeedItemGroup;
	};
	/**
	* @private
	* @function
	* @name _addFeedItemsToChart
	* @param {oChart}- instance of the chart
	* @param {oGroupedData}- associative array which has all the dimensions and measures grouped based on the feedItem Id
	* 
	*     oGroupedData = {
	*                     valueAxis : [{measure1},{measure2}],
	*                     categoryAxis : {{dimension1},{dimension2}]
	*                    }
	*
	*@param sFeedItemType- type of the feedItem (dimension/measure)
	*
	*@description creates an object which has the id and the values required for a feedItem
	*           oFeedItem = {
	*                         feedItemId : "categoryAxis" or "valueAxis" etc
	*                         value : [value1,value2]
	*                       }
	* 
	*creates chart feedItem and adds it to the vizFrame charts
	*/
	sap.apf.ui.representations.BaseVizFrameChartRepresentation.prototype._addFeedItemsToChart = function(oChart, oGroupedData, sFeedItemType) {
		for( var key in oGroupedData) { //loop through all the groups
			var oFeedItem = {};
			var aFeedItemValue = [];
			var i = 0;
			for(i in oGroupedData[key]) { //loop through all the measures/dimensions of one group
				aFeedItemValue.push(oGroupedData[key][i].name); //push all the measure/dimension name which has same feedIem id to an array
				oFeedItem.feedItemId = oGroupedData[key][0].axisfeedItemId; //assign one id to each feedItem object (all the id will be same in one group) 
			}
			oFeedItem.value = aFeedItemValue; //assign the values to each feedItem object
			var chartFeedItem = new sap.viz.ui5.controls.common.feeds.FeedItem({
				uid : oFeedItem.feedItemId,
				type : sFeedItemType,
				values : oFeedItem.value
			});
			oChart.addFeed(chartFeedItem);
		}
	};
	/**
	 * @method validateSelectionModes
	 * @description sets the different selection modes on the charts based on the required filter
	 */
	sap.apf.ui.representations.BaseVizFrameChartRepresentation.prototype.validateSelectionModes = function() {
		if (this.parameter.requiredFilters === undefined || this.parameter.requiredFilters.length === 0) {
			this.chart.setVizProperties({
				interaction : {
					selectability : {
						mode : 'none'
					},
					behaviorType : null
				}
			});
		} else {
			this.chart.setVizProperties({
				interaction : {
					selectability : {
						mode : 'multiple'
					},
					behaviorType : null
				}
			});
			if (this.parameter.dimensions.length > 1) {
				if (this.parameter.requiredFilters[0] === this.parameter.dimensions[1].fieldName) {
					this.chart.setVizProperties({
						interaction : {
							selectability : {
								axisLabelSelection : false
							}
						}
					});
				} else if (this.parameter.requiredFilters[0] === this.parameter.dimensions[0].fieldName) {
					this.chart.setVizProperties({
						interaction : {
							selectability : {
								legendSelection : false
							}
						}
					});
				}
			}
		}
	};
	/**
	 *@method getThumbnailContent
	 *@description draws Thumbnail for the current chart type and returns to the calling object
	 *@returns thumbnail object for the chart type
	 */
	sap.apf.ui.representations.BaseVizFrameChartRepresentation.prototype.getThumbnailContent = function() {
		var self = this;
		var superClass = this;
		var height = sap.apf.ui.utils.CONSTANTS.thumbnailDimensions.HEIGHT;
		var width = sap.apf.ui.utils.CONSTANTS.thumbnailDimensions.WIDTH;
		//vizFrame chart type
		if (!this.chartType) { // for charts which are coming from application
			this.chartType = this.getChartTypeFromRepresentationType(this.type); // set the value for chart type for thumbnail and main chart
		}
		this.createDataset();
		if (!this.thumbnailChart) {//If thumbnail chart instance does not exist create a new instance
			this.thumbnailChart = new sap.viz.ui5.controls.VizFrame({
				vizType : this.chartType,
				width : width,
				height : height,
				dataset : this.dataset
			});
			this.thumbnailChart.setVizProperties({
				title : {
					visible : false
				},
				categoryAxis : {
					visible : false,
					title : {
						visible : false
					}
				},
				valueAxis : {
					visible : false,
					title : {
						visible : false
					}
				},
				valueAxis2 : {
					visible : false,
					title : {
						visible : false
					}
				},
				legend : {
					visible : false,
					title : {
						visible : false
					}
				},
				sizeLegend : {
					visible : false
				},
				tooltip : {
					visible : false
				},
				interaction : {
					selectability : {
						axisLabelSelection : false,
						legendSelection : false,
						plotLassoSelection : false,
						plotStdSelection : false
					},
					enableHover : false
				},
				background : {
					visible : false
				},
				general : {
					layout : {
						padding : 0
					}
				},
				plotArea : {
					markerSize : 4,
					marker : {
						visible : true,
						size : 4
					},
					animation : {
						dataLoading : false,
						dataUpdating : false
					},
					gridline : {
						visible : false
					},
					dataLabel : {
						visible : false
					},
					lineStyle : {
						rules : [ {
							properties : {
								width : 1
							}
						} ]
					}
				}
			});
			this.fnDrawSelectionOnThumbnailChart = this.drawSelectionOnThumbnailChart.bind(self);
			this.thumbnailChart.attachRenderComplete(this.fnDrawSelectionOnThumbnailChart);
		} else {//If thumbnail chart instance exists only update dataset, feeds and model
			this.thumbnailChart.destroyDataset();
			this.thumbnailChart.removeAllFeeds();
			this.thumbnailChart.destroyFeeds();
			this.thumbnailChart.vizUpdate({
				'data' : this.dataset
			});
		}
		this._createAndAddFeedItemBasedOnId(this.thumbnailChart);
		superClass.createThumbnailLayout.call(this);// call the base class createThumbnailLayout
		return this.thumbnailLayout;
	};
	/**
	 * @method setSelectionOnMainChart
	 * @param array of selected objects
	 * @description sets the Selection on main Chart
	 */
	sap.apf.ui.representations.BaseVizFrameChartRepresentation.prototype.setSelectionOnMainChart = function(aSelection) {
		this.chart.vizSelection(aSelection);
	};
	/**
	 * @method setSelectionOnThumbnailChart
	 * @param array of selected objects
	 * @description sets the Selection on thumbnail Chart
	 */
	sap.apf.ui.representations.BaseVizFrameChartRepresentation.prototype.setSelectionOnThumbnailChart = function(aSelection) {
		this.aStoredSelection = aSelection;
		this.clearSelectionFromThumbnailChart();
		this.thumbnailChart.vizSelection(aSelection);
	};
	/**
	 * @method clearSelectionFromMainChart
	 * @description clears all Selection from main Chart
	 */
	sap.apf.ui.representations.BaseVizFrameChartRepresentation.prototype.clearSelectionFromMainChart = function() {
		this.chart.vizSelection([], {
			clearSelection : true
		});
	};
	/**
	 * @method clearSelectionFromThumbnailChart
	 * @description clears all Selection from thumbnail Chart
	 */
	sap.apf.ui.representations.BaseVizFrameChartRepresentation.prototype.clearSelectionFromThumbnailChart = function() {
		this.thumbnailChart.vizSelection([], {
			clearSelection : true
		});
	};
	/**
	 * @method getSelectionFromChart
	 * @description gets the selected datapoints on the chart
	 * @return the array of selections from the chart
	 */
	sap.apf.ui.representations.BaseVizFrameChartRepresentation.prototype.getSelectionFromChart = function() {
		var aSelection = this.chart.vizSelection();
		return aSelection;
	};
	/**
	 * @method getChartTypeFromRepresentationType
	 * @param sRepresentationType- APF representation type which is set in the charts
	 * @description maps the APF representationtypes to the vizFrame chart types
	 * @return sVizFrameChartType- vizFrame chart type needed by the constructor of vizFrame charts for a given APF representation type
	 */
	sap.apf.ui.representations.BaseVizFrameChartRepresentation.prototype.getChartTypeFromRepresentationType = function(sRepresentationType) {
		var aRepresentationTypes = sap.apf.ui.utils.CONSTANTS.representationTypes;
		var vizFrameChartTypes = sap.apf.ui.utils.CONSTANTS.vizFrameChartTypes;
		var sVizFrameChartType;
		switch (sRepresentationType) {
			case aRepresentationTypes.COLUMN_CHART:
				sVizFrameChartType = vizFrameChartTypes.COLUMN;
				break;
			case aRepresentationTypes.LINE_CHART:
				sVizFrameChartType = vizFrameChartTypes.LINE;
				break;
			case aRepresentationTypes.PIE_CHART:
				sVizFrameChartType = vizFrameChartTypes.PIE;
				break;
			case aRepresentationTypes.STACKED_COLUMN_CHART:
				sVizFrameChartType = vizFrameChartTypes.STACKED_COLUMN;
				break;
			case aRepresentationTypes.PERCENTAGE_STACKED_COLUMN_CHART:
				sVizFrameChartType = vizFrameChartTypes.PERCENTAGE_STACKED_COLUMN;
				break;
			case aRepresentationTypes.SCATTERPLOT_CHART:
				sVizFrameChartType = vizFrameChartTypes.SCATTERPLOT;
				break;
			case aRepresentationTypes.BUBBLE_CHART:
				sVizFrameChartType = vizFrameChartTypes.BUBBLE;
				break;
			case aRepresentationTypes.BAR_CHART:
				sVizFrameChartType = vizFrameChartTypes.BAR;
				break;
			case aRepresentationTypes.STACKED_BAR_CHART:
				sVizFrameChartType = vizFrameChartTypes.STACKED_BAR;
				break;
			case aRepresentationTypes.PERCENTAGE_STACKED_BAR_CHART:
				sVizFrameChartType = vizFrameChartTypes.PERCENTAGE_STACKED_BAR;
				break;
			default:
				this.oMessageObject = this.oApi.createMessageObject({
					code : "6000",
					aParameters : [ sRepresentationType ]
				});
				this.oApi.putMessage(this.oMessageObject);
				break;
		}
		return sVizFrameChartType;
	};
	/**
	 * @method getIsGroupTypeChart
	 * @return a boolean to indicate if the chart is of type "group", e.g. scatter,bubble
	 */
	sap.apf.ui.representations.BaseVizFrameChartRepresentation.prototype.getIsGroupTypeChart = function() {
		return this.bIsGroupTypeChart ? this.bIsGroupTypeChart : false;
	};
	/**
	 * @method getDataSetHelper
	 * @description a boolean to indicate if the chart is of type "group", e.g. scatter,bubble
	 * @return the data set helper for vic chart
	 */
	sap.apf.ui.representations.BaseVizFrameChartRepresentation.prototype.getDataSetHelper = function() {
		var bIsGroupTypeChart = this.getIsGroupTypeChart();
		var oDataSetHelper = new sap.apf.ui.representations.utils.vizFrameDatasetHelper(bIsGroupTypeChart);
		return oDataSetHelper;
	};
}());
}; // end of sap/apf/ui/representations/BaseVizFrameChartRepresentation.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.representations.barChart') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
jQuery.sap.declare("sap.apf.ui.representations.barChart");
//jQuery.sap.require("sap.apf.core.constants");

/**
 * @class barChart constructor.
 * @param oParametersdefines parameters required for chart such as Dimension/Measures,tooltip, axis information.
 * @returns chart object
 */
sap.apf.ui.representations.barChart = function(oApi, oParameters) {
	sap.apf.ui.representations.BaseVizFrameChartRepresentation.apply(this, [ oApi, oParameters ]);
	this.type = sap.apf.ui.utils.CONSTANTS.representationTypes.BAR_CHART;
	this._createDefaultFeedItemId();
};
sap.apf.ui.representations.barChart.prototype = Object.create(sap.apf.ui.representations.BaseVizFrameChartRepresentation.prototype);
//Set the "constructor" property to refer to barChart
sap.apf.ui.representations.barChart.prototype.constructor = sap.apf.ui.representations.barChart;
/** 
 * @private
 * @method _createDefaultFeedItemId
 * @description reads the oParameters for chart and modifies it by including a default feedItem id 
 * in case the "kind" property is not defined in dimension/measures
 */
sap.apf.ui.representations.barChart.prototype._createDefaultFeedItemId = function() {
	this.parameter.measures.forEach(function(measure) {
		if (measure.kind === undefined) {//handle the scenario where the kind is not available
			measure.axisfeedItemId = sap.apf.core.constants.vizFrame.feedItemTypes.VALUEAXIS;
		}
	});
	this.parameter.dimensions.forEach(function(dimension, index) {
		if (dimension.kind === undefined) {//handle the scenario where the kind is not available
			dimension.axisfeedItemId = index === 0 ? sap.apf.core.constants.vizFrame.feedItemTypes.CATEGORYAXIS : sap.apf.core.constants.vizFrame.feedItemTypes.COLOR;
		}
	});
};

}; // end of sap/apf/ui/representations/barChart.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.representations.bubbleChart') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
jQuery.sap.declare("sap.apf.ui.representations.bubbleChart");


/**
 * @class columnChart constructor.
 * @param oParametersdefines parameters required for chart such as Dimension/Measures,tooltip, axis information.
 * @returns chart object
 */
sap.apf.ui.representations.bubbleChart = function(oApi, oParameters) {
	sap.apf.ui.representations.BaseVizFrameChartRepresentation.apply(this, [ oApi, oParameters ]);
	this.type = sap.apf.ui.utils.CONSTANTS.representationTypes.BUBBLE_CHART;
	this.bIsGroupTypeChart = true;
	this._createDefaultFeedItemId();
};
sap.apf.ui.representations.bubbleChart.prototype = Object.create(sap.apf.ui.representations.BaseVizFrameChartRepresentation.prototype);
//Set the "constructor" property to refer to bubbleChart
sap.apf.ui.representations.bubbleChart.prototype.constructor = sap.apf.ui.representations.bubbleChart;
/** 
 * @private
 * @method createDefaultFeedItemId
 * @description reads the oParameters for chart and modifies it by including a default feedItem id 
 * in case the "kind" property is not defined in dimension/measures
 */
sap.apf.ui.representations.bubbleChart.prototype._createDefaultFeedItemId = function() {
	this.parameter.measures.forEach(function(measure, index) {
		if (measure.kind === undefined) {//handle the scenario where the kind is not available
			if(index < 2 ) {
				if(index === 0) {
					measure.axisfeedItemId = sap.apf.core.constants.vizFrame.feedItemTypes.VALUEAXIS;
				} else {
					measure.axisfeedItemId  = sap.apf.core.constants.vizFrame.feedItemTypes.VALUEAXIS2;
				}
			} else if (index === 2){
				measure.axisfeedItemId  = sap.apf.core.constants.vizFrame.feedItemTypes.BUBBLEWIDTH;
			} else {
				measure.axisfeedItemId  = sap.apf.core.constants.vizFrame.feedItemTypes.BUBBLEHEIGTH;
			}
		}
	});
	this.parameter.dimensions.forEach(function(dimension, index) {
		if (dimension.kind === undefined) {//handle the scenario where the kind is not available
			dimension.axisfeedItemId = index === 0 ? sap.apf.core.constants.vizFrame.feedItemTypes.COLOR : sap.apf.core.constants.vizFrame.feedItemTypes.SHAPE;
		}
	});
};
}; // end of sap/apf/ui/representations/bubbleChart.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.representations.columnChart') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
jQuery.sap.declare("sap.apf.ui.representations.columnChart");

/**
 * @class columnChart constructor.
 * @param oParametersdefines parameters required for chart such as Dimension/Measures,tooltip, axis information.
 * @returns chart object
 */
sap.apf.ui.representations.columnChart = function(oApi, oParameters) {
	sap.apf.ui.representations.BaseVizFrameChartRepresentation.apply(this, [ oApi, oParameters ]);
	this.type = sap.apf.ui.utils.CONSTANTS.representationTypes.COLUMN_CHART;
	this._createDefaultFeedItemId();
};
sap.apf.ui.representations.columnChart.prototype = Object.create(sap.apf.ui.representations.BaseVizFrameChartRepresentation.prototype);
//Set the "constructor" property to refer to columnChart
sap.apf.ui.representations.columnChart.prototype.constructor = sap.apf.ui.representations.columnChart;
/** 
 * @private
 * @method _createDefaultFeedItemId
 * @description reads the oParameters for chart and modifies it by including a default feedItem id 
 * in case the "kind" property is not defined in dimension/measures
 */
sap.apf.ui.representations.columnChart.prototype._createDefaultFeedItemId = function() {
	this.parameter.measures.forEach(function(measure) {
		if (measure.kind === undefined) {//handle the scenario where the kind is not available
			measure.axisfeedItemId = sap.apf.core.constants.vizFrame.feedItemTypes.VALUEAXIS;
		}
	});
	this.parameter.dimensions.forEach(function(dimension, index) {
		if (dimension.kind === undefined) {//handle the scenario where the kind is not available
			dimension.axisfeedItemId = index === 0 ? sap.apf.core.constants.vizFrame.feedItemTypes.CATEGORYAXIS : sap.apf.core.constants.vizFrame.feedItemTypes.COLOR;
		}
	});
};
}; // end of sap/apf/ui/representations/columnChart.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.representations.lineChart') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
jQuery.sap.declare("sap.apf.ui.representations.lineChart");


/** 
 * @class lineChart constructor.
 * @param oParameters defines parameters required for chart such as Dimension/Measures, tooltip, axis information.
 * @returns chart object 
 */
sap.apf.ui.representations.lineChart = function(oApi, oParameters) {
	sap.apf.ui.representations.BaseVizFrameChartRepresentation.apply(this, [ oApi, oParameters ]);
	this.type = sap.apf.ui.utils.CONSTANTS.representationTypes.LINE_CHART;
	this._createDefaultFeedItemId();
};
sap.apf.ui.representations.lineChart.prototype = Object.create(sap.apf.ui.representations.BaseVizFrameChartRepresentation.prototype);
//Set the "constructor" property to refer to lineChart
sap.apf.ui.representations.lineChart.prototype.constructor = sap.apf.ui.representations.lineChart;
/** 
 * @method _createDefaultFeedItemId
 * @description reads the oParameters for chart and modifies it by including a default feedItem id 
 * in case the "kind" property is not defined in dimension/measures
 */
sap.apf.ui.representations.lineChart.prototype._createDefaultFeedItemId = function() {
	this.parameter.measures.forEach(function(measure) {
		if (measure.kind === undefined) {//handle the scenario where the kind is not available
			measure.axisfeedItemId = sap.apf.core.constants.vizFrame.feedItemTypes.VALUEAXIS;
		}
	});
	this.parameter.dimensions.forEach(function(dimension, index) {
		if (dimension.kind === undefined) {//handle the scenario where the kind is not available
			dimension.axisfeedItemId = index === 0 ? sap.apf.core.constants.vizFrame.feedItemTypes.CATEGORYAXIS : sap.apf.core.constants.vizFrame.feedItemTypes.COLOR;
		}
	});
};
}; // end of sap/apf/ui/representations/lineChart.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.representations.percentageStackedBarChart') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.apf.ui.representations.percentageStackedBarChart");
/**
 * @class stackColumn constructor.
 * @param oParameters defines parameters required for chart such as Dimension/Measures, tooltip, axis information.
 * @returns chart object 
 */
sap.apf.ui.representations.percentageStackedBarChart = function(oApi, oParameters) {
	sap.apf.ui.representations.BaseVizFrameChartRepresentation.apply(this, [ oApi, oParameters ]);
	this.type = sap.apf.ui.utils.CONSTANTS.representationTypes.PERCENTAGE_STACKED_BAR_CHART;
	this._createDefaultFeedItemId();
};
sap.apf.ui.representations.percentageStackedBarChart.prototype = Object.create(sap.apf.ui.representations.BaseVizFrameChartRepresentation.prototype);
//Set the "constructor" property to refer to percentageStackedBarChart
sap.apf.ui.representations.percentageStackedBarChart.prototype.constructor = sap.apf.ui.representations.percentageStackedBarChart;
/** 
 * @private
 * @method _createDefaultFeedItemId
 * @description reads the oParameters for chart and modifies it by including a default feedItem id 
 * in case the "kind" property is not defined in dimension/measures
 */
sap.apf.ui.representations.percentageStackedBarChart.prototype._createDefaultFeedItemId = function() {
	this.parameter.measures.forEach(function(measure) {
		if (measure.kind === undefined) {//handle the scenario where the kind is not available
			measure.axisfeedItemId = sap.apf.core.constants.vizFrame.feedItemTypes.VALUEAXIS;
		}
	});
	this.parameter.dimensions.forEach(function(dimension, index) {
		if (dimension.kind === undefined) {//handle the scenario where the kind is not available
			dimension.axisfeedItemId = index === 0 ? sap.apf.core.constants.vizFrame.feedItemTypes.CATEGORYAXIS : sap.apf.core.constants.vizFrame.feedItemTypes.COLOR;
		}
	});
};
/**
 * @method handleCustomFormattingOnChart
 * @description sets the custom format string
 */
sap.apf.ui.representations.percentageStackedBarChart.prototype.setFormatString = function() {
	//overriding the base class setFormatString, since percentage chart does not need the formatting for axis and tooltip
	return;
};
}; // end of sap/apf/ui/representations/percentageStackedBarChart.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.representations.percentageStackedColumnChart') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.apf.ui.representations.percentageStackedColumnChart");
/**
 * @class stackColumn constructor.
 * @param oParameters defines parameters required for chart such as Dimension/Measures, tooltip, axis information.
 * @returns chart object 
 */
sap.apf.ui.representations.percentageStackedColumnChart = function(oApi, oParameters) {
	sap.apf.ui.representations.BaseVizFrameChartRepresentation.apply(this, [ oApi, oParameters ]);
	this.type = sap.apf.ui.utils.CONSTANTS.representationTypes.PERCENTAGE_STACKED_COLUMN_CHART;
	this._createDefaultFeedItemId();
};
sap.apf.ui.representations.percentageStackedColumnChart.prototype = Object.create(sap.apf.ui.representations.BaseVizFrameChartRepresentation.prototype);
//Set the "constructor" property to refer to percentageStackedColumnChart
sap.apf.ui.representations.percentageStackedColumnChart.prototype.constructor = sap.apf.ui.representations.percentageStackedColumnChart;
/** 
 * @private
 * @method _createDefaultFeedItemId
 * @description reads the oParameters for chart and modifies it by including a default feedItem id 
 * in case the "kind" property is not defined in dimension/measures
 */
sap.apf.ui.representations.percentageStackedColumnChart.prototype._createDefaultFeedItemId = function() {
	this.parameter.measures.forEach(function(measure) {
		if (measure.kind === undefined) {//handle the scenario where the kind is not available
			measure.axisfeedItemId = sap.apf.core.constants.vizFrame.feedItemTypes.VALUEAXIS;
		}
	});
	this.parameter.dimensions.forEach(function(dimension, index) {
		if (dimension.kind === undefined) {//handle the scenario where the kind is not available
			dimension.axisfeedItemId = index === 0 ? sap.apf.core.constants.vizFrame.feedItemTypes.CATEGORYAXIS : sap.apf.core.constants.vizFrame.feedItemTypes.COLOR;
		}
	});
};
/**
 * @method handleCustomFormattingOnChart
 * @description sets the custom format string
 */
sap.apf.ui.representations.percentageStackedColumnChart.prototype.setFormatString = function() {
	//overriding the base class setFormatString, since percentage chart does not need the formatting for axis and tooltip
	return;
};
}; // end of sap/apf/ui/representations/percentageStackedColumnChart.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.representations.pieChart') ) {
/*!
* SAP APF Analysis Path Framework
* 
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
*/


jQuery.sap.declare("sap.apf.ui.representations.pieChart");
/** 
 * @class pieChart constructor.
* @param oParameters defines parameters required for chart such as Dimension/Measures, tooltip, axis information.
* @returns chart object 
 */
sap.apf.ui.representations.pieChart = function(oApi, oParameters) {
	sap.apf.ui.representations.BaseVizFrameChartRepresentation.apply(this, [ oApi, oParameters ]);
	this.type = sap.apf.ui.utils.CONSTANTS.representationTypes.PIE_CHART;
	this._createDefaultFeedItemId();
};
sap.apf.ui.representations.pieChart.prototype = Object.create(sap.apf.ui.representations.BaseVizFrameChartRepresentation.prototype);
//Set the "constructor" property to refer to pieChart
sap.apf.ui.representations.pieChart.prototype.constructor = sap.apf.ui.representations.pieChart;
/**
* @private 
 * @method _createDefaultFeedItemId
* @description reads the oParameters for chart and modifies it by including a default feedItem id 
 * in case the "kind" property is not defined in dimension/measures
*/
sap.apf.ui.representations.pieChart.prototype._createDefaultFeedItemId = function() {
	this.parameter.measures.forEach(function(measure) {
		if (measure.kind === undefined) {//handle the scenario where the kind is not available
			measure.axisfeedItemId = sap.apf.core.constants.vizFrame.feedItemTypes.SIZE;
		}
	});
	this.parameter.dimensions.forEach(function(dimension) {
		if (dimension.kind === undefined) {//handle the scenario where the kind is not available
			dimension.axisfeedItemId = sap.apf.core.constants.vizFrame.feedItemTypes.COLOR;
		}
	});
};

}; // end of sap/apf/ui/representations/pieChart.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.representations.scatterPlotChart') ) {
/*!
* SAP APF Analysis Path Framework
* 
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
*/


jQuery.sap.declare("sap.apf.ui.representations.scatterPlotChart");
/** 
 * @class scatterPlotChart constructor.
* @param oParameters defines parameters required for chart such as Dimension/Measures, tooltip, axis information.
* @returns chart object 
 */
sap.apf.ui.representations.scatterPlotChart = function(oApi, oParameters) {
	sap.apf.ui.representations.BaseVizFrameChartRepresentation.apply(this, [ oApi, oParameters ]);
	this.type = sap.apf.ui.utils.CONSTANTS.representationTypes.SCATTERPLOT_CHART;
	this.bIsGroupTypeChart = true;
	this._createDefaultFeedItemId();
};
sap.apf.ui.representations.scatterPlotChart.prototype = Object.create(sap.apf.ui.representations.BaseVizFrameChartRepresentation.prototype);
//Set the "constructor" property to refer to scatterPlotChart
sap.apf.ui.representations.scatterPlotChart.prototype.constructor = sap.apf.ui.representations.scatterPlotChart;
/** 
 * @method _createDefaultFeedItemId
* @description reads the oParameters for chart and modifies it by including a default feedItem id 
 * in case the "kind" property is not defined in dimension/measures
*/
sap.apf.ui.representations.scatterPlotChart.prototype._createDefaultFeedItemId = function() {
	this.parameter.measures.forEach(function(measure, index) {
		if (measure.kind === undefined) {//handle the scenario where the kind is not available
			measure.axisfeedItemId = index === 0 ? sap.apf.core.constants.vizFrame.feedItemTypes.VALUEAXIS : sap.apf.core.constants.vizFrame.feedItemTypes.VALUEAXIS2;
		}
	});
	this.parameter.dimensions.forEach(function(dimension, index) {
		if (dimension.kind === undefined) {//handle the scenario where the kind is not available
			dimension.axisfeedItemId = index === 0 ? sap.apf.core.constants.vizFrame.feedItemTypes.COLOR : sap.apf.core.constants.vizFrame.feedItemTypes.SHAPE;
		}
	});
};

}; // end of sap/apf/ui/representations/scatterPlotChart.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.representations.stackedBarChart') ) {
/*!
* SAP APF Analysis Path Framework
* 
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
*/


jQuery.sap.declare("sap.apf.ui.representations.stackedBarChart");
/** 
 * @class stackedBarChart constructor.
* @param oParameters defines parameters required for chart such as Dimension/Measures, tooltip, axis information.
* @returns chart object 
 */
sap.apf.ui.representations.stackedBarChart = function(oApi, oParameters) {
	sap.apf.ui.representations.BaseVizFrameChartRepresentation.apply(this, [ oApi, oParameters ]);
	this.type = sap.apf.ui.utils.CONSTANTS.representationTypes.STACKED_BAR_CHART;
	this._createDefaultFeedItemId();
};
sap.apf.ui.representations.stackedBarChart.prototype = Object.create(sap.apf.ui.representations.BaseVizFrameChartRepresentation.prototype);
//Set the "constructor" property to refer to stackedColumnChart
sap.apf.ui.representations.stackedBarChart.prototype.constructor = sap.apf.ui.representations.stackedBarChart;
/** 
 * @private
* @method _createDefaultFeedItemId
* @description reads the oParameters for chart and modifies it by including a default feedItem id 
 * in case the "kind" property is not defined in dimension/measures
*/
sap.apf.ui.representations.stackedBarChart.prototype._createDefaultFeedItemId = function() {
	this.parameter.measures.forEach(function(measure) {
		if (measure.kind === undefined) {//handle the scenario where the kind is not available
			measure.axisfeedItemId = sap.apf.core.constants.vizFrame.feedItemTypes.VALUEAXIS;
		}
	});
	this.parameter.dimensions.forEach(function(dimension, index) {
		if (dimension.kind === undefined) {//handle the scenario where the kind is not available
			dimension.axisfeedItemId = index === 0 ? sap.apf.core.constants.vizFrame.feedItemTypes.CATEGORYAXIS : sap.apf.core.constants.vizFrame.feedItemTypes.COLOR;
		}
	});
};

}; // end of sap/apf/ui/representations/stackedBarChart.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.representations.stackedColumnChart') ) {
/*!
* SAP APF Analysis Path Framework
* 
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
*/


jQuery.sap.declare("sap.apf.ui.representations.stackedColumnChart");
/** 
 * @class stackedColumnChart constructor.
* @param oParameters defines parameters required for chart such as Dimension/Measures, tooltip, axis information.
* @returns chart object 
 */
sap.apf.ui.representations.stackedColumnChart = function(oApi, oParameters) {
	sap.apf.ui.representations.BaseVizFrameChartRepresentation.apply(this, [ oApi, oParameters ]);
	this.type = sap.apf.ui.utils.CONSTANTS.representationTypes.STACKED_COLUMN_CHART;
	this._createDefaultFeedItemId();
};
sap.apf.ui.representations.stackedColumnChart.prototype = Object.create(sap.apf.ui.representations.BaseVizFrameChartRepresentation.prototype);
//Set the "constructor" property to refer to stackedColumnChart
sap.apf.ui.representations.stackedColumnChart.prototype.constructor = sap.apf.ui.representations.stackedColumnChart;
/** 
 * @private
* @method _createDefaultFeedItemId
* @description reads the oParameters for chart and modifies it by including a default feedItem id 
 * in case the "kind" property is not defined in dimension/measures
*/
sap.apf.ui.representations.stackedColumnChart.prototype._createDefaultFeedItemId = function() {
	this.parameter.measures.forEach(function(measure) {
		if (measure.kind === undefined) {//handle the scenario where the kind is not available
			measure.axisfeedItemId = sap.apf.core.constants.vizFrame.feedItemTypes.VALUEAXIS;
		}
	});
	this.parameter.dimensions.forEach(function(dimension, index) {
		if (dimension.kind === undefined) {//handle the scenario where the kind is not available
			dimension.axisfeedItemId = index === 0 ? sap.apf.core.constants.vizFrame.feedItemTypes.CATEGORYAXIS : sap.apf.core.constants.vizFrame.feedItemTypes.COLOR;
		}
	});
};

}; // end of sap/apf/ui/representations/stackedColumnChart.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.representations.table') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */

jQuery.sap.declare("sap.apf.ui.representations.table");
/** 
 * @class tableRepresentation constructor.
 * @param oParameters defines parameters required for chart such as Dimension/Measures, tooltip, axis information.
 * @returns table object 
 */
/*global window, document*/
sap.apf.ui.representations.table = function(oApi, oParameters) {
	var self = this;
	this.parameter = oParameters;
	this.type = sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION;
	this.fields = oParameters.dimensions.concat(oParameters.measures);
	this.columns = {
		name : [],
		value : [],
		width : []
	};
	jQuery.sap.require({
		modName : "sap.ui.thirdparty.d3"
	});
	this.aDataResponse = [];
	this.alternateRepresentation = oParameters.defaultListConfigurationTypeID;
	this.filter = oApi.createFilter();
	var skip = 0;
	var top = 100;
	var sortProperty;
	var sortOrderIsDescending;
	var triggerBool = false;
	var eventsFired = 0;
	var skipAction = 0;
	var respData = [];
	this.printMode = false;
	this.oModel = new sap.ui.model.json.JSONModel();
	this.oModel.setSizeLimit(10000);
	this.isAlternateRepresentation = oParameters.isAlternateRepresentation;
	/**
	 * @method getParameter
	 * @description returns the constructor arguments which will be used to create toggle representation.
	 */
	this.getParameter = function() {
		return this.parameter;
	};
	/**
	 * @method setData
	 * @param aDataResponse  Response from oData service
	 * @param metadata Metadata of the oData service
	 * @description Public API which Fetches the data from oData service and updates the selection if present 
	 */
	this.setData = function(aDataResponse, metadata) {
		if (skipAction === 0) {
			if (triggerBool) {
				aDataResponse.map(function(obj) {
					self.aDataResponse.push(obj);
				});
				skipAction++;
			} else {
				skip = 0;
				//top = 100;
				self.aDataResponse = [];
				aDataResponse.map(function(obj) {
					self.aDataResponse.push(obj);
				});
			}
		}
		respData = aDataResponse; // To check whether record exists or not		
		this.metadata = metadata;
		triggerBool = false;
		this.formatter = new sap.apf.ui.utils.formatter({
			getEventCallback : oApi.getEventCallback.bind(oApi),
			getTextNotHtmlEncoded : oApi.getTextNotHtmlEncoded
		}, metadata, aDataResponse);
	};
	/**
	 * @method getAlternateRepresentation
	 * @description returns the alternate representation of current step (i.e. list representation for the charts)  
	 */
	this.getAlternateRepresentation = function() {
		return this.alternateRepresentation;
	};
	/**
	 * @description returns meta data for representation type
	 */
	this.getMetaData = function() {
		return this.metadata;
	};
	/**
	 * @description returns data for representation type
	 */
	this.getData = function() {
		return this.aDataResponse;
	};
	/**
	 * @method  getRequestOptions 
	 **/
	this.getRequestOptions = function() {
		if (!triggerBool) {
			top = 100;
			skip = 0;
			skipAction = 0;
		}
		var requestObj = {
			paging : {
				top : top,
				skip : skip,
				inlineCount : true
			}
		};
		var orderByArray;
		if (sortProperty !== undefined) {
			orderByArray = [ {
				property : sortProperty,
				descending : sortOrderIsDescending
			} ];
			requestObj.orderby = orderByArray;
		} else {
			if (this.getParameter().orderby && this.getParameter().orderby.length) {
				var aOrderbyProps = this.getParameter().orderby.map(function(oOrderby) {
					return {
						property : oOrderby.property,
						descending : !oOrderby.ascending
					};
				});
				requestObj.orderby = aOrderbyProps;
			}
		}
		return requestObj;
	};
	this.createDataset = function() {
		if (self.getData().length !== 0) {
			for( var i = 0; i < self.fields.length; i++) {
				self.columns.value[i] = self.fields[i].fieldName;
				var name = "";
				var sUnitValue = "";
				if (self.getMetaData() !== undefined && self.getMetaData().getPropertyMetadata(self.fields[i].fieldName).unit !== undefined) {
					var sUnitReference = self.getMetaData().getPropertyMetadata(self.fields[i].fieldName).unit;
					sUnitValue = self.getData()[0][sUnitReference];// take value of unit from first data set.
					name = self.fields[i].fieldDesc === undefined || !oApi.getTextNotHtmlEncoded(self.fields[i].fieldDesc).length ? self.getMetaData().getPropertyMetadata(self.fields[i].fieldName).label + " (" + sUnitValue + ")" : oApi
							.getTextNotHtmlEncoded(self.fields[i].fieldDesc)
							+ " (" + sUnitValue + ")";
					self.columns.name[i] = name;
				} else {
					self.columns.name[i] = this.fields[i].fieldDesc === undefined || !oApi.getTextNotHtmlEncoded(self.fields[i].fieldDesc).length ? self.getMetaData().getPropertyMetadata(self.fields[i].fieldName).label : oApi
							.getTextNotHtmlEncoded(self.fields[i].fieldDesc);
				}
				if (self.parameter.width !== undefined) {
					self.columns.width[i] = self.parameter.width[self.columns.value[i]];
				}
			}
		}
	};
	this.drawSelection = function(e) {
		var sRequiredFilterProperty = self.getFilter().getInternalFilter().getProperties()[0], aFilterTerms = self.getFilter().getInternalFilter().getFilterTermsForProperty(sRequiredFilterProperty), aFilterValues = aFilterTerms.map(function(term) {
			return term.getValue();
		}), aListItems = this.getItems(), aSelectedListItems = aListItems.filter(function(item) {
			var reqFilterValue = item.getBindingContext().getProperty(sRequiredFilterProperty);
			return aFilterValues.indexOf(reqFilterValue) !== -1;
		});
		aSelectedListItems.forEach(function(item) {
			item.addStyleClass('sapMLIBSelected');
		});
	};
	/**
	 * @method getMainContent
	 * @param oStepTitle title of the main chart
	 * @param width width of the main chart
	 * @param height height of the main chart
	 * @description draws Main chart into the Chart area
	 */
	this.getMainContent = function(oStepTitle, height, width) {
		self.createDataset();
		var oMessageObject;
		if (!oStepTitle) {
			oMessageObject = oApi.createMessageObject({
				code : "6002",
				aParameters : [ "title", oApi.getTextNotHtmlEncoded("step") ]
			});
			oApi.putMessage(oMessageObject);
		}
		if (this.fields.length === 0) {
			oMessageObject = oApi.createMessageObject({
				code : "6002",
				aParameters : [ "dimensions", oStepTitle ]
			});
			oApi.putMessage(oMessageObject);
		}
		if (!this.aDataResponse || this.aDataResponse.length === 0) {
			oMessageObject = oApi.createMessageObject({
				code : "6000",
				aParameters : [ oStepTitle ]
			});
			oApi.putMessage(oMessageObject);
		}
		//var id = sap.apf.ui.getStepContainer().vLayout.sId;
		var chartHeight = height || 600;// jQuery('#' + id + '').height();
		chartHeight = chartHeight + "px";
		var chartWidth = width || 1000;// jQuery('#' + id + '').width();
		chartWidth = chartWidth + "px";
		self.title = oStepTitle;
		var obj = self.aDataResponse;
		self.oModel.setData({
			tableData : obj
		});
		var columnCells = [];
		var i;
		var fnCellValue = function(index) {
			return function(columnValue) {
				if (self.metadata === undefined) {
					return columnValue;
				} else {
					var formatedColumnValue = self.formatter.getFormattedValue(self.columns.value[index], columnValue);
					if (formatedColumnValue !== undefined) {
						return formatedColumnValue;
					} else {
						return columnValue;
					}
				}
			};
		};
		for(i = 0; i < self.columns.name.length; i++) {
			self.cellValues = new sap.m.Text().bindText(self.columns.value[i], fnCellValue(i), sap.ui.model.BindingMode.OneWay);
			columnCells.push(self.cellValues);
		}
		//Setting column widths for table with headers and without headers
		var columnsWithHeaders = [];
		var columnsWithoutHeaders = [];
		var bWidthExists;
		var pixelScale;
		var columnWidth;
		for(i = 0; i < self.columns.name.length; i++) {
			bWidthExists = false;
			if (self.columns.width !== undefined && self.columns.width instanceof Array && self.columns.width.length !== 0) {
				bWidthExists = true;
			}
			pixelScale = d3.scale.linear().domain([ 0, 8 ]).range([ 0, 72 ]);
			columnWidth = bWidthExists ? self.columns.width[i] : (pixelScale(self.columns.name[i].length)) + "px";
			self.columnName = new sap.m.Column({
				width : columnWidth,
				header : new sap.m.Text({
					text : self.columns.name[i]
				})
			});
			columnsWithHeaders.push(self.columnName);
			self.columnName1 = new sap.m.Column({
				width : columnWidth
			});
			columnsWithoutHeaders.push(self.columnName1);
		}
		//Table with Headers
		var oTableWithHeaders = new sap.m.Table({
			headerText : self.title,
			showNoData : false,
			columns : columnsWithHeaders
		}).addStyleClass("tableWithHeaders");
		//Table without Headers (built to get scroll only on the data part)
		this.oTableWithoutHeaders = new sap.m.Table({
			columns : columnsWithoutHeaders,
			items : {
				path : "/tableData",
				template : new sap.m.ColumnListItem({
					cells : columnCells
				})
			}
		});
		oTableWithHeaders.setModel(self.oModel);
		this.oTableWithoutHeaders.setModel(self.oModel);
		this.oTableWithoutHeaders.attachUpdateFinished(this.drawSelection.bind(this.oTableWithoutHeaders));
		var handleConfirm = function(oEvent) {
			var param = oEvent.getParameters();
			self.oTableWithoutHeaders.setBusy(true);
			skipAction = 0;
			sortProperty = param.sortItem.getKey();
			sortOrderIsDescending = param.sortDescending;
			top = 100;
			skip = 0;
			var sorter = [];
			if (param.sortItem) {
				if (self.isAlternateRepresentation) {
					var oTableBinding = self.oTableWithoutHeaders.getBinding("items");
					sorter.push(new sap.ui.model.Sorter(sortProperty, sortOrderIsDescending));
					oTableBinding.sort(sorter);
					self.oTableWithoutHeaders.setBusy(false);
					return;
				}
				oApi.updatePath(function(oStep, bStepChanged) {
					if (oStep === oApi.getActiveStep()) {
						self.oModel.setData({
							tableData : self.aDataResponse
						});
						self.oTableWithoutHeaders.rerender();
						self.oTableWithoutHeaders.setBusy(false);
					}
				});
			}
		};
		//sort of table using ViewSettingsDialog
		this.viewSettingsDialog = new sap.m.ViewSettingsDialog({
			confirm : handleConfirm
		});
		for(i = 0; i < oTableWithHeaders.getColumns().length; i++) {
			var oItem = new sap.m.ViewSettingsItem({
				text : self.columns.name[i],
				key : self.columns.value[i]
			});
			this.viewSettingsDialog.addSortItem(oItem);
		}
		//Set default values of radio buttons in view settings dialog.If sortfield and sort order is coming from the configuration set those else
		//by default set the first value in sort field and sort order respectively
		if (sortProperty === undefined && sortOrderIsDescending === undefined) {
			if (this.getParameter().orderby && this.getParameter().orderby.length) {
				for(i = 0; i < this.viewSettingsDialog.getSortItems().length; i++) {
					if (this.getParameter().orderby[0].property === this.viewSettingsDialog.getSortItems()[i].getKey()) {
						this.viewSettingsDialog.setSelectedSortItem(this.viewSettingsDialog.getSortItems()[i]);
						this.viewSettingsDialog.setSortDescending(!this.getParameter().orderby[0].ascending);
					}
				}
			} else {
				this.viewSettingsDialog.setSelectedSortItem(this.viewSettingsDialog.getSortItems()[0]);
				this.viewSettingsDialog.setSortDescending(false);
			}
		} else {
			for(i = 0; i < this.viewSettingsDialog.getSortItems().length; i++) {
				if (sortProperty === this.viewSettingsDialog.getSortItems()[i].getKey()) {
					this.viewSettingsDialog.setSelectedSortItem(this.viewSettingsDialog.getSortItems()[i]);
				}
			}
			this.viewSettingsDialog.setSortDescending(sortOrderIsDescending);
			var sorter = [];
			if (this.isAlternateRepresentation) {
				var oTableBinding = self.oTableWithoutHeaders.getBinding("items");
				sorter.push(new sap.ui.model.Sorter(sortProperty, sortOrderIsDescending));
				oTableBinding.sort(sorter);
			}
		}
		//aligning amount fields
		if (self.metadata !== undefined) {
			for(i = 0; i < self.columns.name.length; i++) {
				var oMetadata = self.metadata.getPropertyMetadata(self.columns.value[i]);
				if (oMetadata.unit) {
					var amountCol = self.oTableWithoutHeaders.getColumns()[i];
					amountCol.setHAlign(sap.ui.core.TextAlign.Right);
				}
			}
		}
		//Scroll container for table without headers(to get vertical scroll on data part used for pagination)
		var scrollContainer = new sap.m.ScrollContainer({
			content : self.oTableWithoutHeaders,
			height : "480px",
			horizontal : false,
			vertical : true
		}).addStyleClass("tableWithoutHeaders");
		var loadMoreLink = new sap.m.Link({
			text : "More"
		}).addStyleClass("loadMoreLink");
		//Scroll container to hold table with headers and scroll container containing table without headers)
		var scrollContainer1 = new sap.m.ScrollContainer({
			content : [ oTableWithHeaders, scrollContainer ],
			width : chartWidth,
			horizontal : true,
			vertical : false
		}).addStyleClass("scrollContainer");
		self.oModel.setSizeLimit(10000); // Set the size of data response to 10000 records
		//Event delegate to bind pagination action
		oTableWithHeaders.addEventDelegate({
			onAfterRendering : function() {
				//For IE-Full width for alternate representation 
				jQuery(".scrollContainer > div:first-child").css({
					"display" : "table",
					"width" : "inherit"
				});
				var scrollContainerHeight;
				if (self.offsetTop === undefined) {
					self.offsetTop = jQuery(".tableWithoutHeaders").offset().top;
				}
				if (jQuery(".tableWithoutHeaders").offset().top !== self.offsetTop) {
					//fullscreen
					scrollContainerHeight = ((window.innerHeight - jQuery('.tableWithoutHeaders').offset().top)) + "px";
				} else {
					scrollContainerHeight = ((window.innerHeight - jQuery('.tableWithoutHeaders').offset().top) - (jQuery(".applicationFooter").height()) - 20) + "px";
				}
				document.querySelector('.tableWithoutHeaders').style.cssText += "height : " + scrollContainerHeight;
				var dLoadMoreLink = sap.ui.getCore().getRenderManager().getHTML(loadMoreLink);
				//TODO for height issue on orientation change
				sap.ui.Device.orientation.attachHandler(function() {
					scrollContainer1.rerender();
				});
				var oActiveStep = oApi.getActiveStep();
				//Check if alternate representation else don't paginate
				if (oActiveStep.getSelectedRepresentation().bIsAlternateView === undefined || oActiveStep.getSelectedRepresentation().bIsAlternateView === false) {
					if (sap.ui.Device.browser.mobile) {
						//Add More Button for Mobile Device for Pagination
						if (respData.length > 0) {
							jQuery(jQuery(".tableWithoutHeaders > div:first-child")).append(dLoadMoreLink);
						}
						loadMoreLink.attachPress(function() {
							if (!jQuery(".openToggleImage").length && (respData.length > 0)) {
								if (eventsFired === 0) {
									triggerPagination();
									skipAction = 0;
									eventsFired++;
									jQuery(".loadMoreLink").remove();
									jQuery(jQuery(".tableWithoutHeaders > div:first-child")).append(dLoadMoreLink);
								}
							} else {
								jQuery(".loadMoreLink").remove();
							}
						});
					} else {
						//Mouse scroll, Mouse Down and Mouse Up Events for Desktop				
						jQuery('.tableWithoutHeaders').on("scroll", function() {
							var self = jQuery(this);
							var scrollTop = self.prop("scrollTop");
							var scrollHeight = self.prop("scrollHeight");
							var offsetHeight = self.prop("offsetHeight");
							var contentHeight = scrollHeight - offsetHeight - 5;
							if ((contentHeight <= scrollTop) && !jQuery(".openToggleImage").length && (respData.length > 0)) {
								if (eventsFired === 0) {
									triggerPagination();
									skipAction = 0;
									eventsFired++;
								}
							}
						});
					}
				}
				var triggerPagination = function() {
					self.oTableWithoutHeaders.setBusy(true);
					sap.ui.getCore().applyChanges();
					var oData = self.oModel.getData();
					skip += obj.length;
					top = 10;
					triggerBool = true;
					oApi.updatePath(function(oStep, bStepChanged) {
						if (oStep === oApi.getActiveStep()) {
							self.oModel.setData(oData);
							self.oTableWithoutHeaders.rerender();
							self.oTableWithoutHeaders.setBusy(false);
							eventsFired = 0;
						}
					});
				};
			}
		});
		return new sap.ui.layout.VerticalLayout({
			content : [ scrollContainer1 ]
		});
	};
	/**
	 *@method getThumbnailContent 
	 *@description draws Thumbnail for the current chart and returns to the calling object
	 *@returns thumbnail object for column
	 */
	this.getThumbnailContent = function() {
		if (this.aDataResponse !== undefined && this.aDataResponse.length !== 0) {
			var image = new sap.ui.core.Icon({
				src : "sap-icon://table-chart",
				size : "70px"
			}).addStyleClass('thumbnailTableImage');
			return image;
		} else {
			var noDataText = new sap.m.Text({
				text : oApi.getTextNotHtmlEncoded("noDataText")
			}).addStyleClass('noDataText');
			return new sap.ui.layout.VerticalLayout({
				content : noDataText
			});
		}
	};
	/**
	 * @method serialize 
	 * @description Getter for Serialized data for a representation
	 * @returns selectionObject
	 */
	this.serialize = function() {
		return {
			oFilter : this.getFilter().serialize()
		};
	};
	/**
	 * @method deserialize
	 * @param selectionObject from the serialized data
	 * @description deserialize data and sets the selection on representation
	 */
	this.deserialize = function(oSerializable) {
		var filter = oApi.createFilter();
		this.setFilter(filter.deserialize(oSerializable.oFilter));
	};
	/**
	 * @method getFilterMethodType
	 * @description This method helps in determining which method has to be used for the filter retrieval from a representation.
	 * @returns {sap.apf.constants.filterMethodTypes} The filter method type the representation supports
	 */
	this.getFilterMethodType = function() {
		return sap.apf.core.constants.filterMethodTypes.filter; // returns the filter method type the representation supports
	};
	/**
	 * @method getSelectionCount
	 * @description This method helps in determining the selection count of a representation
	 * @returns the selection count of the current representation.
	 */
	this.getSelectionCount = function() {
		var sRequiredFilterProperty = self.getFilter().getInternalFilter().getProperties()[0], aFilterTerms = self.getFilter().getInternalFilter().getFilterTermsForProperty(sRequiredFilterProperty);
		return aFilterTerms.length;
	};
	/**
	 * @method getFilter
	 * @description gets the current filter from the representation.
	 */
	this.getFilter = function() {
		return this.filter;
	};
	/**
	 * @method setFilter
	 * @param {sap.apf.utils.Filter} oFilter
	 * @description sets the initial filter to the representation. The filter holds the values of the start filter of the path.
	 */
	this.setFilter = function(oFilter) {
		this.filter = oFilter;
	};
	/**
	 * @method adoptSelection
	 * @param {object} oSourceRepresentation Source representation implementing the representationInterface.
	 * @description Called on representation by binding when a representation type is set.
	 */
	this.adoptSelection = function(oSourceRepresentation) {
		if (oSourceRepresentation && oSourceRepresentation.getFilter) {
			this.setFilter(oSourceRepresentation.getFilter());
		}
	};
	/**
	 * @method removeAllSelection
	 * @description removes all Selection from Chart
	 */
	this.removeAllSelection = function() {
		this.setFilter(oApi.createFilter());
		oApi.selectionChanged();
		self.oTableWithoutHeaders.getItems().forEach(function(item) {
			item.removeStyleClass('sapMLIBSelected');
		});
	};
	/**
	 * @method getPrintContent
	 * @param oStepTitle title of the step
	 * @description gets the printable content of the representation
	 */
	this.getPrintContent = function(oStepTitle) {
		this.createDataset();
		var obj = this.aDataResponse;
		this.oModel.setData({
			tableData : obj
		});
		var i;
		var columns = [];
		for(i = 0; i < self.columns.name.length; i++) {
			self.columnName = new sap.m.Column({
				width : "75px",
				header : new sap.m.Label({
					text : self.columns.name[i]
				})
			});
			columns.push(self.columnName);
		}
		var columnCells = [];
		var fnColumnValue = function(index) {
			return function(columnValue) {
				if (self.metadata === undefined) {
					return columnValue;
				} else {
					var oMetadata = self.metadata.getPropertyMetadata(self.columns.value[index]);
					if (oMetadata.dataType.type === "Edm.DateTime") {
						if (columnValue === null) {
							return "-";
						}
						var dateFormat = new Date(parseInt(columnValue.slice(6, columnValue.length - 2), 10));
						dateFormat = dateFormat.toLocaleDateString();
						if (dateFormat === "Invalid Date") {
							return "-";
						}
						return dateFormat;
					}
					if (oMetadata.unit) {
						if (columnValue === null) {
							return "-";
						}
						var currencyMetadata = self.metadata.getPropertyMetadata(oMetadata.unit);
						if (currencyMetadata.semantics === "currency-code") {
							var precision = self.aDataResponse[0][oMetadata.scale];
							columnValue = parseFloat(columnValue, 10).toFixed(precision).toString();
							var store = columnValue.split(".");
							var amountValue = parseFloat(store[0]).toLocaleString();
							var sample = 0.1;
							sample = sample.toLocaleString();
							if (amountValue.split(sample.substring(1, 2)).length > 1) {
								amountValue = amountValue.split(sample.substring(1, 2))[0];
							}
							amountValue = amountValue.concat(sample.substring(1, 2), store[1]);
							return amountValue;
						}
					} else {
						return columnValue;
					}
				}
			};
		};
		for(i = 0; i < self.columns.name.length; i++) {
			self.cellValues = new sap.m.Text().bindText(self.columns.value[i], fnColumnValue(i), sap.ui.model.BindingMode.OneWay);
			columnCells.push(self.cellValues);
		}
		var oTable = new sap.m.Table({
			headerText : oStepTitle,
			headerDesign : sap.m.ListHeaderDesign.Standard,
			columns : columns,
			items : {
				path : "/tableData",
				template : new sap.m.ColumnListItem({
					cells : columnCells
				})
			}
		}).addStyleClass("printTable");
		//aligning amount fields
		if (self.metadata !== undefined) {
			for(i = 0; i < self.columns.name.length; i++) {
				var oMetadata = self.metadata.getPropertyMetadata(self.columns.value[i]);
				if (oMetadata.unit) {
					var amountCol = oTable.getColumns()[i];
					amountCol.setHAlign(sap.ui.core.TextAlign.Right);
				}
			}
		}
		oTable.setModel(self.oModel);
		oTable.attachUpdateFinished(this.drawSelection.bind(oTable));
		return new sap.ui.layout.VerticalLayout({
			content : [ oTable ]
		});
	};
};

}; // end of sap/apf/ui/representations/table.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.reuse.controller.stepGallery.controller') ) {
  jQuery.sap.declare('sap.apf.ui.reuse.controller.stepGallery.controller');
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

/**
 *@class stepGallery
 *@name stepGallery
 *@memberOf sap.apf.ui.reuse.controller
 *@description controller for step Gallery 
 * 
 */
sap.ui.controller("sap.apf.ui.reuse.controller.stepGallery", {
	/**
	 *@this {sap.apf.ui.reuse.controller.stepGallery}
	 */
	/**
	*@memberOf sap.apf.ui.reuse.controller.stepGallery
	*@method getGalleryElementsData 
	*@description Returns array needed to draw step gallery content.
	*@returns   {object} jsonData
	*/
	getGalleryElementsData : function() {
		var self = this;
		var aGalleryElements = [];
		var aCategories = this.oCoreApi.getCategories();
		var label = this.oCoreApi.getTextNotHtmlEncoded("label");
		var steps = this.oCoreApi.getTextNotHtmlEncoded("steps");
		var category = this.oCoreApi.getTextNotHtmlEncoded("category");
		var oMessageObject;
		if (aCategories.length === 0) {
			oMessageObject = this.oCoreApi.createMessageObject({
				code : "6001",
				aParameters : [ "Categories" ]
			});
			this.oCoreApi.putMessage(oMessageObject);
		}
		var i;
		for(i = 0; i < aCategories.length; i++) {
			var oGalleryElement = {};
			var oCategory = aCategories[i];
			var categoryName;
			if (!oCategory.label) {
				oMessageObject = this.oCoreApi.createMessageObject({
					code : "6002",
					aParameters : [ label, category + ": " + categoryName ]
				});
				this.oCoreApi.putMessage(oMessageObject);
			} else {
				categoryName = this.oCoreApi.getTextNotHtmlEncoded(oCategory.label);
				oGalleryElement.title = this.oCoreApi.getTextNotHtmlEncoded(oCategory.label);
			}
			oGalleryElement.id = oCategory.id;
			oGalleryElement.stepTemplates = [];
			oCategory.stepTemplates.forEach(function(oStepTemplate) {
				var oStepDetail = {};
				if (!oStepTemplate.title) {
					oMessageObject = self.oCoreApi.createMessageObject({
						code : "6003",
						aParameters : [ "Title" ]
					});
					self.oCoreApi.putMessage(oMessageObject);
				} else {
					oStepDetail.title = self.oCoreApi.getTextNotHtmlEncoded(oStepTemplate.title);
				}
				oStepDetail.id = oStepTemplate.id;
				oStepDetail.representationtypes = oStepTemplate.getRepresentationInfo();
				oStepDetail.representationtypes.forEach(function(oRepresentation) {
					oRepresentation.title = self.oCoreApi.getTextNotHtmlEncoded(oRepresentation.label);
					if (oRepresentation.parameter && oRepresentation.parameter.orderby) { //if orderby has a value then only get the sort description
						var representationSortDetail = new sap.apf.ui.utils.Helper(self.oCoreApi).getRepresentationSortInfo(oRepresentation);
						oRepresentation.sortDescription = representationSortDetail;
					}
				});
				oStepDetail.defaultRepresentationType = oStepDetail.representationtypes[0];
				oGalleryElement.stepTemplates.push(oStepDetail);
			});
			aGalleryElements.push(oGalleryElement);
		}
		var aStepTemplates = this.oCoreApi.getStepTemplates();
		if (aStepTemplates.length === 0) {
			oMessageObject = this.oCoreApi.createMessageObject({
				code : "6002",
				aParameters : [ steps, category ]
			});
			this.oCoreApi.putMessage(oMessageObject);
		}
		var jsonData = {
			GalleryElements : aGalleryElements
		};
		return jsonData;
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.stepGallery
	*@method onInit 
	*@description Bind gallery elements data to step gallery view.
	*/
	onInit : function() {
		this.oCoreApi = this.getView().getViewData().oCoreApi;
		this.oUiApi = this.getView().getViewData().uiApi;
		var aGalleryElements = this.getGalleryElementsData().GalleryElements;
		var oModel = new sap.ui.model.json.JSONModel({
			"GalleryElements" : aGalleryElements
		});
		this.getView().setModel(oModel);
	},
	/**
	 *@memberOf sap.apf.ui.reuse.controller.stepGallery
	 *@method getStepDetails
	 *@param {string} index of the category in the binding of step gallery dialog
	 *@param {string} index of the step in the binding of step gallery dialog
	 *@return details of a step i.e. id,representationTypes etc
	 */
	getStepDetails : function(categoryIndex, stepIndex) {
		var aGalleryElements = this.getGalleryElementsData().GalleryElements;
		var stepDetails = aGalleryElements[categoryIndex].stepTemplates[stepIndex];
		return stepDetails;
	},
	openHierarchicalSelectDialog : function() {
		if (this.oHierchicalSelectDialog) {
			this.oHierchicalSelectDialog.destroy();
		}
		this.oHierchicalSelectDialog = new sap.ui.jsfragment("sap.apf.ui.reuse.fragment.stepGallery", this);
		this.oHierchicalSelectDialog.setModel(this.getView().getModel());
		this.oHierchicalSelectDialog.open();
	},
	/**
	*@memberOf sap.apf.ui.reuse.controller.stepGallery
	*@method onStepPress
	*@param {string} sId Id for step being added
	*@param {object} oRepresentationType Representation
	*@description creates new step.
	*/
	onStepPress : function(sId, oRepresentationType) {
		this.oHierchicalSelectDialog.close();
		this.oUiApi.getLayoutView().setBusy(true);
		this.oCoreApi.createStep(sId, this.oUiApi.getAnalysisPath().getController().callBackForUpdatePathAndSetLastStepAsActive.bind(this.oUiApi.getAnalysisPath().getController()), oRepresentationType);
		this.oUiApi.getLayoutView().setBusy(true);
		this.oUiApi.getAnalysisPath().getController().refresh(-1);
	}
});
}; // end of sap/apf/ui/reuse/controller/stepGallery.controller.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.reuse.controller.stepToolbar.controller') ) {
  jQuery.sap.declare('sap.apf.ui.reuse.controller.stepToolbar.controller');
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/* global  window*/

/**
 *@class stepToolbar
 *@name stepToolbar
 *@memberOf sap.apf.ui.reuse.controller
 *@description controller for view.stepToolbar
 */
sap.ui.controller("sap.apf.ui.reuse.controller.stepToolbar", {
    /**
     *@this {sap.apf.ui.reuse.controller.stepToolbar}
     */
    chartIconInserted: false,
    alternateRepresentationIcon: false,
    alternateRepresentationBool: false,
    selectedRepresentation: null,
    alternateRepresentationBtn: {},
    selectedNumber: null,
    selectedNumberLink: null,
    isSwitchRepresentation: false,
    viewSettingsIcon: null,
    onInit: function() {
        this.oCoreApi = this.getView().getViewData().oCoreApi;
        this.oUiApi = this.getView().getViewData().uiApi;
    },
    /**
     *@memberOf sap.apf.ui.reuse.controller.stepToolbar
     *@method drawAlternateRepresentation
     *@description Inserts the alternate representation icon to the chart toolbar
     */
    drawAlternateRepresentation: function() {
        var that = this;
        this.alternateRepresentationBtn = new sap.m.Button({
            icon: this.oCoreApi.getActiveStep().getSelectedRepresentation().getAlternateRepresentation().picture,
            tooltip: this.oCoreApi.getTextNotHtmlEncoded("TableRepresentation"),
            press: function() {
                var oStep = that.oCoreApi.getActiveStep();
                var currentRepresentation = oStep.getSelectedRepresentation();
                var activeStepIndex = that.oCoreApi.getSteps().indexOf(oStep);
                that.selectedRepresentation = "table";
                currentRepresentation.bIsAlternateView = true;
                if (currentRepresentation.toggleInstance === undefined) {
                    currentRepresentation.toggleInstance = that.oUiApi.getStepContainer().getController().createAlternateRepresentation(activeStepIndex);
                } else {
                    var data = currentRepresentation.getData(),
                        metadata = currentRepresentation.getMetaData();
                    if (data !== undefined && metadata !== undefined) {
                        currentRepresentation.toggleInstance.setData(data, metadata);
                    }
                    currentRepresentation.toggleInstance.adoptSelection(currentRepresentation);
                }
                that.oUiApi.getAnalysisPath().getController().refresh(-1);
                that.oUiApi.getStepContainer().getController().drawStepContent();
                that.oUiApi.getAnalysisPath().getCarousel().getStepView(activeStepIndex).getController().drawThumbnailContent(true);
            }
        }).addStyleClass("alternateButton");
        this.insertViewSettingsIcon();
        this.getView().chartToolbar.getToolBar().insertContentRight(this.alternateRepresentationBtn);
    },
    /** 
     *@memberOf sap.apf.ui.reuse.controller.stepToolbar
     *@method drawMultipleRepresentation
     *@description Method to insert icons for multiple representations
     */
    insertViewSettingsIcon: function() {
        var that = this;
        this.sortButton = new sap.m.Button({
            icon: "sap-icon://drop-down-list",
            tooltip: this.oCoreApi.getTextNotHtmlEncoded("view-Settings"),
            press: function() {
                if (that.oCoreApi.getActiveStep().getSelectedRepresentation().type !== sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION) {
                    that.oCoreApi.getActiveStep().getSelectedRepresentation().toggleInstance.viewSettingsDialog.open();
                } else {
                    that.oCoreApi.getActiveStep().getSelectedRepresentation().viewSettingsDialog.open();
                }
            }
        }).addStyleClass("sortButton");
        this.getView().chartToolbar.getToolBar().insertContentRight(this.sortButton);
    },
    /**
     *@memberOf sap.apf.ui.reuse.controller.stepToolbar
     *@method showSelectionCount
     *@description Shows the selected count(label) and delete icon of the representation
     */
    showSelectionCount: function() {
        var oActiveStep = this.oCoreApi.getActiveStep();
        var selectedRepresentation = oActiveStep.getSelectedRepresentation();
        var selectionCount;
        if (typeof selectedRepresentation.getSelections === "function") {
        	selectionCount = selectedRepresentation.getSelections().length;
        } else if (typeof selectedRepresentation.getSelectionCount === "function") {
        	selectionCount = selectedRepresentation.getSelectionCount();
        } else {
        	selectionCount = 0;
        }
        var bRequirefFilterPresent = selectedRepresentation.getParameter().requiredFilters !== undefined && selectedRepresentation.getParameter().requiredFilters.length !== 0;
        var bMetadataPresent = selectedRepresentation.getMetaData !== undefined && selectedRepresentation.getMetaData() !== undefined && selectedRepresentation.getMetaData().hasOwnProperty("getPropertyMetadata");
        var selectedDimension = bRequirefFilterPresent && bMetadataPresent ? selectedRepresentation.getMetaData().getPropertyMetadata(selectedRepresentation.getParameter().requiredFilters[0]).label : null;
        if (selectedDimension === null || selectionCount === 0) {
            jQuery(".showSelection").hide();
            jQuery(".resetSelection").hide();
        } else if (selectionCount > 0) {
            this.selectedNumber.setText("(" + this.oCoreApi.getTextNotHtmlEncoded("selected-objects", [selectedDimension]));
            this.selectedNumberLink.setText(selectionCount);
            this.selectedNumberEndText.setText(')');
            jQuery(".showSelection").show();
            jQuery(".resetSelection").show();
        }
    },
    /**
     *@memberOf sap.apf.ui.reuse.controller.stepToolbar
     *@method insertContentLeft
     *@description Inserts the Selection label,count and delete icon to the step toolbar
     */
    insertContentLeft: function() {
        var that = this;
        // insert left content to the toolbar
        this.currentStepText = new sap.m.Label({
            wrapping: true,
            text: this.oCoreApi.getTextNotHtmlEncoded("currentStep")
        }).addStyleClass("currentStep");
        this.selectedNumber = new sap.m.Label({
            wrapping: true
        }).addStyleClass("showSelection");
        this.selectedNumberEndText = new sap.m.Label({
        	wrapping: true
        }).addStyleClass("showSelection");
        this.selectedNumberEndText.addStyleClass("selectedNumberEndText");
        this.selectedNumberLink = new sap.m.Link({
            press: function() {
                if (that.selectionDisplayDialog) {
                    that.selectionDisplayDialog.destroy();
                }
                that.selectionDisplayDialog = new sap.ui.jsfragment("sap.apf.ui.reuse.fragment.selectionDisplay", that);
                that.selectionDisplayDialog.open();
            }
        }).addStyleClass("showSelection");
        this.selectedNumberLink.addStyleClass("selectedNumberLink");
        // delete icon for selected items
        this.resetSelection = new sap.m.Link({
            text: this.oCoreApi.getTextNotHtmlEncoded("resetSelection")
        }).attachPress(function() {
            jQuery(".showSelection").hide();
            jQuery(".resetSelection").hide();
            if (that.oCoreApi.getActiveStep().getSelectedRepresentation().bIsAlternateView) {
                that.oCoreApi.getActiveStep().getSelectedRepresentation().toggleInstance.removeAllSelection();
            }
            that.oCoreApi.getActiveStep().getSelectedRepresentation().removeAllSelection();
        }).addStyleClass("resetSelection");
        this.getView().chartToolbar.getToolBar().insertContentRight(this.resetSelection);
        this.getView().chartToolbar.getToolBar().insertContentLeft(this.selectedNumberEndText);
        this.getView().chartToolbar.getToolBar().insertContentLeft(this.selectedNumberLink);
        this.getView().chartToolbar.getToolBar().insertContentLeft(this.selectedNumber);
        this.getView().chartToolbar.getToolBar().insertContentLeft(this.currentStepText);
    },
    /**
     *@memberOf sap.apf.ui.reuse.controller.stepToolbar
     *@method drawSingleRepresentation
     *@description Method to insert icon for single representation
     */
    drawSingleRepresentation: function() {
        var that = this;
        var activeStep = this.oCoreApi.getActiveStep();
        activeStep.selectedRepresentaionType = activeStep.getSelectedRepresentationInfo();
        if (activeStep.selectedRepresentaionType.parameter && activeStep.selectedRepresentaionType.parameter.orderby) {
            var representationSortDetail = new sap.apf.ui.utils.Helper(that.oCoreApi).getRepresentationSortInfo(activeStep.selectedRepresentaionType);
            activeStep.selectedRepresentaionType.sortDescription = representationSortDetail;
        }
        var selectedMultipleRepresentationBtn = new sap.m.Button({
            icon: activeStep.selectedRepresentaionType.picture,
            tooltip: this.oCoreApi.getTextNotHtmlEncoded(activeStep.selectedRepresentaionType.label) + "\n" + ((activeStep.selectedRepresentaionType.sortDescription !== undefined) ? this.oCoreApi.getTextNotHtmlEncoded("sortBy") + ": " + activeStep.selectedRepresentaionType.sortDescription : ""),
            press: function() {
                var oStep = that.oCoreApi.getActiveStep();
                var currentRepresentation = oStep.getSelectedRepresentation();
                currentRepresentation.bIsAlternateView = false;
                that.oUiApi.getStepContainer().getController().drawStepContent();
                var activeStepIndex = that.oCoreApi.getSteps().indexOf(oStep);
                that.oUiApi.getAnalysisPath().getCarousel().getStepView(activeStepIndex).getController().drawThumbnailContent(true);
            }
        });
        this.getView().chartToolbar.getToolBar().insertContentRight(selectedMultipleRepresentationBtn, 0);
        this.insertContentLeft();
    },
    /** 
     *@memberOf sap.apf.ui.reuse.controller.stepToolbar
     *@method drawMultipleRepresentation
     *@description Method to insert icons for multiple representations
     */
    drawMultipleRepresentation: function() {
        var that = this;
        var activeStep = this.oCoreApi.getActiveStep();
        activeStep.representationtypes = activeStep.getRepresentationInfo();
        activeStep.representationtypes.forEach(function(oRepresentation) {
            if (oRepresentation.parameter && oRepresentation.parameter.orderby) { //if orderby has a value then only get the sort description
                var representationSortDetail = new sap.apf.ui.utils.Helper(that.oCoreApi).getRepresentationSortInfo(oRepresentation);
                oRepresentation.sortDescription = representationSortDetail;
            }
        });
        activeStep.selectedRepresentaionType = activeStep.getSelectedRepresentationInfo();
        if (activeStep.selectedRepresentaionType.parameter && activeStep.selectedRepresentaionType.parameter.orderby) {
            var representationSortDetail = new sap.apf.ui.utils.Helper(this.oCoreApi).getRepresentationSortInfo(activeStep.selectedRepresentaionType);
            activeStep.selectedRepresentaionType.sortDescription = representationSortDetail;
        }

        var reperesentationTypesLength = activeStep.representationtypes.length;
        var selectedMultipleRepresentationBtn;
        var drawSelectedRepresentation = function(data) {
        	var activeStep = that.oCoreApi.getSteps()[data.nActiveStepIndex];
        	activeStep.getSelectedRepresentation().bIsAlternateView = false;
        	activeStep.setSelectedRepresentation(data.oRepresentationType.representationId);
            that.oUiApi.getAnalysisPath().getController().refresh(data.nActiveStepIndex);
            that.oCoreApi.updatePath(that.oUiApi.getAnalysisPath().getController().callBackForUpdatePath.bind(that.oUiApi.getAnalysisPath().getController()));
        };
        this.openList = function(oEvent) {
            var data = oEvent.getParameter("listItem").getCustomData()[0].getValue();
            drawSelectedRepresentation(data);
            selectedMultipleRepresentationBtn.setIcon(data.icon);
            selectedMultipleRepresentationBtn.setTooltip(that.oCoreApi.getTextNotHtmlEncoded(data.oRepresentationType.label) + "\n" + (data.oRepresentationType.sortDescription !== undefined ? that.oCoreApi.getTextNotHtmlEncoded("sortBy") + ": " + data.oRepresentationType.sortDescription : ""));
        };
        var oAllChartList = new sap.m.List({
            mode: sap.m.ListMode.SingleSelectMaster,
            showSeparators: sap.m.ListSeparators.None,
            includeItemInSelection: true,
            select: jQuery.proxy(function(oEvent) {
                this.openList(oEvent);
            }, this)
        });
        for (var j = 0; j < reperesentationTypesLength; j++) {
            oAllChartList.addItem(new sap.m.StandardListItem({
                description: activeStep.representationtypes[j].sortDescription && this.oCoreApi.getTextNotHtmlEncoded("sortBy") + ": " + activeStep.representationtypes[j].sortDescription,
                icon: activeStep.representationtypes[j].picture,
                title: that.oCoreApi.getTextNotHtmlEncoded(activeStep.representationtypes[j].label),
                customData: [new sap.ui.core.CustomData({
                    key: 'data',
                    value: {
                        oRepresentationType: activeStep.representationtypes[j],
                        nActiveStepIndex: that.oCoreApi.getSteps().indexOf(that.oCoreApi.getActiveStep()),
                        icon: activeStep.representationtypes[j].picture
                    }
                })]
            }));
        }
        var oShowAllChartPopover = new sap.m.Popover({
            placement: sap.m.PlacementType.Bottom,
            showHeader: false,
            content: [oAllChartList]
        }).addStyleClass("sapCaUiChartToolBarShowAllChartListPopover");
        //full-screen buttons
        function fnPress(oEvent) {
            var data = oEvent.getSource().getCustomData()[0].getValue();
            drawSelectedRepresentation(data);
        }
        for (var k = 0; k < reperesentationTypesLength; k++) {
            var button = new sap.m.Button({
                tooltip: that.oCoreApi.getTextNotHtmlEncoded(activeStep.representationtypes[k].label) + "\n" + ((activeStep.representationtypes[k].sortDescription !== undefined) ? this.oCoreApi.getTextNotHtmlEncoded("sortBy") + ": " + activeStep.representationtypes[k].sortDescription : ""),
                icon: activeStep.representationtypes[k].picture,
                customData: [new sap.ui.core.CustomData({
                    key: 'data',
                    value: {
                        oRepresentationType: activeStep.representationtypes[k],
                        nActiveStepIndex: that.oCoreApi.getSteps().indexOf(that.oCoreApi.getActiveStep()),
                        icon: activeStep.representationtypes[k].picture
                    }
                })],
                press: fnPress
            });
            button.addStyleClass("iconLeft");
            this.getView().chartToolbar.getToolBar().insertContentRight(button);
        }
        selectedMultipleRepresentationBtn = new sap.m.Button({
            icon: activeStep.selectedRepresentaionType.picture,
            tooltip: this.oCoreApi.getTextNotHtmlEncoded(activeStep.selectedRepresentaionType.label) + "\n" + ((activeStep.selectedRepresentaionType.sortDescription !== undefined) ? this.oCoreApi.getTextNotHtmlEncoded("sortBy") + ": " + activeStep.selectedRepresentaionType.sortDescription : ""),
            press: function() {
                oShowAllChartPopover.openBy(this);
            }
        }).addStyleClass("iconList");
        this.getView().chartToolbar.getToolBar().insertContentRight(selectedMultipleRepresentationBtn, 0);
        this.insertContentLeft();
    },
    /**
     *@memberOf sap.apf.ui.reuse.controller.stepToolbar
     *@method drawToolBar
     *@description renders the toolbar specific for single or multiple representations and shows/hide legend icon/alternate representation icon
     */
    drawToolBar: function() {
        var that = this;
        this.showAndHideIcons = function() {
            var that = this;
            that.isSwitchRepresentation = false;
            if (that.getView().chartToolbar.getFullScreen() === true) {
                //full-screen
                jQuery(".iconList").hide();
                jQuery(".iconLeft").show();
            } else {
                //initial
                jQuery(".iconList").show();
                jQuery(".iconLeft").hide();
            }
            //show table sort icon, show only if the representation is table and if the alternate representation is table
            if ((that.oCoreApi.getActiveStep().getSelectedRepresentation().bIsAlternateView && that.oCoreApi.getActiveStep().getSelectedRepresentation().getAlternateRepresentation().id === sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION) || that.oCoreApi.getActiveStep().getSelectedRepresentation().type === sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION) {
                jQuery(".sortButton").show();
            } else {
                jQuery(".sortButton").hide();
            }
            // selection count and label
            if (that.oCoreApi.getSteps().length >= 1) {
                that.showSelectionCount();
            }
            // for iPhone and when screen resizes, the chartToolbar width will be equal to window width
            var toolbarId = that.getView().chartToolbar.getId();
            if (that.oCoreApi.getActiveStep().getSelectedRepresentation().getAlternateRepresentation() !== undefined) {
                if ((!that.oCoreApi.getActiveStep().getSelectedRepresentation().bIsAlternateView && that.oCoreApi.getActiveStep().getSelectedRepresentation().getAlternateRepresentation().id !== sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION) || that.oCoreApi.getActiveStep().getSelectedRepresentation().type !== sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION) {
                    if ((window.innerWidth === jQuery("#" + toolbarId + " > div:first-child > div:nth-child(2)").width())) {
                        jQuery(that.getView().chartToolbar._oShowLegendButton.getDomRef()).show();
                    }
                }
            }
        };
        this.renderIcons = function() {
            var that = this;
            var oActiveStep = that.oCoreApi.getActiveStep();
            if (oActiveStep !== undefined) {
                //tooltip added for fullscreen
                that.getView().chartToolbar._oFullScreenButton.setTooltip(that.oCoreApi.getTextNotHtmlEncoded("toggle-fullscreen"));
                that.getView().chartToolbar._oFullScreenExitButton.setTooltip(that.oCoreApi.getTextNotHtmlEncoded("toggle-fullscreen"));
                //draw table
                if (that.alternateRepresentationIcon === false && that.oCoreApi.getActiveStep().getSelectedRepresentation().type !== sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION) {
                    that.drawAlternateRepresentation();
                    that.alternateRepresentationIcon = true;
                }
                //table sort icon
                if (that.oCoreApi.getActiveStep().getSelectedRepresentation().type === sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION) {
                    if (that.viewSettingsIcon === false) {
                        that.insertViewSettingsIcon();
                        //that.insertContentLeft();
                    }
                    that.viewSettingsIcon = true;
                }
                //draw representation
                if (that.oCoreApi.getActiveStep().getRepresentationInfo().length > 1) {
                    if (that.chartIconInserted === false) {
                        that.drawMultipleRepresentation();
                    }
                    that.chartIconInserted = true;
                } else if (that.oCoreApi.getActiveStep().getSelectedRepresentation().type !== sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION && that.oCoreApi.getActiveStep().getRepresentationInfo().length === 1) {
                    if (that.chartIconInserted === false) {
                        that.drawSingleRepresentation();
                    }
                    that.chartIconInserted = true;
                }
                //Disable if the representation is table or geomap
                if ((that.oCoreApi.getActiveStep().getSelectedRepresentation().bIsAlternateView && that.oCoreApi.getActiveStep().getSelectedRepresentation().getAlternateRepresentation().id === sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION) || that.oCoreApi.getActiveStep().getSelectedRepresentation().type === (sap.apf.ui.utils.CONSTANTS.representationTypes.TABLE_REPRESENTATION || sap.apf.ui.utils.CONSTANTS.representationTypes.GEO_MAP)) {
                    that.getView().chartToolbar._oShowLegendButton.setVisible(false);
                } else {
                    that.getView().chartToolbar._oShowLegendButton.setVisible(true);
                    that.getView().chartToolbar._oShowLegendButton.setTooltip(that.oCoreApi.getTextNotHtmlEncoded("legend"));
                }
                //If representation is switched then show the legend
                if (that.isSwitchRepresentation === true) {
                    that.getView().chartToolbar.setShowLegend(true);
                }
            }
        };
        this.getView().chartToolbar.addEventDelegate({
            onAfterRendering: function() {
                if (that.oCoreApi.getSteps().length > 0) {
                    that.showAndHideIcons();
                }
                
                var oStep = that.oCoreApi.getActiveStep();
				if (oStep) { //If step exists then toggle the legend 
					var currentRepresentation = oStep.getSelectedRepresentation();
					var formatString;
					var stepRepresentation = oStep.getSelectedRepresentation().chart || {};
					//Show/Hide Legend
					if (currentRepresentation.bIsLegendVisible === true || currentRepresentation.bIsLegendVisible === undefined) {
						if (stepRepresentation.setVizProperties) { //Check if Viz Frame Charts
							stepRepresentation.setVizProperties({
								legend : {
									visible : true
								},
								sizeLegend : {
									visible : true
								}
							});
						} else { //Fallback for Viz Charts
							if (stepRepresentation.setLegend !== undefined) {
								stepRepresentation.setLegend(new sap.viz.ui5.types.legend.Common({
									visible : true,
									title : new sap.viz.ui5.types.legend.Common_title({
										visible : true
									})
								}));
							}
							if (stepRepresentation.setSizeLegend !== undefined) {
								formatString = stepRepresentation.getSizeLegend().getFormatString();
								stepRepresentation.setSizeLegend(new sap.viz.ui5.types.legend.Common({
									visible : true,
									title : new sap.viz.ui5.types.legend.Common_title({
										visible : true
									})
								}));
								if (formatString !== null) {
									stepRepresentation.getSizeLegend().setFormatString(formatString);
								}
							}
						}
					} else {
						if (stepRepresentation.setVizProperties) { //Check if Viz Frame Charts
							stepRepresentation.setVizProperties({
								legend : {
									visible : false
								},
								sizeLegend : {
									visible : false
								}
							});
						} else { //Fallback for Viz Charts
							if (stepRepresentation.setLegend !== undefined) {
								stepRepresentation.setLegend(new sap.viz.ui5.types.legend.Common({
									visible : false,
									title : new sap.viz.ui5.types.legend.Common_title({
										visible : false
									})
								}));
							}
							if (stepRepresentation.setSizeLegend !== undefined) {
								formatString = stepRepresentation.getSizeLegend().getFormatString();
								stepRepresentation.setSizeLegend(new sap.viz.ui5.types.legend.Common({
									visible : false,
									title : new sap.viz.ui5.types.legend.Common_title({
										visible : false
									})
								}));
								if (formatString !== null) {
									stepRepresentation.getSizeLegend().setFormatString(formatString);
								}
							}
						}
					}
				}
            },
            onBeforeRendering: function() {
                if (that.oCoreApi.getSteps().length > 0) {
                    that.renderIcons();
                }
            }
        });
    },
    /**
     *@memberOf sap.apf.ui.reuse.controller.stepToolbar
     *@method drawRepresentation
     *@description This method clears the toolbar content, insert chart and renders toolbar
     */
    drawRepresentation: function(oChart) {
        var that = this;
        this.isSwitchRepresentation = true;
        this.getView().chartToolbar.getToolBar().removeAllContentLeft();
        this.getView().chartToolbar.getToolBar().removeAllContentRight();
        this.chartIconInserted = false;
        this.alternateRepresentationIcon = false;
        this.viewSettingsIcon = false;
        this.getView().chartToolbar.removeAllCharts();
        this.getView().chartToolbar.insertChart(oChart);
        if (this.getView().chartToolbar.getFullScreen() === true) {
            this.getView().chartToolbar.rerender(); //re-render's main chart on fullscreen    
        }
        this.drawToolBar();
        //Handle Legend Show/Hide Mapped to Representations
        this.getView().chartToolbar.onAfterRendering = function() {
            var legendIcon = this._oShowLegendButton.getDomRef();
            //Bind Click Event on legend icon to switch the state of hide/show boolean
            var evtType = sap.ui.Device.browser.mobile ? "tap" : "click";
            $(legendIcon).on(evtType, function() {
                var oStep = that.oCoreApi.getActiveStep();
                var currentRepresentation = oStep.getSelectedRepresentation();
                if (currentRepresentation.bIsLegendVisible === true || currentRepresentation.bIsLegendVisible === undefined) {
                    currentRepresentation.bIsLegendVisible = false;
                } else {
                    currentRepresentation.bIsLegendVisible = true;
                }
            });
        };
    }
});
}; // end of sap/apf/ui/reuse/controller/stepToolbar.controller.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.utils.facetFilterValueFormatter') ) {
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare('sap.apf.ui.utils.facetFilterValueFormatter');

/**
 * @class Facet filter list value formatter
 * @name sap.apf.ui.utils.FacetFilterValueFormatter
 * @description Formatter for facet filter list values
 * @returns {sap.apf.ui.utils.FacetFilterValueFormatter}
 */
sap.apf.ui.utils.FacetFilterValueFormatter = function() {
	"use strict";
	/**
	 * @public
	 * @function
	 * @name sap.apf.ui.utils.FacetFilterValueFormatter#getFormattedFFData
	 * @param {object} 
	 * 		  oFormatterArgs : {
	 * 		  		oCoreApi : Core instance,
	 * 				oUiApi : Ui instance,
	 * 				oPropertyMetadata : Property metadata for the particular filter property
	 * 				Example: In case there was no text associated with the filter property
	 * 				{
						"name" : "StartDate",
						"dataType" : {
							"type" : "Edm.String",
							"maxLength" : "8"
						},
						"label" : "Start Date",
						"aggregation-role" : "dimension",
						"isCalendarDate" : "true"
					}
	 * 				Example: In case of text associated with filter property
	 * 				{
						"name" : "CompanyCode",
						"dataType" : {
							"type" : "Edm.String",
							"maxLength" : "4"
						},
						"label" : "Company Code",
						"aggregation-role" : "dimension",
						"text" : "CompanyCodeName"
					}
	 * 				sSelectProperty : Name of the filter property Eg: "StartDate",
	 * 				aFilterValues : Filter values for the filter control 
	 * 				Example: In case there was no text associated with the filter property
	 * 				[ {
						"StartDate" : "20000101"
					}, {
						"StartDate" : "20000201"
					} ]
					Example: In case of text associated with filter property
					[ {
						"CompanyCode" : "0001",
						"CompanyCodeName" : "SAP AG"
					}, {
						"CompanyCode" : "0002",
						"CompanyCodeName" : "SAP SE"
					} ]
	 * @description Formats the filter values based on the filter property
	 * @returns {Array} Formatted filter values 
	 * 		Example: In case there was no text associated with the filter property
	 * 		[ {
				"StartDate" : "20000101",
				"formattedValue" : "1/1/2000"
			}, {
				"StartDate" : "20000201",
				"formattedValue" : "2/1/2000"
			} ]
	 * 		Example: In case of text associated with filter property
	 * 		[ {
				"CompanyCode" : "0001",
				"CompanyCodeName" : "SAP AG",
				"formattedValue" : "0001 - SAP AG"
			}, {
				"CompanyCode" : "0002",
				"CompanyCodeName" : "SAP SE",
				"formattedValue" : "0002 - SAP SE"
			} ]
	 * */
	this.getFormattedFFData = function(oFormatterArgs) {
		var sFormattedKeyPropertyValue, sTextValue, sFormattedTextPropertyValue;
		var oPropertyMetadata = oFormatterArgs.oPropertyMetadata;
		var sSelectProperty = oFormatterArgs.sSelectProperty;
		var aFilterValues = oFormatterArgs.aFilterValues;
		var oFormatter = new sap.apf.ui.utils.formatter({
			getEventCallback : oFormatterArgs.oUiApi.getEventCallback.bind(oFormatterArgs.oUiApi),
			getTextNotHtmlEncoded : oFormatterArgs.oCoreApi.getTextNotHtmlEncoded
		}, oPropertyMetadata, aFilterValues);
		//Checks if the property has a text associated with it
		var sTextProperty = oPropertyMetadata.text;
		aFilterValues.forEach(function(oFilterValue) {
			sFormattedKeyPropertyValue = oFormatter.getFormattedValue(sSelectProperty, oFilterValue[sSelectProperty]);
			sTextValue = sFormattedKeyPropertyValue;
			if (sTextProperty) {//If text is available formatting is done for the text property and appended to the formatted key value
				sFormattedTextPropertyValue = oFormatter.getFormattedValue(sTextProperty, oFilterValue[sTextProperty]);
				if (sFormattedTextPropertyValue) { //override the value if the formatted text is not undefined
					sTextValue = sFormattedKeyPropertyValue + " - " + sFormattedTextPropertyValue;
				}
			}
			oFilterValue.formattedValue = sTextValue;
		});
		return aFilterValues;
	};
};
}; // end of sap/apf/ui/utils/facetFilterValueFormatter.js
if ( !jQuery.sap.isDeclared('sap.apf.core.utils.filter') ) {
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/*global sap, jQuery */
/**
 * internally used filter object
 */
jQuery.sap.declare('sap.apf.core.utils.filter');


(function() {
	'use strict';
	/**
	 * @private
	 * @class Expression on properties for the filter of an odata request. Filters
	 *        represent an expression on properties for the filter of an odata
	 *        request. Allowed constructor calls are:
	 *        sap.apf.core.utils.Filter(oMsgHandler, property, op, value) or
	 *        sap.apf.core.utils.Filter(oMsgHandler, new sap.apf.core.utils.FilterTerm(...)) or
	 *        sap.apf.core.utils.Filter(oMsgHandler,new sap.apf.core.utils.Filter(...)).
	 * @param {sap.apf.core.MessageHandler} oMsgHandler
	 * @param {string|sap.apf.core.utils.Filter|sap.apf.core.utils.FilterTerm} arg1 - First argument is either a Filter or a FilterTerm or a property of a filter term
	 * @param {string} arg2 - if param arg2 is supplied, then an operator is expected , a property for arg1 and a value for arg3. Example: 'Country' 'EQ' 'BRA'
	 * @param {string} arg3 - value
	 * @param {string} arg4 - high-value
	 */
	sap.apf.core.utils.Filter = function(oMsgHandler, arg1, arg2, arg3, arg4) {
		var cLogicalAndText = "%20and%20";
		var cLogicalOrText = "%20or%20";
		this.type = "internalFilter"; //sap.utils.filter has type filter
		/**
		 * @description either a Filter Term or Filter. This is the first
		 *              part (term) of the filter.
		 */
		var oLeftExpr;
		if (arg1 && (arg1 instanceof sap.apf.core.utils.FilterTerm || arg1 instanceof sap.apf.core.utils.Filter)) {
			oLeftExpr = arg1;
		} else if (arg1 !== undefined && arg2 !== undefined && arg3 !== undefined) {
			oLeftExpr = new sap.apf.core.utils.FilterTerm(oMsgHandler, arg1, arg2, arg3, arg4);
		} else if (arg1 !== undefined || arg2 !== undefined || arg3 !== undefined) {
			oMsgHandler.check(false, "wrong arguments in construction of sap.apf.core.utils.Filter");
		}
		/**
		 * @description this array holds the further parts of the filter
		 *              expression
		 */
		var aRestExpr = [];
		/**
		 * @description is either AND or OR and defines, how the sub expressions are
		 *              connected.
		 */
		var levelOp;
		/**
		 * @description Returns the properties of the sub filters
		 * @returns {string[]} aProperties Array with property (names), that are used in the filter.
		 */
		this.getProperties = function() {
			var i;
			var aProperty = [];
			var aProperty2 = [];
			var property = "";
			if (oLeftExpr === undefined) {
				return aProperty;
			}
			if (oLeftExpr instanceof sap.apf.core.utils.FilterTerm) {
				property = oLeftExpr.getProperty();
				aProperty.push(property);
			} else if (oLeftExpr instanceof sap.apf.core.utils.Filter) {
				aProperty = oLeftExpr.getProperties();
			}
			for(i = 0; i < aRestExpr.length; i++) {
				if (aRestExpr[i] instanceof sap.apf.core.utils.FilterTerm) {
					aProperty.push(aRestExpr[i].getProperty());
				} else {
					aProperty2 = aRestExpr[i].getProperties();
					aProperty = aProperty.concat(aProperty2);
				}
			}
			return sap.apf.utils.eliminateDuplicatesInArray(oMsgHandler, aProperty);
		};
		/**
		 * @description Copy constructor
		 * @returns {sap.apf.core.utils.Filter} Filter New object as deep copy
		 */
		this.copy = function() {
			var oFilter;
			var i;
			if (oLeftExpr === undefined) {
				return new sap.apf.core.utils.Filter(oMsgHandler);
			}
			oFilter = new sap.apf.core.utils.Filter(oMsgHandler, oLeftExpr);
			if (levelOp === undefined) {
				return oFilter;
			}
			for(i = 0; i < aRestExpr.length; i++) {
				if (levelOp === sap.apf.core.constants.BooleFilterOperators.AND) {
					oFilter.addAnd(aRestExpr[i].copy());
				} else {
					oFilter.addOr(aRestExpr[i].copy());
				}
			}
			return oFilter;
		};
		/**
		 * @description Returns true if the filter is empty, meaning it is not AND or OR and it does not contain any logical constraint.
		 * Technically it is a tree not containing any FilterTerm.
		 * @returns {boolean}
		 */
		this.isEmpty = function() {
			if (oLeftExpr === undefined) {
				return true;
			}
			if ( oLeftExpr instanceof sap.apf.core.utils.FilterTerm) {
				return false;
			}
			if ( !oLeftExpr.isEmpty() ) {
				return false;
			}
			if ( aRestExpr.length === 0) {
				return true;
			}
			// AND or OR node
			var i;
			for (i=0; i< aRestExpr.length; ++i ) {
				if ( !aRestExpr[i].isEmpty() ) { // this is the most probable case, important for efficiency
					return false;
				}
			}
			return true; // no match of FilterTerm
		};
		/**
		 * Returns true only if the Filter is an OR-Node and therefore non-empty, too.
		 * @returns {boolean}
		 */
		this.isOr = function() {
			if (levelOp === sap.apf.core.constants.BooleFilterOperators.OR) {
				return true;
			} else if (levelOp === sap.apf.core.constants.BooleFilterOperators.AND ) {
				return false;
			}
			if (oLeftExpr) {
				if (oLeftExpr instanceof sap.apf.core.utils.Filter) {
					return oLeftExpr.isOr();
				}
			}
			return false;
		};
		/**
		 * @description Test on equality of two filters. Two filters are identical, if they have the same filter terms connected with the same operators.
		 * Commutative and associative law are considered.
		 * @param {sap.apf.core.utils.Filter} oFilter to compare with
		 * @returns {boolean} true  if filters are identical.
		 */
		this.isEqual = function(oFilter) {
			if (this === oFilter) {
				return true;
			}
			if (oFilter === undefined) {
				return false; // never equal to a undefined
			}
			return this.getHash() === oFilter.getHash();
		};
		/**
		 * @description Compute hash for the filter object. Needed for compare with
		 *              other filter
		 * @param {number} iLevelOfExpression level in the expression structure.
		 * @returns {number} hashvalue Hash as number.
		 */
		this.getHash = function(iLevelOfExpression) {
			var nCurrentLevel = iLevelOfExpression || 1;
			var nNextLevel = 0;
			if (aRestExpr.length === 0) {
				nNextLevel = nCurrentLevel;
			} else {
				nNextLevel = nCurrentLevel + 1;
			}
			if (oLeftExpr === undefined) {
				return 0;
			}
			var iHash = oLeftExpr.getHash(nNextLevel);
			var i;
			if (levelOp === undefined) {
				return iHash;
			}
			if (levelOp === sap.apf.core.constants.BooleFilterOperators.AND) {
				iHash = iHash + Math.pow(2, nCurrentLevel); // hash for and on this level = 2,4,8
			} else if (levelOp === sap.apf.core.constants.BooleFilterOperators.OR) {
				iHash = iHash + Math.pow(3, nCurrentLevel); // = hash + 3,9,27,,...
			}
			for(i = 0; i < aRestExpr.length; i++) {
				iHash = iHash + aRestExpr[i].getHash(nNextLevel);
			}
			return iHash;
		};
		/* FIXME no productive usage HL 24.09.2015, used in tests only*/
		/**
		 * @description Filters the array aData according to the filter condition. It is expected, that aData is array in
		 * json format.
		 * @param {object[]} aData Array in json format (value : prop).
		 * @returns {object[]} aFilteredData Array in json format with filtered values.
		 */
		this.filterArray = function(aData) {
			var aFilteredData = [];
			var i;
			var j = 0;
			var len = aData.length;
			if (len === 0) {
				return aFilteredData;
			}
			var oProp;
			var bContained = false;
			// determine which properties have to be filtered
			var aFilterProperties = this.getProperties();
			var aDataPropertiesToTest = [];
			for(oProp in aData[0]) {
				if (jQuery.inArray(oProp, aFilterProperties) > -1) {
					aDataPropertiesToTest.push(oProp);
				}
			}
			// nothing to be filtered
			if (aDataPropertiesToTest.length === 0) {
				return aData;
			}
			// filter against the relevant properties
			for(i = 0; i < len; i++) {
				bContained = true;
				for(j = 0; j < aDataPropertiesToTest.length; ++j) {
					oProp = aDataPropertiesToTest[j];
					if (this.isConsistentWithFilter(oProp, aData[i][oProp]) === false) {
						bContained = false;
						break;
					}
				}
				if (bContained) {
					aFilteredData.push(aData[i]);
				}
			}
			return aFilteredData;
		};
		/**
		 * @description Get all terms for a filter per property.
		 * @param {string} property
		 *            This is the property, for which the terms are requested
		 * @returns {sap.apf.core.utils.FilterTerm[]} filterTerms An array with filter terms.
		 */
		this.getFilterTermsForProperty = function(property) {
			var aTerm = [];
			var i;
			if (oLeftExpr === undefined) {
				return aTerm;
			}
			if (oLeftExpr instanceof sap.apf.core.utils.Filter) {
				aTerm = oLeftExpr.getFilterTermsForProperty(property);
			} else if (property === oLeftExpr.getProperty()) {
				aTerm.push(oLeftExpr);
			}
			for(i = 0; i < aRestExpr.length; i++) {
				if (aRestExpr[i] instanceof sap.apf.core.utils.FilterTerm) {
					if (property === aRestExpr[i].getProperty()) {
						aTerm.push(aRestExpr[i]);
					}
				} else {
					aTerm = aTerm.concat(aRestExpr[i].getFilterTermsForProperty(property));
				}
			}
			return aTerm;
		};
		/**
		 * Returns all filter terms recursively contained in the filter tree.
		 * Empty filters (filter w/o a filterTerm) are eliminated.
		 * @returns {{sap.apf.core.utils.Filter|sap.apf.core.utils.FilterTerm}[]} note 2 types are in array
		 */
		this.getFilterTerms = function() {
			var aTerm = [];
			var i;
			if (oLeftExpr === undefined) {
				return aTerm;
			}
			if (oLeftExpr instanceof sap.apf.core.utils.Filter) {
				aTerm = oLeftExpr.getFilterTerms();
			} else {
				aTerm.push(oLeftExpr); // assumed to be a FilterTerm
			}
			for(i = 0; i < aRestExpr.length; i++) {
				if (aRestExpr[i] instanceof sap.apf.core.utils.FilterTerm) {
					aTerm.push(aRestExpr[i]);
				} else {
					aTerm = aTerm.concat(aRestExpr[i].getFilterTerms());
				}
			}
			return aTerm;
		};

		/*
		 * Returns true if the property is not disjoint from the filter's properties. Abstracts the filter type.
		 */
		function isPropertyMatch(filter, property) {
			if (filter instanceof sap.apf.core.utils.FilterTerm) {
				return filter.getProperty() === property ;
			}
			return filter.getProperties().indexOf(property) >= 0;
		}

		/**
		 * @description This is a test whether the given value of the given property satisfies the filter.
		 * 		Logically, the method implements a test if: Filter(this) AND (property EQ value) is consistent.
		 * 		Thereby, the empty filter is a neutral element (can be eliminated without changing the result).
		 * 		Furthermore, teh method returns true when the given property is disjoint with all properties in the filter (this).
		 * @param {string} property
		 *            This is either a single property or an array of properties.
		 * @param {boolean|string|number} value
		 *            This is either a value, if property is a single property or a
		 *            json object with pairs (property, value), if parameter property is of type array.
		 * @returns {boolean}
		 */
		this.isConsistentWithFilter = function(property, value) {
			var i;
			var isConstrained = false;
			if (oLeftExpr === undefined) {
				return true; // no restriction
			}
			if (levelOp === undefined) { // is wrapper around Filter
				return oLeftExpr.isConsistentWithFilter(property, value);
			}
			if (levelOp === sap.apf.core.constants.BooleFilterOperators.AND) {
				if (!oLeftExpr.isConsistentWithFilter(property, value)) {
					return false;
				}
				for(i = 0; i < aRestExpr.length; i++) {
					if (!aRestExpr[i].isConsistentWithFilter(property, value)) {
						return false;
					}
				}
				return true;
			}
			if (levelOp === sap.apf.core.constants.BooleFilterOperators.OR) {
				// when the property if not in the left branch then isConsistentWithFilter would return true.
				// but the other branches may still put a constraint.
				if (isPropertyMatch(oLeftExpr, property)) {  // note: creates O(n**2) complexity. to be optimized when performance is bad.
					isConstrained = true;
					if(oLeftExpr.isConsistentWithFilter(property, value)) {
						return true;
					}
				}
				for(i = 0; i < aRestExpr.length; i++) {
					if (isPropertyMatch(aRestExpr[i], property)) {
						isConstrained = true;
						if(aRestExpr[i].isConsistentWithFilter(property, value)) {
							return true;
						}
					}
				}
				// all subtrees processed, isConstrained===true then matched property, by no value match. Thus return false.
				// isConstrained===false means value is valid since not contrained, thus return true.
				return !isConstrained;
			}
		};
		/**
		 * @description Eliminates terms of the expression, that are defined for the
		 *              property
		 * @param {string} property
		 *           This  is the property, for which the terms are. If property is an
		 *            array, then the terms are removed for all properties.
		 * @returns {sap.apf.core.utils.Filter} oFilterExpression This is the filter without
		 *          filter terms on property
		 */
		this.removeTermsByProperty = function(property) {
			var i, oResultFilter, oReducedRestFilter;
			if (oLeftExpr === undefined) {
				return this.copy();
			}
			oResultFilter = oLeftExpr.removeTermsByProperty(property);
			if (oResultFilter instanceof sap.apf.core.utils.FilterTerm) {
				oResultFilter = new sap.apf.core.utils.Filter(oMsgHandler, oResultFilter.getProperty(), oResultFilter.getOp(), oResultFilter.getValue(), oResultFilter.getHighValue());
			}
			if (levelOp === undefined) {
				return oResultFilter;
			}
			for(i = 0; i < aRestExpr.length; i++) {
				oReducedRestFilter = aRestExpr[i].removeTermsByProperty(property);
				if (oResultFilter === undefined) {
					if (oReducedRestFilter instanceof sap.apf.core.utils.FilterTerm) {
						oResultFilter = new sap.apf.core.utils.Filter(oMsgHandler, oReducedRestFilter);
					} else {
						oResultFilter = oReducedRestFilter;
					}
				} else if (oReducedRestFilter !== undefined) {
					if (levelOp === sap.apf.core.constants.BooleFilterOperators.AND) {
						oResultFilter.addAnd(oReducedRestFilter);
					} else {
						oResultFilter.addOr(oReducedRestFilter);
					}
				}
			}
			if (oResultFilter) {
				return new sap.apf.core.utils.Filter(oMsgHandler, oResultFilter);
			}
		};
		/**
		 * @description Eliminates terms of the expression, that are defined for the
		 *              property
		 * @param {string} property
		 *            This is the property, for which the terms are. If property is an
		 *            array, then the terms are removed for all properties.
		 * @param {string} option
		 * @param {string|boolean|value} value
		 * @returns {sap.apf.core.utils.Filter} oFilterExpression This is the filter expression without
		 *          filter terms on property.
		 */
		this.removeTerms = function(property, option, value) {
			var i;
			if (oLeftExpr === undefined) {
				return this.copy();
			}
			var oFilter = oLeftExpr.removeTerms(property, option, value);
			var oFilter2;
			if (oFilter instanceof sap.apf.core.utils.FilterTerm) {
				oFilter = new sap.apf.core.utils.Filter(oMsgHandler, oFilter.getProperty(), oFilter.getOp(), oFilter.getValue(), oFilter.getHighValue());
			}
			if (levelOp === undefined) {
				return oFilter;
			}
			for(i = 0; i < aRestExpr.length; i++) {
				oFilter2 = aRestExpr[i].removeTerms(property, option, value);
				if (oFilter === undefined) {
					if (oFilter2 instanceof sap.apf.core.utils.FilterTerm) {
						oFilter = new sap.apf.core.utils.Filter(oMsgHandler, oFilter2);
					} else {
						oFilter = oFilter2;
					}
				} else if (oFilter2 !== undefined) {
					if (levelOp === sap.apf.core.constants.BooleFilterOperators.AND) {
						oFilter.addAnd(oFilter2);
					} else {
						oFilter.addOr(oFilter2);
					}
				}
			}
			return oFilter;
		};
		/**
		 * @description add a new filter connected with OR
		 * @param {string|sap.apf.core.utils.Filter|sap.apf.core.utils.FilterTerm} arg1 -
		 *            Filter or filter term or property.
		 * @param {string} [arg2] operator, This makes only sense, if first argument is a property
		 * @param {boolean|string|number} [arg3] Value, if first argument is property and second argument is operator
		 * @param {string} arg4 high-value
		 * @returns {sap.apf.core.utils.Filter} this for method chaining.
		 */
		this.addOr = function(arg1, arg2, arg3, arg4) {
			var oFilter;
			if (arg1 instanceof sap.apf.core.utils.Filter || arg1 instanceof sap.apf.core.utils.FilterTerm) {
				oFilter = arg1;
			} else if (arg1 !== undefined && arg2 !== undefined && arg3 !== undefined) {
				oFilter = new sap.apf.core.utils.FilterTerm(oMsgHandler, arg1, arg2, arg3, arg4);
			} else {
				oMsgHandler.check(false, "sap.apf.core.utils.Filter.addOr: wrong arguments in construction of  Filter");
			}
			if (oLeftExpr === undefined) {
				oLeftExpr = oFilter;
				return this;
			}
			if (levelOp === undefined) {
				levelOp = sap.apf.core.constants.BooleFilterOperators.OR;
			}
			aRestExpr.push(oFilter);
			oMsgHandler.check(levelOp === sap.apf.core.constants.BooleFilterOperators.OR, "sap.apf.core.utils.Filter - addOr wrong operation");
			return this;
		};
		/**
		 * @description Add a new filter expression connected with AND
		 * @param {string|sap.apf.core.utils.Filter|sap.apf.core.utils.FilterTerm} arg1 - Filter or filter term or property.
		 * @param {string} [arg2] operator, This makes only sense, if first argument is a property
		 * @param {boolean|string|number} [arg3] Value, if first argument is property and second argument is operator
		 * @param {string} arg4 high-value
		 * @returns {sap.apf.core.utils.Filter} this For method chaining.
		 */
		this.addAnd = function(arg1, arg2, arg3, arg4) {
			var oFilter;
			if (arg1 instanceof sap.apf.core.utils.Filter || arg1 instanceof sap.apf.core.utils.FilterTerm) {
				oFilter = arg1;
			} else if (arg1 !== undefined && arg2 !== undefined && arg3 !== undefined) {
				oFilter = new sap.apf.core.utils.FilterTerm(oMsgHandler, arg1, arg2, arg3, arg4);
			} else {
				oMsgHandler.check(false, "sap.apf.core.utils.Filter.addAnd: wrong arguments in construction of  Filter");
			}
			if (oLeftExpr === undefined) {
				oLeftExpr = oFilter;
				return this;
			}
			if (levelOp === undefined) {
				levelOp = sap.apf.core.constants.BooleFilterOperators.AND;
			}
			oMsgHandler.check(levelOp === sap.apf.core.constants.BooleFilterOperators.AND, "sap.apf.core.utils.Filter - addAnd wrong operation");
			aRestExpr.push(oFilter);
			return this;
		};
		/**
		 * @description Transforms the filter into parameters for the URL in
		 *              odata format suitable for xs engine
		 * @param conf configuration object.
		 * @param conf.asFilterArray then all properties are returned in a single line per property
		 * @param conf.formatValue callback function for correct rendering of the value. The callback function is called with
		 * property and value.
		 * @returns {string|string[]} string or array - dependence on conf
		 *
		 */
		this.toUrlParam = function(conf) {
			var bAsArray = false;
			var aParam = [];
			var sExpr = "";
			if (conf !== undefined && conf.asFilterArray === true) {
				bAsArray = true;
			}
			if (oLeftExpr === undefined) {
				if (bAsArray === true) {
					return [];
				}
				return "";
			}
			if (bAsArray === true) {
				aParam = oLeftExpr.toUrlParam(conf);
			} else {
				sExpr = oLeftExpr.toUrlParam(conf);
			}
			var i = 0;
			var len = aRestExpr.length;
			var sConnector = "";
			if (len === 0) {
				if (bAsArray === true) {
					return aParam;
				}
				return sExpr;
			}
			if (levelOp === sap.apf.core.constants.BooleFilterOperators.AND) {
				sConnector = cLogicalAndText;
			} else {
				sConnector = cLogicalOrText;
			}
			var sRest = "";
			if (bAsArray === true) {
				for(i = 0; i < len; i++) {
					aParam = aParam.concat(aRestExpr[i].toUrlParam(conf));
				}
				return aParam;
			}
			for(i = 0; i < len; i++) {
				sRest = aRestExpr[i].toUrlParam(conf);
				if (sExpr === "") {
					sExpr = sRest;
				} else if (sRest !== "") {
					sExpr = sExpr + sConnector + sRest;
				}
			}
			return '(' + sExpr + ')';
		};
		/**
		 * creates an object, that is similar to the sap.ui5.model.Filter
		 */
		this.mapToSapUI5FilterExpression = function() {
			var i, expression, aFilters = [];
			if (oLeftExpr === undefined) {
				return {};
			}
			if (aRestExpr.length === 0) {
				return oLeftExpr.mapToSapUI5FilterExpression();
			}
			aFilters.push(oLeftExpr.mapToSapUI5FilterExpression());
			for(i = 0; i < aRestExpr.length; i++) {
				aFilters.push(aRestExpr[i].mapToSapUI5FilterExpression());
			}
			expression = {
				filters : aFilters,
				and : levelOp === sap.apf.core.constants.BooleFilterOperators.AND
			};
			return expression;
		};
		/**
		 * @description Overwrites properties and adds new properties if they are not already existing
		 *  with new properties or/and properties, which overwrite the current ones.
		 * @param {sap.apf.core.utils.Filter} oFilter Filter, that holds the properties for the overwriting.
		 * @returns {sap.apf.core.utils.Filter} merged filter object
		 */
		this.overwriteWith = function(oFilter) {
			var aPropertyNames = oFilter.getProperties();
			var oResultFilter;
			if (aPropertyNames.length !== 0) {
				oResultFilter = this.removeTermsByProperty(aPropertyNames);
				if (oResultFilter === undefined) {
					return oFilter.copy();
				}
				oResultFilter.addAnd(oFilter);
				return oResultFilter;
			}
			return this.copy();
		};
		/**
		 * @description removes all properties from the filter, that have not been requested
		 * @param {} requested properties: Can be a single string for a single property, a list of parameters for single properties or an array of property strings
		 * @returns new filter object which has only the requested properties
		 */
		this.reduceToProperty = function(/* sProperty | sProperty1, sProperty2, ... | aProperty */) {
			var aProperty = [];
			var oProperty;
			switch (arguments.length) {
				case 1:
					//noinspection JSLint
					oProperty = arguments[0];
					if (oProperty instanceof Array) {
						aProperty = oProperty;
					} else {
						aProperty.push(oProperty);
					}
					break;
				default:
					aProperty = Array.prototype.slice.call(arguments, 0);
			}
			//noinspection JSLint
			var aFilterPropertiesToBeRemoved = setAminusSetB(this.getProperties(), aProperty);
			//in case all terms are removed method 'removeTermsByProperty()' returns 'undefined', so we will need the OR part:
			return this.copy().removeTermsByProperty(aFilterPropertiesToBeRemoved) || new sap.apf.core.utils.Filter(oMsgHandler);
			//noinspection JSLint
			function setAminusSetB(aSetA, aSetB) {
				var i;
				var result = [];
				var hashB = {};
				var lengthA = aSetA ? aSetA.length : 0;
				var lengthB = aSetB ? aSetB.length : 0;
				for(i = 0; i < lengthB; i++) {
					hashB[aSetB[i]] = undefined;
				}
				for(i = 0; i < lengthA; i++) {
					if (!(aSetA[i] in hashB)) {
						result.push(aSetA[i]);
					}
				}
				return result;
			}
		};
		/**
		 * Returns true if and only if this Filter instance represents a single FilterTerm only.
		 * Note that if it returns true oLeftExpr not necessarily points to a FilterTerm, but may point to a Filter.
		 * @returns {boolean}
		 */
		this.isFilterTerm = function() {
			if (aRestExpr.length>0) {
				return false;
			}
			if (!oLeftExpr) {
				return false;
			}
			if (oLeftExpr instanceof sap.apf.core.utils.FilterTerm ) {
				return true;
			}
			return oLeftExpr.isFilterTerm();
		};
		/**
		 * Structural traversal and application of a visitor to each node.
		 * @param {*} visitor - A visitor.
		 * 		Shall provide the following methods:
		 * 			process({*}),
		 * 			processEmptyFilter(),
		 * 			processTerm({sap.apf.core.utils.FilterTerm}),
		 * 			processAnd({sap.apf.core.utils.Filter}, {sap.apf.core.utils.Filter}[]),
		 * 			processOr({sap.apf.core.utils.Filter}, {sap.apf.core.utils.Filter}[]),
		 * @returns {*}
		 */
		this.traverse = function(visitor) {
			if ( !oLeftExpr) {
				return visitor.processEmptyFilter(); // undefined encodes an empty filter
			}
			if (oLeftExpr && aRestExpr.length === 0) {
				if ( oLeftExpr instanceof sap.apf.core.utils.FilterTerm) {
					return visitor.processTerm(oLeftExpr); // FilterTerm
				}
				return oLeftExpr.traverse(visitor); // Filter. This recursion shall unwrap Filter chains on oLeftExpr
			}
			if (levelOp === sap.apf.core.constants.BooleFilterOperators.AND) {
				return visitor.processAnd(oLeftExpr, aRestExpr, this);
			}
			if (levelOp === sap.apf.core.constants.BooleFilterOperators.OR) {
				return visitor.processOr(oLeftExpr, aRestExpr, this);
			}
			oMsgHandler.check(false, 'undefined case in traverse()');
			return false;
		};
		this.isDisjunctionOverEqualities = function(){
			var isDisjunctionOverEqualities = true;

			if(levelOp === sap.apf.core.constants.BooleFilterOperators.AND){
				return false;
			}
			if(this.getProperties().length > 1){
				return false;
			}			
			if (oLeftExpr instanceof sap.apf.core.utils.Filter) {
				if(oLeftExpr.getFilterTerms().length > 1){
					return false;
				}
			}
			this.getFilterTerms().forEach(function(filterTerm){
				if(filterTerm.getOp() !== sap.apf.core.constants.FilterOperators.EQ){
					isDisjunctionOverEqualities = false;
				}
			});
			aRestExpr.forEach(function(restExpr){
				if (restExpr instanceof sap.apf.core.utils.Filter) {
					if(restExpr.getFilterTerms().length > 1){
						isDisjunctionOverEqualities = false;
					}
				}
			});

			return isDisjunctionOverEqualities;
		};
	};// Filter class
	/**
	 * @private
	 * @description Static function to create a filter object from array with
	 *              objects (in json notation) with given properties. Example:
	 *              aProperties = [country, city], data = [ { country: 'a', city:
	 *              'a1' }, { country: 'b', city: 'b1' }]. This gives: (country =
	 *              'a' and city = 'a1') or (country = 'b' and city = 'b1')
	 * @param {sap.apf.core.MessageHandler} oMsgHandler
	 * @param {string[]} aProperties
	 *            Array with properties
	 * @param {object[]} aData
	 *            Array with data in json format fieldname : value.
	 * @param {number[]} aIndices indices that indicate, which data line is selected
	 * @static
	 */
	sap.apf.core.utils.Filter.createFromArray = function(oMsgHandler, aProperties, aData, aIndices) {
		var fLen = aProperties.length;
		var i;
		var nLine;
		var j;
		var oFilterData;
		var oFilterLine;
		var oFilter;
		oMsgHandler.check(aProperties instanceof Array && aProperties.length > 0, "sap.apf.core.utils.Filter.createFromArray incorrect argument aProperties");
		oMsgHandler.check(aData instanceof Array, "sap.apf.core.utils.Filter.createFromArray incorrect argument aData");
		if (aIndices.length > 0) {
			for(i = 0; i < aIndices.length; ++i) {
				oFilterLine = undefined;
				nLine = aIndices[i];
				if (!aData[nLine]) {
					continue;
				}
				for(j = 0; j < fLen; j++) {
					oFilter = new sap.apf.core.utils.Filter(oMsgHandler, aProperties[j], sap.apf.core.constants.FilterOperators.EQ, aData[nLine][aProperties[j]]);
					if (oFilterLine === undefined) {
						oFilterLine = new sap.apf.core.utils.Filter(oMsgHandler, oFilter);
					} else {
						oFilterLine.addAnd(oFilter);
					}
				}
				if (oFilterData === undefined) {
					oFilterData = new sap.apf.core.utils.Filter(oMsgHandler, oFilterLine);
				} else {
					oFilterData.addOr(oFilterLine);
				}
			}
			return oFilterData;
		}
		// return an empty filter in case of empty selection
		return new sap.apf.core.utils.Filter(oMsgHandler);
	};
	/**
	 * @private
	 * @description Static function to create a filter object that shall express a contradiction
	 *   and lead to an empty data response.
	 * @param {sap.apf.core.MessageHandler} oMsgHandler
	 * @param {string[]} aProperties  property names for the filter.
	 * @returns {sap.apf.core.utils.Filter}
	 * @static
	 */
	sap.apf.core.utils.Filter.createEmptyFilter = function(oMsgHandler, aProperties) {
		oMsgHandler.check(jQuery.isArray(aProperties) && aProperties.length > 0, "sap.apf.core.utils.Filter.createEmptyFilter - array with property names expected");
		return new sap.apf.core.utils.Filter(oMsgHandler, aProperties[0], sap.apf.core.constants.FilterOperators.EQ, '').addAnd(aProperties[0], sap.apf.core.constants.FilterOperators.NE, '');
	};
	/**
	 * @private
	 * @description Static function to transform a UI5 filter object into an internal filter 
	 * @param {sap.apf.core.MessageHandler} oMsgHandler
	 * @param {sap.ui.model.Filter} oUI5Filter UI5 filter 
	 * @returns {sap.apf.core.utils.Filter} APF Core internal filter
	 * @static
	 */
	sap.apf.core.utils.Filter.transformUI5FilterToInternal = function(oMsgHandler, oUI5Filter) {
		return transform(oUI5Filter, oUI5Filter.and);
		function transform(oUI5Filter, bAnd) {
			var result = new sap.apf.core.utils.Filter(oMsgHandler);
			var subTree;
			if (oUI5Filter.filters) {
				oUI5Filter.filters.forEach(function(filter) {
					if (filter.filters) {
						subTree = transform(filter, filter.and);
						if (bAnd) {
							result.addAnd(subTree);
						} else {
							result.addOr(subTree);
						}
					} else if (filter.path) { //TODO: sap.apf.core.utils.Filter.mapToSapUI5FilterExpression() creates an empty filter object, therefore an additional check for filter.path is required
						if (bAnd) {
							result.addAnd(filter.path, filter.operator, filter.value1, filter.value2);
						} else {
							result.addOr(filter.path, filter.operator, filter.value1, filter.value2);
						}
					}
				});
			} else {
				result = new sap.apf.core.utils.Filter(oMsgHandler, oUI5Filter.path, oUI5Filter.operator, oUI5Filter.value1, oUI5Filter.value2);
			}
			return result;
		}
	};
}());

}; // end of sap/apf/core/utils/filter.js
if ( !jQuery.sap.isDeclared('sap.apf.core.utils.filterSimplify') ) {
/*
 * Created by d025375 on 24.05.2015.
 * Copyright(c) 2015 SAP SE
 */
/*global sap */
jQuery.sap.declare('sap.apf.core.utils.filterSimplify');




(function() {
	'use strict';
	/**
	 * For any FilterTerm in the filter tree, collect its property name.
	 * For any equation in the filter tree, collect its value.
	 * Note: it even collects values of tree not representing disjunctive equalities over a single property (well-formed disjunctions).
	 * 
	 * @constructor
	 */
	sap.apf.core.utils.CollectPropertiesAndValuesVisitor = function() {
		var that = this;
		var aProperties = [];
		var aValues = [];
		var isPureEquality = true; // false if exists operator not EQ
		var isDisjunction = true;
		var nrAndNodes = 0;
		var nrOrNodes = 0;
		var nrEmptyFilters = 0;
		var nrFilterTerms = 0;

		/** Creates a set of properties, each property occurring only once */
		function addProperty(property) {
			var i, length = aProperties.length;
			for(i = 0; i < length; i++) {
				if (aProperties[i] === property) {
					return;
				}
			}
			aProperties.push(property);
		}
		this.getProperties = function() {
			return aProperties.slice(0);
		};
		this.getValues = function() {
			return aValues.slice(0);
		};
		this.isWellFormed = function() {
			return isPureEquality && isDisjunction && aProperties.length <= 1;
		};
		this.isEmptyFilter = function() {
			return nrAndNodes === 0 && nrOrNodes === 0 && nrEmptyFilters > 0 && nrFilterTerms === 0;
		};
		this.processEmptyFilter = function() {
			nrEmptyFilters++;
		};
		this.processAnd = function(filter, aFilters) {
			nrAndNodes++;
			isDisjunction = false;
			this.process(filter);
			this.processAndArray(aFilters);
		};
		this.processAndArray = function(aFilters) {
			aFilters.forEach(function(filter) {
				that.process(filter);
			});
		};
		this.processOr = function(filter, aFilters) {
			nrOrNodes++;
			this.process(filter);
			this.processOrArray(aFilters);
		};
		this.processOrArray = function(aFilters) {
			aFilters.forEach(function(filter) {
				that.process(filter);
			});
		};
		/**
		 * Terminal node filter term.
		 * @param term
		 */
		this.processTerm = function(term) {
			nrFilterTerms++;
			var property = term.getProperty();
			addProperty(property);
			switch (term.getOp()) { // all:
				case sap.apf.core.constants.FilterOperators.EQ:
					aValues.push(term.getValue());
					return;
				default:
					isPureEquality = false;
					return;
			}
		};
		/**
		 * This is the public API method that should be called with a filter.
		 * Process any Filter, e.g. a subtree over OR, And, or a FilterTerm.
		 * A filter null or undefined occurs in recursion by construction of Filter objects.
		 * It represents an empty filter and terminates recursion.
		 *
		 * @param {sap.apf.core.utils.Filter} filter must not be undefined
		 */
		this.process = function(filter) {
			if (filter instanceof sap.apf.core.utils.FilterTerm) {
				this.processTerm(filter);
			} else {
				filter.traverse(this);
			}
		};
	};

	/**
	 * A Visitor class. Collect children of an AND-filter, and of an AND spine topmost left-to-right.
	 * @constructor
	 * returns {Object[]|*|null} returns null when the filter is either undefined or an OR-filter, returns a list filters otherwise.
	 */
	sap.apf.core.utils.CollectChildrenOfAndNodeVisitor = function() {
		this.processEmptyFilter = function() {
			return null;
		};
		this.processTerm = function(term) {
			return [term];
		};
		this.processAnd = function(filter0, aFilters) {
			var result = [];
			result.push(filter0);
			aFilters.forEach(function(filter) {
				result.push(filter);
			});
			return result;
		};
		this.processOr = function(/* filter, aFilters */) {
			return null;
		};
		this.process = function(filter) {
			if (filter instanceof sap.apf.core.utils.FilterTerm) {
				this.processTerm(filter);
			} else {
				return filter.traverse(this);
			}
		};
	};
	/**
	 * Main methods for reducing a filter into an ABAP select option
	 * 
	 * @constructor
	 */
	sap.apf.core.utils.FilterReduction = function() {
		var that = this;
		/**
		 * Transform a list of well-formed OR filters to a list of transform objects {property, values}
		 * 
		 * @param {[sap.apf.core.utils.Filter||sap.apf.core.utils.FilterTerm]} aFilters -
		 *            is an array of OR-filters. Each OR-filter
		 *            (disjunction) has one or more filter terms, these filter
		 *            terms have the same property but different values
		 * @returns {Object[]} aTransforms - an array of transform. Transform is
		 *          another form of OR-filter, which is an object {property,
		 *          values}. A transform has one property and one or multiple
		 *          values as an array.
		 */
		this.transformFilter = function(aFilters) {
			var aTransforms = [];
			var aProperties;
			var collector;
			if (aFilters) {
				aFilters.forEach(function(filter) {
					if (filter instanceof sap.apf.core.utils.FilterTerm) {
						aTransforms.push({
							property : filter.getProperty(),
							values : [ filter.getValue() ]
						});
					} else if (filter instanceof sap.apf.core.utils.Filter) {
						aProperties = filter.getProperties();
						collector = new sap.apf.core.utils.CollectPropertiesAndValuesVisitor();
						collector.process(filter);
						aTransforms.push({
							property : aProperties[0], // a child filter is in
							// normal form, meaning it
							// has exactly one property
							values : collector.getValues()
						});
					}
				});
			}
			return aTransforms;
		};
		/**
		 * Find (unique) common values of two transformed filters.
		 * 
		 * @param {Object} transform1 -
		 *            {property, values}. A transform has one
		 *            property and one or multiple values as an array.
		 * @param {Object} transform2 -
		 *            {property, values}. A transform has one
		 *            property and one or multiple values as an array.
		 * @returns {Object} resultTransform - {property, values}. This transform
		 *          contains the common values of two input transforms.
		 */
		this.intersection = function(transform1, transform2) {
			var resultTransform = {};
			var leftValues = transform1.values;
			var rightValues = transform2.values;
			var joinedValues = [];
			var lookup = {}; // using an object as a hash
			var i, length1 = leftValues.length;
			var j, rightLength = rightValues.length;
			// encoding each value of leftValues as a member of hash
			for(i = 0; i < length1; i++) {
				lookup[leftValues[i]] = leftValues[i];
			}
			for(j = 0; j < rightLength; j++) {
				// meaning any value not part of leftValues is an undefined member of lookup.
				if (lookup[rightValues[j]] !== undefined && joinedValues.indexOf(rightValues[j]) < 0) { // is linear in array size, so algorithm still quadratic.
					joinedValues.push(rightValues[j]);
				}
			}
			resultTransform.property = transform1.property;
			resultTransform.values = joinedValues;
			return resultTransform;
		};

		function FilterSeparationVisitor(messageHandler) {
			this.reducers = [];
			this.disjunctions = [];
			this.processTerm = function(term) {
				var wrapper = new sap.apf.core.utils.Filter(messageHandler, term);
				if (term.getOp() === sap.apf.core.constants.FilterOperators.EQ) {
					this.disjunctions.push(wrapper);
				} else {
					this.reducers.push(wrapper);
				}
			};
			this.processOr = function(leftFilter, aFilters, orNode) {
				var innerCollector = new sap.apf.core.utils.CollectPropertiesAndValuesVisitor();
				innerCollector.process(orNode);
				if (innerCollector.isWellFormed()) {
					this.disjunctions.push(orNode);
				} else {
					this.reducers.push(orNode);
				}
			};
			this.processAnd = function(leftFilter, aFilters, andNode) {
				var separation = that.filterSeparation(andNode, messageHandler);
				this.disjunctions = this.disjunctions.concat(separation.disjunctions);
				this.reducers = this.reducers.concat(separation.reducers);
			};
			this.processEmptyFilter = function() {
			};
			this.process = function(term) {
				term.traverse(this);
			};
		}

		/**
		 * Separate a filter into 2 parts, reducer and disjunctions.
		 * The disjunctions-part is an array, which contains well-formed disjunctions.
		 * The rest will be pushed into an array called reducer.
		 * Usage @see main function filterReduction(messageHandler, filter).
		 *
		 * Separate filter tree as follows:
		 * Separate well-formed disjunctive sub-filters from other parts.
		 * Well-formed disjunctive filters are:
		 * 		a FilterTerm that is an EQ, which is either coming from external context (SapClient), or a single selection in a step or facetFilter
		 * 		an EmptyFilter (wildcard), which is created always when a step has no selection
		 * 		or a well-formed disjunctive filter: which is the result of many selections on a step or FacetFilter.
		 * 		A well-formed disjunction is a filter which only contains equality terms of the same property.
		 *
		 * The filter parameter is well-formed if its top node is of the above form.
		 * When the filter parameter is an AND node, the separation extracts all directs subtrees which are maximal well-formed disjunctive filters.
		 * Maximal means that the method returns an OR node containing equations, not the equations.
		 * Thus, each direct sub-node of the AND either is a well-formed disjunction, or an empty filter which will be eliminated, or a non well-formed node.
		 * The function returns the filters separated into an array of well-formed ones and an array of non well-formed ones.
		 *
		 * @param {sap.apf.core.utils.Filter} filter - An internal filter. Assumed to be an AND node or FilterTerm. If not, returns empty arrays.
		 * @return {{reducers: sap.apf.core.utils.Filter[], disjunctions: sap.apf.core.utils.Filter[]}}
		 */
		this.filterSeparation = function (filter, messageHandler) {
			var collector = new sap.apf.core.utils.CollectChildrenOfAndNodeVisitor();
			var aFilters = collector.process(filter);
			var visitor;

			if ( !aFilters ) {
				return {
					reducers : [],
					disjunctions : []
				};
			}
			visitor = new FilterSeparationVisitor(messageHandler);
			aFilters.forEach(function(element) {
				element.traverse(visitor);
			});
			return {
				reducers : visitor.reducers,
				disjunctions : visitor.disjunctions
			};
		};
		/**
		 * Simplify an array of transformed filters. As a result, there is only
		 * one transformed filter for exactly one property.
		 * 
		 * @param {Object[]} aTransforms -
		 *            an array of transforms {property, values}. A
		 *            transform has one property and one or multiple values as
		 *            an array.
		 * @returns {Object[]} aSimplifiedTransforms - an array of transforms
		 *          {property, values}. There is only one transform for exactly
		 *          one property.
		 */
		this.simplifyTransforms = function(aTransforms) {
			var aSimplifiedTransforms = [];
			var reducedTransform;
			var aProcessedProperties = [];
			var length = aTransforms.length;
			var name;
			aTransforms.forEach(function(transform, i) {
				var j;
				name = transform.property;
				if (aProcessedProperties.indexOf(name) === -1) { // if not contained
					aProcessedProperties.push(name);
					reducedTransform = transform;
					for(j = i + 1; j < length; ++j) {
						if (name === aTransforms[j].property) {
							reducedTransform = that.intersection(reducedTransform, aTransforms[j]);
						}
					}
					aSimplifiedTransforms.push(reducedTransform);
				}
			});
			return aSimplifiedTransforms;
		};
		/**
		 * Compare the values in an array of transforms to a start filter,
		 * remove the transforms which do not fulfill the start filter
		 * condition.
		 * 
		 * @param {sap.apf.core.utils.Filter} startFilter -
		 *            is optional
		 * @param {Object[]} aTransformed -
		 *            is an array of simplified transformed filter
		 * @return {Object[]} aReducedTransformed - return an array of transforms
		 *         after apply the start filter.
		 */
		this.applyStartFilter = function(startFilter, aTransformed) {
			var aReducedTransformed = [];
			var aPropertiesOfStartFilter = startFilter.getProperties();
			aTransformed.forEach(function(transform) {
				var aResultValues = [];
				var j;
				var length = transform.values.length;
				var value;
				if (aPropertiesOfStartFilter.indexOf(transform.property) > -1) { // contained
					for(j = 0; j < length; j++) {
						value = transform.values[j];
						// apply the start filter as a predicate filter on values
						if (startFilter.isConsistentWithFilter(transform.property, value)) {
							aResultValues.push(value);
						}
					}
					aReducedTransformed.push({
						property : transform.property,
						values : aResultValues
					});
				} else {
					aReducedTransformed.push(transform);
				}
			});
			return aReducedTransformed;
		};
		/**
		 * Compare the properties in an array of transforms to a start filter.
		 * Remove terms of properties that occur in transformed. Note we removed
		 * terms of contradictory transformed filters, too.
		 * 
		 * @param {sap.apf.core.utils.Filter} startFilter -
		 *            is optional, ABAP select option
		 * @param {Object[]} aTransform -
		 *            is an array of transforms
		 * @returns {sap.apf.core.utils.Filter} resultStartFilter - return the
		 *          simplified start filter after apply it to the array of
		 *          transform
		 */
		this.simplifyInStartFilter = function(startFilter, aTransform) {
			var resultStartFilter = startFilter;
			aTransform.forEach(function(transform) {
				if (resultStartFilter) {
					resultStartFilter = resultStartFilter.removeTermsByProperty(transform.property);
				}
			});
			return resultStartFilter;
		};
		/**
		 * Check if there is a contradiction (meaning empty reduced filter), and then roll back to the original filter.
		 * 
		 * @param {sap.apf.core.MessageHandler} messageHandler
		 *            
		 * @param {Object[]} aTransforms -
		 *            is an array of transforms
		 * @returns {boolean} isContradicted - return true if there is a 
		 * contradiction found. A contradiction means that after simplifying
		 * return empty
		 */
		this.containsContradiction = function(messageHandler, aTransforms) {
			var isContradicted = false;
			aTransforms.forEach(function(transform) {
				if (transform.values.length === 0) {
					isContradicted = true;
				}
			});
			if (isContradicted) {
				return isContradicted;
			}
			return isContradicted;
		};
		/**
		 * Rebuild the OR-filter in the transform format {property, values} back
		 * to the sap.apf.core.utils.Filter 
		 * 
		 * @param {sap.apf.core.MessageHandler} messageHandler
		 *            
		 * @param { {property:String, values:[]}} transform -
		 *           
		 * @returns {sap.apf.core.utils.Filter} resultFilter - internal filter
		 *          
		 */
		this.rebuildDisjunction = function(messageHandler, transform) {
			var resultFilter = new sap.apf.core.utils.Filter(messageHandler);
			var property = transform.property;
			var aValues = transform.values;
			aValues.forEach(function(value) {
				var filterTerm = new sap.apf.core.utils.FilterTerm(messageHandler, property, sap.apf.core.constants.FilterOperators.EQ, value);
				resultFilter.addOr(filterTerm);
			});
			return resultFilter;
		};
		/**
		 * The objective is to transform a filter created by APF path analysis into a filter
		 * that is representable as an ABAP select option.
		 * Any filter that cannot be transformed into such a form is returned directly and hence is supposed to fail on the server.
		 *
		 * This is the main filter reduction method which returns a simplified and reduced filter.
		 * The parameter "filter" is supposed to be the cumulative filter.
		 * The latter is formed by external context, footers, facet filters (value helps) and filters by steps.
		 * Returns null when the reduction detects a contradiction.
		 * A contradiction cannot be represented as a filter here.
		 * Hence, the calling context will then send the original filter (input parameter filter) to the request.
		 *
		 * Further, the following filters are returned immediately:
		 * A FilterTerm, an OR node, and an empty filter.
		 *
		 * @param {sap.apf.core.MessageHandler} messageHandler
		 *        
		 * @param {sap.apf.core.utils.Filter} filter -
		 *            is a filter start with AND in level 0, which could contains
		 *            start filter, value helps, and path filter
		 * @returns {sap.apf.core.utils.Filter|null} resultFilter - return a
		 *          filter reduction, which is representable to ABAP selection
		 *          option (including reduced start filter). Return null if there is a contradiction found.
		 * 
		 */
		this.filterReduction = function(messageHandler, filter) {
			var context = this;
			function mapTransformsToDisjunctions(aReducedTransforms) {
				var aReducedDisjunctions = [];
				aReducedTransforms.forEach(function(reducedTransform) {
					aReducedDisjunctions.push(that.rebuildDisjunction(messageHandler, reducedTransform));
				});
				return aReducedDisjunctions;
			}
			function addFiltersToAnd(andNode, aFilters) {
				aFilters.forEach(function(element) {
					andNode.addAnd(element);
				});
			}
			function applyReducersToTransforms(reducers, simplifiedTransforms) {
				var i;
				var aReducedTransforms = simplifiedTransforms;
				var aSimplifiedReducers = [];
				var simplifiedStartFilter;
				for(i = 0; i < reducers.length; ++i) {
					aReducedTransforms = context.applyStartFilter(reducers[i], simplifiedTransforms);
					if (context.containsContradiction(messageHandler, aReducedTransforms)) {
						return {
							contradiction: filter
						};
					}
					//removes only those reducer terms (reducers[i]) that have been applied to the transforms  
					simplifiedStartFilter = context.simplifyInStartFilter(reducers[i], simplifiedTransforms);
					if (simplifiedStartFilter) {
						aSimplifiedReducers.push(simplifiedStartFilter);
					}
				}
				return {
					reducedTransforms: aReducedTransforms,
					simplifiedReducers: aSimplifiedReducers
				};
			}

			var oSeparatedFilter;
			var aDisjunctions;
			var aTransforms;
			var aSimplifiedTransforms;
			var oResultFilter;
			var reducedDisjunctionsAndContext;

			// if filter is detected as filter term or is an empty filter, return filter
			if (filter.isFilterTerm() || filter.isOr() || filter.isEmpty() ) { // order matters for performance
				return filter;
			}
			// assert: filter is an AND node.
			oSeparatedFilter = this.filterSeparation(filter, messageHandler);
			aDisjunctions = oSeparatedFilter.disjunctions;
			aTransforms = this.transformFilter(aDisjunctions);
			aSimplifiedTransforms = this.simplifyTransforms(aTransforms);
			if (this.containsContradiction(messageHandler, aSimplifiedTransforms)) {
				return filter;
			}
			reducedDisjunctionsAndContext = applyReducersToTransforms(oSeparatedFilter.reducers, aSimplifiedTransforms);
			if ( reducedDisjunctionsAndContext.contradiction){
				return reducedDisjunctionsAndContext.contradiction;
			}
			// reconstruct AND over all remaining context filters
			oResultFilter = new sap.apf.core.utils.Filter(messageHandler);
			addFiltersToAnd(oResultFilter, reducedDisjunctionsAndContext.simplifiedReducers);
			// reconstruct AND over all reconstructed and reduced disjunctions
			addFiltersToAnd(oResultFilter, mapTransformsToDisjunctions(reducedDisjunctionsAndContext.reducedTransforms));
			return oResultFilter;
		};
	};
}());

}; // end of sap/apf/core/utils/filterSimplify.js
if ( !jQuery.sap.isDeclared('sap.apf.modeler.core.textPool') ) {
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
/*global sap, jQuery*/

jQuery.sap.declare("sap.apf.modeler.core.textPool");


jQuery.sap.require('sap.ui.core.format.DateFormat'); // unlisted dependency retained



(function() {
	'use strict';

	/**
	 * @private 
	 * @description holds all texts of an application, that are used in the analytical configurations
	 * @class TextPool
	 * @param {object} inject Injection of required APF objects
	 * @param {object} inject.instance  Injection of required instances
	 * @param {object} inject.instance.messageHandler Injection of messageHandler instance
	 * @param {object} inject.instance.persistenceProxy Injection of persistenceProxy instance
	 * @param {object} inject.constructor  Injection of required constructors
	 * @param {object} inject.constructor.hashtable  Injection of hashtable constructor 
	 * @param {string} applicationId is the guid of the application
	 * @param {object[]} existingTexts that have been fetched from DB
	 */
	sap.apf.modeler.core.TextPool = function(inject, applicationId, existingTexts) {

		var messageHandler = inject.instance.messageHandler;
		var persistenceProxy = inject.instance.persistenceProxy;

		var Hashtable = inject.constructor.hashtable;

		var hashTableForTexts = new Hashtable(messageHandler);
		var keyMappingTable = new Hashtable(messageHandler);
		var guidMappingTable = new Hashtable(messageHandler);
		var keyCounter = 0;
		var defaultInitialTextElement = {
				TextElement : sap.apf.core.constants.textKeyForInitialText,
				Language : sap.apf.core.constants.developmentLanguage,
				TextElementType : "XFLD",
				TextElementDescription : "",
				MaximumLength : 10,
				Application : applicationId,
				TranslationHint : ""
		};

		function findExistingTextElement(textElementDescription, format) {
			var keys = hashTableForTexts.getKeys();
			var i, len = keys.length;
			var maximumLength = format.MaximumLength || 10;
			var translationHint = format.TranslationHint || "";
			var textElement;
			
			for (i = 0; i < len; i++) {
				textElement = hashTableForTexts.getItem(keys[i]);
				if ((textElement.TextElementDescription === textElementDescription) &&
					(textElement.MaximumLength === maximumLength) &&
					(textElement.TranslationHint === translationHint)) {
					return keys[i];
				}
			}
			return undefined;
		}
		
		

		/*
		 * #Kind,length:hint
		 * TextElement=TextElementDescription
		 */
	
		
		/**
		 * @description delete texts from text pool
		 * @param {string[]} textElementKeys array with TextElements (keys) to be added
		 * @param {string} application associated with the texts to be removed
		 * @param {function} callback is called, when save is finished. Signature is fn( sap.apf.core.MessageObject )
		 */	
		this.removeTexts = function(textElementKeys, application, callback) {
			
			var batchRequests = [];
			var i, len;
			
			function callbackRemove(messageObject) {
				var j;
				if (!messageObject) {
					for (j = 0; j < len; j++) {
						hashTableForTexts.removeItem(textElementKeys[j]);
					}
				}
				callback(messageObject);
				
			}
					
			len = textElementKeys.length;	
			if (len === 0) {
				callback(undefined);
				return;
			}
		
			for (i = 0; i < len; i++) {
				if (textElementKeys[i] === sap.apf.core.constants.textKeyForInitialText) {
					continue;
				}
				batchRequests.push( { method : "DELETE", entitySetName : "texts", 
					inputParameters : [ {  name : 'TextElement', value : textElementKeys[i] }, { name : 'Language', value: sap.apf.core.constants.developmentLanguage } ] });
			}
			
			persistenceProxy.doChangeOperationsInBatch( batchRequests, callbackRemove, application);
		};
		
	    this.isInitialTextKey = function(textKey) {
	        	return (textKey === sap.apf.core.constants.textKeyForInitialText);
	    };
	       
		/**
		 * @description add texts to the text pool and save them
		 * @param {object[]} TextElements array with TextElements to be added
		 * @param {function} callback is called, when save is finished. Signature is fn( sap.apf.core.MessageObject )
		 */		
		this.addTextsAndSave = function(textElements, callback, application) {
			function areEqualTextElements(text1, text2){
		
				return (text1.TextElement === text2.TextElement && text1.TextElementDescription === text2.TextElementDescription &&
						text1.MaximumLength === text2.MaximumLength && text1.Language === text2.Language && text1.TranslationHint === text2.TranslationHint);
			}
			
		 
			var i;
			var len = textElements.length;
			var existingTextElement;
			var textElementsForUpdate = [];
			var textElementsForCreate = [];
			var changeRequests = [];
			var inputParameters;
			for (i = 0; i < len; i++) {
				if (textElements[i] === sap.apf.core.constants.textKeyForInitialText) {
					continue;
				}
				existingTextElement = hashTableForTexts.getItem(textElements[i].TextElement);
				if (existingTextElement) {
					if (!areEqualTextElements(existingTextElement,textElements[i])) {
						textElementsForUpdate.push(textElements[i]);
						hashTableForTexts.setItem(textElements[i].TextElement, textElements[i]);
					}
				} else {
					textElementsForCreate.push(textElements[i]);
					hashTableForTexts.setItem(textElements[i].TextElement, textElements[i]);
				}
			}
			len = textElementsForUpdate.length;
			for (i = 0; i < len; i++) {
				inputParameters = [ { name : 'TextElement', value : textElementsForUpdate[i].TextElement },
				                    { name : 'Language', value : textElementsForUpdate[i].Language }];
				
				textElementsForUpdate[i].MaximumLength = parseInt(textElementsForUpdate[i].MaximumLength, 10);
				changeRequests.push( { method : "PUT", entitySetName : "texts", data : textElementsForUpdate[i], inputParameters: inputParameters });
			}
			len = textElementsForCreate.length;
			for (i = 0; i < len; i++) {
				textElementsForCreate[i].MaximumLength = parseInt(textElementsForCreate[i].MaximumLength, 10);
				changeRequests.push( { method : "POST", entitySetName : "texts", data : textElementsForCreate[i] });
			}
			
			if (changeRequests.length > 0) {
				persistenceProxy.doChangeOperationsInBatch(changeRequests, callback, application);
			} else {
				callback(undefined);
			}
			
		};
		
		/**
		 * @description creates a .property file, that suffices the SAP translation format
		 * @returns {string} textPropertyFile
		 */
		this.exportTexts = function() {
			var textPropertyFile = sap.apf.utils.renderHeaderOfTextPropertyFile(applicationId, messageHandler);
			return textPropertyFile + sap.apf.utils.renderTextEntries(hashTableForTexts, messageHandler);
		};

		/**
		 * gets the text for a given id
		 * @param {string} id either temporary or persistent id of the key.
		 * @returns {object} text
		 */
		this.get = function(id) {
			var databaseKey, notExistingTextElement;
			
			if (id === sap.apf.core.constants.textKeyForInitialText) {
				return defaultInitialTextElement;
			}
			if (hashTableForTexts.hasItem(id)) {
				return hashTableForTexts.getItem(id);
			}
			if (keyMappingTable.hasItem(id)) {
				databaseKey = keyMappingTable.getItem(id);
				if (databaseKey.TextElementDescription) {
					return databaseKey;
				}
				return hashTableForTexts.getItem(databaseKey);
			}
			notExistingTextElement = jQuery.extend({}, true, defaultInitialTextElement);
			notExistingTextElement.TextElement = id;
			notExistingTextElement.TextElementDescription = id;
			return notExistingTextElement; //finally no text was found
		};

		/**
		 * gets the database key (guid) of a text for a given id
		 * @param {string} id either temporary or persistent id (guid) of the key.
		 * @returns {string} textElement
		 */
		this.getPersistentKey = function(id) {

			return id;
		};
		/**
		 * @param {string} textElementDescription : "TITLE",
		 * @param {Object} format
		 * @param {string} format.TextElementType  example title TITLE",
		 * @param {number} format.MaximumLength
		 * @param {string} format.TranslationHint
		 * @returns {string} key
		 */
		this.setText = function(textElementDescription, format) {
			var textKey;
			var updateTextAndMappingTable = function(textData, metadata, messageObject) {

				if (messageObject) {
					messageHandler.putMessage(messageObject);
				}

				if (textData) {
					hashTableForTexts.setItem(textData.TextElement, textData);
					textKey = textData.TextElement;
				}
			};
			var data = {
				TextElement : "", //key should be filled automatically
				Language : sap.apf.core.constants.developmentLanguage,
				TextElementType : format.TextElementType,
				TextElementDescription : textElementDescription,
				MaximumLength : format.MaximumLength || 10,
				Application : applicationId,
				TranslationHint : format.TranslationHint || ""
			};

			if (!textElementDescription) {
				return sap.apf.core.constants.textKeyForInitialText;
			}
			textKey = findExistingTextElement(textElementDescription, format);
			if (textKey) {
				return textKey;
			}
			keyCounter++;
		
			persistenceProxy.create('texts', data, updateTextAndMappingTable, false);
			//return artificalKey;
			return textKey;
		};
		/**
		 * returns an array with keys of all texts of given
		 * @param {string} textElementType - optional
		 * @returns {string[]} array with text keys
		 */
		this.getTextKeys = function(textElementType) {
			var keys = hashTableForTexts.getKeys();
			var i, text, len = keys.length;
			var textKeys = [];

			for(i = 0; i < len; i++) {
				text = hashTableForTexts.getItem(keys[i]);

				if (textElementType && text.TextElementType !== textElementType) {
					continue;
				}	
				
				if (guidMappingTable.hasItem(keys[i])) {
					textKeys.push(guidMappingTable.getItem(keys[i]));
				} else {
					textKeys.push(keys[i]);
				}

			}
			return textKeys;
		};

		/**
		 * return all texts with properties TextElement and TextElementDescription for given TextElementType and MaximumLength
		 * @param {string} textElementType
		 * @param {number} maximumLength
		 * @returns {object[]} textElements
		 */
		this.getTextsByTypeAndLength = function(textElementType, maximumLength) {
			var keys = hashTableForTexts.getKeys();
			var i, text, len = keys.length;
			var textElements = [];

			for(i = 0; i < len; i++) {
				text = hashTableForTexts.getItem(keys[i]);

				if (text.TextElementType === textElementType && text.MaximumLength === maximumLength) {
					if (guidMappingTable.hasItem(keys[i])) {
						textElements.push({
							TextElement : guidMappingTable.getItem(keys[i]),
							TextElementDescription : text.TextElementDescription
						});
					} else {
						textElements.push({
							TextElement : keys[i],
							TextElementDescription : text.TextElementDescription
						});
					}

				}
			}
			return textElements;
		};

		function initialize() {
			var i, len;
			len = existingTexts.length;
			for(i = 0; i < len; i++) {
				if (existingTexts[i].TextElement) {
					hashTableForTexts.setItem(existingTexts[i].TextElement, existingTexts[i]);
				}				
			}
		}

		initialize();
	};

}());

}; // end of sap/apf/modeler/core/textPool.js
if ( !jQuery.sap.isDeclared('sap.apf.modeler.ui.controller.configurationList.controller') ) {
  jQuery.sap.declare('sap.apf.modeler.ui.controller.configurationList.controller');
/*!
* SAP APF Analysis Path Framework
*
* (c) Copyright 2012-2014 SAP SE. All rights reserved
*/
/* globals window */




sap.ui.controller("sap.apf.modeler.ui.controller.configurationList", {
	onInit : function() {
		var oComponent = this.getOwnerComponent();
		if (oComponent !== undefined) {
			this.oCoreApi = oComponent.oCoreApi;
			this._setDisplayText();
		}
		this._instantiateToolbarView();
		this._instantiateAPFTree();
		this._instantiateTitleAndBreadCrumbView();
		this._addConfigStyleClass();
		this.oModel = new sap.ui.model.json.JSONModel({
			aConfigDetails : []
		});
		this.getView().setModel(this.oModel);
		this.bProgramaticSelection = false;
		//Attach router pattern match injects respective sub views based on url route mapping
		sap.apf.modeler.ui.utils.APFRouter.patternMatch(this);
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#_instantiateToolbarView
	 * @description Instantiates and injects toolbar view in configurationList view
	 * */
	_instantiateToolbarView : function() {
		var toolbarView = new sap.ui.view({
			viewName : "sap.apf.modeler.ui.view.toolbar",
			type : "XML",
			viewData : {
				oConfigListInstance : this
			}
		});
		this.toolbarController = toolbarView.getController();
		this.byId("idConfigMasterData").insertItem(toolbarView, 0);
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#_instantiateAPFTree
	 * @description Creates instance of custom APFTree control and calls property setters of custom APFTree control
	 * */
	_instantiateAPFTree : function() {
		this.oTreeInstance = this.byId("idConfigTree");
		this.oTreeInstance.setTranslationFunction(this.oCoreApi.getText);
		var sDefaultRepresentationType;
		if (this.oCoreApi.getRepresentationTypes()[0].metadata) {
			sDefaultRepresentationType = this.oCoreApi.getRepresentationTypes()[0].id;
		}
		this.oTreeInstance.setDefaultRepresentationType(sDefaultRepresentationType);
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#_instantiateTitleAndBreadCrumbView
	 * @description Instantiates and injects titleand BreadCrumb in configurationList view
	 * */
	_instantiateTitleAndBreadCrumbView : function() {
		this.oTitleBreadCrumbView = new sap.ui.view({
			viewName : "sap.apf.modeler.ui.view.titleBreadCrumb",
			type : "XML",
			viewData : {
				getText : this.oCoreApi.getText
			}
		});
		this.oTitleBreadCrumbController = this.oTitleBreadCrumbView.getController();
		this.byId("idConfigDetail").insertItem(this.oTitleBreadCrumbView, 0);
		this.oBreadCrumb = this.oTitleBreadCrumbView.byId("IdBreadCrumb");
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#setConfigListMasterTitle
	 * @param {String} String that has to be set as the title on master content of configuration list view
	 * @description Setter to set title to the configuration list view master content
	 * */
	setConfigListMasterTitle : function(sTitle) {
		this.byId("idConfigTitleMaster").setText(this.oCoreApi.getText("configurationObjectTitle") + " : " + sTitle);
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#onAfterRendering
	 * @description After rendering of the view sets height to the tree
	 * */
	onAfterRendering : function() {
		var self = this;
		this.oTreeInstance.onAfterRendering = function() {
			self._setHeightForTree();
		};
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#_setHeightForTree
	 * @params {Object} Tree Instance
	 * @description Sets height to the tree
	 * */
	_setHeightForTree : function() {
		var oViewInstance = this;
		var oTreeInstance = this.oTreeInstance;
		var width = jQuery(oViewInstance.byId("idConfigMasterData").getDomRef()).width();
		var height = jQuery(window).height();
		var textContainer = 100; //Static Height for text container because the text gets rendered after AJAX request
		var toolBar = jQuery(oViewInstance.byId("idConfigMasterData").getItems()[0].getDomRef()).height();
		var header = jQuery(oViewInstance.byId("configPage").getDomRef()).find("header").height();
		var footer = jQuery(oViewInstance.byId("configPage").getDomRef()).find("footer").height();
		var offsetHeight;
		if (toolBar > 0) {//Fall back if rendered DOM element has height defined as 0 or undefined
			offsetHeight = textContainer + toolBar + header + footer;
		} else {
			offsetHeight = 205; //Setting constant calculated value(165 for header and 40 for footer)
		}
		//set initial height and width for config tree control
		oTreeInstance.setHeight(height - offsetHeight + "px");
		oTreeInstance.setWidth(width + "px");
		sap.apf.modeler.ui.utils.helper.onResize(function() {//on resize handle height and width accordingly by passing its parent dom reference
			width = jQuery(oViewInstance.byId("idConfigMasterData").getDomRef()).width();
			height = jQuery(oViewInstance.byId("configPage").getDomRef()).height();
			oTreeInstance.setHeight(height - offsetHeight + "px");
			oTreeInstance.setWidth(width + "px");
		});
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#_setDisplayText
	 * @description Sets texts for page title and save,cancel,export button 
	 * */
	_setDisplayText : function() {
		this.byId("configPage").setTitle(this.oCoreApi.getText("configModelerTitle"));
		this.byId("idSavebutton").setText(this.oCoreApi.getText("save"));
		this.byId("idCancelbutton").setText(this.oCoreApi.getText("cancel"));
		this.byId("idExportbutton").setText(this.oCoreApi.getText("export"));
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#_addConfigStyleClass
	 * @description Adds style class to the page title, master and detail area
	 * */
	_addConfigStyleClass : function() {
		this.getView().addStyleClass("sapUiSizeCompact");//For non touch devices- compact style class increases the information density on the screen by reducing control dimensions
		this.byId("idConfigTree").addStyleClass("configTree");
		this.byId("idConfigTitleMaster").addStyleClass("configTitle");
		this.byId("idConfigMasterData").addStyleClass("configMasterData");
		this.byId("idConfigDetailData").addStyleClass("configDetailData");
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#_setSubViewContainerHeight
	 * @description Sets the height for the subview container
	 * @params Subview instance
	 * @returns Height of the subview container 
	 * */
	_setSubViewContainerHeight : function(oSubView) {
		var oSelf = this;
		var scrollContainer = oSubView.getContent()[0].getItems()[0];
		//height for the scroll container
		var height = jQuery(window).height();
		var textContainer = jQuery(this.byId("idConfigTitleMaster").getDomRef()).outerHeight() + jQuery(this.byId("idConfigTitleMaster").getDomRef()).offset().top + 25;//height and the offset of the layout which contains breadcrumb and title of detail view
		var toolBar = jQuery(this.byId("idConfigMasterData").getItems()[0].getDomRef()).height();
		var header = jQuery(this.byId("configPage").getDomRef()).find("header").height();
		var footer = jQuery(this.byId("configPage").getDomRef()).find("footer").height();
		var offsetHeight, offsetWidth;
		if (toolBar > 0) {//Fall back if rendered DOM element has height defined as 0 or undefined
			offsetHeight = textContainer + toolBar + header + footer;
		} else {
			offsetHeight = 265;//Setting constant calculated value(225 for header and 40 for footer)
		}
		var scrollContainerHeight = height - offsetHeight + "px";
		scrollContainer.setHeight(scrollContainerHeight);
		//width for the scroll container
		var detailPageWidth = jQuery(this.byId("idConfigDetailData").getDomRef()).width(); // width of config detail data page
		if (detailPageWidth > 0) {
			offsetWidth = jQuery(this.byId("idConfigMasterData").getDomRef()).offset().left; //offset for the page
		} else {
			detailPageWidth = 1015; // Calculated width for detail page
			offsetWidth = 15; //offset for the page
		}
		var setWidth = detailPageWidth - offsetWidth;
		var scrollContainerWidth = setWidth + "px";
		scrollContainer.setWidth(scrollContainerWidth);
		sap.apf.modeler.ui.utils.helper.onResize(function() {//on resize handle height and width accordingly by passing its parent dom reference
			//height for the scroll container
			height = jQuery(oSelf.byId("configPage").getDomRef()).height();
			scrollContainerHeight = height - offsetHeight + "px";
			scrollContainer.setHeight(scrollContainerHeight);
			//width for the scroll container
			detailPageWidth = jQuery(oSelf.byId("idConfigDetailData").getDomRef()).width();
			setWidth = detailPageWidth - offsetWidth;
			scrollContainerWidth = setWidth + "px";
			scrollContainer.setWidth(scrollContainerWidth);
		});
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#_setSubView
	 * @param {Object} Subview instance 
	 * @description Sets the subview on navigation change 
	 * */
	_setSubView : function(oSubView) {
		this.oSubView = oSubView;
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#_getSubView
	 * @description Getter for current subview instance
	 * */
	_getSubView : function() {
		return this.oSubView;
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#updateSubView
	 * @param {Object} URL context
	 * @description Injects the appropriate subview instance based on URL context change  
	 * */
	updateSubView : function(oParams) {
		var self = this;
		var oPrevSubView = this._getSubView();
		var oDetailView = this.byId("idConfigDetailData");
		var oValidURLContext = this.getSPathFromURL(oParams);
		// Destroying the previous sub-view if it exists.
		if (oPrevSubView) {
			oPrevSubView.destroy();
		}
		//Load the respective views for corresponding pattern names
		var oSubView = new sap.ui.view({
			viewName : "sap.apf.modeler.ui.view." + oValidURLContext.objectType,
			type : "XML",
			viewData : {
				oParams : oParams, //URL Params
				updateConfigTree : self.updateConfigTree.bind(self),
				updateSelectedNode : self.updateSelectedNode.bind(self),
				updateTitleAndBreadCrumb : self.updateTitleAndBreadCrumb.bind(self),
				updateTree : self.updateTree.bind(self),
				oConfigurationHandler : self.configurationHandler,
				oApplicationHandler : self.applicationHandler,
				oConfigurationEditor : self.configEditor,
				getText : self.oCoreApi.getText,
				getEntityTypeMetadata : self.oCoreApi.getEntityTypeMetadata,//required by representation subview 
				getRepresentationTypes : self.oCoreApi.getRepresentationTypes,//required by representation subview 
				oFooter : self.byId("idFooterBarMain"),//representation subview requires footer to insert and remove button 
				createMessageObject : self.oCoreApi.createMessageObject,//navigation target subview - message object creation required for failed call to INTEROP
				putMessage : self.oCoreApi.putMessage,//navigation target subview - message object creation required for failed call to INTEROP,
				getAllAvailableSemanticObjects : self.oCoreApi.getAllAvailableSemanticObjects,//navigation target subview : For getting list of semantic objects available
				getSemanticActions : self.oCoreApi.getSemanticActions,//navigation target subview : For getting list of actions for a given semantic object
				getNavigationTargetName : self._getNavigationTargetName.bind(self),//Required by step sub view for getting the text of a navigation target
				setNavigationTargetName : self._setNavigationTargetName.bind(self)
			//Required by navigation target sub view for getting the text of a navigation target
			}
		});
		if (oParams.name !== "applicationList") {
			oDetailView.removeAllContent(); //Remove All Previous Stacked View Content
			oSubView.placeAt(oDetailView); //Inject the view
			//if (oDetailView.$().height() !== 0) { //Once Detail View is rendered then set scroll container height else retain the previous state
			this._setSubViewContainerHeight(oSubView);
			//}
			this._setSubView(oSubView); //Set the sub view instance
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#clearTitleAndBreadCrumb
	 * @description Clears title and breadCrumb from the detail page
	 * */
	clearTitleAndBreadCrumb : function() {
		this.oTitleBreadCrumbView.byId("IdFormTitle").setText("");
		this.oTitleBreadCrumbView.byId("IdBreadCrumb").removeAllContent();
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#createLinkForBreadCrumb
	 * @params {String} -sName -setting text for link
	 * @params {String} -sPath -helps to navigate to selected node using link
	 * @returns {sap.m.Link} -Link Control
	 * @description Creates link control for forming Bread Crumb
	 * */
	_createLinkForBreadCrumb : function(sName, sPath) {
		var self = this;
		var oLink = new sap.m.Link({
			text : sName,
			press : function() {
				self._navigateToNode(sPath);
			}
		});
		return oLink;
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#createTextForBreadCrumb
	 * @params {String} -sValue -setting text for Text Control
	 * @returns {sap.m.Label} - Label Control
	 * @description Creates Label control for forming Bread Crumb
	 * */
	_createTextForBreadCrumb : function(sValue) {
		var oLabel = new sap.m.Label();
		oLabel.addStyleClass("dialogText");
		oLabel.setText(sValue);
		return oLabel;
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#createIconForBreadCrumb
	 * @returns {sap.m.Icon} - Icon Control
	 * @description Creates Icon control for forming Bread Crumb
	 * */
	_createIconForBreadCrumb : function() {
		var breadCrumbIcon = new sap.ui.core.Icon({
			src : "sap-icon://open-command-field"
		});
		breadCrumbIcon.addStyleClass("breadCrumbIcon");
		return breadCrumbIcon;
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#navigateToNode
	 * @params {String} -sPath -node path
	 * @description Helps to navigate to selected node using link
	 * */
	_navigateToNode : function(sPath) {
		var oNode = this.oTreeInstance.getNodeByContext(sPath);
		this.oTreeInstance.setSelection(oNode);
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#getAllPossibleNodes
	 * @params {Object} -oParentNode -contains information about current node & parent node
	 * @returns [{Object}] - oNodeDetails -if in facet filter node
	 * [{
	 * configId : configurationId
	 * },
	 * {
	 *  configId : configurationId,
	 *	facetFilterId : facetFilterId
	 * }]
	 * @description Helps to get all possible node details in hierarchical format Ex:if selected node is representation can get details representation,step,
	 * category,configuration 
	 * */
	_getAllPossibleNodes : function(oParentNode) {
		var aNodeDetails = [];
		if (oParentNode.configurationId) {
			aNodeDetails.push({
				id : oParentNode.configurationId,
				name : oParentNode.configurationName,
				oParams : {
					arguments : {
						configId : oParentNode.configurationId
					}
				}
			});
		}
		if (oParentNode.facetFilterId) {
			aNodeDetails.push({
				id : oParentNode.facetFilterId,
				name : oParentNode.facetFilterName,
				oParams : {
					arguments : {
						configId : oParentNode.configurationId,
						facetFilterId : oParentNode.facetFilterId
					}
				}
			});
		}
		if (oParentNode.categoryId) {
			aNodeDetails.push({
				id : oParentNode.categoryId,
				name : oParentNode.categoryName,
				oParams : {
					arguments : {
						configId : oParentNode.configurationId,
						categoryId : oParentNode.categoryId
					}
				}
			});
		}
		if (oParentNode.stepId) {
			aNodeDetails.push({
				id : oParentNode.stepId,
				name : oParentNode.stepName,
				oParams : {
					arguments : {
						configId : oParentNode.configurationId,
						categoryId : oParentNode.categoryId,
						stepId : oParentNode.stepId
					}
				}
			});
		}
		if (oParentNode.representationId) {
			aNodeDetails.push({
				id : oParentNode.representationId,
				name : oParentNode.representationName,
				oParams : {
					arguments : {
						configId : oParentNode.configurationId,
						categoryId : oParentNode.categoryId,
						stepId : oParentNode.stepId,
						representationId : oParentNode.representationId
					}
				}
			});
		}
		if (oParentNode.navTargetId) {
			aNodeDetails.push({
				id : oParentNode.navTargetId,
				name : oParentNode.navTargetName,
				oParams : {
					arguments : {
						configId : oParentNode.configurationId,
						navTargetId : oParentNode.navTargetId
					}
				}
			});
		}
		return aNodeDetails;
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#breadCrumbCreation
	 * @params {Object} oSelectedNodes -gets all possible nodes 
	 * @params {String} -sType -Type of Node (configuration || facetFilter || step etc,.)
	 * @description Helps to create BreadCrumb using link & Text
	 * */
	_breadCrumbCreation : function(oSelectedNodes, sType) {
		for( var i = 0; i < oSelectedNodes.length; i++) {
			var sPath = this.getSPathFromURL(oSelectedNodes[i].oParams).sPath;
			var oLabel;
			if (i === 1) {
				oLabel = this._createTextForBreadCrumb(sType);
				this.oBreadCrumb.addContent(oLabel);
				var oIcon = this._createIconForBreadCrumb();
				this.oBreadCrumb.addContent(oIcon);
			}
			if (i !== oSelectedNodes.length - 1) {
				var oLink = this._createLinkForBreadCrumb(oSelectedNodes[i].name, sPath);
				this.oBreadCrumb.addContent(oLink);
				var oICon = this._createIconForBreadCrumb();
				this.oBreadCrumb.addContent(oICon);
			} else {
				oLabel = this._createTextForBreadCrumb(oSelectedNodes[i].name);
				this.oBreadCrumb.addContent(oLabel);
			}
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#updateTitleAndBreadCrumb
	 * @param {String} Updated Title of the detail form
	 * @description Updates the title and breadcrumb of the detailpage
	 */
	updateTitleAndBreadCrumb : function(sTitle) {
		var sFormTitle;
		var oSelectedNode = this.oTreeInstance.getSelection();
		var oSelectedNodeContext = oSelectedNode ? this.oTreeInstance.getAPFTreeNodeContext(oSelectedNode) : undefined;
		var nodeObjectType = oSelectedNodeContext ? oSelectedNodeContext.nodeObjectType : undefined;
		var oParentNodeContext = oSelectedNodeContext ? this.oTreeInstance.getParentNodeContext(oSelectedNodeContext) : undefined;
		// Update title
		if (sTitle) { // Updated title of node on handlechange from the subview
			sFormTitle = sTitle;
		} else { // text of the node
			if (nodeObjectType) {
				var text = oSelectedNode.getText();
				sFormTitle = this.oCoreApi.getText(nodeObjectType) + ": " + text;
			}
		}
		// Update BreadCrumb
		if (oParentNodeContext) {
			if (this.oBreadCrumb) {
				this.oBreadCrumb.removeAllContent();
			}
			var oSelectedNodes = this._getAllPossibleNodes(oParentNodeContext);
			var sType;
			switch (nodeObjectType) { // based on the object type build the breadcrumb value
				case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CONFIGURATION:
					this._breadCrumbCreation(oSelectedNodes);
					break;
				case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.FACETFILTER:
					sType = this.oCoreApi.getText("facetFilter");
					this._breadCrumbCreation(oSelectedNodes, sType);
					break;
				case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CATEGORY:
					sType = this.oCoreApi.getText("category");
					this._breadCrumbCreation(oSelectedNodes, sType);
					break;
				case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.STEP:
					sType = this.oCoreApi.getText("category");
					this._breadCrumbCreation(oSelectedNodes, sType);
					break;
				case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.REPRESENTATION:
					sType = this.oCoreApi.getText("category");
					this._breadCrumbCreation(oSelectedNodes, sType);
					break;
				case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.NAVIGATIONTARGET:
					sType = this.oCoreApi.getText("navigationTarget");
					this._breadCrumbCreation(oSelectedNodes, sType);
					break;
				default:
					break;
			}
		}
		this.oTitleBreadCrumbController.setTitleAndBreadCrumb(sFormTitle);
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#setSelectionOnTree
	 * @param {String} Binding context of the node which has to be shown selected in the tree
	 * @description Sets selection on the tree
	 * */
	setSelectionOnTree : function(sBindingContextOfSelectedNode) {
		this.toolbarController.enableCopyDeleteButton();
		this._enableExportButton();
		this.oTreeInstance.setSelectionOnTree(sBindingContextOfSelectedNode);
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#removeSelectionOnTree
	 * @description Removes all selection from the tree
	 * */
	removeSelectionOnTree : function() {
		this.oTreeInstance.removeSelectionOnTree(this.selectedNode);
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#updateConfigTree
	 * @param {Object} Contains old and new context of the node which has to be updated in the tree
	 * @description Updates the tree when a category assigned to a step is changed
	 * */
	updateConfigTree : function(objectContexts) {//Set of step contexts and categories of steps
		var oldSPath, newSPath, aOldContextForSelectedNode, indexOfConfig, indexOfCategory, indexOfNewCategory, indexOfStep, existingStep, existingStepId;
		var self = this;
		objectContexts.forEach(function(oStepContext) {//For each step context, the step shall be added or removed in the category based on the removeStep boolean
			var bStepExists;
			oldSPath = self.getSPathFromURL(oStepContext.oldContext).sPath;
			aOldContextForSelectedNode = oldSPath.split("/");
			indexOfConfig = aOldContextForSelectedNode[2];
			indexOfCategory = aOldContextForSelectedNode[6];
			indexOfStep = aOldContextForSelectedNode[8];
			existingStep = jQuery.extend(true, {}, self.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories[indexOfCategory].steps[indexOfStep]);
			existingStepId = existingStep.id;
			existingStep.isSelected = false;
			newSPath = self.getSPathFromURL(oStepContext.newContext).sPath;
			indexOfNewCategory = newSPath.split("/")[6];
			if (oStepContext.removeStep === undefined) {
				if (self.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories[indexOfNewCategory].steps) {
					self.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories[indexOfNewCategory].steps.forEach(function(step) {
						if (step.id === existingStepId) {
							bStepExists = true;
						}
					});
					if (bStepExists === undefined) {// If the step does not exist in the category it is added, else not added
						self.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories[indexOfNewCategory].steps.push(existingStep);
					}
				} else {//If there are no steps in the category, the step is added after creating the array steps
					self.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories[indexOfNewCategory].steps = [];
					self.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories[indexOfNewCategory].steps.push(existingStep);
				}
			} else if (oStepContext.removeStep === true) {// If the step exists in the category it is removed
				if (self.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories[indexOfNewCategory].steps) {
					self.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories[indexOfNewCategory].steps.forEach(function(step, index) {
						if (step.id === existingStepId) {
							var aStepsForCategory = self.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories[indexOfNewCategory].steps;
							aStepsForCategory.splice(index, 1);
							self.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories[indexOfNewCategory].steps = aStepsForCategory;
						}
					});
					if (oStepContext.changeCategory === true) {// If the step is being removed from the present category, prepare context of the next category in which the step is present
						var categoryChangeSPath = self.getSPathFromURL(oStepContext.categoryChangeContext).sPath;
						var categoryChangeSelectedNodeContext = categoryChangeSPath.split("/");
						indexOfConfig = categoryChangeSelectedNodeContext[2];
						var indexOfChangedCategory = categoryChangeSelectedNodeContext[6];
						var indexOfNewStep = categoryChangeSelectedNodeContext[8];
						self.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories[indexOfChangedCategory].steps[indexOfNewStep].isSelected = true;
						self.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories[indexOfChangedCategory].expanded = true;
					}
				}
			}
		});
		this.oModel.updateBindings(); // Update the tree to reflect deletion or addition
		var noOfObjects = objectContexts.length;
		if (objectContexts[noOfObjects - 1].changeCategory) {
			sap.ui.core.UIComponent.getRouterFor(this).navTo(objectContexts[noOfObjects - 1].oldContext.name, objectContexts[noOfObjects - 1].categoryChangeContext.arguments, true);//If the step is being removed from the present category,, navigate to the next category in which the step is present
		}
		this.configEditor.setIsUnsaved();
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#updateSelectedNode
	 * @param {Object} Label name and id of the node to be updated
	 * @param {Object} applicationId and temporary configuration id
	 * @description Updates node in the tree whenever title of node is changed from any of the detail subviews
	 * */
	updateSelectedNode : function(params, context) {
		if (params) {
			if (this.oTreeInstance.getSelection()) {
				this.selectedNode = this.oTreeInstance.getSelection();
			}
			if (this.selectedNode) {
				if (params.name && this.selectedNode.getBindingContext() && this.selectedNode.getBindingContext().getObject()) {
					this.selectedNode.getBindingContext().getObject().name = params.name;
					this.selectedNode.getBindingContext().getObject().isSelected = true;
					if (this.selectedNode.getBindingContext().getObject().type === sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.REPRESENTATION
							|| this.selectedNode.getBindingContext().getObject().type === sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.NAVIGATIONTARGET) {
						this.selectedNode.getBindingContext().getObject().icon = params.icon;
					}
					this.oModel.updateBindings();
				}
				if (params.id && this.selectedNode.getBindingContext().getObject().id) {//if new object then update APF id for this in binding
					this.selectedNode.getBindingContext().getObject().id = params.id;
					if (params.icon) { //read the icon for the configuration object if it is specified
						this.selectedNode.getBindingContext().getObject().icon = params.icon;
					}
				} else if (params.id && this.selectedNode.getBindingContext().getObject().AnalyticalConfiguration) {
					this.selectedNode.getBindingContext().getObject().AnalyticalConfiguration = params.id;
					this.selectedNode.getBindingContext().getObject().expanded = true;
				}
			}
			if ((this.selectedNode.getBindingContext().getObject().type === sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CONFIGURATION) && context) {
				sap.ui.core.UIComponent.getRouterFor(this).navTo(this.selectedNode.getBindingContext().getObject().type, context, true);
			}
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#createConfigList
	 * @description Loads only list of all configurations in the tree
	 * */
	createConfigList : function() {//Loads only a list of configurations in the tree
		var self = this;
		this.modelUpdateDeferred = {};//To contain a Deferred object for each configuration
		this.configList = this.configurationHandler.getList();
		this.configList.forEach(function(config, index) {
			var oConfigDetails = {};
			oConfigDetails.AnalyticalConfiguration = config.AnalyticalConfiguration;
			oConfigDetails.name = config.AnalyticalConfigurationName;
			oConfigDetails.Application = config.Application;
			oConfigDetails.type = sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CONFIGURATION;
			oConfigDetails.bIsLoaded = false; //boolean to check the creation of tree structure set to false
			oConfigDetails.bToggleState = false; // Toggle state boolean attached with each new node
			oConfigDetails.isSelected = false;
			oConfigDetails.expanded = false;
			oConfigDetails.selectable = true;
			oConfigDetails.hasExpander = true;
			self.oModel.getData().aConfigDetails.push(oConfigDetails);
			self.modelUpdateDeferred[index] = new jQuery.Deferred();//Deferred object to wait until model is updated with navigation target texts
		});
		this.oModel.updateBindings();
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#showNoConfigSelectedText
	 * @description Displays 'No COnfiguration Selected' text in detail area in case of multiple configurations
	 * */
	showNoConfigSelectedText : function() {
		this.byId("idConfigDetailData").removeAllContent(); //Remove All Previous Stacked Content from DOM
		this.clearTitleAndBreadCrumb();
		var noConfigSelected = new sap.m.Label().addStyleClass("noConfigSelected");
		noConfigSelected.setText(this.oCoreApi.getText("noConfigSelected"));
		noConfigSelected.placeAt(this.byId("idConfigDetailData"));
		this.toolbarController.disableCopyDeleteButton();
		this.disableExportButton();
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#updateConfigListView
	 * @description In case of only one configuration loads it and sets as selected and in case of multiple configurations none is selected
	 * */
	updateConfigListView : function() {//In case of only one configuration; To load the configuration and set it as selected and In case of multiple configurations none selected
		this.selectedNode = this.oTreeInstance.getSelection();
		if (this.selectedNode === null) {//only case when first time coming from application list view otherwise there will always a node selected.
			if (this.configList.length > 1) { // if more than one configuration,show a message in detail area,no config selected
				this.showNoConfigSelectedText();
			} else { // If only one configuration, load the configuration and set selection and then expand the tree node by setting bExpand to true
				this.oModel.getData().aConfigDetails[0].isSelected = true;
				this.oModel.getData().aConfigDetails[0].expanded = true;
				this.configId = this.oModel.getData().aConfigDetails[0].AnalyticalConfiguration;
				this.oModel.updateBindings();
				var context = {
					appId : this.appId,
					configId : this.oModel.getData().aConfigDetails[0].AnalyticalConfiguration
				};
				this.selectedNode = this.oTreeInstance.getNodes()[0];
				this.toolbarController.enableCopyDeleteButton();
				this._enableExportButton();
				sap.ui.core.UIComponent.getRouterFor(this).navTo(this.oModel.getData().aConfigDetails[0].type, context, true);
			}
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#_getNodeData
	 * @params {Object} params - id's of ancestor node to traverse through
	 * @params {String} type - define the node type like category, step etc
	 * @returns {Object} 
	 * 	nodeData {
	 * 			  index : index position of the node, 
	 * 			  id : unique id of the node passed, 
	 * 			  data : spliced model data of the node 
	 * 			 }  
	 * @description Returns the data which are relevant to the passed node
	 * */
	_getNodeData : function(params, type) {
		var configs = this.oModel.getData().aConfigDetails;
		var nodeData = {};
		var getConfigurationData = function(id) { //Get the configuration index
			var node = {};
			var configId = id || this.configId;
			for( var i = 0; i < configs.length; i++) {
				if (configs[i].AnalyticalConfiguration === configId) {
					node.index = i;
					node.data = configs[i];
					node.id = configs[i].AnalyticalConfiguration;
					break;
				}
			}
			return node;
		};
		var getFacetFilterData = function(id) { //Get the facetFilter index
			var indexOfConfig = getConfigurationData.call(this, params[sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CONFIGURATION]).index;
			var node = {};
			for( var i = 0; i < configs[indexOfConfig].configData.length; i++) {
				if (configs[indexOfConfig].configData[i].filters instanceof Array) {
					node.indexConfigData = i;
					for( var j = 0; j < configs[indexOfConfig].configData[i].filters.length; j++) {
						if (configs[indexOfConfig].configData[i].filters[j].id === id) {
							node.index = j;
							node.data = configs[indexOfConfig].configData[i].filters[j];
							node.id = configs[indexOfConfig].configData[i].filters[j].id;
							node.ffExpansion = configs[indexOfConfig].configData[i].expanded;
						}
					}
				}
			}
			return node;
		};
		var getCategoryData = function(id) { //Get the cateogry index
			var indexOfConfig = getConfigurationData.call(this, params[sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CONFIGURATION]).index;
			var node = {};
			for( var i = 0; i < configs[indexOfConfig].configData.length; i++) {
				if (configs[indexOfConfig].configData[i].categories instanceof Array) {
					node.indexConfigData = i;
					for( var j = 0; j < configs[indexOfConfig].configData[i].categories.length; j++) {
						if (configs[indexOfConfig].configData[i].categories[j].id === id) {
							node.index = j;
							node.data = configs[indexOfConfig].configData[i].categories[j];
							node.id = configs[indexOfConfig].configData[i].categories[j].id;
							node.categoryExpansion = configs[indexOfConfig].configData[i].expanded;
						}
					}
				}
			}
			return node;
		};
		var getStepData = function(id) {//Get the step index
			var indexOfConfig = getConfigurationData.call(this, params[sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CONFIGURATION]).index;
			var indexOfConfigData = getCategoryData.call(this, params[sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CATEGORY]).indexConfigData;
			var indexOfCategory = getCategoryData.call(this, params[sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CATEGORY]).index;
			var node = {};
			for( var i = 0; i < configs[indexOfConfig].configData[indexOfConfigData].categories[indexOfCategory].steps.length; i++) {
				if (configs[indexOfConfig].configData[indexOfConfigData].categories[indexOfCategory].steps[i].id === id) {
					node.index = i;
					node.data = configs[indexOfConfig].configData[indexOfConfigData].categories[indexOfCategory].steps[i];
					node.id = configs[indexOfConfig].configData[indexOfConfigData].categories[indexOfCategory].steps[i].id;
				}
			}
			return node;
		};
		var getRepresentationData = function(id) {//Get the representation index
			var indexOfConfig = getConfigurationData.call(this, params[sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CONFIGURATION]).index;
			var indexOfConfigData = getCategoryData.call(this, params[sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CATEGORY]).indexConfigData;
			var indexOfCategory = getCategoryData.call(this, params[sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CATEGORY]).index;
			var indexOfStep = getStepData.call(this, params[sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.STEP]).index;
			var node = {};
			for( var i = 0; i < configs[indexOfConfig].configData[indexOfConfigData].categories[indexOfCategory].steps[indexOfStep].representations.length; i++) {
				if (configs[indexOfConfig].configData[indexOfConfigData].categories[indexOfCategory].steps[indexOfStep].representations[i].id === id) {
					node.index = i;
					node.data = configs[indexOfConfig].configData[indexOfConfigData].categories[indexOfCategory].steps[indexOfStep].representations[i];
					node.id = configs[indexOfConfig].configData[indexOfConfigData].categories[indexOfCategory].steps[indexOfStep].representations[i].id;
				}
			}
			return node;
		};
		var getNavigationTargetData = function(id) { //Get the facetFilter index
			var indexOfConfig = getConfigurationData.call(this, params[sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CONFIGURATION]).index;
			var node = {};
			for( var i = 0; i < configs[indexOfConfig].configData.length; i++) {
				if (configs[indexOfConfig].configData[i].navTargets instanceof Array) {
					node.indexConfigData = i;
					for( var j = 0; j < configs[indexOfConfig].configData[i].navTargets.length; j++) {
						if (configs[indexOfConfig].configData[i].navTargets[j].id === id) {
							node.index = j;
							node.data = configs[indexOfConfig].configData[i].navTargets[j];
							node.id = configs[indexOfConfig].configData[i].navTargets[j].id;
							node.nTExpansion = configs[indexOfConfig].configData[i].expanded;
						}
					}
				}
			}
			return node;
		};
		switch (type) {
			case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CONFIGURATION:
				nodeData = getConfigurationData.call(this, params[sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CONFIGURATION]);
				break;
			case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.FACETFILTER:
				nodeData = getFacetFilterData.call(this, params[sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.FACETFILTER]);
				break;
			case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CATEGORY:
				nodeData = getCategoryData.call(this, params[sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CATEGORY]);
				break;
			case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.STEP:
				nodeData = getStepData.call(this, params[sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.STEP]);
				break;
			case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.REPRESENTATION:
				nodeData = getRepresentationData.call(this, params[sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.REPRESENTATION]);
				break;
			case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.NAVIGATIONTARGET:
				nodeData = getNavigationTargetData.call(this, params[sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.NAVIGATIONTARGET]);
				break;
			default:
				break;
		}
		return nodeData;
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#_retainNodeState
	 * @params {String} params - comprise all the node id from its parent
	 * @params {String} type - define the node type like category, step etc
	 * @description Retains the expansion state from its previous model if it exists
	 * */
	_retainNodeState : function(params, type) {
		var configIndexInTree = this._getNodeData(params, sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CONFIGURATION).index;
		//Check if the config editor is loaded else return empty object
		if (!this.oModel.getData().aConfigDetails[configIndexInTree].bIsLoaded) {
			return {};
		}
		var nodeData = this._getNodeData(params, type);
		//nodeData is empty then return empty object
		if (!nodeData.data) {
			return {};
		}
		return {
			expanded : nodeData.data.expanded,
			isSelected : nodeData.data.isSelected
		};
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#updateTree
	 * @description Prepare the model for tree with editor instance passed 
	 * it also retains the expansion and selection state if there is any
	 * existing model
	 * */
	updateTree : function() {
		var self = this;
		var categories = [], aFacetFilters = [], aNavigationTargets = [], aCategoryWithStepDetails = [], allCategoryInConfig = [], stepWithRepresentation = [];
		this.oTextPool = this.configurationHandler.getTextPool();
		var oParams = {};
		oParams[sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CONFIGURATION] = this.configId;
		var configIndexInTree = self._getNodeData(oParams, sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CONFIGURATION).index;
		var configId = this.configId;
		var bFFExpansionState = false;
		var bnTExpansionState = false;
		var bCategoryExpansionState = false;
		categories = this.configEditor.getCategories();
		aFacetFilters = this.configEditor.getFacetFilters();
		aNavigationTargets = this.configEditor.getNavigationTargets();
		var oRepnMetaData = this.oCoreApi.getRepresentationTypes();
		var oRepnIconMap = {};
		//Create Representation ID/Icon Map
		oRepnMetaData.forEach(function(o) {
			var sId = o.id;
			oRepnIconMap[sId] = o.picture;
		});
		categories.forEach(function(category) {
			oParams[sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CATEGORY] = category.getId();
			var oCategory = category;
			var sCategoryId = oCategory.getId();
			stepWithRepresentation = [];
			self.configEditor.getCategoryStepAssignments(sCategoryId).forEach(function(sStepId) {
				var oStep = self.configEditor.getStep(sStepId);
				oParams[sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CATEGORY] = sCategoryId;
				oParams[sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.STEP] = oStep.getId();
				var stepState = self._retainNodeState(oParams, sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.STEP);
				var aRepresentations = oStep.getRepresentations();
				var aRepData = aRepresentations.map(function(oRepresentation) {
					oParams[sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.REPRESENTATION] = oRepresentation.getId();
					var representationState = self._retainNodeState(oParams, sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.REPRESENTATION);
					return {
						id : oRepresentation.getId(),
						name : self.oCoreApi.getText(oRepresentation.getRepresentationType()),
						type : "representation",
						isSelected : representationState.isSelected || false,
						expanded : representationState.expanded || false,
						selectable : true,
						icon : oRepnIconMap[oRepresentation.getRepresentationType()]
					};
				});
				stepWithRepresentation.push({
					id : oStep.getId(),
					name : self.oTextPool.get(oStep.getTitleId()) ? self.oTextPool.get(oStep.getTitleId()).TextElementDescription : oStep.getTitleId(),
					type : "step",
					representations : aRepData,
					isSelected : stepState.isSelected || false,
					expanded : stepState.expanded || false,
					selectable : true,
					icon : "sap-icon://BusinessSuiteInAppSymbols/icon-phase"
				});
			});
			var categoryState = self._retainNodeState(oParams, sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CATEGORY);
			//Check if the config editor is loaded then check expansion state of root node 
			if (self.oModel.getData().aConfigDetails[configIndexInTree].bIsLoaded) {
				var categoryRootNode = self._getNodeData(oParams, sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CATEGORY);
				if (categoryRootNode.categoryExpansion) {
					bCategoryExpansionState = true; //Overall Category Node Expansion State
				}
			}
			aCategoryWithStepDetails.push({
				id : category.getId(),
				name : self.oTextPool.get(category.labelKey) ? self.oTextPool.get(category.labelKey).TextElementDescription : category.labelKey,
				type : "category",
				steps : stepWithRepresentation,
				isSelected : categoryState.isSelected || false,
				expanded : categoryState.expanded || false,
				selectable : true,
				icon : "sap-icon://open-folder"
			});
		});
		var aFacetFilter = [];
		aFacetFilters.forEach(function(oFacetFilter) {
			oParams[sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.FACETFILTER] = oFacetFilter.getId();
			var facetFilterState = self._retainNodeState(oParams, sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.FACETFILTER);
			//Check if the config editor is loaded then check expansion state of root node 
			if (self.oModel.getData().aConfigDetails[configIndexInTree].bIsLoaded) {
				var ffRootNode = self._getNodeData(oParams, sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.FACETFILTER);
				if (ffRootNode.ffExpansion) {
					bFFExpansionState = true; //Overall Facet Filter Node Expansion State
				}
			}
			aFacetFilter.push({
				id : oFacetFilter.getId(),
				name : self.oTextPool.get(oFacetFilter.getLabelKey()) ? self.oTextPool.get(oFacetFilter.getLabelKey()).TextElementDescription : oFacetFilter.getLabelKey(),
				type : "facetFilter",
				isSelected : facetFilterState.isSelected || false,
				expanded : facetFilterState.expanded || false,
				selectable : true,
				icon : "sap-icon://filter"
			});
		});
		allCategoryInConfig.push({
			filters : aFacetFilter,
			name : self.oCoreApi.getText("facetFilters"),
			expanded : bFFExpansionState,
			selectable : false
		});
		allCategoryInConfig.push({
			categories : aCategoryWithStepDetails,
			name : self.oCoreApi.getText("categories"),
			expanded : bCategoryExpansionState,
			selectable : false
		});
		var aNavigationTarget = [];
		//Takes a list of semantic actions and the navigation target; Compares the action of navigation target with the list to find the description or text 
		var populateNavTargets = function(aSemanticActions, oNavigationTarget) {
			oParams[sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.NAVIGATIONTARGET] = oNavigationTarget.getId();
			var navigationTargetState = self._retainNodeState(oParams, sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.NAVIGATIONTARGET);
			//Check if the config editor is loaded then check expansion state of root node 
			if (self.oModel.getData().aConfigDetails[configIndexInTree].bIsLoaded) {
				var nTRootNode = self._getNodeData(oParams, sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.NAVIGATIONTARGET);
				if (nTRootNode.nTExpansion) {
					bnTExpansionState = true; //Overall Facet Filter Node Expansion State
				}
			}
			var i, navTargetName;
			for(i = 0; i < aSemanticActions.length; i++) {
				if (aSemanticActions[i].id === oNavigationTarget.getAction()) {
					navTargetName = aSemanticActions[i].text;
					break;
				}
			}
			aNavigationTarget.push({
				id : oNavigationTarget.getId(),
				name : navTargetName || oNavigationTarget.getSemanticObject(),//Push the action description here, if action description not available use the semantic object
				type : "navigationTarget",
				isSelected : navigationTargetState.isSelected || false,
				expanded : navigationTargetState.expanded || false,
				selectable : true,
				icon : oNavigationTarget.isStepSpecific() ? "sap-icon://pushpin-off" : "sap-icon://BusinessSuiteInAppSymbols/icon-where-used"
			});
		};
		var orderNavTargets = function() {
			var aNavTargetIds = aNavigationTargets.map(function(oNavTarget) {
				return oNavTarget.getId();
			});
			var oTemp = [];
			for( var i = 0; i < aNavTargetIds.length; i++) {
				for( var j = 0; j < aNavigationTarget.length; j++) {
					if (aNavTargetIds[i] === aNavigationTarget[j].id) {
						oTemp[i] = aNavigationTarget[j];
						break;
					}
				}
			}
			aNavigationTarget = oTemp;
		};
		var updateModel = function() {
			var oConfigDetails = {};
			oConfigDetails.configData = allCategoryInConfig;
			self.oModel.getData().aConfigDetails[configIndexInTree].bIsLoaded = true;// Configuration Loaded boolean for configuration is set to true
			var oTemp = self.oModel.getData().aConfigDetails[configIndexInTree];
			jQuery.extend(oTemp, oConfigDetails);
			self.oModel.getData().aConfigDetails[configIndexInTree] = oTemp;
			self.oModel.getData().aConfigDetails[configIndexInTree].name = self.configurationHandler.getConfiguration(configId).AnalyticalConfigurationName; // Update the title of configuration while updating the model
			for( var index = 0; index < self.oModel.getData().aConfigDetails.length; index++) {
				if (self.modelUpdateDeferred[index] && self.modelUpdateDeferred[index].state() === "pending" && aNavigationTargets.length === 0) {//Check the state of deferred associated with all configurations which do not have navigation targets
					self.modelUpdateDeferred[index].resolve(self.oModel.getData());//Resolve the deferred once model is updated
				}
			}
			if (oTemp.configData[2].navTargets.length > 0) {
				//Push the action descriptions of all the navigation targets in the configuration into the navigation target texts table
				self._setNavigationTargetName({
					configIndexInTree : configIndexInTree
				});
				self.modelUpdateDeferred[configIndexInTree].resolve(self.oModel.getData());//Resolve the deferred once model is updated
			}
			self.oModel.updateBindings();
		};
		aNavigationTargets.forEach(function(oNavigationTarget) {
			var oPromise = self.oCoreApi.getSemanticActions(oNavigationTarget.getSemanticObject());
			oPromise.then(function(aSemanticActions) {
				populateNavTargets(aSemanticActions.semanticActions, oNavigationTarget);
				if (aNavigationTarget.length === aNavigationTargets.length) {//Once all the navigation targets are populated push them into allCategoryInConfig
					orderNavTargets();
					if (allCategoryInConfig[2]) {
						allCategoryInConfig.splice(2, 2);//Remove the empty nav targets array
						allCategoryInConfig.push({
							navTargets : aNavigationTarget,
							name : self.oCoreApi.getText("navigationTargets"),
							expanded : bnTExpansionState,
							selectable : false
						});
						updateModel();//Update the model after nav targets are populated
						var currentUrlParams = sap.apf.modeler.ui.utils.APFRouter.params;
						if (currentUrlParams.name === "navigationTarget") {
							sap.apf.modeler.ui.utils.APFRouter.setCurrentSelectionState(currentUrlParams, self);
						}
					}
				}
			});
		});
		allCategoryInConfig.push({
			navTargets : aNavigationTarget,
			name : self.oCoreApi.getText("navigationTargets"),
			expanded : bnTExpansionState,
			selectable : false
		});
		updateModel();//Update the model before nav targets are populated
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#_checkIfKeyExists
	 * @params {String} Key as navigation target ID 
	 * 		   {Integer} Index of the configuration in the tree
	 * @description Checks if the navigation target key exists in the given configuration index and return the index of the key in the table
	 * */
	_checkIfKeyExists : function(key, configIndexInTree) {
		var indexOfKey;
		if (this.navTargetTextsTable[configIndexInTree]) {
			this.navTargetTextsTable[configIndexInTree].texts.forEach(function(navTarget, index) {
				if (navTarget.key === key) {
					indexOfKey = index;
				}
			});
		}
		return indexOfKey;
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#_checkIfKeyExists
	 * @params {String} Key as navigation target ID 
	 * @description Checks if the navigation target key exists in the given configuration index and return the value of the key
	 * */
	_getNavigationTargetName : function(key) {
		var self = this;
		var value;
		var navTextDeferred = new jQuery.Deferred();//Deferred object to read texts from step controller
		var configIndexInTree = self.getSPathForConfig(self.configId).split('/')[2];
		if (this.modelUpdateDeferred[configIndexInTree] === undefined) {
			this.modelUpdateDeferred[configIndexInTree] = new jQuery.Deferred();
			this.modelUpdateDeferred[configIndexInTree].resolve(this.oModel.getData());
		}
		jQuery.when(this.modelUpdateDeferred[configIndexInTree]).done(function(model) {//Check if the model is updated with the help of the deferred and then search/return the text
			var indexOfKey = self._checkIfKeyExists(key, configIndexInTree);
			if (indexOfKey !== undefined) {
				value = self.navTargetTextsTable[configIndexInTree].texts[indexOfKey].value;
				navTextDeferred.resolve(value);//Resolve with value for the given key
			}
		});
		return navTextDeferred.promise();//Return a promise on the deferred
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#_checkIfKeyExists
	 * @params {String} Key as navigation target ID 
	 * 		   {String} Text of the navigation target action
	 * @description Inserts the key value pair into the navigation target texts table
	 * Structure of navigation targets text table
	 * {
	 * 	"0" : {
	 * 			texts : []
	 * 		},
	 * 	"1" : { 
	 * 			texts : []
	 * 		},
	 * 	.
	 * 	.
	 * }
	 * */
	_setNavigationTargetName : function(params) {
		var configIndexInTree = params.configIndexInTree !== undefined ? params.configIndexInTree : this.getSPathForConfig(this.configId).split('/')[2];
		if (jQuery.isEmptyObject(this.navTargetTextsTable)) {//If the table is an empty object insert the object configDetails
			this.navTargetTextsTable = {};
		}
		if (!this.navTargetTextsTable[configIndexInTree]) {//If the configDetails for a particular config is empty insert the texts object
			this.navTargetTextsTable[configIndexInTree] = {
				texts : []
			};
		}
		if (params.key && params.value) {//Only key and value is passed, insert or update a single nav target key value pair
			var indexOfKey = this._checkIfKeyExists(params.key, configIndexInTree);
			if (indexOfKey === undefined) {
				var navTargetObj = {};
				navTargetObj.key = params.key;
				navTargetObj.value = params.value;
				this.navTargetTextsTable[configIndexInTree].texts.push(navTargetObj);
			} else {//If key is already available in the table, then overwrite the new value
				this.navTargetTextsTable[configIndexInTree].texts[indexOfKey].value = params.value;
			}
		} else {// From updateTree to update the texts of all navigation targets present in a configuration
			var navTargets = this.oModel.getData().aConfigDetails[configIndexInTree].configData[2].navTargets;
			for( var index = 0; index < navTargets.length; index++) {
				var navTargetTextsTableObj = {};
				navTargetTextsTableObj.key = navTargets[index].id;
				navTargetTextsTableObj.value = navTargets[index].name;
				this.navTargetTextsTable[params.configIndexInTree].texts.push(navTargetTextsTableObj);
			}
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#_handleToggleTreeNode
	 * @description On expand stores the binding context of the nodes which could be used later to set the state of the tree
	 * */
	_handleToggleTreeNode : function(oEvent) { // on expand stores the binding context of the nodes which could be used later to set the state of the tree
		var self = this;
		var oCurrentNode = oEvent.getSource();
		oCurrentNode.setExpanded(!oCurrentNode.getExpanded());
		var sPathOfCurrentNode = oCurrentNode.getBindingContext().sPath;
		var selectedObjectType = oCurrentNode.getBindingContext().getObject().type;
		if (selectedObjectType === sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CONFIGURATION) { //if configuration is expanded, the child nodes has to be expanded
			var configIndexInTree = sPathOfCurrentNode.split('/')[2];
			if (self.oModel.getData().aConfigDetails[configIndexInTree].bIsLoaded === true) { //If the tree structure has been created
				this.oModel.updateBindings(); //Update the tree 
			} else { // If the tree structure has not been created
				this.configurationHandler.loadConfiguration(this.oModel.getData().aConfigDetails[configIndexInTree].AnalyticalConfiguration, function(configurationEditor) { // Sets the configEditor only once in case of existing configuration
					self.configEditor = configurationEditor;
					self.configId = self.oModel.getData().aConfigDetails[configIndexInTree].AnalyticalConfiguration;
					self.updateTree();
				});
			}
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#getSPathForConfig
	 * @arams Configuration Id for which sPath has to be derieved
	 * @description Returns sPath of the selected configuration
	 * @returns {String} Returns sPath of the configuration node
	 * */
	getSPathForConfig : function(configId) {
		var sPath;
		this.oModel.getData().aConfigDetails.forEach(function(config, index) {
			if (config.AnalyticalConfiguration === configId) {
				sPath = "/aConfigDetails/" + index;
			}
		});
		return sPath;
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#getSPathFromURL
	 * @arams URL context
	 * @description Returns a valid sPath from the URL context
	 * */
	getSPathFromURL : function(params) {
		var oValidURL = {
			sPath : undefined,
			objectType : undefined
		};
		var self = this;
		this.oModel.getData().aConfigDetails.forEach(function(config, index) {
			if (config.AnalyticalConfiguration === params.arguments.configId) {
				oValidURL.sPath = "/aConfigDetails/" + index;
				oValidURL.objectType = sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CONFIGURATION;
				self.oModel.getData().aConfigDetails[index].expanded = true;
				if (params.arguments.categoryId !== undefined) {
					self.oModel.getData().aConfigDetails[index].configData[1].categories.forEach(function(category, categoryIndex) {
						if (category.id === params.arguments.categoryId) {
							oValidURL.sPath = oValidURL.sPath.concat("/configData/1/categories/" + categoryIndex);
							oValidURL.objectType = sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CATEGORY;
							self.oModel.getData().aConfigDetails[index].configData[1].expanded = true;
							if (params.arguments.stepId !== undefined) {
								self.oModel.getData().aConfigDetails[index].configData[1].categories[categoryIndex].steps.forEach(function(step, stepIndex) {
									if (step.id === params.arguments.stepId) {
										oValidURL.sPath = oValidURL.sPath.concat("/steps/" + stepIndex);
										oValidURL.objectType = sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.STEP;
										self.oModel.getData().aConfigDetails[index].configData[1].categories[categoryIndex].expanded = true;
										if (params.arguments.representationId !== undefined) {
											self.oModel.getData().aConfigDetails[index].configData[1].categories[categoryIndex].steps[stepIndex].representations.forEach(function(representation, representationIndex) {
												if (representation.id === params.arguments.representationId) {
													self.oModel.getData().aConfigDetails[index].configData[1].categories[categoryIndex].steps[stepIndex].expanded = true;
													oValidURL.sPath = oValidURL.sPath.concat("/representations/" + representationIndex);
													oValidURL.objectType = sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.REPRESENTATION;
												}
											});
										}
									}
								});
							}
						}
					});
				}
				if (params.arguments.facetFilterId !== undefined) {
					self.oModel.getData().aConfigDetails[index].configData[0].filters.forEach(function(facetFilter, facetFilterIndex) {
						if (facetFilter.id === params.arguments.facetFilterId) {
							oValidURL.sPath = oValidURL.sPath.concat("/configData/0/filters/" + facetFilterIndex);
							oValidURL.objectType = sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.FACETFILTER;
							self.oModel.getData().aConfigDetails[index].configData[0].expanded = true;
						}
					});
				}
				if (params.arguments.navTargetId !== undefined) {
					self.oModel.getData().aConfigDetails[index].configData[2].navTargets.forEach(function(navTarget, navTargetIndex) {
						if (navTarget.id === params.arguments.navTargetId) {
							oValidURL.sPath = oValidURL.sPath.concat("/configData/2/navTargets/" + navTargetIndex);
							oValidURL.objectType = sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.NAVIGATIONTARGET;
							self.oModel.getData().aConfigDetails[index].configData[2].expanded = true;
						}
					});
				}
			}
		});
		return oValidURL;
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#_navHandleExpandDelete
	 * @params {Object} node context
	 * @params {Object} Route params context
	 * @params {Boolean} Whether configuration is switched or not
	 * @description Set the expansion state of selected node + delete the new node or config
	 * */
	_navHandleExpandDelete : function(node, params, isSwitchConfig) {
		var self = this;
		var configs = this.oModel.getData().aConfigDetails;
		var bIsDifferntConfig = isSwitchConfig || this.oTreeInstance.isConfigurationSwitched(this.oPreviousSelectedNode, this.selectedNode);
		var getConfigurationIndex = function(id) { //Get the configuration index
			var index;
			for( var i = 0; i < configs.length; i++) {
				if (configs[i].AnalyticalConfiguration === id) {
					index = i;
					break;
				}
			}
			return index;
		};
		var getFacetFilterIndex = function(id) { //Get the facetFilter index
			var indexOfConfig = getConfigurationIndex.call(this, params.configId);
			var indexConfig, indexFilter;
			for( var i = 0; i < configs[indexOfConfig].configData.length; i++) {
				if (configs[indexOfConfig].configData[i].filters instanceof Array) {
					indexConfig = i;
					for( var j = 0; j < configs[indexOfConfig].configData[i].filters.length; j++) {
						if (configs[indexOfConfig].configData[i].filters[j].id === id) {
							indexFilter = j;
							break;
						} else {
							indexFilter = j;
						}
					}
				}
			}
			return {
				indexConfig : indexConfig,
				indexFilter : indexFilter
			};
		};
		var getNavTargetIndex = function(id) { //Get the navigation Target index
			var indexOfConfig = getConfigurationIndex.call(this, params.configId);
			var indexConfig, indexNavTarget;
			for( var i = 0; i < configs[indexOfConfig].configData.length; i++) {
				if (configs[indexOfConfig].configData[i].navTargets instanceof Array) {
					indexConfig = i;
					for( var j = 0; j < configs[indexOfConfig].configData[i].navTargets.length; j++) {
						if (configs[indexOfConfig].configData[i].navTargets[j].id === id) {
							indexNavTarget = j;
							break;
						} else {
							indexNavTarget = j;
						}
					}
				}
			}
			return {
				indexConfig : indexConfig,
				indexNavTarget : indexNavTarget
			};
		};
		var getCategoryIndex = function(id) { //Get the category index
			var indexOfConfig = getConfigurationIndex.call(this, params.configId);
			var indexConfig, indexCategory;
			for( var i = 0; i < configs[indexOfConfig].configData.length; i++) {
				if (configs[indexOfConfig].configData[i].categories instanceof Array) {
					indexConfig = i;
					for( var j = 0; j < configs[indexOfConfig].configData[i].categories.length; j++) {
						if (configs[indexOfConfig].configData[i].categories[j].id === id) {
							indexCategory = j;
							break;
						} else {
							indexCategory = j;
						}
					}
				}
			}
			return {
				indexConfig : indexConfig,
				indexCategory : indexCategory
			};
		};
		var getStepIndex = function(id) {//Get the step index
			var indexOfConfig = getConfigurationIndex.call(this, params.configId);
			var indexOfConfigData = getCategoryIndex.call(this, params.categoryId).indexConfig;
			var indexOfCategory = getCategoryIndex.call(this, params.categoryId).indexCategory;
			var indexStep;
			for( var i = 0; i < configs[indexOfConfig].configData[indexOfConfigData].categories[indexOfCategory].steps.length; i++) {
				if (configs[indexOfConfig].configData[indexOfConfigData].categories[indexOfCategory].steps[i].id === id) {
					indexStep = i;
					break;
				} else {
					indexStep = i;
				}
			}
			return indexStep;
		};
		if (params.configId.indexOf(sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.ISNEWCONFIG) === 0 && bIsDifferntConfig) {
			this.configurationHandler.removeConfiguration(params.configId, function(id) {
				var aConfigForTree = self.oModel.getData().aConfigDetails;
				var indexOfConfig = getConfigurationIndex.call(self, params.configId);
				self._deleteConfigNavTargetTexts(indexOfConfig, aConfigForTree.length);//Remove the navigation target texts of the deleted configuration
				aConfigForTree.splice(indexOfConfig, 1);
				self.oModel.getData().aConfigDetails = aConfigForTree;
			});
		} else {
			var indexOfConfig, indexOfConfigData, indexOfFacetFilter, indexOfCategory, indexOfStep, indexOfNavTarget;
			switch (node.nodeObjectType) {
				case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CONFIGURATION:
					indexOfConfig = getConfigurationIndex.call(this, params.configId);
					this.oModel.getData().aConfigDetails[indexOfConfig].isSelected = true;
					this.oModel.getData().aConfigDetails[indexOfConfig].expanded = true;
					break;
				case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.FACETFILTER:
					indexOfConfig = getConfigurationIndex.call(this, params.configId);
					indexOfConfigData = getFacetFilterIndex.call(this, params.facetFilterId).indexConfig;
					indexOfFacetFilter = getFacetFilterIndex.call(this, params.facetFilterId).indexFilter;
					this.oModel.getData().aConfigDetails[indexOfConfig].expanded = true;
					this.oModel.getData().aConfigDetails[indexOfConfig].configData[indexOfConfigData].expanded = true;
					this.oModel.getData().aConfigDetails[indexOfConfig].configData[indexOfConfigData].filters[indexOfFacetFilter].expanded = true;
					break;
				case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CATEGORY:
					indexOfConfig = getConfigurationIndex.call(this, params.configId);
					indexOfConfigData = getCategoryIndex.call(this, params.categoryId).indexConfig;
					indexOfCategory = getCategoryIndex.call(this, params.categoryId).indexCategory;
					this.oModel.getData().aConfigDetails[indexOfConfig].expanded = true;
					this.oModel.getData().aConfigDetails[indexOfConfig].configData[indexOfConfigData].expanded = true;
					break;
				case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.STEP:
					indexOfConfig = getConfigurationIndex.call(this, params.configId);
					indexOfConfigData = getCategoryIndex.call(this, params.categoryId).indexConfig;
					indexOfCategory = getCategoryIndex.call(this, params.categoryId).indexCategory;
					indexOfStep = getStepIndex.call(this, params.stepId);
					this.oModel.getData().aConfigDetails[indexOfConfig].expanded = true;
					this.oModel.getData().aConfigDetails[indexOfConfig].configData[indexOfConfigData].expanded = true;
					this.oModel.getData().aConfigDetails[indexOfConfig].configData[indexOfConfigData].categories[indexOfCategory].expanded = true;
					break;
				case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.REPRESENTATION:
					indexOfConfig = getConfigurationIndex.call(this, params.configId);
					indexOfConfigData = getCategoryIndex.call(this, params.categoryId).indexConfig;
					indexOfCategory = getCategoryIndex.call(this, params.categoryId).indexCategory;
					indexOfStep = getStepIndex.call(this, params.stepId);
					this.oModel.getData().aConfigDetails[indexOfConfig].expanded = true;
					this.oModel.getData().aConfigDetails[indexOfConfig].configData[indexOfConfigData].expanded = true;
					this.oModel.getData().aConfigDetails[indexOfConfig].configData[indexOfConfigData].categories[indexOfCategory].expanded = true;
					this.oModel.getData().aConfigDetails[indexOfConfig].configData[indexOfConfigData].categories[indexOfCategory].steps[indexOfStep].expanded = true;
					break;
				case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.NAVIGATIONTARGET:
					indexOfConfig = getConfigurationIndex.call(this, params.configId);
					indexOfConfigData = getNavTargetIndex.call(this, params.navTargetId).indexConfig;
					indexOfNavTarget = getNavTargetIndex.call(this, params.navTargetId).indexNavTarget;
					this.oModel.getData().aConfigDetails[indexOfConfig].expanded = true;
					this.oModel.getData().aConfigDetails[indexOfConfig].configData[indexOfConfigData].expanded = true;
					this.oModel.getData().aConfigDetails[indexOfConfig].configData[indexOfConfigData].navTargets[indexOfNavTarget].expanded = true;
					break;
				default:
					break;
			}
		}
		this.oModel.updateBindings();
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#_isNewSubView
	 * @params {Object} Route context 
	 * @description Check whether the sub view is new or existing
	 * */
	_isNewSubView : function(params) {
		var isNew = false;
		if (params.arguments.configId.indexOf(sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.ISNEWCONFIG) === 0) { //Check the prefix apf1972- for new 
			isNew = true;
		} else {
			if (params.name === sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CONFIGURATION) {
				isNew = (this.configurationHandler.getConfiguration(params.arguments.configId) !== undefined) ? false : true;
			} else if (params.name === sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CATEGORY) {
				isNew = (this.configEditor.getCategory(params.arguments.categoryId) !== undefined) ? false : true;
			} else if (params.name === sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.FACETFILTER) {
				isNew = (this.configEditor.getFacetFilter(params.arguments.facetFilterId) !== undefined) ? false : true;
			} else if (params.name === sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.STEP) {
				isNew = (this.configEditor.getStep(params.arguments.stepId) !== undefined) ? false : true;
			} else if (params.name === sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.REPRESENTATION) {
				isNew = (this.configEditor.getRepresentation(params.arguments.representationId) !== undefined) ? false : true;
			} else if (params.name === sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.NAVIGATIONTARGET) {
				isNew = (this.configEditor.getNavigationTarget(params.arguments.navTargetId) !== undefined) ? false : true;
			}
		}
		return isNew;
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#_getCurrentConfigurationNode
	 * @description Return the configuration tree node 
	 * */
	_getCurrentConfigurationNode : function() {
		var parentNodes = this.oTreeInstance.getNodes();
		var configId = this.configId;
		for( var i = 0; i < parentNodes.length; i++) {
			if (configId === parentNodes[i].getBindingContext().getObject().AnalyticalConfiguration) {
				return parentNodes[i];
			}
		}
		return undefined;
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#_navMandatoryResetState
	 * @params {Object} Configuration List instance
	 * @params {Function} Callback function to be executed once the configuration is reset
	 * @returns {Object} {
	 * 		isNewView : new view or not
	 * 		bIsSaved : Configuration is saved or not
	 * } 
	 * @description On mandatory state reset the configuration and prepare new tree structure
	 * */
	_navMandatoryResetState : function(context, callback) {
		var self = context;
		self.bIsSaved = self.configEditor ? self.configEditor.isSaved() : undefined;
		var subViewInstance = (typeof self.byId("idConfigDetailData").getContent()[0].getController === "function") ? self.byId("idConfigDetailData").getContent()[0].getController() : undefined;
		var isNewView = this._isNewSubView(subViewInstance.oViewData.oParams);
		if (!isNewView) {
			self.updateTree();
			var selectedNode = self.selectedNode.getBindingContext().getObject();
			if (selectedNode) { // If node exists then set it to be selected else make the parent config node as selected cause the selected node has been deleted
				selectedNode.isSelected = true;
				subViewInstance.oConfigurationEditor = self.configEditor;
				subViewInstance.setDetailData.call(subViewInstance);
				self.updateTitleAndBreadCrumb();
			} else {
				self.oTreeInstance.setSelection(self._getCurrentConfigurationNode());
			}
			if (typeof callback === "function") {
				callback();
			}
		} else {
			self.handleConfirmDeletion();
		}
		return {
			bIsSaved : self.bIsSaved,
			isNewView : isNewView
		};
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#_navSaveState
	 * @param {Function} Callback to save the editor instance
	 * @description Save the editor instance
	 * */
	_navSaveState : function(saveEditor) {
		saveEditor();
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#_navConfigResetState
	 * @params {Object} configuration list instance
	 * @params {Function} Callback function once the configuration is reset
	 * @description Reset the configuration and delete the respective node if its new view
	 * */
	_navConfigResetState : function(context, callback) {
		var self = context;
		var subViewInstance = (typeof self.byId("idConfigDetailData").getContent()[0].getController === "function") ? self.byId("idConfigDetailData").getContent()[0].getController() : undefined;
		var isNewView = this._isNewSubView(subViewInstance.oViewData.oParams);
		if (!isNewView) {
			self.configurationHandler.loadConfiguration(self.configId, function(configurationEditor) {
				var subViewInstance = (typeof self.byId("idConfigDetailData").getContent()[0].getController === "function") ? self.byId("idConfigDetailData").getContent()[0].getController() : undefined;
				self.configEditor = configurationEditor;
				self.updateTree();
				var selectedNode = self.selectedNode.getBindingContext().getObject();
				if (selectedNode) { // If node exists then set it to be selected else make the parent config node as selected cause the selected node has been deleted
					selectedNode.isSelected = true;
					subViewInstance.oConfigurationEditor = self.configEditor;
					subViewInstance.setDetailData.call(subViewInstance);
					self.updateTitleAndBreadCrumb();
				} else {
					self.oTreeInstance.setSelection(self._getCurrentConfigurationNode());
				}
				if (typeof callback === "function") {
					callback();
				}
			});
		} else {
			self.handleConfirmDeletion();
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#getRouteContext
	 * @params {Object}  node context
	 * @description returns the route context 
	 * */
	getRouteContext : function(nodeContext) {
		var self = this;
		if (!nodeContext) { //If node context undefined bookmark scenario
			this.oSelectedNodeDetails = this.oTreeInstance.getAPFTreeNodeContext(this.oTreeInstance.getSelection());
			this.oParentNodeDetails = this.oTreeInstance.getParentNodeContext(this.oSelectedNodeDetails);
			nodeContext = this.oParentNodeDetails;
		}
		var routeContext = {
			appId : self.appId,
			configId : nodeContext.configurationId,
			categoryId : nodeContext.categoryId,
			facetFilterId : nodeContext.facetFilterId,
			stepId : nodeContext.stepId,
			representationId : nodeContext.representationId,
			navTargetId : nodeContext.navTargetId
		};
		return routeContext;
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#_onTreeNodeSelection
	 * @description On tree node selection performs action like navigate to view and performs checks for navigation scenarios
	 * */
	_onTreeNodeSelection : function(oEvent) {
		this.selectedNode = oEvent.getParameter("node");
		var self = this;
		if (!this.bProgramaticSelection) {
			this.oPreviousSelectedNode = this.oTreeInstance.getSelection();
			this.bIsDifferntConfig = this.oTreeInstance.isConfigurationSwitched(this.oPreviousSelectedNode, this.selectedNode);
			this.oSelectedNodeDetails = this.oTreeInstance.getAPFTreeNodeContext(this.selectedNode);
			this.oParentNodeDetails = this.oTreeInstance.getParentNodeContext(this.oSelectedNodeDetails);
			this.toolbarController.enableCopyDeleteButton();
			this._enableExportButton();
			var subViewInstance;
			if (this.byId("idConfigDetailData").getContent().length >= 1) {
				subViewInstance = (typeof this.byId("idConfigDetailData").getContent()[0].getController === "function") ? this.byId("idConfigDetailData").getContent()[0].getController() : undefined;
			}
			var currNodeId = this.selectedNode ? this.selectedNode.getId() : null;
			var prevNodeId = this.oPreviousSelectedNode ? this.oPreviousSelectedNode.getId() : null;
			//Set the selection back to the previous node 
			//Used on scenario of navigation switch back to 
			//previous node on cancel state
			var resetSelectionToPreviousNode = function() {
				var prevSelectedNode = self.oPreviousSelectedNode.getBindingContext().getObject();
				var selectedNode = self.selectedNode.getBindingContext().getObject();
				prevSelectedNode.isSelected = true;
				selectedNode.isSelected = false;
				self.oModel.updateBindings();
			};
			//If not the same node selected 
			if (currNodeId !== prevNodeId || this.bNavDeletionMode) {
				//check if there is any unsaved change
				var navigationHandlerInstance = sap.apf.modeler.ui.utils.navigationHandler.getInstance();
				var isMandatoryFilled;
				if (subViewInstance !== undefined) {
					isMandatoryFilled = typeof subViewInstance.getValidationState === "function" ? subViewInstance.getValidationState.call(subViewInstance) : true;
				} else {
					isMandatoryFilled = true;
				}
				this.bIsSaved = this.configEditor ? this.configEditor.isSaved() : undefined;
				var onConfigSwitchState;
				var isDirtyState = false;
				var configList = this.configurationHandler.getList();
				if (!isMandatoryFilled && (configList.length > 0)) { //check mandatory state || if configuration list exists
					navigationHandlerInstance.throwMandatoryPopup(self, {
						yes : function() {
							var routeContext = self.getRouteContext(self.oParentNodeDetails);
							var subViewInstance = (typeof self.byId("idConfigDetailData").getContent()[0].getController === "function") ? self.byId("idConfigDetailData").getContent()[0].getController() : undefined;
							var isNewView = self._isNewSubView(subViewInstance.oViewData.oParams);
							if (!isNewView) {
								var yesAction = function(callback) {
									if (typeof callback === "function") {
										callback();
									}
									this.updateTree();
									var selectedNode = this.selectedNode.getBindingContext().getObject();
									this.navigateToDifferntView(this.oParentNodeDetails, this.oSelectedNodeDetails);
									selectedNode.isSelected = true;
									this.oModel.updateBindings();
								};
								if (!self.bIsSaved && self.bIsDifferntConfig) { //If it still dirty then call switch state dialog & different config
									onConfigSwitchState(false, function() {
										yesAction.call(self);
									});
								} else {
									yesAction.call(self);
								}
							} else {
								if (!self.bIsSaved && self.bIsDifferntConfig) { //If it still dirty then call switch state dialog & different config
									onConfigSwitchState(false, function() {
										var selectContext = self.selectedNode.getBindingContext().sPath;
										var prevContext = self.oPreviousSelectedNode;
										self.handleConfirmDeletion(prevContext, selectContext);
									});
								} else {
									var selectContext = self.selectedNode.getBindingContext().sPath;
									var prevContext = self.oPreviousSelectedNode;
									self.handleConfirmDeletion(prevContext, selectContext);
								}
							}
							self._navHandleExpandDelete.call(self, self.oSelectedNodeDetails, routeContext);
						},
						no : function() {
							resetSelectionToPreviousNode();
						}
					});
					isDirtyState = true;
				}
				//on configuration switch throw loss of data pop up 
				onConfigSwitchState = function(callback) {
					navigationHandlerInstance.throwLossOfDataPopup(self, {
						yes : function(saveEditor) {
							if (typeof callback === "function") {
								callback(function() {
									saveEditor(function() {
										if (self.oPreviousSelectedNode) {
											var sBindingContext = self.oPreviousSelectedNode.getBindingContext().sPath;
											var aContextForSelectedNode = sBindingContext.split("/");
											var indexOfConfig = aContextForSelectedNode[2];
										}
										self.oModel.getData().aConfigDetails[indexOfConfig].AnalyticalConfiguration = self.configId;
									});
								});
							} else {
								saveEditor(function() {
									if (self.oPreviousSelectedNode) {
										var sBindingContext = self.oPreviousSelectedNode.getBindingContext().sPath;
										var aContextForSelectedNode = sBindingContext.split("/");
										var indexOfConfig = aContextForSelectedNode[2];
									}
									self.oModel.getData().aConfigDetails[indexOfConfig].AnalyticalConfiguration = self.configId;
									var selectedNode = self.selectedNode.getBindingContext().getObject();
									self.navigateToDifferntView(self.oParentNodeDetails, self.oSelectedNodeDetails);
									selectedNode.isSelected = true;
									self.oModel.updateBindings();
								});
							}
						},
						no : function() {
							var routeContext = self.getRouteContext(self.oParentNodeDetails);
							self.configurationHandler.loadConfiguration(self.configId, function(configurationEditor) {
								self.configEditor = configurationEditor;
								if (self.configId.indexOf(sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.ISNEWCONFIG) === 0) { //If new confiuration splice from model before navigating 
									self._navHandleExpandDelete.call(self, {}, {
										configId : self.configId
									}, routeContext);
								} else {
									self.updateTree();
								}
								self.navigateToDifferntView(self.oParentNodeDetails, self.oSelectedNodeDetails);
								self._navHandleExpandDelete.call(self, self.oSelectedNodeDetails, routeContext);
							});
						},
						cancel : function() {
							resetSelectionToPreviousNode();
						}
					});
				};
				//if unsaved state while switching throw loss of data pop up
				if (!self.bIsSaved && self.bIsDifferntConfig && isMandatoryFilled) {
					onConfigSwitchState();
					isDirtyState = true;
				}
				if (!isDirtyState) {//In clean state navigate to respective node selected  
					if (this.oPreviousSelectedNode && this.oPreviousSelectedNode.getId() !== this.selectedNode.getId()) {
						var bPrevSelectedNode = this.oPreviousSelectedNode.getBindingContext().getObject();
						if (bPrevSelectedNode) {
							this.oPreviousSelectedNode.getBindingContext().getObject().isSelected = false;
							this.oPreviousSelectedNode.setIsSelected(false);
						}
					} else {
						this.selectedNode.getBindingContext().getObject().isSelected = true;
					}
					this.navigateToDifferntView(this.oParentNodeDetails, this.oSelectedNodeDetails, this.bIsSaved, this.bIsDifferntConfig);
				}
			}
		}
		this.bProgramaticSelection = false;//reset flag for programatic selection
		this.bNavDeletionMode = false; //to check navigation in delete mode
	},
	navigateToDifferntView : function(oParentNodeDetails, oSelectedNodeDetails, bIsSaved, bIsDifferntConfig) {
		var context = {
			appId : this.appId,
			configId : oParentNodeDetails.configurationId,
			categoryId : oParentNodeDetails.categoryId,
			facetFilterId : oParentNodeDetails.facetFilterId,
			stepId : oParentNodeDetails.stepId,
			representationId : oParentNodeDetails.representationId,
			navTargetId : oParentNodeDetails.navTargetId
		};
		if ((!jQuery.isEmptyObject(context) && (bIsSaved === undefined || bIsSaved)) || (!bIsDifferntConfig)) { //If context is not equal to empty traverse to view
			sap.ui.core.UIComponent.getRouterFor(this).navTo(oSelectedNodeDetails.nodeObjectType, context, true);
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#_deleteConfigNavTargetTexts
	 * @description Remove the navigation target texts of the deleted configuration and deferred object associated
	 * @params {Integer} Index of configuration {Integer} Number of configurations in application
	 * */
	_deleteConfigNavTargetTexts : function(indexOfConfig, numberOfConfigs) {
		var self = this;
		var indexToDelete;
		for( var i = indexOfConfig; i < numberOfConfigs - 1; i++) {
			this.modelUpdateDeferred[i] = this.modelUpdateDeferred[i + 1];//Copy the deferred object to the preceding key
		}
		delete this.modelUpdateDeferred[numberOfConfigs - 1];//Delete the last deferred object
		if (this.navTargetTextsTable) {
			if (this.navTargetTextsTable[indexOfConfig]) {
				delete this.navTargetTextsTable[indexOfConfig];//Delete the nav targets text for the deleted configuration
			}
			if (indexOfConfig !== (numberOfConfigs - 1)) {//If the deleted configuration is not the last one then 
				//Find the keys which need to be updated and copied to preceding index
				Object.keys(this.navTargetTextsTable).forEach(function(key) {
					key = parseInt(key, 10);
					if (key > indexOfConfig) {
						self.navTargetTextsTable[key - 1] = self.navTargetTextsTable[key];
						indexToDelete = key;
					}
				});
				if (indexToDelete !== undefined) {
					delete this.navTargetTextsTable[indexToDelete];//Delete the excess key data
				}
			}
		}
	},
	handleConfirmDeletion : function(selectedNode, selectContext) { //event handler for confirmation dialog from delete button in the toolbar
		var selectedTreeNodeDetails = ((selectedNode === undefined) || (typeof selectedNode.preventDefault === "function")) ? this.oTreeInstance.getAPFTreeNodeContext(this.oTreeInstance.getSelection()) : this.oTreeInstance
				.getAPFTreeNodeContext(selectedNode);
		var self = this;
		this.selectedNode = this.oTreeInstance.getSelection();
		var newContextForCopiedNode, aNewContextForSelectedNode, aOldContextForSelectedNode, oldContextForSelectedNode, indexOfConfig, indexOffacetFilter, indexOfCategory, indexOfNavTarget, indexOfStep;
		oldContextForSelectedNode = selectedTreeNodeDetails.nodeContext;
		aOldContextForSelectedNode = oldContextForSelectedNode.split("/");
		indexOfConfig = aOldContextForSelectedNode[2];
		switch (selectedTreeNodeDetails.nodeObjectType) {
			case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.FACETFILTER:
				this.configEditor.removeFacetFilter(selectedTreeNodeDetails.nodeAPFId);
				indexOffacetFilter = aOldContextForSelectedNode[6];
				var aFacetFilterForTree = this.oModel.getData().aConfigDetails[indexOfConfig].configData[0].filters;
				aFacetFilterForTree.splice(indexOffacetFilter, 1);
				this.oModel.getData().aConfigDetails[indexOfConfig].configData[0].filters = aFacetFilterForTree;
				aNewContextForSelectedNode = aOldContextForSelectedNode.slice(0, 3);
				newContextForCopiedNode = aNewContextForSelectedNode.join("/");
				break;
			case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CATEGORY:
				this.configEditor.removeCategory(selectedTreeNodeDetails.nodeAPFId);
				indexOfCategory = aOldContextForSelectedNode[6];
				var aCategoryForTree = this.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories;
				aCategoryForTree.splice(indexOfCategory, 1);
				this.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories = aCategoryForTree;
				aNewContextForSelectedNode = aOldContextForSelectedNode.slice(0, 3);
				newContextForCopiedNode = aNewContextForSelectedNode.join("/");
				break;
			case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.NAVIGATIONTARGET:
				this.configEditor.removeNavigationTarget(selectedTreeNodeDetails.nodeAPFId);
				indexOfNavTarget = aOldContextForSelectedNode[6];
				var aNavTargetForTree = this.oModel.getData().aConfigDetails[indexOfConfig].configData[2].navTargets;
				aNavTargetForTree.splice(indexOfNavTarget, 1);
				this.oModel.getData().aConfigDetails[indexOfConfig].configData[2].navTargets = aNavTargetForTree;
				aNewContextForSelectedNode = aOldContextForSelectedNode.slice(0, 3);
				newContextForCopiedNode = aNewContextForSelectedNode.join("/");
				break;
			case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.STEP://Finds the step in all the categories it is present in and deletes it
				var aStepCategories = this.configEditor.getCategoriesForStep(selectedTreeNodeDetails.nodeAPFId);
				var aStepContext = selectedTreeNodeDetails.nodeContext.split("/");
				indexOfConfig = aStepContext[2];
				aStepCategories.forEach(function(stepCategoryId) {
					self.configEditor.removeCategoryStepAssignment(stepCategoryId, selectedTreeNodeDetails.nodeAPFId);
					self.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories.forEach(function(category, categoryIndex) {
						if (category.id === stepCategoryId) {
							self.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories[categoryIndex].steps.forEach(function(step, stepIndex) {
								if (step.id === selectedTreeNodeDetails.nodeAPFId) {
									var aStepForTree = self.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories[categoryIndex].steps;
									aStepForTree.splice(stepIndex, 1);
									self.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories[categoryIndex].steps = aStepForTree;
								}
							});
						}
					});
				});
				aNewContextForSelectedNode = aOldContextForSelectedNode.slice(0, 7);
				newContextForCopiedNode = aNewContextForSelectedNode.join("/");
				break;
			case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.REPRESENTATION://Finds the representation in all the categories it is present in and deletes it
				indexOfCategory = aOldContextForSelectedNode[6];
				indexOfStep = aOldContextForSelectedNode[8];
				var oParentStepIdForRep = this.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories[indexOfCategory].steps[indexOfStep].id;
				var oParentStep = this.configEditor.getStep(oParentStepIdForRep);
				var aParentStepCategories = this.configEditor.getCategoriesForStep(oParentStepIdForRep);
				oParentStep.removeRepresentation(selectedTreeNodeDetails.nodeAPFId);
				aParentStepCategories.forEach(function(stepCategoryId) {
					self.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories.forEach(function(category, categoryIndex) {
						if (category.id === stepCategoryId) {
							self.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories[categoryIndex].steps.forEach(function(step, stepIndex) {
								if (step.id === oParentStepIdForRep) {
									self.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories[categoryIndex].steps[stepIndex].representations.forEach(function(representation, representationIndex) {
										if (representation.id === selectedTreeNodeDetails.nodeAPFId) {
											var aRepForTree = self.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories[categoryIndex].steps[stepIndex].representations;
											aRepForTree.splice(representationIndex, 1);
											self.oModel.getData().aConfigDetails[indexOfConfig].configData[1].categories[categoryIndex].steps[stepIndex].representations = aRepForTree;
										}
									});
								}
							});
						}
					});
				});
				aNewContextForSelectedNode = aOldContextForSelectedNode.slice(0, 9);
				newContextForCopiedNode = aNewContextForSelectedNode.join("/");
				break;
			case sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CONFIGURATION:
				var isNew = false;
				if (selectedTreeNodeDetails.nodeAPFId.indexOf("newConfig") === 0) {
					isNew = true;
				}
				if (!isNew) {
					this.configurationHandler.removeConfiguration(selectedTreeNodeDetails.nodeAPFId, function(id) {
						var noConfigSelected;
						var aConfigForTree = self.oModel.getData().aConfigDetails;
						self._deleteConfigNavTargetTexts(parseInt(indexOfConfig, 10), aConfigForTree.length);//Remove the navigation target texts of the deleted configuration
						var configListExists = (self.configurationHandler.getList().length > 0) ? true : false;
						aConfigForTree.splice(indexOfConfig, 1);
						self.oModel.getData().aConfigDetails = aConfigForTree;
						self.oModel.updateBindings();
						if (selectContext) {
							var context = {
								appId : self.appId,
								configId : self.selectedNode.getBindingContext().getObject().AnalyticalConfiguration
							};
							sap.ui.core.UIComponent.getRouterFor(self).navTo(self.selectedNode.getBindingContext().getObject().type, context, true);
						} else {
							self.clearTitleAndBreadCrumb();
							self.byId("idConfigDetailData").removeAllContent(); //Remove All Previous Stacked Content from DOM
							if (configListExists) {
								noConfigSelected = new sap.m.Label().addStyleClass("noConfigSelected");
								noConfigSelected.setText(self.oCoreApi.getText("noConfigSelected"));
								noConfigSelected.placeAt(self.byId("idConfigDetailData"));
								self.toolbarController.disableCopyDeleteButton();
								self.disableExportButton();
							} else {
								noConfigSelected = new sap.m.Label().addStyleClass("addNewConfig");
								noConfigSelected.setText(self.oCoreApi.getText("addNewConfig"));
								noConfigSelected.placeAt(self.byId("idConfigDetailData"));
								self.toolbarController.disableCopyDeleteButton();
								self.disableExportButton();
							}
						}
					});
				} else {
					var noConfigSelected;
					var aConfigForTree = self.oModel.getData().aConfigDetails;
					aConfigForTree.splice(indexOfConfig, 1);
					self.oModel.getData().aConfigDetails = aConfigForTree;
					self.oModel.updateBindings();
					if (selectContext) {
						var context = {
							appId : self.appId,
							configId : self.selectedNode.getBindingContext().getObject().AnalyticalConfiguration
						};
						sap.ui.core.UIComponent.getRouterFor(self).navTo(self.selectedNode.getBindingContext().getObject().type, context, true);
					} else {
						self.clearTitleAndBreadCrumb();
						self.byId("idConfigDetailData").removeAllContent(); //Remove All Previous Stacked Content from DOM
						var configListExists = (this.configurationHandler.getList().length > 0) ? true : false;
						if (configListExists) {
							noConfigSelected = new sap.m.Label().addStyleClass("noConfigSelected");
							noConfigSelected.setText(self.oCoreApi.getText("noConfigSelected"));
							noConfigSelected.placeAt(self.byId("idConfigDetailData"));
							self.toolbarController.disableCopyDeleteButton();
							self.disableExportButton();
						} else {
							noConfigSelected = new sap.m.Label().addStyleClass("addNewConfig");
							noConfigSelected.setText(self.oCoreApi.getText("addNewConfig"));
							noConfigSelected.placeAt(self.byId("idConfigDetailData"));
							self.toolbarController.disableCopyDeleteButton();
							self.disableExportButton();
						}
					}
				}
				break;
			default:
				break;
		}
		if (selectContext) {
			this.bNavDeletionMode = true; //On deletion selected and previous node are same in order to bypass set this boolean
		}
		if (selectedTreeNodeDetails.nodeObjectType !== sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.CONFIGURATION) {
			this.configEditor.setIsUnsaved();
			this.clearTitleAndBreadCrumb();
			this.byId("idConfigDetailData").removeAllContent();
			newContextForCopiedNode = selectContext || newContextForCopiedNode;
			this.oModel.updateBindings(); // Update the tree to reflect deletion
			this.selectedNode = this.oTreeInstance.getNodeByContext(newContextForCopiedNode);
			this.bProgramaticSelection = false;
			this.oTreeInstance.setSelection(this.selectedNode);
			if (selectContext) {
				this.selectedNode.getBindingContext().getObject().isSelected = true; //On Nav make the selected node to be selected
				this.oModel.updateBindings(); // Update the tree to reflect deletion
			}
		}
		var confirmationDialog = (this.toolbarController.confirmationDialog === undefined) ? false : this.toolbarController.confirmationDialog.isOpen;
		if (confirmationDialog && !selectContext) {
			this.toolbarController.confirmationDialog.close();
		}
	},
	handleNavBack : function() {
		var subViewInstance;
		var self = this;
		if (this.byId("idConfigDetailData").getContent().length >= 1) {
			subViewInstance = (typeof this.byId("idConfigDetailData").getContent()[0].getController === "function") ? this.byId("idConfigDetailData").getContent()[0].getController() : undefined;
		}
		//check if there is any unsaved change
		var navigationHandlerInstance = sap.apf.modeler.ui.utils.navigationHandler.getInstance();
		var isMandatoryFilled;
		if (subViewInstance !== undefined) {
			isMandatoryFilled = typeof subViewInstance.getValidationState === "function" ? subViewInstance.getValidationState.call(subViewInstance) : true;
		} else {
			isMandatoryFilled = true;
		}
		this.bIsSaved = this.configEditor ? this.configEditor.isSaved() : undefined;
		var configListExists = (self.configurationHandler.getList().length > 0) ? true : false;
		var isDirtyState = false;
		var navAppList = function(context) {
			if (this.selectedNode) {//Clear the selectedNode
				this.selectedNode = null;
			}
			this.oModel = new sap.ui.model.json.JSONModel({
				aConfigDetails : []
			});
			this.getView().setModel(this.oModel);
			this.navTargetTextsTable = {};//Clear the cached navigation target texts
			window.history.go(-1);//Navigate back to the previous history set
		};
		if (configListExists) { //if config list exists then perform other checks
			if (!isMandatoryFilled) { //check mandatory state
				navigationHandlerInstance.throwMandatoryPopup(self, {
					yes : function() {
						var navState = self._navMandatoryResetState(self);
						var configList = self.configurationHandler.getList();
						if (navState.bIsSaved === false && configList.length > 0) {
							navigationHandlerInstance.throwLossOfDataPopup(self, {
								yes : function(saveEditor) {
									saveEditor();
									navAppList.call(self);
								},
								no : function() {
									var routeContext = self.getRouteContext(self.oParentNodeDetails);
									self.configurationHandler.resetConfiguration(self.configId);
									if (self.configId.indexOf(sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.ISNEWCONFIG) === 0) { //If new confiuration splice from model before navigating 
										self._navHandleExpandDelete.call(self, {}, {
											configId : self.configId
										}, routeContext);
									}
									navAppList.call(self);
								}
							});
						} else {
							navAppList.call(self);
						}
					}
				});
				isDirtyState = true;
			}
			var bSavedState = (self.bIsSaved === undefined) ? true : self.bIsSaved;
			//On check of saved state and mandatory field filled
			if (!bSavedState && isMandatoryFilled) {
				navigationHandlerInstance.throwLossOfDataPopup(self, {
					yes : function(saveEditor) {
						saveEditor();
						navAppList.call(self);
					},
					no : function() {
						var routeContext = self.getRouteContext(self.oParentNodeDetails);
						self.configurationHandler.resetConfiguration(self.configId);
						if (self.configId.indexOf(sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.ISNEWCONFIG) === 0) { //If new confiuration splice from model before navigating 
							self._navHandleExpandDelete.call(self, {}, {
								configId : self.configId
							}, routeContext);
						}
						navAppList.call(self);
					}
				});
				isDirtyState = true;
			}
		}
		if (!isDirtyState) { //In clean state proceed to app list view
			navAppList.call(self);
		}
	},
	handleSavePress : function() { //Need to be refactored currently comprises of logic to close delete dialog and navigate to different which defeats purpose of its use
		var subViewInstance;
		var self = this;
		this.selectedNode = this.oTreeInstance.getSelection();
		if (this.selectedNode) {
			var sBindingContext = this.selectedNode.getBindingContext().sPath;
			var aContextForSelectedNode = sBindingContext.split("/");
			var indexOfConfig = aContextForSelectedNode[2];
		}
		if (this.byId("idConfigDetailData").getContent().length >= 1) {
			subViewInstance = (typeof this.byId("idConfigDetailData").getContent()[0].getController === "function") ? this.byId("idConfigDetailData").getContent()[0].getController() : undefined;
		}
		var saveAction = function() {
			var self = this;
			self.configEditor.save(function(id, metadata, messageObject) {
				if (messageObject === undefined) {
					self.oModel.getData().aConfigDetails[indexOfConfig].AnalyticalConfiguration = id;
					self.oModel.updateBindings();
					self.oSelectedNodeDetails = self.oTreeInstance.getAPFTreeNodeContext(self.selectedNode);
					self.oParentNodeDetails = self.oTreeInstance.getParentNodeContext(self.oSelectedNodeDetails);
					self.navigateToDifferntView(self.oParentNodeDetails, self.oSelectedNodeDetails, true, false);
					var successMessageOnSave = self.oCoreApi.getText("successOnSave");
					sap.m.MessageToast.show(successMessageOnSave, {
						width : "20em"
					});
				} else {
					var oMessageObject = self.oCoreApi.createMessageObject({
						code : "12000"
					});
					oMessageObject.setPrevious(messageObject);
					self.oCoreApi.putMessage(oMessageObject);
					var errorMessageOnSave = self.oCoreApi.getText("errorOnSave");
					sap.m.MessageToast.show(errorMessageOnSave, {
						width : "20em"
					});
				}
			});
		};
		//check if there is any unsaved change
		var navigationHandlerInstance = sap.apf.modeler.ui.utils.navigationHandler.getInstance();
		var isMandatoryFilled;
		if (subViewInstance !== undefined) {
			isMandatoryFilled = typeof subViewInstance.getValidationState === "function" ? subViewInstance.getValidationState.call(subViewInstance) : true;
		} else {
			isMandatoryFilled = true;
		}
		this.bIsSaved = this.configEditor ? this.configEditor.isSaved() : undefined;
		var isDirtyState = false;
		if (!isMandatoryFilled) { //check mandatory state
			navigationHandlerInstance.throwMandatoryPopup(self, {
				yes : function() {
					self._navMandatoryResetState(self);
					saveAction.call(self);
				}
			});
			isDirtyState = true;
		}
		if (!isDirtyState) {
			saveAction.call(this);
			this.toolbarController.closeDialog();
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#_handleExportButtonPress
	 * @description Handler for press of export button
	 * */
	_handleExportButtonPress : function() {
		var subViewInstance;
		var self = this;
		if (this.byId("idConfigDetailData").getContent().length >= 1) {
			subViewInstance = (typeof this.byId("idConfigDetailData").getContent()[0].getController === "function") ? this.byId("idConfigDetailData").getContent()[0].getController() : undefined;
		}
		//check if there is any unsaved change
		var navigationHandlerInstance = sap.apf.modeler.ui.utils.navigationHandler.getInstance();
		var isMandatoryFilled;
		if (subViewInstance !== undefined) {
			isMandatoryFilled = typeof subViewInstance.getValidationState === "function" ? subViewInstance.getValidationState.call(subViewInstance) : true;
		} else {
			isMandatoryFilled = true;
		}
		this.bIsSaved = this.configEditor ? this.configEditor.isSaved() : undefined;
		var isDirtyState = false;
		var exportAction = function() {
			if (!this.exportConfigurationDialog) {
				this.exportConfigurationDialog = sap.ui.xmlfragment("idExportConfigurationFragment", "sap.apf.modeler.ui.fragment.exportConfiguration", this);
				this.getView().addDependent(this.exportConfigurationDialog);
				this._setExportConfigDialogText();
				this._addStyleClassForExportDialog();
			}
			jQuery.sap.syncStyleClass("sapUiSizeCompact", this.getView(), this.exportConfigurationDialog);
			this.exportConfigurationDialog.open();
		};
		var disableBtnOnNoConfigSelected = function() {
			var noConfigSelected = new sap.m.Label().addStyleClass("noConfigSelected");
			noConfigSelected.setText(self.oCoreApi.getText("noConfigSelected"));
			noConfigSelected.placeAt(self.byId("idConfigDetailData"));
			self.toolbarController.disableCopyDeleteButton();
			self.disableExportButton();
		};
		var onUnsavedState;
		if (!isMandatoryFilled) { //check mandatory state
			navigationHandlerInstance.throwMandatoryPopup(self, {
				yes : function() {
					var navState = self._navMandatoryResetState(self);
					var configListExists = (self.configurationHandler.getList().length > 0) ? true : false;
					if (configListExists) {
						if (!navState.bIsSaved) {
							onUnsavedState(self); //Throw loss of data pop up
						} else {
							if (self.oParentNodeDetails.configurationId.indexOf("newConfig") !== 0) {
								exportAction.call(self);
							}
						}
					} else {
						disableBtnOnNoConfigSelected();
					}
				}
			});
			isDirtyState = true;
		}
		onUnsavedState = function(context) {
			navigationHandlerInstance.throwLossOfDataPopup(context, {
				yes : function(saveEditor) {
					self._navSaveState(function() {
						saveEditor(function(id) {
							if (self.selectedNode) {
								var sBindingContext = self.selectedNode.getBindingContext().sPath;
								var aContextForSelectedNode = sBindingContext.split("/");
								var indexOfConfig = aContextForSelectedNode[2];
							}
							self.oModel.getData().aConfigDetails[indexOfConfig].AnalyticalConfiguration = self.configId;
							self.oModel.updateBindings();
							exportAction.call(self);
						});
					});
				},
				no : function() {
					var routeContext = self.getRouteContext(self.oParentNodeDetails);
					if (self.configId.indexOf(sap.apf.modeler.ui.utils.CONSTANTS.configurationObjectTypes.ISNEWCONFIG) === 0) { //If new confiuration splice from model before navigating 
						self._navHandleExpandDelete.call(self, {}, {
							configId : self.configId
						}, routeContext);
						self.clearTitleAndBreadCrumb();
						self.byId("idConfigDetailData").removeAllContent(); //Remove All Previous Stacked Content from DOM
						var configListExists = (self.configurationHandler.getList().length > 0) ? true : false;
						if (!configListExists) {
							disableBtnOnNoConfigSelected();
						}
					} else {
						self._navConfigResetState(self, function() {
							self._navHandleExpandDelete.call(self, self.oSelectedNodeDetails, routeContext);
							exportAction.call(self);
						});
					}
				}
			});
		};
		//On check of saved state and mandatory field filled
		if (!self.bIsSaved && isMandatoryFilled) {
			onUnsavedState(self);
			isDirtyState = true;
		}
		if (!isDirtyState) {//In clean state proceed to app list view
			exportAction.call(self);
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#_enableExportButton
	 * @description Enables export button
	 * */
	_enableExportButton : function() {
		if (!this.byId("idExportbutton").getEnabled()) {
			this.byId("idExportbutton").setEnabled(true);
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#disableExportButton
	 * @description Disables export button
	 * */
	disableExportButton : function() {
		if (this.byId("idExportbutton").getEnabled()) {
			this.byId("idExportbutton").setEnabled(false);
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#_setExportConfigDialogText
	 * @description Sets text for export dialog
	 * */
	_setExportConfigDialogText : function() {
		sap.ui.core.Fragment.byId("idExportConfigurationFragment", "idExportConfigDialog").setTitle(this.oCoreApi.getText("exportConfig"));
		sap.ui.core.Fragment.byId("idExportConfigurationFragment", "idOpenConfig").setText(this.oCoreApi.getText("openConfig"));
		sap.ui.core.Fragment.byId("idExportConfigurationFragment", "idOpenTextProperty").setText(this.oCoreApi.getText("openTextProperty"));
		sap.ui.core.Fragment.byId("idExportConfigurationFragment", "idCloseButton").setText(this.oCoreApi.getText("close"));
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#_addStyleClassForExportDialog
	 * @description Adds style class to the export configuration dialog
	 * */
	_addStyleClassForExportDialog : function() {
		sap.ui.core.Fragment.byId("idExportConfigurationFragment", "idOpenConfig").addStyleClass("configLink");
		sap.ui.core.Fragment.byId("idExportConfigurationFragment", "idOpenTextProperty").addStyleClass("textPropertyLink");
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#_handleCloseOfExportDialog
	 * @description Handler for close of export configuration dialog
	 * */
	_handleCloseOfExportDialog : function() {
		if (this.exportConfigurationDialog.isOpen()) {
			this.exportConfigurationDialog.close();
		}
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#_handleOpenConfigLinkPress
	 * @description Handler for press of configuration link  in export dialog
	 * */
	_handleOpenConfigLinkPress : function() {
		var self = this;
		this.configurationHandler.exportConfiguration(this.configId, function(configurationString) {
			self._openFile(configurationString);
		});
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#_handleCloseOfExportDialog
	 * @description Handler for press of text properties link  in export dialog
	 * */
	_handleOpenTextsLinkPress : function() {
		var self = this;
		this.configurationHandler.exportConfiguration(this.configId, function(configurationString) {
			var exportedTexts = self.configurationHandler.exportTexts();
			self._openFile(exportedTexts);
		});
	},
	/**
	 * @private
	 * @function
	 * @name sap.apf.modeler.ui.controller.configurationList#_openFile
	 * @description Opens contents of the file in a new read only popup window
	 * */
	_openFile : function(file) {
		var encodedData = encodeURIComponent(file);
		var newTab;
		newTab = window.open("about:blank", "", "_blank");
		newTab.document.write("<textarea rows='50' cols='160'readonly>" + decodeURIComponent(encodedData) + "</textarea>");
	}
});

}; // end of sap/apf/modeler/ui/controller/configurationList.controller.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.instance') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare("sap.apf.ui.instance");
//FIXME: Lazy load print only when required


//FIXME: Load vizhelper within each representation, where it is used.
//jQuery.sap.require('sap.apf.ui.representations.utils.vizHelper');
//FIXME: Lazy load representations when required











/** 
 *@class Ui Component Instance
 *@name sap.apf.ui.Instance
 *@description Creation of new Ui Component Instance
 *@param {object} oInject - Core Instance
 */
sap.apf.ui.Instance = function(oInject) {
	'use strict';
	oInject.uiApi = this;
	var oCoreApi = oInject.oCoreApi;
	var oStartFilterHandler = oInject.oStartFilterHandler;
	var stepContainer;
	var analysisPath;
	var messageHandler;
	var oFacetFilterView;
	var apfLocation = oCoreApi.getUriGenerator().getApfLocation();
	this.oEventCallbacks = {};
	//sap.ui.getCore().loadLibrary('sap.viz');
	jQuery.sap.includeStyleSheet(apfLocation + "resources/css/apfUi.css", "apfCss");
	jQuery.sap.includeStyleSheet(apfLocation + "resources/css/apfPrint.css", "printCss");
	jQuery("#printCss").attr("media", "print"); // @comment : Doesn't Support adding attribute
	/**
	 *@description Getter for Analysis Path layout
	 *@see sap.apf.ui.reuse.view.analysisPath
	 *@returns {analysisPath}
	 */
	this.getAnalysisPath = function() {
		if (analysisPath === undefined) {
			analysisPath = sap.ui.view({
				viewName : "sap.apf.ui.reuse.view.analysisPath",
				type : sap.ui.core.mvc.ViewType.JS,
				viewData : oInject
			});
		}
		return analysisPath;
	};
	/**
	 *@description Getter for Notification Bar
	 *@see sap.apf.ui.reuse.view.messageHandler
	 *@returns {oNotificationView }
	 */
	this.getNotificationBar = function() {
		if (messageHandler === undefined) {
			messageHandler = sap.ui.view({
				viewName : "sap.apf.ui.reuse.view.messageHandler",
				type : sap.ui.core.mvc.ViewType.JS,
				viewData : oInject
			});
		}
		return messageHandler;
	};
	/**
	 *@description Creates a step container to hold representation
	 *@see sap.apf.ui.reuse.view.stepContainer
	 *@returns {stepContainer}
	 */
	this.getStepContainer = function() {
		if (stepContainer === undefined) {
			stepContainer = sap.ui.view({
				viewName : "sap.apf.ui.reuse.view.stepContainer",
				type : sap.ui.core.mvc.ViewType.JS,
				viewData : oInject
			});
		}
		return stepContainer;
	};
	/**
	 *@memberOf sap.apf.Api#addMasterFooterContent
	 *@description Calls the updatePath with proper callback for UI. 
	 * 				It also refreshes the steps either from the active step or 
	 * 				all the steps depending on the boolean value passed.
	 *@param {boolean} 
	 */
	this.selectionChanged = function(bRefreshAllSteps) {
		if (bRefreshAllSteps) {
			this.getAnalysisPath().getController().refresh(0);
		} else {
			var nActiveStepIndex = oCoreApi.getSteps().indexOf(oCoreApi.getActiveStep());
			this.getAnalysisPath().getController().refresh(nActiveStepIndex + 1);
		}
		oCoreApi.updatePath(this.getAnalysisPath().getController().callBackForUpdatePath.bind(this.getAnalysisPath().getController()));
	};
	var applicationLayout;
	/**
	 *@class view
	 *@name view
	 *@memberOf sap.apf.ui
	 *@description holds views for ui
	 */
	/**
	 *@memberOf sap.apf.ui
	 *@description returns app
	 *@return Application
	 */
	var application = new sap.m.App().addStyleClass("sapApf");
	var bIsAppLayoutCreated = false;
	this.createApplicationLayout = function() {
		// Ensure layout page is added only once
		if (!bIsAppLayoutCreated) {
			application.addPage(this.getLayoutView());
			bIsAppLayoutCreated = true;
		}
		return application;
	};
	/**
	 *@memberOf sap.apf.ui
	 *@description Creates a main application layout with the header and main
	 *              view
	 *@return layout view
	 */
	this.getLayoutView = function() {
		if (applicationLayout === undefined) {
			applicationLayout = sap.ui.view({
				viewName : "sap.apf.ui.reuse.view.layout",
				type : sap.ui.core.mvc.ViewType.XML,
				viewData : oInject
			});
		}
		return applicationLayout;
	};
	/**
	 *@memberOf sap.apf.ui
	 *@description adds content to detail footer
	 *@param oControl
	 *            {object} Any valid UI5 control
	 */
	this.addDetailFooterContent = function(oControl) {
		this.getLayoutView().getController().addDetailFooterContentLeft(oControl);
	};
	/**
	 *@memberOf sap.apf.ui
	 *@description adds content to master footer
	 *@param oControl
	 *            {object} Any valid UI5 control
	 */
	this.addMasterFooterContentRight = function(oControl) {
		this.getLayoutView().getController().addMasterFooterContentRight(oControl);
	};
	/**
	 *@memberOf sap.apf.ui
	 *@description registers callback for event callback.
	 *@param fn callback
	 */
	this.setEventCallback = function(sEventType, fnCallback) {
		this.oEventCallbacks[sEventType] = fnCallback;
	};
	/**
	 *@memberOf sap.apf.ui
	 *@returns the registered callback for event callback.
	 */
	this.getEventCallback = function(sEventType) {
		return this.oEventCallbacks[sEventType];
	};
	/**
	 * @name sap.apf.ui#drawFacetFilter
	 * @member of sap.apf.ui
	 * @param {Object} subHeaderInstance - Pass the sub header instance to add the facet filter view item
	 * @description draws facet filter on layout subHeader.
	 */
	this.drawFacetFilter = function(aConfiguredFilters) {
		if (aConfiguredFilters && aConfiguredFilters.length) {
			oFacetFilterView = sap.ui.view({
				viewName : "sap.apf.ui.reuse.view.facetFilter",
				type : sap.ui.core.mvc.ViewType.JS,
				viewData : {
					oCoreApi : oCoreApi,
					oUiApi : this,
					aConfiguredFilters : aConfiguredFilters,
					oStartFilterHandler : oStartFilterHandler
				}
			});
			var subHeaderInstance = this.getLayoutView().byId("subHeader");
			subHeaderInstance.addItem(oFacetFilterView.byId("idAPFFacetFilter"));
		}
	};
	/**
	 * @function
	 * @name sap.apf.ui#contextChanged
	 * @param {boolean} bResetPath - True when new path is triggered.
	 * @memberOf sap.apf.ui
	 * @description It to be called when the path context is changed/updated.
	 * Notifies facet filter controller and application of context change.
	 */
	this.contextChanged = function(bResetPath) {
		if (oFacetFilterView) {
			oFacetFilterView.getController().populateAndSelectFFListValues();
		}
		var fnCallback = this.getEventCallback(sap.apf.core.constants.eventTypes.contextChanged);
		if (typeof fnCallback === "function") {
			var oSerializedFilter;
			if (!bResetPath) {
				oSerializedFilter = oInject.oFilterIdHandler.serialize();
			}
			fnCallback(oSerializedFilter);
		}
	};
	/**
	 * @function
	 * @name sap.apf.ui#getFacetFilterForPrint
	 * @memberOf sap.apf.ui
	 * @description Currently used by printHelper to get formatted filter values.
	 * @returns facet filter control from which selected values(formatted) are used for printing
	 * */
	this.getFacetFilterForPrint = function() {
		if (oFacetFilterView) {
			return oFacetFilterView.byId("idAPFFacetFilter");
		}
	};
	/**
	 * @function
	 * @name sap.apf.ui#handleStartup
	 * @memberOf sap.apf.ui
	 * @description It is called during start of APF.
	 * Gets the configured visible facet filters and draws the facet filter. 
	 * In case the first step is configured for the application it is created. 
	 * In addition the callback for updating the path is also registered.
	 */
	this.handleStartup = function(deferredMode) {
		var that = this;
		var promiseStartup = jQuery.Deferred();
		deferredMode.done(function(mode) {
			var promiseStartFilters = oStartFilterHandler.getStartFilters();
			that.contextChanged();
			promiseStartFilters.done(function(aConfiguredFilters) {
				that.drawFacetFilter(aConfiguredFilters);
				if (mode.navigationMode === "backward") {
					that.getAnalysisPath().getController().bIsBackNavigation = true; //FIXME Boolean to set busy indicator to false
					oCoreApi.updatePath(that.getAnalysisPath().getController().callBackForUpdatePath.bind(that.getAnalysisPath().getController()));
				}
				if (mode.navigationMode === "forward") {
					if (oCoreApi.getStartParameterFacade().getSteps()) {
						var stepId = oCoreApi.getStartParameterFacade().getSteps()[0].stepId;
						var repId = oCoreApi.getStartParameterFacade().getSteps()[0].representationId;
						var callback = that.getAnalysisPath().getController().callBackForUpdatePathAndSetLastStepAsActive.bind(that.getAnalysisPath().getController());
						oCoreApi.createFirstStep(stepId, repId, callback);
					}
				}
				promiseStartup.resolve();
			});
		});
		return promiseStartup.promise();
	};
	/**
	 * @function 
	 * @name sap.apf.ui#destroy
	 * @description Cleanup of instance level objects called on destroy of application
	 */
	this.destroy = function() {
		oFacetFilterView = undefined;
		this.getAnalysisPath().getToolbar().getController().oPrintHelper = undefined;
		this.getAnalysisPath().getCarousel().dndBox = undefined;
	};
};

}; // end of sap/apf/ui/instance.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.utils.facetFilterListHandler') ) {
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
jQuery.sap.declare('sap.apf.ui.utils.facetFilterListHandler');

/**
 * @class Facet filter list handler
 * @name sap.apf.ui.utils.FacetFilterHandler
 * @param {sap.apf.core.instance} oCore Api
 * @param {sap.apf.ui.instance} oUi Api
 * @param {sap.apf.utils.StartFilter} A configured visible filter
 * @param {sap.apf.ui.utils.FacetFilterListConverter} modify the values in the form understandable by the control and vice versa
 * @description Handler for facet filter list controls
 */
sap.apf.ui.utils.FacetFilterListHandler = function(oCoreApi, oUiApi, oConfiguredFilter, oFacetFilterListConverter) {
	"use strict";
	/**
	 * @private
	 * @function
	 * @name sap.apf.ui.utils.FacetFilterHandler#_errorOnNoFacetFilterData
	 * @description Creates a message object for the failed filter and puts the message
	 * */
	function _errorOnNoFacetFilterData() {
		var oMessageObject = oCoreApi.createMessageObject({
			code : "6010",
			aParameters : [ oCoreApi.getTextNotHtmlEncoded(oConfiguredFilter.getLabel()) ]
		});
		oCoreApi.putMessage(oMessageObject);
	}
	/**
	 * @public
	 * @function
	 * @name sap.apf.ui.utils.FacetFilterHandler#getFacetFilterListData
	 * @description Gets filter values, formats the values and converts the values in the form understandable by facet filter list control.
	 * @returns {Deferred} oFFValuePromise
	 * If get values was successful, oFFValuePromise resolved with converted filter values and the facet filter list control 
	 * If get values was successful and was resolved with null or [] or was rejected, reject oFFValuePromise with []
	 * Example resolve when data was returned: 
	 * [ {
			"key" : "20000101",
			"text" : "1/1/2000",
			"selected" : false
		}, {
			"key" : "20000201",
			"text" : "2/1/2000",
			"selected" : false
		} ]
	 * */
	this.getFacetFilterListData = function() {
		var sSelectProperty, oFormatterArgs, aFFValueFormatter, aModifiedFilterValues, aFormattedFilterValues;
		var oFFValuePromise = jQuery.Deferred();
		var aFacetFilterListData = oConfiguredFilter.getValues();
		aFacetFilterListData.then(function(aFilterValues) {
			if (aFilterValues === null || aFilterValues.length === 0) {
				_errorOnNoFacetFilterData();
				oFFValuePromise.reject([]);
			} else {
				sSelectProperty = oConfiguredFilter.getAliasNameIfExistsElsePropertyName() || oConfiguredFilter.getPropertyName();
				oConfiguredFilter.getMetadata().then(function(oPropertyMetadata) {
					oFormatterArgs = {
						oCoreApi : oCoreApi,
						oUiApi : oUiApi,
						aFilterValues : aFilterValues,
						oPropertyMetadata : oPropertyMetadata,
						sSelectProperty : sSelectProperty
					};
					aFFValueFormatter = new sap.apf.ui.utils.FacetFilterValueFormatter();
					aFormattedFilterValues = aFFValueFormatter.getFormattedFFData(oFormatterArgs);
					//Facet filter list converter is used to modify the values in the form understandable by the control
					aModifiedFilterValues = oFacetFilterListConverter.getFFListDataFromFilterValues(aFormattedFilterValues, sSelectProperty);
					oFFValuePromise.resolve(aModifiedFilterValues);
				});
			}
		}, function(oError) {
			_errorOnNoFacetFilterData();
			oFFValuePromise.reject([]);
		});
		return oFFValuePromise.promise();
	};
	/**
	 * @public
	 * @function
	 * @name sap.apf.ui.utils.FacetFilterHandler#getSelectedFFValues
	 * @description Gets selected filter values
	 * @returns {Deferred} oFFSelectedValuePromise
	 * If get selected values was successful, resolved with selected filter values and the index of the facet filter list control
	 * Example : [ "20000201" ] 
	 * */
	this.getSelectedFFValues = function() {
		var oFFSelectedValuePromise = jQuery.Deferred();
		var aFacetFilterSelectedData = oConfiguredFilter.getSelectedValues();
		aFacetFilterSelectedData.then(function(aSelectedFilterValues) {
			oFFSelectedValuePromise.resolve(aSelectedFilterValues);
		}, function(oError) {
			_errorOnNoFacetFilterData();
			//TODO What should happen when getSelectedValues() fails?
			oFFSelectedValuePromise.resolve([]);
		});
		return oFFSelectedValuePromise.promise();
	};
	/**
	 * @public
	 * @function
	 * @name sap.apf.ui.utils.FacetFilterHandler#setSelectedFFValues
	 * @param {Array} Facet filter list selected item keys Example : [ "20000201" , "20000301" ]
	 * @description Sets the selected filter value keys
	 * */
	this.setSelectedFFValues = function(aFacetFilterListSelectedItemKeys) {
		oConfiguredFilter.setSelectedValues(aFacetFilterListSelectedItemKeys);
	};
};
}; // end of sap/apf/ui/utils/facetFilterListHandler.js
if ( !jQuery.sap.isDeclared('sap.apf.utils.externalContext') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2015 SAP AG. All rights reserved
 */

jQuery.sap.declare('sap.apf.utils.externalContext');


/**
 * @private
 * @class External Context
 * @description -
 * @param -
 * @name ExternalContext
 * @returns {sap.apf.utils.ExternalContext}
 */
sap.apf.utils.ExternalContext = function(inject) {
    'use strict';
    
    var deferredContext = jQuery.Deferred();
    var smartBusinessEvaluationId = inject.instance.startParameter.getEvaluationId();
    var xAppStateId = inject.instance.startParameter.getXappStateId();
    var msgH = inject.instance.messageHandler;
    var requestUrl;            
    var configurationProperties;
    var smartBusinessConfig;
    
    this.getCombinedContext = function(){
    	if(smartBusinessEvaluationId) {
        	configurationProperties = inject.functions.getConfigurationProperties();
        	smartBusinessConfig = configurationProperties && configurationProperties.smartBusiness && configurationProperties.smartBusiness.runtime;
        	if(smartBusinessConfig && smartBusinessConfig.service) {
        		requestUrl = smartBusinessConfig.service + "/EVALUATIONS('" + smartBusinessEvaluationId + "')/FILTERS?$format=json";
        		jQuery.ajax({ 
        			url : requestUrl,
        			success : function(data) {
        				var property;
        				var msgH = inject.instance.messageHandler;
        				var orFilter;
        				var andFilter = new sap.apf.core.utils.Filter(msgH);
        				var filtersForConjuction = [];
        				var termsPerProperty = {};
        				data.d.results.forEach(collectTermsPerProperty);
        				for(property in termsPerProperty) {
        					if(termsPerProperty.hasOwnProperty(property)) {
        						orFilter = new sap.apf.core.utils.Filter(msgH);
        						termsPerProperty[property].forEach(combineTermsPerProperty);
        						filtersForConjuction.push(orFilter);
        					}
        				}
        				filtersForConjuction.forEach(combineDifferentProperties);
        				deferredContext.resolve(andFilter);
    				
    					function collectTermsPerProperty(sbFilter){
    						if(!termsPerProperty[sbFilter.NAME]) {
    							termsPerProperty[sbFilter.NAME] = [];
    						} 
    						termsPerProperty[sbFilter.NAME].push(new sap.apf.core.utils.Filter(msgH, sbFilter.NAME, sbFilter.OPERATOR, sbFilter.VALUE_1, sbFilter.VALUE_2));
    					}
    					
    					function combineTermsPerProperty(filter) {
    						orFilter.addOr(filter);
    					}
    					
    					function combineDifferentProperties(filter) {
    						andFilter.addAnd(filter);
    					}
    				},
    				error : function(jqXHR, textStatus, errorThrown) {}
    			});
        	}
        } else if(xAppStateId) { //For the moment, only handling of either SmartBusiness or X-APP-STATE is required and therefore supported
        	sap.ushell.Container.getService("CrossApplicationNavigation").getAppState(inject.instance.component, xAppStateId).done(function(appContainer) {
    			var containerData = appContainer.getData();
    			if (containerData && containerData.sapApfCumulativeFilter) {
    				deferredContext.resolve(sap.apf.core.utils.Filter.transformUI5FilterToInternal(msgH, containerData.sapApfCumulativeFilter));
    			}else{
    				deferredContext.resolve(new sap.apf.core.utils.Filter(msgH));
    			}
    		});
        } else {
            deferredContext.resolve(new sap.apf.core.utils.Filter(msgH));
        }
    	return deferredContext.promise();
    };
};
}; // end of sap/apf/utils/externalContext.js
if ( !jQuery.sap.isDeclared('sap.apf.utils.filter') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

(function () {
    'use strict';

    jQuery.sap.declare('sap.apf.utils.filter');
    
    
    

    /**
     * @public
     * @class Filter object
     * @description It is designed to be used for supplying context information for
     *              the application. In addition, it can be used for exchanging
     *              filter values between the path and the facet filters. This function object supports the top down
     *              construction of filter expressions.
     * @name sap.apf.utils.Filter
     * @param {sap.apf.core.MessageHandler} oMessageHandler
     * @returns {sap.apf.utils.Filter}
     */
    sap.apf.utils.Filter = function (oMessageHandler) {
        

        
        // Private vars
        var oTopAnd;
        var that = this;
        var initialize = function () {
            oTopAnd = new sap.apf.utils.FilterAnd(oMessageHandler, sap.apf.utils.Filter.topAndId);
        };
        // Public functions
        /**
         * @public
         * @function
         * @name sap.apf.utils.Filter#getById
         * @description Returns filter object or expression for a given ID, if exists.
         * @param {string} sId - ID of the object to be returned.
         * @returns {(sap.apf.utils.FilterAnd|sap.apf.utils.FilterOr|sap.apf.utils.FilterExpression|undefined)}
         */
        this.getById = function (sId) {
            if (oTopAnd) {
                if (sId === sap.apf.utils.Filter.topAndId) {
                    return oTopAnd;
                }
                return oTopAnd.getById(sId);
            } 
            return undefined;
        };
        /**
         * @public
         * @description Contains 'filter'
         * @returns {string}
         */
        this.type = "filter";
        /**
         * @public
         * @function
         * @name sap.apf.utils.Filter#getExpressions
         * @description Returns the logical operations and the boolean expressions of a Filter
         *              object as nested arrays for the logical operations and single level objects
         *              for the boolean expressions.
         *              Depending on the nesting level of the arrays the logical operators
         *              for the terms in the arrays alternates between AND and OR.
         *              The array on the highest level has the logical operator AND.
         *              It corresponds to the TopAnd filter term.
         *              Terms in general can be composed of the logical operation AND (see the FilterAnd object)
         *              or OR (see the FilterOr object) or be a boolean expression (see the FilterExpression object).
         *              AND and OR terms are returned as arrays; boolean expressions are returned as objects.
         * @returns {object[]} Array of AND terms, OR terms and expressions.
         */
        this.getExpressions = function () {
            if (oTopAnd) {
                return oTopAnd.getExpressions();
            }
            return [];
        };
        /**
         * @private
         * @function
         * @name sap.apf.utils.Filter#getInternalFilter
         * @description Do not use. Not part of the APF API. Method should only be
         *              called internally by APF.
         * @returns {sap.apf.core.utils.Filter}
         */
        this.getInternalFilter = function () {
            return oTopAnd.getInternalFilter();
        };
        /**
         * @public
         * @function
         * @name sap.apf.utils.Filter#getTopAnd
         * @description Returns the top 'AND' object of the filter.
         * @returns {sap.apf.utils.FilterAnd}
         */
        this.getTopAnd = function () {
            return oTopAnd;
        };

        //fixme provide types for object member below in JSDOC
        /**
         * @public
         * @function
         * @name sap.apf.utils.Filter#updateExpression
         * @description Updates an expression.
         * @param {string} sId ID of expression to be updated
         * @param {object} oExpression Expression object containing the updated properties
         * @param oExpression.id Updated expression ID
         * @param oExpression.name Updated expression name
         * @param oExpression.operator Updated expression operator of type  {sap.apf.core.constants.FilterOperators}
         * @param oExpression.value Updated expression low value
         * @param oExpression.high Updated expression high value
         * @returns undefined
         */
        this.updateExpression = function (sId, oExpression) {
            oMessageHandler.check(sId === oExpression.id,
                "sId differs from oExpression.id");
            var oExpressionObject = this.getById(sId);
            oExpressionObject.update(oExpression);
        };
        /**
         * @public
         * @function
         * @name sap.apf.utils.Filter#updateValue
         * @description Updates a value of an expression object.
         * @param {string} sId ID of the expression object to be updated
         * @param {string} value The new low value for the expression (optional)
         * @param {string} high The new high value for the expression (optional)
         * @returns undefined
         */
        this.updateValue = function (sId, value, high) {
            oMessageHandler.check(sId !== undefined,
                "Filter updateValue: parameter id required");
            oMessageHandler.check(value !== undefined, "Filter updateValue: parameter value is required");
            var oExpressionObject = this.getById(sId);
            oMessageHandler.check(oExpressionObject !== undefined,
                "Filter updateValue: id for expression not valid");
            oExpressionObject.updateValue(value, high);
        };
        /**
         * @private
         * @function
         * @name sap.apf.utils.Filter#serialize
         * @description Do not use. Not part of the APF API. Method should only be called internally by APF.
         * @returns {object}
         */
        this.serialize = function () {
            function getSerializableFilterObject(aCompoundExpressions, oTerm) {
                var oSerializableObject = {
                    id: oTerm.getId(),
                    type: oTerm.type,
                    expressions: [],
                    terms: []
                };
                aCompoundExpressions.forEach(function(compoundExpression,i){
                    if (compoundExpression instanceof Array) {
                        if (oTerm.type === "filterAnd") {
                            oSerializableObject.terms
                                .push(getSerializableFilterObject(
                                    compoundExpression, oTerm
                                        .getAndTerms()[i]));
                        } else if (oTerm.type === "filterOr") {
                            oSerializableObject.terms
                                .push(getSerializableFilterObject(
                                    compoundExpression, oTerm
                                        .getOrTerms()[i]));
                        }
                    } else {
                        oSerializableObject.expressions
                            .push(compoundExpression);
                    }
                });
                return oSerializableObject;
            }

            return getSerializableFilterObject(this.getTopAnd()
                .getExpression(), this.getTopAnd());
        };
        /**
         * @private
         * @function
         * @name sap.apf.utils.Filter#deserialize
         * @description Do not use. Not part of the APF API. Method should only be called internally by APF.
         * @param {object} oSerializableFilter
         * @returns {object}
         */
        this.deserialize = function (oSerializableFilter) {
            oTopAnd = undefined;
            initialize();
            function getDeserializedFilter(oSerializableFilter, oTerm) {
                if (oSerializableFilter.type === "filterAnd"
                    && oSerializableFilter.id !== sap.apf.utils.Filter.topAndId) {
                    oTerm = oTerm.addAnd(oSerializableFilter.id);
                } else if (oSerializableFilter.type === "filterOr"
                    && oSerializableFilter.id !== sap.apf.utils.Filter.topAndId) {
                    oTerm = oTerm.addOr(oSerializableFilter.id);
                }
                oSerializableFilter.expressions.forEach(function(expression){
                	oTerm.addExpression(expression);
                });
                oSerializableFilter.terms.forEach(function(term){
                	getDeserializedFilter(term, oTerm);
                });
            }

            getDeserializedFilter(oSerializableFilter, this.getTopAnd());
            return this;
        };

        /**
         * @private
         * @function
         * @deprecated
         * @name sap.apf.utils.Filter#addAnd
         * @description Deprecated since 1.23.0. Will be discarded with 1.26.0
         */
        this.addAnd = function (sId) {
            jQuery.sap.log.error("Method 'addAnd' is deprecated since 1.23.0", "Will be discarded with 1.26.0.");
        };

        /**
         * @public
         * @function
         * @name sap.apf.utils.Filter#intersectWith
         * @description Build the intersection of the this filter object with the supplied filter(s). The method does not change the "this"-instance.
         * @param args {(...sap.apf.utils.Filter|sap.apf.utils.Filter[])} Single filter object {@link sap.apf.utils.Filter}, a comma separated parameter list of filter objects, or an array of filter objects
         * @returns {sap.apf.utils.Filter} new filter object {@link sap.apf.utils.Filter} for the intersected filters
         */
        this.intersectWith = function (args) {

            var i = 0;
            var aFilter = [];
            var oFilter;
            var oResultFilter = new sap.apf.utils.Filter(oMessageHandler);
            var oResultSerialization = that.serialize(); // Start-result is from "that"-instance
            setNewIds(oResultSerialization);

            //Handle different call types
            switch (arguments.length) {
                case 1:
                    oFilter = arguments[0];
                    if (oFilter instanceof Array) {
                        aFilter = oFilter;
                    } else {
                        aFilter.push(oFilter);
                    }
                    break;
                default:
                    aFilter = Array.prototype.slice.call(arguments, 0);
            }

            aFilter.forEach(
                function (oFilterItem) {
                    oMessageHandler.check((oFilterItem instanceof sap.apf.utils.Filter), "Parameter value is not of type sap.apf.utils.Filter");
                    var oItemSerialization = oFilterItem.serialize();
                    setNewIds(oItemSerialization);
                    //append the items of the second array to the first array:
                    Array.prototype.push.apply(oResultSerialization.expressions, oItemSerialization.expressions);
                    Array.prototype.push.apply(oResultSerialization.terms, oItemSerialization.terms);
                }
            );

            oResultFilter.deserialize(oResultSerialization);
            return oResultFilter;

            function setNewIds(oSerializedFilter) {
                if (oSerializedFilter.id !== sap.apf.utils.Filter.topAndId) {
                    oSerializedFilter.id = '#' + i++ + '#';
                }
                oSerializedFilter.terms.forEach(setNewIds);
            }
        };

        initialize();
        return this;
    }; 
     
    
    function getFilterTerms(path, oFilter) {
		var result = [];
		if (oFilter.filters) {
			oFilter.filters.forEach(function(filter) {
				result = result.concat(getFilterTerms(path, filter));
			});
			
			return result;
		} else if (oFilter.path) {
			if (oFilter.path === path) {
				return [ oFilter];
			} else {
				return [];
			}
		}
	}
    
    /**
     * @public
     * @function
     * @name sap.apf.utils.Filter#createFilterFromSapUi5FilterJSON
     * @description Creates a filter from json format, that comes from selection variant. Apf creates this filter format with
     * method sap.apf.core.utils.Filter#mapToSapUI5FilterExpression. See there for description of the format.
     * @returns {sap.apf.utils.Filter} 
     */
    sap.apf.utils.Filter.createFilterFromSapUi5FilterJSON = function(messageHandler, sapUi5FilterFormat) {
    	var result = new  sap.apf.utils.Filter(messageHandler);

  
    	function addNextLevel(filter, level, format) {
			var filterTerm;
			level++;
			if (format.filters) {
				if (format.and) {
					if (level !== 1) {
						filterTerm = filter.addAnd();
					} else {
						filterTerm = filter;
					}			
				} else {
					filterTerm = filter.addOr();
				}
				format.filters.forEach(function(element) {
					addNextLevel(filterTerm, level, element);
				});		
			} else {
				
				if(format.operator){ //TODO this is an additional check because mapToSapUI5FilterExpression() produces a an empty expression. Fix issue in mapToSapUI5FilterExpression()
					filter.addExpression({
						name : format.path,
						operator : format.operator,
						value : format.value1,
						high : format.value2
					});
				}
			}
		}

    	addNextLevel(result.getTopAnd(), 0, sapUi5FilterFormat);
    	return result;
    };
    
    /**
     * @public
     * @function
     * @name sap.apf.utils.Filter#getOperators
     * @description Convenience function to get the OData operators which are
     *              defined in {sap.apf.core.constants.FilterOperators}.
     * @returns {sap.apf.core.constants.FilterOperators} 
     */
    sap.apf.utils.Filter.getOperators = function () {
        return sap.apf.core.constants.FilterOperators;
    };
    sap.apf.utils.Filter.prototype.getOperators = sap.apf.utils.Filter.getOperators;
    
// Static public vars
    sap.apf.utils.Filter.topAndId = 'filterTopAnd';
    /**
     * @public
     * @class FilterAnd
     * @name sap.apf.utils.FilterAnd
     * @param {sap.apf.core.MessageHandler} oMessageHandler
     * @param {string} sId Identifier for the object
     * @returns {sap.apf.utils.FilterAnd}
     */
    sap.apf.utils.FilterAnd = function (oMessageHandler, sId) {
        // Private vars
        var id = sId;
        var aAndTerms = [];
        /** @type {sap.apf.utils.FilterAnd} */
        var that = this;

        // Private functions
        // Public functions
        /**
         * @public
         * @description Contains 'filter'
         * @returns {string}
         */
        this.type = "filterAnd";
        /**
         * @private
         * @function
         * @name sap.apf.utils.FilterAnd#getById
         * @description Do not use. Not part of the APF API. Method should only be called internally by APF.
         * @param {string} sId ID of the object to be returned
         * @returns {(sap.apf.utils.FilterAnd|sap.apf.utils.FilterOr|sap.apf.utils.FilterExpression|undefined)}
         */
        this.getById = function (sId) {
            if (sId === id) {
                return this;
            }
            var oTerm;
            var i;
            for (i = 0; i < aAndTerms.length; i++) {
                oTerm = aAndTerms[i].getById(sId);
                if (oTerm !== undefined) {
                    return oTerm;
                }
            }
            return undefined;
        };
        /**
         * @private
         * @function
         * @name sap.apf.utils.FilterAnd#getCompoundExpressions
         * @description Do not use. Not part of the APF API. Method should only be
         *              called internally by APF.
         * @returns {object[]}
         */
        this.getExpressions = function () {
            // This method is only used for the topAnd filter expression due to compatibility requirements
            // It could be replaced by filterAnd.getExpression without these requirements.
            var aExpression = [];
            var oTerm;
            var i;
            for (i = 0; i < aAndTerms.length; i++) {
                oTerm = aAndTerms[i].getExpression();
                if (oTerm instanceof Array && oTerm.length === 0) {
                    continue;
                }
                //Compatibility mode with respect to older UI5 shipments
                if (oTerm instanceof Array) { 
                	aExpression.push(oTerm);
                } else { 
                	aExpression.push([oTerm]); 
                } 
            }
            return aExpression;
        };
        /**
         * @private
         * @function
         * @name sap.apf.utils.FilterAnd#getExpressions
         * @description Do not use. Not part of the APF API. Method should only be
         *              called internally by APF.
         * @returns {object[]} Array of expressions
         */
        this.getExpression = function () {
            var aExpression = [];
            var oTerm;
            var i;
            for (i = 0; i < aAndTerms.length; i++) {
                oTerm = aAndTerms[i].getExpression();
                if (oTerm instanceof Array && oTerm.length === 0) {
                    continue;
                }
                aExpression.push(oTerm);
            }
            return aExpression;
        };
        /**
         * @private
         * @function
         * @deprecated
         * @name sap.apf.utils.FilterAnd#getCompoundExpressions
         * @description Do not use. Not part of the APF API. Method should only be
         *              called internally by APF.
         * @returns {object[]} Array of expressions
         */
        this.getCompoundExpressions = function () {
            jQuery.sap.log.error("Method 'getExpressions' is deprecated since 1.23.0", "Will be discarded with 1.26.0.");
        };
        /**
         * @public
         * @function
         * @name sap.apf.utils.FilterAnd#getId
         * @description Returns ID of this filter object.
         * @returns {string}
         */
        this.getId = function () {
            return sId;
        };
        /**
         * @private
         * @function
         * @name sap.apf.utils.FilterAnd#getInternalFilter
         * @description Do not use. Not part of the APF API. Method should only be
         *              called internally by APF.
         * @returns {sap.apf.core.utils.Filter}
         */
        this.getInternalFilter = function () {
            var oFilter = new sap.apf.core.utils.Filter(oMessageHandler);
            var len = aAndTerms.length;
            var i;
            for (i = 0; i < len; i++) {
                oFilter.addAnd(aAndTerms[i].getInternalFilter());
            }
            return oFilter;
        };
        /**
         * @private
         * @function
         * @deprecated
         * @name sap.apf.utils.FilterAnd#addAndTerm
         * @description Do not use. Not part of the APF API. Method should only be
         *              called internally by APF.
         * @returns undefined
         */
        this.addAndTerm = function (oTerm) {
            jQuery.sap.log.error("Method 'addAndTerm' is deprecated since 1.23.0", "Will be discarded with 1.26.0.");
        };
        /**
         * @private
         * @function
         * @name sap.apf.utils.FilterAnd#getAndTerms
         * @description Do not use. Not part of the APF API. Method should only be called internally by APF.
         * @returns {array}
         */
        this.getAndTerms = function () {
            return aAndTerms;
        };
        /**
         * @public
         * @function
         * @name sap.apf.utils.FilterAnd#addOr
         * @description Adds an object of type {sap.apf.utils.FilterOr}.
         * @param {string} sId Identifier for the object to be added.
         * @returns {sap.apf.utils.FilterOr}
         */
        this.addOr = function (sId) {
            oMessageHandler.check(
                (sId === undefined || this.getById(sId) === undefined),
                "Filter includes duplicated identifiers (IDs)");
            var or = new sap.apf.utils.FilterOr(oMessageHandler, sId, that);
            aAndTerms.push(or);
            return or;
        };

        /**
         * @public
         * @function
         * @name sap.apf.utils.FilterAnd#addExpression
         * @description Adds an expression object to this filter.
         * @param {object} oExpression Expression object
         * @param oExpression.id Expression ID
         * @param oExpression.name Expression name
         * @param oExpression.operator Expression operator of type  {sap.apf.core.constants.FilterOperators}
         * @param oExpression.value Expression value
         * @returns {sap.apf.utils.FilterAnd} this to allow method chaining
         */
        this.addExpression = function (oExpression) {
            if (oExpression.operator.length == 2) {
                oExpression.operator = oExpression.operator.toUpperCase();
            }

            oMessageHandler.check((oExpression.id === undefined || this
                    .getById(oExpression.id) === undefined),
                "Filter includes duplicated identifiers (IDs)");
            oMessageHandler.check((oExpression.operator !== undefined),
                "sap.apf.utils.Filter oExpression.operator undefined");
            oMessageHandler.check((jQuery.inArray(oExpression.operator,
                    sap.apf.core.constants.aSelectOpt) > -1),
                    "sap.apf.core.utils.Filter oExpression.operator "
                    + oExpression.operator + " not supported");
            aAndTerms.push(new sap.apf.utils.FilterExpression(oMessageHandler,
                oExpression));
            return this;
        };
    };
    /**
     * @public
     * @class FilterOr
     * @name sap.apf.utils.FilterOr
     * @param {sap.apf.core.MessageHandler} oMessageHandler
     * @param {string} sId Identifier for the object
     * @param {sap.apf.utils.FilterAnd} oAnd Parent object
     * @returns {sap.apf.utils.FilterOr}
     */
    sap.apf.utils.FilterOr = function (oMessageHandler, sId, oAnd) {
        // Private vars
        var id = sId;
        var aOrTerms = [];
        var oAndObject = oAnd;
        // Public functions
        /**
         * @description Contains 'filter'
         * @returns {string}
         */
        this.type = "filterOr";
        /**
         * @private
         * @function
         * @name sap.apf.utils.FilterOr#getById
         * @description Do not use. Not part of the APF API. Method should only be called internally by APF.
         * @param {string} sId ID of the object to be returned
         * @returns {(sap.apf.utils.FilterAnd|sap.apf.utils.FilterOr|sap.apf.utils.FilterExpression|undefined)}
         */
        this.getById = function (sId) {
            if (sId === id) {
                return this;
            }
            var oTerm;
            for (var i = 0; i < aOrTerms.length; i++) {
                oTerm = aOrTerms[i].getById(sId);
                if (oTerm !== undefined) {
                    return oTerm;
                }
            }
            return undefined;
        };
        /**
         * @private
         * @function
         * @name sap.apf.utils.FilterOr#getExpression
         * @description Do not use. Not part of the APF API. Method should only be called internally by APF.
         * @returns {object[]} array of expressions
         */
        this.getExpression = function () {
            var aExpression = [];
            var oTerm;
            for (var i = 0; i < aOrTerms.length; i++) {
                oTerm = aOrTerms[i].getExpression();
                if (oTerm instanceof Array && oTerm.length === 0) {
                    continue;
                }
                aExpression.push(oTerm);
            }
            return aExpression;
        };
        /**
         * @public
         * @function
         * @name sap.apf.utils.FilterOr#getId
         * @description Retrieves an ID of the term.
         * @returns {string} ID of the term.
         */
        this.getId = function () {
            return sId;
        };
        /**
         * @private
         * @function
         * @name sap.apf.utils.FilterOr#getInternalFilter
         * @description Do not use. Not part of the APF API. Method should only be called internally by APF.
         * @returns {sap.apf.core.utils.Filter}
         */
        this.getInternalFilter = function () {
            var oFilter = new sap.apf.core.utils.Filter(oMessageHandler);
            for (var i = 0; i < aOrTerms.length; i++) {
                oFilter.addOr(aOrTerms[i].getInternalFilter());
            }
            return oFilter;
        };
        /**
         * @private
         * @function
         * @name sap.apf.utils.FilterOr#getAndObject
         * @description Do not use. Not part of the APF API. Method should only be called internally by APF.
         * @returns {sap.apf.utils.FilterAnd}
         */
        this.getAndObject = function () {
            return oAndObject;
        };
        /**
         * @private
         * @function
         * @deprecated
         * @name sap.apf.utils.FilterOr#addOrTerm
         * @description Do not use. Not part of the APF API. Method should only be
         *              called internally by APF.
         * @returns undefined
         */
        this.addOrTerm = function (oTerm) {
            jQuery.sap.log.error("Method 'addOr' is deprecated since 1.23.0", "Will be discarded with 1.26.0.");
        };
        /**
         * @private
         * @function
         * @name sap.apf.utils.FilterOr#getOrTerms
         * @description Do not use. Not part of the APF API. Method should only be
         *              called internally by APF.
         * @returns {array}
         */
        this.getOrTerms = function () {
            return aOrTerms;
        };
        /**
         * @public
         * @function
         * @name sap.apf.utils.FilterOr#addExpression
         * @description Adds an expression object to this filter.
         * @param {object} oExpression Expression object
         * @param oExpression.id Expression ID
         * @param oExpression.name Expression name
         * @param oExpression.operator Expression operator of type  {sap.apf.core.constants.FilterOperators}
         * @param oExpression.value Expression value
         * @returns {sap.apf.utils.FilterOr} this to allow method chaining
         */
        this.addExpression = function (oExpression) {
            if (oExpression.operator.length == 2) {
                oExpression.operator = oExpression.operator.toUpperCase();
            }
            oMessageHandler.check((oExpression.id === undefined || this
                    .getAndObject().getById(oExpression.id) === undefined),
                "Filter includes duplicated identifiers (IDs)");
            oMessageHandler.check((oExpression.operator !== undefined),
                "sap.apf.utils.Filter oExpression.operator undefined");
            oMessageHandler.check((jQuery.inArray(oExpression.operator,
                    sap.apf.core.constants.aSelectOpt) > -1),
                    "sap.apf.core.utils.Filter oExpression.operator "
                    + oExpression.operator + " not supported");
            aOrTerms.push(new sap.apf.utils.FilterExpression(oMessageHandler,
                oExpression));
            return this;
        };
        /**
         * @public
         * @function
         * @name sap.apf.utils.FilterOr#addAnd
         * @description Adds an object of type {@link sap.apf.utils.FilterAnd}.
         * @param {string} sId Identifier for the object to be added.
         * @returns {sap.apf.utils.FilterAnd}
         */
        this.addAnd = function (sId) {
            oMessageHandler.check(
                (sId === undefined || this.getById(sId) === undefined),
                "Filter includes duplicated identifiers (IDs)");
            var and = new sap.apf.utils.FilterAnd(oMessageHandler, sId);
            aOrTerms.push(and);
            return and;
        };
    };
    /**
     * @public
     * @class Filter expression
     * @name sap.apf.utils.FilterExpression
     * @param {sap.apf.core.MessageHandler} oMessageHandler
     * @param {object} oExpression Expression object
     * @param oExpression.id Expression ID
     * @param oExpression.name Expression name
     * @param oExpression.operator Expression operator of type  {sap.apf.core.constants.FilterOperators}
     * @param oExpression.value Expression value
     * @param oExpression.high Expression high value
     * @returns {sap.apf.utils.FilterExpression}
     */
    sap.apf.utils.FilterExpression = function (oMessageHandler, oExpression) {
        // Checks
        checkHighValue(oExpression.high, oExpression.operator);
        // Private vars
        var sId = oExpression.id;
        var sName = oExpression.name;
        var sOperator = oExpression.operator;
        var sValue = oExpression.value;
        var sHighValue = oExpression.high;
        // Public functions
        /**
         * @private
         * @function
         * @name sap.apf.utils.FilterExpression#getById
         * @description Do not use. Not part of the APF API. Method should only be called internally by APF.
         * @param {string} id
         * @returns {sap.apf.utils.FilterExpression}
         */
        this.getById = function (id) {
            if (sId === id) {
                return this;
            } 
            return undefined;
        };
        /**
         * @private
         * @function
         * @name sap.apf.utils.FilterExpression#getExpression
         * @description Do not use. Not part of the APF API. Method should only be called internally by APF.
         * @returns {object}
         */
        this.getExpression = function () {
            if (!sOperator || sOperator !== sap.apf.core.constants.FilterOperators.BT) {
                return {
                    name: sName,
                    operator: sOperator,
                    value: sValue
                };
            } 
            return {
                    name: sName,
                    operator: sOperator,
                    value: sValue,
                    high: sHighValue
                };
        };
        /**
         * @private
         * @function
         * @name sap.apf.utils.FilterExpression#getInternalFilter
         * @description Do not use. Not part of the APF API. Method should only be called internally by APF.
         * @returns {sap.apf.core.utils.Filter}
         */
        this.getInternalFilter = function () {
            return new sap.apf.core.utils.Filter(oMessageHandler, sName, sOperator,
                sValue, sHighValue);
        };
        /**
         * @private
         * @function
         * @name sap.apf.utils.FilterExpression#update
         * @description Do not use. Not part of the APF API. Method should only be
         *              called internally by APF.
         * @param {object} oExpression Expression object
         * @param oExpression.id Expression ID
         * @param oExpression.name Expression name
         * @param oExpression.operator Expression operator of type  {sap.apf.core.constants.FilterOperators}
         * @param oExpression.value Expression low value
         * @param oExpression.high Expression high value
         * @returns undefined
         */
        this.update = function (oExpression) {
            checkHighValue(oExpression.high, oExpression.operator);
            sName = oExpression.name;
            sOperator = oExpression.operator;
            sValue = oExpression.value;
            sHighValue = oExpression.high;
        };
        /**
         * @private
         * @function
         * @name sap.apf.utils.FilterExpression#updateValue
         * @description Do not use. Not part of the APF API. Method should only be
         *              called internally by APF.
         * @param {string} value The new value for the expression
         * @param {string} high The new high value for the expression
         * @returns undefined
         */
        this.updateValue = function (value, high) {
            sValue = value;
            if (high !== undefined) { sHighValue = high; }
            checkHighValue(sHighValue, sOperator);
        };

        function checkHighValue(high, operator) {
            if (!operator) { return; }
            if (operator === sap.apf.core.constants.FilterOperators.BT && (high === null || high === undefined)) {
                oMessageHandler
                    .check(false, "sap.apf.utils.FilterExpression: High value needed for 'between' selection");
            } else if (operator !== sap.apf.core.constants.FilterOperators.BT && (high !== null && high !== undefined)) {
                oMessageHandler
                    .check(false, "sap.apf.utils.FilterExpression: High value only needed for 'between' selection");
            }

        }
    };

}());

}; // end of sap/apf/utils/filter.js
if ( !jQuery.sap.isDeclared('sap.apf.utils.startFilterHandler') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare('sap.apf.utils.startFilterHandler');



/**
 * @private
 * @class Start filter handler
 * @description -
 * @param -
 * @name sap.apf.utils.StartFilterHandler
 * @returns {sap.apf.utils.startFilterHandler}
 */
sap.apf.utils.StartFilterHandler = function(inject) {
    'use strict';
    var startFilters = [{isLevel : true}];
    var StartFilter = (inject && inject.constructor && inject.constructor.StartFilter) || sap.apf.utils.StartFilter;
    var restrictionsSetByApplication = {};
    var restrictionsInitiallySetByApplication = {};
    var msgH = inject.instance.messageHandler;
    var deferredStartFilters = jQuery.Deferred();
    var isInitialized = false;

	this.getStartFilters = function() {
		if (!isInitialized) {
			isInitialized = true;
			inject.functions.getCombinedContext().done(function(externalContextFilter) {
				var facetFilterConfigurations = inject.functions.getFacetFilterConfigurations();
				var externalContextProperties = externalContextFilter.getProperties();
				var numberOfExternalContextProperties = externalContextProperties.length; 
				var filterPropertyToBeMerged = null;

				facetFilterConfigurations.forEach(function(config) {
					for(var i = 0; i < numberOfExternalContextProperties; i++) {
						if (config.property === externalContextProperties[i]) {
							filterPropertyToBeMerged = externalContextProperties[i];
							break;
						}
					}
					if (filterPropertyToBeMerged) {
						startFilters.push(new StartFilter(inject, config, createContextForStartFilter(externalContextFilter, filterPropertyToBeMerged)));
						//Remove external context property if it has matched a configured property
						externalContextProperties.splice(externalContextProperties.indexOf(filterPropertyToBeMerged), 1);
						filterPropertyToBeMerged = null;
					} else {
						startFilters.push(new StartFilter(inject, config));
					}
				});
				//Create start filters for external context properties that have not matched a configured property 
				externalContextProperties.forEach(function(property) {
				    startFilters.unshift(new StartFilter(inject, {
				        property : property,
				        invisible : true,
				        multiSelection : true
				    }, createContextForStartFilter(externalContextFilter, property)));
				});
				setRestrictionsOnConfiguredFilters();
				deferredStartFilters.resolve(getVisibleStartFilters());
			});
		}
		return deferredStartFilters.promise();
	};
    /**
     * @description Expects an internal filter instance containing disjoint equality filter terms for a single property only.
     * If no start filter for the property exists the method creates a new instance else it updates an existing instance and merges existing values.
     * In both cases the instance provides the filter values in the value list and selected value list. 
     * @param {sap.apf.utils.Filter} filter Instance of external filter
     * @returns undefined
     */    
    this.setRestrictionByProperty = function(filter) {
        var internalFilter = filter.getInternalFilter();
        var filterValues = getListFromFilter(internalFilter);
        var propertyName = internalFilter.getProperties()[0];
        var isNewStartFilterRequired = true;
        
        getStartFilters().forEach(function(startFilter) {
            if(startFilter.getPropertyName() === propertyName) {
                startFilter.setSelectedValues(filterValues);
                isNewStartFilterRequired = false;
            }
        });
        if(isNewStartFilterRequired) {
            startFilters.unshift(new StartFilter(inject, {multiSelection : true, property : propertyName, invisible : true}, filterValues));
        }
        setRestrictionsOnConfiguredFilters();
        
        restrictionsSetByApplication[propertyName] = filter;
        if(!restrictionsInitiallySetByApplication[propertyName])  {
        	restrictionsInitiallySetByApplication[propertyName] = filter.serialize(); 
        } 
    };
    
    this.getRestrictionByProperty = function(propertyName) {
        if(restrictionsSetByApplication[propertyName]) {
            return restrictionsSetByApplication[propertyName];
        } 
        return new sap.apf.utils.Filter(msgH);
    };
    
    this.getCumulativeFilter = function() {
        var deferred = jQuery.Deferred();
        var result = new sap.apf.core.utils.Filter(msgH);
        var disjointTerms;
        var numberOfStartFilters;
        deferredStartFilters.done(function() {
            numberOfStartFilters = getStartFilters().length;
            
            if(numberOfStartFilters == 0){
            	deferred.resolve(new sap.apf.core.utils.Filter(msgH));
            }
            
            getStartFilters().forEach(function(filter) {
                filter.getSelectedValues().done(function(values) {
                	disjointTerms = new sap.apf.core.utils.Filter(msgH); 
                	if(values && values.type === 'internalFilter'){
                		disjointTerms = values;
                	} 
                	if(jQuery.isArray(values)){
                		values.forEach(function(value) {
                			disjointTerms.addOr(new sap.apf.core.utils.Filter(msgH, filter.getPropertyName(), 'eq', value));
                		});
                	}
                	result.addAnd(disjointTerms);
                    resolveIfAllSelectedValuesAvailable();
                });
            });
        });
    	return deferred.promise();

    	function resolveIfAllSelectedValuesAvailable(){
    	    numberOfStartFilters--;
    	    if(numberOfStartFilters == 0){
    	        deferred.resolve(result); 
    	    }
    	}
    };
    
    this.serialize = function() {
    	var deferred = jQuery.Deferred();
    	var numberOfStartFilters;
    	var restrictedProperty;
    	var serializedStartFilterHandler = {};
    	serializedStartFilterHandler.startFilters = [];
    	serializedStartFilterHandler.restrictionsSetByApplication = {};

    	for(restrictedProperty in restrictionsSetByApplication) {
    		serializedStartFilterHandler.restrictionsSetByApplication[restrictedProperty] = restrictionsSetByApplication[restrictedProperty].serialize();
    	}
    	
    	numberOfStartFilters = getStartFilters().length;
    	if(getStartFilters().length > 0){
    		getStartFilters().forEach(function(startFilter){
    			startFilter.serialize().done(function(serializedStartFilter){
    				serializedStartFilterHandler.startFilters.push(serializedStartFilter);
    				numberOfStartFilters--;
    				if(numberOfStartFilters == 0){
    					deferred.resolve(serializedStartFilterHandler);
    				}
    			});
    		});
    	} else {
    		deferred.resolve(serializedStartFilterHandler);
    	}
    	
    	return deferred.promise();
    };
    
    this.deserialize = function(serializedStartFilterHandler) {
    	var startFilters = getStartFilters();
    	var restrictedProperty;
    	var externalFilter;
    	restrictionsSetByApplication = {};
    	
    	serializedStartFilterHandler.startFilters.forEach(function(serializedStartFilter){
    		for(var i = 0, len = startFilters.length; i < len; i++){
    			if(serializedStartFilter.propertyName === startFilters[i].getPropertyName()){
    				startFilters[i].deserialize(serializedStartFilter);
    			}
    		}
    	});
    	
    	for(restrictedProperty in serializedStartFilterHandler.restrictionsSetByApplication) {
    	    externalFilter = new sap.apf.utils.Filter(msgH);
    	    externalFilter.deserialize(serializedStartFilterHandler.restrictionsSetByApplication[restrictedProperty]);
    	    restrictionsSetByApplication[restrictedProperty] = externalFilter;
    	}
    };
    	
    this.resetAll = function() {
        var initiallyRestrictedProperty;
    	getStartFilters().forEach(function(startFilter) {
    		startFilter.reset();
    	});
    	restrictionsSetByApplication = {};
    	for(initiallyRestrictedProperty in restrictionsInitiallySetByApplication) {
    	    restrictionsSetByApplication[initiallyRestrictedProperty] = new sap.apf.utils.Filter(msgH).deserialize(restrictionsInitiallySetByApplication[initiallyRestrictedProperty]); 
    	}
    };
    
    this.resetVisibleStartFilters = function(){
    	getVisibleStartFilters().forEach(function(startFilter) {
    		startFilter.reset();
    	});
    };

    function getListFromFilter(filter) {
        var result = [];
        filter.getFilterTerms().forEach(function(term) {
            result.push(term.getValue());
        });
        return result;
    }
    
    function createContextForStartFilter(filter, property) {
        var result = [];
        var termsForProperty = filter.getFilterTermsForProperty(property);
        var reducedFilter = filter.reduceToProperty(property);
        
        if(reducedFilter.toUrlParam().indexOf('%20and%20') > -1){
        	return reducedFilter;
        }
        
        for(var i = 0, len = termsForProperty.length; i < len; i++){
            if(termsForProperty[i].getOp() !== 'EQ'){
                return reducedFilter; 
            }
            result.push(termsForProperty[i].getValue());
        }
        return result;
    }
    
    function getVisibleStartFilters(){
    	var visibleStartFilters = [];
        getStartFilters().forEach(function(startFilter) {
    	    if(startFilter.isVisible()) {
    	        visibleStartFilters.push(startFilter);
    	    }
    	});
        return visibleStartFilters;
    }
    
    function getStartFilters(){
    	var realStartFilters = [];
    	startFilters.forEach(function(filter){
    		if(!filter.isLevel){
    			realStartFilters.push(filter);
    		}
    	});
    	return realStartFilters;
    }
    
    function getMinusOneLevelFilters(){
    	var minusOneLevelFilters = [];
    	for(var i = 0, len = startFilters.length; i < len; i++) {
    		if(!startFilters[i].isLevel) {
    			minusOneLevelFilters.push(startFilters[i]);
    		} else {
    			break;
    		}
    	}
    	return minusOneLevelFilters;
    }
    
    function setRestrictionsOnConfiguredFilters(){
        setRestrictions(buildRestrictiveFilters(getMinusOneLevelFilters()));
        
        function buildRestrictiveFilters(filters){
        	var restrictiveFilter = new sap.apf.core.utils.Filter(msgH);
        	filters.forEach(function(startFilter) {
            	var filter = new sap.apf.core.utils.Filter(msgH);
            	startFilter.getSelectedValues().done(function(values){ //TODO Enhance: logic not sufficient once filter levels are introduced. Currently used promises from minus-one-level are synchronously resolved. This will not hold true for configured filter resolution requests. 
            		if(values.type === 'internalFilter'){
            			filter.addOr(values);
            		}else{
            			values.forEach(function(value){
            				filter.addOr(startFilter.getPropertyName(), 'eq', value);
            			});
            		}
            	});
            	restrictiveFilter.addAnd(filter);
            });
        	return restrictiveFilter;
        }
        
        function setRestrictions(restrictiveFilter){
        	var isLevelReached = false;
            startFilters.forEach(function(filter) {
            	if(filter.isLevel) {
            		isLevelReached = true;
            		return;
            	}
            	if(isLevelReached) {
            		filter.setRestriction(restrictiveFilter);
            	}
            });
        }
	}
};
}; // end of sap/apf/utils/startFilterHandler.js
if ( !jQuery.sap.isDeclared('sap.apf.core.binding') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.core.binding");






/** 
 * @class The binding manages the different representations, that are assigned to a step.
 * @param {sap.apf.core.Instance} oInject.coreApi provides the core api.
 * @param {sap.apf.core.MessageHandler} oInject.messageHandler provides the message handler.
 * @param {object} oBindingConfig The configuration object of the binding from the analytical configuration.
 * @param oBindingConfig.oTitle Title of binding
 * @param oBindingConfig.oLongTitle Longtitle of binding
 * @param oBindingConfig.representations Configuration of the representations
 * @param oBindingConfig.requiredFilters {string[]} required filters - Array with properties, that define the filter properties, that shall be returned.
 * @param {sap.apf.core.ConfigurationFactory} oFactory reference 
 * @param {string} [sRepresentationId] the representation, that shall be selected
 */
sap.apf.core.Binding = function(oInject, oBindingConfig, oFactory, sRepresentationId) {
    var that = this;
	this.type = "binding";
	var nSelectedRepresentation = 0;
	var aRepresentationInstances = [];
	var aRepresentationInfo = [];
	var aCachedData = [];
	var oCachedMetadata;
	var oStartFilter;

	this.oTitle = oBindingConfig.oTitle;
	this.oLongTitle = oBindingConfig.oLongTitle;
	var aRequiredFilters = oBindingConfig.requiredFilters;

	
	this.destroy = function() {
		
		aRepresentationInstances.forEach(function(oRepresentation) {
			if (oRepresentation && oRepresentation.destroy) {
				oRepresentation.destroy();
			}
		});
		aRepresentationInstances = [];
		aRepresentationInfo = [];
		aCachedData = [];
		oCachedMetadata = undefined;
		oStartFilter = undefined;
	};
	/**
	 * @see sap.apf.core.Step#getFilter
	 */
	this.getFilter = function() {
		var oSelectedRepresentation = this.getSelectedRepresentation();
		var methodTypes = sap.apf.core.constants.filterMethodTypes;
		var aIndices = [];

		if (oSelectedRepresentation.getFilterMethodType() === methodTypes.filter) {
			var oFilterFromRepresentation = oSelectedRepresentation.getFilter().getInternalFilter();
			if (oStartFilter) {
				return oStartFilter.getInternalFilter().overwriteWith(oFilterFromRepresentation);
			} else {
				return oFilterFromRepresentation;
			}
		}
		if (oSelectedRepresentation.getSelectionAsArray) {
			aIndices = oSelectedRepresentation.getSelectionAsArray();
		} else {
			return new sap.apf.core.utils.Filter(oInject.messageHandler);
		}
		// CONTRACT: undefined = empty selection corresponds to empty rectangle in a scatter
		// following steps should get no data
		if (aIndices === undefined) {
			return sap.apf.core.utils.Filter.createEmptyFilter(oInject.messageHandler, aRequiredFilters);
		}
		// CONTRACT: nothing selected also means, that nothing is excluded -> all shall be taken over to next selection
		if (aIndices.length === aCachedData.length || aIndices.length === 0) {
			return new sap.apf.core.utils.Filter(oInject.messageHandler);
		}
		// DEFAULT: 
		return sap.apf.core.utils.Filter.createFromArray(oInject.messageHandler, aRequiredFilters, aCachedData, aIndices);
	};

	/**
	 * @description Request option like $top, $skip and $orderby are returned by the actual representation. This
	 * is required to create the OData request.
	 */
	this.getRequestOptions = function() {
		if (jQuery.isFunction(this.getSelectedRepresentation().getRequestOptions)) {
			return this.getSelectedRepresentation().getRequestOptions();
		}
		return {};
	};

	function isRepresentationForInitialStep(oRepresentation) {
		return oRepresentation.getFilterMethodType() === sap.apf.core.constants.filterMethodTypes.startFilter;
	}
	/**
	 * @see sap.apf.core.Step#setFilter
	 */
	this.setFilter = function(oFilter) {
		var oRepresentation = this.getSelectedRepresentation();
		oStartFilter = oFilter;
		if (isRepresentationForInitialStep(oRepresentation)) {
			oRepresentation.setFilter(oStartFilter);
		}
	};
	/**
	 * @see sap.apf.core.Step#setData
	 */
	this.setData = function(oDataResponse) {
		oInject.messageHandler.check(oDataResponse !== undefined, "aDataResponse is undefined (binding function setData)");
		aCachedData = oDataResponse.data;
		oCachedMetadata = oDataResponse.metadata;
		this.getSelectedRepresentation().setData(oDataResponse.data, oDataResponse.metadata);
	};

	/**
	 * @see sap.apf.core.Step#getRepresentationInfo
	 */
	this.getRepresentationInfo = function() {
		var aReprInfo = jQuery.extend(true, [], aRepresentationInfo); // clone deep
		for( var i = 0; i < aReprInfo.length; i++) {
			delete aReprInfo[i].id;
			delete aReprInfo[i].type;
			delete aReprInfo[i].constructor;
		}
		return aReprInfo;
	};

	/**
	 * @see sap.apf.core.Step#getSelectedRepresentationInfo
	 */
	this.getSelectedRepresentationInfo = function() {
		oInject.messageHandler.check(nSelectedRepresentation >= 0  && nSelectedRepresentation < aRepresentationInfo.length, "index in array boundaries");
		
		var oRepType = jQuery.extend(true, {}, aRepresentationInfo[nSelectedRepresentation]);
		delete oRepType.id;
		delete oRepType.type;
		delete oRepType.constructor;
		return oRepType;
	};

	/**
	 * @see sap.apf.core.Step#getSelectedRepresentation
	 */
	this.getSelectedRepresentation = function() {
		oInject.messageHandler.check(nSelectedRepresentation >= 0 && nSelectedRepresentation < aRepresentationInstances.length, "selectedRepresentation in array boundaries");
		return aRepresentationInstances[nSelectedRepresentation];
	};

	/**
	 * @see sap.apf.core.Step#setSelectedRepresentation
	 */
	this.setSelectedRepresentation = function(sRepresentationId) {
		oInject.messageHandler.check(typeof sRepresentationId === "string", "setSelectedRepresentation() - sRepresentationId missing");
		var that = this;
		var oCurrentInstance = this.getSelectedRepresentation();
		var oSwitchParameters = determineSwitchParameters(sRepresentationId, oBindingConfig.representations);
		var oNewInstance = setNewInstance(oSwitchParameters);

		nSelectedRepresentation = oSwitchParameters.index;
		if (aCachedData !== undefined && oCachedMetadata !== undefined) {
			oNewInstance.setData(aCachedData, oCachedMetadata);
		}
		if (oNewInstance.adoptSelection) {
			oNewInstance.adoptSelection(oCurrentInstance);
		}

		function determineSwitchParameters(sRepresentationId, aRepresentationConfig) {
			for( var i = 0; i < aRepresentationConfig.length; i++) {
				if (sRepresentationId === aRepresentationConfig[i].id) {
					return {
						config : aRepresentationConfig[i],
						constructor : oFactory.getConfigurationById(aRepresentationConfig[i].representationTypeId).constructor,
						index : i
					};
				}
			}
			oInject.messageHandler.check(false, "Representation config not found");
		}
		function setNewInstance(oSwitchParam) {
			var oConvertedParameter;
			if (aRepresentationInstances[oSwitchParam.index] === undefined) {
				if (oSwitchParam.config.parameter && oSwitchParam.config.parameter.alternateRepresentationTypeId) {
					oSwitchParam.config.parameter.alternateRepresentationType = oFactory.getConfigurationById(oSwitchParam.config.parameter.alternateRepresentationTypeId);
				}
				oSwitchParam.config.parameter.requiredFilters = oBindingConfig.requiredFilters;
				oConvertedParameter = that.convertSortToOrderBy(oSwitchParam.config.parameter);
				aRepresentationInstances[oSwitchParam.index] = oInject.coreApi.createRepresentation(oSwitchParam.constructor, oConvertedParameter);
				return aRepresentationInstances[oSwitchParam.index];
			} else {
				return aRepresentationInstances[oSwitchParam.index];
			}
		}
	};
	/**
	 * @description Serializes a binding object.
	 * @returns {object} serialized binding object with a serializable selectedRepresentation and the selectedRepresentationId
	 */
	this.serialize = function() {
		return {
			selectedRepresentation : that.getSelectedRepresentation().serialize(),
			selectedRepresentationId : that.getSelectedRepresentationInfo().representationId
		};
	};
	/**
	 * @description Deserialize a serializable binding object.
	 * @param {object} oSerializableBinding serializable binding object to be deserialized
	 * @returns {object} deserialized binding runtime object
	 */
	this.deserialize = function(oSerializableBinding) {
		that.setSelectedRepresentation(oSerializableBinding.selectedRepresentationId);
		that.getSelectedRepresentation().deserialize(oSerializableBinding.selectedRepresentation);
		return that;
	};
	
	/**
	 * @private 
	 * @description For old file based configurations we need to convert the sort to an orderby attribute.
	 * @param {object} oParameter - parameter part of the representation object
	 * @returns{object} - New object (except for alternateRepresentationType) where the sort attribute is migrated to orderby
	 */
	this.convertSortToOrderBy = function(oParameter){
		var result;
	
		if(oParameter.sort && !oParameter.orderby){
			result = jQuery.extend(true, {}, oParameter);
			if(oParameter.alternateRepresentationType){
			  result.alternateRepresentationType = oParameter.alternateRepresentationType;
			}
			result.orderby = [{property : oParameter.sort.sortField, ascending : !oParameter.sort.descending}];
		    delete result.sort;                        
			return result;
		}
		
		result = oParameter;
		return result;
	};

	aRepresentationInstances[0] = undefined;
	var index, representationIdFound = false;
	for( index in oBindingConfig.representations) {
		var sRepTypeId = oBindingConfig.representations[index].representationTypeId;
        aRepresentationInfo[index] = jQuery.extend(true, {}, oFactory.getConfigurationById(sRepTypeId)); // return clone
		aRepresentationInfo[index].representationId = oBindingConfig.representations[index].id;
		if (sRepresentationId === aRepresentationInfo[index].representationId) {
			representationIdFound = true;
		}
		aRepresentationInfo[index].representationLabel = oBindingConfig.representations[index].label;
		aRepresentationInfo[index].thumbnail = oBindingConfig.representations[index].thumbnail;
		aRepresentationInfo[index].parameter =  jQuery.extend(true, {}, oBindingConfig.representations[index].parameter);
	}
	if (representationIdFound) {
		this.setSelectedRepresentation(sRepresentationId);
	} else if (aRepresentationInfo.length > 0) {
		this.setSelectedRepresentation(aRepresentationInfo[0].representationId);
	}
	if (!representationIdFound && sRepresentationId) {
		oInject.messageHandler.putMessage(oInject.messageHandler.createMessageObject({
              code: '5037',
              aParameters: [sRepresentationId]
          }));
	}
};

}; // end of sap/apf/core/binding.js
if ( !jQuery.sap.isDeclared('sap.apf.core.request') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

/*global sap, jQuery, OData */
jQuery.sap.declare('sap.apf.core.request');



jQuery.sap.require('sap.ui.thirdparty.datajs'); // unlisted dependency retained



(function () {
    'use strict';
    /**
     * @class The Request object represents an OData GET request. It receives a
     *        filter which is then mapped to a URI query and appended to the request
     *        URI. Its role is to send an asynchronous OData request to the server,
     *        receive the response, parse it and provision it as an array of
     *        objects. The request will use a callback mechanism handling the
     *        asynchronous request behavior. The callback routes control back to the
     *        Path object.
     * @param {Object} oInject - references to other handlers
     * @param oConfig - Configuration Object for a Request.
     */
    sap.apf.core.Request = function (oInject, oConfig) {
        var oMessageHandler = oInject.messageHandler;
        var oCoreApi = oInject.coreApi;
        var sServiceRootPath = oConfig.service;
        
        var selectProperties = oConfig.selectProperties;
        var oUriGenerator = oCoreApi.getUriGenerator();
        var oMessageObject;
        if (sServiceRootPath === undefined) {
            oMessageObject = oMessageHandler.createMessageObject({
                code: '5015',
                aParameters: [oConfig.id]
            });
            oMessageHandler.putMessage(oMessageObject);
        }
        var oMetadata = oCoreApi.getMetadata(sServiceRootPath);
        var oUriComponents = oMetadata.getUriComponents(oConfig.entityType);
        var sEntitySet,
            snavigationProperty;
        if(oUriComponents){
        	sEntitySet  = oUriComponents.entitySet;	
        	snavigationProperty = oUriComponents.navigationProperty;
        }
        oMessageHandler.check(sEntitySet !== undefined, 'Invalid request configuration: An entityset does not exist under the service ' + oConfig.entityType);
        oMessageHandler.check(snavigationProperty !== undefined, 'Invalid request configuration: A usable navigation does not exist for the service ' + oConfig.entityType);
        this.type = oConfig.type;
        /**
         * @description A request object that can send (many) asynchronous OData GET requests to the server. It uses a POST $batch operation wrapping the GET.
         * @param {Object} oFilter - An sap.apf.core.utils filter object.
         * @param {Function} fnCallback - A function called after the response was successfully received and parsed.
         * @param {Object} oRequestOptions - An optional object containing additional query string options
         * Format: { orderby : [{ property : <property_name>, order : <asc|desc>}], top : <integer>, skip : <integer> }
         */
        this.sendGetInBatch = function (oFilter, fnCallback, oRequestOptions) {
        	var manifest;
            var oParameters = retrieveParameters(oFilter);
            var oReducedFilter;
            var filterSimplify;
            
            checkFilterForRequiredProperties(oFilter);
            if (oFilter && oFilter.getProperties) {
                oReducedFilter = oFilter.reduceToProperty(oMetadata.getFilterableProperties(sEntitySet));
                manifest = (oInject.manifests && oInject.manifests.manifest ) || {};
                if(oCoreApi.getStartParameterFacade().isFilterReductionActive() || (manifest["sap.apf"] && manifest["sap.apf"].activateFilterReduction)) {
                	filterSimplify = new sap.apf.core.utils.FilterReduction();
                	oReducedFilter = filterSimplify.filterReduction(oMessageHandler, oReducedFilter);
                }
            }    
            checkRequestOptionsConsistency(oRequestOptions);
            var oPaging = oRequestOptions && oRequestOptions.paging;
            var oSortingFields = oRequestOptions && oRequestOptions.orderby;
            var sUrlEntityType = oUriGenerator.buildUri(oMessageHandler, sEntitySet, selectProperties, oReducedFilter, oParameters, oSortingFields, oPaging, undefined, formatValue, snavigationProperty);
            var oRequest = {
                method: 'POST',
                headers: {
                    'x-csrf-token': oCoreApi.getXsrfToken(sServiceRootPath)
                },
                requestUri: oUriGenerator.getAbsolutePath(sServiceRootPath) + '$batch',
                data: {
                    __batchRequests: [
                        {
                            requestUri: sUrlEntityType,
                            method: 'GET',
                            headers: {
                                'Accept-Language': sap.ui.getCore().getConfiguration().getLanguage(),
                                'x-csrf-token': oCoreApi.getXsrfToken(sServiceRootPath)
                            }
                        }
                    ]
                }
            };
            var fnSuccess = function (data, response) {
                var oResponse = {};
                var sUrl = '';
                if (data && data.__batchResponses && data.__batchResponses[0].data) {
                    oResponse.data = data.__batchResponses[0].data.results;
                    oResponse.metadata = oCoreApi.getEntityTypeMetadata(oConfig.service, oConfig.entityType);
                    if (data.__batchResponses[0].data.__count) {
                        oResponse.count = parseInt(data.__batchResponses[0].data.__count, 10);
                    }
                } else if (data && data.__batchResponses[0] && data.__batchResponses[0].response && data.__batchResponses[0].message) {
                    sUrl = response.requestUri;
                    var sMessage = data.__batchResponses[0].message;
                    var sErrorDetails = data.__batchResponses[0].response.body;
                    var sHttpStatusCode = data.__batchResponses[0].response.statusCode;
                    oResponse = oMessageHandler.createMessageObject({
                        code: '5001',
                        aParameters: [ sHttpStatusCode, sMessage, sErrorDetails, sUrl ]
                    });
                } else {
                    sUrl = response.requestUri || sUrlEntityType;
                    oResponse = oMessageHandler.createMessageObject({
                        code: '5001',
                        aParameters: [ 'unknown', 'unknown error', 'unknown error', sUrl ]
                    });
                }
                fnCallback(oResponse, false);
            };
            var fnError = function (error) {
                var sMessage = 'unknown error';
                var sErrorDetails = 'unknown error';
                var sUrl = sUrlEntityType;
                if (error.message !== undefined) {
                    sMessage = error.message;
                }
                var sHttpStatusCode = 'unknown';
                if (error.response && error.response.statusCode) {
                    sHttpStatusCode = error.response.statusCode;
                    sErrorDetails = error.response.statusText || '';
                    sUrl = error.response.requestUri || sUrlEntityType;
                }

                if (error.messageObject && error.messageObject.type === 'messageObject') {
                    fnCallback(error.messageObject);
                } else {
                    fnCallback(oMessageHandler.createMessageObject({
                        code: '5001',
                        aParameters: [ sHttpStatusCode, sMessage, sErrorDetails, sUrl ]
                    }));
                }

            };
            oCoreApi.odataRequest(oRequest, fnSuccess, fnError, OData.batchHandler);
        };

        function formatValue(sProperty, value) {
            var strDelimiter = "'";
            var oEntityMetadata = oMetadata.getPropertyMetadata(sEntitySet, sProperty);
            if (oEntityMetadata && oEntityMetadata.dataType) {
                return sap.apf.utils.formatValue(value, oEntityMetadata.dataType.type);
            }
            if (typeof value === 'number') {
                return value;
            }
            return strDelimiter + sap.apf.utils.escapeOdata(value) + strDelimiter;
        }

        function checkRequestOptionsConsistency(oRequestOptions) {

            var aPropertyNames, i;

            if (!oRequestOptions) {
                return;
            }
            aPropertyNames = Object.getOwnPropertyNames(oRequestOptions);
            for (i = 0; i < aPropertyNames.length; i++) {
                if (aPropertyNames[i] !== 'orderby' && aPropertyNames[i] !== 'paging') {
                    oMessageHandler.putMessage(oMessageHandler.createMessageObject({
                        code: '5032',
                        aParameters: [ sEntitySet, aPropertyNames[i] ]
                    }));
                }
            }
        }


        function checkFilterForRequiredProperties(oFilter) {
            var aFilterableProperties = oMetadata.getFilterableProperties(sEntitySet);
            var sRequiredFilterProperty = '';
            var oEntityTypeMetadata = oMetadata.getEntityTypeAnnotations(sEntitySet);
            var oMessageObject2;
            if (oEntityTypeMetadata.requiresFilter !== undefined && oEntityTypeMetadata.requiresFilter === 'true') {
                if (oEntityTypeMetadata.requiredProperties !== undefined) {
                    sRequiredFilterProperty = oEntityTypeMetadata.requiredProperties;
                }
            }
            if (sRequiredFilterProperty === '') {
                return;
            }
            if (jQuery.inArray(sRequiredFilterProperty, aFilterableProperties) === -1) {
                oMessageObject2 = oMessageHandler.createMessageObject({
                    code: '5006',
                    aParameters: [ sEntitySet, sRequiredFilterProperty ]
                });
                oMessageHandler.putMessage(oMessageObject2);
            }
            var aPropertiesInFilter = oFilter.getProperties();
            // test, whether all required properties are in filter
            if (jQuery.inArray(sRequiredFilterProperty, aPropertiesInFilter) === -1) {
                oMessageObject2 = oMessageHandler.createMessageObject({
                    code: '5005',
                    aParameters: [ sEntitySet, sRequiredFilterProperty ]
                });
                oMessageHandler.putMessage(oMessageObject2);
            }
        }

        function retrieveParameters(oFilter) {
            var oParameters = {};
            var aParameters;
            var numberOfParameters;
            var aTermsContainingParameter;
            var i;
            var oParameterTerm;


            aParameters = oMetadata.getParameterEntitySetKeyProperties(sEntitySet);
            if (aParameters !== undefined) {
                numberOfParameters = aParameters.length;
            } else {
                numberOfParameters = 0;
            }
            if (numberOfParameters > 0) {
                for (i = 0; i < numberOfParameters; i++) {
                    if (oFilter && oFilter instanceof sap.apf.core.utils.Filter) {
                        aTermsContainingParameter = oFilter.getFilterTermsForProperty(aParameters[i].name);
                        oParameterTerm = aTermsContainingParameter[aTermsContainingParameter.length - 1];
                    }
                    if (oParameterTerm instanceof sap.apf.core.utils.FilterTerm) {
                        addParameter(i, oParameterTerm.getValue());
                    } else if (aParameters[i].defaultValue) {
                        addParameter(i, aParameters[i].defaultValue);
                    } else {
                        oMessageHandler.putMessage(
                            oMessageHandler.createMessageObject({
                                code: '5016',
                                aParameters: [ aParameters[i].name ]
                            }));
                    }
                }
            }
            return oParameters;
            
            function addParameter(index, value) {
                var formatedValue;
                if (aParameters[index].dataType.type === 'Edm.String') {
                    oParameters[aParameters[index].name] = (jQuery.sap.encodeURL("'" + sap.apf.utils.escapeOdata(value) + "'"));
                } else if (aParameters[index].dataType.type) {
                    formatedValue = sap.apf.utils.formatValue(value, aParameters[index].dataType.type);
                    if(typeof formatedValue === 'string') {
                        oParameters[aParameters[index].name] = jQuery.sap.encodeURL(formatedValue);
                    } else {
                        oParameters[aParameters[index].name] = formatedValue;
                    }
                } else if (typeof value === 'string') {
                    oParameters[aParameters[index].name] = jQuery.sap.encodeURL(sap.apf.utils.escapeOdata(value));
                } else {
                    oParameters[aParameters[index].name] = value;
                }
            }
        }
    };
}());

}; // end of sap/apf/core/request.js
if ( !jQuery.sap.isDeclared('sap.apf.core.resourcePathHandler') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/*global jQuery, sap */

(function () {
    'use strict'; 

    jQuery.sap.declare("sap.apf.core.resourcePathHandler");
    
    
     // ctor called
     // constants used
    
    
    
        
    
    

    /**
     * @class Holds all paths for the message configuration, the message text bundles, other ui texts for apf, and for extensions. 
     * Furthermore it  holds the information about persistence configuration.
     */
    sap.apf.core.ResourcePathHandler = function (oInject) {
        var thisModule = this;
        
        var coreApi = oInject.coreApi;
        var messageHandler = oInject.messageHandler;

        var oHT = new sap.apf.utils.Hashtable(messageHandler);

        var oConfigurationProperties;
        var oPersistenceConfiguration;
        var oSmartBusinessConfiguration = null;
        var sApplicationConfigurationURL = "";
        var bConfigurationLoaded = false;
        var bIsAnalyticalConfigRequested = false;
        var fnProxy = sap.apf.core.OdataProxy;
        
        //noinspection JSLint
        setDefaultLocations();

        /**
         * @description returns the url of the application configuration
         * @returns {string} url
         */
        this.getApplicationConfigurationURL = function () {
            return sApplicationConfigurationURL;
        };
        
        
      
        /**
         * @description Loads a new  application configuration in JSON format.
         * Loads only once. When called twice or more then skips processing and returns immediately.
         * @param {string} sFilePath The absolute path of application configuration file. Host and port will be added in front of this path.
         */
        this.loadConfigFromFilePath = function (sFilePath) {
        	if (bConfigurationLoaded) {
        		return;
        	}
            if (coreApi.getStartParameterFacade().getAnalyticalConfigurationId()) {
            	bIsAnalyticalConfigRequested = true;
            }
            var sUrl = sFilePath;
            //noinspection ReuseOfLocalVariableJS
            sApplicationConfigurationURL = sFilePath;
            jQuery.ajax({
                url: sUrl,
                dataType: "json",
                success: parseConfigurationFile,
                error: function (oJqXHR, sStatus, sError) {
                    var oMessageObject = messageHandler.createMessageObject({
                        code: sap.apf.core.constants.message.code.errorLoadingRessource,
                        rawText: "Error " + sError + " when loading the configuration of the resource location: " + sUrl
                    });
                    messageHandler.putMessage(oMessageObject);
                },
                async: false
            });
            configureMessageHandling();
            if(bIsAnalyticalConfigRequested) {
            	loadAnalyticalConfigFromService();
            } else {
            	loadAnalyticalConfigFromFile();
            }
            bConfigurationLoaded = true;

            function parseConfigurationFile(oData, sStatus, oJqXHR) {
            	
                var oMessage = sap.apf.core.utils.checkForTimeout(oJqXHR);
                if (oMessage) {
                    messageHandler.putMessage(messageHandler.createMessageObject({
                        code: sap.apf.core.constants.message.code.errorStartUp,
                        rawText: "Timeout when loading application configuration from " + sFilePath + "."
                    }));
                }

                if (!oData || !oData.applicationConfiguration) {
                    messageHandler.putMessage(messageHandler.createMessageObject({
                        code: sap.apf.core.constants.message.code.errorStartUp,
                        rawText: "The application configuration from " + sFilePath + " has no valid format."
                    }));
                    return;

                }
                if (oData.applicationConfiguration.textResourceLocations === undefined) {
                    messageHandler.putMessage(messageHandler.createMessageObject({
                        code: sap.apf.core.constants.message.code.errorStartUp,
                        rawText: "The textResourceLocations is missing in the application configuration from " + sFilePath + "."
                    }));
                    return;
                }
                processApplicationConfiguration(oData);
                
        }
        };
        
        function useLrepProxy() {
        	var manifest = (oInject.manifests && oInject.manifests.manifest ) || {};
        	
        	return ((manifest["sap.apf"] && manifest["sap.apf"].activateLrep) || coreApi.getStartParameterFacade().isLrepActive());
        };
        
        function loadAnalyticalConfigFromService() {
        	var config = coreApi.getStartParameterFacade().getAnalyticalConfigurationId();
			var application =  config.applicationId;
			var configuration = config.configurationId;
        	
        	if (useLrepProxy() && !application) {
        		messageHandler.putMessage(messageHandler.createMessageObject({
                    code: "5022"
                }))
        	}
    		var odataProxy = new fnProxy(
        			{
        				serviceRoot : oPersistenceConfiguration.path.service,
        				entityTypes : {
        					configuration: sap.apf.core.constants.entitySets.configuration,
        					texts: sap.apf.core.constants.entitySets.texts
        				}
        			}, 
        			{
        				instance : {
        					coreApi : coreApi,
        					messageHandler : messageHandler
        				}
        			}
        	);
        	odataProxy.readEntity(
        			"configuration", 
        			function(result, metadata, messageObject) {
        				if(messageObject) {
        	                messageHandler.putMessage(messageHandler.createMessageObject({
        	                    code: "5022",
        	                    aParameters : [configuration]
        	                }));
        				} else {
        					var analyticalConfiguration = JSON.parse(result.SerializedAnalyticalConfiguration);
        					coreApi.loadAnalyticalConfiguration(JSON.parse(result.SerializedAnalyticalConfiguration));
        					application = application || result.Application;
        					loadTextFromService(application, odataProxy);
        					if(analyticalConfiguration.applicationTitle) {
        					    oConfigurationProperties.appName = analyticalConfiguration.applicationTitle.key;
        					    oConfigurationProperties.appTitle = analyticalConfiguration.applicationTitle.key;
        					}
        				}
        			},
        			[{
        				name : "AnalyticalConfiguration",
        				value: configuration
        			}],
        			undefined, 
        			false, //sync call
        			application
        	);
        }      
        function loadTextFromService( applicationId, odataProxy ){
        	
        	var filterApplication = new sap.apf.core.utils.Filter(messageHandler, 'Application', 'eq', applicationId);
			var filter = new sap.apf.core.utils.Filter(messageHandler, 'Language', 'eq', sap.apf.core.constants.developmentLanguage);
			filter.addAnd(filterApplication);

			var selectList = [ "TextElement", "TextElementDescription" ];
			
			odataProxy.readCollection('texts', function(result, metadata, messageObject) {
				if(messageObject) {
	                messageHandler.putMessage(messageHandler.createMessageObject({
	                    code: "5023",
	                    aParameters : [sap.apf.utils.uriParameter.getConfigurationId()]
	                }));
				} else {
					coreApi.loadTextElements(result);
				}	
			}, undefined, selectList, filter, false);
        }
        function loadAnalyticalConfigFromFile() {
            var sUrl = thisModule.getResourceLocation(sap.apf.core.constants.resourceLocation.analyticalConfigurationLocation);
            var oMessageObject;

            if (sUrl !== "") {
                jQuery.ajax({
                    url: sUrl,
                    dataType: "json",
                    success: function(oData, sStatus, oJqXHR) {
                    	if(oData) {
                    		coreApi.loadAnalyticalConfiguration(oData);
                    		if(oData.applicationTitle) {
                    		    oConfigurationProperties.appName = oData.applicationTitle.key;
                    		    oConfigurationProperties.appTitle = oData.applicationTitle.key;
                    		}
                    	} else {
                            oMessageObject = messageHandler.createMessageObject({
                                code: sap.apf.core.constants.message.code.errorLoadingAnalyticalConfig,
                                rawText: "No data received when loading analytical configuration file" + sUrl
                            });
                            messageHandler.putMessage(oMessageObject);
                    	}
                    },
                    error: function (oJqXHR, sStatus, sError) {
                        oMessageObject = messageHandler.createMessageObject({
                            code: sap.apf.core.constants.message.code.errorLoadingAnalyticalConfig,
                            rawText: "Error " + sError + " when loading analytical configuration file" + sUrl
                        });
                        messageHandler.putMessage(oMessageObject);
                    },
                    async: false
                });
            } else {  // the case of the default value which is set by this module when the file path was undefined in the config file
                oMessageObject = messageHandler.createMessageObject({
                    code: sap.apf.core.constants.message.code.missingAnalyticalConfig,
                    rawText: "No analytical configuration defined in the application configuration"
                });
                messageHandler.putMessage(oMessageObject);
            }
        }
        function configureMessageHandling() {
            coreApi.loadMessageConfiguration(sap.apf.core.messageDefinition, true);
            loadMessagesFromConfigurationFile(sap.apf.core.constants.resourceLocation.applicationMessageDefinitionLocation, false);
        }
        function loadMessagesFromConfigurationFile(sResourceLocation, bResetRegistry) {
            var sUrl = thisModule.getResourceLocation(sResourceLocation);
            if (sUrl !== "") {
                jQuery.ajax({
                    url: sUrl,
                    dataType: "json",
                    success: parseMessageConfigurationFile,
                    error: function (oJqXHR, sStatus, sError) {
                        var oMessageObject = messageHandler.createMessageObject({
                            code: sap.apf.core.constants.message.code.errorLoadingAnalyticalConfig,
                            rawText: "Error " + sError + " when loading message configuration file" + sUrl
                        });
                        messageHandler.putMessage(oMessageObject);
                    },
                    async: false
                });
            }
            //noinspection JSUnusedLocalSymbols
            function parseMessageConfigurationFile(oData, sStatus, oJqXHR) {
                var oMessageObject;
                var oMessage = sap.apf.core.utils.checkForTimeout(oJqXHR);
                if (!oMessage) {
                    if (oData.messageConfiguration) {
                        coreApi.loadMessageConfiguration(oData.messageConfiguration.definitions, bResetRegistry);
                    }
                } else {
                    oMessageObject = messageHandler.createMessageObject({
                        code: sap.apf.core.constants.message.code.errorLoadingAnalyticalConfig,
                        rawText: "Timeout error when loading message configuration file" + sUrl
                    });
                    messageHandler.putMessage(oMessageObject);
                }
            }
        }

        //noinspection FunctionWithMoreThanThreeNegationsJS
        function checkPersistenceConfiguration(oConfig) {
            var oMessageObject;

            if (!oConfig || !oConfig.path) {
                oMessageObject = messageHandler.createMessageObject({
                    code: sap.apf.core.constants.message.code.errorInAnalyticalConfig,
                    rawText: "persistence path configuration is missing in the application configuration"
                });
                messageHandler.putMessage(oMessageObject);
            }
            if (!oConfig.path.service) {
                oMessageObject = messageHandler.createMessageObject({
                    code: sap.apf.core.constants.message.code.errorInAnalyticalConfig,
                    rawText: "service in persistence path configuration is missing"
                });
                messageHandler.putMessage(oMessageObject);
            }
            if (!oConfig.logicalSystem) {
                oMessageObject = messageHandler.createMessageObject({
                    code: sap.apf.core.constants.message.code.warningAnalyticalConfig,
                    rawText: "logical system configuration is missing in the application configuration"
                });
                messageHandler.putMessage(oMessageObject);
                
            } else if (!oConfig.logicalSystem.service && oConfig.logicalSystem.service !== null) {
                oMessageObject = messageHandler.createMessageObject({
                    code: sap.apf.core.constants.message.code.errorInAnalyticalConfig,
                    rawText: "service is missing in logical system configuration  in the application configuration"
                });
                messageHandler.putMessage(oMessageObject);
            }
            
            if (oConfig.analyticalConfiguration) {
            	if(!oConfig.analyticalConfiguration.service) {
                    oMessageObject = messageHandler.createMessageObject({
                        code: sap.apf.core.constants.message.code.errorInAnalyticalConfig,
                        rawText: "service or entity set are missing in analytical configuration in the application configuration"
                    });
                    messageHandler.putMessage(oMessageObject);
            	}
            }
        }

        function checkSmartBusinessConfiguration(oConfig) {
            var oMessageObject;

            if (oConfig.evaluations && !oConfig.evaluations.service) {
                oMessageObject = messageHandler.createMessageObject({
                    code: sap.apf.core.constants.message.code.errorInAnalyticalConfig,
                    rawText: "service in Smart Business service root configuration is missing"
                });
                messageHandler.putMessage(oMessageObject);
            }
            if (oConfig.evaluations && (!oConfig.evaluations.type || oConfig.evaluations.type !== "smartBusinessRequest")) {
                oMessageObject = messageHandler.createMessageObject({
                    code: sap.apf.core.constants.message.code.errorInAnalyticalConfig,
                    rawText: "type in Smart Business configuration is not smartBusinessRequest"
                });
                messageHandler.putMessage(oMessageObject);
            }
            if (oConfig.evaluations && !oConfig.evaluations.entityType) {
                oMessageObject = messageHandler.createMessageObject({
                    code: sap.apf.core.constants.message.code.errorInAnalyticalConfig,
                    rawText: "entityType in Smart Business service root configuration is missing"
                });
                messageHandler.putMessage(oMessageObject);
            }
        }

        /**
         * @description This function returns the path of a specified resource.
         * @param {string} sResourceIdentifier type sap.apf.core.constants.resourceLocation.*
         * @returns {string} Resource path
         */
        this.getResourceLocation = function (sResourceIdentifier) {
            return oHT.getItem(sResourceIdentifier);
        };
        /**
         * @description This function returns the configuration for the persistence (of the path).
         * @returns {object} persistence configuration object
         */
        this.getPersistenceConfiguration = function () {
            messageHandler.check(bConfigurationLoaded, "RessourcePathHandler: configuration must be loaded before access to ressources");
            return oPersistenceConfiguration;
        };
        /**
         * @description This function returns the properties of the configuration file, which are not used internally.
         * @returns {object} Copy of properties in configuration
         */
        this.getConfigurationProperties = function () {
            return oConfigurationProperties;
        };
        /**
		 * @description sets  application configuration in JSON object format and loads the ressources and analytical configuration.
		 * Loads only once. When called twice or more then skips processing and returns immediately.
		 */
		 function loadAnalyticalConfigurationAndRessources () {
			var uriGenerator = sap.apf.core.utils.uriGenerator;
			var property, sbService, persistenceServiceRoot;
			var manifest = oInject.manifests.manifest;
			var baseManifest = oInject.manifests.baseManifest;
			
			if (bConfigurationLoaded) {
				return;
			}
			if (coreApi.getStartParameterFacade().getAnalyticalConfigurationId()) {
				bIsAnalyticalConfigRequested = true;
			}
			
			var baseComponentUri = uriGenerator.getBaseURLOfComponent(oInject.manifests.baseManifest.name);
			var componentUri = uriGenerator.getBaseURLOfComponent(oInject.manifests.manifest.name);
			
			sApplicationConfigurationURL = manifest["sap.app"].id; 
			
			if (manifest["sap.app"].dataSources && manifest["sap.app"].dataSources.PathPersistenceServiceRoot) {
				persistenceServiceRoot =  manifest["sap.app"].dataSources.PathPersistenceServiceRoot.uri;
			} 
			
			var apfUiTextBundle = baseManifest["sap.app"].i18n;
			apfUiTextBundle = uriGenerator.addRelativeToAbsoluteURL(baseComponentUri, apfUiTextBundle);
			
			var applicationUiTextBundle = manifest["sap.app"].i18n;
			applicationUiTextBundle = uriGenerator.addRelativeToAbsoluteURL(componentUri, applicationUiTextBundle);
			
			var title = manifest["sap.app"].title;
			title = title.replace(/[{}]/g, "");
			
			var analyticalConf = "";
			if (manifest["sap.app"].dataSources && manifest["sap.app"].dataSources.AnalyticalConfigurationLocation) {
				analyticalConf = manifest["sap.app"].dataSources.AnalyticalConfigurationLocation.uri;
				analyticalConf = uriGenerator.addRelativeToAbsoluteURL(componentUri, analyticalConf);
			}

			var oApplicationConfiguration = {
			
					"appName" : title, 
					"appTitle" : title, 
					"analyticalConfigurationLocation" : analyticalConf,
			
					"textResourceLocations" : {
						"apfUiTextBundle" : apfUiTextBundle,
						"applicationUiTextBundle" : applicationUiTextBundle
					},
					"persistence" : {
						"path" : { 
							"service" : persistenceServiceRoot
						}
					}
			};

			if (manifest["sap.apf"] && manifest["sap.apf"].appSpecificParameters) {
				
				for (property in manifest["sap.apf"].appSpecificParameters) {
					oApplicationConfiguration[property] = manifest["sap.apf"].appSpecificParameters[property];
				}   
			}
			
			if (useLrepProxy()) {
				
				fnProxy = sap.apf.core.LayeredRepositoryProxy;				  
			}
		
			if (manifest["sap.app"].dataSources && manifest["sap.app"].dataSources.SmartBusiness) {
				sbService = manifest["sap.app"].dataSources.SmartBusiness.uri;
				oApplicationConfiguration.smartBusiness = { runtime : { service : sbService }};
			}
			
			if (manifest["sap.app"].dataSources && manifest["sap.app"].dataSources.LogicalSystem) {
				oApplicationConfiguration.persistence.logicalSystem = { service : manifest["sap.app"].dataSources.LogicalSystem.uri };
			}
			
			processApplicationConfiguration({ applicationConfiguration : oApplicationConfiguration});
			configureMessageHandling();
			if (bIsAnalyticalConfigRequested) {
				loadAnalyticalConfigFromService();
			} else {
				loadAnalyticalConfigFromFile();
			}
			bConfigurationLoaded = true;
			
		}
		 
        function setDefaultLocations() {
            var sApfLocation = coreApi.getUriGenerator().getApfLocation();

            oHT.setItem(sap.apf.core.constants.resourceLocation.apfUiTextBundle, sApfLocation + "resources/i18n/apfUi.properties");
            oHT.setItem(sap.apf.core.constants.resourceLocation.applicationMessageDefinitionLocation, "");
            oHT.setItem(sap.apf.core.constants.resourceLocation.applicationMessageTextBundle, "");
            oHT.setItem(sap.apf.core.constants.resourceLocation.applicationUiTextBundle, "");
            oHT.setItem(sap.apf.core.constants.resourceLocation.analyticalConfigurationLocation, "");
        }
        
        function processApplicationConfiguration(conf) {

			function saveRestrictedCopyOfApplicationConfiguration(oApplicationConfiguration) {
				oConfigurationProperties = jQuery.extend(true, {}, oApplicationConfiguration);
				delete oConfigurationProperties.type;
				delete oConfigurationProperties.analyticalConfigurationLocation;
				delete oConfigurationProperties.applicationMessageDefinitionLocation;
				delete oConfigurationProperties.textResourceLocations;
				delete oConfigurationProperties.persistence;
			}

			var oApplicationConfiguration = conf.applicationConfiguration;
			saveRestrictedCopyOfApplicationConfiguration(oApplicationConfiguration);

			var oTextResourceLocations = conf.applicationConfiguration.textResourceLocations;
			oPersistenceConfiguration = conf.applicationConfiguration.persistence;
			checkPersistenceConfiguration(oPersistenceConfiguration);
			if (!oPersistenceConfiguration.path.entitySet) {
				oPersistenceConfiguration.path.entitySet = sap.apf.core.constants.entitySets.analysisPath;
			}

			if (conf.applicationConfiguration.smartBusiness) {
				oSmartBusinessConfiguration = conf.applicationConfiguration.smartBusiness;
				checkSmartBusinessConfiguration(oSmartBusinessConfiguration);
			}

			var oMessageObject;
			var sUrl;
			var oProperty;
			for(oProperty in sap.apf.core.constants.resourceLocation) {
				if (!sap.apf.core.constants.resourceLocation.hasOwnProperty(oProperty)) {
					continue;
				}
				//noinspection JSUnfilteredForInLoop
				if (oApplicationConfiguration[oProperty] !== undefined) {
					//noinspection JSUnfilteredForInLoop
					sUrl = oApplicationConfiguration[oProperty];
				} else { //noinspection JSUnfilteredForInLoop
					if (oTextResourceLocations[oProperty] !== undefined) {
						//noinspection JSUnfilteredForInLoop
						sUrl = oTextResourceLocations[oProperty];
					} else {
						continue;
					}
				}
				if (sap.apf.core.utils.fileExists(sUrl)) {
					//noinspection JSUnfilteredForInLoop
					oHT.setItem(oProperty, sUrl);
				} else {
					if (!bIsAnalyticalConfigRequested) {
						oMessageObject = messageHandler.createMessageObject({
							code : sap.apf.core.constants.message.code.wrongRessourcePath,
							rawText : "The path " + sUrl + " for resource location " + oProperty + "is not valid."
						});
						messageHandler.putMessage(oMessageObject);
					}
				}
			}
		}
        
        if (oInject.manifests && oInject.manifests.manifest) {
       	  loadAnalyticalConfigurationAndRessources();
       }

	};


}());

}; // end of sap/apf/core/resourcePathHandler.js
if ( !jQuery.sap.isDeclared('sap.apf.core.sessionHandler') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.core.sessionHandler");



/**
 * @class Handles the session of an APF based application. e.g. the XSRF token handling
 */
/*global setTimeout*/
sap.apf.core.SessionHandler = function(oInject) {
	// private vars
	var that = this;
	var sXsrfToken = "";
	var sServiceRootPath = "";
	var oHashTableXsrfToken = new sap.apf.utils.Hashtable(oInject.messageHandler);
	var nFetchTryCounter = 0;
	var sLogicalSystem = "";
	var oCoreApi = oInject.coreApi;
	var oMessageHandler = oInject.messageHandler;
	var oContextFilter = new sap.apf.utils.Filter(oMessageHandler);
	var sSapClient = "";
	// public vars
	/**
	 * @description Returns the type
	 * @returns {String}
	 */
	this.type = "sessionHandler";
	// public function
	/**
	 * @see sap.apf.core.ajax
	 */
	this.ajax = function(oSettings){
		sap.apf.core.ajax(oSettings);
	};
	/**
	 * @see sap.apf.core.odataRequestWrapper
	 */
	this.odata = function(oRequest, fnOnSuccess, fnError){
		oCoreApi.odataRequest(oRequest, fnOnSuccess, fnError);
	};
	
	/**
	 * @description Returns the XSRF token as string for a given OData service root path
	 * @param {String} serviceRootPath OData service root path
	 * @returns {String}
	 */
	this.getXsrfToken = function(serviceRootPath) {
		sServiceRootPath = serviceRootPath;
		if(oHashTableXsrfToken.hasItem(sServiceRootPath)){
			return oHashTableXsrfToken.getItem(sServiceRootPath);
		} else {
			that.fetchXcsrfToken();
			oHashTableXsrfToken.setItem(sServiceRootPath, sXsrfToken);
			return sXsrfToken;
		}
	};

	/**
	 * returns the rfc destination of the r3 system, that is exposed by the odata services.
	 * This corresponds to t000-logsys. The logical system is the identifier for the system/server, on which the application runs.
	 * @returns {string} logical system destination
	 */
	this.getLogicalSystem = function() {
		return sLogicalSystem;
	};

	/**
	 * @description sets the Context
	 * @param {sap.apf.utils.Filter} oFilter filter, that stores all context information
	 */
	this.setContext = function(oFilter) {
		oContextFilter = oFilter;
        var aTerms = oContextFilter.getInternalFilter().getFilterTermsForProperty('SAPClient');
        if (aTerms && aTerms.length === 1) {
            initLogicalSystem();
        }
		oCoreApi.updatePath(function() {
		}, true);
	};
	/**
	 * @description gets the Context
	 */
	this.getContext = function() {
		return oContextFilter;
	};
	/**
	 * @description fetches XSRF token from XSE
	 */
	this.fetchXcsrfToken = function() {
		that.ajax({
			url : oCoreApi.getUriGenerator().getAbsolutePath(sServiceRootPath),
			type : "GET",
			beforeSend : function(xhr) {
				xhr.setRequestHeader("x-csrf-token", "Fetch");
			},
			success : onFetchXsrfTokenResponse,
			error : onError,
			async : false
		});
		nFetchTryCounter = nFetchTryCounter + 1;
	};
	// private functions
	var onError = function(oJqXHR, sStatus, sErrorThrown) {
		if ((sXsrfToken.length === 0 || sXsrfToken === "unsafe") && nFetchTryCounter < 2) {
			setTimeout(that.fetchXcsrfToken, 500 + Math.random() * 1500);
		} else {
			oMessageHandler.check(false, "No XSRF Token available!", 5101);
		}
	};
    var onFetchXsrfTokenResponse = function(oData, sStatus, oXMLHttpRequest) {
        sXsrfToken = oXMLHttpRequest.getResponseHeader("x-csrf-token");
        /*
        * In case XSRF prevention flag is not set in .xsaccess file for the service, then no "x-csrf-token" field is returned in response header. 
         * For robustness, XSRF token is set to empty string. Every request triggered by APF contains then a "x-csrf-token" request header field containing an empty string. 
         */
        if(sXsrfToken === null){
               sXsrfToken = "";
        }else if ((sXsrfToken.length === 0 || sXsrfToken === "unsafe") && nFetchTryCounter < 2) {
               setTimeout(that.fetchXcsrfToken, 500 + Math.random() * 1500);
        }
    };
	var getSAPClientFromContextFilter = function() {
		var aTerms = oContextFilter.getInternalFilter().getFilterTermsForProperty('SAPClient');
		if (aTerms === undefined || aTerms.length !== 1) {
			oMessageHandler.putMessage(oMessageHandler.createMessageObject({
				code : "5025"
			}));
		}
		return aTerms[0].getValue();
	};

	var initLogicalSystem = function() {
		var logicalSystemConfiguration = oCoreApi.getPersistenceConfiguration().logicalSystem;
		
		
		if (!logicalSystemConfiguration) {
			sLogicalSystem = sSapClientFromFilter;
			return;
		}
		var sServiceRoot = logicalSystemConfiguration.service;
		var sEntityType = logicalSystemConfiguration.entityType;
		var sSapClientFromFilter = getSAPClientFromContextFilter();

		if(sServiceRoot === null){
			sLogicalSystem = sSapClientFromFilter;
			return;
		}		
		
		if(sEntityType === undefined) {
			sEntityType = sap.apf.core.constants.entitySets.logicalSystem;
		}
		
		if (sSapClient === sSapClientFromFilter) {
			return;
		}
		
		sSapClient = sSapClientFromFilter;
		var oFilter = new sap.apf.core.utils.Filter(oMessageHandler, "SAPClient", 'eq', sSapClient);
		var sUrl = oCoreApi.getUriGenerator().getAbsolutePath(sServiceRoot);
		sUrl = sUrl + oCoreApi.getUriGenerator().buildUri(oMessageHandler, sEntityType, [ 'LogicalSystem' ], oFilter, undefined, undefined, undefined, undefined, undefined, 'Results');
		var oRequest = {
			requestUri : sUrl,
			method : "GET",
			headers : {
				"x-csrf-token" : sXsrfToken
			},
			async : false
		};
		var fnOnSuccess = function(oData) {
			if (oData && oData.results && oData.results instanceof Array && oData.results.length === 1 && oData.results[0].LogicalSystem) {
				sLogicalSystem = oData.results[0].LogicalSystem;
			} else {
				oMessageHandler.putMessage(oMessageHandler.createMessageObject({
					code : "5026",
					aParameters : [ sSapClient ]
				}));
			}
		};
		var fnError = function(oError) {
			var oMessageObject = oMessageHandler.createMessageObject({
				code : "5026",
				aParameters : [ sSapClient ]
			});
			if (oError.messageObject !== undefined && oError.messageObject.type === "messageObject" ) {
				oMessageObject.setPrevious(oError.messageObject);
			}
			
			oMessageHandler.putMessage(oMessageObject);
		};
		that.odata(oRequest, fnOnSuccess, fnError);
	};
};
}; // end of sap/apf/core/sessionHandler.js
if ( !jQuery.sap.isDeclared('sap.apf.core.step') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/*global sap, jQuery */
jQuery.sap.declare("sap.apf.core.step");



(function() {
    'use strict';
/**
 * @private
 * @class A step is a runtime container for binding and request. 
 * @name sap.apf.core.Step
 * @param {object} oMessageHandler Message handler instance
 * @param {object} oStepConfig Step configuration object from analytical content configuration
 * @param {sap.apf.core.ConfigurationFactory} oFactory
 * @param {string} [sRepresentationId] the representation, that shall be selected
 * @returns {sap.apf.core.Step} 
 */
sap.apf.core.Step = function(oMessageHandler, oStepConfig, oFactory, sRepresentationId) {
	oMessageHandler.check(oStepConfig !== undefined, "Step: step configuration is missing");
	oMessageHandler.check(oStepConfig.binding !== undefined, "No binding assigned to step " + oStepConfig.id + " in analytical configuration", sap.apf.core.constants.message.code.errorCheckConfiguration);

	var that = this;
	var oBinding, oRequest, oCachedFilter, oCachedRequestOptions;
	var oAdditionalConfigurationProperties = jQuery.extend(true, {}, oStepConfig);
	// delete properties from step template which are not needed in step instance
	delete oAdditionalConfigurationProperties.id;
	delete oAdditionalConfigurationProperties.picture;
	delete oAdditionalConfigurationProperties.hoverPicture;
	delete oAdditionalConfigurationProperties.title;
	delete oAdditionalConfigurationProperties.longTitle;
	delete oAdditionalConfigurationProperties.type;
	delete oAdditionalConfigurationProperties.thumbnail;
	delete oAdditionalConfigurationProperties.categories;
	
	/**
	 * @private
     * @description Contains 'step'
	 * @returns {string}
	 */
	this.type = oStepConfig.type;

	/**
     * @private
	 * @description Contains 'title'
	 * @returns {string}
	 */
	this.title = jQuery.extend(true, {}, oStepConfig.title);
	
	/**
     * @private
     * @description Contains 'longTitle'
	 * @returns {string}
	 */
	this.longTitle = undefined;
	if (oStepConfig.longTitle) {
		this.longTitle = jQuery.extend(true, {}, oStepConfig.longTitle);
	}
	
	/**
     * @private
	 * @description Contains 'thumbnail'
	 * @returns {string}
	 */
	this.thumbnail = jQuery.extend(true, {}, oStepConfig.thumbnail);

	/**
     * @private
	 * @description Contains 'categories'
	 * @returns {object[]}
	 */
	this.categories = oStepConfig.categories;

	/**
     * @private
	 * @description Releases all resources of the step as precondition for garbage collection
	 * 
	 */
	this.destroy = function() {
		if (oBinding) {
			oBinding.destroy(); 
		}
		oRequest = undefined;
		oCachedFilter = undefined;
		oCachedRequestOptions = undefined;
		oBinding = undefined;
		that = undefined;
	};
	/**
	 * @private
	 * @function
	 * @name sap.apf.core.Step#getAdditionalConfigurationProperties
	 * @description Returns additional properties from step template
	 * @returns {object}
	 */
	this.getAdditionalConfigurationProperties = function() {
		return oAdditionalConfigurationProperties;
	};

	/** 
	 * @private
	 * @function
	 * @name sap.apf.core.Step#update
	 * @description Do not use. Not part of the APF API. 
	 * Method should only be called internally by APF. 
	 * APF consumers must call sap.apf.updatePath() instead.
	 * @returns undefined
	 */
	this.update = function(oFilterForRequest, callbackAfterRequest) {
		var oCurrentRequestOptions = oBinding.getRequestOptions();

		var bFilterChanged = !oFilterForRequest.isEqual(oCachedFilter);
		var bRequestOptionsChanged = !areRequestOptionsEqual(oCachedRequestOptions, oCurrentRequestOptions);

		if (oRequest && (bFilterChanged || bRequestOptionsChanged)) {
			oRequest.sendGetInBatch(oFilterForRequest, callbackAfterRequest, oCurrentRequestOptions);
		} else {
			callbackAfterRequest({}, true);
		}
 	};
 	/**
 	 * @private
 	 * @function
 	 * @name sap.apf.core.Step#determineFilters
 	 * @description Do not use. Not part of the APF API.
 	 * Called APF internally from path update to invoke filter calculation on step.
 	 * @param {sap.apf.utils.Filter} oFilter
 	 * @returns undefined
 	 */
 	this.determineFilter = function(oCumulatedFilter, callbackFromStepFilterProcessing) {
 		if(mappingRequired() && this.getFilter().toUrlParam()) {
	 		var oRequestConfig = oFactory.getConfigurationById(oStepConfig.filterMapping.requestForMappedFilter);
 			oRequestConfig.selectProperties = oStepConfig.filterMapping.target;
 			var oMappingRequest = oFactory.createRequest(oRequestConfig);
 			var oMergedFilter = oCumulatedFilter.addAnd(this.getFilter()); 	
 			sap.apf.utils.executeFilterMapping(oMergedFilter, oMappingRequest, oStepConfig.filterMapping.target, localCallback, oMessageHandler);
 		} else {
 			callbackFromStepFilterProcessing(this.getFilter());
 		}
 		
 		function localCallback(oMappedFilter, oMessageObject){
 			  if(!oMessageObject){
		 	 	  if(oStepConfig.filterMapping.keepSource === 'true') {
		 	 		var oMappedFilter = that.getFilter().addAnd(oMappedFilter);
		 	 	  }
		 	 	  callbackFromStepFilterProcessing(oMappedFilter);
 			  }
	 	}
 	}; 	
	/**
	 * @private
	 * @function
	 * @name sap.apf.core.Step#setFilter
	 * @description Sets the cumulative filter.
	 * @param {sap.apf.utils.Filter} oFilter
	 * @returns undefined
	 */
	this.setFilter = function(oFilter) {
		return oBinding.setFilter(oFilter);
	};
	/**
	 * @private
	 * @function
	 * @name sap.apf.core.Step#getFilter
	 * @description Fetches the selection from the representation. 
	 * @returns {sap.apf.core.utils.Filter} 
	 */
	this.getFilter = function() {
		return oBinding.getFilter();
	};

	/** 
	 * @private
	 * @function
	 * @name sap.apf.core.Step#setData
	 * @description Do not use. Not part of the APF API. 
	 * Method should only be called internally by APF.
	 * @returns undefined
	 */
	this.setData = function(oDataResponse, oFilterThatHasBeenUsedToRetrieveData) {
		oCachedFilter = oFilterThatHasBeenUsedToRetrieveData.copy();
		oCachedRequestOptions = jQuery.extend({}, oBinding.getRequestOptions());
		oBinding.setData(oDataResponse);
	};

	/**
	 * @private
	 * @function
	 * @name sap.apf.core.Step#getRepresentationInfo
	 * @description Returns an array of representation information objects.
	 * @returns {object[]}
	 */
	this.getRepresentationInfo = function() {
		return oBinding.getRepresentationInfo();
	};

	/**
	 * @private
	 * @function
	 * @name sap.apf.core.Step#getSelectedRepresentationInfo
	 * @description Returns the representation information object of the selected representation. 
	 * @returns {object}
	 */
	this.getSelectedRepresentationInfo = function() {
		return oBinding.getSelectedRepresentationInfo();
	};

	/**
	 * @private
	 * @function
	 * @name sap.apf.core.Step#getSelectedRepresentation
	 * @description Returns the selected representation object. 
	 * @returns {sap.apf.ui.representations.representationInterface}
	 */
	this.getSelectedRepresentation = function() {
		return oBinding.getSelectedRepresentation();
	};

	/**
	 * @private
	 * @function
	 * @name sap.apf.core.Step#setSelectedRepresentation
	 * @description Sets the selected representation via representation id. 
	 * The selected representation receives the response data through setData().  
	 * @param {string} sRepresentationId The representation id used to identify the representation. 
	 * @returns {undefined}
	 */
	this.setSelectedRepresentation = function(sRepresentationId) {
		oBinding.setSelectedRepresentation(sRepresentationId);
	};
	/** 
	 * @private
	 * @function
	 * @name sap.apf.core.Step#serialize
	 * @description Do not use. Not part of the APF API. 
	 * Method should only be called internally by APF.
	 * @returns {object}
	 */
	this.serialize = function() {
		return {
            stepId : oStepConfig.id,
            binding : oBinding.serialize()
        };
	};
	/** 
	 * @private
	 * @function
	 * @name sap.apf.core.Step#deserialize
	 * @description Do not use. Not part of the APF API. 
	 * Method should only be called internally by APF.
	 * @returns {object}
	 */
	this.deserialize = function(oSerializableStep) {
		oBinding.deserialize(oSerializableStep.binding);
		oMessageHandler.check(oStepConfig.id, oSerializableStep.stepId, "sap.apf.core.step.deserialize inconsistent serialization data - id " + oSerializableStep.stepId);
		return this;
	};
	/** 
     * @private
     * @function
     * @name sap.apf.core.Step#getAssignedNavigationTargets
     * @description Do not use. Not part of the APF API. 
     * Method should only be called internally by APF.
     * @returns {object}
     */
	this.getAssignedNavigationTargets = function() {
	    return oStepConfig.navigationTargets;
	};
	initialize();

	// private functions
	
	function initialize() {
		oBinding = oFactory.createBinding(oStepConfig.binding, undefined, undefined, sRepresentationId);
		delete oAdditionalConfigurationProperties.binding;
		if (oStepConfig.request !== undefined && oStepConfig.request !== "") {
			oRequest = oFactory.createRequest(oStepConfig.request);
			delete oAdditionalConfigurationProperties.request;
		}
	}
	function areRequestOptionsEqual(oOptions1, oOptions2) {
		var nLength1 = 0;
		var nLength2 = 0;
		var property;
		for(property in oOptions1) {
			nLength1++;
		}
		for(property in oOptions2) {
			nLength2++;
		}
		if (nLength1 !== nLength2) {
			return false;
		}
		for(property in oOptions1) {
            if(!oOptions1.hasOwnProperty(property)) {
                continue;
            }
			if (typeof oOptions1[property] === 'object') {
				if(!areRequestOptionsEqual(oOptions1[property], oOptions2[property])) {
					return false;
				}
			} else {
				if (oOptions1[property] !== oOptions2[property]) {
					return false;
				}
			}
		}
		return true;
	}
	function mappingRequired() {
		if(oStepConfig.filterMapping) {
			if(oStepConfig.filterMapping.requestForMappedFilter &&
			   oStepConfig.filterMapping.target instanceof Array &&
			   oStepConfig.filterMapping.keepSource) {
				return true;
			} else {
 				oMessageHandler.putMessage(oMessageHandler.createMessageObject({
					code : "5104"
				}));
 				return false;
			}
		} else {
			return false;
		}
	}
};

}());

}; // end of sap/apf/core/step.js
if ( !jQuery.sap.isDeclared('sap.apf.ui.reuse.controller.facetFilter.controller') ) {
  jQuery.sap.declare('sap.apf.ui.reuse.controller.facetFilter.controller');
/*!
* SAP APF Analysis Path Framework
* 
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
*/


/**
* @class facetFilter
* @memberOf sap.apf.ui.reuse.controller
* @name facetFilter
* @description controller facetFilter view
*/
(function() {
	'use strict';
	/* Selections are cached on init and during change for each list in order to compare whether change occurred
	 * Example : aCachedSelectedKeys = {
	 * 				"__list0" : ["20100101"],
	 * 				"__list1" : ["4000", "5000"]
	 * 			 }
	 */
	var aCachedSelectedKeys = {};
	/* Declaration of facet filter list handler which will be associated with each facet filter list
	 * Example : aFacetFilterListHandlers = {
	 * 				"__list0" : sap.apf.ui.utils.facetFilterListHandler,
	 * 				"__list1" : sap.apf.ui.utils.facetFilterListHandler
	 * 			 }
	 */
	var aFacetFilterListHandlers = {};
	// Boolean to check if facet filter list selections changed
	var bSelectionChanged;
	//Facet filter list converter is used to modify the values in the form understandable by the control
	var oFacetFilterListConverter = new sap.apf.ui.utils.FacetFilterListConverter();
	/**
	 * @private
	 * @function
	 * @name sap.apf.ui.reuse.controller.facetFilter#_updateSelectedFFListValues
	 * @param oController - passed context (this)
	 * @description Updates selected filter values for all facet filter list controls on reset/new
	 * */
	function _updateSelectedFFListValues(oController) {
		var sFacetFilterListId;
		var aFacetFilterListControls = oController.getView().byId("idAPFFacetFilter").getLists();
		//After reset/new, for each facet filter list, fetch the selected values then update on the control
		aFacetFilterListControls.forEach(function(oFacetFilterListControl) {
			sFacetFilterListId = oFacetFilterListControl.getId();
			//Bind function accepts the context as the first parameter and the other parameters are passed as parameters to the function it is bound to
			aFacetFilterListHandlers[sFacetFilterListId].getSelectedFFValues().then(_updateSelectedFilterFor.bind(null, oFacetFilterListControl));
		});
	}
	/**
	 * @private
	 * @function
	 * @name sap.apf.ui.reuse.controller.facetFilter#_populateAndSelectFFListValuesFor
	 * @param oFacetFilterListControl : facet filter list control [Passed from bind function] Example : sap.m.FacetFilterList,
	 * 	      {array} aFilterValues : Filter values for the facet filter list control [Resolved from promise]
	 * 				  Example : [ {
									"key" : "20000101",
									"text" : "1/1/2000",
									"selected" : false
								}, {
									"key" : "20000201",
									"text" : "2/1/2000",
									"selected" : false
								} ]
	 * @description Sets the data in the model for the filter control
	 * It also gets the selected values for the filter control and sets them
	 * */
	function _populateAndSelectFFListValuesFor(oFacetFilterListControl, aFilterValues) {
		var sFacetFilterListId = oFacetFilterListControl.getId();
		var oFacetFilterListModel = oFacetFilterListControl.getModel();
		//Modify the  size limit of the model based on the length of the data so that all values are shown in the facet filter list.
		oFacetFilterListModel.setSizeLimit(aFilterValues.length);
		/* 
		 * Workaround FIX for incident 1580037010 - sap.m.FacetFilterList(To date list) on search selects all items bound to it
		 * Set growing threshold for only single select lists
		 */
		if (!oFacetFilterListControl.getMultiSelect()) {
			oFacetFilterListControl.setGrowingThreshold(aFilterValues.length);
		}
		//Updates the facet filter list with the values
		oFacetFilterListModel.setData(aFilterValues);
		oFacetFilterListModel.updateBindings();
		//After populating values for the list, fetch the selected values then update on the control
		//Bind function accepts the context as the first parameter and the other parameters are passed as parameters to the function it is bound to
		aFacetFilterListHandlers[sFacetFilterListId].getSelectedFFValues().then(_updateSelectedFilterFor.bind(null, oFacetFilterListControl));
	}
	/**
	 * @private
	 * @function
	 * @name sap.apf.ui.reuse.controller.facetFilter#_removeFFListOnError
	 * @param oFacetFilterListControl : facet filter list control [Passed from bind function] Example : sap.m.FacetFilterList
	 * @description Gets the facet filter control if get values failed
	 * It removes the filter from the UI
	 * */
	function _removeFFListOnError(oFacetFilterListControl) {
		var oController = this;
		oController.getView().byId("idAPFFacetFilter").removeList(oFacetFilterListControl);
	}
	/**
	 * @private
	 * @function
	 * @name sap.apf.ui.reuse.controller.facetFilter#_updateSelectedValuesForFFList
	 * @param {Array} Facet filter list data
	 * 		  Example : [ {
							"key" : "20000101",
							"text" : "1/1/2000",
							"selected" : false
						}, {
							"key" : "20000201",
							"text" : "2/1/2000",
							"selected" : false
						} ],
	 * 		  {Array} Selected filter value keys Example : [ "20000201" ]
	 * @description Updates the facet filter list items with the selections
	 * @returns {Array} of facet filter list data with updated selections
	 * 			 Example : [ {
							"key" : "20000101",
							"text" : "1/1/2000",
							"selected" : false
						}, {
							"key" : "20000201",
							"text" : "2/1/2000",
							"selected" : true
						} ]
	 * */
	function _updateSelectedValuesForFFList(aFacetFilterListData, oFFSelectedValues) {
		var index;
		//First we make the selected value of all items as false
		aFacetFilterListData.forEach(function(oFacetFilterListData) {
			oFacetFilterListData.selected = false;
		});
		//Now we update only the items to be selected. This is not done if all values are to be selected.
		if (aFacetFilterListData.length !== oFFSelectedValues.length) {
			oFFSelectedValues.forEach(function(oFFSelectedValue) {
				for(index = 0; index < aFacetFilterListData.length; index++) {
					if (oFFSelectedValue === aFacetFilterListData[index].key) {
						aFacetFilterListData[index].selected = true;
						break;
					}
				}
			});
		}
		return aFacetFilterListData;
	}
	/**
	 * @private
	 * @function
	 * @name sap.apf.ui.reuse.controller.facetFilter#_updateSelectedFilterFor
	 * @param oFacetFilterListControl : facet filter list control [Passed from bind function] Example : sap.m.FacetFilterList,
	 * 		  {Array} aSelectedFilterValues : Selected filter values/keys for the facet filter list control [Resolved from promise] Example : [ "20000201" ]
	 * @description Sets the data in the model for the filter control
	 * */
	function _updateSelectedFilterFor(oFacetFilterListControl, aSelectedFilterValues) {
		var sFacetFilterListId = oFacetFilterListControl.getId();
		var oFacetFilterListModel = oFacetFilterListControl.getModel();
		var aFacetFilterListDataSet = oFacetFilterListModel.getData();
		/*
		 * Caching the selected values for later updates( to compare and check whether changes were made)
		 */
		aCachedSelectedKeys[sFacetFilterListId] = aSelectedFilterValues;
		//Updates the facet filter list data with the selected values
		aFacetFilterListDataSet = _updateSelectedValuesForFFList(aFacetFilterListDataSet, aSelectedFilterValues);
		oFacetFilterListModel.setData(aFacetFilterListDataSet);
		oFacetFilterListModel.updateBindings();
	}
	sap.ui.controller("sap.apf.ui.reuse.controller.facetFilter", {
		/**
		 * @public
		 * @function
		 * @name sap.apf.ui.reuse.controller.facetFilter#onInit
		 * @description Called on initialization of the view
		 * Instantiates all facet filter list handlers
		 * Populates and selects the filter values
		 * */
		onInit : function() {
			var oController = this, sFacetFilterListId;
			bSelectionChanged = false;
			var oViewData = oController.getView().getViewData();
			/*
			 * Creation of a facetFilterListHandler for each facet filter list
			 * Key of each facetFilterListhandler is the ID of the facet filter list control
			 */
			oViewData.aConfiguredFilters.forEach(function(oConfiguredFilter, nIndex) {
				sFacetFilterListId = oController.getView().byId("idAPFFacetFilter").getLists()[nIndex].getId();
				aFacetFilterListHandlers[sFacetFilterListId] = new sap.apf.ui.utils.FacetFilterListHandler(oViewData.oCoreApi, oViewData.oUiApi, oConfiguredFilter, oFacetFilterListConverter);
			});
			oController.populateAndSelectFFListValues();
		},
		/**
		 * @public
		 * @function
		 * @name sap.apf.ui.reuse.controller.facetFilter#populateAndSelectFFListValues
		 * @description Fetches filter values for all facet filter list controls. Later fetches the selected values for the control and updates
		 * */
		populateAndSelectFFListValues : function() {
			var oController = this, sFacetFilterListId;
			var aFacetFilterListControls = oController.getView().byId("idAPFFacetFilter").getLists();
			aFacetFilterListControls.forEach(function(oFacetFilterListControl) {
				sFacetFilterListId = oFacetFilterListControl.getId();
				/*
				 * For each facet filter list, fetch the values then populate the values on the control
				 * If fetch of values failed remove the facet filter list from UI
				 */
				//Bind function accepts the context as the first parameter and the other parameters are passed as parameters to the function it is bound to
				aFacetFilterListHandlers[sFacetFilterListId].getFacetFilterListData().then(_populateAndSelectFFListValuesFor.bind(null, oFacetFilterListControl), _removeFFListOnError.bind(oController, oFacetFilterListControl));
			});
		},
		/**
		 * @public
		 * @function
		 * @name sap.apf.ui.reuse.controller.facetFilter#onListClose
		 * @param {oEvent} List Close Event
		 * @description Sets the selected values on the filter and calls the selection changed event
		 * */
		onListClose : function(oEvent) {
			var oController = this;
			var oClosedListControl = oEvent.getSource();
			var bIsAllSelected = oEvent.getParameter('allSelected');
			var aSelectedKeys = [], aSelectedItems, sClosedListId, aCachedSelections, sSortedSelectedKeys, sSortedCachedSelections, bFilterChanged;
			//Fetch all item keys from the control if 'All' was selected
			if (bIsAllSelected) {
				aSelectedItems = oClosedListControl.getItems();
				if (!jQuery.isEmptyObject(aSelectedItems)) {
					aSelectedKeys = aSelectedItems.map(function(oData) {
						return oData.getKey();
					});
				}
			} else {//Fetch only the selected item keys from the control
				aSelectedItems = oClosedListControl.getSelectedItems();
				aSelectedKeys = aSelectedItems.map(function(oItem) {
					return oItem.getKey();
				});
			}
			//Compare current selections with cache.
			sClosedListId = oClosedListControl.getId();
			aCachedSelections = aCachedSelectedKeys[sClosedListId];
			if (aSelectedKeys.length !== 0 && aCachedSelections !== undefined) {
				sSortedSelectedKeys = JSON.stringify(aSelectedKeys.sort());
				sSortedCachedSelections = JSON.stringify(aCachedSelections.sort());
				bFilterChanged = (sSortedSelectedKeys === sSortedCachedSelections);
				//After comparison of cached and current selections, if filters changed update the cached keys and set the selected keys on the filter
				if (!bFilterChanged) {
					aCachedSelectedKeys[sClosedListId] = aSelectedKeys;
					//Boolean is set to true since there was a change in selections of facet filter list
					bSelectionChanged = true;
					aFacetFilterListHandlers[sClosedListId].setSelectedFFValues(aSelectedKeys);
					//Trigger selection changed to update path
					oController.getView().getViewData().oUiApi.selectionChanged(true);
				}
			}
		},
		/**
		 * @public
		 * @function
		 * @name sap.apf.ui.reuse.controller.facetFilter#onResetPress
		 * @description Reset the initial filter for all the facet filter list controls and triggers update of selected values on control
		 * */
		onResetPress : function() {
			// this to the current function is the controller object passed from the view
			var oController = this;
			//Check to see if there is any change in initial state of facet filter
			if (bSelectionChanged) {
				oController.getView().getViewData().oStartFilterHandler.resetVisibleStartFilters();
				//Calling _updateSelectedFFListValues with the controller context
				_updateSelectedFFListValues(oController);
				//Trigger selection changed to update path
				oController.getView().getViewData().oUiApi.selectionChanged(true);
				//Boolean is reset after facet filter lists are reset to initial state
				bSelectionChanged = false;
			}
		}
	});
}());
}; // end of sap/apf/ui/reuse/controller/facetFilter.controller.js
if ( !jQuery.sap.isDeclared('sap.apf.core.configurationFactory') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/*global sap, jQuery*/

(function () {
    'use strict';

    jQuery.sap.declare("sap.apf.core.configurationFactory");
    
    
    
    
    
    
    

    /**
     * @private
     * @class This class loads the configuration object, registers its properties and provides getters to receive references or copies of them.
     */
    sap.apf.core.ConfigurationFactory = function (oInject) {
        // Private Variables and functions
        var that = this;
        var idRegistry = new sap.apf.utils.Hashtable(oInject.messageHandler);
        var setItem = function (oItem) {
            oInject.messageHandler.check(oItem !== undefined && oItem.hasOwnProperty("id") !== false, "oItem is undefined or property 'id' is missing", sap.apf.core.constants.message.code.errorCheckConfiguration);
            if (!idRegistry) {
                idRegistry = new sap.apf.utils.Hashtable(oInject.messageHandler);
            }
            var result = idRegistry.setItem(oItem.id, oItem);
            oInject.messageHandler.check((result === undefined), "Configuration includes duplicated identifiers (IDs)", sap.apf.core.constants.message.code.errorCheckConfigurationWarning);
        };
        var getItemsByType = function (type) {
            var aResults = [];
            if (idRegistry.getNumberOfItems() !== 0) {
                idRegistry.each(function (index, element) {
                    if (element.type === type) {
                        aResults.push(element);
                    }
                });
                return aResults;
            }
            oInject.messageHandler.putMessage(oInject.messageHandler.createMessageObject({
                code: "5020"
            }));
            return aResults;
        };

        function loadStep(oStep) {
            if (oStep.type === undefined) {
                oStep.type = "step";
            }
            setItem(oStep);
        }

        function loadSteps(aSteps) {
            oInject.messageHandler.check(aSteps !== undefined && aSteps instanceof Array !== false, "aSteps is missing or not an Array", sap.apf.core.constants.message.code.errorCheckConfiguration);
            aSteps.forEach(function (step) {
                loadStep(step);
            });
        }

        function loadRequest(oRequest) {
            if (oRequest.type === undefined) {
                oRequest.type = "request";
            }
        	if(oRequest.entitySet) {
        		oRequest.entityType = oRequest.entitySet;
        		delete oRequest.entitySet;
        	}
            setItem(oRequest);
        }

        function loadNavigationTarget(navigationTarget) {
        	if (navigationTarget.type  === undefined) {
        		navigationTarget.type = "navigationTarget";
        	}
        	setItem(navigationTarget);
        }
        function loadRequests(aRequests) {
            oInject.messageHandler.check(aRequests !== undefined && aRequests instanceof Array !== false, "aRequests is missing or not an Array", sap.apf.core.constants.message.code.errorCheckConfiguration);
            aRequests.forEach(function (request) {
                loadRequest(request);
            });
        }

        function loadBinding(oBinding) {
            function checkRepresentationForID() {
                var representationRegistry = new sap.apf.utils.Hashtable(oInject.messageHandler);
                oBinding.representations.forEach(function (representation) {
                    //check for existing id
                    if (!(representation.id && typeof representation.id === "string")) {
                        oInject.messageHandler.putMessage(oInject.messageHandler.createMessageObject({
                            code: "5028",
                            aParameters: [ oBinding.id ]
                        }));
                    }
                    //check for duplicated id
                    if (representationRegistry.setItem(representation.id, representation.id)) {
                        oInject.messageHandler.putMessage(oInject.messageHandler.createMessageObject({
                            code: "5029",
                            aParameters: [ oBinding.id ]
                        }));
                    }
                });
            }

            if (oBinding.type === undefined) {
                oBinding.type = "binding";
            }
            oInject.messageHandler.check(oBinding.id !== undefined, "binding has no id");
            oInject.messageHandler.check(oBinding.representations !== undefined && oBinding.representations instanceof Array !== false, "representations for binding " + oBinding.id + " not defined", sap.apf.core.constants.message.code.errorCheckConfiguration);

            checkRepresentationForID();
            setItem(oBinding);
        }

        function loadBindings(aBindings) {
            oInject.messageHandler.check(aBindings !== undefined && aBindings instanceof Array !== false, "aBindings is missing or not an Array", sap.apf.core.constants.message.code.errorCheckConfiguration);
            aBindings.forEach(function (binding) {
                loadBinding(binding);
            });
        }

        function loadNavigationTargets(navigationTargets) {
        	oInject.messageHandler.check(navigationTargets !== undefined && navigationTargets instanceof Array !== false, "navigationTarget is missing or not an Array", sap.apf.core.constants.message.code.errorCheckConfiguration);
        	navigationTargets.forEach(function (navigationTarget) {
        		loadNavigationTarget(navigationTarget);
        	});
        }
        function loadCategory(oCategoryConfig) {
            if (oCategoryConfig.type === undefined) {
                oCategoryConfig.type = "category";
            }
            setItem(oCategoryConfig);
        }

        function loadCategories(aCategories) {
            oInject.messageHandler.check(aCategories !== undefined && aCategories instanceof Array !== false, "aCategories is missing or not an Array", sap.apf.core.constants.message.code.errorCheckConfiguration);
            aCategories.forEach(function (category) {
            	var aSteps = category.steps;
                oInject.messageHandler.check(aSteps !== undefined && aSteps instanceof Array !== false, "steps for category " + category.id + " are missing or not an Array", sap.apf.core.constants.message.code.errorCheckConfiguration);
                aSteps.forEach(function(step){
                	oInject.messageHandler.check(step.type && step.type === "step" && step.id, "step with wrong format assigned to category '" + category.id + "'");
                	oInject.messageHandler.check(that.existsConfiguration(step.id), "step with id '" + step.id + "' which is assigned to category '" + category.id + "' does not exist");
                });
                loadCategory(category);
            });
        }

        function isPredefinedRepresentation(representationTypeId) {
            var result = false;
            var aRepresentationTypes = sap.apf.core.representationTypes();
            aRepresentationTypes.forEach(function (representationTypeConfig) {
                if (representationTypeId === representationTypeConfig.id) {
                    result = true;
                }
            });
            return result;
        }

        function loadRepresentationType(oRepresentationTypeConfig) {
            var representationConstructorCandidate;
            if (oRepresentationTypeConfig.type === undefined) {
                oRepresentationTypeConfig.type = "representationType";
            }
            if (!isPredefinedRepresentation(oRepresentationTypeConfig.id)) {
                representationConstructorCandidate = sap.apf.utils.extractFunctionFromModulePathString(oRepresentationTypeConfig.constructor);
                if (!jQuery.isFunction(representationConstructorCandidate)) {
                    oInject.messageHandler.putMessage(oInject.messageHandler.createMessageObject({code: '5030', parameters: [oRepresentationTypeConfig.id]}));
                }
            }
            setItem(oRepresentationTypeConfig);
        }

        function loadRepresentationTypes(aRepresentationTypes) {
            oInject.messageHandler.check(aRepresentationTypes !== undefined && aRepresentationTypes instanceof Array !== false, "aRepresentationInfo is missing or not an Array", sap.apf.core.constants.message.code.errorCheckConfiguration);
            aRepresentationTypes.forEach(function (representationType) {
                loadRepresentationType(representationType);
            });
        }

        function loadFacetFilter(oFacetFilter) {
            if (oFacetFilter.type === undefined) {
                oFacetFilter.type = "facetFilter";
            }
            that.addObject(oFacetFilter);
        }

        function loadFacetFilters(aFacetFilters) {
            oInject.messageHandler.check(aFacetFilters !== undefined && aFacetFilters instanceof Array !== false, "Facet filter configuration is missing or not an Array", sap.apf.core.constants.message.code.errorCheckConfiguration);
            aFacetFilters.forEach(function (facetFilter) {
                loadFacetFilter.call(that, facetFilter);
            });
        }

        var loadPredefinedRepresentationTypes = function (aRepresentationTypes) {
            loadRepresentationTypes(aRepresentationTypes);
        };
        /**
         * @private
         * @class Step templates are runtime objects, which contain analysis step information based on the analytical content configuration.
         * @name sap.apf.core.configurationFactory~StepTemplate
         */
        function StepTemplate (oStepConfig, oFactory) {
            function getRepresentations(oStepConfig, oConfigurationFactory) {
                var aRepresentations = oConfigurationFactory.getConfigurationById(oStepConfig.binding).representations;
                if (aRepresentations) {
                    return aRepresentations;
                }
                oInject.messageHandler.check(false, 'Binding of step with ID "' + oStepConfig.id + '" does not contain any representations.', sap.apf.core.constants.message.code.errorCheckConfigurationWarning);

            }

            function getRepresentationInfo(oStepConfig, oConfigurationFactory) {
                var aRepresentations;
                var localRepresentationInfo = [];
                if (oStepConfig.binding) {
                    aRepresentations = getRepresentations(oStepConfig, oConfigurationFactory);
                    aRepresentations.forEach(function (representation) {
                        var oRepresentationType = jQuery.extend(true, {}, oConfigurationFactory.getConfigurationById(representation.representationTypeId));
                        oRepresentationType.representationId = representation.id;
                        oRepresentationType.representationLabel = representation.label;
                        oRepresentationType.parameter =  jQuery.extend(true, {}, representation.parameter);
                        localRepresentationInfo.push(oRepresentationType);
                    });
                    return localRepresentationInfo;
                }
                oInject.messageHandler.check(false, 'Step with ID "' + oStepConfig.id + '" does not contain any binding references.',
                    sap.apf.core.constants.message.code.errorCheckConfigurationWarning);
            }

            var oStepTemplate = jQuery.extend(true, {}, oStepConfig);
            var aRepresentationInfo = getRepresentationInfo(oStepConfig, oFactory);
            delete oStepTemplate.request;
            delete oStepTemplate.binding;
            delete oStepTemplate.thumbnail;
            delete oStepTemplate.longTitle;
            /**
             * @memberOf StepTemplate
             * @description Contains 'stepTemplate'
             * @returns {string}
             */
            oStepTemplate.type = "stepTemplate";

            /**
             * @private
             * @function
             * @memberOf sap.apf.core.configurationFactory~StepTemplate
             * @name sap.apf.core.configurationFactory~StepTemplate#getRepresentationInfo
             * @description Returns all representation information that is configured for the step.
             * @returns {object[]}
             */
            oStepTemplate.getRepresentationInfo = function () {
                var aReprInfo = jQuery.extend(true, [], aRepresentationInfo); // clone deep
                aReprInfo.forEach(function (info) {
                    delete info.id;
                    delete info.type;
                    delete info.constructor;
                });
                return aReprInfo;
            };

            return oStepTemplate;
        }
        // Private Func
        // Constructor functions
        var Category = function (oCategoryConfig, context) {
        	var that = this;
            this.type = oCategoryConfig.type;
            this.id = oCategoryConfig.id;
            this.label = oCategoryConfig.label;
            this.stepTemplates = [];
            oCategoryConfig.steps.forEach(function(stepReference){
            	var step = context.getConfigurationById(stepReference.id);
            	that.stepTemplates.push(new StepTemplate(step, context));
            });
            return this;
        };
        var Thumbnail = function (oThumbnailConfig, oFactory) { // oFactory needed when accessing object of configurationFactory!
            this.type = "thumbnail";
            if (oThumbnailConfig === undefined) {
                return this;
            }
            this.leftUpper = oFactory.createLabel(oThumbnailConfig.leftUpper);
            this.rightUpper = oFactory.createLabel(oThumbnailConfig.rightUpper);
            this.leftLower = oFactory.createLabel(oThumbnailConfig.leftLower);
            this.rightLower = oFactory.createLabel(oThumbnailConfig.rightLower);
            this.altTitle = oFactory.createLabel(oThumbnailConfig.altTitle);
            return this;
        };
        /**
         * @private
         * @description Creates and returns a new thumbnail object.
         * @param oThumbnailConfig
         * @return Object
         */
        this.createThumbnail = function (oThumbnailConfig) {
            return new Thumbnail(oThumbnailConfig, this);
        };
        function Label (oLabelConfig) {
            this.type = "label";
            this.kind = oLabelConfig.kind;
            if (this.kind === "text") {
                this.file = oLabelConfig.file;
                this.key = oLabelConfig.key;
            } else if (this.kind === "property") {
                this.property = oLabelConfig.property;
            } else if (this.kind === "sapLabel") {
                this.labelOf = oLabelConfig.labelOf;
            }
        }
        /**
         * @private
         * @param oLabelConfig
         * @return {Object|undefined} New Object of type Label
         */
        this.createLabel = function (oLabelConfig) {
            return new Label(oLabelConfig, this);
        };
        // Public Func
        /**
         * @private
         * @description Loads all properties of the input configuration object, which can also include custom error texts.
         * Note: For a request object in oConfiguration.requests, the property entityType is deprecated. Instead of entityType, the property entitySet shall be used. 
         * @param oConfiguration configuration object
         */
        this.loadConfig = function (oConfiguration) {
            idRegistry = new sap.apf.utils.Hashtable(oInject.messageHandler);
            if(oConfiguration.applicationTitle) {
            	idRegistry.setItem('applicationTitle', oConfiguration.applicationTitle);
            }
            
           	var inject = { constructor : { hashtable      : sap.apf.utils.Hashtable},
     			           instance :    { messageHandler : oInject.messageHandler}};
            sap.apf.utils.migrateConfigToCategoryStepAssignment(oConfiguration, inject);	
        	
            var aRepresentationTypes = sap.apf.core.representationTypes();
            loadPredefinedRepresentationTypes(aRepresentationTypes);
            loadSteps(oConfiguration.steps);
            loadCategories(oConfiguration.categories);
            loadRequests(oConfiguration.requests);
            loadBindings(oConfiguration.bindings);
            if (oConfiguration.representationTypes) {
                loadRepresentationTypes(oConfiguration.representationTypes);
            }
            if (oConfiguration.facetFilters) {
                loadFacetFilters.call(this, oConfiguration.facetFilters);
            }
            if (oConfiguration.navigationTargets) {
            	loadNavigationTargets(oConfiguration.navigationTargets);
            }
        };
        /**
         * @private
         * @description Adds an object to the configuration factory
         * @param {object} configurationObject - Must contain valid values for 'type'-property and 'id'.
         * Further properties are type specific.
         * @returns undefined
         */
        this.addObject = function (configurationObject) {
            if(!sap.apf.core.constants.configurationObjectTypes.hasOwnProperty(configurationObject.type)) {
//            if (!(configurationObject.type in sap.apf.core.constants.configurationObjectTypes)) {
                oInject.messageHandler.putMessage(oInject.messageHandler.createMessageObject({
                    code: "5033",
                    aParams: [configurationObject.type]
                }));
            }
            if (!(configurationObject.property)) {
                oInject.messageHandler.putMessage(oInject.messageHandler.createMessageObject({
                    code: "5034"
                }));
            }
            idRegistry.setItem(configurationObject.id, configurationObject);
        };
        /**
         * @private
         * @description Returns a reference of a configuration object. Not a copy.
         * @param sId
         * @returns Object
         */
        this.getConfigurationById = function (sId) {
            return idRegistry.getItem(sId);
        };

        /**
         * @private
         * @description Returns true, if configuration object exists.
         * @param sId
         * @returns {boolean}
         */
        this.existsConfiguration = function (sId) {
            return idRegistry.hasItem(sId);
        };

        /**
         * @private
         * @description Returns service documents
         * @returns {Array}
         */
        this.getServiceDocuments = function () {
            var aRequestItems = getItemsByType("request");
            var aServiceDocuments = [];
            aRequestItems.forEach(function (item) {
                aServiceDocuments.push(item.service);
            });
            return sap.apf.utils.eliminateDuplicatesInArray(oInject.messageHandler, aServiceDocuments);
        };

        /**
         * @private
         * @description Returns the navigation targets. Currently no parameters are supported.
         * @returns Array of navigation targets
         */
        this.getNavigationTargets = function() {
        	var navigationTargets = getItemsByType("navigationTarget");
        	return jQuery.extend(true, [], navigationTargets);
        };
        /**
         * @private
         * @description Returns new step templates created from all step configuration objects, containing static information only.
         *      Note that a step config object is used to create an object of type stepTemplate as well as a runtime object of type step.
         * @returns Array of objects
         */
        this.getStepTemplates = function () {
            var aItems = getItemsByType("step");
            var aStepTemplates = [];
            aItems.forEach(function (item, stepConfig) {
                aStepTemplates[stepConfig] = new StepTemplate(item, that);
            });
            return aStepTemplates;
        };
        /**
         * @private
         * @description Returns array of cloned facet filter configurations
         * @returns Array of objects
         */
        this.getFacetFilterConfigurations = function () {
            var facetFilters = getItemsByType("facetFilter");
            var resolvedFunction;
            facetFilters = jQuery.extend(true, [], facetFilters);
            facetFilters.forEach(function (facetFilter) {
                if (facetFilter.preselectionFunction) {
                    resolvedFunction = sap.apf.utils.extractFunctionFromModulePathString(facetFilter.preselectionFunction);
                    if (!jQuery.isFunction(resolvedFunction)) {
                        oInject.messageHandler.putMessage(oInject.messageHandler.createMessageObject({code: '5035', parameters: [facetFilter.id]}));
                        facetFilter.preselectionFunction = undefined;
                    } else {
                        facetFilter.preselectionFunction = resolvedFunction;
                    }
                }
            });
            return facetFilters;
        };
        /**
         * @private
         * @description Returns new category objects of all loaded category configuration objects.
         * @returns Array
         */
        this.getCategories = function () {
            var aItems = getItemsByType("category");
            var aCategories = [];
            aItems.forEach(function (item, inx) {
                aCategories[inx] = new Category(item, that);
            });
            return aCategories;
        };
        /**
         * @private
         * @description Creates and returns a new step object from its specified configuration object.
         * @param sStepId Identifies the configuration object. If the step id is not known an error will be thrown.
         * @param {string} [sRepresentationId] the representation, that shall be selected
         * @returns Object
         */
        this.createStep = function (sStepId, sRepresentationId) {
            var oStepConfig = this.getConfigurationById(sStepId);
            oInject.messageHandler.check((oStepConfig !== undefined && oStepConfig.type === "step"), "Error - referenced object is undefined or has not type step", sap.apf.core.constants.message.code.errorCheckConfiguration);
            oInject.messageHandler.check(sap.apf.core.Step !== undefined, "Step must be defined ", sap.apf.core.constants.message.code.errorCheckConfiguration);
            oInject.messageHandler.check(typeof sap.apf.core.Step === "function", "Step must be Ctor function");
            return new sap.apf.core.Step(oInject.messageHandler, oStepConfig, this, sRepresentationId);
        };
        /**
         * @private
         * @description Creates and returns a new binding object, by the identified configuration object.
         * @param sBindingId Identifies the configuration object. If the id is not known an error will be thrown.
         * @param oTitle Short title, type label.
         * @param oLongTitle Long title, type label
         * @param {string} [sRepresentationId] the representation, that shall be selected
         * @returns {Object}
         */
        this.createBinding = function (sBindingId, oTitle, oLongTitle, sRepresentationId) {
            var oBindingConfig = this.getConfigurationById(sBindingId);
            oInject.messageHandler.check((oBindingConfig !== undefined && oBindingConfig.type === "binding"), "Error - oBindingConfig is undefined or has not type binding", sap.apf.core.constants.message.code.errorCheckConfiguration);
            oBindingConfig.oTitle = oTitle;
            oBindingConfig.oLongTitle = oLongTitle;
            return new sap.apf.core.Binding(oInject, oBindingConfig, this, sRepresentationId);
        };
        /**
         * @private
         * @description Creates and returns a new request object.
         * Note: For the request object, the property entityType is deprecated. Instead of entityType, the property entitySet shall be used. 
         * @param {String|Object} request - Request id or request object. If the step id is not known an error will be thrown.
         * @param {Object} request.type {String}
         * @param {Object} request.id {String}
         * @param {Object} request.service {String}
         * @param {Object} request.entitySet}
         * @returns {Object|undefined}
         */
        this.createRequest = function (request) {
        	if(request.entitySet) { // robustness: runtime only handles entityTypes internally -> set entitySet to entityType
        		request.entityType = request.entitySet;
        		delete request.entitySet;
        	}
            var oMessageObject;
            var oRequestConfig;
            function getUniqueId() {
                var date = new Date();
                return Math.random() * date.getTime();
            }
            if (typeof request === "string") {
                oRequestConfig = that.getConfigurationById(request);
                if (!(oRequestConfig !== undefined && oRequestConfig.type === "request")) {
                    oMessageObject = oInject.messageHandler.createMessageObject({
                        code: "5004",
                        aParameters: [ request ]
                    });
                    oInject.messageHandler.putMessage(oMessageObject);
                    return undefined;
                }
            } else {
                oRequestConfig = request;
                oInject.messageHandler.check(oRequestConfig.type && oRequestConfig.type === "request" &&
                        oRequestConfig.service && oRequestConfig.entityType,
                    'Wrong request configuration when creating a new request');
                if (!oRequestConfig.id) {
                    oRequestConfig.id = getUniqueId();
                    setItem(oRequestConfig);
                }

            }
            return new sap.apf.core.Request(oInject, oRequestConfig);
        };

       
        if (oInject.constructor.registryProbe) {
            this.getRegistry = function () {
                return new oInject.constructor.registryProbe(idRegistry);
            };
        }
    };
}());

}; // end of sap/apf/core/configurationFactory.js
if ( !jQuery.sap.isDeclared('sap.apf.core.readRequest') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.core.readRequest");



/**
 * @public
 * @class Facade for sap.apf.core.Request for getting data via the OData protocol. This corresponds to a normal HTTP GET method. Creation is done via APF API.
 * @name sap.apf.core.ReadRequest
 * @param {object} oInject Injection object.
 * @param {object} oInject.coreApi Instance of core API.
 * @param {object} oInject.oMessageHandler The APF Message handler.
 * @param {object} oRequest The object represents an OData GET request.
 * @param {string} sService Service defined by the analytical content configuration.
 * @param {string} sEntityType Entity type defined by the analytical content configuration.
 * @returns {sap.apf.core.ReadRequest}
 */
sap.apf.core.ReadRequest = function (oInject, oRequest, sService, sEntityType) {
	var oCoreApi = oInject.coreApi;
	var oMessageHandler = oInject.messageHandler;
	/**
	 * @description Contains 'readRequest'
	 * @returns {string}
	 */
	this.type = "readRequest";
	/**
	 * @public
	 * @function
	 * @name sap.apf.core.ReadRequest#send
	 * @description Executes an OData request.
	 * @param [{sap.apf.utils.Filter}] oFilter
	 * @param {function} fnCallback  The first argument of the callback function is the received data (as Array). The second argument is {sap.apf.core.EntityTypeMetadata}. The third argument is {sap.apf.core.MessageObject}. 
	 * @param {Object} oRequestOptions - An optional object containing additional query string options
	 * Format: { orderby : [{ property : <property_name>, order : <asc|desc>}], top : <integer>, skip : <integer> }  
	 * @returns undefined
	 */
	this.send = function (oFilter, fnCallback, oRequestOptions) {
		var filter;
		var callbackForRequest = function (oResponse, bNotUpdated) {
			var oMessageObject;
			var oEntityTypeMetadata;
			var aData = [];
			if (oResponse && oResponse.type && oResponse.type === "messageObject") {
				oMessageHandler.putMessage(oResponse); // technically logging
				oMessageObject = oResponse;
			} else {
				aData = oResponse.data;
				oEntityTypeMetadata = oResponse.metadata;
			}
			fnCallback(aData, oEntityTypeMetadata, oMessageObject);
		};
		if (oFilter) {
			filter = oFilter.getInternalFilter();
		} else {
			filter = new sap.apf.core.utils.Filter(oMessageHandler);
		}
		oRequest.sendGetInBatch(filter, callbackForRequest, oRequestOptions);
	};
	/**
	 * @private
     * @deprecated since Version 1.23.1.
	 * @function
	 * @name sap.apf.core.ReadRequest#getMetadata
	 * @description Returns the corresponding meta data object for the read request.
	 * @returns {sap.apf.core.EntityTypeMetadata}
	 */
	this.getMetadata = function () {
		return oCoreApi.getEntityTypeMetadata(sService, sEntityType);
	};
    /**
     * @public
     * @function
     * @name sap.apf.core.ReadRequest#getMetadataFacade
     * @description Returns {sap.apf.core.MetadataFacade} which provides convenience methods for accessing metadata
     * (only for the service document, which is assigned to this read request instance).
     * @param {string} sService Service defined by the request configuration.
     * @returns {sap.apf.core.MetadataFacade}
     */
    this.getMetadataFacade = function () {
        return oCoreApi.getMetadataFacade(sService);
    };
};

}; // end of sap/apf/core/readRequest.js
if ( !jQuery.sap.isDeclared('sap.apf.core.readRequestByRequiredFilter') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */

jQuery.sap.declare("sap.apf.core.readRequestByRequiredFilter");



/**
 * @public
 * @class Facade for sap.apf.core.Request for getting data via the OData protocol. This corresponds to a normal HTTP GET method. Creation is done via APF API.
 * In addition to the handed over filter argument in method send(), the required filters and parameter entity set key properties of the configured entity type are applied, which are determined from path filter. 
 * @name sap.apf.core.ReadRequestByRequiredFilter
 * @param {object} oInject Injection object.
 * @param {object} oInject.coreApi Instance of core API.
 * @param {object} oInject.oMessageHandler The APF Message handler.
 * @param {object} oRequest The object represents an OData GET request.
 * @param {string} sService Service defined by the analytical content configuration.
 * @param {string} sEntityType Entity type defined by the analytical content configuration.
 * @returns {sap.apf.core.ReadRequestByRequiredFilter}
 */
sap.apf.core.ReadRequestByRequiredFilter = function (oInject, oRequest, sService, sEntityType) {
	var oCoreApi = oInject.coreApi;
	var oMessageHandler = oInject.messageHandler;
	var oMetadata;
	
	/**
	 * @description Contains 'readRequestByRequiredFilter'
	 * @returns {string}
	 */
	this.type = "readRequestByRequiredFilter";
	/**
	 * @public
	 * @function
	 * @name sap.apf.core.ReadRequestByRequiredFilter#send
	 * @description Executes an OData request.
	 * @param [{sap.apf.utils.Filter}] oFilter
	 * @param {function} fnCallback The first argument of the callback function is the received data (as Array). The second argument is {sap.apf.core.EntityTypeMetadata}. The third argument is {sap.apf.core.MessageObject}. 
	 * @param {Object} oRequestOptions An optional object containing additional query string options
	 * Format: { orderby : [{ property : <property_name>, order : <asc|desc>}], top : <integer>, skip : <integer> }  
	 * @returns undefined
	 */
	this.send = function (oFilter, fnCallback, oRequestOptions) {
		var oRequestFilter;
		var callbackForRequest = function (oResponse, bNotUpdated) {
			var oMessageObject;
			var oEntityTypeMetadata;
			var aData = [];
			if (oResponse && oResponse.type && oResponse.type === "messageObject") {
				oMessageHandler.putMessage(oResponse); // technically logging
				oMessageObject = oResponse;
			} else {
				aData = oResponse.data;
				oEntityTypeMetadata = oResponse.metadata;
			}
			fnCallback(aData, oEntityTypeMetadata, oMessageObject);
		};
		
		if (!oMetadata) {
			oMetadata = oCoreApi.getMetadata(sService);
		}
		
//		Get parameter entity set key properties
		var aParameterEntitySetKeyProperties = oMetadata.getParameterEntitySetKeyProperties(sEntityType);
		
//		Get required filters
		var sRequiredFilterProperty = "";
		var oEntityTypeMetadata = oMetadata.getEntityTypeAnnotations(sEntityType);
		if (oEntityTypeMetadata.requiresFilter !== undefined && oEntityTypeMetadata.requiresFilter === "true") {
			if (oEntityTypeMetadata.requiredProperties !== undefined) {
				sRequiredFilterProperty = oEntityTypeMetadata.requiredProperties;
			}
		}
		
//		Join parameter entity set key properties & Required filters
		var aRequiredProperties = sRequiredFilterProperty.split(',');
		aParameterEntitySetKeyProperties.forEach(function(property){
			aRequiredProperties.push(property.name); 
		});
		
//		Reduce the context filter to {parameter entity set key properties + Required filters}
		var oProjectedContextFilter = oCoreApi.getContext().getInternalFilter().reduceToProperty(aRequiredProperties);
		
//		Intersect both filters.
		
		if (oFilter) {
			oRequestFilter = oFilter.getInternalFilter();
			oRequestFilter.addAnd(oProjectedContextFilter);
		} else {
			oRequestFilter = oProjectedContextFilter;
		}
		
		
		oRequest.sendGetInBatch(oRequestFilter, callbackForRequest, oRequestOptions);

	};
	/**
     * @public
     * @function
     * @name sap.apf.core.ReadRequestByRequiredFilter#getMetadataFacade
     * @description Returns {sap.apf.core.MetadataFacade} which provides convenience methods for accessing metadata
     * (only for the service document, which is assigned to this read request instance).
     * @param {string} sService Service defined by the request configuration.
     * @returns {sap.apf.core.MetadataFacade}
     */
    this.getMetadataFacade = function () {
        return oCoreApi.getMetadataFacade(sService);
    };
};

}; // end of sap/apf/core/readRequestByRequiredFilter.js
if ( !jQuery.sap.isDeclared('sap.apf.modeler.core.instance') ) {
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
/*global sap, OData, jQuery*/


jQuery.sap.declare("sap.apf.modeler.core.instance");

(function () {
    'use strict';

    jQuery.sap.require('sap.ui.thirdparty.datajs'); // unlisted dependency retained

    
    
      
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /**
     * @class Minimal core object that provides services for error handling, access to ajax/odata and text resources
     * @param {object} persistenceConfiguration Configuration of the persistence service
     * @param {object} inject Constructors, instances and functions, that shall be used
     */
    sap.apf.modeler.core.Instance = function(persistenceConfiguration, inject) {

        var that = this;

        var	ApplicationHandler, 
            ConfigurationHandler,
            ConfigurationEditor,
            ConfigurationObjects,
            ConfigurationFactory,
            Step,
            FacetFilter,
            NavigationTarget,
            Representation,
            ElementContainer,
            Hashtable,
            RegistryProbe,
        	Metadata,
			EntityTypeMetadata,
			MetadataFacade,
			MetadataProperty,
			MetadataFactory,
			LazyLoader,
			StartParameter,
            textHandler,
            messageHandler,
            sessionHandler,
            startParameter,
            persistenceProxy,
            metadataFactory,
            injectForFollowUp,
            injectMetadataFactory,
            injectLazyLoader,
            fnOdataRequestWrapper,
            fnAjax,
            fnLoadApplicationHandler,
            fnLoadConfigurationHandler,
            lazyLoaderForApplicationHandler,
            lazyLoaderForConfigurationHandler,
            actionsPerSemanticObjectHashTable,
            allAvailableSemanticObjects;


        //constructors
        ApplicationHandler = (inject && inject.constructor && inject.constructor.applicationHandler) || sap.apf.modeler.core.ApplicationHandler;
        ConfigurationHandler = (inject && inject.constructor && inject.constructor.configurationHandler) || sap.apf.modeler.core.ConfigurationHandler;
        ConfigurationEditor = (inject && inject.constructor && inject.constructor.configurationEditor) || sap.apf.modeler.core.ConfigurationEditor;
        ConfigurationObjects = (inject && inject.constructor && inject.constructor.configurationObjects) || sap.apf.modeler.core.ConfigurationObjects;
        ConfigurationFactory = (inject && inject.constructor && inject.constructor.configurationFactory) || sap.apf.core.ConfigurationFactory;
        ElementContainer = (inject && inject.constructor && inject.constructor.elementContainer) || sap.apf.modeler.core.ElementContainer;
        Step = (inject && inject.constructor && inject.constructor.step) || sap.apf.modeler.core.Step;
        FacetFilter = (inject && inject.constructor && inject.constructor.facetFilter) || sap.apf.modeler.core.FacetFilter;
        NavigationTarget = (inject && inject.constructor && inject.constructor.navigationTarget) || sap.apf.modeler.core.NavigationTarget;
        Representation = (inject && inject.constructor && inject.constructor.representation) || sap.apf.modeler.core.Representation;
        Hashtable = (inject && inject.constructor && inject.constructor.hashtable) || sap.apf.utils.Hashtable;
        RegistryProbe = (inject && inject.constructor && inject.constructor.registryProbe) || sap.apf.modeler.core.RegistryWrapper;
        LazyLoader = (inject && inject.constructor && inject.constructor.LazyLoader) || sap.apf.modeler.core.LazyLoader;
        Metadata = (inject && inject.constructor && inject.constructor.metadata) || sap.apf.core.Metadata;
        EntityTypeMetadata = (inject && inject.constructor && inject.constructor.entityTypeMetadata) || sap.apf.core.EntityTypeMetadata;
        MetadataFacade = (inject && inject.constructor && inject.constructor.metadataFacade) || sap.apf.core.MetadataFacade;
        MetadataProperty = (inject && inject.constructor && inject.constructor.metadataProperty) || sap.apf.core.MetadataProperty;
        MetadataFactory = (inject && inject.constructor && inject.constructor.metadataFactory) || sap.apf.core.MetadataFactory;
        StartParameter = (inject && inject.constructor && inject.constructor.startParameter) || sap.apf.utils.StartParameter;
        //instances
        if (inject && inject.constructor && inject.constructor.textHandler) {
            textHandler = new inject.constructor.textHandler();
        } else {
            textHandler = new sap.apf.modeler.core.TextHandler();
        }

        if (inject && inject.constructor && inject.constructor.messageHandler) {
            messageHandler = new inject.constructor.messageHandler(true);
        } else {
            messageHandler = new sap.apf.core.MessageHandler(true);
        }

        messageHandler.setTextResourceHandler(textHandler);
        messageHandler.loadConfig(sap.apf.core.messageDefinition);
        messageHandler.loadConfig(sap.apf.modeler.core.messageDefinition);
        messageHandler.activateOnErrorHandling(true);

        //precondition for persistence proxy
        startParameter = new StartParameter(inject && inject.instances && inject.instances.component);
        
        /**
         * @see sap.apf.utils.startParameter
         */
        this.getStartParameterFacade = function () {
            return startParameter;
        };
        
        injectForFollowUp = {
            instance : {
                messageHandler : messageHandler,
                coreApi : that
            }
        };

       
        if (inject && inject.constructor && inject.constructor.persistenceProxy) {
            persistenceProxy = new inject.constructor.persistenceProxy(persistenceConfiguration, injectForFollowUp);
        } else {
            persistenceProxy = new sap.apf.core.OdataProxy(persistenceConfiguration, injectForFollowUp);
        }

        //TODO Apply one consistent inject object concept also in sessionHandler
        if (inject && inject.constructor && inject.constructor.sessionHandler) {
            sessionHandler = new inject.constructors.sessionHandler(injectForFollowUp.instance);
        } else {
            sessionHandler = new sap.apf.core.SessionHandler(injectForFollowUp.instance);
        }

        //TODO Apply one consistent inject object concept also in MetadataFactory	
        injectMetadataFactory = {
            entityTypeMetadata : sap.apf.core.EntityTypeMetadata,
            hashtable : Hashtable,
            metadata : sap.apf.core.Metadata,
            metadataFacade : sap.apf.core.MetadataFacade,
            metadataProperty : sap.apf.core.MetadataProperty,
            messageHandler : messageHandler,
            coreApi : that,
            datajs : OData,
        	configurationFactory : { // Fake configurationFactory needed for getEntityTypeMetadata()
                getServiceDocuments : function() {
        			return [persistenceConfiguration.serviceRoot];
        		}
            },
            deactivateFatalError : true
        };

        metadataFactory = new sap.apf.core.MetadataFactory(injectMetadataFactory);
        
        // Lazy loader inject
        injectLazyLoader = {
        		constructor : { hashtable      : Hashtable },
        		instance    : { messageHandler : messageHandler}
        };

        //functions
        fnOdataRequestWrapper = (inject && inject.functions && inject.functions.odataRequestWrapper) || sap.apf.core.odataRequestWrapper;
        fnAjax = (inject && inject.functions && inject.functions.ajax) || sap.apf.core.ajax;
        

		//core interface
		/**
		 * @see sap.apf.core.ajax
		 */
		this.ajax = function(oSettings) {
			return fnAjax(oSettings);
		};

		/**
		 * @see sap.apf.core.odataRequestWrapper
		 */
		this.odataRequest = function(oRequest, fnSuccess, fnError, oBatchHandler) {
			fnOdataRequestWrapper(messageHandler, oRequest, fnSuccess, fnError, oBatchHandler);
		};
		
		/**
		 * @see sap.apf.core.checkForTimeout
		 */
		this.checkForTimeout = function(oServerResponse) {
			var messageObject = sap.apf.core.utils.checkForTimeout(oServerResponse);
			// up to now, the error handling was hard coded in checkForTimeout
			if (messageObject) {
				messageHandler.putMessage(messageObject);
			}
			return messageObject;
		};
		/**
		 * @see sap.apf.core.MetadataFactory#getEntityTypeMetadata
		 */
		this.getEntityTypeMetadata = function(sAbsolutePathToServiceDocument, sEntityType) {
			return metadataFactory.getEntityTypeMetadata(sAbsolutePathToServiceDocument, sEntityType);
		};
		/**
		 * @see sap.apf.core.SessionHandler#getXsrfToken
		 */
		this.getXsrfToken = function(sServiceRootPath) {
			return sessionHandler.getXsrfToken(sServiceRootPath);
		};
		/**
		 * @description Returns the instance of the UriGenerator. For internal core using only.
		 */
		this.getUriGenerator = function() {
			return sap.apf.core.utils.uriGenerator;
		};
		/**
		 * @description Returns text
		 * @param {string} sRessourceKey - Key of the message in the Ressourcefile
		 * @param {string[]} [aParameters] - Parameter for placeholder replacement in the message bundle
		 * @returns {string}
		 */
		this.getText = function(sRessourceKey, aParameters) {
			return textHandler.getText(sRessourceKey, aParameters);
		};
		/**
		 * @see sap.apf#putMessage for api definition.
		 * @see sap.apf.core.MessageHandler#putMessage for implementation.
		 */
		this.putMessage = function(oMessage) {
			return messageHandler.putMessage(oMessage);
		};
		/**
		 * @see sap.apf.core.MessageHandler#check
		 */
		this.check = function(bExpression, sMessage, sCode) {
			return messageHandler.check(bExpression, sMessage, sCode);
		};

		/**
		 * @see sap.apf#createMessageObject for api definition.
		 * @see sap.apf.core.MessageHandler#createMessageObject
		 */
		this.createMessageObject = function(config) {
			return messageHandler.createMessageObject(config);
		};
		/**
		 * @see sap.apf.core.MessageHandler#setMessageCallback
		 */
		this.setCallbackForMessageHandling = function(fnCallback) {
			messageHandler.setMessageCallback(fnCallback);
		};
		/**
         * @private
         * @function
         * @name sap.apf.modeler.core.instance#importTexts
         * @description Receives a string containing text property file for an existing application. Loads the texts and saves them.
         * @param {string} textFileString stringified property file
         * @param {functio({undefined|messageObject})} callbackImport Called after import of text file finished. Contains success        
         */
		this.importTexts = function(textFileString, callbackImport) {
			var messageObject;
			var i;
			var len;
			var textFileInformation;
			var applicationId;

			function loadTexts(existingTexts, metadata, messageObject) {
				var injectTextPool;
				var textPool;

				if (messageObject) {
					callbackImport(messageObject);
				} else {
					injectTextPool = {
						instance : {
							messageHandler : messageHandler,
							persistenceProxy : persistenceProxy
						},
						constructor : {
							hashtable : Hashtable
						}
					};
					textPool = new sap.apf.modeler.core.TextPool(injectTextPool, applicationId, existingTexts);
					textPool.addTextsAndSave(textFileInformation.TextElements, callbackImport, applicationId);
				}

			}
			function callbackApplicationHandler(applicationHandler, msgObject) {
				if (msgObject) {
					callbackImport(msgObject);
					return;
				}
				var messageObject;
				var application = applicationHandler.getApplication(applicationId);
				if (!application) {
					messageObject = messageHandler.createMessageObject({
						code : 11021
					});
					callbackImport(messageObject);
					return;

				}

				if (lazyLoaderForConfigurationHandler && lazyLoaderForConfigurationHandler.getId() === applicationId) {					
					lazyLoaderForConfigurationHandler.getInstance().getTextPool().addTextsAndSave(textFileInformation.TextElements, callbackImport, applicationId);
				} else {
					var filterApplication = new sap.apf.core.utils.Filter(messageHandler, 'Application', 'eq', applicationId);
					var filterLanguage = new sap.apf.core.utils.Filter(messageHandler, 'Language', 'eq', sap.apf.core.constants.developmentLanguage);
					filterLanguage.addAnd(filterApplication);
					persistenceProxy.readCollection("texts", loadTexts, undefined, undefined, filterLanguage, true);
				}	
			}

			textFileInformation = sap.apf.utils.parseTextPropertyFile(textFileString, {
				instance : {
					messageHandler : messageHandler
				}
			});
			if (textFileInformation.Messages.length > 0) {

				messageObject = messageHandler.createMessageObject({
					code : 11020
				});
				len = textFileInformation.Messages.length;
				for(i = 0; i < len - 1; i++) {
					textFileInformation.Messages[i + 1].setPrevious(textFileInformation.Messages[i]);

				}
				messageObject.setPrevious(textFileInformation.Messages[len - 1]);
				callbackImport(messageObject);
			} else {
				applicationId = textFileInformation.Application;
				this.getApplicationHandler(callbackApplicationHandler);
			}
		};
		/**
         * @private
         * @function
         * @name sap.apf.modeler.core.instance#importConfiguration
         * @description Receives a string containing analytical configuration and assigned modeler administration data. Contents are saved implicitly. 
         * @param {string} configuration JSON format defined by exportConfiguration method 
         * @param {function(<tbd after alignment, which collision information should be provided>)} callbackConfirmOverwrite Called if configuration contains an already existing configurationID 
         * @param {function(configuration, metadata, messageObject)} callbackImport Called after configuration is saved. Returns configurationID in success case
         */
		this.importConfiguration = function(configuration, callbackConfirmOverwrite, callbackImport) {
            var configObject = JSON.parse(configuration);
            var configHeader = configObject.configHeader;
            var applicationId;
            
            if(!guidsAreValid(configObject, callbackImport)){
            	return;
            }
            
            this.getApplicationHandler(callbackApplicationHandler);

            function guidsAreValid(configObject, callbackImport){
            	var messageObjects = [],
            	    guidsAreValid = true,
            	    textKeys;
            	if(!sap.apf.utils.isValidGuid(configObject.configHeader.Application)){
            		messageObjects.push( messageHandler.createMessageObject({
					        				code : 11037,
					        				aParameters : [ configObject.configHeader.Application ]
					        			}));
            		guidsAreValid = false;
            	}
            	if(!sap.apf.utils.isValidGuid(configObject.configHeader.AnalyticalConfiguration)){
            		messageObjects.push( messageHandler.createMessageObject({
					        				code : 11038,
					        				aParameters : [ configObject.configHeader.AnalyticalConfiguration ]
					        			}));
            		guidsAreValid = false;
            	}
            	textKeys = sap.apf.modeler.core.ConfigurationObjects.getTextKeysFromConfiguration(configObject);
            	textKeys.forEach(function(textKey){
            		var hashTab = new Hashtable(messageHandler);
            		if(!hashTab.hasItem(textKey)){
            			hashTab.setItem(textKey, textKey);
            			if(!sap.apf.utils.isValidGuid(textKey)){
                    		messageObjects.push( messageHandler.createMessageObject({
        					        				code : 11039,
        					        				aParameters : [ textKey ]
        					        			}));
                    		guidsAreValid = false;
                    	}
            		}
            	});
            	if(guidsAreValid){
                	return guidsAreValid;	
            	}
            	messageObjects.forEach(function(messageObject, itemNumber, messageObjects){
            		if(itemNumber){
            			messageObject.setPrevious(messageObjects[itemNumber - 1]);
            		}
            	});
            	callbackImport(configuration, undefined, messageObjects[messageObjects.length - 1]);
            	return guidsAreValid;
            }
                        
            function callbackApplicationHandler(applicationHandler, messageObject){
            	
            	if (messageObject) {
            		callbackImport(undefined, undefined, messageObject);
            		return;
            	}
                var appExists = false;
                var appList = applicationHandler.getList();
                applicationId = configHeader.Application;
                appList.forEach(function(app){
                   if(app.Application === configHeader.Application){
                       appExists = true;
                   }
                });

                if(appExists){
                    that.getConfigurationHandler(configHeader.Application, callbackConfigurationHandler);
                }else{
                    var appObject = {
                        ApplicationName : configHeader.ApplicationName,
                        SemanticObject : configHeader.SemanticObject
                    };
                    applicationHandler.setAndSave(appObject, callbackSetAndSave, configHeader.Application, true);
                }
            }
            function callbackSetAndSave(ApplicationId, metadata, messageObject){
            	
            	if (messageObject) {
            		callbackImport(undefined, undefined, messageObject);
            		return;
            	}
                that.getConfigurationHandler(configHeader.Application, callbackConfigurationHandler);
            }
            function callbackConfigurationHandler(configurationHandler, messageObject){
            	
            	if (messageObject) {
            		callbackImport(undefined, undefined, messageObject);
            		return;
            	}
                var analyticalContent = jQuery.extend({}, configObject, true);
                delete analyticalContent.configHeader;
                var configExists = false;
                var configList = configurationHandler.getList();
                configList.forEach(function(config){
                    if(config.AnalyticalConfiguration === configHeader.AnalyticalConfiguration){
                        configExists = true;
                    }
                });
                if(configExists){
                    callbackConfirmOverwrite(callbackOverwrite, callbackCreateNew);
                }else{
                    configurationHandler.setConfiguration({AnalyticalConfigurationName: configHeader.AnalyticalConfigurationName}, configHeader.AnalyticalConfiguration);
                    var configurationToLoad = {
                        id: configHeader.AnalyticalConfiguration,
                        creationDate: configHeader.CreationUTCDateTime,
                        lastChangeDate: configHeader.LastChangeUTCDateTime,
                        content: analyticalContent
                    };
                    configurationHandler.loadConfiguration(configurationToLoad, callbackLoadConfiguration);
                }
                function callbackOverwrite(){
                    configurationHandler.setConfiguration({AnalyticalConfigurationName: configHeader.AnalyticalConfigurationName}, configHeader.AnalyticalConfiguration);
                    var configurationToLoad = {
                        updateExisting : true,
                        id: configHeader.AnalyticalConfiguration,
                        creationDate: configHeader.CreationUTCDateTime,
                        lastChangeDate: configHeader.LastChangeUTCDateTime,
                        content: analyticalContent
                    };
                    configurationHandler.loadConfiguration(configurationToLoad, callbackLoadConfiguration);
                }
                function callbackCreateNew(){
                    var tempId = configurationHandler.setConfiguration({AnalyticalConfigurationName: configHeader.AnalyticalConfigurationName});
                    var configuration = {
                    		id: tempId, 
                        content: analyticalContent
                    };
                    configurationHandler.loadConfiguration(configuration, callbackLoadConfiguration);
                }
            }
            function callbackLoadConfiguration(configEditor, messageObject) {
            	if (messageObject) {
            		callbackImport(undefined, undefined, messageObject);
            		return;
            	}
                configEditor.save(callbackImport);
            }
           
		};
		/**
         * @private
         * @function
         * @name sap.apf.modeler.core.instance#getApplicationHandler
         * @description Application Handler which manages the applications of the APF Configuration Modeler
         * @param {function(sap.apf.modeler.core.ApplicationHandler, sap.apf.core.MessageObject)} initCallback Function is called after ApplicationHandler is initialized 
         */
		this.getApplicationHandler = function(initCallback) {
			var fnLoadApplicationHandler;
			
			if(!lazyLoaderForApplicationHandler) {
				fnLoadApplicationHandler = (inject && inject.functions && inject.functions.loadApplicationHandler) || loadApplicationHandler;
				lazyLoaderForApplicationHandler = new LazyLoader(injectLazyLoader, fnLoadApplicationHandler);
			}
			
			lazyLoaderForApplicationHandler.asyncGetInstance("ApplicationHandlerId", initCallback);
			
	        function loadApplicationHandler(id, callbackAfterLoad){
	        	 new ApplicationHandler({
	                   instance: {
	                       messageHandler: messageHandler,
	                       persistenceProxy: persistenceProxy
	                   },
	                   constructor: {
	                       hashtable: Hashtable
	                   },
	                   functions: {
							resetConfigurationHandler : resetConfigurationHandler
	                   }
	                   }, setInitializedApplicationHandler);
				function setInitializedApplicationHandler(applicationHandler, messageObject) {
				  callbackAfterLoad(id, applicationHandler, messageObject);
				}
			    function resetConfigurationHandler(application){
			    	if (lazyLoaderForConfigurationHandler && lazyLoaderForConfigurationHandler.getId() === application){
			    		lazyLoaderForConfigurationHandler.getInstance().removeAllConfigurations( );
			    		lazyLoaderForConfigurationHandler.reset();
			    	}
			    }
	        }
		       
		};
	
		/**
         * @private
         * @function
         * @name sap.apf.modeler.core.instance#getConfigurationHandler
         * @description Configuration Handler which manages the configurations of the APF Configuration Modeler
         * @param {string} applicationId
         * @param {function(sap.apf.modeler.core.ConfigurationHandler, sap.apf.core.MessageObject)} callback Function is called after ConfigurationHandler is initialized
         */
		this.getConfigurationHandler = function(applicationId, callback) {
			
			if(!lazyLoaderForConfigurationHandler){
				fnLoadConfigurationHandler = (inject && inject.functions && inject.functions.loadConfigurationHandler) || loadConfigurationHandler;
				lazyLoaderForConfigurationHandler = new LazyLoader(injectLazyLoader, fnLoadConfigurationHandler);
			}
			
            lazyLoaderForConfigurationHandler.asyncGetInstance(applicationId, callback);
            
            function loadConfigurationHandler(applicationId, callbackAfterLoad, oldConfigurationHandler){

    			var filterApplication = new sap.apf.core.utils.Filter(messageHandler, 'Application', 'eq', applicationId);
    			var filterLanguage = new sap.apf.core.utils.Filter(messageHandler, 'Language', 'eq', sap.apf.core.constants.developmentLanguage);
    			filterLanguage.addAnd(filterApplication);

    			var requestConfigurations = [];
    			var selectList = [ "AnalyticalConfiguration", "AnalyticalConfigurationName", "Application", "CreatedByUser", "CreationUTCDateTime", "LastChangeUTCDateTime", "LastChangedByUser" ];
    			requestConfigurations.push({
    				entitySetName : "configuration",
    				filter : filterApplication,
    				selectList : selectList
    			});
    			requestConfigurations.push({
    				entitySetName : 'texts',
    				filter : filterLanguage
    			});

    			persistenceProxy.readCollectionsInBatch(requestConfigurations, initTextPoolAndConfigurationHandler, true);
    			
            	function initTextPoolAndConfigurationHandler(data, messageObject) {

    				var textPool, injectTextPool;
    				var existingAnalyticalConfigurations;
    				var existingTexts;
    				var configurationHandler = oldConfigurationHandler;
    				
    				if (messageObject) {
    					callbackAfterLoad(applicationId, undefined, messageObject);
    				} else {
    					existingAnalyticalConfigurations = data[0];
    					existingTexts = data[1];
    					injectTextPool = {
    							instance : {
    								messageHandler : messageHandler,
    								persistenceProxy : persistenceProxy
    							},
    							constructor : {
    								hashtable : Hashtable
    							}
    					};
    					textPool = new sap.apf.modeler.core.TextPool(injectTextPool, applicationId, existingTexts);

    					if (!configurationHandler) {
    						configurationHandler = new ConfigurationHandler({
    							instance : {
    								messageHandler : messageHandler,
    								persistenceProxy : persistenceProxy,
    								datajs : OData,
    								coreApi : that, 
    								metadataFactory : metadataFactory
    							},
    							constructor : {
    								configurationEditor: ConfigurationEditor,
    								configurationFactory: ConfigurationFactory, 
    								configurationObjects: ConfigurationObjects,
    				        		elementContainer: ElementContainer,
    				        		entityTypeMetadata : EntityTypeMetadata,
                                    facetFilter : FacetFilter,
                                    navigationTarget : NavigationTarget,
    				        		hashtable: Hashtable,
                                    representation: Representation,
                                    registryProbe: RegistryProbe,
                                    step: Step,
    								lazyLoader : LazyLoader
    							}, 
    							functions : {
    								getApplication : lazyLoaderForApplicationHandler.getInstance().getApplication
    							}
    						});
    					}
    					configurationHandler.setApplicationIdAndContext(applicationId, existingAnalyticalConfigurations, textPool);
    					callbackAfterLoad(applicationId, configurationHandler, messageObject);
    				}
    			}
            }
		};
		
		/**
         * @private
         * @function
         * @name sap.apf.modeler.core.instance#getUnusedTextKeys
         * @description Return all unused text keys from the text pool for a certain application 
         * 				application handler needs to be initialized
         * 				only text key usages form the saved configuration data for the application is considered
         * 				unsaved usages are not considered as usages
         * @param {string} applicationId
         * @param {function({Array}, {sap.apf.core.MessageObject})} callback function is called after text keys have been identified
         */
		this.getUnusedTextKeys = function(applicationId, callbackAfterGetUnused) {
			var injectForConfObj = { instance :    {messageHandler   : messageHandler,
			    	                             	persistenceProxy : persistenceProxy},
			    	                 constructor : {hashtable        : Hashtable} };
			var configurationObject = new ConfigurationObjects(injectForConfObj);
					
			var usedTextKeys         = null,
		        messageObject        = null,
		        configurationHandler = null;
			
			// first asynchronous operation: getTextKeysFromAllConfigurations 
			configurationObject.getTextKeysFromAllConfigurations(applicationId, function(textKeys, messageObj){
				 if(messageObject){
					 return;
				 }
				 usedTextKeys  = textKeys;
				 messageObject = messageObj;
				 if(messageObj || configurationHandler){
					 finalizeProcessing(); 
				 }
			 });
			 
			// second asynchronous operation: getConfigurationHandler
			 this.getConfigurationHandler(applicationId, function(confHandler, messageObj){
				 if(messageObject){
					 return;
				 }
				 configurationHandler = confHandler;
				 messageObject        = messageObj;
				 if(messageObj || usedTextKeys){
					 finalizeProcessing(); 
				 }
			 });
			 
			// finalize after both asynchronous operations finished or after first error occurred
			function finalizeProcessing(){
				var unusedTextKeys = [];
			  	if(messageObject){
			   		callbackAfterGetUnused(undefined, messageObject);
			   		return;
			   	}
			  	configurationHandler.getTextPool().getTextKeys().forEach(function(textKey){
			  		if(!usedTextKeys.hasItem(textKey)){
			  			unusedTextKeys.push(textKey);
			  		}
			  	});
			  	callbackAfterGetUnused(unusedTextKeys, undefined);
			 }
				 
		};
		
		/**
         * @private
         * @function
         * @name sap.apf.modeler.core.instance#resetConfigurationHandler
         * @description Reset the configuration handler instance 
         */
		this.resetConfigurationHandler = function( ) {
			if(lazyLoaderForConfigurationHandler){
				lazyLoaderForConfigurationHandler.reset();
			}
		};

		/**
         * @private
         * @function
         * @name sap.apf.modeler.core.instance#getRepresentationTypes
         * @description Return the available representation types 
         */
		 this.getRepresentationTypes = function() {
	        	var origRepresentationTypes = sap.apf.core.representationTypes();
	        	var represenationTypes = [];
	        	jQuery.extend(true, represenationTypes, origRepresentationTypes );
	        	return represenationTypes;  	
	     };
	      
	     /**
	         * @private
	         * @function
	         * @name sap.apf.modeler.core.instance#getAllAvailableSemanticObjects
	         * @description Returns all available semantic objects with id and text by callback function
	         * @param {function(semanticObjects, sap.apf.core.MessageObject)} fnCallback The first argument of the callback function is filled 
	         * with tuples with property id and text of the semantic objects. The second argument is filled in case of errors with 
	         * a messageObject of type sap.apf.core.MessageObject. 
	         */
	     this.getAllAvailableSemanticObjects = function(fnCallback) {
	    	 function returnSemanticObjects(oData, results) { 
	    		 allAvailableSemanticObjects = oData.results;
	    		 fnCallback(oData.results, undefined);
	    	 }
	    	 function returnErrors (oError) { 
	    		 var messageObject;
	    		 if (oError.messageObject) {
	    			 messageObject = oError.messageObject;
	    		 } else {
	    			messageObject = messageHandler.createMessageObject({ code : "11041"});
	    		 }
	    		 fnCallback([], messageObject);
	    	 }
	    	 
	    	 if (allAvailableSemanticObjects) {	    		
	    		 fnCallback(allAvailableSemanticObjects, undefined);
	    		 return;
	    	 }
	    	 var request = {
	    			 requestUri : "/sap/opu/odata/UI2/INTEROP/SemanticObjects?$format=json&$select=id,text",
	    			 method : "GET",
	    			 headers : { "x-csrf-token" : sessionHandler.getXsrfToken("/sap/opu/odata/UI2/INTEROP/SemanticObjects")}
	    	 };
	    	 that.odataRequest(request, returnSemanticObjects, returnErrors);
	     };
	     
	     /**
	         * @private
	         * @function
	         * @name sap.apf.modeler.core.instance#getSemanticActions
	         * @description Returns all available semantic actions for given object with id and text by callback function
	         * @param {string} semanticObject Technical name of a semantic object
	         * @returns promise The argument of the done function is filled 
	         * with array semanticActions (tuples with property id and text of the semantic actions) and semanticObject with id and text. 
	         * Example: { semanticActions : [  { id: "action1", text : "someDescription" }, ...], semanticObject : { id : "someId, text: "objectDescription" }}
	         * The callback function of fail receives as argument the message object!
	         */
	     this.getSemanticActions = function(semanticObject) {
    		 
    		 var cachedSemanticActions;
    		 var deferred = jQuery.Deferred();
    		 
    		 if (!actionsPerSemanticObjectHashTable) {
    			 actionsPerSemanticObjectHashTable = new Hashtable(messageHandler);
    		 }
    		 cachedSemanticActions = actionsPerSemanticObjectHashTable.getItem(semanticObject);
    		 if (cachedSemanticActions) {
    			 
    			 deferred.resolve(cachedSemanticActions);
    			 return deferred.promise();
    		 }
    		 
    		 that.getAllAvailableSemanticObjects(returnActionsWithObject);
    		 
    		 return deferred.promise();
    		 
    		 function returnActionsWithObject(semanticObjects, messageObject) {
    			 
    			 if (messageObject) {
    				 deferred.reject(messageObject);
    				 return;
    			 }
    			 
    			 var navigationService = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService("CrossApplicationNavigation");
        		 var semanticObjectProperties;
        		 var i;
        		 
        		 if (!navigationService) {
        			 deferred.reject(messageHandler.createMessageObject({ code : "5038"}));
        			 return;
        		 }
        		 
        		 for (i = 0; i < semanticObjects.length; i++) {
        			if (semanticObjects[i].id === semanticObject) {
        				semanticObjectProperties = semanticObjects[i];
        				break;
        			}
        		 }
        		 navigationService.getSemanticObjectLinks(semanticObject, undefined, true, inject.instances.component, undefined)
     		 	.done(	function(aIntents) { 
     		 				var semanticActions = [];
     		 			
     		 				aIntents.forEach(function(intentDefinition){
     		 					var actionWithParameters = intentDefinition.intent.split("-");
     		 					var action = actionWithParameters[1].split("?");
     		 					var action = action[0].split("~");
     		 					semanticActions.push({ id : action[0], text  : intentDefinition.text });
     		 				});
     		 				actionsPerSemanticObjectHashTable.setItem(semanticObject, {semanticObject : semanticObjectProperties, semanticActions : semanticActions });
     		 				deferred.resolve({semanticObject : semanticObjectProperties, semanticActions : semanticActions });
     		 	}).fail(function() { 
     		 		deferred.reject(  messageHandler.createMessageObject({ code : "11042"}));
     		 	});
    		 }
    		 
	     };
// -----------------------------------------------------------------------------------------------------		
	    if (inject && inject.probe) {
            //noinspection JSHint,JSLint
            new inject.probe({
                constructor: {
                    applicationHandler: ApplicationHandler,
                    configurationHandler: ConfigurationHandler,
                    configurationEditor: ConfigurationEditor,
                    configurationObjects: ConfigurationObjects,
                    configurationFactory: ConfigurationFactory,
					metadataFactory: MetadataFactory,
					metadata: Metadata,
					entityTypeMetadata : EntityTypeMetadata,
					metadataFacade: MetadataFacade,
					metadataProperty: MetadataProperty,
                    step: Step,
                    facetFilter: FacetFilter,
                    navigationTarget: NavigationTarget,
                    representation: Representation,
                    elementContainer: ElementContainer,
                    hashtable: Hashtable,
                    lazyLoader: LazyLoader,
                    registryProbe: RegistryProbe
                },
                textHandler: textHandler,
                messageHandler: messageHandler,
                sessionHandler: sessionHandler,
                persistenceProxy : persistenceProxy,
                metadataFactory : metadataFactory,
                injectForFollowUp: injectForFollowUp,
                injectMetadataFactory: injectMetadataFactory,
                fnOdataRequestWrapper: fnOdataRequestWrapper,
                ajax : fnAjax,
                odataRequestWrapper: fnOdataRequestWrapper
			});
		}
		
	};

}());

}; // end of sap/apf/modeler/core/instance.js
if ( !jQuery.sap.isDeclared('sap.apf.core.instance') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/*global jQuery, sap, OData */

jQuery.sap.declare("sap.apf.core.instance");




















/**
 * @class Core Component Instance
 * @name sap.apf.core.Instance
 * @description Creation of new Core Component Instance
 */
sap.apf.core.Instance = function (oApiInject) {
    'use strict';
    var that = this;
    var oMessageHandler = oApiInject.messageHandler;
    var oStartParameter = oApiInject.startParameter;
    var sRememberedPath;
    var oInject = {
        messageHandler: oMessageHandler,
        coreApi: that

    };
    var oResourcePathHandler;
    var oMetadataFactory;
    var oTextResourceHandler;
    var oConfigurationFactory;
    var oPath;
    var oSessionHandler;
    var oPersistence;
    
    this.destroy = function() {
    	oPath.destroy();
    };
    /**
     * @see sap.apf.core.ajax
     */
    this.ajax = function (oSettings) {
        return sap.apf.core.ajax(oSettings);
    };

    /**
     * @see sap.apf.core.odataRequestWrapper
     */
    this.odataRequest = function (oRequest, fnSuccess, fnError, oBatchHandler) {
        sap.apf.core.odataRequestWrapper(oMessageHandler, oRequest, fnSuccess, fnError, oBatchHandler);
    };

    /**
     * @see sap.apf.utils.startParameter
     */
    this.getStartParameterFacade = function () {
        return oStartParameter;
    };

    this.getMessageHandler = function () {
        return oMessageHandler;
    };
    /**
     * @see sap.apf#putMessage for api definition.
     * @see sap.apf.core.MessageHandler#putMessage for implementation.
     */
    this.putMessage = function (oMessage) {
        return oMessageHandler.putMessage(oMessage);
    };
    /**
     * @see sap.apf.core.MessageHandler#check
     */
    this.check = function (bExpression, sMessage, sCode) {
        return oMessageHandler.check(bExpression, sMessage, sCode);
    };

    /**
     * @see sap.apf#createMessageObject for api definition.
     * @see sap.apf.core.MessageHandler#createMessageObject
     */
    this.createMessageObject = function (oConfig) {
        return oMessageHandler.createMessageObject(oConfig);
    };

    /**
     * @see sap.apf.core.MessageHandler#activateOnErrorHandling
     */
    this.activateOnErrorHandling = function (bOnOff) {
        oMessageHandler.activateOnErrorHandling(bOnOff);
    };

    /**
     * @see sap.apf.core.MessageHandler#setMessageCallback
     */
    this.setCallbackForMessageHandling = function (fnCallback) {
        oMessageHandler.setMessageCallback(fnCallback);
    };

    /**
     * @see sap.apf.core.MessageHandler#setApplicationMessageCallback
     */
    this.setApplicationCallbackForMessageHandling = function (fnCallback) {
        oMessageHandler.setApplicationMessageCallback(fnCallback);
    };

    /**
     * @see sap.apf.core.MessageHandler#getLogMessages
     */
    this.getLogMessages = function () {
        return oMessageHandler.getLogMessages();
    };

    /**
     * @see sap.apf.core.checkForTimeout
     */
    this.checkForTimeout = function (oServerResponse) {
        var oMessageObject = sap.apf.core.utils.checkForTimeout(oServerResponse);
        // up to now, the error handling was hard coded in checkForTimeout
        if (oMessageObject) {
            oMessageHandler.putMessage(oMessageObject);
        }
        return oMessageObject;
    };
    /**
     * @description Returns the instance of the UriGenerator. For internal core using only.
     */
    this.getUriGenerator = function () {
        return sap.apf.core.utils.uriGenerator;
    };

    /**
     * @see sap.apf.core.MetadataFactory#getMetadata
     */
    this.getMetadata = function (sAbsolutePathToServiceDocument) {
        return oMetadataFactory.getMetadata(sAbsolutePathToServiceDocument);
    };

    /**
     * @see sap.apf.core.MetadataFactory#getMetadataFacade
     */
    this.getMetadataFacade = function () {
        return oMetadataFactory.getMetadataFacade();
    };

    /**
     * @see sap.apf.core.MetadataFactory#getEntityTypeMetadata
     */
    this.getEntityTypeMetadata = function (sAbsolutePathToServiceDocument, sEntityType) {
        return oMetadataFactory.getEntityTypeMetadata(sAbsolutePathToServiceDocument, sEntityType);
    };

    /**
     * @see sap.apf.core.ResourcePathHandler#loadConfigFromFilePath
     */
    this.loadApplicationConfig = function (sFilePath) {
        oResourcePathHandler.loadConfigFromFilePath(sFilePath);
    };

    /**
     * @see sap.apf.core.TextResourceHandler#loadTextElements
     */
    this.loadTextElements = function (textElements) {
        oTextResourceHandler.loadTextElements(textElements);
    };
    /**
     * @see sap.apf.core.ResourcePathHandler#getConfigurationProperties
     */
    this.getApplicationConfigProperties = function () {
        return oResourcePathHandler.getConfigurationProperties();
    };

    /**
     * @see sap.apf.core.ResourcePathHandler#getResourceLocation
     */
    this.getResourceLocation = function (sResourceIdentifier) {
        return oResourcePathHandler.getResourceLocation(sResourceIdentifier);
    };

    /**
     * @see sap.apf.core.ResourcePathHandler#getPersistenceConfiguration
     */
    this.getPersistenceConfiguration = function () {
        return oResourcePathHandler.getPersistenceConfiguration();
    };
    /**
     * @see sap.apf.core.ResourcePathHandler#getApplicationConfigurationURL
     */
    this.getApplicationConfigurationURL = function () {
        return oResourcePathHandler.getApplicationConfigurationURL();
    };

    // ConfigurationFactory API

    /**
     * @see sap.apf.core.ConfigurationFactory#getCategories
     */
    this.getCategories = function () {
        return oConfigurationFactory.getCategories();
    };
    /**
     * @see sap.apf.core.ConfigurationFactory#existsConfiguration
     */
    this.existsConfiguration = function (sId) {
        return oConfigurationFactory.existsConfiguration(sId);
    };
    /**
     * @see sap.apf.core.ConfigurationFactory#getStepTemplates
     */
    this.getStepTemplates = function () {
        return oConfigurationFactory.getStepTemplates();
    };
    /**
     * @see sap.apf.core.ConfigurationFactory#getFacetFilterConfigurations
     */
    this.getFacetFilterConfigurations = function () {
        return oConfigurationFactory.getFacetFilterConfigurations();
    };

    /**
     * @see sap.apf.core.ConfigurationFactory#getNavigationTargets
     */
    this.getNavigationTargets = function () {
        return oConfigurationFactory.getNavigationTargets();
    };

    /**
     * @description Creates a step object from the configuration object and adds it to the path.
     * @param {string} sStepId Step id as defined in the analytical configuration.
     * @param {function} fnStepProcessedCallback Callback function for path update.
     * @param {string} [sRepresentationId] Parameter, that allows definition of the representation id that shall initially be selected. If omitted the first configured representation will be selected.
     * @returns {sap.apf.core.Step} oStep Created step.
     */
    this.createStep = function (sStepId, fnStepProcessedCallback, sRepresentationId) {
        var oStepInstance;

        oMessageHandler.check(sStepId !== undefined && typeof sStepId === "string" && sStepId.length !== 0, "sStepID is  unknown or undefined");
        oStepInstance = oConfigurationFactory.createStep(sStepId, sRepresentationId);

        oPath.addStep(oStepInstance, fnStepProcessedCallback);
        return oStepInstance;
    };

    // Path API
    /**
     * @see sap.apf.core.Path#getSteps
     */
    this.getSteps = function () {
        return oPath.getSteps();
    };

    /**
     * @see sap.apf.core.Path#moveStepToPosition
     */
    this.moveStepToPosition = function (oStep, nPosition, fnStepProcessedCallback) {
        oPath.moveStepToPosition(oStep, nPosition, fnStepProcessedCallback);
    };

    /**
     * @function
     * @name sap.apf.core.Instance#updatePath
     * @see sap.apf.core.Path#update
     */
    this.updatePath = function (fnStepProcessedCallback, bContextChanged) {
        oPath.update(fnStepProcessedCallback, bContextChanged);
    };

    /**
     * @see sap.apf.core.Path#removeStep
     */
    this.removeStep = function (oStep, fnStepProcessedCallback) {
        oPath.removeStep(oStep, fnStepProcessedCallback);
    };

    /**
     * @description Creates a new Path instance
     * @param {boolean} [bRememberActualPath] if true, then the path can be restored
     *
     */
    this.resetPath = function (bRememberActualPath) {
        if (bRememberActualPath) {
        	sRememberedPath = oPath.serialize();
        }
        if (oPath) {
        	oPath.destroy();
        }
        oPath = new sap.apf.core.Path(oInject);
    };
    /**
     * if resetPath has been called with bRememberActualPath, then the old path
     * can be restored
     */
    this.restoreOriginalPath = function () {
        if (sRememberedPath) {
        	oPath.destroy();
            oPath = new sap.apf.core.Path(oInject);
            oPath.deserialize(sRememberedPath);
        }
    };
    /**
     * @see sap.apf.core.Path#stepIsActive
     */
    this.stepIsActive = function (oStep) {
        return oPath.stepIsActive(oStep);
    };

    /**
     * @see sap.apf.core.Path#serializePath
     */
    this.serializePath = function () {
        return oPath.serialize();
    };

    /**
     * @see sap.apf.core.Path#deserializePath
     */
    this.deserializePath = function (oSerializedAnalysisPath) {
        oPath.deserialize(oSerializedAnalysisPath);
    };
    // Text Resource Handler API
    /**
     * @see sap.apf#getTextNotHtmlEncoded
     * @see sap.apf.core.TextResourceHandler#getTextNotHtmlEncoded
     */
    this.getTextNotHtmlEncoded = function (oLabel, aParameters) {
        return oTextResourceHandler.getTextNotHtmlEncoded(oLabel, aParameters);
    };

    /**
     * @see sap.apf#getTextHtmlEncoded
     * @see sap.apf.core.TextResourceHandler#getTextHtmlEncoded
     */
    this.getTextHtmlEncoded = function (oLabel, aParameters) {
        return oTextResourceHandler.getTextHtmlEncoded(oLabel, aParameters);
    };

    /**
     * returns true, if this is the text key for the initial text. Initial text means empty string.
     */
    this.isInitialTextKey = function (textKey) {
        return (textKey === sap.apf.core.constants.textKeyForInitialText);
    };
    /**
     * @see sap.apf.core.TextResourceHandler#getMessageText
     */
    this.getMessageText = function (sCode, aParameters) {
        return oTextResourceHandler.getMessageText(sCode, aParameters);
    };

    /**
     * @see sap.apf.core.SessionHandler#getXsrfToken
     */
    this.getXsrfToken = function (sServiceRootPath) {
        return oSessionHandler.getXsrfToken(sServiceRootPath);
    };
    /**
     * @see sap.apf.core.SessionHandler#setContext
     */
    this.setContext = function (oContextFilter) {
        oSessionHandler.setContext(oContextFilter);
    };

    /**
     * @see sap.apf.core.SessionHandler#getContext
     */
    this.getContext = function () {
        return oSessionHandler.getContext();
    };
    
    /**
     * @see sap.apf.core.utils.StartFilterHandler#getCumulativeFilter
     */
    this.getCumulativeFilter = function () {
        return oApiInject.getCumulativeFilter();
    };
    
    /**
     * @see sap.apf.core.SessionHandler#getLogicalSystem
     */
    this.getLogicalSystem = function () {
        return oSessionHandler.getLogicalSystem();
    };

    /**
     * @see sap.apf#createReadRequest
     * @description Creates an object for performing an Odata Request get operation.
     * @param {String|Object} sRequestConfigurationId - identifies a request configuration, which is contained in the analytical configuration.
     *                        or the request configuration is directly passed as an object oRequestConfiguration.
     * @returns {sap.apf.core.ReadRequest}
     */
    this.createReadRequest = function (/* sRequestConfigurationId | oRequestConfiguration */ requestConfiguration) {
        var oRequest = oConfigurationFactory.createRequest(requestConfiguration);
        var oRequestConfiguration;
        if (typeof requestConfiguration === 'string') {
            oRequestConfiguration = oConfigurationFactory.getConfigurationById(requestConfiguration);
        } else {
            oRequestConfiguration = requestConfiguration;
        }
        return new sap.apf.core.ReadRequest(oInject, oRequest, oRequestConfiguration.service, oRequestConfiguration.entityType);
    };
    /**
     * @see sap.apf#createReadRequestByRequiredFilter
     * @description Creates an object for performing an Odata Request get operation with required filter for parameter entity set key properties & required filters.
     * @param {String|Object} sRequestConfigurationId - identifies a request configuration, which is contained in the analytical configuration.
     *                        or the request configuration is directly passed as an object oRequestConfiguration.
     * @returns {sap.apf.core.ReadRequestByRequiredFilter}
     */
    this.createReadRequestByRequiredFilter = function (/* sRequestConfigurationId | oRequestConfiguration */ requestConfiguration) {
        var oRequest = oConfigurationFactory.createRequest(requestConfiguration);
        var oRequestConfiguration;
        if (typeof requestConfiguration === 'string') {
            oRequestConfiguration = oConfigurationFactory.getConfigurationById(requestConfiguration);
        } else {
            oRequestConfiguration = requestConfiguration;
        }
        return new sap.apf.core.ReadRequestByRequiredFilter(oInject, oRequest, oRequestConfiguration.service, oRequestConfiguration.entityType);
    };
    /**
     * @description Message configurations are loaded.
     * @see sap.apf.core.MessageHandler#loadConfig
     */
    this.loadMessageConfiguration = function (aMessages, bResetRegistry) {
        oMessageHandler.loadConfig(aMessages, bResetRegistry);
    };
    /**
     * @see sap.apf.core.ConfigurationFactory#loadConfig
     */
    this.loadAnalyticalConfiguration = function (oConfig) {
        oConfigurationFactory.loadConfig(oConfig);
    };
    /**
     * @see sap.apf.core#savePath for api definition.
     * @see sap.apf.core.Persistence#createPath
     */
    this.savePath = function (arg1, arg2, arg3, arg4) {
        var sPathId;
        var sName;
        var fnCallback;
        var oExternalObject;
        if (typeof arg1 === 'string' && typeof arg2 === 'string' && typeof arg3 === 'function') {
            sPathId = arg1;
            sName = arg2;
            fnCallback = arg3;
            oExternalObject = arg4;
            oPersistence.modifyPath(sPathId, sName, fnCallback, oExternalObject);
        } else if (typeof arg1 === 'string' && typeof arg2 === 'function') {
            sName = arg1;
            fnCallback = arg2;
            oExternalObject = arg3;
            oPersistence.createPath(sName, fnCallback, oExternalObject);
        } else {
            oMessageHandler.putMessage(sap.apf.core.createMessageObject({
                code: "5027",
                aParameters: [arg1, arg2, arg3]
            }));
        }
    };
    /**
     * @see sap.apf.core.Persistence#readPaths
     */
    this.readPaths = function (fnCallback) {
        oPersistence.readPaths(fnCallback);
    };
    /**
     * @see sap.apf.core.Persistence#openPath
     */
    this.openPath = function (sPathId, fnCallback, nActiveStep) {
    	function localCallback(oResponse, oEntitiyMetadata, oMessageObject) {
    		if (!oMessageObject && sRememberedPath) {
    			sRememberedPath = undefined;
    		}
    		fnCallback(oResponse, oEntitiyMetadata, oMessageObject);
    	}
        return oPersistence.openPath(sPathId, localCallback, nActiveStep);
    };
    /**
     * @see sap.apf.core.Persistence#deletePath
     */
    this.deletePath = function (sPathId, fnCallback) {
        oPersistence.deletePath(sPathId, fnCallback);
    };

    /**
     * @see sap.apf#createFilter for api definition
     * @see sap.apf.utils.Filter
     */
    this.createFilter = function (oSelectionVariant) {
        return new sap.apf.utils.Filter(oMessageHandler, oSelectionVariant);
    };
    /**
     * @public
     * @function
     * @name sap.apf.core#getActiveStep
     * @description Returns active step, currently selected step, of analysis path.
     * @returns {sap.apf.core.Step}
     */
    this.getActiveStep = function () {
        return oPath.getActiveSteps()[0];
    };

    /**
     * @public
     * @function
     * @name sap.apf.core#getCumulativeFilterUpToActiveStep
     * @description Returns the cumulative filter up to the active step (included) and the context
     * @returns {sap.apf.core.utils.Filter} cumulativeFilter
     */
    this.getCumulativeFilterUpToActiveStep = function () {
        return oPath.getCumulativeFilterUpToActiveStep();
    };
    /**
     * @public
     * @function
     * @name sap.apf.core#setActiveStep
     * @description Sets handed over step as the active one.
     * @param {sap.apf.core.Step} oStep The step to be set as active
     * @returns undefined
     */
    this.setActiveStep = function (oStep) {
        oPath.makeStepActive(oStep);
        var aActiveSteps = oPath.getActiveSteps();
        var i;
        for (i = 0; i < aActiveSteps.length; ++i) {
            oPath.makeStepInactive(aActiveSteps[i]);
        }
        return oPath.makeStepActive(oStep);
    };
    
    /**
     * @public
     * @function
     * @name sap.apf.core.Instance#createFirstStep
     * @description Method to be used APF internally by the binding class to create instances from representation constructors.
     */
    this.createFirstStep = function (sStepId, sRepId, callback) {
        var isValidStepId = false;
        var stepTemplates;
        
        stepTemplates = that.getStepTemplates();
        
        stepTemplates.forEach(function(item){
            isValidStepId = item.id === sStepId ? true : isValidStepId;
        });
        
        if (!isValidStepId) {
			oMessageHandler.putMessage(oMessageHandler.createMessageObject({
        		code : '5036',
        		aParameters : [sStepId]
			}));
        } else {
        	that.createStep(sStepId, callback, sRepId);
        }
    };
    
    /**
     * @private
     * @function
     * @name sap.apf.core.Instance#getFunctionCreateRequest
     * @description Returns function createRequest from sap.apf.core.ConfigurationFactory
     */
    this.getFunctionCreateRequest = function(){
     return oConfigurationFactory.createRequest;	
    };

    // create local singleton instances...

    oTextResourceHandler = new sap.apf.core.TextResourceHandler(oInject);
    oMessageHandler.setTextResourceHandler(oTextResourceHandler);

    if (oApiInject.manifests) {
   	 	oInject.manifests = oApiInject.manifests;  	 
    }
    
    oConfigurationFactory = new sap.apf.core.ConfigurationFactory(oInject);

    var oInjectMetadataFactory = {
        entityTypeMetadata: sap.apf.core.EntityTypeMetadata,
        hashtable: sap.apf.utils.Hashtable,
        metadata: sap.apf.core.Metadata,
        metadataFacade: sap.apf.core.MetadataFacade,
        metadataProperty: sap.apf.core.MetadataProperty,
        messageHandler: oInject.messageHandler,
        coreApi: that,
        datajs: OData,
        configurationFactory: oConfigurationFactory
    };
    oMetadataFactory = new sap.apf.core.MetadataFactory(oInjectMetadataFactory);

    oPath = new sap.apf.core.Path(oInject);
    oSessionHandler = new sap.apf.core.SessionHandler(oInject);
    oPersistence = new sap.apf.core.Persistence(oInject);

    oResourcePathHandler = new sap.apf.core.ResourcePathHandler(oInject);
};

}; // end of sap/apf/core/instance.js
if ( !jQuery.sap.isDeclared('sap.apf.modeler.Component') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP SE. All rights reserved
 */
/*global jQuery, sap */
(function() {
	'use strict';
	jQuery.sap.declare("sap.apf.modeler.Component");
	jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained

	
	jQuery.sap.require('sap.m.routing.RouteMatchedHandler'); // unlisted dependency retained

	
	
	
	
	/**
	 * @private
	 * @class Base Component for APF Modeler.
	 * @name sap.apf.modeler.Component
	 * @extends sap.ui.core.UIComponent
	 */
	sap.ui.core.UIComponent.extend("sap.apf.modeler.Component", {
		oCoreApi : null,
		metadata : {
			manifest : "json"
		},
		/**
		 * @private
		 * @description Initialize the Component instance after creation. The component, that extends this component should call this method.
		 * @function
		 * @name sap.apf.modeler.Component.prototype.init
		 */
		init : function() {
			//check datasource from manifest, whether there are other settings
			//for backward compability 1.28 fiori v1.0
			var persistenceServiceRoot;
			var bUseLayeredRepositoryForAnalyticalConfiguration = false;
			var startParameters;
			
			if (this.initHasAlreadyBeenCalled) {
				return;
			}
			this.initHasAlreadyBeenCalled = true;
			var manifest = jQuery.extend({}, true, this.getMetadata().getManifest());  
			
			//persistence service root can be defined via manifest
			if (manifest["sap.apf"] &&  manifest["sap.apf"].activateLrep) {
				bUseLayeredRepositoryForAnalyticalConfiguration = manifest["sap.apf"].activateLrep;
			}
			//persistence service root via url parameters
			if (jQuery.sap.getUriParameters().get('sap-apf-activate-lrep')) {
				bUseLayeredRepositoryForAnalyticalConfiguration = true;
			} else {
				startParameters = this.getComponentData && this.getComponentData() && this.getComponentData().startupParameters;
				if(startParameters && startParameters['sap-apf-activate-lrep']) {
					bUseLayeredRepositoryForAnalyticalConfiguration = startParameters['sap-apf-activate-lrep'][0];
				}
			}
			 
			
			if (manifest["sap.app"].dataSources && manifest["sap.app"].dataSources.AnalyticalConfigurationServiceRoot) {
				persistenceServiceRoot = manifest["sap.app"].dataSources.AnalyticalConfigurationServiceRoot.uri;
				
			} else {
				persistenceServiceRoot = sap.apf.core.constants.modelerPersistenceServiceRoot;
			}
			
			var persistenceConfiguration = {		
				serviceRoot : persistenceServiceRoot,
				useLayeredRepositoryForAnalyticalConfiguration : bUseLayeredRepositoryForAnalyticalConfiguration
			};
			var inject = {
					instances : { component : this }
			};
			
			if (bUseLayeredRepositoryForAnalyticalConfiguration) {
				inject.constructor = {
						persistenceProxy : sap.apf.core.LayeredRepositoryProxy
				}
			}
			this.oCoreApi = new sap.apf.modeler.core.Instance(persistenceConfiguration, inject);
			var apfLocation = this.oCoreApi.getUriGenerator().getApfLocation();
			jQuery.sap.includeStyleSheet(apfLocation + "modeler/resources/css/configModeler.css", "configModelerCss");
			sap.ui.core.UIComponent.prototype.init.apply(this, arguments);
			//initialize the router
			var oRouter = this.getRouter();
			this.oRouteHandler = new sap.m.routing.RouteMatchedHandler(oRouter);
			oRouter.initialize();
		},
		/**
		 * @private
		 * @description Creates the content of the component. A component, that extends this component should call this method.
		 * @function
		 * @name sap.apf.modeler.Component.prototype.createContent
		 * @returns {sap.ui.core.Control} the content
		 */
		createContent : function() {
			if (applicationListView === undefined) {
	
				var applicationListView = sap.ui.view({
					viewName : "sap.apf.modeler.ui.view.applicationList",
					type : "XML",
					viewData : this.oCoreApi
				});
			}
			var apfLocation = this.oCoreApi.getUriGenerator().getApfLocation();
			return applicationListView;
		}
	});
}());

}; // end of sap/apf/modeler/Component.js
if ( !jQuery.sap.isDeclared('sap.apf.api') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/*global jQuery, sap */

(function () {
    'use strict';

    jQuery.sap.declare('sap.apf.api');

    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    
    
    
    

    /**
     * @public
     * @class Official API for Analysis Path Framework (APF)<br>
     * <p>
     * The APF API provides a consuming application access to the functionality of the APF. It is assumed that the consuming application extends type {@link sap.apf.base.Component}.
     * The API reference is returned by method {@link sap.apf.base.Component#getApi}.
     * <br>
     * Objects and types returned by methods of APF API or passed in parameters of APF API method also belong to the API.
     * These objects and types are documented in their respective sections of this documentation.
     * All methods, objects or types that are not explicitly documented as public are strictly internal and may be changed without prior notice.
     * This also includes all methods, objects or types being classified as experimental.<br>
     * Furthermore there is no need to instantiate required entities directly by applying the JavaScript 'new'-operator on their respective constructors.
     * Instead they should be created by consumers using a create method available on API-level, such as e.g. {@link sap.apf.Api#createMessageObject} for {@link sap.apf.core.MessageObject} or {@link sap.apf.Api#createFilter} for {@link sap.apf.utils.Filter}.
     * </p>
     * @name sap.apf.Api
     * @param {sap.apf.Component} oComponent - A reference to the calling Component.js. The reference provides access to parameters and context.
     * @param {Object} [injectedConstructors] - injected constructors for testing.
     * @param {Object} [manifests] - manifests of the component and the base component itself
     */
    sap.apf.Api = function (oComponent, injectedConstructors, manifests) {
        var oMessageHandler;
        var oCoreApi;
        var oStartParameter;
        var oNavigationHandler;
        var oStartFilterHandler;
        var oExternalContext; 
        var oFilterIdHandler; 
        
        var injectStartFilterHandler;
        var injectExternalContext;
        var injectFilterIdHandler;
        
        /**
         * @public
         * @description Contains 'api'
         * @returns {string}
         */
        this.type = 'api';

        /**
         * @public
         * @deprecated since Version 1.23.1. Use sap.apf.core.constants instead.
         * @name sap.apf.constants
         * @description Constants to be used by APF consumers.
         * @type {Object}
         */
        this.constants = {};
        /**
         * @public
         * @deprecated since Version 1.23.1. Use sap.apf.core.constants instead.
         * @name sap.apf.constants.eventTypes
         * @description Constants for events used by APF consumers.
         */
        this.constants.eventTypes = sap.apf.core.constants.eventTypes;
        
        oStartParameter = new sap.apf.utils.StartParameter(oComponent, manifests);
        oMessageHandler = new sap.apf.core.MessageHandler();
        oMessageHandler.activateOnErrorHandling(true);
        
        oCoreApi = new sap.apf.core.Instance({
        	startParameter : oStartParameter,
        	messageHandler : oMessageHandler,
        	manifests : manifests, 
        	getCumulativeFilter : function(){
        		return oStartFilterHandler.getCumulativeFilter();
        	}
        });
        
        /**
         * @private
         * @description This method will be automatically called, when the component is destroyed. 
         * Never call this function directly
         * @function
         */
        this.destroy = function() {
        	
        	if (oUiApi && oUiApi.destroy) {  //BLR Team
        		oUiApi.destroy();
        	}
        	if (oCoreApi) {
        		oCoreApi.destroy();
        	}
        	oUiApi = undefined;
        	oMessageHandler.activateOnErrorHandling(false);
        	oMessageHandler = undefined;
            oCoreApi = undefined;
            oStartParameter = undefined;
            oNavigationHandler = undefined;
        };
        /**
         * @public
         * @experimental Revision planned by moving the method into apf.Component.js.
         * @function
         * @name sap.apf.Api#activateOnErrorHandling
         * @description The handling of the window.onerror by the message handler is
         *              either switched on or off. Per default the handling is deactivated.
         * @param {boolean} bHandling Boolean true switches the winow.onerror handling on
         * @returns undefined
         */
        this.activateOnErrorHandling = function (bHandling) {
            return oCoreApi.activateOnErrorHandling(bHandling);
        };

        // --------------- Begin of DEPRECATED -------------------------------- */
        /**
         * @private
         * @function
         * @name sap.apf.Api#getStartParameterFacade
         * @description Returns start parameter which are passed by component or url parameter
         * @returns {sap.apf.utils.startParameter}
         */
        this.getStartParameterFacade = function () {
            return oCoreApi.getStartParameterFacade();
        };
        
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#setCallbackForMessageHandling
         * @description Sets a callback function, so that a message can be further
         *              processed.
         * @param {function} fnCallback
         *            The callback function will be called with the messageObject of type {sap.apf.core.MessageObject}.
         * @returns undefined
         */
        this.setCallbackForMessageHandling = function (fnCallback) {
        	return oCoreApi.setCallbackForMessageHandling(fnCallback);
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#setApplicationCallbackForMessageHandling
         * @description Sets an application callback function, which allows applications to register a message callback.
         * @param {function} fnCallback
         *            The callback function will be called with the messageObject of type {sap.apf.core.MessageObject}.
         * @returns undefined
         */
        this.setApplicationCallbackForMessageHandling = function (fnCallback) {
            return oCoreApi.setApplicationCallbackForMessageHandling(fnCallback);
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#getLogMessages
         * @description Returns a copy of APF log messages with severity 'fatal'.
         * @returns {string[]} Array containing the message log. The message put last is at first array position.
         */
        this.getLogMessages = function () {
            return oCoreApi.getLogMessages();
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#createStep
         * @description Creates a step object from the configuration object and adds it to the path.
         * @param {string} sStepId Step ID as defined in the analytical content configuration.
         * @param {function} fnStepProcessedCallback Callback for update of steps. Same semantics as in {@link sap.apf.Api#updatePath}
         * @param {string} [sRepresentationId] Parameter that allows definition of the representation id that shall
         * initially be selected. If omitted, the first configured representation will be selected.
         * @return {sap.apf.core.Step}
         */
        this.createStep = function (sStepId, fnStepProcessedCallback, sRepresentationId) {
            return oCoreApi.createStep(sStepId, fnStepProcessedCallback, sRepresentationId);
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#getActiveStep
         * @description Returns active step, currently selected step, of analysis path.
         * @returns {sap.apf.core.Step}
         */
        this.getActiveStep = function () {
            return oCoreApi.getActiveStep();
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#getCategories
         * @description Returns category objects of all loaded category configuration objects.
         * @returns {object[]} Object with configuration information about a category.
         */
        this.getCategories = function () {
            return oCoreApi.getCategories();
        };

        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#getSteps
         * @description Gets the ordered sequence of all steps contained in the analysis path.
         * Each step is a reference to the object in the path.
         * Each step shall always be identified by the reference to its step object,
         * e.g. in methods like removeStep, moveStepToPosition, setActiveStep, etc.
         * @returns {sap.apf.core.Step[]}
         */
        this.getSteps = function () {
            return oCoreApi.getSteps();
        };
        //noinspection JSValidateJSDoc
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#getStepTemplates
         * @description Returns step templates based on all steps configured in the analytical content configuration.
         * A step template contains static information and convenience functions.
         * @returns {sap.apf.core.configurationFactory.StepTemplate[]}
         */
        this.getStepTemplates = function () {
            return oCoreApi.getStepTemplates();
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#getFacetFilterConfigurations
         * @description Returns all facet filters configured in the analytical content configuration.
         * @returns {Array} Contains facet filter configuration objects
         */
        this.getFacetFilterConfigurations = function () {
            return oCoreApi.getFacetFilterConfigurations();
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#getApplicationConfigProperties
         * @description This function returns those properties of the application configuration file that are not internally used.
         * @returns {object}
         */
        this.getApplicationConfigProperties = function () {
            return oCoreApi.getApplicationConfigProperties();
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#moveStepToPosition
         * @description Moves a step in the analysis path to the specified target position.
         * @param {sap.apf.core.Step} oStep The step object to be moved
         * @param {number} nPosition The target position. Must be a valid position in the path, between zero and length-1.
         * @param {function} fnStepProcessedCallback Callback for update of steps. Same semantics as in {@link sap.apf.Api#updatePath}
         * @returns undefined
         */
        this.moveStepToPosition = function (oStep, nPosition, fnStepProcessedCallback) {
            return oCoreApi.moveStepToPosition(oStep, nPosition, fnStepProcessedCallback);
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#removeStep
         * @description Removes a step from the analysis path.
         * @param {sap.apf.core.Step} oStep The step object to be removed. The reference must be an object contained in the path. Otherwise, a message will be put.
         * @param {function} fnStepProcessedCallback Callback for update of steps. Same semantics as in {@link sap.apf.Api#updatePath}
         * @returns undefined
         */
        this.removeStep = function (oStep, fnStepProcessedCallback) {
            return oCoreApi.removeStep(oStep, fnStepProcessedCallback);
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#resetPath
         * @description Removes all steps from the path and removes active step.
         * @returns undefined
         */
        this.resetPath = function () {
            return oCoreApi.resetPath();
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#setActiveStep
         * @description Sets handed over step as the active one.
         * @param {sap.apf.core.Step} oStep The step to be set as active
         * @returns undefined
         */
        this.setActiveStep = function (oStep) {
            return oCoreApi.setActiveStep(oStep);
        };

        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#stepIsActive
         * @description Checks whether a step is active or not.
         * @param {sap.apf.core.Step} oStep Step reference
         * @returns {boolean}
         */
        this.stepIsActive = function (oStep) {
            return oCoreApi.stepIsActive(oStep);
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#updatePath
         * @description The steps in the path will be updated sequentially - starting with the analysis step at position 0.
         * Update of a step means sending an OData request and providing the step representation with the request response data.
         * Actual filter values that need to be sent with the request for a specific step in the update sequence are determined by transforming selections on step
         * representations of all precedent steps into a cumulative filter expression.
         * Furthermore the representation of the current step is queried for request options.
         * <br>
         * Following aspects of analysis path update are noteworthy:
         * <ul>
         * <li>An OData request for update of a specific step will only be sent if at least one of both determined values, cumulative Filter or request options,
         * has changed between the last update for this step where a request was sent and the current update cycle.</li>
         * <li>Because transformation of selections on a UI representation into a filter expression is based on current
         * data, OData requests need to be sent sequentially following the order of steps in the analysis path.
         * In other words: request for step n can earliest be sent once data for step n-1 has been received and evaluated</li>
         * </ul>
         * @param {function} fnStepProcessedCallback Callback function that is called for each step during the update of an analysis path.
         * First argument of the callback function is the step instance.
         * The second argument is a boolean indicator, telling whether data for the step has been updated with current request response data or not.
         * Data of a step will not be updated if there is no difference in OData request attributes between previous and current (potential) update.
         * @returns undefined
         */
        this.updatePath = function (fnStepProcessedCallback) {
            return oCoreApi.updatePath(fnStepProcessedCallback);
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#getApfLocation
         * @description Returns the location of the APF library on the server.
         * @returns {string}
         */
        this.getApfLocation = function () {
            return oCoreApi.getUriGenerator().getApfLocation();
        };

        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#readPaths
         * @description Reads all stored paths of the currently logged on user from server.
         * Result is returned as a list sorted by last changed date and time of a saved path in descending order.
         * @param {function} fnCallback The first argument of the callback function is an object with property paths and status.
         * The second argument is {sap.apf.core.EntityTypeMetadata}.
         * The third argument is undefined or {sap.apf.core.MessageObject} if a message occurred.
         * @returns undefined
         */
        this.readPaths = function (fnCallback) {
            return oCoreApi.readPaths(fnCallback);
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#savePath
         * @description Saves or modifies the current path on server side under the provided name.
         * @param {string} [sPathId] If provided the path identified by the ID is modified with the current path.
         * If omitted the current path will be created as new saved path with a new ID.
         * @param {string} sName Name of the path to be saved
         * @param {function} fnCallback The first argument of the callback function is an object with property AnalysisPath and status.
         * The second argument is {sap.apf.core.EntityTypeMetadata}.
         * The third argument is undefined or {sap.apf.core.MessageObject} if a message occurred.
         * @returns undefined
         */
        this.savePath = function (sPathId, sName, fnCallback) {
            oCoreApi.savePath(sPathId, sName, fnCallback);
        };
        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#openPath
         * @description Opens a path, that has been stored on server side and replaces the current path.
         * @param {string} sPathId Identifies the analysis path to be opened
         * @param {function} fnCallback The first argument of the callback function is a JS object with property path, that holds the stored path and status. The second argument is {sap.apf.core.EntityTypeMetadata}. The third argument is undefined or {sap.apf.core.MessageObject} if a message occurred.
         * @param {number} [nActiveStep] Sets the active step.
         * @returns undefined
         */
        this.openPath = function (sPathId, fnCallback, nActiveStep) {
            return oCoreApi.openPath(sPathId, fnCallback, nActiveStep);
        };

        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#deletePath
         * @description Deletes the path with the given ID on server
         * @param {string} sPathId Identifies the analysis path to be deleted
         * @param {function} fnCallback The first argument of the callback function is a JS object, that holds the property status. The second argument is {sap.apf.core.EntityTypeMetadata}. The third argument is undefined or {sap.apf.core.MessageObject} if a message occurred.
         * @returns undefined
         * @deprecated since Version 1.23.1.
         */
        this.deletePath = function (sPathId, fnCallback) {
            return oCoreApi.deletePath(sPathId, fnCallback);
        };

        /**
         * @private
         * @deprecated since Version 1.23.1. Remains in api in order to maintain downward compatibility to 3 Wave 5 apps.
         * @function
         * @name sap.apf.Api#addFacetFilter
         * @description Injects the application facet filter component into APF layout placeholder
         * @returns undefined
         */
        this.addFacetFilter = function (facetFilter) {
            oUiApi.getLayoutView().getController().addFacetFilter(facetFilter);
        };        /**
         * @private
         * @deprecated since Version 1.23.1.
         * @function
         * @name sap.apf.Api#getEventCallback
         * @param {sap.apf.core.constants.eventTypes} sEventType is the type of event for registering the fnCallback for that particular event type
         * @returns the callback registered for the particular event type.
         */
        this.getEventCallback = function (sEventType) {
            return oUiApi.getEventCallback(sEventType);
        };

// --------------- end of DEPRECATED ------------------------------------------ */

  	
        /**
         * @public
         * @function
         * @name sap.apf.Api#putMessage
         * @description A message is passed to the APF message handler for further processing.
         *              All message specific settings (e.g. message code or severity) need to be passed within an APF message object instance.
         * @param {sap.apf.core.MessageObject} oMessage The message object shall be created by method {@link sap.apf.Api#createMessageObject}.
         * @returns undefined
         */
        this.putMessage = function (oMessage) {
            return oCoreApi.putMessage(oMessage);
        };
        /**
         * @public
         * @function
         * @name sap.apf.Api#createMessageObject
         * @description Creates a message object, which is the mandatory parameter for API method putMessage.
         *              So first create the message object and afterwards call putMessage with the message object as argument.
         * @param {object} oConfig Configuration object for the message object.
         * @param {string} oConfig.code The message is classified by its code. The code identifies an entry in the message configuration.
         * @param {array} [oConfig.aParameters] Additional parameters for the message. The parameters are filled into the message text,
         *                                      when the message will be processed by the text resource handler.
         * @param {object} [oConfig.oCallingObject] Reference of the calling object. This can be used later to visualize on the user interface, where the message occurred.
         * @param {string} [oConfig.rawText] Raw text for non translated messages.
         * @returns {sap.apf.core.MessageObject}
         */
        this.createMessageObject = function (oConfig) {
            return oCoreApi.createMessageObject(oConfig);
        };

        /**
         * @public
         * @function
         * @name sap.apf.Api#getTextHtmlEncoded
         * @description Retrieves a text and applies HTML encoding
         * @param {object} oLabel || {string} Label object or text key
         * @param {string[]} aParameters Array with parameters to replace place holders in text.
         * @returns {string}
         */
        this.getTextHtmlEncoded = function (oLabel, aParameters) {
            return oCoreApi.getTextHtmlEncoded(oLabel, aParameters);
        };
        /**
         * @public
         * @function
         * @name sap.apf.Api#getTextNotHtmlEncoded
         * @description Retrieves a text without application of HTML encoding
         * @param {object} oLabel || {string} Label object or text key
         * @param {string[]} aParameters Array with parameters to replace place holders in text.
         * @returns {string}
         */
        this.getTextNotHtmlEncoded = function (oLabel, aParameters) {
            return oCoreApi.getTextNotHtmlEncoded(oLabel, aParameters);
        };
        /**
         * @public
         * @experimental Revision planned by moving the method into apf.Component.js.
         * @deprecated since Version 1.23.1.
//         * FIXME The apf.api instance loads the configuration file provided the filePath is configured in the component parameters.
         * @function
         * @name sap.apf.Api#loadApplicationConfig
         * @description Loads a new  application configuration in JSON format. When called many times, the file is loaded only the first time.
         * @param {string} sFilePath The absolute path of an application configuration file. Host and port will be added in front of this path.
         */
        
        if (!manifests) {
        	this.loadApplicationConfig = function (sFilePath) {
                oCoreApi.loadApplicationConfig(sFilePath);
            };
        } else {
        	this.loadApplicationConfig = function (sFilePath) {};
        }
        

        /**
         * @public
         * @function
         * @name sap.apf.Api#createFilter
         * @description Creates an empty filter object.
         * Its methods can be used to create a logical filter expression.
         * @returns {sap.apf.utils.Filter}
         */
        this.createFilter = function () {
            return oCoreApi.createFilter();
        };

        /**
         * @public
         * @function
         * @name sap.apf.Api#addPathFilter
         * @param {sap.apf.utils.Filter} filter
         * @description  Adds a path filter fragment for a path context.
         * Creates a unique fragment and a corresponding identifier.
         * Subsequent changes need to be done by the update method providing the identifier.
         * @returns  {number} ID to be provided for later updates of the same fragment.
         */
        this.addPathFilter = function (filter) {
            return oFilterIdHandler.add(filter);
        };
        /**
         * @public
         * @function
         * @name sap.apf.Api#updatePathFilter
         * @param {number|string} id Identifier of the path filter fragment as it was returned by addPathFilter method.
         * When using an ID of type string the caller must ensure that it is unique.
         * @param {sap.apf.utils.Filter} filter
         * @description Updates or creates a path filter fragment for the given identifier by fully replacing the existing one.
         * @returns {string} id for update
         */
        this.updatePathFilter = function (id, filter) {
        	oFilterIdHandler.update(id, filter);
        };
        /**
         * @public
         * @function
         * @name sap.apf.Api#getPathFilter
         * @param {number|string} id - Identifier of the path filter fragment as it was returned by addPathFilter method.
         * @description Gets a path filter fragment for the given identifier by fully replacing the existing one.
         * @returns {sap.apf.utils.Filter} filter for id
         */
        this.getPathFilter = function (id) {
            return oFilterIdHandler.get(id);
        };
        /**
         * @public
         * @see sap.apf#createReadRequest
         * @description Creates an object for performing an Odata Request get operation.
         * @param {String|Object} requestConfiguration - identifies a request configuration, which is contained in the analytical configuration.
         *                        or the request configuration is directly passed as an object oRequestConfiguration.
         * @returns {sap.apf.core.ReadRequest}
         */
        this.createReadRequest = function (requestConfiguration) {
            return oCoreApi.createReadRequest(requestConfiguration);
        };
        /**
         * @private
         * @deprecated
         * @see sap.apf#createReadRequestByRequiredFilter
         * @description Creates an object for performing an Odata Request get operation with required filter for parameter entity set key properties & required filters.
         * @param {String|Object} requestConfiguration - identifies a request configuration, which is contained in the analytical configuration.
         *                        or the request configuration is directly passed as an object oRequestConfiguration.
         * @returns {sap.apf.core.ReadRequestByRequiredFilter}
         */
        this.createReadRequestByRequiredFilter = function (requestConfiguration) {
            return oCoreApi.createReadRequestByRequiredFilter(requestConfiguration);
        };

        injectExternalContext = {
    			instance : {
    				startParameter : oStartParameter,
    				component : oComponent, 
    				messageHandler : oMessageHandler
    			}, 
    			functions : {
    				getConfigurationProperties : oCoreApi.getApplicationConfigProperties
    			}
        };
        oExternalContext = new sap.apf.utils.ExternalContext(injectExternalContext);
        
        injectStartFilterHandler =  {
        		functions : {
        			getFacetFilterConfigurations : this.getFacetFilterConfigurations,
        			getCombinedContext : oExternalContext.getCombinedContext,
        			createRequest : oCoreApi.getFunctionCreateRequest()
        		},
        		instance : {
        			messageHandler : oMessageHandler
        		},
        		constructor : {
        			StartFilter : sap.apf.utils.StartFilter
        		}
        };
        oStartFilterHandler = new sap.apf.utils.StartFilterHandler(injectStartFilterHandler);

        injectFilterIdHandler = {
        		functions : {
                    setRestrictionByProperty : oStartFilterHandler.setRestrictionByProperty,
                    getRestrictionByProperty : oStartFilterHandler.getRestrictionByProperty
                }, 
                instance : {
                    messageHandler : oMessageHandler
                }
        };
        oFilterIdHandler = new sap.apf.utils.FilterIdHandler(injectFilterIdHandler);
        
        var injectNavigationHandler = {
        		functions : {
        			getCumulativeFilterUpToActiveStep : oCoreApi.getCumulativeFilterUpToActiveStep,
        			getNavigationTargets : oCoreApi.getNavigationTargets,
        			getActiveStep : oCoreApi.getActiveStep,
        			serializePath : oCoreApi.serializePath,
        			serializeFilterIds : oFilterIdHandler.serialize,
        			deserializePath : oCoreApi.deserializePath,
        			deserializeFilterIds : oFilterIdHandler.deserialize,
        			createRequest : oCoreApi.getFunctionCreateRequest(), 
        			getXappStateId : oCoreApi.getStartParameterFacade().getXappStateId
        		},
                instances : {
                    messageHandler : oMessageHandler,
                    component : oComponent, 
                    startFilterHandler : oStartFilterHandler
                }        		
        };
        oNavigationHandler = new sap.apf.utils.NavigationHandler(injectNavigationHandler);
        
        var oSerializationMediator = new sap.apf.utils.SerializationMediator({
            coreApi : oCoreApi,
            filterIdHandler : oFilterIdHandler,
            startFilterHandler : oStartFilterHandler
        }); 
        
        var oUiApi = new sap.apf.ui.Instance({
            oCoreApi : oCoreApi,
            oFilterIdHandler : oFilterIdHandler,
            oSerializationMediator : oSerializationMediator,
            oNavigationHandler : oNavigationHandler,
            oComponent : oComponent,
            oStartParameter : oStartParameter, 
            oStartFilterHandler : oStartFilterHandler
        });

        /**
         * @private
         * @experimental Not yet final
         * @function
         * @name sap.apf.core.Instance#createRepresentation
         * @description Method to be used APF internally by the binding class to create instances from representation constructors.
         * Reason for declaring the method here, in the scope of APF API, and assigning it to the sap.apf.core-instance, is that the method requires
         * the core and the UI instance to be passed to the representation constructors.
         * @param {string} sRepresentationConstructorPath - A string maintained in the analytical configuration that contains the module path of the respective representation.
         * @param {object} oConfig - The representation specific configuration object as maintained in the analytical configuration.
         * @returns {sap.apf.ui.representations.representationInterface}
         */
        oCoreApi.createRepresentation = function (sRepresentationConstructorPath, oConfig) {
            var interfaceProxy = new sap.apf.ui.representations.RepresentationInterfaceProxy(oCoreApi, oUiApi);
            var Representation = sap.apf.utils.extractFunctionFromModulePathString(sRepresentationConstructorPath);
            return new Representation(interfaceProxy, oConfig);
        };


        /**
         * @public
         * @experimental Method name tentative.
         * @function
         * @name sap.apf.Api#selectionChanged
         * @description Calls the sap.apf.core.instance#updatePath (also see {@link sap.apf.core.Path#update}) with proper callback for UI.
         *                It also refreshes the steps either from the active step or
         *                all the steps depending on the boolean value passed.
         * @param {boolean} bRefreshAllSteps
         */
        this.selectionChanged = function (bRefreshAllSteps) {
            oUiApi.selectionChanged(bRefreshAllSteps);
        };

        /**
         * @private
         * @experimental Revision planned by moving the method into apf.Component.js.
         * @function
         * @name sap.apf.Api#createApplicationLayout
         * @description Creates the APF application layout.
         * @returns {sap.m.App} - the root element of a UI5 mobile application
         */
        this.createApplicationLayout = function () {
        	// Create and return APF UI Content
            return oUiApi.createApplicationLayout();
        };
        
        /**
         * @private
         * @function
         * @name sap.apf.Api#startApf
         * @description Triggers the start-up of APF content creation and calls back APFContentCreated
         * @returns {sap.m.App} - the APF content
         */
        this.startApf = function() {
        	var that = this;
            // Notify applications before APF start-up
            if (this.fnBeforeApfStartupCallback && typeof this.fnBeforeApfStartupCallback === "function") {
            	this.fnBeforeApfStartupCallback.apply(oComponent, [this]);
            }        	
        	
        	// Create APF UI Content
            var oApfContent = this.createApplicationLayout();
            
            var deferredMode = oNavigationHandler.checkMode();
            
            // Handle APF Start-up based on mode
            var promiseStartup = oUiApi.handleStartup(deferredMode);
            
            // Notify applications after APF start-up
            promiseStartup.done(function() {
            	if (that.fnAfterApfStartupCallback && typeof that.fnAfterApfStartupCallback === "function") {
            		that.fnAfterApfStartupCallback.apply(oComponent, [that]);
            	}
            });
            
            // Return APF UI Content
            return oApfContent;
        };

        /**
         * @public
         * @experimental Revision planned for method name.
         * @deprecated since Version 1.23.1. Remains in api in order to maintain downward compatibility to 3 Wave 5 apps.
         * @function
         * @name sap.apf.Api#addMasterFooterContent
         * @description Adds an element to the footer area.
         * @param {object} oControl any valid UI5 control.
         */
        this.addMasterFooterContent = function (oControl) {
            return oUiApi.addMasterFooterContentRight(oControl);
        };

        /**
         * @public
         * @experimental Revision planned for all parameter objects of callback function.
         * @function
         * @name sap.apf.Api#setEventCallback
         * @description Register the function callback to be executed on the given event type.
         *                fnCallback will be executed under a context and will be passed with arguments depending on the event type.
         * @param {sap.apf.core.constants.eventTypes} sEventType is the type of event for registering the fnCallback for that particular event type
         *                    printTriggered - Registers a callback for initial page print, this callback returns
         *                                     2d array
         *                    contextChanged : Registers a callback for context change, which will set the context of the application
         * @param {function} fnCallback that will be executed depending on the event type.
         * @returns {boolean} true or false based on success or failure of registering the listener.
         */
        this.setEventCallback = function (sEventType, fnCallback) {
            switch (sEventType) {
                case sap.apf.core.constants.eventTypes.contextChanged:
                    oUiApi.setEventCallback(sEventType, fnCallback);
                    return true;
                case sap.apf.core.constants.eventTypes.printTriggered:
                    oUiApi.setEventCallback(sEventType, fnCallback);
                    return true;
                case sap.apf.core.constants.eventTypes.format:
                    oUiApi.setEventCallback(sEventType, fnCallback);
                    return true;
                default:
                    return false;
            }
        };
        
        /**
         * @public
         * @function
         * @name sap.apf.Api#setCallbackBeforeApfStartup
         * @description Register the function callback to be executed before APF start-up.
		 * 				Callback is called with APF API instance as parameter and 'this' set to the Component instance.
         * @param {function} fnCallback that will be executed before APF start-up.
         */
        this.setCallbackBeforeApfStartup = function (fnCallback) {
        	this.fnBeforeApfStartupCallback = fnCallback;
        };
        
        /**
         * @public
         * @function
         * @name sap.apf.Api#setCallbackAfterApfStartup
         * @description Register the function callback to be executed after APF start-up and content has been created.
		 * 				Callback is called with APF API instance as parameter and 'this' set to the Component instance.
         * @param {function} fnCallback that will be executed after APF start-up and content has been created.
         */
        this.setCallbackAfterApfStartup = function (fnCallback) {
        	this.fnAfterApfStartupCallback = fnCallback;
        };

        /**
         * Injects all internal references to a probe object whose constructor is injected.
         */
        if ( injectedConstructors ) {
            if ( injectedConstructors.probe ) {
                //noinspection JSUnusedAssignment
                new injectedConstructors.probe({
                    coreApi: oCoreApi,
                    component: oComponent,
                    uiApi: oUiApi,
                    serializationMediator: oSerializationMediator,
                    navigationHandler: oNavigationHandler, 
                    startParameter: oStartParameter, 
                    injectedFunctionsNavigationHandler : injectNavigationHandler.functions,
                    startFilterHandler : oStartFilterHandler
                });
            }
        }
        
    };
}());

}; // end of sap/apf/api.js
if ( !jQuery.sap.isDeclared('sap.apf.base.Component') ) {
/*!
 * SAP APF Analysis Path Framework
 *
 * (c) Copyright 2012-2015 SAP SE. All rights reserved
 */
/*global jQuery, sap */

(function () {
    'use strict';

    jQuery.sap.declare("sap.apf.base.Component");
    jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained

    
    /**
     * @public
     * @class Base Component for all APF based applications.
     * @name sap.apf.base.Component
     * @extends sap.ui.core.UIComponent
     * @since SAP UI5 1.30.0.
     */
    sap.ui.core.UIComponent.extend("sap.apf.base.Component", {
      
        metadata: {
        	"manifest": "json",
            "publicMethods": ["getApi"]
        },

        oApi: null,
        init: function () {
        
            if (!this.oApi) {
            	
            	var baseManifest = sap.apf.base.Component.prototype.getMetadata().getManifest();
            	
            	var manifest = jQuery.extend({}, true, this.getMetadata().getManifest());     		
                this.oApi = new sap.apf.Api(this, undefined, { manifest : manifest, baseManifest : baseManifest } );
            } else {
            	return;
            }
            sap.ui.core.UIComponent.prototype.init.apply(this, arguments); 
            
        },
        /**
         * @public
         * @description Creates the content of the component. A component that extends this component shall call this method.
         * @function
         * @name sap.apf.base.Component.prototype.createContent
         * @returns {sap.ui.core.Control} the content
         */
        createContent: function () {
        	
            sap.ui.core.UIComponent.prototype.createContent.apply(this, arguments);
            return this.oApi.startApf();
        },
        /**
         * @public
         * @description Cleanup the Component instance. The component that extends this component should call this method.
         * @function
         * @name sap.apf.base.Component.prototype.exit
         */
        exit: function () {
            this.oApi.destroy();
        },
        /**
         * @public
         * @function
         * @name sap.apf.base.Component#getApi
         * @description Returns the instance of the APF API.
         * @returns {sap.apf.Api}
         */
        getApi: function () {
            return this.oApi;
        }
    });

}());

}; // end of sap/apf/base/Component.js
if ( !jQuery.sap.isDeclared('sap.apf.Component') ) {
/*!
 * SAP APF Analysis Path Framework
 * 
 * (c) Copyright 2012-2014 SAP AG. All rights reserved
 */
/*global jQuery, sap */

(function() {
	'use strict';
	jQuery.sap.declare("sap.apf.Component");
	jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained

	
	/**
	 * @public
	 * @class Base Component for all APF based applications.
	 * @name sap.apf.Component
	 * @extends sap.ui.core.UIComponent
	 * @deprecated since SAP UI 1.30. This ./Component.js was used for any application build with UI5 Version < 1.30.
	 * 		Use the new ./base/Component.js instead for any application build with UI5 Version >= 1.30
	 */
	sap.ui.core.UIComponent.extend("sap.apf.Component", {
		oApi : null,
		metadata : {
			"config" : {
				"fullWidth" : true
			},
			"name" : "CoreComponent",
			"version" : "0.0.1",
			"publicMethods" : [ "getApi" ],
			"dependencies" : {
				"libs" : [ "sap.m", "sap.ui.layout", "sap.ca.ui", "sap.viz" ]
			}
		},
		/**
		 * @public
		 * @description Initialize the Component instance after creation. The component, that extends this component should call this method.
		 * @function
		 * @name sap.apf.Component.prototype.init
		 */
		init : function() {
            if (!this.oApi) {
                this.oApi = new sap.apf.Api(this);
            }
			
			// APF loads application configuration if sap-apf-app-config-path is provided via start parameters
			var appConfigPath = this.oApi.getStartParameterFacade().getApplicationConfigurationPath();
			if (appConfigPath) {
				this.oApi.loadApplicationConfig(appConfigPath);
			}
			sap.ui.core.UIComponent.prototype.init.apply(this, arguments);
		},
		/**
		 * @public
		 * @description Creates the content of the component. A component, that extends this component should call this method.
		 * @function
		 * @name sap.apf.Component.prototype.createContent
		 * @returns {sap.ui.core.Control} the content
		 */
		createContent : function() {
			sap.ui.core.UIComponent.prototype.createContent.apply(this, arguments);
			return this.oApi.startApf();
		},
		/**
		 * @public
		 * @description Cleanup  the Component instance . The component, that extends this component should call this method.
		 * @function
		 * @name sap.apf.Component.prototype.exit
		 */
		exit : function() {
			this.oApi.destroy();
		},
		/**
		 * @public
		 * @function
		 * @name sap.apf.Component#getApi
		 * @description Returns the instance of the APF API.
		 * @returns {sap.apf.Api}
		 */
		getApi : function() {
			return this.oApi;
		}
	});
}());

}; // end of sap/apf/Component.js
