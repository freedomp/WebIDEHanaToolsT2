/**
 * DISCLAIMER:
 * 
 * This view is implemented under the following assumptions related to the selected OData service:
 * 
 * 1. Status Property
 *    a. The main OData collection contains a status property
 *    b. The status property accepts the following values: "New", "In Process", "Approved", and â€œRejected".
 *
 * 2. Attachments Collection
 *    a. The OData service provides an attachments collection.
 *    b. There is a navigation property from the main data collection to the attachment collection.
 *    c. Each attachment contains the following properties: file name, content (as a Base-64 string), content type and a unique id.
 *    d. Additionally, each attachment entry contains the id of the item in the main collection that relates to it (foreign key).
 *    e. Only image file attachments are supported.
 *
 * 3. Create Attachment
 *    a. The create operation is executed on the attachments collection.
 *    b. The new attachment entry includes all the attributes mentioned above.
 *    c. The new attachment entry includes the id of the item in the main collection it relates to.
 *    d. The new attachment unique id is created by the service during the create operation.
 * 
 */
jQuery.sap.require("{{projectName}}.util.Formatter");
jQuery.sap.require("{{projectName}}.util.Controller");
jQuery.sap.require("{{projectName}}.util.GuidGenerator");

{{projectName}}.util.Controller.extend("{{projectName}}.view.Detail", {

	onInit : function() {
		this.oInitialLoadFinishedDeferred = jQuery.Deferred();

		if (sap.ui.Device.system.phone) {
			//don't wait for the master on a phone
			this.oInitialLoadFinishedDeferred.resolve();
		} else {
			this.getView().setBusy(true);
			this.getEventBus().subscribe("Master", "InitialLoadFinished", this.onMasterLoaded, this);
		}

		this.getRouter().attachRouteMatched(this.onRouteMatched, this);

	},

	onMasterLoaded : function(sChannel, sEvent, oData) {
		if (oData.oListItem) {
			this.bindView(oData.oListItem.getBindingContext().getPath());
			this.getView().setBusy(false);
			this.oInitialLoadFinishedDeferred.resolve();
		}else{
		    this.getView().setBusy(false);
		}
	},
	

	onRouteMatched : function(oEvent) {
		var oParameters = oEvent.getParameters();

		jQuery.when(this.oInitialLoadFinishedDeferred).then(jQuery.proxy(function() {
			var oView = this.getView();

			// when detail navigation occurs, update the binding context
			if (oParameters.name !== "detail") {
				return;
			}

			var sEntityPath = "/" + oParameters.arguments.entity;
			this.bindView(sEntityPath);

			// Which tab?
			var sTabKey = oParameters.arguments.tab;
			this.getEventBus().publish("Detail", "TabChanged", {
				sTabKey : sTabKey
			});

		}, this));

	},

	bindView : function(sEntityPath) {
	
		var oView = this.getView();
		oView.bindElement(sEntityPath);
		
		var that = this;
		this.oModel = oView.getModel();
		this.sEntityPath = sEntityPath;
		
{{~#if claimProcessing.parameters.AttachmentCollection.value.name}}
{{~#if claimProcessing.parameters.AttachmentNav.value.name}}
{{~#if claimProcessing.parameters.AttachmentContent.value.name}}
{{~#if claimProcessing.parameters.AttachmentID.value.name}}
{{~#if claimProcessing.parameters.AttachmentContentType.value.name}}
        this.getView().setBusy(true);
		var oCarousel = this.byId("attachmentsCarousel");
		this.clearCarouselImages();

		this.oModel.read(sEntityPath + "/{{claimProcessing.parameters.AttachmentNav.value.name}}", {
			success : function(oData, response) {
			
			    if(response.requestUri.indexOf(that.sEntityPath) === -1){
                    that.getView().setBusy(false);
                    return;
                }

				that.oAttachmentoData = oData;
				that.appendAttachmentsToCarousel(oData);
				
				if(oCarousel.getPages()[0].data().attachmentId !== "placeholderId"){
					that.byId("removePhotoButton").setEnabled(true);
				}
				else{
					that.byId("removePhotoButton").setEnabled(false);
				}
				that.getView().setBusy(false);
			},
			error : function(oError) {
				that.getView().setBusy(false);
				alert(oError.message);
			}
		});
{{~/if}}
{{~/if}}
{{~/if}}
{{~/if}}
{{~/if}}

		//Check if the data is already on the client
		if (!oView.getModel().getData(sEntityPath)) {

			// Check that the entity specified actually was found.
			oView.getElementBinding().attachEventOnce("dataReceived", jQuery.proxy(function() {
				var oData = oView.getModel().getData(sEntityPath);
				if (!oData) {
					this.showEmptyView();
					this.fireDetailNotFound();
				} else {
					this.fireDetailChanged(sEntityPath);
				}
			}, this));

		} else {
			this.fireDetailChanged(sEntityPath);
		}
	},

	
{{~#if claimProcessing.parameters.AttachmentCollection.value.name}}
{{~#if claimProcessing.parameters.AttachmentContent.value.name}}
{{~#if claimProcessing.parameters.AttachmentID.value.name}}
{{~#if claimProcessing.parameters.AttachmentContentType.value.name}}

	/**
	 * Take photo event handler
	 */
	handleTakeAPicture : function() {
		if (window.cordova) {
			var oBusyDialog = new sap.m.BusyDialog();
			oBusyDialog.open();
			var that = this;
			navigator.camera.getPicture(function(photoData) {
				that.createAndUploadImage(photoData);
				oBusyDialog.close();
			}, function(error) {
				oBusyDialog.close();
			}, {
				destinationType : navigator.camera.DestinationType.DATA_URL,
				sourceType : navigator.camera.PictureSourceType.CAMERA,
				encodingType : navigator.camera.EncodingType.JPEG,
				targetWidth : 300
			});
		}
	},

	/**
	 *  Choose photo from gallery event handler
	 */
	handleChooseFromGallery : function() {
		var that = this;
		navigator.camera.getPicture(function(photoData) {
			that.createAndUploadImage(photoData);
		}, function(error) {
		}, {
			destinationType : navigator.camera.DestinationType.DATA_URL,
			sourceType : navigator.camera.PictureSourceType.PHOTOLIBRARY
		});
	},

	appendAttachmentsToCarousel : function(oData) {
		this.clearCarouselImages();
		var that = this;

		// First image in carousel will always be the take photo placeholder
		var oTakePhotoImage = new sap.m.Image({
			src : './images/cameraImage.png',
			press : [that.handleTakeAPicture, that]
		}).data("attachmentId","placeholderId");

		var oCarousel = this.byId("attachmentsCarousel");
		if ( !oData || !oData.results || oData.results.length === 0) {
			oCarousel.addPage(oTakePhotoImage);
		}
		else {
			for ( var i = 0; i < oData.results.length; i++) {
				var record = oData.results[i];
	
				if (!record.{{claimProcessing.parameters.AttachmentContent.value.name}}) {
					continue;
				}
				var oImage = this.createImageWithBase64Content(record.{{claimProcessing.parameters.AttachmentContent.value.name}}, record.{{claimProcessing.parameters.AttachmentContentType.value.name}}, '300px').data("attachmentId",record.{{claimProcessing.parameters.AttachmentID.value.name}});
				if (oImage) {
					oCarousel.addPage(oImage);
				}
			}
		}
		
	},

	createImageWithBase64Content : function(sContent, sContentType, width) {
        var oImage = new sap.m.Image({
		src : "data:" + sContentType + ";base64," + sContent,
		width : width
        		});
		return oImage;
	},

	addNewImage : function(oData) {

		if (!oData) {
			return;
		}

		var oCarousel = this.byId("attachmentsCarousel");
		var oImage = new sap.m.Image({
			src : "data:image/png;base64," + oData.{{claimProcessing.parameters.AttachmentContent.value.name}},
			width : "300px"
		}).data("attachmentId",oData.{{claimProcessing.parameters.AttachmentID.value.name}});

		oCarousel.insertPage(oImage, 0);

		var oDelegate = {
			onAfterRendering : function() {
				oCarousel.previous();
				oCarousel.removeEventDelegate(oDelegate);
			}
		};

		oCarousel.addEventDelegate(oDelegate);	
	},

	clearCarouselImages : function() {
		this.byId("attachmentsCarousel").removeAllPages();
	},
	
	handleRemovePhoto: function(oEvent) {
	    this.openFileDialog('FileRemover');
	},

	handleAddPhoto : function(oEvent) {
		if (window.cordova) {
			var oButton = oEvent.getSource();

			// create action sheet only once
			if (!this._actionSheet) {
				this._actionSheet = sap.ui.xmlfragment("{{projectName}}.view.PhotosActionSheet", this);
				this.getView().addDependent(this._actionSheet);
			}

			this._actionSheet.openBy(oButton);
		}else{
		    this.openFileDialog('FileUploader');
		}
	},
	
	openFileDialog: function (sType) {
        if (!this[sType]) {
          this[sType] = sap.ui.xmlfragment(
            "{{projectName}}.view." + sType,
            this // associate controller with the fragment
          );
          this.getView().addDependent(this[sType]);
        }
        this[sType].open();
        
     },
     
     onAfterDialogOpen: function (oEvent) {
         var that = this;
        $("#fileInput").change(function(){
            var file = document.getElementById('fileInput').files[0];
            
            that["FileUploader"].setContentWidth("100px");
            that["FileUploader"].setHorizontalScrolling(true);
            
            if(!file){
                if(that["FileUploader"].getBeginButton()){
                    that["FileUploader"].getBeginButton().setEnabled(false);
                }else{
                    that["FileUploader"].mAggregations.beginButton.setEnabled(false);
                }
                
            }else{
                if(that["FileUploader"].getBeginButton()){
                    that["FileUploader"].getBeginButton().setEnabled(true);
                }else{
                    that["FileUploader"].mAggregations.beginButton.setEnabled(true);
                }
            }
        });   
     },
 
     
     onDialogCloseButton: function (oEvent) {
         var that =this;
         var file = document.getElementById('fileInput').files[0];
         var imageType = /image.*/;
         
         if(file){
             if (file.type.match(imageType)) {
        			var reader = new FileReader();
                    reader.onload = function(e) {
                        var index = reader.result.indexOf(",") + 1;
                        var sImage = reader.result.substring(index);
                        that.createAndUploadImage(sImage);
        			}
        			reader.readAsDataURL(file);	
    		} else {
    			alert( "File not supported!");
    		}
         }

        var sType = oEvent.getSource().data("dialogType");
        this[sType].close();
      },
      
      onCancelButtonPress: function (oEvent) {
        var sType = oEvent.getSource().data("dialogType");
        this[sType].close();
      },
	
	onRemoveDialogCloseButton: function(oEvent) {
        var sType = oEvent.getSource().data("dialogType");
        this[sType].close();
	    var that = this;
		var attachmentId = null;
		var oPageToRemove = null;
		var oCarousel = that.byId("attachmentsCarousel");
		if (oCarousel.getPages().length === 1 && oCarousel.getPages()[0].data().attachmentId === "placeholderId") {
			return;
		}
		var sImgId = oCarousel.getActivePage();
		for (var i = 0; i < oCarousel.getPages().length; i++) {
			if (oCarousel.getPages()[i].getId() === sImgId) {
				oPageToRemove = oCarousel.getPages()[i];
				attachmentId = oPageToRemove.data().attachmentId;
				break;
			}
		}

		if (attachmentId) {
			var oBusyDialog = new sap.m.BusyDialog();
			oBusyDialog.open();
			that.oModel.remove("/{{claimProcessing.parameters.AttachmentCollection.value.name}}(\'" + attachmentId + "\')", {
				async : true,
				success: function(oData, response) {
					oCarousel.removePage(oPageToRemove);
					if (oCarousel.getPages().length === 0) {
						that.appendAttachmentsToCarousel({
							results: []
						});
					}
					if(oCarousel.getPages()[0].data().attachmentId === "placeholderId"){
						that.byId("removePhotoButton").setEnabled(false);
					}
					oBusyDialog.close();
					
				},
				error: function(oError) {
					alert(oError.message);
					oBusyDialog.close();
				}
			});
		}
	},

	createAndUploadImage : function(sImageContent) {
		//craete new attachment
		var that = this;
		var sGuid = {{projectName}}.util.GuidGenerator.generateGuid();
		this.oCurrentItemData = this.getView().getBindingContext().getObject();
		var oNewAttachment = {
{{~#if claimProcessing.parameters.AttachmentID.value.name}}
	"{{claimProcessing.parameters.AttachmentID.value.name}}" : sGuid.substring(0,32),
{{~/if}}
{{~#if claimProcessing.parameters.AttachmentFileName.value.name}}
			"{{claimProcessing.parameters.AttachmentFileName.value.name}}" : 'image' + sGuid.substring(0,23) + '.png',
{{~/if}}
{{~#if claimProcessing.parameters.AttachmentContentType.value.name}}
			"{{claimProcessing.parameters.AttachmentContentType.value.name}}" : 'image/png',
{{~/if}}
{{~#if claimProcessing.parameters.AttachmentMainEntityID.value.name}}
{{~#if claimProcessing.parameters.IDAttribute.value.name}}
			"{{claimProcessing.parameters.AttachmentMainEntityID.value.name}}" : this.oCurrentItemData.{{claimProcessing.parameters.IDAttribute.value.name}},
{{~/if}}
{{~/if}}
{{~#if claimProcessing.parameters.AttachmentContent.value.name}}
			"{{claimProcessing.parameters.AttachmentContent.value.name}}" : sImageContent
{{~/if}}
		};

		this.oModel.create("/{{claimProcessing.parameters.AttachmentCollection.value.name}}", oNewAttachment, {
			success : function(oData, response) {
			    that.addNewImage(oData); 
				that.byId("removePhotoButton").setEnabled(true);
			    that.removeCameraImageFromCarousel();
			},
			error : function(oError) {
				alert(oError.message);
			}
		});
	},

	removeCameraImageFromCarousel :function(){
        
        var oCarousel = this.byId("attachmentsCarousel");
        var oPageToRemove = null;
    	for (var i = 0; i < oCarousel.getPages().length; i++) {
            if (oCarousel.getPages()[i].data().attachmentId === 'placeholderId') {
    			oPageToRemove = oCarousel.getPages()[i];
    			break;
    		}    
    	}
		if (oPageToRemove){
		    oCarousel.removePage(oPageToRemove);
		}
    },
{{~/if}}
{{~/if}}
{{~/if}}
{{~/if}}

	showEmptyView : function() {
		this.getRouter().myNavToWithoutHash({
			currentView : this.getView(),
			targetViewName : "{{projectName}}.view.NotFound",
			targetViewType : "XML"
		});
	},

	fireDetailChanged : function(sEntityPath) {
		this.getEventBus().publish("Detail", "Changed", {
			sEntityPath : sEntityPath
		});
	},

	fireDetailNotFound : function() {
		this.getEventBus().publish("Detail", "NotFound");
	},

	onNavBack : function() {
		// This is only relevant when running on phone devices
		this.getRouter().myNavBack("main");
	},

	updateModel : function() {
		var that = this;
		var oBusyDialog = new sap.m.BusyDialog();
		oBusyDialog.open();
{{~#if claimProcessing.parameters.DateFormAttribute.value.name}}
		if (!this.oCurrentItemData.{{claimProcessing.parameters.DateFormAttribute.value.name}}) {
		    this.oCurrentItemData.{{claimProcessing.parameters.DateFormAttribute.value.name}} = new Date();
		}
{{~/if}}
{{~#if claimProcessing.parameters.AttachmentNav.value.name}}
		//TODO: remove line below if service supports inline collections
		this.oCurrentItemData.{{claimProcessing.parameters.AttachmentNav.value.name}} = undefined;
{{~/if}}
		this.oModel.update(this.sEntityPath, this.oCurrentItemData, {
			async : true,
			success : function(oData, response) {
				oBusyDialog.close();
				that.showPopup("Item data has been saved");
			},
			error : function(oError) {
				
				oBusyDialog.close();
				alert(oError.message);
			}
		});
	},


{{~#if claimProcessing.parameters.EnableApproveReject.value}}
	
	onApproveSelect : function() {
{{~#if claimProcessing.parameters.StatusAttribute.value.name}}
		this.oCurrentItemData = this.getView().getBindingContext().getObject();
		this.oCurrentItemData.{{claimProcessing.parameters.StatusAttribute.value.name}} = "Approved";
		this.updateModel();
    	this.showPopup("Item has been approved");
{{~/if}}
	},

	onRejectSelect : function() {
{{~#if claimProcessing.parameters.StatusAttribute.value.name}}
		this.oCurrentItemData = this.getView().getBindingContext().getObject();
		this.oCurrentItemData.{{claimProcessing.parameters.StatusAttribute.value.name}} = "Rejected";
		this.updateModel();
    	this.showPopup("Item has been rejected");
{{~/if}}
	},
	
	onUndoReject : function() {
		
	},

	onUndoApprove : function() {
		
	},
	
{{~/if}}

	onSaveSelect : function(oEvent) {
		this.oCurrentItemData = this.getView().getBindingContext().getObject();
{{~#if claimProcessing.parameters.NumberFormAttribute.value.name}}
		this.oCurrentItemData.{{claimProcessing.parameters.NumberFormAttribute.value.name}} = this.byId("numericAttributeInputField").getValue();
{{~/if}}
{{~#if claimProcessing.parameters.TextFormAttribute.value.name}}
		this.oCurrentItemData.{{claimProcessing.parameters.TextFormAttribute.value.name}} = this.byId("textAttributeInputField").getValue();
{{~/if}}
{{~#if claimProcessing.parameters.DateFormAttribute.value.name}}		
		this.oCurrentItemData.{{claimProcessing.parameters.DateFormAttribute.value.name}} = new Date(this.byId("dateAttributeInputField").getValue());
{{~/if}}

		this.updateModel();
	},

	showPopup : function(message) {
		jQuery.sap.require("sap.m.MessageToast");
		sap.m.MessageToast.show(message);
	},

	onDetailSelect : function(oEvent) {
		sap.ui.core.UIComponent.getRouterFor(this).navTo("detail", {
			entity : oEvent.getSource().getBindingContext().getPath().slice(1),
			tab : oEvent.getParameter("selectedKey")
		}, true);
	},

	onExit : function(oEvent){
		this.getEventBus().unsubscribe("Master", "InitialLoadFinished", this.onMasterLoaded, this);
	}
});