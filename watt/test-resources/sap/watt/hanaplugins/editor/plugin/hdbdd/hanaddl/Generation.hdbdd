namespace Partitions;
context Generation
{
   @nokey
   entity HashPartition
   {
      id : Integer;
      e1 : String(100);
      e2 : String(200);
   }
   technical configuration
   {
      partition by hash (e1, e2) partitions 1;
   };

   @nokey
   entity RangePartition
   {
      id : Integer;
      e1 : Integer;
      e2 : String(200);
   }
   technical configuration
   {
      partition by range (e1) (partition 1 <= values < 100, partition values = 500, partition others);
   };

   @nokey
   entity RoundRobinPartition
   {
      id : Integer;
      e1 : Integer;
      e2 : String(200);
   }
   technical configuration
   {
      partition by roundrobin partitions 1;
   };

   @nokey
   entity HashHashPartition
   {
      id : Integer;
      e1 : Integer;
      e2 : String(200);
   }
   technical configuration
   {
      partition by hash (e1, e2) partitions 1,
              hash (e2) partitions get_num_servers ( );
   };

   @nokey
   entity HashRangePartition
   {
      id : Integer;
      e1 : Integer;
      e2 : LocalDate; 
   }
   technical configuration
   {
      partition by hash (e1, e2) partitions 1,
              range (YEAR(e2)) (partition value = '1997',
                                partition value = '1998',
                                partition 1999 <= values < 2015,
                                partition others);
   };

   @nokey
   entity RangeRangePartition
   {
      id : Integer;
      e1 : LocalDate;
      e2 : LocalDate;
   }
   technical configuration
   {
      partition by range (e2) (partition value = '1998-01-01', partition values = '1998-01-02', partition others),
              range (month(e1)) (partition value = 199805, partition values = 199803, partition 199801 <= values < 199802);
   };

   @nokey
   entity RoundRobinRangePartition
   {
      id : Integer;
      e1 : Integer;
      e2 : String(200);
   }
   technical configuration
   {
      partition by roundrobin partitions get_num_servers(),
              range (e2) (partition value = '5', partition values = '3', partition '0' <= values < '1', partition others);
   };

   entity HashRangeLvl2NoKeyPartition
   {
      id : Integer;
      e1 : LocalDate;
      key e2 : LocalDate;
   }
   technical configuration
   {
      partition by hash (e2) partitions get_num_servers(),
              range (month(e1)) (partition value = 199805, partition values = 199803, partition 199801 <= values < 199802);
   };

   entity HashHashLvl2NoKeyPartition
   {
      id : Integer;
      e1 : LocalDate;
      key e2 : LocalDate;
   }
   technical configuration
   {
      partition by hash (e2) partitions get_num_servers(),
                   hash(e1) partitions get_num_servers();
   };

   entity RangeRangeLvl2NoKeyPartition
   {
      id : Integer;
      e1 : LocalDate;
      key e2 : LocalDate;
   }
   technical configuration
   {
      partition by range (e2) (partition value = '1998-01-01', partition values = '1998-01-02', partition others),
              range (month(e1)) (partition value = '1998/05', partition values = '1998-03', partition '19980101' <= values < '19980215');
   };

   entity RangeRangeYearMonth
   {
        key id : Integer;
        key e1 : LocalDate;
        key e2 : LocalDate;
   }
   technical configuration
   {
    partition by range (year(e1)) (partition value = '1997', partition 19980201 <= values < '1999/01/01', partition value = 200005),
                 range (month(e2)) (partition value = '1998/05', partition values = '1998-03', partition '19980101' <= values < '19980215');
   };

    entity DateRangeFormats
    {
        key d : LocalDate;
    }
    technical configuration
    {
        partition by range(d) (partition '99/1/1' <= values < '99/12/01',
                               partition value = '1999/09-01', 
                               partition value = '1999-09-02', 
                               partition value = '1999-09-03', 
                               partition value = '1999/09/04',
                               partition value = '1999-09/05',
                               partition '1999/9/6' <= values < '1999-9/7');
    };

    entity EscapedSingleQuotes
    {
        key e : String(100);
    }
    technical configuration
    {
        partition by range(e) ( partition value = 'abc''def''''ghi'); 
    };


    entity Grouping
    {
        key e: String(100);
    }
    technical configuration
    {
        group name foo group type bla group subtype hugo;
        partition by hash(e) partitions 100;
    };

    entity StringAndNumericRange
    {
        key e: String(100);
    }
    technical configuration
    {
        partition by range(e) (partition '2020' <= values < '3000');
    };

    entity NumericAndStringRange
    {
        key e: Integer;
    }
    technical configuration
    {
        partition by range(e) (partition 2020 <= values < 3000, partition '3100' <= values < '3200');
    };

    entity RealRange
    {
        key e : Decimal(10,4);
    }
    technical configuration
    {
        partition by range(e)   (partition 10.4 <= values < 100.10);
    };

    entity NonOverlappingInteger
    {
        key id : Integer;
    }
    technical configuration
    {
        partition by range(id) (partition 1000 <= values < 2000, partition 2000 <= values < 3000, partition 3000 <= values < 4000, partition value = 5000);
    };

    entity NonOverlappingDate
    {
        key id : LocalDate;
    }
    technical configuration
    {
        partition by range(id) (partition '1990-01-01' <= values < '1990-03-30', partition '1990-03-30' <= values < '1990-06-30', partition value = '1990-09-30');
    };

    entity NonOverlappingString
    {
        key id : String(100);
    }
    technical configuration
    {
        partition by range(id) (partition 1010 <= values < 200, partition 'aaa' <= values < 'bbb', partition 'bbb' <= values < 'ccc', partition 'ccc' <= values < 'ddd', partition value = 'eee');
    };

    @nokey
    entity BoolHash
    {
        b : Boolean;
    }
    technical configuration
    {
        partition by hash(b) partitions 1;
    };

    @nokey
    entity BoolRange
    {
        b : Boolean;
    }
    technical configuration
    {
        partition by range(b) (partition value = false, partition value = true, partition others);
    };


};
