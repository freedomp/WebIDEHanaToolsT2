grammar HanaExprParser
PARSER_OPTIONS
  PARSER_NAME = "HanaExprParser"
  PARSER_CLASS = "TokenCoCoParser"
  SCANNER_CLASS = "IParserScanner"
  MAX_SUSPICIOUS_MATCHES = 2
  RESERVE_OPERATORS = FALSE
  RESERVE_ALL_KEYWORDS = FALSE
  WARNING_LEVEL = 1
;

// any keyword wildcard
TOK_DEF(_C("#ANYKW#"), NUM_ANYKW)
// any literal wildcard
TOK_DEF(_C("#ANYLIT#"), NUM_ANYLIT)
// whitespace stuff
TOK_DEF(_C("#EOF#"), NUM_EOF)
TOK_DEF(_C("#NL#"), NUM_NL)
TOK_DEF(_C("#COMMENT1#"), NUM_COMMENT1)
TOK_DEF(_C("#COMMENT2#"), NUM_COMMENT2)
// for obscure reasons, the tokens above shall not be changed!
TOK_DEF(_C("."), NUM_DOT)
TOK_DEF(_C(","), NUM_COMMA) // a comment
TOK_DEF(_C(":"), NUM_COLON)
TOK_DEF(_C("<#<DUMMY_TOKEN>#>"), NUM_DUMMY)
TOK_DEF(_C("("), NUM_LPAREN)
TOK_DEF(_C(")"), NUM_RPAREN)
TOK_DEF(_C("/("), NUM_PARAM_LPAREN)
TOK_DEF(_C(")/"), NUM_PARAM_RPAREN)
TOK_DEF(_C("<"), NUM_LT)
TOK_DEF(_C(">"), NUM_GT)
TOK_DEF(_C("["), NUM_LBRACK)
TOK_DEF(_C("]"), NUM_RBRACK)
TOK_DEF(_C("{"), NUM_LBRACE)
TOK_DEF(_C("}"), NUM_RBRACE)
TOK_DEF(_C("#STR_CONST#"), NUM_STR_CONST)
TOK_DEF(_C("#INT_CONST#"), NUM_INT_CONST)
TOK_DEF(_C("#REAL_CONST#"), NUM_REAL_CONST)
TOK_DEF(_C("#DATE_CONST#"), NUM_DATE_CONST)
TOK_DEF(_C("#TIME_CONST#"), NUM_TIME_CONST)
TOK_DEF(_C("#TIMESTAMP_CONST#"), NUM_TIMESTAMP_CONST)
TOK_DEF(_C("#ACTION#"), NUM_ACTION)
TOK_DEF(_C("#ACTIONI#"), NUM_ACTIONI)
TOK_DEF(_C("#"), NUM_HASH)
TOK_DEF(_C("@"), NUM_AT)
TOK_DEF(_C("|"), NUM_PIPE)
TOK_DEF(_C("*"), NUM_STAR)
TOK_DEF(_C("?"), NUM_QUESTION)
TOK_DEF(_C("+"), NUM_PLUS)
TOK_DEF(_C("!"), NUM_BANG)
TOK_DEF(_C("$"), NUM_DOLLAR)
TOK_DEF(_C(">="), NUM_GE)
TOK_DEF(_C("<>"), NUM_NE)
TOK_DEF(_C("::"), NUM_COLONCOLON)
TOK_DEF(_C("#BINARY_CONST#"), NUM_BINARY_CONST)
TOK_DEF(_C("#XXX#"), NUM_ERROR)
TOK_DEF(_C("#SYSCMD#"), NUM_SYS)
// ID is the end of reserved keywords list
// THE ID
TOK_DEF(_C("#ID#"), NUM_ID)

Colon :
    ( ":" | #COLON_FOLLOWED_BY_ID# )
  ;

START :
    Expression %COMMIT
  ;

ExpressionList :
    Expression ( "," Expression )*
  ;

Expression :
    ExprConcat
  ;

ExprConcat :
    ( ExprSum (#PIPE_PIPE# ExprSum )* )
  ;

ExprSum :
    ExprFactor ( ( "+" ExprFactor ) | ( "-" ExprFactor ) )*
  ;

ExprFactor :
    (NOT)? ExprTerm ( ( "*" ExprTerm ) | ( "/" ExprTerm ) | ( "=" | "!=" | "<>" | ">" | ">=" | "<" | "<=" | "and" | "or" | "**" | "%" ) ExprTerm)*
  ;

ExprTerm :
    (
        ( "+" ExprTerm )
    |
        ( "-" ExprTerm )
    |
        ( "(" Expression ")" )
    |
        Func
	|
		#ID# 
	| 
		( "'$$" #ID# "$$'" )
	| 
		#INT_CONST#
	|
		#REAL_CONST#
	|
		#DATE_CONST#
	|
		#TIME_CONST#
    )
  ;

Func :
    FuncName "(" ( Expression ( "," ExpressionList )? )? ")"
	
	;

FuncName :
    (
        "int"
        |
        "float"
        |
	    "double"
	    |
	    "sdfloat"
	    |
	    "decfloat"
	    |
	    "fixed"
	    |
	    "string"
	    |
	    "raw"
	    |
	    "date"
	    |
	    "longdate"
	    |
        "daydate"
        |
	    "time"
	    |
	    "secondtime"
        |
	    "seconddate"
	    |
	    "lob"
	    |
	    "strlen"
	    |
	    "midstr"
	    |
    	"leftstr"
    	|
	    "rightstr"
	    |
	    "instr"
	    |	
	    "hextoraw"
	    |
	    "rawtohex"
	    |
	    "ltrim"
	    |
	    "rtrim"
	    |
	    "trim"
	    |
	    "lpad"
	    |
	    "rpad"
	    |
	    "replace"
	    |
	    "midstru"
        |
	    "upper"
	    |
	    "lower"
	    |
	    "rightstru"
	    |
	    "chars"
	    |
	    "charpos"
	    |
        "sign"
        |
	    "abs"
        |
	    "round"
	    |
	    "rounddown"
	    |
        "utctolacal"
        |
	    "localtoutc"
	    |
	    "utcnow"
	    |
	    "weekday"
	    |
	    "now"
	    |
	    "daysbetween"
	    |
	    "secondsbetween"
	    |
	    "component"
	    |
	    "addseconds"
	    |
	    "adddays"
	    |
	    "quarter"
	    |
	    "if"
	    |
	    "in"
	    |
	    "case"
	    |
	    "isnull"
	    |
	    "min"
	    |
	    "max"
		|
		"format"
    )
  ;

DDL_ENUM :
    "enum"
  ;

DDL_COLON :
    ":"
  ;
  
  BETWEEN :
    "between"
  ;
  
  IN :
    "in"
  ;

IS :
    "is"
  ;

LIKE :
    "like"
  ;
  
  AND :
    "and"
  ;

OR :
    "or"
  ;

NOT :
    "not"
  ;

NULL :
    "null"
  ;

  


arrayCardinality :
    "[" ( IntLiteralWrapper "." "." ( IntLiteralWrapper | "*" ) )? "]"
  ;