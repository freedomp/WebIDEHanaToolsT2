define(function() {
	function AstPrint() {
		this.printNode = function(parseTree, node) {
			if (!node || !jQuery.isFunction(node.instanceOf)) {
				return null;
			}
			if (node.instanceOf("IAstPosition")) {
				__log("AST_PRINT.printNode: Not printable node " + node.$intf, __log.WARNING);
				return null;
			}

			if (node.instanceOf("IQLQuery")) { //TODO: remove me!
				throw new Error("Query element is not supported");
			}

			var isRoot = arguments.length === 2;
			var OUT = [];
			var IND = 0;
			if (!isRoot) {
				OUT = arguments[2];
				IND = arguments[3];
			}

			if (node.instanceOf("IRdlContext")) {
				_printContextContext();
			} //this statement must be placed before IRdlStructuredType
			else if (node.instanceOf("IView")) {
				_printView();
			} //this statement must be placed before IRdlEntity
			else if (node.instanceOf("IRdlEntity")) {
				_printEntity();
			} //this statement must be placed before IRdlStructuredType
			else if (node.instanceOf("IConstElement")) {
				_printConstElement();
			} else if (node.instanceOf("IElement")) {
				_printElement();
			} else if (node.instanceOf("IAction")) {
				_printAction();
			} else if (node.instanceOf("IRdlParameter")) {
				_printActionParameter();
			} else if (node.instanceOf("IEnum")) {
				_printEnum();
			} else if (node.instanceOf("IRdlStructuredType")) {
				_printStructuredType();
			} else if (node.instanceOf("IDerivedType")) {
				_printDerivedType();
			} else if (node.instanceOf("IRdlAnnotation")) {
				_printAnnotation();
			} else if (node.instanceOf("IAccessibleByItem")) {
				_printAccessibleBy();
			} else if (node.instanceOf("ICardinality")) {
				_printCardinality();
			}

			//NOT FINISHED YET
			else if (node.instanceOf("IQLQuery")) {
				_printQLQuery();
			} //this statement must be placed after IRdlExpression
			else if (node.instanceOf("IQLFrom")) {
				_printQLFrom();
			} else if (node.instanceOf("IQLFromElement")) {
				_printQLFromElement();
			} else if (node.instanceOf("IQLGroupBy")) {
				_printQLGroupBy();
			} else if (node.instanceOf("IQLOrderBy")) {
				_printQLOrderBy();
			} else if (node.instanceOf("IQLOrderByEntry")) {
				_printQLOrderByEntry();
			}

			else if (node.instanceOf("IRdlExpression")) {
				_printExpression();
			}

			else {
				__log("AST_PRINT.printNode: MISSING TYPE " + node.$intf);
			}
			if (isRoot) {
				var res = OUT.join("");
				__log(res, __log.LOG);
				return res;
			}

			//TODO:? fFunc.apply(null, Array.prototype.slice.call(arguments, 1));

			function _printContextContext() {
				var test = [], sp = __shift(IND);
				test.push(sp + "namespace ");

				node = _getExplicitlyDefinedContext(node, test);

				var accessibleByList = node.getAccessibleByList(), annotations = node.getAnnotations(), namespaces = node
						.getNestedContexts(), entities = node.getNestedEntities(), elements = node.getElements(), actions = node
						.getActions(), types = node.getNestedTypes();

				//TODO: nestedAliasedEntities

				if (__hasNotGeneratedItem(annotations)) {
					jQuery.each(node.getAnnotations(), function() {
						if (!__isAutoGenerated(this)) {
							this.print(OUT, 0);
						}
					});
					OUT.push("\n" + sp);
				}
				if (node.componentType === "APPLICATION") {
					OUT.push("application " + node.getFullyQualifiedName() + " ");
				} else {
					OUT.push(test.join("") + node.getName() + " ");
				}

				if (__hasNotGeneratedItem(accessibleByList)) {
					OUT.push("accessible by ");
					jQuery.each(accessibleByList, function() {
						if (!__isAutoGenerated(this)) {
							this.print(OUT, 0);
						}
					});
				}

				OUT.push("{\n");
				IND++;
				test = OUT.length;

				jQuery.each(namespaces, function() {
					if (!__isAutoGenerated(this)) {
						this.print(OUT, IND);
					}
				});

				if (OUT.length !== test && __hasNotGeneratedItem(entities)) {
					OUT.push("\n");
					test = OUT.length;
				}
				jQuery.each(entities, function() {
					if (!__isAutoGenerated(this)) {
						this.print(OUT, IND);
					}
				});

				if (OUT.length !== test && __hasNotGeneratedItem(elements)) {
					OUT.push("\n");
					test = OUT.length;
				}
				jQuery.each(elements, function() {
					if (!__isAutoGenerated(this)) {
						this.print(OUT, IND);
					}
				});

				if (OUT.length !== test && __hasNotGeneratedItem(actions)) {
					OUT.push("\n");
					test = OUT.length;
				}
				jQuery.each(actions, function() {
					if (!__isAutoGenerated(this)) {
						this.print(OUT, IND);
					}
				});

				if (OUT.length !== test && __hasNotGeneratedItem(types)) {
					OUT.push("\n");
				}
				jQuery.each(types, function() {
					if (!__isAutoGenerated(this)) {
						this.print(OUT, IND);
					}
				});

				OUT.push(sp + "}\n");
			}
			function _printView() {
				OUT.push(__shift(IND) + (node.exported ? "export " : "") + "view " + node.getName() + " as\n");
				IND++;
				node.getQuery().print(OUT, IND);
				OUT.push(";\n");
			}
			function _printEntity() {
				var test = OUT.length, sp = __shift(IND), actions = node.getActions(), types = node.getNestedTypes();

				OUT.push(sp + (node.exported ? "export " : "") + "entity " + node.getName() + " {\n");
				IND++;

				jQuery.each(node.getConstElements(), function() {
					if (!__isAutoGenerated(this)) {
						this.print(OUT, IND);
					}
				});
				jQuery.each(node.getElements(), function() {
					if (!__isAutoGenerated(this)) {
						this.print(OUT, IND);
					}
				});

				if (OUT.length !== test && __hasNotGeneratedItem(actions)) {
					OUT.push("\n");
					test = OUT.length;
				}
				jQuery.each(actions, function() {
					if (!__isAutoGenerated(this)) {
						this.print(OUT, IND);
					}
				});

				if (OUT.length !== test && __hasNotGeneratedItem(types)) {
					OUT.push("\n");
				}
				jQuery.each(types, function() {
					if (!__isAutoGenerated(this)) {
						this.print(OUT, IND);
					}
				});

				OUT.push(sp + "}\n");
			}
			function _printConstElement() {
				OUT.push(__shift(IND));
				jQuery.each(node.getAnnotations(), function() {
					if (!__isAutoGenerated(this)) {
						this.print(OUT, 0);
					}
				});
				OUT.push("const ");
				OUT.push(node.getName());
				OUT.push(_printInlineType(node, node.getType()));

				var expression = node.defaultExpression || node.calculatedExpression;
				if (!__isAutoGenerated(expression)) {
					OUT.push(node.defaultExpression ? " default " : " = ");
					expression.print(OUT, 0);
				}
				//_printElementExpression(node, false);

				OUT.push(";\n");
			}
			function _printElement() {
				var isEnumValue = _getParent(node).instanceOf("IEnum");

				OUT.push(__shift(IND));
				jQuery.each(node.getAnnotations(), function() {
					if (!__isAutoGenerated(this)) {
						this.print(OUT, 0);
					}
				});
				if (node.isKey) {
					OUT.push("key ");
				}
				if (!isEnumValue) {
					OUT.push("element ");
				}
				OUT.push(node.getName());
				OUT.push(_printInlineType(node, node.getType()));

				var expression = node.defaultExpression || node.calculatedExpression;
				if (!__isAutoGenerated(expression)) {
					OUT.push(!isEnumValue && node.defaultExpression ? " default " : " = ");
					expression.print(OUT, 0);
				}
				//_printElementExpression(node, isEnumValue);

				OUT.push(";\n");
			}
			function _printAction() {
				var sp = __shift(IND), params = [], returnParameter = node.getDefaultReturnParameter();

				OUT.push(sp + "action " + node.getName() + " (");
				jQuery.each(node.getParameters(), function() {
					if (!__isAutoGenerated(this)) {
						this.print(params, 0);
					}
				});

				OUT.push(params.join(", "));
				OUT.push(")");
				returnParameter.print(OUT, 0);
				OUT.push(" {\n");

				IND++;
				OUT.push(__shift(IND) + "/* add your code here */\n");
				if (!__isAutoGenerated(returnParameter.getType())) {
					OUT.push(__shift(IND) + "return null; //this is generate code!\n");
				}

				OUT.push(sp + "}\n");
			}
			function _printActionParameter() {
				//must be single push
				OUT.push((node.instanceOf("IRdlNamedParameter") ? node.getName() : "") + _printInlineType(node, node.getType()));
			}
			function _printEnum() {
				var sp = __shift(IND);

				OUT.push(sp + "type " + node.getName());
				OUT.push(_printInlineType(node, node.getFrom()));
				OUT.push(" enum {\n");
				IND++;

				jQuery.each(node.getEnumValues(), function() {
					if (!__isAutoGenerated(this)) {
						this.print(OUT, IND);
					}
				});
				OUT.push(sp + "}\n");
			}
			function _printStructuredType() {
				var sp = __shift(IND);//, type;

				OUT.push(sp + "type " + node.getName() + " {\n");
				IND++;

				jQuery.each(node.getElements(), function() {
					if (!__isAutoGenerated(this)) {
						this.print(OUT, IND);
					}
				});
				OUT.push(sp + "}\n");
			}
			function _printDerivedType() {
				OUT.push(__shift(IND) + "type " + node.getName());
				OUT.push(_printInlineType(node, node.getFrom()));
				OUT.push(";\n");
			}
			function _printAnnotation() {
				OUT.push("@" + node.getName() + " ");
			}
			function _printAccessibleBy() {
				OUT.push(node.getName() + " ");
			}
			function _printCardinality() { //TODO:...
				//if (node.multiValued || node.lowerBound === node.upperBound) {
				if (node.upperBound > 1 || node.lowerBound === node.upperBound) {
					//OUT.push("[" + node.lowerBound + ".." + (node.unlimitedUpperBound ? "*" : node.upperBound) + "] ");
					OUT.push("[" + node.lowerBound + ".." + (node.upperBound === 4294967295 ? "*" : node.upperBound) + "] ");
				}
			}
			function _printQLQuery() {
				var sp = __shift(IND), type = node.getType(), isArray = type.instanceOf("IArray");

				OUT.push(sp + "SELECT ");
				if (node.isReturnOne) {
					OUT.push("ONE");
				} else if (node.topNum) {
					OUT.push("TOP " + node.topNum.intValue + " ");
				}

				if (!isArray) {
					OUT.push(" ");
					_printTypeElements();
					OUT.push(" ");
				}

				node.getFrom().print(OUT, IND);

				if (isArray) { //TODO:autoGenerated === select *
					OUT.push("{\n");
					IND++;
					type = type.getType();

					_printTypeElements();

					IND--;
					OUT.push("\n" + sp + "}");
				}

				if (node.where) {
					OUT.push("\n");
					OUT.push(sp + "WHERE ???"); //TODO
				}

				if (node.groupBy) {
					OUT.push("\n");
					node.groupBy.print(OUT, IND);
				}

				if (node.orderBy) {
					OUT.push("\n");
					node.orderBy.print(OUT, IND);
				}

				function _printTypeElements() {
					if (type.instanceOf("IRdlStructuredType")) {
						var elements = [], sp2 = __shift(IND);
						jQuery.each(type.getElements(), function() {
							elements.push(sp2 + this.getName());
						});
						OUT.push(elements.join("," + (isArray ? "\n" : " ")));
					} else {
						__log("_printQLQuery.MISSING TYPE " + type.$intf);
					}
				}
			}
			function _printQLFrom() {
				var from = [];
				OUT.push("FROM ");
				jQuery.each(node.getElements(), function() {
					if (!__isAutoGenerated(this)) {

						this.print(from, 0);
					}
				});
				OUT.push(from.join(", ") + " ");
			}
			function _printQLFromElement() {
				//TODO: joins
				var expr = node.expr, res = "";
				if (expr.instanceOf("IIdentifierExpression")) {
					res = expr.getName();
				} else {
					__log("_printQLFromElement.MISSING TYPE " + expr.$intf);
				}
				if (node.alias) {
					res += " as " + node.alias;
				}
				OUT.push(res);
			}
			function _printQLGroupBy() {
				var sp = __shift(IND), group = [];
				OUT.push(sp + "GROUP BY\n");

				jQuery.each(node.getEntries(), function() {
					var line = sp;

					if (this.instanceOf("IDataAccessExpr")) {
						line += this.getName();
					} else {
						__log("_printQLGroupBy.MISSING TYPE " + this.$intf);
					}
					group.push(line);
				});
				OUT.push(group.join(",\n"));
			}
			function _printQLOrderBy() {
				var sp = __shift(IND), order = [];
				OUT.push(sp + "ORDER BY\n");

				jQuery.each(node.getEntries(), function() {
					var line = [];
					this.print(line, IND);
					order.push(line.join(""));
				});
				OUT.push(order.join(",\n"));
			}
			function _printQLOrderByEntry() {
				var expr = node.expr, sp = __shift(IND);

				OUT.push(sp);
				if (expr.instanceOf("IIdentifierExpression")) {
					OUT.push(expr.getName());
				} else if (expr.instanceOf("IExprAgg")) {
					//TODO:hasDistinctQualifier
					OUT.push("SUM(???)"); //TODO
				} else {
					__log("_printQLOrderBy.MISSING TYPE " + expr.$intf);
				}
				if (node.order === "Descending") {
					OUT.push(" DESC");
				}
			}
			function _printExpression() {
				if (node.instanceOf("IFalseExpression")) {
					return OUT.push("false");
				}
				if (node.instanceOf("ITrueExpression")) {
					return OUT.push("true");
				}
				if (node.instanceOf("INullExpression")) {
					return OUT.push("NULL");
				}
				if (node.instanceOf("IDateExpression")) {
					return OUT.push(node.astDateValue);
				}
				if (node.instanceOf("ITimeExpression")) {
					return OUT.push(node.astTimeValue);
				}

				if (node.instanceOf("IStringExpression", "IUTCDateTimeExpression", "IUTCTimeStampExpression")) {
					return OUT.push(node.astValue);
				}

				if (node.instanceOf("IDataAccessExpr")) {
					return OUT.push(node.getName());
				}
				if (node.instanceOf("IQLQuery")) {
					var query = [];
					node.print(query, 0);
					return OUT.push(query.join(" ").replace("\n", ""));
				}
				if (node.instanceOf("INumberExpression")) {
					switch (node.numberType) {
					case "INTEGER":
						return OUT.push(node.intValue);
					case "DOUBLE":
						return OUT.push(node.doubleValue);
					case "DECIMALFLOAT":
						return OUT.push(node.floatValue);
					}
					return OUT.push("0");
				}

				__log("AST_PRINT._printExpression: MISSING TYPE " + node.$intf);
				return OUT.push(node.astValue || node.value || node.name);
			}

			/* help functions */
			function _printInlineType(node, type) {
				//do not check autoGenerated here (parsing result problems)!
				if (type.instanceOf("IPrimitiveUndefined", "IEnumValueType")) {
					return "";
				}

				var res = " : ";
				if (type.instanceOf("IPrimitiveType")) {
					res += type.getFullyQualifiedName();
					if (type.instanceOf("IPrimitiveString")) {
						res += (type.param === 5000 ? "" : "(" + type.param + ")");
					} else if (type.instanceOf("IPrimitiveDecimal")) {
						res += "(" + type.p + ", " + type.s + ")";
					}
				} else if (type.instanceOf("IEnum", "IRdlEntity", "IDerivedType", "IRdlStructuredType")) {
					var nodeContext = _getNamespace(node).getFullyQualifiedName();
					var typeContext = _getNamespace(type).getFullyQualifiedName();
					if (nodeContext.indexOf(typeContext) === 0) {
						res += type.getName();
					} else {
						res += type.getFullyQualifiedName();
					}
				} else if (type.instanceOf("IAssociationType")) {
					res += "association ";
					if (type.cardinality) {
						var line = [];
						type.getCardinality().print(line, 0);
						res += line.join("");
					}
					res += "to " + type.getTargetEntity().getName();
					if (type.instanceOf("IAssociationViaBacklink")) {
						res += " via backlink " + type.getViaBacklinkField().getName();
					} else if (type.instanceOf("IAssociationViaEntity")) {
						res += " via entity " + type.getViaEntity().getName();
					}
				} else if (type.instanceOf("IArray")) {
					var cardinality = type.getCardinality();
					res = _printInlineType(type, type.getType());
//                    res += "[" + (cardinality.unlimitedUpperBound ? "" : cardinality.upperBound) + "]";
					res += "[" + (cardinality.upperBound === 4294967295 ? "" : cardinality.upperBound) + "]";
				} else {
					__log("AST_PRINT._printInlineType: MISSING TYPE " + type.$intf);
					res = "";
				}
				return res;
			}
			function _getNamespace(node) {
				var pFQName = node.getFullyQualifiedName();
				var path = (pFQName || "").split(".");
				if (node.instanceOf("IElement", "IRdlAction")) {
					pFQName = path.slice(0, -2).join(".");
				} else if (node.instanceOf("IRdlStructuredType", "IEnum")) {
					pFQName = path.slice(0, -1).join(".");
				}

				return parseTree.getSymbol(pFQName);
			}
			function _getParent(node) {
				var path = (node.getFullyQualifiedName() || "").split(".");
				if (node.instanceOf("IElement")) {
					var pFQName = path.slice(0, -1).join(".");
					return parseTree.getSymbol(pFQName);
				}
				return null;
			}
			function _getExplicitlyDefinedContext(node, OUT) {
				if (jQuery.isArray(node) && node.length === 1) {
					node = node[0];
				}
				if (node.isExplicitlyDefined) {
					return node;
				}
				OUT.push(node.getName() + ".");
				return _getExplicitlyDefinedContext(node.getNestedContexts());
			}
		};

//        function _printElementExpression(node, isEnumValue) {
//            var expression = node.defaultExpression || node.calculatedExpression;
//            if (__isAutoGenerated(expression)) return "";
//            var isDefault = !!node.defaultExpression,
//                res = !isEnumValue && isDefault ? " default " : " = ";
//
//            if (expression.instanceOf("IFalseExpression")) return res + "false";
//            if (expression.instanceOf("ITrueExpression")) return res + "true";
//            if (expression.instanceOf("INullExpression")) return res + "NULL";
//            if (expression.instanceOf("IDateExpression")) return res + expression.astDateValue;
//            if (expression.instanceOf("ITimeExpression")) return res + expression.astTimeValue;
//            if (expression.instanceOf("IUTCDateTimeExpression")) return res + expression.astValue;
////                if (expression.instanceOf("IUTCTimeStampExpression")) return res + expression.astDateValue;
//            if (expression.instanceOf("IQLQuery")) {
//                var query = [];
//                expression.print(query, 0);
//                return res + query.join(" ").replace("\n", "");
//            }
//            if (expression.instanceOf("INumberExpression")) {
//                switch (expression.numberType) {
//                    case "INTEGER": return res + expression.intValue;
//                    case "LONG": return res + expression.longValue;
//                    case "DOUBLE": return res + expression.doubleValue;
//                    case "DECIMALFLOAT": return res + expression.floatValue;
//                    default: return res + "0";
//                }
//            }
//            return res + (expression.astValue || expression.value || expression.name);
//        }
	}

	function __isAutoGenerated(node) {
		return !node || node.autoGenerated;
	}
	function __hasNotGeneratedItem(array) {
		var res = false;
		jQuery.each(array || [], function() {
			if (!__isAutoGenerated(this)) {
				res = true;
				return false;
			}
		});
		return res;
	}
	function __shift(indent) {
		var shift = "\t";
		while (shift.length < indent) {
			shift += shift;
		}
		return shift.slice(0, indent);
	}
	function __log(msg, level) {
		if (!__useLog) {
			return;
		}
		if (!level) {
			level = __defaultLogLevel;
		}
		var part = "log";

		switch (level) {
		case __log.ERROR:
			part = "error";
			break;
		case __log.DEBUG:
			part = "debug";
			break;
		case __log.WARNING:
			part = "warning";
			break;
		case __log.INFO:
			part = "info";
			break;
		case __log.LOG:
			part = "log";
			break;
		}
		top.console[part](msg);
	}

	__log.ERROR = 1;
	__log.DEBUG = 2;
	__log.WARNING = 3;
	__log.INFO = 4;
	__log.LOG = 5;

	var __useLog = true;
	var __defaultLogLevel = __log.WARNING;

	if (!AstPrint.instance) {
		AstPrint.instance = new AstPrint();
	}
	return AstPrint.instance;
});