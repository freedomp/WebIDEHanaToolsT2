// This file has been generated by the SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ui.rta.library-all');
if ( !jQuery.sap.isDeclared('sap.ui.rta.ToolsMenuRenderer') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides default renderer for control sap.ui.rta.ToolsMenu
jQuery.sap.declare('sap.ui.rta.ToolsMenuRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/ToolsMenuRenderer",['jquery.sap.global'],
	function(jQuery) {
	"use strict";

	/**
	 * @author SAP SE
	 * @class ToolsMenu renderer.
	 * @static
	 */
	var ToolsMenuRenderer = {};

	/**
	 * Renders the HTML for the given control, using the provided {@link sap.ui.core.RenderManager}.
	 *
	 * @param {sap.ui.core.RenderManager} oRm the RenderManager that can be used for writing to the render output buffer
	 * @param {sap.ui.core.Control} oControl an object representation of the control that should be rendered
	 */
	ToolsMenuRenderer.render = function(oRm, oControl) {
		// write the HTML into the render manager
		oRm.write("<div ");
		oRm.writeClasses();
		oRm.writeControlData(oControl);
		oRm.write(">");
			// render the toolbars
			if (oControl.getToolbars().length !== 0){
				oControl.getToolbars().forEach(function(oCtrl){
					oRm.renderControl(oCtrl);
				});
			} else {
				oRm.write("&nbsp");
			}
		oRm.write("</div>");
	};
	
	return ToolsMenuRenderer;

}, /* bExport= */ true);
}; // end of sap/ui/rta/ToolsMenuRenderer.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.Utils') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/*global Promise */// declare unusual global vars for JSLint/SAPUI5 validation

// Provides object sap.ui.rta.Utils.
jQuery.sap.declare('sap.ui.rta.Utils'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.OverlayUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.odata.FieldSelectorModelConverter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.Settings'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartform.GroupElement'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartform.Group'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartfield.SmartField'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/Utils",[
	"jquery.sap.global",
	"sap/ui/fl/Utils",
	"sap/ui/dt/OverlayUtil",
	"sap/ui/dt/ElementUtil",
	"sap/ui/comp/odata/FieldSelectorModelConverter",
	"sap/ui/fl/registry/Settings",
	'sap/ui/comp/smartform/GroupElement',
	'sap/ui/comp/smartform/Group',
	'sap/ui/comp/smartfield/SmartField'
],
function(jQuery, FlexUtils, OverlayUtil, ElementUtil, FieldSelectorModelConverter, Settings, GroupElement, Group, SmartField) {
	"use strict";

	/**
	 * Class for Utils.
	 * 
	 * @class
	 * Utility functionality to work with controls, e.g. iterate through aggregations, find parents, ...
	 *
	 * @author SAP SE
	 * @version 1.32.7
	 *
	 * @private
	 * @static
	 * @since 1.30
	 * @alias sap.ui.rta.Utils
	 * @experimental Since 1.30. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */

	var Utils = {};

	Utils._aEditableTypes = ["sap.ui.comp.smartform.SmartForm", "sap.ui.comp.smartform.Group", "sap.ui.comp.smartform.GroupElement"];
	Utils._sFocusableOverlayClass = ".sapUiDtOverlaySelectable";

	/**
	 * Utility function to check via backend calls if the custom field button shall be enabled or not
	 * @param  {sap.ui.core.Control}  oControl Control to be checked
	 * @return {Boolean}          true if CustomFieldCreation functionality is to be enabled, false if not
	 */
	Utils.isCustomFieldAvailable = function(oControl) {
		jQuery.sap.require("sap.ui.fl.fieldExt.Access");

		var sComponentName = FlexUtils.getComponentClassName(oControl);
		var bShowCreateExtFieldButton = false;
		var oFieldSelectorModelConverter = new FieldSelectorModelConverter(oControl.getModel());
		var sSelectedKey;

		//call this function to create Entity array
		oFieldSelectorModelConverter.getConvertedModel();

		return Settings.getInstance(sComponentName).then(function(oSettings) {
			if (oSettings.isModelS) {
				bShowCreateExtFieldButton = oSettings.isModelS();
			}
			if (!bShowCreateExtFieldButton) {
				return Promise.resolve();
			} else {
				var oMDA = oFieldSelectorModelConverter.getMetaDataAnalyzer();
				try {
					var aSelectedKeys = oFieldSelectorModelConverter.getEntityTypes();
					if (aSelectedKeys && aSelectedKeys.length > 0) {
						sSelectedKey = aSelectedKeys[0].key;
					}
					var oPromise = sap.ui.fl.fieldExt.Access.getBusinessContexts(oMDA.oModel.sServiceUrl, sSelectedKey);
					oPromise.fail(function(oError) {
						if (oError) {
							if (jQuery.isArray(oError.errorMessages)) {
								for (var i = 0; i < oError.errorMessages.length; i++) {
									jQuery.sap.log.error(oError.errorMessages[i].text);
								}
							}
						}
						return Promise.resolve();
					});
					return oPromise.then(function(oResult) {
						if (oResult) {
							if (oResult.BusinessContexts) {
								if (oResult.BusinessContexts.length > 0) {
									return Promise.resolve(oResult);
								}
							}
						}
					});
				} catch (oError) {
					jQuery.sap.log.error("exception occured in sap.ui.fl.fieldExt.Access.getBusinessContexts");
					return Promise.resolve();
				}
			}
		});
	};

	/**
	 * Checks if element is hideable
	 * 
	 * @return {boolean} whether the element can be hidden or not
	 * @public
	 */
	Utils.isElementHideable = function(oElement) {
		return ((oElement instanceof GroupElement || oElement instanceof Group) && !this.isElementMandatory(oElement)); 
	};

	/**
	 * Checks if element is mandatory
	 * 
	 * @return {boolean} whether the element is mandatory or not
	 * @public
	 */
	Utils.isElementMandatory = function(oElement) {		
		var bMandatory = false;
		
		if (oElement instanceof GroupElement) {
			var aFields = oElement.getFields();
			for (var i = 0; i < aFields.length; i++) {
				var oGroupElement = aFields[i];
				if (oGroupElement instanceof SmartField) {
					bMandatory = oGroupElement.getMandatory();
					if (bMandatory) {
						// Break searching all SmartFields and get back on the 
						// first found mandatory rendered SmartField
						break;
					}
				}
			}
		} else if (oElement instanceof Group) {
			var aGroupElements = oElement.getGroupElements();
			for (var j = 0; j < aGroupElements.length; j++) {
				return this.isElementMandatory(aGroupElements[j]);
			}
		}
		return bMandatory;
	};


	/**
	 * Check if overlay is mutable in runtime
	 * @param  {sap.ui.dt.ElementOverlay} oOverlay overlay object
	 * @private
	 */
	Utils.isOverlayMutable = function(oOverlay) {
		var oElement = oOverlay.getElementInstance();
		var bIsOfEditableType, bIsVisible, bHasStableId, bBlockHasStableId;

		bIsOfEditableType = this._aEditableTypes.some(function(sType) {
			return ElementUtil.isInstanceOf(oElement, sType);
		});

		if (bIsOfEditableType) {
			bIsVisible = oElement.getVisible ? oElement.getVisible() : true;

			if (bIsVisible) {
				bHasStableId = FlexUtils.checkControlId(oElement);

				if (bHasStableId) {
					if (ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.SmartForm")) {
						bBlockHasStableId = bHasStableId;
					} else {
						var oBlockOverlay = oOverlay.getParentElementOverlay();
						var oBlock = oBlockOverlay ? oBlockOverlay.getElementInstance() : null;
						bBlockHasStableId = oBlock && FlexUtils.checkControlId(oBlock);
					}
				}
			}
			
		
		}

		return bIsOfEditableType && bHasStableId && bBlockHasStableId;
	};
	
	/**
	 * Secure extract a label from an element
	 * @param  {Object} any Object
	 * @return {String} a label string or undefined
	 */
	Utils.getLabelForElement = function(oElement) {
		// first try getlabelText(), if not available try getLabel().getText()
		var sFieldLabel = oElement.getLabelText ? oElement.getLabelText() : undefined;
		if (!sFieldLabel) {
			sFieldLabel = oElement.getLabel ? oElement.getLabel() : undefined;
		}
		if (!sFieldLabel) {
			sFieldLabel = oElement.getText ? oElement.getText() : undefined;
		}
		return (typeof sFieldLabel) === "string" ? sFieldLabel : undefined;
	};

	/**
	 * Checks if overlay is selectable in RTA (selectable also means focusable for RTA)
	 * @param {sap.ui.dt.ElementOverlay} oOverlay to check
	 * @return  {boolean} if is selectable
	 * @private
	 */
	Utils.isOverlaySelectable = function(oOverlay) {
		// check the real DOM visibility should be preformed while oOverlay.isVisible() can be true, but if element has no geometry, overlay will not be visible in UI
		return oOverlay.isSelectable() && oOverlay.$().is(":visible");
	};
	
	/**
	 * Returns the previous editable overlay
	 * @return  {sap.ui.dt.ElementOverlay} overlay object
	 * @private
	 */
	Utils.getPreviousSelectableOverlay = function(oOverlay) {
		var oPreviousOverlay = OverlayUtil.getPreviousOverlay(oOverlay);

		while (oPreviousOverlay && !this.isOverlaySelectable(oPreviousOverlay)) {
			oPreviousOverlay = OverlayUtil.getPreviousOverlay(oPreviousOverlay);
		}
		return oPreviousOverlay;
	};

	/**
	 * Returns the next editable overlay
	 * @return  {sap.ui.dt.ElementOverlay} overlay object
	 * @private
	 */
	Utils.getNextSelectableOverlay = function(oOverlay) {
		var oNextOverlay = OverlayUtil.getNextOverlay(oOverlay);
		
		while (oNextOverlay && !this.isOverlaySelectable(oNextOverlay)) {
			oNextOverlay = OverlayUtil.getNextOverlay(oNextOverlay);
		}
		return oNextOverlay;
	};

	/**
	 * Returns overlay instance for an overlay's dom element
	 * @param {element} oDomRef DOM element
	 * @return  {sap.ui.dt.ElementOverlay} overlay object
	 * @private
	 */
	Utils.getOverlayInstanceForDom = function(oDomRef) {
		var sId = jQuery(oDomRef).attr("id");
		if (sId) {
			return sap.ui.getCore().byId(sId);
		}
	};

	/**
	 * Returns the first focusable overlay
	 * @return  {sap.ui.dt.ElementOverlay} overlay object
	 * @private
	 */
	Utils.getFirstFocusableOverlay = function() {
		var $overlay = jQuery(this._sFocusableOverlayClass).first();
		var oOverlay = this.getOverlayInstanceForDom($overlay);
		if (!this.isOverlaySelectable(oOverlay)) {
			oOverlay = this.getNextSelectableOverlay(oOverlay);
		}
		return oOverlay;
	};

	/**
	 * Returns the last focusable overlay
	 * @return  {sap.ui.dt.ElementOverlay} overlay object
	 * @private
	 */
	Utils.getLastFocusableOverlay = function() {
		var $overlay = jQuery(this._sFocusableOverlayClass).last();
		var oOverlay = this.getOverlayInstanceForDom($overlay);
		if (!this.isOverlaySelectable(oOverlay)) {
			oOverlay = this.getPreviousSelectableOverlay(oOverlay);
		}
		return oOverlay;
	};

	/**
	 * Returns the next focusable overlay
	 * @return  {sap.ui.dt.ElementOverlay} overlay object
	 * @private
	 */
	Utils.getNextFocusableOverlay = function() {
		var oFocusedOverlay = this.getFocusedOverlay();
		if (oFocusedOverlay) {
			return this.getNextSelectableOverlay(oFocusedOverlay);
		}
	};
	
	/**
	 * Returns the previous focusable overlay
	 * @return  {sap.ui.dt.ElementOverlay} overlay object
	 * @private
	 */
	Utils.getPreviousFocusableOverlay = function() {
		var oFocusedOverlay = this.getFocusedOverlay();
		if (oFocusedOverlay) {
			return this.getPreviousSelectableOverlay(oFocusedOverlay);
		}
	};
	
	/**
	 * Returns the focused overlay
	 * @return  {sap.ui.dt.ElementOverlay} overlay object
	 * @private
	 */
	Utils.getFocusedOverlay = function() {
		var oElement = sap.ui.getCore().byId(document.activeElement.id);
		if (oElement instanceof sap.ui.dt.ElementOverlay) {
			return oElement;
		}
	};

	/**
	 * Returns the first focusable child overlay
	 * @return  {sap.ui.dt.ElementOverlay} overlay object
	 * @private
	 */
	Utils.getFirstFocusableChildOverlay = function(oOverlay) {
		var oFirstFocusableChildOverlay = OverlayUtil.getFirstChildOverlay(oOverlay);

		while (oFirstFocusableChildOverlay && !this.isOverlaySelectable(oFirstFocusableChildOverlay)) {
			oFirstFocusableChildOverlay = OverlayUtil.getNextSiblingOverlay(oFirstFocusableChildOverlay);
		}
		return oFirstFocusableChildOverlay;
	};

	/**
	 * Returns the next focusable sibling overlay
	 * @return  {sap.ui.dt.ElementOverlay} overlay object
	 * @private
	 */
	Utils.getNextFocusableSiblingOverlay = function(oOverlay) {
		var oNextFocusableSiblingOverlay = OverlayUtil.getNextSiblingOverlay(oOverlay);

		while (oNextFocusableSiblingOverlay && !this.isOverlaySelectable(oNextFocusableSiblingOverlay)) {
			oNextFocusableSiblingOverlay = OverlayUtil.getNextSiblingOverlay(oNextFocusableSiblingOverlay);
		}
		return oNextFocusableSiblingOverlay;
	};

	/**
	 * Returns the previous focusable sibling overlay
	 * @return  {sap.ui.dt.ElementOverlay} overlay object
	 * @private
	 */
	Utils.getPreviousFocusableSiblingOverlay = function(oOverlay) {
		var oPreviousFocusableSiblingOverlay = OverlayUtil.getPreviousSiblingOverlay(oOverlay);

		while (oPreviousFocusableSiblingOverlay && !this.isOverlaySelectable(oPreviousFocusableSiblingOverlay)) {
			oPreviousFocusableSiblingOverlay = OverlayUtil.getPreviousSiblingOverlay(oPreviousFocusableSiblingOverlay);
		}
		return oPreviousFocusableSiblingOverlay;
	};

	/**
	 * get closest view in parent tree for an element
	 * @param  {sap.ui.core.Element} oElement element object
	 * @return {sap.ui.core.Element} oElement element object
	 * @private
	 */
	Utils.getClosestViewFor = function(oElement) {
		if (!oElement && !oElement.getParent) {
			return;
		}
		var oParentElement = oElement.getParent();
		if (oParentElement && oParentElement.getMetadata().getName() !== "sap.ui.core.mvc.XMLView") {
			return this.getClosestViewFor(oParentElement);
		}
		return oParentElement;
	};

	/*
	 * Looks for parent control with specified class name
	 * @param  {sap.ui.core.Control} oControl Control to be checked
	 * @param  {string} sType class name of parent control
	 * @return {sap.ui.core.Control} the parent control
	 * @private
	 */
	Utils.getClosestTypeForControl = function(oControl, sType) {
		var oParentElement = oControl.getParent();
		if (oParentElement && oParentElement.getMetadata().getName() !== sType) {
			return this.getClosestTypeForControl(oParentElement, sType);
		}
		return oParentElement;
	};

	/*
	 * Checks if control is supported
	 * @param  {sap.ui.core.Control} oControl Control to be checked
	 * @private
	 */
	Utils._checkIsSupportedControl = function(oControl, aSupportedControls) {
		for (var i = 0; i < aSupportedControls.length; i++) {
			if (oControl instanceof aSupportedControls[i]) {
				return true;
			}
		}
	};

	/*
	 * Checks whether a Group has Fields which are not bound to an OData model.
	 * @param  {sap.ui.comp.smartform.Group} oGroup Control to be checked
	 * @returns {boolean} false if group has no fields with oData binding.
	 * @private
	 */
	Utils.hasGroupUnBoundFields = function(oGroup) {
		var aElements = oGroup.getGroupElements();
		for (var j = 0; j < aElements.length; j++) {
			var oElement = aElements[j];
			if (!this.hasGroupElementBoundFields(oElement)) {
				return true;
			}
		}
		return false;
	};

	/*
	 * Checks whether a GroupElement has Fields which are bound to an OData model.
	 * @param  {sap.ui.comp.smartform.GroupElement} GroupElement Control to be checked
	 * @returns {boolean} true if one field has oData binding.
	 * @private
	 */
	Utils.hasGroupElementBoundFields = function(oGroupElement) {
		var aElements = oGroupElement.getFields();
		if (aElements.length === 0) {
			return true;
		}
		for (var j = 0; j < aElements.length; j++) {
			var oElement = aElements[j];
			if (!oElement.getDomRef()) {
				continue;
			}
			if (this._isElementBound(oElement)) {
				return true;
			}
		}
		return false;
	};

	/*
	 * Checks whether an Element is bound to an OData Model.
	 * @param  {sap.ui.core.Element} oElement element to be checked
	 * @returns {boolean} true if element has oData binding.
	 * @private
	 */
	Utils._isElementBound = function(oElement) {
		var mBindingInfos = oElement.mBindingInfos;
		//No Binding at all
		if (Object.keys(mBindingInfos).length === 0) {
			return false;
		} else {
			for (var oPropertyName in mBindingInfos) {
				var aParts = mBindingInfos[oPropertyName].parts;
				for (var i = 0; i < aParts.length; i++) {
					if (aParts[i].model) {
						var sModelName = oElement.getModel(aParts[i].model).getMetadata().getName();
						if (sModelName === "sap.ui.model.odata.ODataModel" || sModelName === "sap.ui.model.odata.v2.ODataModel") {
							return true;
						}
					} else {
						var sModelName = oElement.getModel().getMetadata().getName();
						if (sModelName === "sap.ui.model.odata.ODataModel" || sModelName === "sap.ui.model.odata.v2.ODataModel") {
							return true;
						}
					}
				}
			}
		}
	};

	/**
	 * Walks up the DOM to find the next supported block element
	 * @param  {sap.ui.core.Control} oControl Control to be checked
	 * @return {sap.ui.core.Control} the next supported block control
	 * @private
	 */
	Utils.findSupportedBlock = function(oControl, aSupportedControls) {
		if (this._checkIsSupportedControl(oControl, aSupportedControls)) {
			return oControl;
		} else {
			oControl = oControl.getParent();
			while (oControl) {
				if (this._checkIsSupportedControl(oControl, aSupportedControls)) {
					return oControl;
				}
				oControl = oControl.getParent();
			}
		}
	};

	Utils.createFieldLabelId = function(oGroup, sEntityType, oField) {
		var sControlId = oGroup.getId() + "_" + sEntityType + "_" + oField.getBindingPath("value");
		sControlId = sControlId.replace("/", "_");
		return sControlId;
	};

	return Utils;
}, /* bExport= */ true);

}; // end of sap/ui/rta/Utils.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.changeHandler.AddControl') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/*global sap */

jQuery.sap.declare('sap.ui.rta.changeHandler.AddControl'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.Base'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/changeHandler/AddControl",["jquery.sap.global", "sap/ui/fl/changeHandler/Base"], function(jQuery, Base) {
	"use strict";

	/**
	 * Change handler for adding of fields to a group.
	 * @constructor
	 * @alias sap.ui.rta.changeHandler.AddControl
	 * @author SAP SE
	 * @version 1.32.7
	 * @since 1.30
	 * @private
	 * @experimental Since 1.30. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var AddControl = function() {
	};

	AddControl.prototype = jQuery.sap.newObject(Base.prototype);

	/**
	 * Moves field(s) within a group or between groups.
	 *
	 * @param {object} oChange change object with instructions to be applied on the control
	 * @param {object} oControl Smart form group instance which is referred to in change selector section
	 * @public
	 * @function
	 * @name sap.ui.rta.changeHandler.AddControl#applyChange
	 */
	AddControl.prototype.applyChange = function(oChange, oControl) {

		try {
			var oDef = oChange.getDefinition();
			var oClass = jQuery.sap.getObject(oDef.content.field.jsType);

			var oNewControl = new oClass({
				id : oDef.content.field.id,
				text : oDef.content.field.value
			});

			if (oNewControl.setTitle) {
				oNewControl.setTitle(oDef.texts.fieldLabel.value);
			}
			
			oControl.addAggregation(oDef.content.aggregation, oNewControl);

		} catch (ex) {
			throw new Error("Applying add control changes failed: " +  ex);
		}


	};

	/**
	 * Completes the change by adding change handler specific content
	 *
	 * @param {object} oChangeWrapper change object to be completed
	 * @param {object} oSpecificChangeInfo with attribute move which contains an array which holds objects which have attributes
	 * 				   id and index - id is the id of the field to move and index the new position of the field in the smart form group
	 * @public
	 * @function
	 * @name sap.ui.rta.changeHandler.AddControl#completeChangeContent
	 */
	AddControl.prototype.completeChangeContent = function(oChangeWrapper, oSpecificChangeInfo) {
		var oChange = oChangeWrapper.getDefinition();
		if (oSpecificChangeInfo.fieldLabel) {
			this.setTextInChange(oChange, "fieldLabel", oSpecificChangeInfo.fieldLabel, "XFLD");
		} else {
			throw new Error("oSpecificChangeInfo.fieldLabel attribute required");
		}
		if (!oChange.content) {
			oChange.content = {};
		}
		if (!oChange.content.field) {
			oChange.content.field = {};
		}
		if (oSpecificChangeInfo.fieldValue) {
			oChange.content.field.value = oSpecificChangeInfo.fieldValue;
		} else {
			throw new Error("oSpecificChangeInfo.fieldValue attribute required");
		}
		if (oSpecificChangeInfo.valueProperty) {
			oChange.content.field.valueProperty = oSpecificChangeInfo.valueProperty;
		} else {
			throw new Error("oSpecificChangeInfo.valueProperty attribute required");
		}
		if ( oSpecificChangeInfo.newControlId ){
			oChange.content.field.id = oSpecificChangeInfo.newControlId;
		}else {
			throw new Error("oSpecificChangeInfo.newControlId attribute required");
		}
		if (oSpecificChangeInfo.jsType) {
			oChange.content.field.jsType = oSpecificChangeInfo.jsType;/**/
		} else {
			throw new Error("oSpecificChangeInfo.jsType attribute required");
		}
		if (oSpecificChangeInfo.index === undefined) {
			throw new Error("oSpecificChangeInfo.index attribute required");
		} else {
			oChange.content.field.index = oSpecificChangeInfo.index;
		}
		if (oSpecificChangeInfo.entitySet){
			//an optional entity set can be configured
			oChange.content.field.entitySet = oSpecificChangeInfo.entitySet;
		}

	};

	return AddControl;
}, /* bExport= */true);

}; // end of sap/ui/rta/changeHandler/AddControl.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.changeHandler.Move') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/*global sap */

jQuery.sap.declare('sap.ui.rta.changeHandler.Move'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.Base'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/changeHandler/Move",["jquery.sap.global", "sap/ui/fl/changeHandler/Base", "sap/ui/fl/Utils"], function(jQuery, Base, FlexUtils) {
	"use strict";

	/**
	 * Change handler for moving of fields within/between groups.
	 * @constructor
	 * @alias sap.ui.fl.changeHandler.MoveFields
	 * @author SAP SE
	 * @version 1.32.7
	 * @since 1.30
	 * @private
	 * @experimental Since 1.30. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var Move = function() {
	};

	Move.prototype = jQuery.sap.newObject(Base.prototype);

	/**
	 * Moves field(s) within a group or between groups.
	 *
	 * @param {object} oChange change object with instructions to be applied on the control
	 * @param {object} oGroup Smart form group instance which is referred to in change selector section
	 * @public
	 * @function
	 * @name sap.ui.fl.changeHandler.Move#applyChange
	 */
	Move.prototype.applyChange = function(oChange, oControl) {

		try {
			var oDef = oChange.getDefinition();

			oDef.content.forEach(function(moveChange){

				var sourceContainer = sap.ui.getCore().byId(moveChange.sourceContainerId);
				var targetContainer = sap.ui.getCore().byId(moveChange.targetContainerId);

				sourceContainer.removeAggregation(oControl.sParentAggregationName, oControl);
				targetContainer.insertAggregation(moveChange.targetAggregation, oControl, moveChange.index);
				
			});
		} catch (ex) {
			throw new Error("Applying move changes failed: " +  ex);
		}


	};

	/**
	 * Completes the change by adding change handler specific content
	 *
	 * @param {object} oChange change object to be completed
	 * @param {object} oSpecificChangeInfo with attribute move which contains an array which holds objects which have attributes
	 * 				   id and index - id is the id of the field to move and index the new position of the field in the smart form group
	 * @public
	 * @function
	 * @name sap.ui.fl.changeHandler.MoveGroups#completeChangeContent
	 */
	Move.prototype.completeChangeContent = function(oChange, oSpecificChangeInfo) {

		var oChangeJson = oChange.getDefinition();

		if (oSpecificChangeInfo.parameters) {

			oChangeJson.content = oSpecificChangeInfo.parameters;

		} else {

			throw new Error("oSpecificChangeInfo.parameters attribute required");

		}

	};

	return Move;
}, /* bExport= */true);

}; // end of sap/ui/rta/changeHandler/Move.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.changeHandler.Property') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/*global sap */

jQuery.sap.declare('sap.ui.rta.changeHandler.Property'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.changeHandler.Base'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/changeHandler/Property",["jquery.sap.global", "sap/ui/fl/changeHandler/Base", "sap/ui/fl/Utils"], function(jQuery, Base, FlexUtils) {
	"use strict";

	/**
	 * Change handler for setting properties on controls
	 *
	 * @constructor
	 * @alias sap.ui.fl.changeHandler.Property
	 * @author SAP SE
	 * @version 1.32.7
	 * @since 1.30
	 * @private
	 * @experimental Since 1.30. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var Property = function() {
	};

	Property.prototype = jQuery.sap.newObject(Base.prototype);

	/**
	 * Changes the properties on the given control
	 *
	 * @param {object} oChange - change object with instructions to be applied on the control
	 * @param {object} oControl - the control which has been determined by the selector id
	 * @public
	 * @name sap.ui.fl.changeHandler.Property#applyChange
	 */
	Property.prototype.applyChange = function(oChange, oControl) {

		try {
			var oDef = oChange.getDefinition();

			oDef.content.forEach(function(propertyChange){
				var propertyName = propertyChange.propertyName;
				var propertyMetadata = oControl.getMetadata().getProperties()[propertyName];
				var propertySetter = propertyMetadata._sMutator;

				oControl[propertySetter](propertyChange.newValue);
			});
		} catch (ex) {
			throw new Error("Applying property changes failed: " +  ex);
		}

	};

	/**
	 * Completes the change by adding change handler specific content
	 *
	 * @param {object} oChange change object to be completed
	 * @param {object} oSpecificChangeInfo with attribute property which contains an array which holds objects which have attributes
	 * 				   id and index - id is the id of the field to property and index the new position of the field in the smart form group
	 * @public
	 * @name sap.ui.fl.changeHandler.Property#completeChangeContent
	 */
	Property.prototype.completeChangeContent = function(oChange, oSpecificChangeInfo) {

		var oChangeJson = oChange.getDefinition();

		if (oSpecificChangeInfo.parameters) {

			oChangeJson.content = oSpecificChangeInfo.parameters;

		} else {

			throw new Error("oSpecificChangeInfo.parameters attribute required");

		}

	};

	return Property;
}, /* bExport= */true);

}; // end of sap/ui/rta/changeHandler/Property.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.library') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/**
 * Initialization Code and shared classes of library sap.ui.rta.
 */
jQuery.sap.declare('sap.ui.rta.library'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/library",['jquery.sap.global', 'sap/ui/core/Core', 'sap/ui/core/library'],
	function(jQuery, Core, coreLibrary) {
	"use strict";

	/**
	 * SAPUI5 library with RTA controls.
	 *
	 * @namespace
	 * @name sap.ui.rta
	 * @public
	 */
	
	
	// delegate further initialization of this library to the Core
	sap.ui.getCore().initLibrary({
		name : "sap.ui.rta",
		version: "1.32.7",
		dependencies : ["sap.ui.core","sap.m"],
		types: [
		],
		interfaces: [],
		controls: [
		    "sap.ui.rta.ContextMenu",
		    "sap.ui.rta.ToolsMenu",
		    "sap.ui.rta.FieldRepository"		    
		],
		elements: [
		]
	});
		
	return sap.ui.rta;	

}, /* bExport= */ true);
}; // end of sap/ui/rta/library.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.ContextMenu') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */
/*global Promise */
// Provides control sap.ui.rta.ContextMenu.
jQuery.sap.declare('sap.ui.rta.ContextMenu'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.unified.Menu'); // unlisted dependency retained
jQuery.sap.require('sap.ui.unified.MenuItem'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Popup'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartform.GroupElement'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartform.Group'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartform.SmartForm'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/ContextMenu",[
	'jquery.sap.global', 
	'./library',  
	'sap/ui/unified/Menu', 
	'sap/ui/unified/MenuItem',
	'sap/ui/core/Popup',
	'sap/ui/dt/ElementUtil',
	'./Utils',
	'sap/ui/comp/smartform/GroupElement',
	'sap/ui/comp/smartform/Group',
	'sap/ui/comp/smartform/SmartForm'
	],
	function(jQuery, 
			library, 
			Menu, 
			MenuItem, 
			Popup, 
			ElementUtil,
			Utils,
			GroupElement,
			Group,
			SmartForm) {
	"use strict";

	/**
	 * Constructor for a new sap.ui.rta.ContextMenu control.
	 *
	 * @class
	 * Context - Menu for Runtime Authoring
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.32.7
	 *
	 * @constructor
	 * @private
	 * @since 1.30
	 * @alias sap.ui.rta.ContextMenu
	 * @experimental Since 1.30. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var ContextMenu = Menu.extend("sap.ui.rta.ContextMenu", {
		metadata : {
			library : "sap.ui.rta",
			associations : {
				element : {
					type : "sap.ui.core.Element",
					multiple : false
				}
			},
			events : {
				renameLabel : {},
				hideElement : {},
				addElement : {},
				addGroup : {},
				adaptElement : {}
			}
		},
		renderer: {} //Standard renderer method is not overridden
	});

	/**
	 * Initialize the context menu
	 *
	 * @private
	 */
	ContextMenu.prototype.init = function() {
		Menu.prototype.init.apply(this, arguments);
		this.attachItemSelect(this._onItemSelected, this);
		this._oTextResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.rta");
		this._fnOnKeyDown = this._onKeyDown.bind(this);
		jQuery(document).keydown(this._fnOnKeyDown);
		this.attachBrowserEvent("contextmenu", this._onContextMenu, this);
		this._oOverlayDomRef = document.body;
	};

	/**
	 * Exit method. Called when the object gets destroyed
	 */
	ContextMenu.prototype.exit = function() {
		Menu.prototype.exit.apply(this, arguments);
		this._oRb = null;
		jQuery(document).off("keydown", this._fnOnKeyDown);
		delete this._fnOnKeyDown;
		this.detachBrowserEvent("contextmenu");
	};

	/**
	 * Set overlay which invoked the context menu
	 * 
	 * @param {string|sap.ui.core.Element} vOverlay variable object instance of the overlay
	 */
	ContextMenu.prototype.setOverlayDomRef = function(vOverlay) {
		this._oOverlayDomRef = vOverlay.getDomRef();
	};

	/**
	 * Returns an instance of the current selected element
	 */
	ContextMenu.prototype.getElementInstance = function() {
		return sap.ui.getCore().byId(this.getElement());
	};

	/**
	 * Set element for which the context menu is to be displayed
	 *
	 * @param {string|sap.ui.core.Element} vElement variable object instance of the element
	 */
	ContextMenu.prototype.setElement = function(vElement) {
		this.setAssociation("element", vElement, true);
		var aMenuItems = [];
		var oElement = this.getElementInstance();
	
		if (oElement instanceof GroupElement) {
			aMenuItems.push({text: "CTX_RENAME_LABEL", enabled: true});
			aMenuItems.push({text: "CTX_ADD_FIELD", enabled: true});
			var bHasBoundFields = Utils.hasGroupElementBoundFields(oElement);
			aMenuItems.push({text: "CTX_HIDE_FIELD", enabled: bHasBoundFields});
			aMenuItems.push({text: "CTX_ADAPT", startSection: true, enabled: true});
		}
		if (oElement instanceof Group) {
			aMenuItems.push({text: "CTX_RENAME_GROUP", enabled: true});
			aMenuItems.push({text: "CTX_ADD_FIELD", enabled: true});
			aMenuItems.push({text: "CTX_ADD_GROUP", enabled: true});
			var bHasUnboundFields = Utils.hasGroupUnBoundFields(oElement);
			aMenuItems.push({text: "CTX_HIDE_GROUP", enabled: !bHasUnboundFields});
			aMenuItems.push({text: "CTX_ADAPT", startSection: true, enabled: true});
		}
		if (oElement instanceof SmartForm) {
			aMenuItems.push({text: "CTX_ADD_GROUP", enabled: true});
			aMenuItems.push({text: "CTX_ADAPT", enabled: true});
		}
		
		this._createMenuItems(aMenuItems);
	};


	
	/**
	 * Create menu items for a list of passed in elements
	 * @param  {sap.ui.core.Element[]} aMenuItems array of menu items a context menu entry must be created for
	 * @private
	 */
	ContextMenu.prototype._createMenuItems = function(aMenuItems) {
		// Get messagebundle.properties for sap.ui.rta
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.rta");
		this.destroyItems();
		for (var i = 0; i < aMenuItems.length; i++) {
			var oMenuItem = new MenuItem({text: this._oRb.getText(aMenuItems[i].text), enabled: aMenuItems[i].enabled});
			oMenuItem.data({id : aMenuItems[i].text});
			if (aMenuItems[i].startSection){
				oMenuItem.setStartsSection(true); 
			}
			this.addItem(oMenuItem);
		}
	};
	
	/**
	 * @param {sap.ui.core.Element} oElement The element which exists in the smart form
	 * @return {sap.ui.comp.smartform.SmartForm} the closest smart form found
	 * @private
	 */
	ContextMenu.prototype._getSmartFormForElement = function(oElement) {
		while (oElement && !ElementUtil.isInstanceOf(oElement, "sap.ui.comp.smartform.SmartForm")) {
			oElement = oElement.getParent();
		}

		return oElement;
	};


	/**
	 * Called when an item gets selected
	 * 
	 * @param  {sap.ui.base.Event} oEvent event object
	 * 
	 * @override
	 * @private
	 */
	ContextMenu.prototype._onItemSelected = function(oEvent) {
		var sId = oEvent.getParameter("item").data("id");
		var oElement = this.getElementInstance();
		switch (sId) {
		case "CTX_ADD_FIELD":
			this.fireAddElement({element : oElement});
			break;
		case "CTX_ADD_GROUP":
			this.fireAddGroup({element : oElement});
			break;
		case "CTX_RENAME_LABEL" :
		case "CTX_RENAME_GROUP" :
			this.fireRenameLabel({element : oElement});
			break;
		case "CTX_HIDE_FIELD":
		case "CTX_HIDE_GROUP":
			this.fireHideElement({element : oElement});
			break;
		case "CTX_ADAPT":
			var oSmartForm = this._getSmartFormForElement(oElement);
			this.fireAdaptElement({element : oSmartForm});
			break;
		default:
			break;
		}
	};


	/**
	 * Function called when custom field button was pressed
	 * @param  {sap.ui.base.Event} oEvent event object
	 */
	ContextMenu.prototype._onOpenCustomField = function(oEvent) {
		// open field ext ui
		var oCrossAppNav = sap.ushell && sap.ushell.Container && sap.ushell.Container.getService("CrossApplicationNavigation");
		var sHrefForFieldExtensionUi = (oCrossAppNav && oCrossAppNav.hrefForExternal({
			target: {
				semanticObject: "CustomField",
				action: "develop"
			},
			params: {
				businessContexts: this._oCurrentFieldExtInfo.BusinessContexts,
				serviceName: this._oCurrentFieldExtInfo.ServiceName,
				serviceVersion: this._oCurrentFieldExtInfo.ServiceVersion
			}
		}));

		window.open(sHrefForFieldExtensionUi, "_blank");
	};

	/**
	 * Method for calculating the x, y-offset for opening the 
	 * context menu at the current mouse position
	 * 
	 * @param  {number} iPageX               mouse x position
	 * @param  {number} iPageY               mouse y position
	 */
	ContextMenu.prototype._open = function(iPageX, iPageY) {
		
		// first check if there are some context menu entries 
		if (this.getItems().length === 0) {
			return;
		}

		// calculate the offset (depending on context-menu size)
		var mouseX = iPageX;
		var mouseY = iPageY;
		var X = mouseX;
		var Y = mouseY;
		var bodyX = jQuery('body').width();
		var bodyY = jQuery('body').height();

		if (!this.getDomRef()) {
			this.open(false, undefined, undefined, undefined, undefined, -2000 + " " + -2000, "none");
		}

		var contextMenuWidth = this.$().context.clientWidth;
		var contextMenuHeight = this.$().context.clientHeight;
		var xFlipOffset = (bodyX - mouseX < contextMenuWidth) ? contextMenuWidth : 0;
		var yFlipOffset = (bodyY - mouseY < contextMenuHeight) ? contextMenuHeight : 0;

		X = ((bodyX / 2 - mouseX) * -1) + contextMenuWidth / 2 + 2 - xFlipOffset;
		Y = ((bodyY / 2 - mouseY) * -1) + contextMenuHeight / 2 + 2 - yFlipOffset;

		var yOffset = mouseY - contextMenuHeight;
		if (yOffset < 0 && yFlipOffset !== 0) {
			Y = Y - yOffset;
		}

		this.close();
		this.open(true, this._oOverlayDomRef, undefined, undefined, document.body, X + " " + Y, "flip");
	};

	/**
	 * Handler Method for event open menu
	 *
	 * @param  {object} oContextInfo Information on the context
	 */
	ContextMenu.prototype.openMenu = function(oContextInfo) {
		this._open(oContextInfo.pageX, oContextInfo.pageY);
	};

	/**
	 * Handle keydown event
	 * @param  {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	ContextMenu.prototype._onKeyDown = function(oEvent) {
		if (!this.bOpen){
			jQuery(document).off("keydown", this._fnOnKeyDown);
			delete this._fnOnKeyDown;
			return;
		}
		if ((oEvent.keyCode === jQuery.sap.KeyCodes.F10) && (oEvent.shiftKey === true) && (oEvent.altKey === false) && (oEvent.ctrlKey === false)) {
			oEvent.preventDefault();
		}
	};

	/**
	 * Handle Context Menu
	 * @param  {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	ContextMenu.prototype._onContextMenu = function(oEvent) {
		if (!this.bOpen){
			this.detachBrowserEvent("contextmenu");
			return;
		}
		if (oEvent.preventDefault) {
			oEvent.preventDefault();
		}
	};

	return ContextMenu;

}, /* bExport= */ true);

}; // end of sap/ui/rta/ContextMenu.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.FlexAdapter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides FlexAdapter
jQuery.sap.declare('sap.ui.rta.FlexAdapter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.FlexControllerFactory'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/FlexAdapter",[ 'jquery.sap.global', 
                'sap/ui/fl/FlexControllerFactory',
                'sap/ui/rta/Utils'], 
function(jQuery, flexControllerFactory, Utils) {
	"use strict";

	/**
	 * Constructor for a new FlexAdapter.
	 *
	 * @class
	 * The UI5 FlexAdapter provides the transformation of events of the GestureRecognizer into
	 * the format understood by the FlexController. This is a pure internal class and shall not
	 * be used outside SAP SE code.
	 * 
	 * @author SAP SE
	 * @version 1.32.7
	 *
	 * @constructor
	 * @private
	 * @since 1.30
	 * @alias sap.ui.rta.FlexAdapter
	 * @experimental Since 1.30. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var FlexAdapter = function(oControl) {
	};

	FlexAdapter.M_TYPES = {
		move : "move",
		addGroup : "addGroup",
		addField : "addField",
		property : "property",
		hideControl : "hideControl",
		unhideControl : "unhideControl"
	};

	FlexAdapter.prototype.init = function(oControl) {
		// for testibility the FlexController will be attached here, so you can run the
		// flexadapter without a flexibility backend
		this._attachFlexController(oControl);
	};

	FlexAdapter.prototype.destroy = function() {
		if (this.flexController) {
			delete this.flexController;
		}
	};

	FlexAdapter.prototype.createFlexMoveEvent = function(controlId, sourceId, targetId, sTargetAggregation, iTargetIndex) {
		var sType = FlexAdapter.M_TYPES.move;
		var oChange = {
			changeType : sType,
			selector : {
				id : controlId
			}
		};
		oChange.parameters = [ {
			targetAggregation : sTargetAggregation,
			sourceContainerId : sourceId,
			targetContainerId : targetId,
			index : iTargetIndex
		} ];
		return oChange;
	};

	FlexAdapter.prototype.createFlexPropertyChangeEvent = function(ctrlId, sPropertyName, sPropertyValue) {
		var sType = FlexAdapter.M_TYPES.property;
		var oChange = {
			changeType : sType,
			selector : {
				id : ctrlId
			}
		};
		oChange.parameters = [ {
			propertyName : sPropertyName,
			newValue : sPropertyValue
		} ];
		return oChange;
	};

	FlexAdapter.prototype.createHideEvent = function(sControlId) {
		var sType = FlexAdapter.M_TYPES.hideControl;
		var oChange = {
			changeType : sType,
			selector : {
				id : sControlId
			}
		};
		return oChange;
	};
	
	FlexAdapter.prototype.createUnhideEvent = function(sControlId) {
		var sType = FlexAdapter.M_TYPES.unhideControl;
		var oChange = {
			changeType : sType,
			selector : {
				id : sControlId
			}
		};
		return oChange;
	};

	FlexAdapter.prototype.createAddGroupEvent = function(oChangeData) {
		var oView = Utils.getClosestViewFor(sap.ui.getCore().byId(oChangeData.selectorId)); 
		var oAddChange = {
			selector: {
				id : oChangeData.selectorId
			},
			index : oChangeData.index,
			newControlId : oView.createId(jQuery.sap.uid()),
			changeType : FlexAdapter.M_TYPES.addGroup,
			groupLabel : "New Group"
		};
		return oAddChange;
	};
	
	FlexAdapter.prototype.createAddFieldEvent = function(oChangeData) {
		var oAddChange = {
			selector: {
				id : oChangeData.selectorId
			},
			index : oChangeData.index,
			newControlId : oChangeData.newControlId,
			changeType : FlexAdapter.M_TYPES.addField,
			fieldLabel : oChangeData.fieldLabel,
			fieldValue : oChangeData.fieldValue,
			valueProperty : oChangeData.valueProperty,
			jsType : oChangeData.jsType,
			value : oChangeData.value
		};
		return oAddChange;
	};

	FlexAdapter.prototype.emitHideEvent = function(oControl) {
		this._emitFlexEvent(oControl, this.createHideEvent(oControl.getId()));
	};
	
	FlexAdapter.prototype.emitUnhideEvent = function(oControl) {
		this._emitFlexEvent(oControl, this.createUnhideEvent(oControl.getId()));
	};

	FlexAdapter.prototype.emitAddEvent = function(oChangeData, sChangeType) {
		var oChange;
		if (FlexAdapter.M_TYPES.addField === sChangeType) {
			oChange = this.createAddFieldEvent(oChangeData);
		} else if (FlexAdapter.M_TYPES.addGroup === sChangeType) {
			oChange = this.createAddGroupEvent(oChangeData);
		}
		this._emitFlexEvent(sap.ui.getCore().byId(oChangeData.selectorId), oChange);
		return oChange;
	};

	FlexAdapter.prototype.emitMoveEvent = function(oElement, oChange) {
		this._emitFlexEvent(oElement, oChange);
	};

	FlexAdapter.prototype.emitPropertyChangeEvent = function(oControl, sPropertyName, sPropertyValue) {
		this._emitFlexEvent(oControl, this.createFlexPropertyChangeEvent(oControl.getId(), sPropertyName, sPropertyValue));
	};

	FlexAdapter.prototype.onResetToDefault = function() {
		var that = this;
		this.flexController.getComponentChanges().then(function(aChanges) {
			return that.flexController.discardChanges(aChanges).then(function() {
				window.location.reload();
			});
		})['catch'](function(oError) {
			jQuery.sap.log.error("Flexibility data could not be discarded " + oError);
		});
	};

	/*
	 * @private
	 */
	FlexAdapter.prototype._attachFlexController = function(oControl) {
		try {

			if (flexControllerFactory) {
				this.flexController = flexControllerFactory.createForControl(oControl);
			} else {
				this.flexController = null;
			}
			
            
		} catch (oError) {
			jQuery.sap.log.error("No DT control can be found for " + oControl.getMetadata().getName());
		}
	};

	/*
	 * @private
	 */
	FlexAdapter.prototype._emitFlexEvent = function(oControl, oChange) {
		if (this.flexController) {
			this.flexController.createAndApplyChange(oChange, oControl);
			this.flexController.saveAll().then(function() {
			})["catch"](function(oError) {
				jQuery.sap.log.error("Flexibility data could not be saved " + oError);
			});
		}
	};

	return FlexAdapter;

}, /* bExport= */true);

}; // end of sap/ui/rta/FlexAdapter.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.ModelConverter') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

/*global Promise */// declare unusual global vars for JSLint/SAPUI5 validation

jQuery.sap.declare('sap.ui.rta.ModelConverter'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.odata.FieldSelectorModelConverter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/ModelConverter",[ 
	'jquery.sap.global', 
	'sap/ui/comp/odata/FieldSelectorModelConverter',
	'sap/ui/dt/ElementUtil',
	'./Utils'],
function(jQuery, FieldSelectorModelConverter, ElementUtil, Utils) {
	"use strict";

	/**
	 * Class for ModelConverter.
	 * 
	 * @class
	 * ModelConverter functionality to get a converted model from a given OData Model, which includes checks for already bound and visible properties on the UI as well as renamed labels for sap:label
	 *
	 * @author SAP SE
	 * @version 1.32.7
	 *
	 * @private
	 * @static
	 * @since 1.33
	 * @alias sap.ui.rta.ModelConverter
	 * @experimental Since 1.33. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var ModelConverter = {};

	ModelConverter.getConvertedModelWithBoundAndRenamedLabels = function(oControl, aEntityTypes) {
		var that = this;
		var oModel = oControl.getModel();
		return this._getModelConverter(oModel).then(function(oFieldSelectorModelConverter) {
			return that._getFieldModel(oControl, oFieldSelectorModelConverter, aEntityTypes);
		});
	};

	ModelConverter._getModelConverter = function(oModel) {
		var oMetaModel = oModel.getMetaModel();
		return oMetaModel.loaded().then(function() {
			return new FieldSelectorModelConverter(oModel);
		}, function(oReason) {
			jQuery.sap.log.error("MetadataModel could not be loaded", oReason);
		});
	};
	
	ModelConverter._getIgnoredFields = function(oControl) {
		
		if (oControl && oControl.getIgnoredFields) {
			var sCsvIgnoredFields = oControl.getIgnoredFields();
			if (sCsvIgnoredFields) {
				var aIgnoredFields = sCsvIgnoredFields.split(",");
				return aIgnoredFields;
			}
		}
		return [];
	};
	
	/**
	 * Generates the field model based on renamed labels, already bound and visible fields as well as complex types
	 * @param  {Array} aEntityTypes List of entity types
	 * @param  {sap.ui.core.Control} oControl Currently selected control
	 * @return {Array} List of Fields for the given entity type
	 * @private
	 */
	ModelConverter._getFieldModel = function(oControl, oFieldSelectorModelConverter, aEntityTypes) {
		var aIgnoredFields = this._getIgnoredFields(oControl);
		var oConvertedModel = oFieldSelectorModelConverter.getConvertedModel(aEntityTypes, aIgnoredFields);
		
		var oVisibleAndBoundFields = this._findVisibleAndBoundFieldsAndLabelNames(oControl);

		var mVisibleAndBoundFields = oVisibleAndBoundFields.visibleAndBoundFields;
		var mFieldsAndLabelNames = oVisibleAndBoundFields.fieldsAndLabelNames;
		var mFieldsAndBoundPropertyName = oVisibleAndBoundFields.fieldsAndBoundPropertyName;
		var mBoundFieldsId = oVisibleAndBoundFields.boundFieldsId;
		var sEntityType;

		for (var z = 0; z < aEntityTypes.length; z++) {
			sEntityType = aEntityTypes[z];
			for (var i = 0; i < oConvertedModel[sEntityType].length; i++) {
				var oActModelEntity = oConvertedModel[sEntityType][i];
				var complexTypePropertyName = oFieldSelectorModelConverter.getMetaDataAnalyzer()
						._getNameOfPropertyUsingComplexType(sEntityType, oActModelEntity.entityName);
				if (mVisibleAndBoundFields[oActModelEntity.name]) {
					oActModelEntity.checked = true;
					
				}
				oActModelEntity.controlId = mBoundFieldsId[oActModelEntity.name];
				//Check for complexTypes
				if (complexTypePropertyName) {
					oActModelEntity.isComplexType = true;
					oActModelEntity.complexTypeName = complexTypePropertyName;

					if (mVisibleAndBoundFields[complexTypePropertyName + "/" + oActModelEntity.name]) {
						oActModelEntity.checked = true;
						oActModelEntity.controlId = mVisibleAndBoundFields[complexTypePropertyName + "/" + oActModelEntity.name];
					}
				}
				//Check for renamed labels
				var sFieldLabel;
				
				if (oActModelEntity.isComplexType) {
					 sFieldLabel = mFieldsAndLabelNames[oActModelEntity.complexTypeName + "/" + oActModelEntity.name];
				} else {
					sFieldLabel = mFieldsAndLabelNames[oActModelEntity.name];
				}
				if (sFieldLabel && sFieldLabel !== oActModelEntity["sap:label"]) {
					oActModelEntity.fieldLabel = sFieldLabel;
				}

				oActModelEntity.boundProperty = mFieldsAndBoundPropertyName[oActModelEntity.name];
			}
		}
		return oConvertedModel[sEntityType];
	};

	/**
	 * Finds already bound and visible fields and saves the current label value
	 * @param  {sap.ui.core.Control} oControl Currently selected control
	 * @return {Object} visibleAndBoundFields: Lists of visible and bound fields, fieldsAndLabelNames: visible and LabelValue fields
	 * @private
	 */
	ModelConverter._findVisibleAndBoundFieldsAndLabelNames = function(oControl) {
		var mVisibleAndBoundFields = [];
		var mBoundFieldsId = [];
		var mFieldsAndLabelNames = {};
		var mFieldsAndBoundPropertyName = {};
		var aElements = ElementUtil.findAllPublicElements(oControl);
		var i = 0;
		if (oControl instanceof sap.m.ObjectHeader) {
			for (i = 0; i < aElements.length; i++) {
				var oObHeaderElement = aElements[i];

				if (oObHeaderElement instanceof sap.m.ObjectAttribute) {
					mVisibleAndBoundFields.push(oObHeaderElement.getBindingPath("text"));
				}
			}
		} else if ( oControl instanceof sap.ui.comp.smartform.SmartForm) {
			for (i = 0; i < aElements.length; i++) {
				var oFormElement = aElements[i];
				if (oFormElement.mBindingInfos) {
					for ( var oInfo in oFormElement.mBindingInfos) {
						var sPath = oFormElement.mBindingInfos[oInfo].parts[0].path ? oFormElement.mBindingInfos[oInfo].parts[0].path : "";
						var oParent = oFormElement.getParent();
						if (oParent && sPath) {
							mFieldsAndBoundPropertyName[sPath] = oInfo;
							var sFieldLabel = Utils.getLabelForElement(oParent);
							if (sFieldLabel) {
								mFieldsAndLabelNames[sPath] = sFieldLabel;
							}
							if (oFormElement.getDomRef()) {
								mVisibleAndBoundFields[sPath] = oParent.getId();
							}
							mBoundFieldsId[sPath] = oParent.getId();
						}
					}
				}

			}
		}

		return {
			visibleAndBoundFields : mVisibleAndBoundFields,
			boundFieldsId : mBoundFieldsId,
			fieldsAndLabelNames : mFieldsAndLabelNames,
			fieldsAndBoundPropertyName: mFieldsAndBoundPropertyName
		};
	};

	return ModelConverter;

}, /* bExport= */true);
}; // end of sap/ui/rta/ModelConverter.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.RTADragDropPlugin') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides class sap.ui.rta.RTADragDropPlugin.
jQuery.sap.declare('sap.ui.rta.RTADragDropPlugin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.plugin.ControlDragDrop'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.OverlayUtil'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/RTADragDropPlugin",[
	'jquery.sap.global', 
	'sap/ui/dt/plugin/ControlDragDrop',
	'sap/ui/dt/ElementUtil',
	'sap/ui/dt/OverlayUtil',
	'./Utils'
],
function(jQuery,
		ControlDragDrop, 
		ElementUtil, 
		OverlayUtil,
		Utils) {
	"use strict";

	/**
	 * Constructor for a new RTADragDropPlugin.
	 *
	 * @param {string} [sId] id for the new object, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new object
	 *
	 * @class
	 * The RTADragDropPlugin allows to create a set of Overlays above the root elements and
	 * theire public children and manage their events.
	 * @extends sap.ui.core.ManagedObject
	 *
	 * @author SAP SE
	 * @version 1.32.7
	 *
	 * @constructor
	 * @private
	 * @since 1.30
	 * @alias sap.ui.rta.RTADragDropPlugin
	 * @experimental Since 1.30. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var RTADragDropPlugin = ControlDragDrop.extend("sap.ui.rta.RTADragDropPlugin", /** @lends sap.ui.rta.RTADragDropPlugin.prototype */ {		
		metadata : {
			// ---- object ----

			// ---- control specific ----
			library : "sap.ui.rta",
			properties : {
			},
			associations : {
			},
			events : {
				moveElement : {},
				hideElement : {},
				openContextMenu : {}
			}
		}
	});
	
	/**
	 * @override
	 */
	RTADragDropPlugin.prototype.init = function() {
		ControlDragDrop.prototype.init.apply(this, arguments);
		this._fnOnKeyDown = this._onKeyDown.bind(this);
		jQuery(document).keydown(this._fnOnKeyDown);
	};
	
	/**
	 * @override
	 */
	RTADragDropPlugin.prototype.exit = function() {
		ControlDragDrop.prototype.exit.apply(this, arguments);
		jQuery(document).off("keydown", this._fnOnKeyDown);
		delete this._fnOnKeyDown;
	};

	/**
	 * Register an overlay
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	RTADragDropPlugin.prototype.registerOverlay = function(oOverlay) {
		oOverlay.attachBrowserEvent("click", this._onClick, this);
		oOverlay.attachEvent("selectableChange", this._onSelectableChange, this);

		oOverlay.attachBrowserEvent("contextmenu", this._onContextMenu, this);
		if (oOverlay.isDraggable()) {
			this._attachDraggableBrowserEvents(oOverlay);
		}
		
		if (Utils.isOverlayMutable(oOverlay)) {
			oOverlay.setSelectable(true);
		} else {
			oOverlay.setSelectable(false);
		}
		//if overlay is selectable by default, we should ensure tabindex
		if (!oOverlay.getDomRef()) {
			var _oDelegateSetTabIndex = {
				onAfterRendering : function(oEvent) {
					var oOverlay = oEvent.srcControl;
					if (oOverlay.isSelectable()) {
						oOverlay.$().attr("tabindex", 0);
					}
					oOverlay.removeEventDelegate(_oDelegateSetTabIndex);
				}
			};

			oOverlay.addEventDelegate(_oDelegateSetTabIndex);
		}

		ControlDragDrop.prototype.registerOverlay.apply(this, arguments);
	};


	/**
	 * Additionally to super->deregisterOverlay this method detatches the browser events
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	RTADragDropPlugin.prototype.deregisterOverlay = function(oOverlay) {
		ControlDragDrop.prototype.deregisterOverlay.apply(this, arguments);
		oOverlay.detachBrowserEvent("click", this._onClick, this);
		oOverlay.detachEvent("selectableChange", this._onSelectableChange, this);
		oOverlay.detachBrowserEvent("contextmenu", this._onContextMenu, this);
		this._detachDraggableBrowserEvents(oOverlay);
	};

	/**
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @private
	 */
	RTADragDropPlugin.prototype._attachDraggableBrowserEvents = function(oOverlay) {
		oOverlay.attachBrowserEvent("mouseover", this._onMouseOver, this);
		oOverlay.attachBrowserEvent("mouseleave", this._onMouseLeave, this);
	};
	
	/**
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @private
	 */
	RTADragDropPlugin.prototype._detachDraggableBrowserEvents = function(oOverlay) {
		oOverlay.detachBrowserEvent("mouseover", this._onMouseOver, this);
		oOverlay.detachBrowserEvent("mouseleave", this._onMouseLeave, this);
	};

	/**
	 * Handle context menu event
	 * @param  {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	RTADragDropPlugin.prototype._onContextMenu = function(oEvent) {
		//hide browser-context menu
		if (oEvent.preventDefault) {
			oEvent.preventDefault();
		}
		
		var oEventSrcOverlay = sap.ui.getCore().byId(oEvent.originalEvent.currentTarget.id);
		if (oEventSrcOverlay.isSelectable()) {
			oEventSrcOverlay.setSelected(true);
			this.fireOpenContextMenu({
				originalEvent : oEvent,
				overlay : oEventSrcOverlay
			});
			oEvent.stopPropagation();
		}
	};
	
	/**
	 * Handle keydown event
	 * @param  {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	RTADragDropPlugin.prototype._onKeyDown = function(oEvent) {
		var oOverlay = Utils.getFocusedOverlay();
		if (oEvent.keyCode === jQuery.sap.KeyCodes.DELETE) {
			this._hideElement();
		} else if ((oEvent.keyCode === jQuery.sap.KeyCodes.ENTER) && (oEvent.shiftKey === false) && (oEvent.altKey === false) && (oEvent.ctrlKey === false)) {
			if ((oOverlay) && (!oOverlay.isSelected())) {
				oOverlay.setSelected(true);
			}
		} else if ((oEvent.keyCode === jQuery.sap.KeyCodes.F10) && (oEvent.shiftKey === true) && (oEvent.altKey === false) && (oEvent.ctrlKey === false)) {
			if (oOverlay) {
				oOverlay.setSelected(true);
				var iWidth = oOverlay.$().width() / 2;
				var iHeight = oOverlay.$().height() / 2;
				var iTop = oOverlay.$().offset().top;
				var iLeft = oOverlay.$().offset().left;
				var oOriginalEvent = jQuery.Event("click", {pageX: iLeft + iWidth, pageY: iTop + iHeight});
				this.fireOpenContextMenu({
					originalEvent : oOriginalEvent,
					overlay : oOverlay
				});
			}
		} else if ((oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_UP) && (oEvent.shiftKey === false) && (oEvent.altKey === false) && (oEvent.ctrlKey === false)) {
			if (oOverlay) {
				var oParentOverlay = oOverlay.getParentElementOverlay();
				if ((oParentOverlay) && (oParentOverlay.isSelectable())) {
					oParentOverlay.focus();
				}
			}			
		} else if ((oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_DOWN) && (oEvent.shiftKey === false) && (oEvent.altKey === false) && (oEvent.ctrlKey === false)) {
			if (oOverlay) {
				var oFirstChildOverlay = Utils.getFirstFocusableChildOverlay(oOverlay);
				if (oFirstChildOverlay) {
					oFirstChildOverlay.focus();
				}
			}
		} else if ((oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_LEFT) && (oEvent.shiftKey === false) && (oEvent.altKey === false) && (oEvent.ctrlKey === false)) {
			if (oOverlay) {
				var oPrevSiblingOverlay = Utils.getPreviousFocusableSiblingOverlay(oOverlay);
				if (oPrevSiblingOverlay) {
					oPrevSiblingOverlay.focus();
				}
			}	
		} else if ((oEvent.keyCode === jQuery.sap.KeyCodes.ARROW_RIGHT) && (oEvent.shiftKey === false) && (oEvent.altKey === false) && (oEvent.ctrlKey === false)) {
			if (oOverlay) {
				var oNextSiblingOverlay = Utils.getNextFocusableSiblingOverlay(oOverlay);
				if (oNextSiblingOverlay) {
					oNextSiblingOverlay.focus();
				}
			}	
		}
	};
	
	/**
	 * @private
	 */
	RTADragDropPlugin.prototype._hideElement = function() {
		var oDesignTime = this.getDesignTime();
		var aSelection = oDesignTime.getSelection();
		var oSelectedOverlay = aSelection[0];
		if (oSelectedOverlay) {
			var oElement = oSelectedOverlay.getElementInstance();
			this.fireHideElement({element:oElement});	
		}		
	};
	
	/**
	 * Additionally to super->onDragStart this method stores the parent's id in an instance variable
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	RTADragDropPlugin.prototype.onDragStart = function(oOverlay) {
		ControlDragDrop.prototype.onDragStart.apply(this, arguments);

		this.getDesignTime().getSelection().forEach(function(oOverlay) {
			oOverlay.setSelected(false);
		});

		oOverlay.$().addClass("sapUiRtaOverlayPlaceholder");

		var oParent = oOverlay.getParentElementOverlay().getElementInstance();
		this._oSourceParent = oParent;
	};
	
	/**
	 * Additionally to super->onDragEnd this method takes care about moving the element
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	RTADragDropPlugin.prototype.onDragEnd = function(oOverlay) {
		ControlDragDrop.prototype.onDragEnd.apply(this, arguments);

		oOverlay.$().removeClass("sapUiRtaOverlayPlaceholder");
		oOverlay.setSelected(true);
		oOverlay.focus();

		this._onOverlayMoved(oOverlay);		
	};

	/**
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @private
	 */
	RTADragDropPlugin.prototype._onOverlayMoved = function(oOverlay) {
		var oMoveEvent;
		if (ElementUtil.isInstanceOf(oOverlay.getElementInstance(), "sap.ui.comp.smartform.Group")) {
			oMoveEvent = this._createMoveEventInSmartForm("moveGroups", oOverlay);
		} else if (ElementUtil.isInstanceOf(oOverlay.getElementInstance(), "sap.ui.comp.smartform.GroupElement")) {
			oMoveEvent = this._createMoveEventInSmartForm("moveFields", oOverlay);
		}

		if (oMoveEvent) {
			this.fireMoveElement(oMoveEvent);
		}
	};
	
	/**
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @private
	 */
	RTADragDropPlugin.prototype._createMoveEventInSmartForm = function(sType, oOverlay) {
		var oElement = oOverlay.getElementInstance();
		var oTargetParent = oOverlay.getParentElementOverlay().getElementInstance();
		var sPublicParentAggregationName = oOverlay.getParentAggregationOverlay().getAggregationName();

		var sSourceParentId = this._oSourceParent.getId();
		var sTargetParentId = oTargetParent.getId();
		var iTargetIndex = this._getIndexInParentAggregation(oTargetParent, sPublicParentAggregationName, oElement);

		var oChangeData = {
			changeType: sType,
			selector: {
				id : sSourceParentId
			},
			targetId : sTargetParentId !== sSourceParentId ? sTargetParentId : null
		};
		oChangeData[sType] = [{
			id: oElement.getId(),
			index: iTargetIndex
		}];

		return {
			element : this._oSourceParent, 
			change: oChangeData
		};
	};

	/**
	 * Calculate index in parent aggregation
	 * @param  {sap.ui.Element} oParent  	assiciated parent element
	 * @param  {string} sAggregationName 		public parent aggregation name
	 * @param  {sap.ui.Element} oElement	associated element
	 * @return {number}                  	index in parent aggregation
	 * @private
	 */
	RTADragDropPlugin.prototype._getIndexInParentAggregation = function(oParent, sAggregationName, oElement) {
		var aChildren = ElementUtil.getAggregation(oParent, sAggregationName);

		return aChildren.indexOf(oElement);
	};


	/**
	 * If overlay is draggable attach browser events o overlay. If not remove them.
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	RTADragDropPlugin.prototype.onDraggableChange = function(oOverlay) {
		ControlDragDrop.prototype.onDraggableChange.apply(this, arguments);
		if (oOverlay.isDraggable()) {
			this._attachDraggableBrowserEvents(oOverlay);
		} else {
			this._detachDraggableBrowserEvents(oOverlay);
		}
	};

	/**
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @return {boolean}          true if embedded, false if not
	 * @override
	 */
	RTADragDropPlugin.prototype.checkDraggable = function(oOverlay) {
		var bDraggable = ControlDragDrop.prototype.checkDraggable.apply(this, arguments);
		return bDraggable && Utils.isOverlayMutable(oOverlay);
	};

	/**
	 * Checks droppability for aggregation overlays
	 * @param  {sap.ui.dt.Overlay} oAggregationOverlay aggregation overlay object
	 * @return {boolean}                     true if aggregation overlay is droppable, false if not
	 * @override
	 */
	RTADragDropPlugin.prototype.checkDroppable = function(oAggregationOverlay) {
		var bDroppable = ControlDragDrop.prototype.checkDroppable.call(this, oAggregationOverlay);

		if (bDroppable) {
			var oOverlay = oAggregationOverlay.getParent();
			var oSmartForm = OverlayUtil.getClosestOverlayForType("sap.ui.comp.smartform.SmartForm", oOverlay);
			var oAllowedSmartForm = OverlayUtil.getClosestOverlayForType("sap.ui.comp.smartform.SmartForm", this.getDraggedOverlay());
			if (oSmartForm !== oAllowedSmartForm) {
				bDroppable = false;
			}
		}

		return bDroppable;
	};

	/**
	 * Handle click event
	 * @param  {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	RTADragDropPlugin.prototype._onClick = function(oEvent) {
		var oOverlay = sap.ui.getCore().byId(oEvent.currentTarget.id);
		if (oOverlay.isSelectable()) {
			oOverlay.setSelected(!oOverlay.getSelected());
			
			oEvent.preventDefault();
			oEvent.stopPropagation();
		}	
	};

	/**
	 * @private
	 */
	RTADragDropPlugin.prototype._onSelectableChange = function(oEvent) {
		var oOverlay = oEvent.getSource();
		var bSelectable = oEvent.getParameter("selectable");
		if (bSelectable) {
			oOverlay.$().attr("tabindex", 0);
		} else {
			oOverlay.$().attr("tabindex", null);
		}
	};	

	/**
	 * Handle mouse over event
	 * @param  {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	RTADragDropPlugin.prototype._onMouseOver = function(oEvent) {
		var oOverlay = sap.ui.getCore().byId(oEvent.currentTarget.id);
		if (oOverlay !== this._oPreviousHoverTarget) {
			if (this._oPreviousHoverTarget) {
				this._oPreviousHoverTarget.$().removeClass("sapUiRtaOverlayHover");
			}
			this._oPreviousHoverTarget = oOverlay;
			oOverlay.$().addClass("sapUiRtaOverlayHover");
		}
		oEvent.preventDefault();
		oEvent.stopPropagation();
		
	};

	/**
	 * Handle mouse leave event
	 * @param  {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	RTADragDropPlugin.prototype._onMouseLeave = function(oEvent) {
		if (this._oPreviousHoverTarget) {
			this._oPreviousHoverTarget.$().removeClass("sapUiRtaOverlayHover");
		}
		delete this._oPreviousHoverTarget;
		oEvent.preventDefault();
		oEvent.stopPropagation();
	};

	return RTADragDropPlugin;
}, /* bExport= */ true);

}; // end of sap/ui/rta/RTADragDropPlugin.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.RTARenamePlugin') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides class sap.ui.rta.RTARenamePlugin.
jQuery.sap.declare('sap.ui.rta.RTARenamePlugin'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.Plugin'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.OverlayUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.FlexControllerFactory'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/RTARenamePlugin",[
	'jquery.sap.global', 
	'sap/ui/dt/Plugin',
	'sap/ui/dt/ElementUtil',
	'sap/ui/dt/OverlayUtil',
	'./Utils',
    'sap/ui/fl/FlexControllerFactory'
],
function(jQuery,
		Plugin, 
		ElementUtil, 
		OverlayUtil,
		Utils,
		FlexControllerFactory) {
	"use strict";

	/**
	 * Constructor for a new RTARenamePlugin.
	 *
	 * @param {string} [sId] id for the new object, generated automatically if no id is given 
	 * @param {object} [mSettings] initial settings for the new object
	 *
	 * @class
	 * The RTARenamePlugin allows to create a set of Overlays above the root elements and
	 * theire public children and manage their events.
	 * @extends sap.ui.core.ManagedObject
	 *
	 * @author SAP SE
	 * @version 1.32.7
	 *
	 * @constructor
	 * @private
	 * @since 1.30
	 * @alias sap.ui.rta.RTARenamePlugin
	 * @experimental Since 1.30. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var RTARenamePlugin = Plugin.extend("sap.ui.rta.RTARenamePlugin", /** @lends sap.ui.rta.RTARenamePlugin.prototype */ {		
		metadata : {
			// ---- object ----

			// ---- control specific ----
			library : "sap.ui.rta",
			properties : {			
			},
			associations : {
			},
			events : {
				/** Fired when renaming is possible*/
				"editable" : {},

				/** Fired when renaming is switched off */
				"nonEditable" : {}
			}
		}
	});
	
	
	/**
	 * @override
	 */
	RTARenamePlugin.prototype.exit = function() {
		Plugin.prototype.exit.apply(this, arguments);
		jQuery(document).off("keydown", this._fnOnKeyDown);
		delete this._fnOnKeyDown;
		delete this._aSelection;
	};
	
	/**
	 * @override
	 */
	RTARenamePlugin.prototype.setDesignTime = function(oDesignTime) {
		this._aSelection = [];

		var oOldDesignTime = this.getDesignTime();
		if (oOldDesignTime) {
			oOldDesignTime.detachSelectionChange(this._onDesignTimeSelectionChange, this);
		}

		Plugin.prototype.setDesignTime.apply(this, arguments);

		if (oDesignTime) {
			oDesignTime.attachSelectionChange(this._onDesignTimeSelectionChange, this);
			this._aSelection = oDesignTime.getSelection();
		}
	};

	/**
	 * Register an overlay
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	RTARenamePlugin.prototype.registerOverlay = function(oOverlay) {
		oOverlay.attachEvent("editableChange", this._manageClickEvent, this);

		if (this.checkEditable(oOverlay)) {
			oOverlay.setEditable(true);
		}
	};


	/**
	 * Additionally to super->deregisterOverlay this method detatches the browser events
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @override
	 */
	RTARenamePlugin.prototype.deregisterOverlay = function(oOverlay) {
		oOverlay.detachEvent("editableChange", this._manageClickEvent, this);
		oOverlay.detachBrowserEvent("click", this._onClick, this);
	};
	
	
	/**
	 * Handle click event
	 * @param  {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	RTARenamePlugin.prototype._onClick = function(oEvent) {
		var oOverlay = sap.ui.getCore().byId(oEvent.currentTarget.id);
		
		this.setEditMode(oOverlay);
		
		oEvent.preventDefault();
	};

	/**
	 * Set element to editable
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @private
	 */
	RTARenamePlugin.prototype.setEditMode = function(oOverlay) {
		this._oEditedOverlay = oOverlay;
		this._hideOverlays(true, {
			currentTarget : {
				id : oOverlay.getId()
			}
		});
	};

	/**
	 * Hide or show overlays
	 * @param  {boolean} hide overlays
	 * @param  {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	RTARenamePlugin.prototype._hideOverlays = function(bHide, oEvent) {
		var oTarget = sap.ui.getCore().byId(oEvent.currentTarget.id);
		var $oTarget;
		var oRet = {};
		
		if (!bHide) {
			oRet =	{
				value : oTarget.$()[0].innerText,
				type : this._oEditedOverlay.getElementInstance().getMetadata().getName()
			}; 
			$oTarget = oTarget.$();
			jQuery("#overlay-container").show();
			$oTarget.removeAttr("contenteditable");
			if ($oTarget.hasClass("sapUiRtaEditLabel")){
				$oTarget.removeClass("sapUiRtaEditLabel");
			} else {
				$oTarget.removeClass("sapUiRtaEditTitle");
			}
			$oTarget[0].blur();
			$oTarget[0].onfocus = null;
			$oTarget[0].onblur = null;
			$oTarget[0].onkeydown = null; 
			this.fireNonEditable();
		} else {
			var $oTarget = this._getTargetFor(oTarget);
			jQuery("#overlay-container").hide();
			$oTarget.attr("contenteditable", "true");
			if ($oTarget.hasClass("sapMLabel")){
				$oTarget.addClass("sapUiRtaEditLabel");
			} else {
				$oTarget.addClass("sapUiRtaEditTitle");
			}
			setTimeout(function() {
				$oTarget[0].focus();
			},0);
			$oTarget[0].onfocus = jQuery.proxy(this._onEditableElementFocus, this);
			$oTarget[0].onblur = jQuery.proxy(this._onEditableElementBlur, this);
			$oTarget[0].onkeydown = jQuery.proxy(this._onEditableElementKeydown, this);
			this._oOldFieldValue = $oTarget[0].innerText;
			this.fireEditable();
		}
		
		return oRet;
	};
	
	/**
	 * CalcTarget
	 * @param  {object} object
	 * @private
	 */
	RTARenamePlugin.prototype._getTargetFor = function(oTargetOverlay) {
		var sName = oTargetOverlay.getElementInstance().getMetadata().getName();
		var $oRet;
		switch (sName) {
		case "sap.ui.comp.smartform.Group":
			$oRet = oTargetOverlay.getElementInstance().getTitle().$();
			break;
		case "sap.ui.comp.smartform.GroupElement":
			$oRet = oTargetOverlay.getElementInstance().getLabel().$();
			break;
		default:
			break;
		}
		return $oRet;
	};
	
	/**
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @private
	 */
	RTARenamePlugin.prototype._createRenameEventInSmartForm = function(sType, oOverlay) {
		var oElement = oOverlay.getElementInstance();
		var oTargetParent = oOverlay.getParentElementOverlay().getElementInstance();
		var sPublicParentAggregationName = oOverlay.getParentAggregationOverlay().getAggregationName();

		var sSourceParentId = this._oSourceParent.getId();
		var sTargetParentId = oTargetParent.getId();
		var iTargetIndex = this._getIndexInParentAggregation(oTargetParent, sPublicParentAggregationName, oElement);

		var oChangeData = {
			changeType: sType,
			selector: {
				id : sSourceParentId
			},
			targetId : sTargetParentId !== sSourceParentId ? sTargetParentId : null
		};
		oChangeData[sType] = [{
			id: oElement.getId(),
			index: iTargetIndex
		}];

		return {
			element : this._oSourceParent, 
			change: oChangeData
		};
	};
	
	/**
	 * React on selection change from designTime
	 * @param  {event} oEvent fired
	 * @override
	 */
	RTARenamePlugin.prototype._onDesignTimeSelectionChange = function(oEvent) {
		var that = this;
		var aSelection = oEvent.getParameter("selection");

		// merge all overlays from old and current selection together
		aSelection.forEach(function(oOverlay) {
			if (that._aSelection.indexOf(oOverlay) === -1) {
				that._aSelection.push(oOverlay);
			}
		});
		that._aSelection.forEach(this._manageClickEvent, this);
	};

	/**
	 * If overlay is editable and selected, attach click event to it
	 * @param  {event|sap.ui.dt.Overlay} vEventOrElement event with source overlay or overlay object
	 * @override
	 */
	RTARenamePlugin.prototype._manageClickEvent = function(vEventOrElement) {
		var oOverlay = vEventOrElement.getSource ? vEventOrElement.getSource() : vEventOrElement;
		if (oOverlay.isSelected() && oOverlay.isEditable() && oOverlay.isDraggable()) {
			oOverlay.attachBrowserEvent("click", this._onClick, this);
		} else {
			oOverlay.detachBrowserEvent("click", this._onClick, this);
		}
	};

	/**
	 * @param  {sap.ui.dt.Overlay} oOverlay overlay object
	 * @return {boolean}          true if embedded, false if not
	 * @override
	 */
	RTARenamePlugin.prototype.checkEditable = function(oOverlay) {
		return Utils.isOverlayMutable(oOverlay);
	};

	/**
	 * Handle keydown event on an editable element
	 * @param  {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	RTARenamePlugin.prototype._onEditableElementKeydown = function(oEvent) {
		if (oEvent.keyCode === jQuery.sap.KeyCodes.ENTER) {
			oEvent.preventDefault();
			var oChangeData = this._hideOverlays(false, oEvent);
			this._applyChange(oEvent, oChangeData);
		} else if (oEvent.keyCode === jQuery.sap.KeyCodes.ESCAPE) {
			oEvent.preventDefault();
			this._oEditedOverlay.setSelected(true);
			this._hideOverlays(false, oEvent);
			var oTarget = sap.ui.getCore().byId(oEvent.currentTarget.id);
			oTarget.getDomRef().innerText = this._oOldFieldValue;
		}
	};
	
	/**
	 * Handle focus event on an editable element
	 * @param  {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	RTARenamePlugin.prototype._onEditableElementBlur = function(oEvent) {
		var tmpOverlaySelected = this._oEditedOverlay;
		setTimeout(function() {
			tmpOverlaySelected.setSelected(true);
			tmpOverlaySelected.focus();
		}, 0);
		var oChangeData = this._hideOverlays(false, oEvent);
		if (oChangeData) {
			var sel = window.getSelection();
			sel.removeAllRanges();
			this._applyChange(oEvent, oChangeData);
		}
	};
	
	RTARenamePlugin.prototype._applyChange = function(oEvent, oChangeData) {
		//the change handler expects the GroupElement and not the field
		if (this._oOldFieldValue != oChangeData.value) {
			var sId = this._oEditedOverlay.getElementInstance().getId();
			var oControl = sap.ui.getCore().byId(sId);
			var oFlexController = FlexControllerFactory.createForControl(oControl);
			var oChange = this._createLabelChange(sId, oChangeData.value, oChangeData.type);
			oFlexController.createAndApplyChange(oChange, oControl);
			oFlexController.saveAll();
		}
	};
	
	/**
	 * Handle focus event on an editable element
	 * @param  {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	RTARenamePlugin.prototype._onEditableElementFocus = function(e) {
		var el = e.target;
		var range = document.createRange();
		range.selectNodeContents(el);
		var sel = window.getSelection();
		sel.removeAllRanges();
		sel.addRange(range);
	};
	
	/**
	 * Creates a property bag for a label change
	 * 
	 * @param {string} sId - control id.
	 * @param {string} sLabel - new label.
	 * @param {string} sType - node type (form|group|field).
	 * @returns{object} change property bag (see sap.ui.fl.Change#createInitialFileContent oPropertyBag).
	 * @private
	 */
	RTARenamePlugin.prototype._createLabelChange = function(sId, sLabel, sType) {

		var oLabelChange = {};

		oLabelChange.selector = {};
		oLabelChange.selector.id = sId;

		switch (sType) {
			case "form":
				oLabelChange = {};
				break;
			case "sap.ui.comp.smartform.Group":
				oLabelChange.changeType = "renameGroup";
				oLabelChange.groupLabel = sLabel;
				break;
			case "sap.ui.comp.smartform.GroupElement":
				oLabelChange.changeType = "renameField";
				oLabelChange.fieldLabel = sLabel;
				break;
			default:
				oLabelChange = {};
				break;
		}

		return oLabelChange;

	};
	
	return RTARenamePlugin;
}, /* bExport= */ true);
	
}; // end of sap/ui/rta/RTARenamePlugin.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.ToolsMenu') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.rta.ToolsMenu.
jQuery.sap.declare('sap.ui.rta.ToolsMenu'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.m.Toolbar'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarDesign'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarLayoutData'); // unlisted dependency retained
jQuery.sap.require('sap.m.ToolbarSpacer'); // unlisted dependency retained
jQuery.sap.require('sap.m.Label'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.Settings'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/ToolsMenu",[
	'jquery.sap.global', 
	'./library', 
	'sap/ui/core/Control', 
	'sap/m/Toolbar',
	'sap/m/ToolbarDesign',
	'sap/m/ToolbarLayoutData',
	'sap/m/ToolbarSpacer',
	'sap/m/Label',
	'sap/ui/fl/registry/Settings',
	'sap/ui/fl/Utils'
	],
	function(
		jQuery, 
		library, 
		Control, 
		Toolbar,
		ToolbarDesign,
		ToolbarLayoutData,
		ToolbarSpacer,
		Label,
		FlexSettings,
		Utils) {
	"use strict";

	/**
	 * Constructor for a new sap.ui.rta.ToolsMenu control.
	 *
	 * @class
	 * Contains all the necessary Toolbars for the Runtime Authoring
	 * @extends sap.ui.core.Control
	 *
	 * @author SAP SE
	 * @version 1.32.7
	 *
	 * @constructor
	 * @private
	 * @since 1.30
	 * @alias sap.ui.rta.ToolsMenu
	 * @experimental Since 1.30. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var ToolsMenu = Control.extend("sap.ui.rta.ToolsMenu", {
		metadata : {

			library : "sap.ui.rta",
			// ---- control specific ----
			aggregations : {
				"toolbars" : {
					type : "sap.m.Toolbar",
					multiple : true,
					singularName : "toolbar"
				}
			},
			events : {
				/**
				 * Event is fired when the Toolbars are closed (Exit button pressed)
				 */
				
				"close" : {},
				"restore": {},
				"transport" : {}
			}
		}

	});

	/**
	 * Initialization of the ToolsMenu Control
	 * @private
	 */
	ToolsMenu.prototype.init = function() {

		// Initialize Variables
		var oAdaptModeLabel = null;
		var oAppTitleLabel = null;
		var oButtonExit = null;
		var sText = null;
		var oLeftSpacer = null;
		var oRightSpacer = null;

		// Get messagebundle.properties for sap.ui.rta
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.rta");

		// create TOP ToolBar
		if (!this._oToolBarTop) {

			// Label 'Adaptation Mode'
			sText = this._oRb.getText("TOOLBAR_TITLE");
			oAdaptModeLabel = new Label({
				text : sText,
				layoutData : new ToolbarLayoutData({
					shrinkable : false
				})
			});

			// Label 'Application Name'
			sText = null;
			oAppTitleLabel = new Label({
				text : sText,
				layoutData : new ToolbarLayoutData({
					shrinkable : false
				})
			});
			
			// Button 'Restore'
			sText = this._oRb.getText("BTN_RESTORE");
			this._oButtonRestore = new sap.m.Button({
				type:"Transparent",
				text : sText,
				visible: false,
				tooltip : sText,
				layoutData : new ToolbarLayoutData({
					shrinkable : false
				})
			});
			this._oButtonRestore.data("Action", "RESTORE",true);
			this._oButtonRestore.attachEvent('press', this._onRestore, this);

			// Button 'Exit'
			sText = this._oRb.getText("BTN_EXIT");
			oButtonExit = new sap.m.Button({
				type:"Transparent",
				text : sText,
				tooltip : sText,
				layoutData : new ToolbarLayoutData({
					shrinkable : false
				})
			});
			oButtonExit.data("Action", "EXIT",true);
			oButtonExit.attachEvent('press', this.close, this);
			
			// Button 'Transport'
			sText = this._oRb.getText("BTN_TRANSPORT");
			this._oButtonTransport = new sap.m.Button({
				type:"Transparent",
				text : "Transport",
				visible : false,
				tooltip : sText,
				layoutData : new ToolbarLayoutData({
					shrinkable : false
				})
			});
			this._oButtonTransport.data("Action", "TRANSPORT", true);
			this._oButtonTransport.attachEvent('press', this._onTransport, this);
			// Space between Toolbar Elements
			oLeftSpacer = new ToolbarSpacer();
			oRightSpacer = new ToolbarSpacer();

			//create Toolbar
			this._oToolBarTop = new Toolbar({
				active : true,
				content : [
							oAdaptModeLabel,
							oLeftSpacer,
							oAppTitleLabel,
							oRightSpacer,
							this._oButtonRestore,
							this._oButtonTransport,
							oButtonExit
				]
			});

			this._oToolBarTop.addStyleClass("sapUiRTAToolBarTop");
			this.addToolbar(this._oToolBarTop);
		}

		// create Botttom ToolBar
		if (!this._oToolBarBottom) {
			//create Toolbar (empty so far)
			this._oToolBarBottom = new Toolbar({
				active : true,
				content : []
			});

			this._oToolBarBottom.addStyleClass("sapUiRTAToolBarBottom");
			this.addToolbar(this._oToolBarBottom);
		}

		this.placeAt(sap.ui.getCore().getStaticAreaRef());

	};
	
	ToolsMenu.prototype._onTransport = function() {
		this.fireTransport();
	};
	
	/**
	 * Check if the transports are available,
	 * transports are available in non-productive systems
	 * and no merge errors has occoured
	 * currently set's the visibility for Transport and Restore button
	 * @private
	 * @returns {Promise}
	 */
	ToolsMenu.prototype._checkTransportAvailable = function() {
		var that = this;
		return FlexSettings.getInstance(Utils.getComponentClassName(this._oRootControl)).then(function(oSettings) {
			if (!oSettings.isProductiveSystem() && !oSettings.hasMergeErrorOccured()) {
				that._oButtonTransport.setVisible(true);
				that._oButtonRestore.setVisible(true);
			}
		});
	};

	/**
	 * Makes the Toolbars visible
	 * @public
	 */
	ToolsMenu.prototype.show = function() {
		this._oToolBarTop.addStyleClass("sapUiRTAToolBarTopVisible");
		this._oToolBarTop.removeStyleClass("sapUiRTAToolBarTopInvisible");
		this._oToolBarBottom.addStyleClass("sapUiRTAToolBarBottomVisible");
		this._oToolBarBottom.removeStyleClass("sapUiRTAToolBarBottomInvisible");		
	};

	/**
	 * Makes the Toolbars invisible
	 * @public
	 */
	ToolsMenu.prototype.hide = function() {
		this._oToolBarTop.addStyleClass("sapUiRTAToolBarTopInvisible");
		this._oToolBarBottom.addStyleClass("sapUiRTAToolBarBottomInvisible");
	};

	/**
	 * Discard all the LREP changes and restore the default app state
	 * @private
	 */
	ToolsMenu.prototype._onRestore = function() {

		this.fireRestore();
	};
	
	/**
	 * Closing the ToolsMenu
	 * @public
	 */
	ToolsMenu.prototype.close = function() {
		var that = this;
		var oToolBarDOM = document.getElementsByClassName("sapUiRTAToolBarBottom")[0];
		var fnAnimationEnd = function() {
			that.fireClose();
		};

		// all types of CSS3 animationend events for different browsers
		oToolBarDOM.addEventListener("webkitAnimationEnd", fnAnimationEnd);
		oToolBarDOM.addEventListener("animationend", fnAnimationEnd);
		oToolBarDOM.addEventListener("oanimationend", fnAnimationEnd);

		this.hide();
	};

	/**
	 * Set the Application Title
	 * @param {string} sTitle Application Title
	 * @public
	 */
	// Method for setting the Application Title 
	ToolsMenu.prototype.setTitle = function(sTitle) {
		var oLabel = this._oToolBarTop.getContent()[2];
		oLabel.setText(sTitle);
	};
	
	/**
	 * Set the root control
	 * @param {sap.ui.core.Control} oControl - SAPUI5 control
	 * @public
	 */
	ToolsMenu.prototype.setRootControl = function(oControl) {
		this._oRootControl = oControl;
	};
	
	/**
	 * Adapt the visibility of the buttons in the ToolsMenu
	 * depending on which features the system offers
	 * @private
	 */
	ToolsMenu.prototype.adaptButtonsVisibility = function() {
		// Transport & Restore Button
		this._checkTransportAvailable();
	};

	return ToolsMenu;

}, /* bExport= */ true);

}; // end of sap/ui/rta/ToolsMenu.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.changeHandler.HandlerController') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

jQuery.sap.declare('sap.ui.rta.changeHandler.HandlerController'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.ChangeRegistry'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.registry.SimpleChanges'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/changeHandler/HandlerController",[	"jquery.sap.global", 
				"sap/ui/rta/changeHandler/Move", 
				"sap/ui/rta/changeHandler/Property", 
				"sap/ui/rta/changeHandler/AddControl", 
				"sap/ui/fl/registry/ChangeRegistry", 
				"sap/ui/fl/registry/SimpleChanges"], 
function(		jQuery, 
				Move, 
				Property, 
				AddControl, 
				ChangeRegistry, 
				simpleChanges) {
	"use strict";

	simpleChanges.move = {
		changeType: "move",
		changeHandler: Move
	};

	simpleChanges.property = {
		changeType: "property",
		changeHandler: Property
	};
	
	simpleChanges.addControl = {
			changeType: "addControl",
			changeHandler: AddControl
	};

	var oChangeRegistry = ChangeRegistry.getInstance();
	var aSupportedSimpleChanges = [ 
				                    simpleChanges.move, 
				                    simpleChanges.property, 
				                    simpleChanges.addControl, 
				                    simpleChanges.hideControl, 
				                    simpleChanges.unhideControl
			                      ];
	
	oChangeRegistry.registerControlsForChanges({
	   "sap.m.Button" : aSupportedSimpleChanges,
	   "sap.m.ObjectStatus" : aSupportedSimpleChanges,
	   "sap.m.ObjectHeader" : aSupportedSimpleChanges,
	   "sap.m.ObjectAttribute" : aSupportedSimpleChanges
	});
	
});

}; // end of sap/ui/rta/changeHandler/HandlerController.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.FieldRepository') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides control sap.ui.rta.FieldRepository
jQuery.sap.declare('sap.ui.rta.FieldRepository'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
jQuery.sap.require('sap.ui.commons.Label'); // unlisted dependency retained
jQuery.sap.require('sap.ui.commons.LabelDesign'); // unlisted dependency retained
jQuery.sap.require('sap.ui.commons.Dialog'); // unlisted dependency retained
jQuery.sap.require('sap.ui.commons.TextView'); // unlisted dependency retained
jQuery.sap.require('sap.ui.commons.CheckBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.Table'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.SelectionMode'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.SelectionBehavior'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.NavigationMode'); // unlisted dependency retained
jQuery.sap.require('sap.ui.core.HorizontalAlign'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.VerticalLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.layout.HorizontalLayout'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.json.JSONModel'); // unlisted dependency retained
jQuery.sap.require('sap.m.SearchField'); // unlisted dependency retained
jQuery.sap.require('sap.m.Button'); // unlisted dependency retained
jQuery.sap.require('sap.m.Toolbar'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.Filter'); // unlisted dependency retained
jQuery.sap.require('sap.ui.model.FilterOperator'); // unlisted dependency retained
jQuery.sap.require('sap.ui.table.SortOrder'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/FieldRepository",['jquery.sap.global',
			'./library',
			'sap/ui/core/Control',
			'sap/ui/commons/Label',
			'sap/ui/commons/LabelDesign',
			'sap/ui/commons/Dialog',
			'sap/ui/commons/TextView',
			'sap/ui/commons/CheckBox',
			'sap/ui/table/Table',
			'sap/ui/table/SelectionMode',
			'sap/ui/table/SelectionBehavior',
			'sap/ui/table/NavigationMode',
			'sap/ui/core/HorizontalAlign',
			'sap/ui/layout/VerticalLayout',
			'sap/ui/layout/HorizontalLayout',
			'sap/ui/model/json/JSONModel',
			'sap/m/SearchField',
			'sap/m/Button',
			'sap/m/Toolbar',
			'sap/ui/model/Filter',
			'sap/ui/model/FilterOperator',
			'sap/ui/table/SortOrder',
			'./Utils',
			'sap/ui/rta/FlexAdapter',
			'./ModelConverter'
			],
	function(jQuery,
			library,
			Control,
			Label,
			LabelDesign,
			Dialog,
			TextView,
			CheckBox,
			Table,
			SelectionMode,
			SelectionBehavior,
			NavigationMode,
			HorizontalAlign,
			VerticalLayout,
			HorizontalLayout,
			JSONModel,
			SearchField,
			Button,
			Toolbar,
			Filter,
			FilterOperator,
			SortOrder,
			Utils,
			FlexAdapter,
			ModelConverter
	) {
	"use strict";

	/**
	* Constructor for a new sap.ui.rta.FieldRepository control.
	*
	* @class
	* Context - Dialog for Field Repository in Runtime Authoring
	* @extends sap.ui.core.Control
	*
	* @author SAP SE
	* @version 1.32.7
	*
	* @constructor
	* @private
	* @since 1.30
	* @alias sap.ui.rta.FieldRepository
	* @experimental Since 1.30. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	*/
	var FieldRepository = Control.extend("sap.ui.rta.FieldRepository", {
		metadata : {
			library : "sap.ui.rta",
			properties : {
			},
			associations : {
				/** The root control which the runtime authoring should handle */
				"rootControl" : {
					type : "sap.ui.core.Control"
				}
			},
			events : {
				"opened" : {},
				"closed" : {},
				"openCustomField" : {}
			}
		}
	});

	/**
	 * Initialize the context menu
	 * 
	 * @private
	 */
	FieldRepository.prototype.init = function() {
		this._aData = [];
		this._aSupportedControls = [sap.ui.comp.smartform.SmartForm, sap.ui.comp.smartform.Group];
		this._oModel = new JSONModel();
		// Get messagebundle.properties for sap.ui.rta
		this._oRb = sap.ui.getCore().getLibraryResourceBundle("sap.ui.rta");

		this._bAscendingSortOrder = true;
		
		var oOKButton = new Button({
			text : this._oRb.getText("BTN_FREP_OK"),
			press : [this.closeDialog, this]
		});
		
		this._oCustomFieldButton = new Button({
			text : this._oRb.getText("BTN_FREP_CCF"),
			enabled : false,
			press : [this._redirectToCustomFieldCreation, this]
		});
		
		this._oInput =  new SearchField({
			width : "100%",
			liveChange : [this._updateModelFilter, this]
		}).addStyleClass("resourceListIF");
		
		var oResortButton = new Label({
			icon : "sap-icon://sort"
		}).attachBrowserEvent("mousedown", jQuery.proxy(this._resortTable, this));
		
		this.oInputFields = new Toolbar({
			content: [this._oInput, oResortButton]
		});
		
		var oFieldName = new Label({
			design: LabelDesign.Bold, 
			tooltip: {
				parts: [
				        {path: "quickInfo"},
				        {path: "fieldLabel"}
				],
				formatter: function(quickInfo, fieldLabel) {
					if (!quickInfo) {
						return fieldLabel;
					}
					return quickInfo;
				}
			},
			text: "{fieldLabel}"
		});
		var oNameAndEntityTypeCell = new HorizontalLayout({
			content: [oFieldName]
		});
		var oCombinedField = new VerticalLayout({
			content: [oNameAndEntityTypeCell]
		});

		var oCheckBox = new CheckBox({
			change : [this._fnSelected, this]
		}).bindProperty("checked", "checked");

		this._oTable = new Table({ 
			selectionMode: SelectionMode.None,
			selectionBehavior : SelectionBehavior.RowOnly,
			selectedIndex : -1,
			columnHeaderVisible : false,
			columns : [
				{
					template: oCheckBox,
					width : "15%",
					hAlign : HorizontalAlign.Center
				},{
					template: oCombinedField,
					width : "85%",
					sortProperty: "fieldLabel",
					hAlign : HorizontalAlign.Left
				}
			]
		});
		
		this._oModel.setData({modelData: this._aData});
		this._oTable.setModel(this._oModel);
		this._oTable.bindRows("/modelData");
		this._oTable.sort(this._oTable.getColumns()[1], (this._bAscendingSortOrder) ? SortOrder.Ascending : SortOrder.Descending);
		
		this._oDialog = new Dialog({
			title : this._oRb.getText("HEADER_FREP"),
			buttons : [ this._oCustomFieldButton, oOKButton ],
			content : [ this.oInputFields, this._oTable ],
			width : "400px",
			modal : true,
			closed : [this._revertChanges, this]
		}).addStyleClass("sapUIRtaFieldRepositoryDialog");
		
		this._oDialog.setInitialFocus(this._oInput);
		
		
	};
	
	/**
	 * Resort the table
	 * @param  {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	FieldRepository.prototype._resortTable = function(oEvent) {
		this._bAscendingSortOrder = !this._bAscendingSortOrder;
		this._oTable.sort(this._oTable.getColumns()[1], (this._bAscendingSortOrder) ? SortOrder.Ascending : SortOrder.Descending);
	};
	
	/**
	 * Fire an event to redirect to custom field creation
	 * @param  {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	FieldRepository.prototype._redirectToCustomFieldCreation = function(oEvent) {
		this.fireOpenCustomField();
		this._oDialog.close();
	};

	/**
	 * Enables the Custom Field Creation button
	 * @param {boolean} bShowCCF true shows the button, false not
	 */
	FieldRepository.prototype.setShowCreateCustomField = function(bShowCCF) {
		this._oCustomFieldButton.setEnabled(bShowCCF);
	};

	/**
	 * Updates the model on filter events
	 * @param  {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	FieldRepository.prototype._updateModelFilter = function(oEvent) {
		var sValue = oEvent.getParameter("newValue");
		var oBinding = this._oTable.getBinding("rows");

		if (sValue !== "") {
			var oFilterLabel = new Filter("fieldLabel", FilterOperator.Contains, sValue);
			var oFilterQuickInfo = new Filter("quickInfo", FilterOperator.Contains, sValue);
			var oFilterLabelOrInfo = new Filter({ filters: [oFilterLabel, oFilterQuickInfo], and: false });
			oBinding.filter([oFilterLabelOrInfo]);
		} else {
			oBinding.filter([]);
		}
	};

	/**
	 * Revert all collected changes and close the dialog
	 * @private
	 */
	FieldRepository.prototype._revertChanges = function() {
		for (var i = 0; i < this._aChangeData.length; i++) {
			var oChangeData = this._aChangeData[i];
			if (oChangeData.controlId) {
				var oControl = sap.ui.getCore().byId(oChangeData.controlId);
				if (oChangeData.changeType === "hideControl") {
					this._oFlexAdapter.emitHideEvent(oControl);
				} else {
					this._oFlexAdapter.emitUnhideEvent(oControl);
				}
			}
		}
		this._oCurrentSelectedBlock.rerender();
		this._oDialog.close();
	};

	/**
	 * Initialize the change data list and close the dialog
	 */
	FieldRepository.prototype.closeDialog = function() {
		this._aChangeData = [];
		this._oDialog.close();
	};

	/**
	 * Function to be called when a field is selected in list
	 * @param  {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	FieldRepository.prototype._fnSelected = function(oEvent) {
		var oChangeData = this._createChangeData(oEvent.getSource(), oEvent.mParameters.checked);
		if (oChangeData.exists){
			this._oFlexAdapter.emitUnhideEvent(sap.ui.getCore().byId(oChangeData.newControlId));
		} else if (oChangeData.selectorId && oChangeData.changeType === FlexAdapter.M_TYPES.addField ) {
			this._oFlexAdapter.emitAddEvent(oChangeData, FlexAdapter.M_TYPES.addField);
		} else if (!oEvent.mParameters.checked) {
			this._oFlexAdapter.emitHideEvent(sap.ui.getCore().byId(oChangeData.controlId));
		}
	};

	/*
	 * Creates an array of change data to be passed to FlexController
	 * @param  {Object} oControl The currently checked or unchecked object containing the binding information
	 * @return {Array} aChangeData
	 * @private
	 */
	FieldRepository.prototype._createChangeData = function(oControl, bShowControl) {
		var oChangeData = {};
		var oBindingContextObject = oControl.getBindingContext().getObject();
		var sControldId = oBindingContextObject.controlId ? oBindingContextObject.controlId : this._oCurrentSelectedBlock.getId() + "_" + oBindingContextObject.entityName + "_" + oBindingContextObject.name;
		var sBindingPath = oBindingContextObject.complexTypeName ? oBindingContextObject.complexTypeName + "/" + oBindingContextObject.name : oBindingContextObject.name;
		if (bShowControl) {
			var bControlExistsInDom = sap.ui.getCore().byId(sControldId);
			if (this._oCurrentSelectedBlock) {
				var oGroup;
				if (this._oCurrentSelectedBlock instanceof sap.ui.comp.smartform.Group) {
					oGroup = this._oCurrentSelectedBlock;
				} else {
					oGroup = this._oCurrentSelectedBlock.getGroups()[0];
				}
				oChangeData = {
					exists : bControlExistsInDom,
					newControlId : sControldId,
					jsType : "sap.ui.comp.smartfield.SmartField",
					selectorId : oGroup.getId(),
					index : oGroup.getGroupElements().length + 1,
					valueProperty : "value",
					changeType: FlexAdapter.M_TYPES.addField,
					fieldLabel : oBindingContextObject.fieldLabel,
					fieldValue : sBindingPath
				};
			}
			this._aChangeData.push({controlId: sControldId, changeType: "hideControl"});
		} else {
			oChangeData = {
				controlId :  sControldId,
				changeType : "unhideControl"
			};
			this._aChangeData.push(oChangeData);
		}
		return oChangeData;
	};

	/**
	 * Open the Field Repository Dialog
	 * @param  {sap.ui.core.Control} oControl Currently selected control
	 */
	FieldRepository.prototype.open = function(oControl) {
		var that = this;
		this._aChangeData = [];
		if (!this._oFlexAdapter) {
			this._oFlexAdapter = new FlexAdapter();
			this._oFlexAdapter.init(sap.ui.getCore().byId(this.getRootControl()));
		}
		this._oCurrentSelectedControl = oControl;
		this._oCurrentSelectedBlock = Utils.findSupportedBlock(oControl, this._aSupportedControls);
		if (that._oCurrentSelectedBlock) {
			that._createRepositoryFields(that._oCurrentSelectedBlock);
			that._oDialog.oPopup.attachOpened(function (){
				that.fireOpened();
			});
			that._oDialog.open();
		}
	};
	
	/**
	 * Get the ignored fields which should not be displayed in the
	 * field repository, currently only Smartforms are supported
	 * @param {sap.ui.comp.smartform.SmartForm} oSmartForm Currently selected Smartform
	 * @private
	 */
	FieldRepository.prototype._getIgnoredFields = function(oSmartForm) {

		if (oSmartForm) {
			var sCsvIgnoredFields = oSmartForm.getIgnoredFields();
			if (sCsvIgnoredFields) {
				var aIgnoredFields = sCsvIgnoredFields.split(",");
				return aIgnoredFields;
			}
		}
		
		return [];
	};

	/**
	 * Calculate repository fields based on model and displayed data
	 * @param  {sap.ui.core.Control} oControl Currently selected control
	 * @private
	 */
	FieldRepository.prototype._createRepositoryFields = function(oControl) {
		var vEntityType = [];
		var oControl = Utils.getClosestTypeForControl(oControl, "sap.ui.comp.smartform.SmartForm");
		var that = this;
		vEntityType = oControl.getEntityType();

		if (vEntityType) {
			vEntityType = vEntityType.replace(/\s+/g, '').match(/([^,]+)/g);
		}

		ModelConverter.getConvertedModelWithBoundAndRenamedLabels(oControl, vEntityType).then(function(oFieldModel) {
			that._oModel.setData({modelData: oFieldModel});
		});
	};

	/**
	 * Closes the dialog
	 */
	FieldRepository.prototype.close = function() {
		var that = this; 
		this._oDialog.close();
		this._oDialog.attachClosed(function (){
			that.fireClosed();
		});
	};

	return FieldRepository;

}, /* bExport= */ true);
}; // end of sap/ui/rta/FieldRepository.js
if ( !jQuery.sap.isDeclared('sap.ui.rta.RuntimeAuthoring') ) {
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5)

(c) Copyright 2009-2015 SAP SE. All rights reserved
 */

// Provides class sap.ui.rta.Main.
jQuery.sap.declare('sap.ui.rta.RuntimeAuthoring'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.base.ManagedObject'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartform.flexibility.FormP13nHandler'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.Preloader'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.ElementUtil'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.DesignTime'); // unlisted dependency retained
jQuery.sap.require('sap.ui.dt.OverlayRegistry'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Transports'); // unlisted dependency retained
jQuery.sap.require('sap.ui.fl.Utils'); // unlisted dependency retained
jQuery.sap.require('sap.m.MessageBox'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartform.GroupElement'); // unlisted dependency retained
jQuery.sap.require('sap.ui.comp.smartform.Group'); // unlisted dependency retained
sap.ui.define("sap/ui/rta/RuntimeAuthoring",[
	'sap/ui/base/ManagedObject', 
	'sap/ui/rta/ToolsMenu',
	'sap/ui/rta/ContextMenu', 
	'sap/ui/comp/smartform/flexibility/FormP13nHandler', 
	'sap/ui/dt/Preloader',
	'sap/ui/dt/ElementUtil',
	'sap/ui/dt/DesignTime',
	'sap/ui/dt/OverlayRegistry',
	'sap/ui/rta/RTARenamePlugin',
	'sap/ui/rta/RTADragDropPlugin',
	'sap/ui/rta/FlexAdapter',
	'sap/ui/rta/FieldRepository',
	'./Utils',
	'sap/ui/fl/Transports',
	'sap/ui/fl/Utils',
	'sap/m/MessageBox',
	'sap/ui/comp/smartform/GroupElement',
	'sap/ui/comp/smartform/Group'
	],
	function(
		ManagedObject, 
		ToolsMenu, 
		ContextMenu, 
		FormP13nHandler,
		DTPreloader,
		ElementUtil,
		DesignTime,
		OverlayRegistry,
		RTARenamePlugin,
		RTADragDropPlugin,
		FlexAdapter,
		FieldRepository,
		Utils,
		Transports,
		FlexUtils,
		MessageBox,
		GroupElement,
		Group
		) {
	"use strict";

	/**
	 * Constructor for a new sap.ui.rta.RuntimeAuthoring class.
	 *
	 * @class
	 * The runtime authoring allows to adapt the fields of a running application.
	 * @extends sap.ui.core.ManagedObject
	 *
	 * @author SAP SE
	 * @version 1.32.7
	 *
	 * @constructor
	 * @public
	 * @since 1.30
	 * @alias sap.ui.rta.RuntimeAuthoring
	 * @experimental Since 1.30. This class is experimental and provides only limited functionality. Also the API might be changed in future.
	 */
	var RuntimeAuthoring = ManagedObject.extend("sap.ui.rta.RuntimeAuthoring", /** @lends sap.ui.rta.RuntimeAuthoring.prototype */{ 
		metadata : {
			// ---- control specific ----
			library : "sap.ui.rta",
			associations : {
				/** The root control which the runtime authoring should handle */
				"rootControl" : {
					type : "sap.ui.core.Control"
				}
			},
			properties : {
				/** The URL which is called when the custom field dialog is opened */ 
				"customFieldUrl" : "string",

				/** Whether the create custom field button should be shown */
				"showCreateCustomField" : "boolean"
			},
			events : {
				/** Fired when the runtime authoring is started */
				"start" : {},

				/** Fired when the runtime authoring is stopped */
				"stop" : {}
			}
		},
		_sAppTitle : null
		
	});

	/**
	 * Start Runtime Authoring
	 * @public
	 */
	RuntimeAuthoring.prototype.start = function() {
		var that = this;

		this._aPopups = [];
		
		this._oTextResources = sap.ui.getCore().getLibraryResourceBundle("sap.ui.rta");

		// Create DesignTimec
		if (!this._oDesignTime) {
			this._rootControl = sap.ui.getCore().byId(this.getRootControl());
			that._oFlexAdapter = new FlexAdapter();
			that._oFlexAdapter.init(that._rootControl);

			var aElements = sap.ui.dt.ElementUtil.findAllPublicElements(this._rootControl);
			
			this._oRTADragDropPlugin = new RTADragDropPlugin({
				draggableTypes : ["sap.ui.comp.smartform.Group", "sap.ui.comp.smartform.GroupElement"]
			});
			this._oRTADragDropPlugin.attachEvent("moveElement", this._handleMoveElement, this);
			this._oRTADragDropPlugin.attachEvent("hideElement", this._handleHideElement, this);
			this._oRTADragDropPlugin.attachEvent("openContextMenu", this._handleOpenContextMenu, this);

			this._oRenamePlugin = new RTARenamePlugin({
				editableTypes : ["sap.ui.comp.smartform.Group", "sap.ui.comp.smartform.GroupElement"]
			});
			
			sap.ui.dt.Preloader.load(aElements).then(function() {
				that._oDesignTime = new DesignTime({
					rootElements : [that._rootControl],
					plugins : [
						that._oRTADragDropPlugin,
						that._oRenamePlugin
					]
				});
				// fire Start Event
				 that.fireStart();
			});
		}

		// Create ToolsMenu
		if (!this._oToolsMenu) {
			this._sAppTitle = this._getApplicationTitle();
			this._oToolsMenu = new ToolsMenu();
			this._oToolsMenu.setTitle(this._sAppTitle);
			this._oToolsMenu.setRootControl(this._rootControl);
			this._oToolsMenu.adaptButtonsVisibility();
			this._oToolsMenu.attachEvent('close', this.stop, this);
			this._oToolsMenu.attachEvent('transport', this._onTransport, this);
			this._oToolsMenu.attachEvent('restore', this._onRestore, this);
		}

		//Keyboard support
		this._fnOnKeyDown = this._onKeyDown.bind(this);
		jQuery(document).keydown(this._fnOnKeyDown);

		//set focus initially on top toolbar
		var oDelegate = {
			"onAfterRendering" : function() {
				this._oToolsMenu._oToolBarTop.focus();
				this._oToolsMenu._oToolBarTop.removeEventDelegate(oDelegate, this);
			}
		};
		this._oToolsMenu._oToolBarTop.addEventDelegate(oDelegate, this);
		
		this._openPopup = sap.ui.core.Popup.prototype.open;
		sap.ui.core.Popup.prototype.open = function () {
			if (that._aPopups.indexOf(this) === -1) {
				that._aPopups.push(this);
			}
			jQuery(document).unbind("keydown",that._fnOnKeyDown);
			var args = Array.prototype.slice.call(arguments);
			that._openPopup.apply(this, args);
		};
		
		this._closePopup = sap.ui.core.Popup.prototype.close;
		sap.ui.core.Popup.prototype.close = function () {
			var iIndex = that._aPopups.indexOf(this);
			if (iIndex !== -1) {
				that._aPopups.splice(iIndex, 1);
				if (that._aPopups.length === 0) {
					jQuery(document).keydown(that._fnOnKeyDown);
				}
			}
			var args = Array.prototype.slice.call(arguments);
			that._closePopup.apply(this, args);
		};
		
		// Show Toolbar(s)
		this._oToolsMenu.show();
	};

	/**
	 * Stop Runtime Authoring	
	 * @public
	 */
	RuntimeAuthoring.prototype.stop = function() {
		this.exit();
		// fire Stop Event
		this.fireStop();
	};

	/**
	 * Exit Runtime Authoring - destroy all controls
	 * @protected
	 */
	RuntimeAuthoring.prototype.exit = function() {
		if (this._oToolsMenu) { 
			this._oToolsMenu.destroy();
			this._oToolsMenu = null;
		}
		if (this._oFlexAdapter) {
			this._oFlexAdapter.destroy();
		}
		if (this._oDesignTime) {
			this._oDesignTime.destroy();
			this._oDesignTime = null;
		}
		if (this._fnOnKeyDown) {
			jQuery(document).unbind("keydown",this._fnOnKeyDown);
			this._fnOnKeyDown = null;
		}
		sap.ui.core.Popup.prototype.open = this._openPopup;
		sap.ui.core.Popup.prototype.close = this._closePopup;
	};

	/**
	 * Function to handle keyboard events
	 * @private
	 */
	RuntimeAuthoring.prototype._onKeyDown = function(oEvent) {
		// Handle keyboard Tab key
		if ((oEvent.keyCode === jQuery.sap.KeyCodes.TAB) && (oEvent.shiftKey === false) && (oEvent.altKey === false) && (oEvent.ctrlKey === false)) {
			oEvent.preventDefault();
			this._focusNextElement();

		// Handle keyboard Shift + Tab key	
		} else if ((oEvent.keyCode === jQuery.sap.KeyCodes.TAB) && (oEvent.shiftKey === true) && (oEvent.altKey === false) && (oEvent.ctrlKey === false)) {
			oEvent.preventDefault();
			this._focusPrevElement();			
		}
	};

	/**
	 * Function to handle keyboard Tab key
	 * @private
	 */
	RuntimeAuthoring.prototype._focusNextElement = function() {
		var sFocusedElement = this._checkCurrentFocusedElement();

		if (sFocusedElement === "NOT RTA") {
			this._oToolsMenu._oToolBarTop.focus();
		} else if (sFocusedElement === "OVERLAY") {			
			this._handleNextOverlay();
		} else if (sFocusedElement.indexOf("TB") !== -1) {
			this._handleNextTbElement();
		}
	};
	
	/**
	 * Function to handle keyboard Shift + Tab key
	 * @private
	 */
	RuntimeAuthoring.prototype._focusPrevElement = function() {
		var sFocusedElement = this._checkCurrentFocusedElement();
		
		if (sFocusedElement === "NOT RTA") {
			this._oToolsMenu._oToolBarTop.focus();
		} else if (sFocusedElement === "OVERLAY") {
			this._handlePrevOverlay();
		} else if (sFocusedElement === "TOP TB") {
			this._handlePrevTbElement();
		} else if (sFocusedElement === "BOTTOM TB") {
			this._handlePrevOverlay();
		} else if (sFocusedElement === "TOP TB ELEMENT") {
			this._handlePrevTbElement();
		} else if (sFocusedElement === "BOTTOM TB ELEMENT") {
			this._handlePrevTbElement();
		}	
	};
	
	/**
	 * Function to determine current focused element
	 * @private
	 */
	RuntimeAuthoring.prototype._checkCurrentFocusedElement = function() {
		var sElement;
		var oElement = document.activeElement;
		
		this._aTbTopElements = this._oToolsMenu._oToolBarTop.getContent();
		var aTbTopElementIds = [];

		for (var i = this._aTbTopElements.length - 1; i >= 0; i--) {
			if (this._aTbTopElements[i].getId().indexOf("spacer") > -1) {
				this._aTbTopElements.splice(i, 1);
			}
		}

		var iTopElements = this._aTbTopElements.length;
		for (i = 0; i < iTopElements; i++) {
			aTbTopElementIds[i] = this._aTbTopElements[i].getId();
		}

		this._aTbBottomElements = this._oToolsMenu._oToolBarBottom.getContent();
		var aTbBottomElementIds = [];
		
		for (i = this._aTbBottomElements.length - 1; i >= 0; i--) {
			if (this._aTbBottomElements[i].getId().indexOf("spacer") > -1) {
				this._aTbBottomElements.splice(i, 1);
			}
		}

		var iBottomElements = this._aTbBottomElements.length;
		for (i = 0; i < iBottomElements; i++) {
			aTbBottomElementIds[i] = this._aTbBottomElements[i].getId();
		}

		var iActiveTopElement = aTbTopElementIds.indexOf(oElement.id);
		var iActiveBottomElement = aTbBottomElementIds.indexOf(oElement.id);
			
		// current focus is on overlay
		if ((oElement.getAttribute("class")) && (oElement.getAttribute("class").search("sapUiDtOverlay") > -1)) {
			this._sArea = "OVERLAY";
			sElement = "OVERLAY";
			return sElement;
		// current focus is on top toolbar
		} else if ((oElement.getAttribute("class")) && (oElement.getAttribute("class").search("sapUiRTAToolBarTop") > -1)) {
			this._sArea = "TOP";
			this._iActive = -1;
			this._aElements = this._aTbTopElements;
			sElement = "TOP TB";
			return sElement;
		// current focus is on bottom toolbar
		} else if ((oElement.getAttribute("class")) && (oElement.getAttribute("class").search("sapUiRTAToolBarBottom") > -1)) {
			this._sArea = "BOTTOM";
			this._iActive = -1;
			this._aElements = this._aTbBottomElements;
			sElement = "BOTTOM TB";
			return sElement;
		// current focus is on top toolbar element
		} else if (iActiveTopElement > -1) {
			this._sArea = "TOP";
			this._iActive = iActiveTopElement;
			this._aElements = this._aTbTopElements;
			sElement = "TOP TB ELEMENT";
			return sElement;
		// current focus is on bottom toolbar element
		} else if (iActiveBottomElement > -1) {
			this._sArea = "BOTTOM";
			this._iActive = iActiveBottomElement;
			this._aElements = this._aTbBottomElements;
			sElement = "BOTTOM TB ELEMENT";
			return sElement;
		// current focus is NOT on an RTA element
		} else {
			sElement = "NOT RTA";
			return sElement;
		}
	};

	/**
	 * Function to loop over toolbar elements
	 * @private
	 */
	RuntimeAuthoring.prototype._loopOverTbElements = function(bReverse, iStart) {	
		for (var iElem = iStart, 
				 iEnd = (bReverse) ? -1 : this._aElements.length, 
				 iCount = (bReverse) ? -1 : 1;
				 iElem != iEnd; iElem += iCount) {

			this._aElements[iElem].focus();
			if (this._aElements[iElem].getId() === document.activeElement.id) {
				break;
			}
			if (iElem === iEnd - iCount) {
				if (!bReverse) {
					(this._sArea === "TOP") ? this._handleNextOverlay() : this._oToolsMenu._oToolBarTop.focus();
				} else {
					if (((this._sArea === "TOP") && (this._iActive === -1)) || (this._sArea === "OVERLAY")) {
						this._oToolsMenu._oToolBarBottom.focus();
					} else if (((this._sArea === "TOP") && (this._iActive > 0)) || (this._sArea === "BOTTOM")) {
						this._oToolsMenu._oToolBarTop.focus();
					}
				}
			}
		}
	};	

	/**
	 * Function to set the focus on the next element after a focused toolbar element
	 * @private
	 */
	RuntimeAuthoring.prototype._handleNextTbElement = function() {
		if (this._iActive === this._aElements.length - 1) {
			(this._sArea === "TOP") ? this._handleNextOverlay() : this._oToolsMenu._oToolBarTop.focus();
		} else {
			this._loopOverTbElements(false, this._iActive + 1);
		}
	};

	/**
	 * Function to set the focus on the previous element before a focused toolbar element
	 * @private
	 */
	RuntimeAuthoring.prototype._handlePrevTbElement = function() {
		if (this._sArea === "TOP") {
			switch (this._iActive) {
				case -1:
					this._aElements = this._aTbBottomElements;
					if (this._aElements.length === 0) {
						this._oToolsMenu._oToolBarBottom.focus();
					} else {
						this._loopOverTbElements(true, this._aElements.length - 1);
					}
					break;
				case 0:
					this._oToolsMenu._oToolBarTop.focus();
					break;
				default:
					this._loopOverTbElements(true, this._iActive - 1);
			}				
		} else if (this._sArea === "OVERLAY") {
			this._aElements = this._aTbTopElements;
			if (this._aElements.length === 0) {
				this._oToolsMenu._oToolBarTop.focus();
			} else {
				this._loopOverTbElements(true, this._aElements.length - 1);
			}
		} else if (this._sArea === "BOTTOM") {
			this._loopOverTbElements(true, this._aElements.length - 1);
		}
	};	
		
	/**
	 * Function to set the focus on the next element after a focused overlay
	 * @private
	 */
	RuntimeAuthoring.prototype._handleNextOverlay = function() {
		var oOverlay;
		if (this._sArea === "TOP") {
			oOverlay = Utils.getFirstFocusableOverlay();
			(oOverlay) ? oOverlay.focus() : this._oToolsMenu._oToolBarBottom.focus();
		} else if (this._sArea === "OVERLAY") {
			oOverlay = Utils.getNextFocusableOverlay();
			(oOverlay) ? oOverlay.focus() : this._oToolsMenu._oToolBarBottom.focus();
		}
	};

	/**
	 * Function to set the focus on the previous element before a focused overlay
	 * @private
	 */
	RuntimeAuthoring.prototype._handlePrevOverlay = function() {
		var oOverlay;
		if (this._sArea === "BOTTOM") {
			oOverlay = Utils.getLastFocusableOverlay();
			if (oOverlay) {
				oOverlay.focus();
			} else {
				this._sArea = "OVERLAY";
				this._handlePrevTbElement();
			}
		} else if (this._sArea === "OVERLAY") {
			oOverlay = Utils.getPreviousFocusableOverlay();
			(oOverlay) ? oOverlay.focus() : this._handlePrevTbElement();
		}
	};
		
	/**
	 * Function to handle abap transport
	 * @private
	 */
	RuntimeAuthoring.prototype._onTransport = function() {
		
		this._ensureFormP13Handler();

		// To get all changes
		this._handler._oSmartForm = this._rootControl;
		var that = this;
		
		function handleCreateAndApplyChangesErrors(oError) {
			FlexUtils.log.error("SmartForm changes could not be applied or saved: " + oError);
			return that._handler._showApplySaveChangesErrorMessage(oError).then(function() {
				throw new Error('createAndApply failed');
			});
		}
		
		function handleAllErrors(oError) {
			if (oError.message === 'createAndApply failed') {
				return;
			}
			FlexUtils.log.error("transport error" + oError);
			return that._handler._showTransportErrorMessage(oError);
		}

		return this._handler._getFlexController().getComponentChanges().then(function(oChanges) {
			 return that._handler._convertToChangeArray(oChanges);
		}).then(function(aAllLocalChanges) {
			if (aAllLocalChanges.length > 0) {
				return that._handler._createAndApplyChanges(aAllLocalChanges);
			}
		})['catch'](handleCreateAndApplyChangesErrors).then(function() {
			return that._handler._getFlexController().getComponentChanges();
		}).then(function(aAllLocalChanges) {
			return !!aAllLocalChanges.length;
		}).then(function(bShouldTransport) {
			if (bShouldTransport) {
				return that._handler._openTransportSelection(null, true);
			} else {
				return that._handler._showTransportInapplicableMessage();
			}
		}).then(function(oTransportInfo) {
			if (oTransportInfo && oTransportInfo.transport && oTransportInfo.packageName !== "$TMP") {
				return that._transportAllLocalChanges(oTransportInfo);
			}
		})['catch'](handleAllErrors);
		 
	};

	/**
	 * Delete the changes for the whole application
	 * copied from FormP13Handler
	 * adapted that all the changes are deleted,
	 * not only those from the current SmartForm
	 * @private
	 * @param   {Array} aChanges - the changes of the whole application
	 * @returns {Promise} a Promise which handles the deletion
	 */
	RuntimeAuthoring.prototype._deleteChanges = function(aChanges) {
		
		var that = this;
		
		var oFlexController = that._handler._getFlexController();

		var iChangeIdx = aChanges.length - 1;
		return this._handler._setTransports(aChanges, iChangeIdx).then(function() {
			return oFlexController.discardChanges(aChanges);
		}).then(function() {
			return that._handler._showDiscardSuccessMessage();
		})["catch"](function(oError) {
			return that._handler._showDiscardErrorMessage(oError);
		});
	};
	
	/**
	 * Ensure that we have a FormP13Handler
	 * which is needed for example for transports and restoring
	 */
	RuntimeAuthoring.prototype._ensureFormP13Handler = function() {
	
		if (!this._handler) {
				this._handler = new FormP13nHandler();
				this._handler.init(this._rootControl);
			}
	};
	
	/**
	 * Discard all LREP changes and restore the default app state,
	 * opens a MessageBox where the user can confirm
	 * the restoring to the default app state
	 * @private
	 */
	RuntimeAuthoring.prototype._onRestore = function() {
		
		var that = this;
		
		var sMessage = this._oTextResources.getText("FORM_PERS_RESET_MESSAGE");
		var sTitle = this._oTextResources.getText("FORM_PERS_RESET_TITLE");
		
		this._ensureFormP13Handler();
		
		function fConfirmDiscardAllChanges(sAction) {

			if (sAction === "OK") {

				var oFlexController = that._handler._getFlexController();
				
				oFlexController.getComponentChanges().then(function(oChanges) {
					
					var aChanges = that._handler._convertToChangeArray(oChanges);
					return that._deleteChanges(aChanges);
					
				})["catch"](function(oError) {
					
					return that._handler._showDiscardErrorMessage();
				});
			}
		}

		MessageBox.confirm(sMessage, {
			title: sTitle,
			onClose: fConfirmDiscardAllChanges
		});
	};
	
	/**
	 * Prepare all changes and assign them to an existing transport
	 * @private
	 * 
	 * @param {object} oTransportInfo Information about the selected transport
	 * @returns {Promise} Promise which resolves without parameters
	 */
	RuntimeAuthoring.prototype._transportAllLocalChanges = function(oTransportInfo) {
		var that = this;
		return that._handler._getFlexController().getComponentChanges().then(function(aAllLocalChanges) {
			var aTransportData = that._handler._convertToChangeTransportData(aAllLocalChanges);

			// Pass list of changes to be transported with transport request to backend
			var oTransports = new Transports();
			var oTransportParams = {};
			oTransportParams.transportId = oTransportInfo.transport;
			oTransportParams.changeIds = aTransportData;
			return oTransports.makeChangesTransportable(oTransportParams).then(function() {
				// remove the $TMP package from all changes; has been done on the server as well,
				// but is not reflected in the client cache until the application is reloaded
				aAllLocalChanges.forEach(function(oChange) {
					if (oChange.getPackage() === '$TMP') {
						var oDefinition = oChange.getDefinition();
						oDefinition.packageName = '';
						oChange.setResponse(oDefinition);
					}
				});
			}).then(function() {
				return that._handler._showTransportSuccessMessage();
			});
		});
	};
	
	/**
	 * Function to handle moveing an element
	 * @param  {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	RuntimeAuthoring.prototype._handleMoveElement = function(oEvent) {
		var oData = oEvent.getParameters();
		this._oFlexAdapter.emitMoveEvent(oData.element, oData.change);
	};

	/**
	 * Function to handle hiding an element
	 * @param  {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	RuntimeAuthoring.prototype._handleHideElement = function(oEvent) {
		var oData = oEvent.getParameters();
		var that = this;
		if (Utils.isElementHideable(oData.element)){
			this._oFlexAdapter.emitHideEvent(oData.element);
		} else {
			this._openHideElementDialog(oData.element).then(function(bResult) {
				if (bResult) {
					that._oFlexAdapter.emitHideEvent(oData.element);
				}
			});
		}
	};

	RuntimeAuthoring.prototype._openHideElementDialog = function(oElement) {
		var that = this;
		var sMessage;
		var sTitle;
		return new Promise(function(resolve, reject) {
			var fConfirmHideElement = function(sAction) {
				if (sAction === "OK") {
					resolve(true);
				} else {
					resolve(false);
				}
			};
			if (oElement instanceof Group) {
				sMessage = that._oTextResources.getText("CTX_HIDE_GROUP_MESSAGE");
				sTitle = that._oTextResources.getText("CTX_HIDE_GROUP_TITLE");
			} else if (oElement instanceof GroupElement) {
				sMessage = that._oTextResources.getText("CTX_HIDE_FIELD_MESSAGE");
				sTitle = that._oTextResources.getText("CTX_HIDE_FIELD_TITLE");
			}
			MessageBox.confirm(sMessage, {
				title: sTitle,
				icon : "WARNING",
				onClose: fConfirmHideElement
			});
		 });
	};

	/**
	 * Function to handle opening the context menu
	 * @param  {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	RuntimeAuthoring.prototype._handleOpenContextMenu = function(oEvent) {
		var oOriginalEvent = oEvent.getParameter("originalEvent");
		var oOverlay = oEvent.getParameter("overlay");

		this._oContextMenu = new ContextMenu();
		this._oContextMenu.attachEvent("renameLabel", this._handleRenameLabel, this);
		this._oContextMenu.attachEvent("hideElement", this._handleHideElement, this);
		this._oContextMenu.attachEvent("addElement", this._handleAddElement, this);
		this._oContextMenu.attachEvent("addGroup", this._handleAddGroup, this);
		this._oContextMenu.attachEvent("adaptElement", this._handleAdaptElement, this);

		var oElement = oOverlay.getElementInstance();
		this._oContextMenu.setElement(oElement);
		this._oContextMenu.setOverlayDomRef(oOverlay);

		this._oContextMenu.openMenu({
			pageX: oOriginalEvent.pageX,
			pageY: oOriginalEvent.pageY
		});
	};

	/**
	 * Function to handle renaming a label
	 * @param  {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	RuntimeAuthoring.prototype._handleRenameLabel = function(oEvent) {
		var oOverlay = OverlayRegistry.getOverlay(oEvent.getParameter("element").getId());
		this._oRenamePlugin.setEditMode(oOverlay);
	};
	
	/**
	 * Function to handle adding an element
	 * @param  {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	RuntimeAuthoring.prototype._handleAddElement = function(oEvent) {
		var oElement = oEvent.getParameter("element");
		if (!this._oFieldRepository) {
			this._oFieldRepository = new FieldRepository({rootControl : this._rootControl});
			this._oFieldRepository.attachEvent("openCustomField", this._onOpenCustomField, this);
		}
		this._openFieldRepository(oElement);
	};
	
	/**
	 * Function to open the field repository
	 * @param  {sap.ui.core.Element} oElement on which the dialog will be opened
	 * @private
	 */
	RuntimeAuthoring.prototype._openFieldRepository = function(oElement) {
		var that = this;
		Utils.isCustomFieldAvailable(oElement).then(function(oResult) {
			if (oResult) {
				that._oFieldRepository.setShowCreateCustomField(true);
				that._oCurrentFieldExtInfo = oResult;
			}
		});
		this._oFieldRepository.open(oElement);
	};

	/**
	 * Function to handle adding an group
	 * @param  {sap.ui.base.Event} oEvent event object
	 * @private
	 */
	RuntimeAuthoring.prototype._handleAddGroup = function(oEvent) {
		var iIndex = 0;
		var that = this;
		var oData = oEvent.getParameters();
		var oTargetElement = oData.element;
		var oChange = null;
		
		if (oTargetElement.getMetadata().getName() === "sap.ui.comp.smartform.Group") {
			var aGroups = oTargetElement.getParent().getAggregation("formContainers");
			for (var i = 0; i < aGroups.length; i++) {
				if (aGroups[i].getId() === oTargetElement.getId()) {
					iIndex = i + 1;
					break;
				}
			}
			oChange = this._oFlexAdapter.emitAddEvent({
				selectorId : oTargetElement.getParent().getParent().getId(),
				index : iIndex
			}, FlexAdapter.M_TYPES.addGroup);
		} else if (oTargetElement.getMetadata().getName() === "sap.ui.comp.smartform.SmartForm") {
			iIndex = 0;
			oChange = this._oFlexAdapter.emitAddEvent({
				selectorId : oTargetElement.getId(),
				index : iIndex
			}, FlexAdapter.M_TYPES.addGroup);
		}
		var oOverlay = OverlayRegistry.getOverlay(oChange.newControlId);
		oOverlay.setSelected(true);
		var oDelegate = {"onAfterRendering": function(){
			that._oRenamePlugin.setEditMode(oOverlay);
			oOverlay.removeEventDelegate(oDelegate);
		}};
		oOverlay.addEventDelegate(oDelegate);
		
	};
	
	/**
	 * Function to handle to open the workaround dialog 
	 * @param  {sap.ui.core.Element} oElement
	 * @private
	 */
	RuntimeAuthoring.prototype._handleAdaptElement = function(oEvent) {
		var oElement = oEvent.getParameter("element"); 
		if (!this._handler) {
			this._handler = new FormP13nHandler();
		}
		this._handler.init(oElement);
		this._handler.show();
	};

	/**
	 * Get the Title of the Application from the manifest.json
	 * @private
	 * @returns {String} the application title or empty string
	 */
	RuntimeAuthoring.prototype._getApplicationTitle = function() {
		
		var sTitle = "";
		var oComponent = sap.ui.core.Component.getOwnerComponentFor(this._rootControl);
		if (oComponent){
			sTitle = oComponent.getMetadata().getManifestEntry("sap.app").title;
		}
		return sTitle;
	};

	return RuntimeAuthoring;

}, /* bExport= */ true);

}; // end of sap/ui/rta/RuntimeAuthoring.js
