jQuery.sap.require("sap.ui.thirdparty.datajs");
jQuery.sap.require("{{projectName}}.util.GuidGenerator");

function storeOpenSuccess() {
    console.log('Offline store opened OK');  
    sap.OData.applyHttpClient(); 
    startApp();
}

function storeOpenFailure(e) {
    console.error('Failed to create offline store: '+ e);
    alert('Failed to create offline store: '+ e);
}

function doOfflineSetup(ctx) {
  
    var properties = {
        name             : "dcodedemo",
        appcid           : ctx.applicationConnectionId,
        host             : ctx.registrationContext.serverHost,
        port             : ctx.registrationContext.serverPort,
        https            : ctx.registrationContext.https,
        serviceRoot      : ctx.applicationEndpointURL+"/",
        definingRequests : {
		{{~#if claimProcessing.parameters.AttachmentCollection.value.name}}
		{{~#if claimProcessing.parameters.AttachmentNav.value.name}}
		{{~#if claimProcessing.parameters.AttachmentContent.value.name}}
		{{~#if claimProcessing.parameters.AttachmentID.value.name}}
		{{~#if claimProcessing.parameters.AttachmentContentType.value.name}}
            items : "/{{claimProcessing.parameters.AppCollection.value.name~}}?$expand={{claimProcessing.parameters.AttachmentNav.value.name}}"
		{{~/if}}
		{{~/if}}
		{{~/if}}
		{{~/if}}
		{{~else}}
			items : "/{{claimProcessing.parameters.AppCollection.value.name~}}"
		{{~/if}}
        }
    };
	
	//TODO: If you are running the application using a proxy, add the "streamParams" property to the properties object(above) and set the //      relevant values for the proxy_host and proxy_port (below).  
	//      streamParams: "proxy_host=<Proxy Host>;proxy_port=<Proxy Port>"
    
    console.log("Creating offline store");
    devapp.store = sap.OData.createOfflineStore(properties);
    
    // Listen for optional events
    devapp.store.onrequesterror = function(error) {
       console.error("Error occurred while sending offline updates to the server. " + error);
    };
    
   this.getEncryptionKey();  
}

function getEncryptionKey() {
	var that = this;
    sap.Logon.get(function(val){
	    if(val){
			that.openStore(val);
		}else{
	        that.setEncryptionKey({{projectName}}.util.GuidGenerator.generateGuid());
		}
    }, errorCallback, "encryptionKey");
}

function setEncryptionKey(val) {
	var that = this;
    sap.Logon.set(function(){
							that.openStore(val);
							}, errorCallback, "encryptionKey", val);
}


function openStore(val){
	var options = {
		    	"storeEncryptionKey" : val
		    };
    devapp.store.open(storeOpenSuccess, storeOpenFailure, options);
    console.log('Called store open ...');
}

function errorCallback(err) {
  console.error(JSON.stringify(err));
  alert(JSON.stringify(err));
}