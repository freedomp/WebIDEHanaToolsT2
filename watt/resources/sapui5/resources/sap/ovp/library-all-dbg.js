// This file has been generated by the SAPUI5 'AllInOne' Builder
(function () {
	"use strict";
	/*global sap, jQuery */

	sap.ui.controller("sap.ovp.cards.charts.bubble.BubbleChart", {
		onInit: function () {
			var vizFrame = this.getView().byId("bubbleChartCard");
			vizFrame.setVizProperties({
				valueAxis:{
					title:{
						visible:true
					},
					label:{
						formatString:"yValueAxisFormatter"
					}
				},
				valueAxis2:{
					title:{
						visible:true
					},
					label:{
						formatString:"yValueAxisFormatter"
					}
				},
				categoryAxis:{
					title:{
						visible:true
					},
					label:{
						formatString:"yValueAxisFormatter"
					}
				},
				legend: {
					isScrollable: false
				},
				title: {
					visible: false
				},
				interaction:{
					noninteractiveMode: true,
					selectability: {
						legendSelection: false,
						axisLabelSelection: false,
						mode: "NONE",
						plotLassoSelection: false,
						plotStdSelection: false
					}
				}
			});
			sap.ovp.cards.charts.Utils.formatChartYaxis();
			sap.ovp.cards.charts.Utils.AnalyticalCardHandler.call(this, vizFrame);
		},
		onBeforeRendering : function() {
			var vizFrame = this.getView().byId("bubbleChartCard");
			var binding = vizFrame.getDataset().getBinding("data");
			binding.attachDataReceived(function(){sap.ovp.cards.charts.Utils.hideDateTimeAxis(vizFrame, "valueAxis");});
		}
	});
})();
(function () {
	"use strict";
	/*global sap, jQuery */

	sap.ui.controller("sap.ovp.cards.charts.donut.DonutChart", {
		onInit: function () {
			var measureArrNames = [];
			var dimensionArrayNames = [];
			var vizFrame = this.getView().byId("donutChartCard");
			var measuresArr = vizFrame.getDataset().getMeasures();
			var dimensionsArr = vizFrame.getDataset().getDimensions();

			measureArrNames.push(measuresArr[0].getName());
			dimensionArrayNames.push(dimensionsArr[0].getName());

			vizFrame.addFeed(new sap.viz.ui5.controls.common.feeds.FeedItem({
				'uid': "size",
				'type': "Measure",
				'values': measureArrNames
			}));
			vizFrame.addFeed(new sap.viz.ui5.controls.common.feeds.FeedItem({
				'uid': "color",
				'type': "Dimension",
				'values': dimensionArrayNames
			}));

			vizFrame.setVizProperties({
				size:{
					title:{
						visible:false
					}
				},
				color:{
					title:{
						visible:false
					}
				},
				legend: {
					isScrollable: false
				},

				title: {
					visible: false
				},
				interaction:{
					noninteractiveMode: true,
					selectability: {
						legendSelection: false,
						axisLabelSelection: false,
						mode: "NONE",
						plotLassoSelection: false,
						plotStdSelection: false
					}
				}
			});
			sap.ovp.cards.charts.Utils.formatChartYaxis();
			sap.ovp.cards.charts.Utils.AnalyticalCardHandler.call(this, vizFrame);
		}
	});
})();
(function () {
	"use strict";
	/*global sap, jQuery */

	sap.ui.controller("sap.ovp.cards.charts.line.LineChart", {
		onInit: function () {
			var vizFrame = this.getView().byId("lineChartCard");
			vizFrame.setVizProperties({
				valueAxis:{
					title:{
						visible:true
					},
					label:{
						formatString:"yValueAxisFormatter"
					}
				},
				categoryAxis:{
					title:{
						visible:true
					},
					label:{
						formatString:"yValueAxisFormatter"
					}
				},
				legend: {
					isScrollable: false
				},

				title: {
					visible: false
				},
				interaction:{
					noninteractiveMode: true,
					selectability: {
						legendSelection: false,
						axisLabelSelection: false,
						mode: "NONE",
						plotLassoSelection: false,
						plotStdSelection: false
					}
				}
			});
			sap.ovp.cards.charts.Utils.formatChartYaxis();
			sap.ovp.cards.charts.Utils.AnalyticalCardHandler.call(this, vizFrame);
		},
		onBeforeRendering : function() {
			var vizFrame = this.getView().byId("lineChartCard");
			var binding = vizFrame.getDataset().getBinding("data");
			binding.attachDataReceived(function(){sap.ovp.cards.charts.Utils.hideDateTimeAxis(vizFrame, "categoryAxis");});
		}
	});
})();
(function () {
    "use strict";
    /*global sap, jQuery */

    sap.ui.controller("sap.ovp.cards.image.Image", {
        onInit: function () {
        },

        onListItemPress: function (oEvent) {
            this.doIntentBasedNavigation(oEvent.getSource().getBindingContext());
        }

    });
})();
(function () {
    "use strict";
    /*global sap, jQuery */

    sap.ui.controller("sap.ovp.cards.list.List", {
        maxValue: -1,
        onInit: function () {
        },

        onListItemPress: function (oEvent) {
            this.doIntentBasedNavigation(oEvent.getSource().getBindingContext());
        },

        normalizeValueToPercentage: function (value) {
            var oEntityType = this.getEntityType(),
                sAnnotationPath = this.getCardPropertiesModel().getProperty("/annotationPath"),
                aRecords = oEntityType[sAnnotationPath],
                context = this.getMetaModel().createBindingContext(oEntityType.$path + "/" + sAnnotationPath);
            if (sap.ovp.cards.AnnotationHelper.isFirstDataPointPercentageUnit(context, aRecords)) {
                return parseInt(value, 10);
            }
            var maxV = this._getMaxValue();
            if (value > maxV) {
                return 100;
            } else {
                var iValue = (parseInt(value, 10) * 100) / maxV;
                if (iValue != 0) {
                    return iValue;
                } else { //if the value is 0 we want to show some minimal value in the bar
                    return 0.5;
                }
            }
        },

        _getMaxValue: function () {
            if (this.maxValue != -1) {
                return this.maxValue;
            }
            var oEntityType = this.getEntityType(),
                sAnnotationPath = this.getCardPropertiesModel().getProperty("/annotationPath"),
                aRecords = oEntityType[sAnnotationPath],
                context = this.getMetaModel().createBindingContext(oEntityType.$path + "/" + sAnnotationPath);
            var dataPointValue = sap.ovp.cards.AnnotationHelper.getFirstDataPointValue(context, aRecords);
            var barList = this.getView().byId("ovpList"),
                listItems = barList.getBinding("items"),
                itemsContextsArray = listItems.getCurrentContexts();

            for (var i = 0; i < itemsContextsArray.length; i++) {
                if (parseInt(itemsContextsArray[i].getObject()[dataPointValue], 10) > this.maxValue) {
                    this.maxValue = parseInt(itemsContextsArray[i].getObject()[dataPointValue], 10);
                }
            }
            return this.maxValue;
        },

        /**
         * Gets the card items binding object for the count footer
         */
        getCardItemsBinding: function() {
            var list = this.getView().byId("ovpList");
            return list.getBinding("items");
        }


    });
})();
(function () {
    "use strict";
    /*global sap, jQuery */

    sap.ui.controller("sap.ovp.cards.loading.Loading", {

        onInit: function () {
        },

        onAfterRendering: function(){
            var oView = this.getView();
            oView.addStyleClass("sapOvpLoadingCard");
            setTimeout(function () {
                this.addStyleClass('sapOvpLoadingCardAnimation');
            }.bind(oView), 1000);
            var loadingFooter = oView.byId("ovpLoadingFooter");

            setTimeout(function () {
                loadingFooter.setBusy(true);
            }, 6000);

            setTimeout(function(){
                this.setBusy(false);
                this.setText(sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("cannotLoadCard"));
            }.bind(loadingFooter), 9000);
        }
    });
})();
(function () {
    "use strict";
    /*global sap, jQuery */

    sap.ui.controller("sap.ovp.cards.table.Table", {

        onInit: function () {
        },

        onColumnListItemPress: function (oEvent) {
            this.doIntentBasedNavigation(oEvent.getSource().getBindingContext());
        },

        /**
         * Gets the card items binding object for the count footer
         */
        getCardItemsBinding: function() {
            var table = this.getView().byId("ovpTable");
            return table.getBinding("items");
        }
    });
})();
jQuery.sap.declare('sap.ovp.library-all');
jQuery.sap.declare('sap.ovp.cards.charts.bubble.BubbleChart.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ovp.cards.charts.donut.DonutChart.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ovp.cards.charts.line.LineChart.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ovp.cards.image.Image.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ovp.cards.list.List.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ovp.cards.loading.Loading.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
jQuery.sap.declare('sap.ovp.cards.table.Table.controller'); // raw module, declared by SAPUI5 'AllInOne' Builder
if ( !jQuery.sap.isDeclared('sap.ovp.app.Component') ) {
(function () {
    "use strict";
    /*global sap, jQuery */

    /**
     * @fileOverview Application component to display information on entities from the GWSAMPLE_BASIC
     *   OData service.
     * @version 1.32.5
     */
    jQuery.sap.declare("sap.ovp.app.Component");
    jQuery.sap.require('sap.ui.model.odata.AnnotationHelper'); // unlisted dependency retained


    sap.ui.core.UIComponent.extend("sap.ovp.app.Component", {
        // use inline declaration instead of component.json to save 1 round trip
        metadata: {

            properties: {
                "cardContainerFragment": {
                    "type": "string",
                    "defaultValue": "sap.ovp.app.CardContainer"
                }
            },

            version: "1.32.5",

            library: "sap.ovp.app",

            dependencies: {
                libs: [ "sap.m",
                    "sap.ui.comp",
                    "sap.uxap"
                ],
                components: []
            },
            config: {
                fullWidth: true,
                hideLightBackground: true
            }
        },

        createContent: function () {
            var ovpConfig = this.getMetadata().getManifestEntry("sap.ovp");
            var appConfig = this.getMetadata().getManifestEntry("sap.app");
            var uiConfig = this.getMetadata().getManifestEntry("sap.ui");
            var sIcon = jQuery.sap.getObject("icons.icon", undefined, uiConfig);

            var sComponentName = this.getMetadata().getComponentName();
            ovpConfig.baseUrl = jQuery.sap.getModulePath(sComponentName);
            var uiModel = new sap.ui.model.json.JSONModel(ovpConfig);

            uiModel.setProperty("/title", jQuery.sap.getObject("title", undefined, appConfig));
            uiModel.setProperty("/description", jQuery.sap.getObject("description", undefined, appConfig));
            uiModel.setProperty("/cardContainerFragment", this.getCardContainerFragment());

            if (sIcon){
                if (sIcon.charAt(0) !== '/'){
                    sIcon = ovpConfig.baseUrl + "/" + sIcon;
                }
                uiModel.setProperty("/icon", sIcon);
            }

            //convert cards object into sorted array
            var oCards = ovpConfig.cards;
            var aCards = [];
            var oCard;
            for (var cardKey in oCards){
                if (oCards.hasOwnProperty(cardKey)) {
                    oCard = oCards[cardKey];
                    oCard.id = cardKey;
                    aCards.push(oCard);
                }
            }

            aCards.sort(function(card1, card2){
                if (card1.id < card2.id){
                    return -1;
                } else if (card1.id > card2.id){
                    return 1;
                } else {
                    return 0;
                }
            });

            uiModel.setProperty("/cards", aCards);

            this.setModel(uiModel, "ui");
            this.setModel(this.getModel(ovpConfig.globalFilterModel));

            return sap.ui.view({
                height: "100%",
                preprocessors: {
                    xml: {
                        bindingContexts: {ui: uiModel.createBindingContext("/")},
                        models: {ui: uiModel}
                    }
                },
                type: sap.ui.core.mvc.ViewType.XML,
                viewName: "sap.ovp.app.Main"
            });
        }

    });
}());

}; // end of sap/ovp/app/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.ActionUtils') ) {

(function () {
    "use strict";
    /*global dispatchEvent, document, jQuery, localStorage, sap */

    jQuery.sap.declare("sap.ovp.cards.ActionUtils");

    sap.ovp.cards.ActionUtils = {};

    sap.ovp.cards.ActionUtils.getActionInfo = function(oContext, action, oEntityType) {
        function addParamLabel(oParameter, oEntityType, metaModel){
            if (oEntityType && oParameter && !oParameter["com.sap.vocabularies.Common.v1.Label"]) {

                var oProperty = metaModel.getODataProperty(oEntityType, oParameter.name, false);
                if (oProperty && oProperty["com.sap.vocabularies.Common.v1.Label"]) {
                    // copy label from property to parameter with same name as default if no label is set for function import parameter
                    oParameter["com.sap.vocabularies.Common.v1.Label"] = oProperty["com.sap.vocabularies.Common.v1.Label"];
                } else if (oProperty && oProperty["sap:label"]) {
                    oParameter["sap:label"] = oProperty["sap:label"];
                }
            }
        }

        var getKeyProperties = function(oEntityType){
            var oKeyMap = {};

            if (oEntityType && oEntityType.key && oEntityType.key.propertyRef){
                for (var i = 0; i < oEntityType.key.propertyRef.length; i++) {
                    var sKeyName = oEntityType.key.propertyRef[i].name;
                    oKeyMap[sKeyName] = true;
                }
            }

            return oKeyMap;
        };

        var metaModel = oContext.getModel().getMetaModel();
        var sFunctionName = action.action.split('/')[1];
        var oContextObject = oContext.getObject();
        var actionData = {
            oContext: oContext,
            sFunctionImportPath: action.action,
            sFunctionLabel: action.label,
            oFunctionImport: metaModel.getODataFunctionImport(sFunctionName),
            parameterData: {},
            allParameters: []
        };
        var oParameterValue;

        if (actionData.oFunctionImport.parameter) {
            var keyMap = getKeyProperties(oEntityType);
            for (var i = 0; i < actionData.oFunctionImport.parameter.length; i++) {
                var oParameter = actionData.oFunctionImport.parameter[i];
                addParamLabel(oParameter, oEntityType, metaModel);
                if (keyMap[oParameter.name]) {
                    oParameter.isKey = true;
                }

                if (typeof oParameter.nullable === 'undefined') {
                    oParameter.nullable = true;// default is not mandatory parameter == could be null
                }
                if (oContextObject.hasOwnProperty(oParameter.name)) {
                    oParameterValue = oContextObject[oParameter.name];
                } else {
                    oParameterValue = "";
                }

                actionData.parameterData[oParameter.name] = oParameterValue;
                actionData.allParameters.push(oParameter);
            }
        }
        return actionData;
    };

    sap.ovp.cards.ActionUtils.buildParametersForm = function(actionData, onFieldChangeCB) {

        function getParamLabel(oParameter){
            var sLabel = "";
            if (oParameter["com.sap.vocabularies.Common.v1.Label"]) {
                sLabel = oParameter["com.sap.vocabularies.Common.v1.Label"].String;
            } else if (oParameter["sap:label"]) {
                sLabel = oParameter["sap:label"];
            } else {
                sLabel = oParameter.name;
            }

            return sLabel;
        }

        jQuery.sap.require("sap.ui.layout.form.SimpleForm");
        jQuery.sap.require("sap.ui.comp.smartfield.SmartField");

        var oForm = new sap.ui.layout.form.SimpleForm({
            editable: true
        });
        var aFields = [];

        for (var i = 0; i < actionData.allParameters.length; i++) {
            var oParameter = actionData.allParameters[i];

            var sParameterLabel = getParamLabel(oParameter);
            var sBinding = '{/' + oParameter.name + '}';
            var sJSONType = null;
            var sEdmType = oParameter.type;

            // max length - default undefined if not set in OData metadata
            var iMaxLength = oParameter.maxLength ? parseInt(oParameter.maxLength, 10) : undefined;

            // covers Edm.Byte, Edm.SByte, Edm.Boolean, Edm.Int16, Edm.Int32, Edm.Time
            if (sEdmType === 'Edm.Boolean') {
                sJSONType = sap.ui.comp.smartfield.JSONType.Boolean;
            } else if (sEdmType === 'Edm.Byte' || sEdmType === 'Edm.SByte' || sEdmType === 'Edm.Int16' || sEdmType === 'Edm.Int32') {
                sJSONType = sap.ui.comp.smartfield.JSONType.Integer;
            } else {
                sJSONType = sap.ui.comp.smartfield.JSONType.String;
            }

            var isMandatory = sap.ovp.cards.ActionUtils._isMandatoryParameter(oParameter);

            var oField = new sap.ui.comp.smartfield.SmartField({
                value: sBinding,
                mandatory: isMandatory,
                jsontype: sJSONType,
                maxLength: iMaxLength,
                editable:!oParameter.isKey
            });
            oField.attachChange(onFieldChangeCB);
            aFields.push(oField);
            var oLabel = new sap.ui.comp.smartfield.SmartLabel();
            oLabel.setRequired(isMandatory && !oParameter.isKey);

            oLabel.setText(sParameterLabel);
            oLabel.setLabelFor(oField);

            oForm.addContent(oLabel);
            oForm.addContent(oField);
        }

        return oForm;
    };

    sap.ovp.cards.ActionUtils.getParameters = function (oParameterModel, functionImport){
        var paramObject = sap.ovp.cards.ActionUtils._validateParametersValue(oParameterModel, functionImport);
        return paramObject.preparedParameterData;
    };

    sap.ovp.cards.ActionUtils.mandatoryParamsMissing = function(oParameterModel, functionImport) {
        var oValidatedParams = sap.ovp.cards.ActionUtils._validateParametersValue(oParameterModel, functionImport);
        return oValidatedParams.missingMandatoryParameters && oValidatedParams.missingMandatoryParameters.length > 0;
    };

    sap.ovp.cards.ActionUtils._validateParametersValue = function(oParameterModel, functionImport) {
        var aMissingMandatoryParameters = [];
        var oModelParameterData = oParameterModel.getObject('/');
        var oPreparedParameterData = {};
        var oValue, isMandatory;
        for (var i = 0; i < functionImport.parameter.length; i++) {
            var oParameter = functionImport.parameter[i];
            var sParameterName = oParameter.name;
            if (oModelParameterData.hasOwnProperty(sParameterName)) {

                oValue = oModelParameterData[sParameterName];
                isMandatory = sap.ovp.cards.ActionUtils._isMandatoryParameter(oParameter);
                if (oValue === undefined || oValue === "") {
                    if (isMandatory) {
                        if (oParameter.type === 'Edm.Boolean'){
                            oPreparedParameterData[sParameterName] = false;
                        } else {
                            aMissingMandatoryParameters.push(oParameter);
                        }
                    }
                } else {
                    oPreparedParameterData[sParameterName] = oValue;
                }
            } else {
                throw new Error("Unknown parameter: " + sParameterName);
            }
        }
        return {
            preparedParameterData: oPreparedParameterData,
            missingMandatoryParameters: aMissingMandatoryParameters
        };
    };

    sap.ovp.cards.ActionUtils._isMandatoryParameter = function(oParameter) {
        return !sap.ovp.cards.ActionUtils._toBoolean(oParameter.nullable);
    };

    sap.ovp.cards.ActionUtils._toBoolean = function(oParameterValue) {
        if (typeof oParameterValue === "string"){
            var oValue = oParameterValue.toLowerCase();
            return !(oValue == "false" || oValue == "" || oValue == " ");
        }

        return !!oParameterValue;
    };
}());

}; // end of sap/ovp/cards/ActionUtils.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.AnnotationHelper') ) {
// Copyright (c) 2009-2014 SAP SE, All Rights Reserved
/**
 * @fileOverview This file contains miscellaneous utility functions.
 */

(function () {
    "use strict";
    /*global dispatchEvent, document, jQuery, localStorage, sap */

    // ensure that sap.ushell exists
    jQuery.sap.declare("sap.ovp.cards.AnnotationHelper");

    sap.ovp.cards.AnnotationHelper = {};
    sap.ovp.cards.AnnotationHelper.formatFunctions = {count: 0};

    function getCacheEntry(iContext, sKey){
        if (iContext.getSetting){
            var oCache = iContext.getSetting("_ovpCache");
            return oCache[sKey];
        }
        return undefined;
    }

    function setCacheEntry(iContext, sKey, oValue){
        if (iContext.getSetting){
            var oCache = iContext.getSetting("_ovpCache");
            oCache[sKey] = oValue;
        }
    }

    function criticality2state(criticality){
        var sState = "None";
        if (criticality && criticality.EnumMember){
            var val = criticality.EnumMember;
            if (endsWith(val, 'Negative')) {
                sState = "Error";
            } else if (endsWith(val, 'Critical')) {
                sState = "Warning";
            } else if (endsWith(val, 'Positive')) {
                sState = "Success";
            }
        }
        return sState;
    }

    function endsWith(sString, sSuffix){
        return sString.indexOf(sSuffix, sString.length - sSuffix.length) !== -1;
    }

    function generateCriticalityCalculationFormatFunc(criticalityCalculation){
        return function(value){
            value = parseInt(value, 10);
            var sDirection = criticalityCalculation.ImprovementDirection.EnumMember;
            var oCriticality = {};
            if (endsWith(sDirection, "Minimize")){
                var iDeviation = criticalityCalculation.DeviationRangeHighValue.Int;
                var iTolerance = criticalityCalculation.ToleranceRangeHighValue.Int;
                if (value <= iTolerance){
                    oCriticality.EnumMember = "Positive";
                } else if (value > iDeviation){
                    oCriticality.EnumMember = "Negative";
                } else {
                    oCriticality.EnumMember = "Critical";
                }
            } else if (endsWith(sDirection, "Maximize")){
                var iDeviation = parseInt(criticalityCalculation.DeviationRangeLowValue.Int, 10);
                var iTolerance = parseInt(criticalityCalculation.ToleranceRangeLowValue.Int, 10);
                if (value >= iTolerance){
                    oCriticality.EnumMember = "Positive";
                } else if (value < iDeviation){
                    oCriticality.EnumMember = "Negative";
                } else {
                    oCriticality.EnumMember = "Critical";
                }
            } else if (endsWith(sDirection, "Target")){
                var iDeviationLow = criticalityCalculation.DeviationRangeLowValue.Int;
                var iDeviationHigh = criticalityCalculation.DeviationRangeHighValue.Int;
                var iToleranceLow = criticalityCalculation.ToleranceRangeLowValue.Int;
                var iToleranceHigh = criticalityCalculation.ToleranceRangeHighValue.Int;
                if (value >= iToleranceLow && value <= iToleranceHigh){
                    oCriticality.EnumMember = "Positive";
                } else if (value < iDeviationLow || value > iDeviationHigh){
                    oCriticality.EnumMember = "Negative";
                } else {
                    oCriticality.EnumMember = "Critical";
                }
            }

            return criticality2state(oCriticality);
        };
    }

    function getSortedDataFields(iContext, aCollection){
        var sCacheKey = iContext.getPath() + "-DataFields-Sorted";
        var aSortedFields = getCacheEntry(iContext, sCacheKey);
        if (!aSortedFields){
            var aDataPoints = getSortedDataPoints(iContext, aCollection);
            var aDataPointsValues = aDataPoints.map(function(oDataPoint){return oDataPoint.Value.Path; });
            var aSortedFields = aCollection.filter(function(item){
                if (item.RecordType === "com.sap.vocabularies.UI.v1.DataField" && aDataPointsValues.indexOf(item.Value.Path) === -1){
                    return true;
                }
                return false;
            });
            sortCollectionByImportance(aSortedFields);
            setCacheEntry(iContext, sCacheKey, aSortedFields);
        }
        return aSortedFields;
    }

    function getSortedDataPoints(iContext, aCollection){
        var sCacheKey = iContext.getPath() + "-DataPoints-Sorted";
        var aSortedFields = getCacheEntry(iContext, sCacheKey);
        if (!aSortedFields){
            var aSortedFields = aCollection.filter(function(item){
                if (item.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAnnotation"
                    &&
                    item.Target.AnnotationPath.match(/@com.sap.vocabularies.UI.v1.DataPoint.*/)){
                    return true;
                }
                return false;
            });
            sortCollectionByImportance(aSortedFields);
            for (var i = 0; i < aSortedFields.length; i++){
                var sTarget = aSortedFields[i].Target.AnnotationPath.slice(1);
                var sEntityTypePath = iContext.getPath().substr(0, iContext.getPath().lastIndexOf("/") + 1);
                var sPath = sEntityTypePath + sTarget;
                aSortedFields[i] = iContext.getModel().getProperty(sPath);
            }
            setCacheEntry(iContext, sCacheKey, aSortedFields);
        }
        return aSortedFields;
    }

    function getSortedActions(iContext, aCollection) {
        var sCacheKey = iContext.getPath() + "-Actions-Sorted";
        var aSortedActions = getCacheEntry(iContext, sCacheKey);
        if (!aSortedActions){
            var aSortedActions = filterAndSortActions(aCollection);
            setCacheEntry(iContext, sCacheKey, aSortedActions);
        }
        return aSortedActions;
    }


    function filterAndSortActions(aCollection){
        var aSortedActions = aCollection.filter(function(item){
            return item.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForAction";
        });
        sortCollectionByImportance(aSortedActions);
        return aSortedActions;
    }

    function filterAndSortIntentBasedNavigation(aCollection){
        var aSortedActions = aCollection.filter(function(item){
            return item.RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation";
        });
        sortCollectionByImportance(aSortedActions);
        return aSortedActions;
    }

    function getImportance(oDataField){
        var sImportance;
        if (oDataField["com.sap.vocabularies.UI.v1.Importance"]){
            sImportance = oDataField["com.sap.vocabularies.UI.v1.Importance"].EnumMember;
        }
        return  sImportance;
    }

    function sortCollectionByImportance(aCollection){
        aCollection.sort(function (a, b) {
            var aImportance = getImportance(a),
                bImportance = getImportance(b);

            if (aImportance === bImportance){
                return 0;
            }

            if (aImportance === "com.sap.vocabularies.UI.v1.ImportanceType/High"){
                return -1;
            } else if (bImportance === "com.sap.vocabularies.UI.v1.ImportanceType/High"){
                return 1;
            } else if (aImportance === "com.sap.vocabularies.UI.v1.ImportanceType/Medium"){
                return -1;
            } else if (bImportance === "com.sap.vocabularies.UI.v1.ImportanceType/Medium"){
                return 1;
            } else if (aImportance === "com.sap.vocabularies.UI.v1.ImportanceType/Low") {
                return -1;
            } else if (bImportance === "com.sap.vocabularies.UI.v1.ImportanceType/Low"){
                return 1;
            }
            return -1;
        });
        return aCollection;
    }

    function formatDataField(iContext, aCollection, index) {
        var item = getSortedDataFields(iContext, aCollection)[index];

        if (item){
            return sap.ui.model.odata.AnnotationHelper.format(iContext, item.Value);
        }
        return "";
    }

    function getDataFieldName(iContext, aCollection, index) {
        var item = getSortedDataFields(iContext, aCollection)[index];

        if (item){
            return item.Label.String;
        }
        return "";
    }

    function getDataPointName(iContext, aCollection, index) {
        var item = getSortedDataPoints(iContext, aCollection)[index];

        if (item && item.Title) {
            return item.Title.String;
        }
        return "";
    }

    function formatDataPoint(iContext, aCollection, index) {
        var item = getSortedDataPoints(iContext, aCollection)[index];

        if (item){
            return sap.ui.model.odata.AnnotationHelper.format(iContext, item.Value);
        }
        return "";
    }

    function formatDataPointState(iContext, aCollection, index) {
        var aDataPoints = getSortedDataPoints(iContext, aCollection);
        var sState = "None";

        if (aDataPoints.length > index){
            var item = aDataPoints[index];
            if (item.Criticality){
                sState = criticality2state(item.Criticality);
            } else if (item.CriticalityCalculation){
                var sFormattedPath = sap.ui.model.odata.AnnotationHelper.format(iContext, item.Value);
                var sPath = sFormattedPath.match(/path *: *'.*?',/g);
                if (sPath){
                    var fFormatFunc = generateCriticalityCalculationFormatFunc(item.CriticalityCalculation);
                    sap.ovp.cards.AnnotationHelper.formatFunctions.count++;
                    var fName = "formatCriticalityCalculation" + sap.ovp.cards.AnnotationHelper.formatFunctions.count;
                    sap.ovp.cards.AnnotationHelper.formatFunctions[fName] = fFormatFunc;
                    sState = "{" + sPath + " formatter: 'sap.ovp.cards.AnnotationHelper.formatFunctions." + fName + "'}";
                }
            }
        }

        return sState;
    }


    /*
     * This formatter method parses the List-Card List's items aggregation path in the Model.
     * The returned path may contain also sorter definition (for the List) sorting is defined
     * appropriately via respected Annotations.
     *
     * @param iContext
     * @param itemsPath
     * @returns List-Card List's items aggregation path in the Model
     */
    sap.ovp.cards.AnnotationHelper.formatItems = function(iContext, oEntitySet) {
        var oSettings = iContext.getSetting('ovpCardProperties').oData;

        // check for sorting annotation on the entity set
        var oSortAnnotationCollection = oEntitySet["com.sap.vocabularies.Common.v1.SortOrder"];
        var bSort = false, oSortOrder, sSortBy, sSortOrder, bSortOrderDesc, sSorterValue;

        // If sorting is enabled by Configuration
        if (oSettings.sortBy){
            // If sorting is enabled by card configuration
            bSort = true;
            sSorterValue = "";
            sSortBy = oSettings.sortBy;
            if (oSettings.sortOrder) {
                if (oSettings.sortOrder.toLowerCase() === 'descending') {
                    bSortOrderDesc = true;
                } else {
                    bSortOrderDesc = false;
                }
            } else {
                bSortOrderDesc = true;
            }

            sSorterValue = "{path: '" + sSortBy + "',descending: " + bSortOrderDesc + "}";

        } else if (oSortAnnotationCollection) {

            // If sorting is enabled by Annotations
            bSort = true;
            sSorterValue = "";
            oSortOrder;
            for (var i = 0; i < oSortAnnotationCollection.length; i++) {
                oSortOrder = oSortAnnotationCollection[i];
                sSortBy = oSortOrder.Property.PropertyPath;
                sSortOrder = oSortOrder.Descending ? oSortOrder.Descending.Value : 'false';
                sSorterValue = sSorterValue + "{path: '" + sSortBy + "',descending: " + sSortOrder + "},";
            }
            sSorterValue = sSorterValue.substring(0, sSorterValue.length - 1); // trim the last ','
        }

        // the result String - the path binding, length and sorter if exists for the list items aggregation
        var result = "{path: '/" + oEntitySet.name + "', length: 5";
        if (bSort) {
            result = result + ", sorter: [" + sSorterValue + "]";
        }
        result = result + "}";


        // returning the parsed path for the List's items-aggregation binding
        return result;
    };

    sap.ovp.cards.AnnotationHelper.formatUrl = function(iContext, sUrl) {
        if (sUrl.charAt(0) === '/' || sUrl.indexOf("http") === 0){
            return sUrl;
        }
        var sBaseUrl = iContext.getModel().getProperty("/baseUrl");
        if (sBaseUrl){
            return sBaseUrl + "/" + sUrl;
        }
        return sUrl;
    };

    sap.ovp.cards.AnnotationHelper.getDataPointsCount = function(iContext, aCollection) {
        var aDataPoints = getSortedDataPoints(iContext, aCollection);
        return aDataPoints.length;
    };

    sap.ovp.cards.AnnotationHelper.getFirstDataPointValue = function(iContext, aCollection) {
        return sap.ovp.cards.AnnotationHelper.getDataPointValue(iContext, aCollection, 0);
    };

    sap.ovp.cards.AnnotationHelper.getSecondDataPointValue = function(iContext, aCollection) {
        return sap.ovp.cards.AnnotationHelper.getDataPointValue(iContext, aCollection, 1);
    };

    sap.ovp.cards.AnnotationHelper.getDataPointValue = function(iContext, aCollection, index) {
        var aDataPoints = getSortedDataPoints(iContext, aCollection),
            oDataPoint = aDataPoints[index];

        if (oDataPoint && oDataPoint.Value && oDataPoint.Value.Path) {
            return oDataPoint.Value.Path;
        }
        return "";
    };

    sap.ovp.cards.AnnotationHelper.getFirstDataFieldName = function(iContext, aCollection) {
        return getDataFieldName(iContext, aCollection, 0);
    };

    sap.ovp.cards.AnnotationHelper.getSecondDataFieldName = function(iContext, aCollection) {
        return getDataFieldName(iContext, aCollection, 1);
    };

    sap.ovp.cards.AnnotationHelper.getThirdDataFieldName = function(iContext, aCollection) {
        return getDataFieldName(iContext, aCollection, 2);
    };

    sap.ovp.cards.AnnotationHelper.formatFirstDataFieldValue = function(iContext, aCollection) {
        return formatDataField(iContext, aCollection, 0);
    };

    sap.ovp.cards.AnnotationHelper.formatSecondDataFieldValue = function(iContext, aCollection) {
        return formatDataField(iContext, aCollection, 1);
    };

    sap.ovp.cards.AnnotationHelper.formatThirdDataFieldValue = function(iContext, aCollection) {
        return formatDataField(iContext, aCollection, 2);
    };

    sap.ovp.cards.AnnotationHelper.formatFourthDataFieldValue = function(iContext, aCollection) {
        return formatDataField(iContext, aCollection, 3);
    };

    sap.ovp.cards.AnnotationHelper.formatFifthDataFieldValue = function(iContext, aCollection) {
        return formatDataField(iContext, aCollection, 4);
    };

    sap.ovp.cards.AnnotationHelper.formatSixthDataFieldValue = function(iContext, aCollection) {
        return formatDataField(iContext, aCollection, 5);
    };

    sap.ovp.cards.AnnotationHelper.getFirstDataPointName = function(iContext, aCollection) {
        return getDataPointName(iContext, aCollection, 0);
    };

    sap.ovp.cards.AnnotationHelper.getSecondDataPointName = function(iContext, aCollection) {
        return getDataPointName(iContext, aCollection, 1);
    };

    sap.ovp.cards.AnnotationHelper.getThirdDataPointName = function(iContext, aCollection) {
        return getDataPointName(iContext, aCollection, 2);
    };

    sap.ovp.cards.AnnotationHelper.formatFirstDataPointValue = function(iContext, aCollection) {
        return formatDataPoint(iContext, aCollection, 0);
    };

    sap.ovp.cards.AnnotationHelper.formatSecondDataPointValue = function(iContext, aCollection) {
        return formatDataPoint(iContext, aCollection, 1);
    };

    sap.ovp.cards.AnnotationHelper.formatThirdDataPointValue = function(iContext, aCollection) {
        return formatDataPoint(iContext, aCollection, 2);
    };

    sap.ovp.cards.AnnotationHelper.formatFirstDataPointState = function(iContext, aCollection) {
        return formatDataPointState(iContext, aCollection, 0);
    };

    sap.ovp.cards.AnnotationHelper.formatSecondDataPointState = function(iContext, aCollection) {
        return formatDataPointState(iContext, aCollection, 1);
    };

    sap.ovp.cards.AnnotationHelper.formatThirdDataPointState = function(iContext, aCollection) {
        return formatDataPointState(iContext, aCollection, 2);
    };

    /**
     *
     * @param iContext
     * @returns 0 for false - there are no actions for this context
     *          1 for true - there are actions for this context
     *          does not return actual boolean - so we won't need to parse the result in the xml
     */
    sap.ovp.cards.AnnotationHelper.hasActions = function (iContext, aCollection) {
        var sortedActions = getSortedActions(iContext, aCollection);
        if (!sortedActions || sortedActions.length < 1) {
            return 0;
        }
        return 1;
    };

    /**
     *
     * @param aActions - collection of dataFields
     * @returns collection of actions only, sorted by 'Importance'
     */
    sap.ovp.cards.AnnotationHelper.getFilteredSortedActions = function(aRecords) {
        var actions = filterAndSortActions(aRecords);
        return actions;
    };

    sap.ovp.cards.AnnotationHelper.getFilteredSortedIntentNavigations = function (aRecords) {
        var intents = filterAndSortIntentBasedNavigation(aRecords);
        return intents;
    };

    sap.ovp.cards.AnnotationHelper.isFirstDataPointPercentageUnit = function(iContext, aCollection) {
        var oDataPoint = getSortedDataPoints(iContext, aCollection)[0];

        if (oDataPoint && oDataPoint.Value && oDataPoint.Value.Path){
            var sEntityTypePath = iContext.getPath().substr(0, iContext.getPath().lastIndexOf("/") + 1);
            var oModel = iContext.getModel();
            var oEntityType = oModel.getProperty(sEntityTypePath);
            var oProperty = oModel.getODataProperty(oEntityType, oDataPoint.Value.Path);
            if (oProperty && oProperty["Org.OData.Measures.V1.Unit"]){
                return oProperty["Org.OData.Measures.V1.Unit"].String === "%";
            }
        }
        return false;
    };

    sap.ovp.cards.AnnotationHelper.resolveEntityTypePath = function (oAnnotationPathContext) {
        var sAnnotationPath = oAnnotationPathContext.getObject();
        var oModel = oAnnotationPathContext.getModel();
        var oMetaModel = oModel.getProperty("/metaModel");
        var oEntitySet = oMetaModel.getODataEntitySet(oModel.getProperty("/entitySet"));
        var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
        sAnnotationPath = oEntityType.$path + "/" + sAnnotationPath;
        return oMetaModel.createBindingContext(sAnnotationPath);
    };

    // formatter functions declaration for obtaining iContext object at runtime
    sap.ovp.cards.AnnotationHelper.getFirstDataFieldName.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.getSecondDataFieldName.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.getThirdDataFieldName.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatFirstDataFieldValue.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatSecondDataFieldValue.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatThirdDataFieldValue.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatFourthDataFieldValue.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatFifthDataFieldValue.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatSixthDataFieldValue.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.getDataPointsCount.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.getFirstDataPointName.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.getSecondDataPointName.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.getThirdDataPointName.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatFirstDataPointValue.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatSecondDataPointValue.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatThirdDataPointValue.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatFirstDataPointState.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatSecondDataPointState.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatThirdDataPointState.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatItems.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.formatUrl.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.hasActions.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.getFirstDataPointValue.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.getSecondDataPointValue.requiresIContext = true;
    sap.ovp.cards.AnnotationHelper.isFirstDataPointPercentageUnit.requiresIContext = true;
}());

}; // end of sap/ovp/cards/AnnotationHelper.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.charts.AggregateNumber') ) {
jQuery.sap.declare('sap.ovp.cards.charts.AggregateNumber'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('sap.ui.core.Control'); // unlisted dependency retained
sap.ui.define("sap/ovp/cards/charts/AggregateNumber",["sap/ui/core/Control"], function(Control) {
	"use strict";
	return Control.extend("sap.ovp.cards.charts.AggregateNumber", {
		metadata : {
			aggregations : {
				singleton : {
					type : "sap.ui.core.Element"
				},
				content : {
					multiple : false
				}
			}
		},
		renderer : function(r, c) {
			r.write("<div");
			r.writeElementData(c);
			r.writeClasses();
			r.write(">");
			if (c.getContent()) {
				r.renderControl(c.getContent());
			}
			r.write("</div>");
		},

		updateBindingContext : function() {
			var binding = this.getBinding("singleton");
			if (binding) {
				var that = this;
				binding.attachEventOnce("dataReceived", function() {
					that.getContent().setBindingContext(this.getContexts()[0]);
				});
			}
			Control.prototype.updateBindingContext.apply(this, arguments);
		}
	});
}, true);

}; // end of sap/ovp/cards/charts/AggregateNumber.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.charts.Utils') ) {
/**
 * @fileOverview This file contains miscellaneous utility functions.
 */

(function () {
	"use strict";
	jQuery.sap.declare("sap.ovp.cards.charts.Utils");


	sap.ovp.cards.charts.Utils = sap.ovp.cards.charts.Utils || {};


	/* All constants feature here */
	sap.ovp.cards.charts.Utils.constants = {
			/* qualifiers for annotation terms */
			DPQUALIFIER_KEY: "dataPointAnnotationPath",
			CHART_QUALIFIER_KEY: "chartAnnotationPath",
			SELVAR_QUALIFIER_KEY: "selectionAnnotationPath",
			PREVAR_QUALIFIER_KEY: "presentationAnnotationPath",
			/* size of the collection to be rendered on chart */
			CHART_DATA_SIZE: "4",
			/* Donut's fragment name; to test if $top to be applied */
			DONUT_FRAGMENT: "sap.ovp.cards.charts.donut.DonutChart"
	};


	/* retrieve qualifier from iContext */
	sap.ovp.cards.charts.Utils.getQualifier = function (iContext, annoTerm) {
		/* see sap.ovp.cards.charts.Utils.constants for legal values of annoTerm */
		if (typeof annoTerm === "undefined" || annoTerm === null) {
			return "";
		}
		var settingsModel = iContext.getSetting('ovpCardProperties');
		if (!settingsModel) {
			return "";
		}
		var oSettings = settingsModel.oData;
		if (!oSettings) {
			return "";
		}
		var fullQualifier = oSettings && oSettings[annoTerm] ? oSettings[annoTerm] : "";
		return fullQualifier === "" ? "" : fullQualifier.split("#")[1];
	};



	/************************ FORMATTERS ************************/

	sap.ovp.cards.charts.Utils.wrapInBraces = function(whateverNeedsToBeInBraces) {
		return "{" + whateverNeedsToBeInBraces + "}";
	};

	sap.ovp.cards.charts.Utils.formDimensionPath = function(dimension) {
		var entityTypeObject = this.getModel('ovpCardProperties').getProperty("/entityType");
		var edmTypes = sap.ovp.cards.charts.Utils.getEdmTypeOfAll(entityTypeObject);
		var type = edmTypes[dimension];
		if (type == "Edm.DateTime") {
			return "{path:'" + dimension + "', formatter: 'sap.ovp.cards.charts.Utils.returnDateFormat'}";
		} else {
			return "{" + dimension + "}";
		}
	};

	sap.ovp.cards.charts.Utils.returnDateFormat = function(date) {
		jQuery.sap.require("sap.ui.core.format.DateFormat");
		var oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({pattern: "dd-MMM"});
		return oDateFormat.format(new Date(date));
	};

	/*
	 * Reads filters from annotation and prepares data binding path
	 */
	sap.ovp.cards.charts.Utils.formatItems = function(iContext, oEntitySet, oSelectionVariant, oPresentationVariant, oDimensions, oMeasures) {
		var ret = "";
		var dimensionsList = [];
		var measuresList = [];
		var sorterList = [];
		var bFilter = typeof oSelectionVariant !== "undefined";
		var bSorter = typeof oPresentationVariant !== "undefined";
		if (bSorter) {
			bSorter = typeof oPresentationVariant.SortOrder !== "undefined";
		}
		ret += "{path: '/" + oEntitySet.name + "'";

		if (bFilter) {
			var filters = [];
			var entityTypeObject = null;
			var edmTypes = null;
			if (iContext && iContext.getSetting('ovpCardProperties')) {
				entityTypeObject = iContext.getSetting('ovpCardProperties').getProperty("/entityType");
				edmTypes = sap.ovp.cards.charts.Utils.getEdmTypeOfAll(entityTypeObject);
			}
			if (oSelectionVariant && oSelectionVariant.SelectOptions) {
				jQuery.each(oSelectionVariant.SelectOptions, function() {
					var prop = this.PropertyName.PropertyPath;
					jQuery.each(this.Ranges, function() {
						if (this.Sign.EnumMember === "com.sap.vocabularies.UI.v1.SelectionRangeSignType/I") {
							var filtervalue = this.Low.String;
							if (edmTypes &&
									(edmTypes[prop].substring(0, 7) === "Edm.Int" ||
											edmTypes[prop].substring(0, 11) === 'Edm.Decimal')) {
								filtervalue = Number(filtervalue);
							}
							var filter = {
									path : prop,
									operator : this.Option.EnumMember.split("/")[1],
									value1 : filtervalue
							};
							if (this.High) {
								filter.value2 = this.High.String;
							}
							filters.push(filter);
						}
					});
				});
			}
			ret += ", filters: " + JSON.stringify(filters);
		}

		if (bSorter) {
			var oSortAnnotationCollection = oPresentationVariant.SortOrder;
			var sSorterValue = "";
			var oSortOrder;
			var sSortOrder;
			var sSortBy;
			for (var i = 0; i < oSortAnnotationCollection.length; i++) {
				oSortOrder = oSortAnnotationCollection[i];
				sSortBy = oSortOrder.Property.PropertyPath;
				sorterList.push(sSortBy);
				if (typeof oSortOrder.Descending == "undefined") {
					sSortOrder = 'true';
				} else {
					sSortOrder = oSortOrder.Descending.Boolean.toLowerCase() == 'true' ? 'true' : 'false';
				}
				sSorterValue = sSorterValue + "{path: '" + sSortBy + "',descending: " + sSortOrder + "},";
			}
			/* trim the last ',' */
			ret += ", sorter: [" + sSorterValue.substring(0, sSorterValue.length - 1) + "]";
		}

		jQuery.each(oMeasures, function(i, m){
			measuresList.push(m.Measure.PropertyPath);
		});
		jQuery.each(oDimensions, function(i, d){
			dimensionsList.push(d.Dimension.PropertyPath);
		});
		ret += ", parameters: {select:'" + dimensionsList.join(",") + "," + measuresList.join(",");
		if (sorterList.length > 0) {
			ret += "," + sorterList.join(",");
		}
		ret += "'}";

		/* Applying length currently fails - cf. Viz bug 1570803591 */
		ret += ", length: " + sap.ovp.cards.charts.Utils.constants.CHART_DATA_SIZE + "}";

		return ret;
	};

	sap.ovp.cards.charts.Utils.formatItems.requiresIContext = true;


	/*
	 * Reads groupBy from annotation and prepares comma separated list
	 */
	sap.ovp.cards.charts.Utils.listGroupBy = function(oPresentationVariant) {
		var bPV = typeof oPresentationVariant !== "undefined";
		if (!bPV) {
			return "";
		}
		var entityTypeObject = this.getModel('ovpCardProperties').getProperty("/entityType");
		var allLabels = sap.ovp.cards.charts.Utils.getAllColumnLabels(entityTypeObject);
		var result = "";
		var groupByList;

		if (oPresentationVariant.GroupBy.constructor === Array) {
			groupByList = oPresentationVariant.GroupBy;
		} else {
			groupByList = oPresentationVariant.GroupBy.Collection;
		}

		jQuery.each(groupByList, function() {
			if (typeof allLabels[this.PropertyPath] == "undefined") {
				return;
			}
			result += allLabels[this.PropertyPath];
			result += ", ";
		});
		if (result[result.length - 1] === " " && result[result.length - 2] === ",") {
			result = result.substring(0, result.length - 2);
		}
		return result == "" ? "" :  "By " + result;
	};


	/*
	 * Returns comma separated list of filters
	 */
	sap.ovp.cards.charts.Utils.listFilters = function(iContext, oSelectionVariant) {
		var result = "";
		var bFilter = typeof oSelectionVariant !== "undefined";
		if (!bFilter) {
			return result;
		}
		if (oSelectionVariant && oSelectionVariant.SelectOptions) {
			jQuery.each(oSelectionVariant.SelectOptions, function() {
				jQuery.each(this.Ranges, function() {
					if (this.Sign.EnumMember === "com.sap.vocabularies.UI.v1.SelectionRangeSignType/I") {
						result += this.Low.String;
						if (this.High) {
							result += "-" + this.High.String;
						}
						result += ", ";
					}
				});
			});
		}
		if (result[result.length - 1] === " " && result[result.length - 2] === ",") {
			result = result.substring(0, result.length - 2);
		}
		return result;
	};
	sap.ovp.cards.charts.Utils.listFilters.requiresIContext = true;


	/* Returns binding path for singleton */
	sap.ovp.cards.charts.Utils.getAggregateNumber = function(iContext, oEntitySet, measure, oSelectionVariant) {
		var entityTypeObject = iContext.getSetting('ovpCardProperties').getProperty("/entityType");
		var unitColumn = sap.ovp.cards.charts.Utils.getUnitColumn(measure, entityTypeObject);
		var bFilter = typeof oSelectionVariant !== "undefined";
		var filtersString = "";
		if (bFilter) {
			var filters = [];
			var edmTypes = null;
			if (iContext && iContext.getSetting('ovpCardProperties')) {
				edmTypes = sap.ovp.cards.charts.Utils.getEdmTypeOfAll(entityTypeObject);
			}
			if (oSelectionVariant && oSelectionVariant.SelectOptions) {
				jQuery.each(oSelectionVariant.SelectOptions, function() {
					var prop = this.PropertyName.PropertyPath;
					jQuery.each(this.Ranges, function() {
						if (this.Sign.EnumMember === "com.sap.vocabularies.UI.v1.SelectionRangeSignType/I") {
							var filtervalue = this.Low.String;
							if (edmTypes &&
									(edmTypes[prop].substring(0, 7) === "Edm.Int" ||
											edmTypes[prop].substring(0, 11) === 'Edm.Decimal')) {
								filtervalue = Number(filtervalue);
							}
							var filter = {
									path : prop,
									operator : this.Option.EnumMember.split("/")[1],
									value1 : filtervalue
							};
							if (this.High) {
								filter.value2 = this.High.String;
							}
							filters.push(filter);
						}
					});
				});
			}
			filtersString += ", filters: " + JSON.stringify(filters);
		}

		if (!unitColumn) {
			return "{path: '/" + oEntitySet.name + "'" + ", parameters:{select:'" + measure + "'}" + filtersString + "}";
		}
		return "{path: '/" + oEntitySet.name + "'" + ", parameters:{select:'" + measure + "," + unitColumn + "'}" + filtersString + "}";
	};
	sap.ovp.cards.charts.Utils.getAggregateNumber.requiresIContext = true;

	/* Returns the formatted aggregate value for Header */
	sap.ovp.cards.charts.Utils.getFormattedNumber = function(value, UOM) {
		var ovpModel = this.getModel("ovpCardProperties");
		if (!ovpModel) {
			return;
		}
		var fullQualifier = ovpModel.getProperty("/" + sap.ovp.cards.charts.Utils.constants.DPQUALIFIER_KEY);
		var entityTypeObject = ovpModel.getProperty("/entityType");
		var measure = entityTypeObject[fullQualifier].Value.Path;
		var isACurrency = sap.ovp.cards.charts.Utils.isACurrency(measure, entityTypeObject);
		if (isACurrency) {
			var currencyFormatter = sap.ui.core.format.NumberFormat.getCurrencyInstance({
				style: 'short',
				showMeasure: false
			});
			return currencyFormatter.format(Number(value), UOM);
		}

		var decimalPrecision = Number(entityTypeObject[fullQualifier].NumberFormat.NumberOfFractionalDigits.Int);
		var numberFormat = sap.ui.core.format.NumberFormat.getFloatInstance( 
				{
					style: 'short',
					minFractionDigits: decimalPrecision,
					maxFractionDigits: decimalPrecision
				}
		);
		return numberFormat.format(Number(value));

	};


	/* Formatter for semantic color for Header */
	sap.ovp.cards.charts.Utils.returnSemanticColorForAggregateNumber = function(aggregateValue) {
		aggregateValue = Number(aggregateValue);
		var ovpModel = this.getModel("ovpCardProperties");
		if (!ovpModel) {
			return;
		}
		var fullQualifier = ovpModel.getProperty("/" + sap.ovp.cards.charts.Utils.constants.DPQUALIFIER_KEY);
		var dataPoint = ovpModel.getProperty("/entityType")[fullQualifier];
		var improvementDirection = dataPoint.CriticalityCalculation.ImprovementDirection.EnumMember.split("/")[1];
		var DeviationRangeHighValue, ToleranceRangeHighValue, ToleranceRangeLowValue, DeviationRangeLowValue;

		if (improvementDirection == "Minimizing") {
			if (dataPoint.CriticalityCalculation.DeviationRangeHighValue && dataPoint.CriticalityCalculation.ToleranceRangeHighValue &&
					dataPoint.CriticalityCalculation.DeviationRangeHighValue.String && dataPoint.CriticalityCalculation.ToleranceRangeHighValue.String) {
				DeviationRangeHighValue = Number(dataPoint.CriticalityCalculation.DeviationRangeHighValue.String);
				ToleranceRangeHighValue = Number(dataPoint.CriticalityCalculation.ToleranceRangeHighValue.String);

				if (aggregateValue <= ToleranceRangeHighValue) {
					return "Good";
				} else if (aggregateValue > ToleranceRangeHighValue && aggregateValue <= DeviationRangeHighValue) {
					return "Critical";
				} else {
					return "Error";
				}
			} else {
				return "Neutral";
			}
		} else if (improvementDirection == "Maximizing") {
			if (dataPoint.CriticalityCalculation.ToleranceRangeLowValue && dataPoint.CriticalityCalculation.DeviationRangeLowValue &&
					dataPoint.CriticalityCalculation.ToleranceRangeLowValue.String && dataPoint.CriticalityCalculation.DeviationRangeLowValue.String) {
				ToleranceRangeLowValue = Number(dataPoint.CriticalityCalculation.ToleranceRangeLowValue.String);
				DeviationRangeLowValue = Number(dataPoint.CriticalityCalculation.DeviationRangeLowValue.String);

				if (aggregateValue >= ToleranceRangeLowValue) {
					return "Good";
				} else if (aggregateValue < ToleranceRangeLowValue && aggregateValue >= DeviationRangeLowValue) {
					return "Critical";
				} else {
					return "Error";
				}
			} else {
				return "Neutral";
			}
		} else {
			if (dataPoint.CriticalityCalculation.DeviationRangeHighValue && dataPoint.CriticalityCalculation.ToleranceRangeHighValue &&
					dataPoint.CriticalityCalculation.ToleranceRangeLowValue && dataPoint.CriticalityCalculation.DeviationRangeLowValue &&
					dataPoint.CriticalityCalculation.DeviationRangeHighValue.String && dataPoint.CriticalityCalculation.ToleranceRangeHighValue.String &&
					dataPoint.CriticalityCalculation.ToleranceRangeLowValue.String && dataPoint.CriticalityCalculation.DeviationRangeLowValue.String) {
				DeviationRangeHighValue = Number(dataPoint.CriticalityCalculation.DeviationRangeHighValue.String);
				ToleranceRangeHighValue = Number(dataPoint.CriticalityCalculation.ToleranceRangeHighValue.String);
				ToleranceRangeLowValue = Number(dataPoint.CriticalityCalculation.ToleranceRangeLowValue.String);
				DeviationRangeLowValue = Number(dataPoint.CriticalityCalculation.DeviationRangeLowValue.String);

				if ((aggregateValue <= ToleranceRangeHighValue) && (aggregateValue >= ToleranceRangeLowValue)) {
					return "Good";
				} else if ((aggregateValue > ToleranceRangeHighValue && aggregateValue <= DeviationRangeHighValue) || (aggregateValue < ToleranceRangeLowValue && aggregateValue >= DeviationRangeLowValue)) {
					return "Critical";
				} else {
					return "Error";
				}
			}
		}
	};


	/* Formatter for Trend Direction for Header */
	sap.ovp.cards.charts.Utils.returnTrendDirection = function(aggregateValue) {
		aggregateValue = Number(aggregateValue);
		var ovpModel = this.getModel("ovpCardProperties");
		if (!ovpModel) {
			return;
		}
		var fullQualifier = ovpModel.getProperty("/" + sap.ovp.cards.charts.Utils.constants.DPQUALIFIER_KEY);
		var dataPoint = ovpModel.getProperty("/entityType")[fullQualifier];
		var referenceValue, upDifference, downDifference;
		if (!dataPoint.TrendCalculation) {
			return;
		}

		if (dataPoint.TrendCalculation.ReferenceValue) {
			referenceValue = Number(dataPoint.TrendCalculation.ReferenceValue.String);
		}
		if (dataPoint.TrendCalculation.UpDifference) {
			upDifference = Number(dataPoint.TrendCalculation.UpDifference.Int);
		}
		if (dataPoint.TrendCalculation.DownDifference) {
			downDifference = Number(dataPoint.TrendCalculation.DownDifference.Int);
		}

		if (referenceValue && upDifference && (aggregateValue - referenceValue >= upDifference)) {
			return "Up";
		}
		if (referenceValue && downDifference && (aggregateValue - referenceValue <= downDifference)) {
			return "Down";
		}
	};


	/* Formatter for % change for Header */
	sap.ovp.cards.charts.Utils.returnPercentageChange = function(aggregateValue) {
		aggregateValue = Number(aggregateValue);
		var ovpModel = this.getModel("ovpCardProperties");
		if (!ovpModel) {
			return;
		}
		var fullQualifier = ovpModel.getProperty("/" + sap.ovp.cards.charts.Utils.constants.DPQUALIFIER_KEY);
		var dataPoint = ovpModel.getProperty("/entityType")[fullQualifier];
		var referenceValue;
		if (!dataPoint.TrendCalculation) {
			return;
		}
		if (dataPoint.TrendCalculation.ReferenceValue) {
			referenceValue = Number(dataPoint.TrendCalculation.ReferenceValue.String);
			var percentNumber = ((Number(aggregateValue) - referenceValue) / referenceValue);
			var percentFormatter = sap.ui.core.format.NumberFormat.getPercentInstance({
				style: 'short',
				minFractionDigits: 2,
				maxFractionDigits: 2
			});
			if (percentNumber > 0){
				return "+" + percentFormatter.format(percentNumber);
			}
			return percentFormatter.format(percentNumber);
		}
	};


	/* Creates binding path for NumericContent value */
	sap.ovp.cards.charts.Utils.formThePathForAggregateNumber = function(dataPoint) {
		var measure = dataPoint.Value.Path;
		var entityTypeObject = this.getModel('ovpCardProperties').getProperty("/entityType");
		var unitColumn = sap.ovp.cards.charts.Utils.getUnitColumn(measure, entityTypeObject);
		return "{parts: [{path:'" + measure + "'}, {path: '" + unitColumn + "'}], formatter: 'sap.ovp.cards.charts.Utils.getFormattedNumber'}";
	};


	/* Creates binding path for UOM placeholder */
	sap.ovp.cards.charts.Utils.formThePathForUOM = function(dataPoint) {
		var measure = dataPoint.Value.Path;
		var entityTypeObject = this.getModel('ovpCardProperties').getProperty("/entityType");
		var unitColumn = sap.ovp.cards.charts.Utils.getUnitColumn(measure, entityTypeObject);
		if (!unitColumn) {
			return "";
		}
		return "{" + unitColumn + "}";
	};


	/* Creates binding path for semantic color */
	sap.ovp.cards.charts.Utils.formThePathForAggregateNumberColor = function(dataPoint) {
		return "{parts: [{path:'" + dataPoint.Value.Path + "'}], formatter: 'sap.ovp.cards.charts.Utils.returnSemanticColorForAggregateNumber'}";
	};


	/* Creates binding path for trend icon */
	sap.ovp.cards.charts.Utils.formThePathForTrendIcon = function(dataPoint) {
		return "{parts: [{path:'" + dataPoint.Value.Path + "'}], formatter: 'sap.ovp.cards.charts.Utils.returnTrendDirection'}";
	};


	/* Creates binding path for % change */
	sap.ovp.cards.charts.Utils.formPathForPercentageChange = function(dataPoint) {
		return "{parts: [{path:'" + dataPoint.Value.Path + "'}], formatter: 'sap.ovp.cards.charts.Utils.returnPercentageChange'}";
	};




	/************************ METADATA PARSERS ************************/

	/* Checks if given measure is of type currency */
	sap.ovp.cards.charts.Utils.isACurrency = function(measure, entityTypeObject) {
		var properties = entityTypeObject.property;
		for (var i = 0, len = properties.length; i < len; i++) {
			if (properties[i].name == measure) {
				if (properties[i].hasOwnProperty("Org.OData.Measures.V1.ISOCurrency")) {
					return true;
				}
				break;
			}
		}
		return false;
	};


	/* Returns column name that contains the unit for the measure */
	sap.ovp.cards.charts.Utils.getUnitColumn = function(measure, entityTypeObject) {
		var properties = entityTypeObject.property;
		for (var i = 0, len = properties.length; i < len; i++) {
			if (properties[i].name == measure) {
				if (properties[i].hasOwnProperty("sap:unit")) {
					return properties[i]["sap:unit"];
				}
				break;
			}
		}
		return null;
	};


	/* Returns the set of all properties in the metadata */
	sap.ovp.cards.charts.Utils.getAllColumnProperties = function(prop, entityTypeObject) {
		var finalObject = {};
		var properties = entityTypeObject.property;
		for (var i = 0, len = properties.length; i < len; i++) {
			if (properties[i].hasOwnProperty(prop) && prop == "com.sap.vocabularies.Common.v1.Label") {
				finalObject[properties[i].name] = properties[i][prop].String;
			} else if (properties[i].hasOwnProperty(prop)) {
				finalObject[properties[i].name] = properties[i][prop];
			} else {
				finalObject[properties[i].name] = properties[i].name;
			}
		}
		return finalObject;
	};

	/* Returns column name that contains the sap:label(s) for all properties in the metadata*/
	sap.ovp.cards.charts.Utils.getAllColumnLabels = function(entityTypeObject) {
		return sap.ovp.cards.charts.Utils.getAllColumnProperties("com.sap.vocabularies.Common.v1.Label", entityTypeObject);
	};


	/* Returns column name that contains the sap:text(s) for all properties in the metadata*/
	sap.ovp.cards.charts.Utils.getAllColumnTexts = function(entityTypeObject) {
		return sap.ovp.cards.charts.Utils.getAllColumnProperties("sap:text", entityTypeObject);
	};


	/* get EdmType of all properties from $metadata */
	sap.ovp.cards.charts.Utils.getEdmTypeOfAll = function(entityTypeObject) {
		return sap.ovp.cards.charts.Utils.getAllColumnProperties("type", entityTypeObject);
	};


	/************************ Format Chart Axis ************************/
	sap.ovp.cards.charts.Utils.formatChartYaxis = function() {
		jQuery.sap.require("sap.ui.core.format.NumberFormat");
		var customFormatter = {
				locale: function(){},
				format: function(value, pattern) {
					if (pattern == "yValueAxisFormatter") {
						var numberFormat = sap.ui.core.format.NumberFormat.getFloatInstance( 
								{style: 'short', 
									minFractionDigits: 2,
									maxFractionDigits: 2}
						);
						return numberFormat.format(Number(value)); 
					}
				}
		};

		jQuery.sap.require("sap.viz.ui5.api.env.Format");
		sap.viz.ui5.api.env.Format.numericFormatter(customFormatter);
	};

	sap.ovp.cards.charts.Utils.hideDateTimeAxis = function(vizFrame, feedName) {
		var entityTypeObject = vizFrame.getModel('ovpCardProperties').getProperty("/entityType");
		var edmTypes = sap.ovp.cards.charts.Utils.getEdmTypeOfAll(entityTypeObject);
		var feeds = vizFrame.getFeeds();
		for (var i = 0; i < feeds.length; i++) {
			if (feeds[i].getUid() == feedName) {
				var feedValues = feeds[i].getValues();
				for (var j = 0; j < feedValues.length; j++) {
					if (edmTypes[feedValues[j]] != "Edm.DateTime") {
						return;
					}
				}
				vizFrame.setVizProperties({categoryAxis:{
					title:{
						visible: false
					}
				}});
				return;
			}
		}
	};
	/************************ Line Chart functions ************************/

	sap.ovp.cards.charts.Utils.LineChart = sap.ovp.cards.charts.Utils.LineChart || {};
	sap.ovp.cards.charts.Utils.LineChart.categoryAxisFeedList = {};

	sap.ovp.cards.charts.Utils.LineChart.getValueAxisFeed = function(measures) {
		var ret = [];
		jQuery.each(measures, function(i, m){
			ret.push(m.Measure.PropertyPath);
		});
		return ret.join(",");
	};


	sap.ovp.cards.charts.Utils.LineChart.getCategoryAxisFeed = function(iContext, dimensions) {
		var ret = [];
		var qualifier;
		jQuery.each(dimensions, function(i, d){
			if (d.Role.EnumMember.split("/")[1] === "Category") {
				ret.push(d.Dimension.PropertyPath);
			}
		});
		/*
		 * If no dimensions are given as category, pick first dimension as category
		 * (see Software Design Description UI5 Chart Control 3.1.2.2.1.1)
		 */
		if (ret.length < 1) {
			ret.push(dimensions[0].Dimension.PropertyPath);
		}
		qualifier = sap.ovp.cards.charts.Utils.getQualifier(iContext,
				sap.ovp.cards.charts.Utils.constants.CHART_QUALIFIER_KEY);
		sap.ovp.cards.charts.Utils.LineChart.categoryAxisFeedList[qualifier] = ret;
		return ret.join(",");
	};
	sap.ovp.cards.charts.Utils.LineChart.getCategoryAxisFeed.requiresIContext = true;


	sap.ovp.cards.charts.Utils.LineChart.getColorFeed = function(iContext, dimensions) {
		var ret = [];
		var qualifier;
		jQuery.each(dimensions, function(i, d){
			if (d.Role.EnumMember.split("/")[1] === "Series") {
				ret.push(d.Dimension.PropertyPath);
			}
		});
		/*
		 * If the dimensions is picked up for category feed as no category is given in the annotation,
		 * remove it from color feed.
		 * (see Software Design Description UI5 Chart Control 3.1.2.2.1.1)
		 */
		qualifier = sap.ovp.cards.charts.Utils.getQualifier(iContext,
				sap.ovp.cards.charts.Utils.constants.CHART_QUALIFIER_KEY);
		ret = jQuery.grep(ret, function(value) {
			if (!sap.ovp.cards.charts.Utils.LineChart.categoryAxisFeedList[qualifier]) {
				return true;
			}
			return value != sap.ovp.cards.charts.Utils.LineChart.categoryAxisFeedList[qualifier][0];
		});
		return ret.join(",");
	};
	sap.ovp.cards.charts.Utils.LineChart.getColorFeed.requiresIContext = true;


	sap.ovp.cards.charts.Utils.LineChart.testColorFeed = function(iContext, dimensions) {
		return sap.ovp.cards.charts.Utils.LineChart.getColorFeed(iContext, dimensions) !== "";
	};
	sap.ovp.cards.charts.Utils.LineChart.testColorFeed.requiresIContext = true;



	/************************ Bubble Chart Functions ************************/

	sap.ovp.cards.charts.Utils.BubbleChart = sap.ovp.cards.charts.Utils.BubbleChart || {};


	sap.ovp.cards.charts.Utils.BubbleChart.getMeasurePriorityList = function(measures) {
		/* (see Software Design Description UI5 Chart Control - Bubble Chart) */
		var ret = [null, null, null];
		jQuery.each(measures, function(i, m){
			if (m.Role.EnumMember.split("/")[1] === "Axis1") {
				if (ret[0] === null) {
					ret[0] = m.Measure.PropertyPath;
				} else if (ret[1] === null) {
					ret[1] = m.Measure.PropertyPath;
				} else if (ret[2] == null) {
					ret[2] = m.Measure.PropertyPath;
				}
			}
		});
		jQuery.each(measures, function(i, m){
			if (m.Role.EnumMember.split("/")[1] === "Axis2") {
				if (ret[0] === null) {
					ret[0] = m.Measure.PropertyPath;
				} else if (ret[1] === null) {
					ret[1] = m.Measure.PropertyPath;
				} else if (ret[2] == null) {
					ret[2] = m.Measure.PropertyPath;
				}
			}
		});
		jQuery.each(measures, function(i, m){
			if (m.Role.EnumMember.split("/")[1] === "Axis3") {
				if (ret[0] === null) {
					ret[0] = m.Measure.PropertyPath;
				} else if (ret[1] === null) {
					ret[1] = m.Measure.PropertyPath;
				} else if (ret[2] == null) {
					ret[2] = m.Measure.PropertyPath;
				}
			}
		});
		return ret;
	};


	sap.ovp.cards.charts.Utils.BubbleChart.getValueAxisFeed = function(measures) {
		return sap.ovp.cards.charts.Utils.BubbleChart.getMeasurePriorityList(measures)[0];
	};


	sap.ovp.cards.charts.Utils.BubbleChart.getValueAxis2Feed = function(measures) {
		return sap.ovp.cards.charts.Utils.BubbleChart.getMeasurePriorityList(measures)[1];
	};


	sap.ovp.cards.charts.Utils.BubbleChart.getBubbleWidthFeed = function(measures) {
		return sap.ovp.cards.charts.Utils.BubbleChart.getMeasurePriorityList(measures)[2];
	};


	sap.ovp.cards.charts.Utils.BubbleChart.getColorFeed = function(dimensions) {
		var ret = [];
		jQuery.each(dimensions, function(i, d){
			if (d.Role.EnumMember.split("/")[1] === "Series") {
				ret.push(d.Dimension.PropertyPath);
			}
		});
		return ret.join(",");
	};

	sap.ovp.cards.charts.Utils.BubbleChart.getShapeFeed = function(dimensions) {
		var ret = [];
		jQuery.each(dimensions, function(i, d){
			if (d.Role.EnumMember.split("/")[1] === "Category") {
				ret.push(d.Dimension.PropertyPath);
			}
		});
		return ret.join(",");
	};


	sap.ovp.cards.charts.Utils.BubbleChart.testColorFeed = function(dimensions) {
		return sap.ovp.cards.charts.Utils.BubbleChart.getColorFeed(dimensions) !== "";
	};


	sap.ovp.cards.charts.Utils.BubbleChart.testShapeFeed = function(dimensions) {
		return sap.ovp.cards.charts.Utils.BubbleChart.getShapeFeed(dimensions) !== "";
	};


	/****************************************************************************
	 * 																			*
	 *					Analytical Card common functions begin					*
	 * 																			*
	 ****************************************************************************/
	sap.ovp.cards.charts.Utils.AnalyticalCardHandler = function(vizFrame) {

		this.sendParameters = 0;
		this.parameterEntityType = undefined;
		this.entityTypeFunc = this.getEntityType;
		this._getEntityNavigationParametersFunc = this._getEntityNavigationParameters;

		this.clickHandler = function() {

			var properties = this.getView().getModel('ovpCardProperties').getData();
			var type = properties.hasOwnProperty("idenfiticationAnnotationPath") ? properties.idenfiticationAnnotationPath : "com.sap.vocabularies.UI.v1.Identification";

			var intents = [];

			var entityType = this.getEntityType();
			var record = entityType[type];

			var parameters = {};
			this.parameterEntityType = { property : []};

			for (var i = 0; Array.isArray(record) && i < record.length; i++) {
				if (record[i].RecordType === 'com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation') {
					intents.push({
						semanticObject: record[i].SemanticObject.String,
						action: record[i].Action.String,
						label: record[i].Label.String
					});
				}
				if (record[i].RecordType === 'com.sap.vocabularies.UI.v1.DataField') {
					parameters[record[i].Label.String] = record[i].Value.String;
					this.parameterEntityType.property.push({name : record[i].Label.String });
				}
			}

			var context = {};
			context.getObject = function() {
				return parameters;
			};

			this.sendParameters = 2;

			var intent = intents.length > 0 ? intents[0] : undefined;
			this.doIntentBasedNavigation(context,intent);
		};

		this._getEntityNavigationParameters = function(entity) {
			if (this.sendParameters == 2) {
				this.sendParameters = 1;
			}
			return this._getEntityNavigationParametersFunc.call(this,entity);
		};

		this.getEntityType = function () {

			if ( this.sendParameters != 1 ) {
				return this.entityTypeFunc.apply(this);
			}
			this.sendParameters = 0;

			return this.parameterEntityType;
		};

		this.getView().byId("ovpCardHeader").attachBrowserEvent("click", function (oEvent) {
			oEvent.stopImmediatePropagation();
			this.clickHandler();
		}.bind(this));


		var that = this;
		vizFrame.attachBrowserEvent("click",that.clickHandler,that);


	};

	/****************************************************************************
	 * 																			*
	 *					Analytical Card common functions end					*
	 * 																			*
	 ****************************************************************************/
}());

}; // end of sap/ovp/cards/charts/Utils.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.generic.Card.controller') ) {
  jQuery.sap.declare('sap.ovp.cards.generic.Card.controller');
(function () {
    "use strict";
    /*global sap, jQuery */
    
    var ActionUtils = sap.ovp.cards.ActionUtils;

    sap.ui.controller("sap.ovp.cards.generic.Card", {

        onInit: function () {
            this.getView().byId("ovpCardHeader").attachBrowserEvent("click", this.onHeaderClick.bind(this));
        },
        onAfterRendering: function(){
            var footer = this.getCardPropertiesModel().getProperty("/footerFragment");
            if (footer){
                this._handleActionFooter();
                this._handleCountFooter();
            }
        },
        onHeaderClick: function(){
            //call the navigation with the binded context to support single object cards such as quickview card
            this.doIntentBasedNavigation(this.getView().getBindingContext());
        },
        _handleActionFooter: function(footer){
            var actionFooter = this.getView().byId("ovpActionFooter");
            if (actionFooter) {
                var aActions = actionFooter.getContent();
                //remove the 'ToolbarSpacer'
                aActions = aActions.splice(1, aActions.length);
                var oLayoutData = aActions[0].getLayoutData();
                oLayoutData.setMoveToOverflow(false);
                oLayoutData.setStayInOverflow(false);
                if (aActions.length === 2) {
                    oLayoutData = aActions[1].getLayoutData();
                    oLayoutData.setMoveToOverflow(false);
                    oLayoutData.setStayInOverflow(false);
                }
            }
        },
        _handleCountFooter: function(){
            var countFooter = this.getView().byId("ovpCountFooter");
            if (countFooter) {
                //Gets the card items binding object
                var oItemsBinding = this.getCardItemsBinding();
                if (oItemsBinding) {
                    oItemsBinding.attachDataReceived(function () {
                        var iTotal = oItemsBinding.getLength();
                        var iCurrent = oItemsBinding.getCurrentContexts().length;
                        var countFooterText = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("Count_Footer", [iCurrent, iTotal]);
                        countFooter.setText(countFooterText);
                    });
                }
            }
        },

        /**
         * default empty implementation for the count footer
         */
        getCardItemsBinding: function(){
        },

        onActionPress: function(oEvent) {
            var sourceObject = oEvent.getSource(),
                oCustomData = this._getActionObject(sourceObject),
                context = sourceObject.getBindingContext();
            if (oCustomData.type.indexOf("DataFieldForIntentBasedNavigation") !== -1) {
                this.doIntentBasedNavigation(context, oCustomData);
            } else {
                this.doAction(context, oCustomData);
            }
        },
        _getActionObject: function(sourceObject) {
            var aCustomData = sourceObject.getCustomData();
            var oCustomData = {};
            for (var i = 0; i < aCustomData.length; i++) {
                oCustomData[aCustomData[i].getKey()] = aCustomData[i].getValue();
            }
            return oCustomData;
        },

        doIntentBasedNavigation: function (oContext, oIntent) {
            var oParametersPromise,
                oNavArguments,
                oCompactUrlPromise,
                oSupportedPromise,
                oCrossAppNavService = sap.ushell.Container.getService("CrossApplicationNavigation"),
                oEntity = oContext ? oContext.getObject() : null;

            if (!oIntent){
                oIntent = this.getEntityIntents()[0];
            }

            if (oCrossAppNavService && oIntent) {
                oParametersPromise = this._getEntityNavigationParameters(oEntity);
                oParametersPromise.done(function(oParameters) {
                    oNavArguments = {
                        target: {
                            semanticObject: oIntent.semanticObject,
                            action: oIntent.action
                        },
                        params: oParameters
                    };

                    oCompactUrlPromise = oCrossAppNavService.hrefForExternal(oNavArguments, this.getOwnerComponent(), true);
                    oCompactUrlPromise.done(function (sIntent) {
                        oSupportedPromise = oCrossAppNavService.isIntentSupported([sIntent]);
                        oSupportedPromise.done(function (oTargets) {
                            if (oTargets[sIntent].supported) {
                                oCrossAppNavService.toExternal(oNavArguments, this.getOwnerComponent());
                            }
                        }.bind(this));
                    }.bind(this));
                }.bind(this));
            }
        },

        doAction: function (oContext, action) {
            this.actionData = ActionUtils.getActionInfo(oContext, action, this.getEntityType());
            if (this.actionData.allParameters.length > 0) {
                this._loadParametersForm();
            } else {
                this._callFunction();
            }
        },

        getEntityIntents: function (sAnnotationPath) {
            var aIntents = [];
            var oEntityType = this.getEntityType();

            if (!sAnnotationPath){
                sAnnotationPath = 'com.sap.vocabularies.UI.v1.Identification';
            }
            var aRecords = oEntityType[sAnnotationPath];

            for (var i = 0; Array.isArray(aRecords) && i < aRecords.length; i++) {
                if (aRecords[i].RecordType === "com.sap.vocabularies.UI.v1.DataFieldForIntentBasedNavigation") {
                    aIntents.push({
                        semanticObject: aRecords[i].SemanticObject.String,
                        action: aRecords[i].Action.String,
                        label: aRecords[i].Label.String
                    });
                }
            }

            return aIntents;
        },

        getModel: function () {
            return this.getView().getModel();
        },

        getMetaModel: function () {
            return this.getModel().getMetaModel();
        },

        getCardPropertiesModel: function () {
            return this.getView().getModel("ovpCardProperties");
        },

        getEntitySet: function () {
            if (!this.entitySet) {
                var sEntitySet = this.getCardPropertiesModel().getProperty("/entitySet");
                this.entitySet = this.getMetaModel().getODataEntitySet(sEntitySet);
            }

            return this.entitySet;
        },

        getEntityType: function () {
            if (!this.entityType) {
                this.entityType = this.getMetaModel().getODataEntityType(this.getEntitySet().entityType);
            }

            return this.entityType;
        },

        _saveAppState : function(sGlobalFilterDataSuiteFormat) {
            var oDeferred = jQuery.Deferred();
            var oAppState = sap.ushell.Container.getService("CrossApplicationNavigation").createEmptyAppState(this.getOwnerComponent());
            var sAppStateKey = oAppState.getKey();
            var oAppDataForSave = {
                selectionVariant: sGlobalFilterDataSuiteFormat
            };
            oAppState.setData(oAppDataForSave);
            var oSavePromise = oAppState.save();

            oSavePromise.done(function () {
                oDeferred.resolve(sAppStateKey);
            });

            return oDeferred.promise();
        },

        /**
         * Retrieve entity parameters (if exists) and add xAppState from oComponentData.appStateKeyFunc function (if exists)
         * @param oEntity
         * @returns {*}
         * @private
         */
        _getEntityNavigationParameters: function (oEntity) {
            var oDeferred = jQuery.Deferred();
            var result = {};
            var oEntityType;
            var oComponentData = this.getOwnerComponent().getComponentData();
            var oGlobalFilter = oComponentData ? oComponentData.globalFilter : undefined;
            var oSaveAppStatePromise;

            if (oEntity) {
                oEntityType = this.getEntityType();
                var key;

                for (var i = 0; oEntityType.property && i < oEntityType.property.length; i++) {
                    key = oEntityType.property[i].name;
                    if (oEntity.hasOwnProperty(key)) {
                        if (typeof oEntity[key] === "string") {
                            result[key] = oEntity[key];
                        } else if (window.Array.isArray(oEntity[key]) && oEntity[key].length === 1) {
                            result[key] = oEntity[key][0];
                        }
                    }
                }
            }

            if (oGlobalFilter) {
                oSaveAppStatePromise = this._saveAppState(oGlobalFilter.getFilterDataAsString());
                oSaveAppStatePromise.done(function(sAppStateKey) {
                    result["sap-xapp-state"] = sAppStateKey;
                    oDeferred.resolve(result);
                });
                oSaveAppStatePromise.fail(function () {
                    jQuery.sap.log.error("appStateKey is not saved for OVP Application");
                    oDeferred.resolve(result);
                });
            } else {
                oDeferred.resolve(result);
            }

            return oDeferred.promise();
        },

        _loadParametersForm: function() {
            var oParameterModel = new sap.ui.model.json.JSONModel();
            oParameterModel.setData(this.actionData.parameterData);
            var that = this;

            // first create dialog
            var oParameterDialog = new sap.m.Dialog('ovpCardActionDialog', {
                title: this.actionData.sFunctionLabel,
                afterClose: function() {
                    oParameterDialog.destroy();
                }
            }).addStyleClass("sapUiNoContentPadding");

            // action button (e.g. BeginButton)
            var actionButton = new sap.m.Button({
                text: this.actionData.sFunctionLabel,
                press: function(oEvent) {
                    var mParameters = ActionUtils.getParameters(oEvent.getSource().getModel(), that.actionData.oFunctionImport);
                    oParameterDialog.close();
                    that._callFunction(mParameters);
                }
            });

            // cancel button (e.g. EndButton)
            var cancelButton = new sap.m.Button({
                text: "Cancel",
                press: function() {
                    oParameterDialog.close();
                }
            });
            // assign the buttons to the dialog
            oParameterDialog.setBeginButton(actionButton);
            oParameterDialog.setEndButton(cancelButton);

            // preparing a callback function which will be invoked on the Form's Fields-change
            var onFieldChangeCB = function(oEvent) {
                var missingMandatory = ActionUtils.mandatoryParamsMissing(oEvent.getSource().getModel(),that.actionData.oFunctionImport);
                actionButton.setEnabled(!missingMandatory);
            };

            // get the form assign it the Dialog and open it
            var oForm = ActionUtils.buildParametersForm(this.actionData,onFieldChangeCB);

            oParameterDialog.addContent(oForm);
            oParameterDialog.setModel(oParameterModel);
            oParameterDialog.open();
        },

        _callFunction: function(mUrlParameters) {
            var mParameters = {
                batchGroupId: "Changes",
                changeSetId: "Changes",
                urlParameters: mUrlParameters,
                forceSubmit: true,
                context: this.actionData.oContext,
                functionImport: this.actionData.oFunctionImport
            };
            var that = this;
            var oPromise = new Promise(function(resolve, reject) {
                var model = that.actionData.oContext.getModel();
                var sFunctionImport;
                sFunctionImport = "/" + mParameters.functionImport.name;
                model.callFunction(sFunctionImport, {
                    method: mParameters.functionImport.httpMethod,
                    urlParameters: mParameters.urlParameters,
                    batchGroupId: mParameters.batchGroupId,
                    changeSetId: mParameters.changeSetId,
                    headers: mParameters.headers,
                    success: function(oData, oResponse) {
                        resolve(oResponse);
                    },
                    error : function(oResponse) {
                        reject(oResponse);
                    }
                });
            });
            //Todo: call translation on message toast
            oPromise.then(function(oResponse) {
                return sap.m.MessageToast.show(sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("Toast_Action_Success"), { duration: 1000});
            }, function(oError) {
                return sap.m.MessageToast.show(sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("Toast_Action_Error"), { duration: 1000});
            });
        }
    });
})();
}; // end of sap/ovp/cards/generic/Card.controller.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.generic.Component') ) {
(function () {
    "use strict";
    /*global jQuery, sap */

    jQuery.sap.declare("sap.ovp.cards.generic.Component");
    jQuery.sap.require('sap.ui.core.UIComponent'); // unlisted dependency retained

    

    sap.ui.core.UIComponent.extend("sap.ovp.cards.generic.Component", {
        // use inline declaration instead of component.json to save 1 round trip
        metadata: {
            properties: {
                "contentFragment": {
                    "type": "string"
                },
                "headerExtensionFragment": {
                    "type": "string"
                },
                "contentPosition": {
                    "type": "string",
                    "defaultValue": "Middle"
                },
                "footerFragment": {
                    "type": "string"
                }
            },
            version: "1.32.5",

            library: "sap.ovp",

            includes: [],

            dependencies: {
                libs: [ "sap.m" ],
                components: []
            },
            config: {}
        },

        /**
         * Default "abstract" empty function.
         * In case there is a need to enrich the default preprocessor which provided by OVP, the extended Component should provide this function and return a preprocessor object.
         * @public
         * @returns {Object} SAPUI5 preprocessor object
         */
        getCustomPreprocessor: function () {},

        getPreprocessors : function() {
            var oComponentData = this.getComponentData(),
                oSettings = oComponentData.settings,
                oModel = oComponentData.model,
                oMetaModel,
                oEntityTypeContext,
                oEntitySetContext;

            if (oModel){
                var oMetaModel = oModel.getMetaModel();
                var oEntitySet = oMetaModel.getODataEntitySet(oSettings.entitySet);
                var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
                var oEntityContainer = oMetaModel.getODataEntityContainer();

                var setIndex = 0;
                for (; setIndex < oEntityContainer.entitySet.length; setIndex++) {
                    if (oEntityContainer.entitySet[setIndex] === oEntitySet) {
                        break;
                    }
                }

                oEntitySetContext = oMetaModel.createBindingContext(oEntityContainer.$path + "/entitySet/" + setIndex);

                oEntityTypeContext = oMetaModel.createBindingContext(oEntityType.$path);
            }

            var oCardProperties = this._getCardPropertyDefaults();

            oCardProperties = jQuery.extend(true, {metaModel: oMetaModel, entityType: oEntityType}, oCardProperties, oSettings);

            var oOvpCardPropertiesModel = new sap.ui.model.json.JSONModel(oCardProperties);

            var oDefaultPreprocessors = {
                xml: {
                    bindingContexts: {entityType: oEntityTypeContext, entitySet: oEntitySetContext},
                    models: {entityType: oMetaModel, entitySet:oMetaModel, ovpMeta: oMetaModel, ovpCardProperties: oOvpCardPropertiesModel},
                    ovpCardProperties: oOvpCardPropertiesModel,
                    _ovpCache: {}
                }
            };

            return jQuery.extend(true, {}, this.getCustomPreprocessor(), oDefaultPreprocessors);
        },

        _getCardPropertyDefaults: function(){
            var oCardProperties = {};
            var oPropsDef = this.getMetadata().getAllProperties();
            var oPropDef;
            for (var propName in oPropsDef){
                oPropDef = oPropsDef[propName];
                if (oPropDef.defaultValue){
                    oCardProperties[oPropDef.name] = oPropDef.defaultValue;
                }
            }
            return oCardProperties;
        },

        createContent: function () {
            var oComponentData = this.getComponentData && this.getComponentData();
            var oModel = oComponentData.model;
            var oPreprocessors = this.getPreprocessors();

            var oView;
            oView = sap.ui.view({
                preprocessors: oPreprocessors,
                type: sap.ui.core.mvc.ViewType.XML,
                viewName: "sap.ovp.cards.generic.Card"
            });

            oView.setModel(oModel);
            oView.setModel(oPreprocessors.xml.ovpCardProperties, "ovpCardProperties");

            return oView;
        }
    });
})();

}; // end of sap/ovp/cards/generic/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.image.Component') ) {
(function () {
    "use strict";
    /*global jQuery, sap */

    jQuery.sap.declare("sap.ovp.cards.image.Component");
    

    sap.ovp.cards.generic.Component.extend("sap.ovp.cards.image.Component", {
        // use inline declaration instead of component.json to save 1 round trip
        metadata: {
            properties: {
                "contentFragment": {
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.image.Image"
                }
            },

            version: "1.32.5",

            library: "sap.ovp",

            includes: [],

            dependencies: {
                libs: [ "sap.m" ],
                components: []
            },
            config: {},
            customizing: {
                "sap.ui.controllerExtensions": {
                    "sap.ovp.cards.generic.Card": {
                        controllerName: "sap.ovp.cards.image.Image"
                    }
                }
            }
        }
    });
})();

}; // end of sap/ovp/cards/image/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.list.Component') ) {
(function () {
    "use strict";
    /*global jQuery, sap */

    jQuery.sap.declare("sap.ovp.cards.list.Component");
    

    sap.ovp.cards.generic.Component.extend("sap.ovp.cards.list.Component", {
        // use inline declaration instead of component.json to save 1 round trip
        metadata: {
            properties: {
                "contentFragment": {
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.list.List"
                },
                "annotationPath": {
                    "type": "string",
                    "defaultValue": "com.sap.vocabularies.UI.v1.LineItem"
                },
                "footerFragment": {
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.generic.CountFooter"
                }
            },

            version: "1.32.5",

            library: "sap.ovp",

            includes: [],

            dependencies: {
                libs: [ "sap.m" ],
                components: []
            },
            config: {},
            customizing: {
                "sap.ui.controllerExtensions": {
                    "sap.ovp.cards.generic.Card": {
                        controllerName: "sap.ovp.cards.list.List"
                    }
                }
            }
        }
    });
})();

}; // end of sap/ovp/cards/list/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.loading.Component') ) {
(function () {
    "use strict";
    /*global jQuery, sap */

    jQuery.sap.declare("sap.ovp.cards.loading.Component");
    

    sap.ovp.cards.generic.Component.extend("sap.ovp.cards.loading.Component", {
        // use inline declaration instead of component.json to save 1 round trip
        metadata: {
            properties: {
                "footerFragment": {
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.loading.LoadingFooter"
                }
            },

            version: "1.32.5",

            library: "sap.ovp",
            customizing: {
                "sap.ui.controllerExtensions": {
                    "sap.ovp.cards.generic.Card": {
                        controllerName: "sap.ovp.cards.loading.Loading"
                    }
                }
            }

        }

    });
})();


}; // end of sap/ovp/cards/loading/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.quickview.Component') ) {
(function () {
    "use strict";
    /*global jQuery, sap */

    jQuery.sap.declare("sap.ovp.cards.quickview.Component");
    

    sap.ovp.cards.generic.Component.extend("sap.ovp.cards.quickview.Component", {
        // use inline declaration instead of component.json to save 1 round trip
        metadata: {
            properties: {
                "contentFragment": {
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.quickview.Quickview"
                },
                "footerFragment": {
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.generic.ActionsFooter"
                }
            },

            version: "1.32.5",

            library: "sap.ovp",

            includes: [],

            dependencies: {
                libs: [ "sap.m" ],
                components: []
            },
            config: {},
            customizing: {
                "sap.ui.controllerExtensions": {
                    "sap.ovp.cards.generic.Card": {
                        controllerName: "sap.ovp.cards.quickview.Quickview"
                    }
                }
            }
        }
    });
})();

}; // end of sap/ovp/cards/quickview/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.quickview.Quickview.controller') ) {
  jQuery.sap.declare('sap.ovp.cards.quickview.Quickview.controller');
(function () {
    "use strict";
    /*global sap, jQuery */

    
    sap.ui.controller("sap.ovp.cards.quickview.Quickview", {
        onInit: function () {
        },
        onAfterRendering: function(){
        }

    });
})();

}; // end of sap/ovp/cards/quickview/Quickview.controller.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.stack.Component') ) {
(function () {
    "use strict";
    /*global jQuery, sap */

    jQuery.sap.declare("sap.ovp.cards.stack.Component");
    

    sap.ovp.cards.generic.Component.extend("sap.ovp.cards.stack.Component", {
        // use inline declaration instead of component.json to save 1 round trip
        metadata: {
            properties: {
                "contentFragment": {
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.stack.Stack"
                },
                "contentPosition": {
                    "type": "string",
                    "defaultValue": "Right"
                }
            },

            version: "1.32.5",

            library: "sap.ovp",

            includes: [],

            dependencies: {
                libs: [ "sap.m" ],
                components: []
            },
            config: {},
            customizing: {
                "sap.ui.controllerExtensions": {
                    "sap.ovp.cards.generic.Card": {
                        controllerName: "sap.ovp.cards.stack.Stack"
                    }
                }
            }
        }
    });
})();

}; // end of sap/ovp/cards/stack/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.table.Component') ) {
(function () {
    "use strict";
    /*global jQuery, sap */

    jQuery.sap.declare("sap.ovp.cards.table.Component");
    

    sap.ovp.cards.generic.Component.extend("sap.ovp.cards.table.Component", {
        // use inline declaration instead of component.json to save 1 round trip
        metadata: {
            properties: {
                "contentFragment": {
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.table.Table"
                },
                "annotationPath": {
                    "type": "string",
                    "defaultValue": "com.sap.vocabularies.UI.v1.LineItem"
                },
                "footerFragment": {
                    "type": "string",
                    "defaultValue": "sap.ovp.cards.generic.CountFooter"
                }
            },

            version: "1.32.5",

            library: "sap.ovp",

            includes: [],

            dependencies: {
                libs: [ "sap.m" ],
                components: []
            },
            config: {},
            customizing: {
                "sap.ui.controllerExtensions": {
                    "sap.ovp.cards.generic.Card": {
                        controllerName: "sap.ovp.cards.table.Table"
                    }
                }
            }
        }
    });
})();


}; // end of sap/ovp/cards/table/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.library') ) {
/*!
 * Copyright (c) 2009-2014 SAP SE, All Rights Reserved
 */

/* -----------------------------------------------------------------------------------
 * Hint: This is a derived (generated) file. Changes should be done in the underlying
 * source files only (*.type, *.js) or they will be lost after the next generation.
 * ----------------------------------------------------------------------------------- */

/**
 * Initialization Code and shared classes of library sap.ovp (1.32.5)
 */
jQuery.sap.declare("sap.ovp.library");
jQuery.sap.require('sap.ui.core.Core'); // unlisted dependency retained

/**
 * SAP library: sap.ovp
 *
 * @namespace
 * @name sap.ovp
 * @public
 */


// library dependencies
jQuery.sap.require('sap.ui.core.library'); // unlisted dependency retained

jQuery.sap.require('sap.ui.layout.library'); // unlisted dependency retained

jQuery.sap.require('sap.m.library'); // unlisted dependency retained

jQuery.sap.require('sap.ui.comp.library'); // unlisted dependency retained


// delegate further initialization of this library to the Core
sap.ui.getCore().initLibrary({
	name : "sap.ovp",
	dependencies : ["sap.ui.core","sap.ui.layout","sap.m","sap.ui.comp"],
	types: [],
	interfaces: [],
	controls: [],
	elements: [],
	version: "1.32.5"
});


}; // end of sap/ovp/library.js
if ( !jQuery.sap.isDeclared('sap.ovp.ui.CardContentContainer') ) {
/*!
 * ${copyright}
 */

/*global sap window*/

jQuery.sap.declare('sap.ovp.ui.CardContentContainer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ovp/ui/CardContentContainer",["jquery.sap.global", "sap/ovp/library"],
    function(jQuery) {
        "use strict";

        var CardContentContainer = sap.m.FlexBox.extend("sap.ovp.ui.CardContentContainer", {
            metadata: {
                library: "sap.ovp"
            },
            renderer: {
                render: function (oRm, oControl) {
                    oRm.write("<div");
                    oRm.writeControlData(oControl);
                    oRm.addClass("sapOvpCardContentContainer");
                    oRm.writeClasses();
                    oRm.write(">");
                    var items = oControl.getItems();
                    for (var i = 0; i < items.length; i++) {
                        oRm.renderControl(items[i]);
                    }
                    oRm.write("</div>");
                }
            }

        });


        return CardContentContainer;

    }, /* bExport= */ true);

}; // end of sap/ovp/ui/CardContentContainer.js
if ( !jQuery.sap.isDeclared('sap.ovp.ui.EasyScanLayout') ) {
/*!
* ${copyright}
*/

/*global sap window*/
jQuery.sap.declare('sap.ovp.ui.EasyScanLayout'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ovp/ui/EasyScanLayout",["jquery.sap.global", "sap/ovp/library"],
function(jQuery) {
    "use strict";

    var EasyScanLayout = sap.ui.core.Control.extend("sap.ovp.ui.EasyScanLayout", {

        metadata: {
            library: "sap.ovp",
            aggregations: {
                content: {type: "sap.ui.core.Control", multiple: true, singularName: "content"}
            },
            defaultAggregation: "content",
            events: {
                afterRendering: {}
            },
            properties: {
                useMediaQueries: {group: "Misc", type: "sap.ui.core/boolean", defaultValue: false},
                debounceTime: {group: "Misc", type: "sap.ui.core/int", defaultValue: 150}
            }
        },

        renderer: {
            render: function (oRm, oControl) {
                oRm.write("<div");
                oRm.writeControlData(oControl);
                oRm.addClass("sapUshellEasyScanLayout");
                oRm.writeClasses();
                oRm.write(">");

                var columnCount = oControl.columnCount;
                var columnList = Array.apply(null, new Array(columnCount)).map(function() {
                    return [];
                });
                var content = oControl.getContent();
                for (var i = 0; i < content.length; i++) {
                    columnList[i % columnCount].push(content[i]);
                }

                columnList.forEach(function (column) {
                    oRm.write("<div");
                    oRm.addClass("easyScanLayoutColumn");
                    oRm.writeClasses();
                    oRm.write(">");
                    column.forEach(function (item) {
                        oRm.write("<div");
                        oRm.addClass("easyScanLayoutItemWrapper");
                        oRm.writeClasses();
                        oRm.write(">");
                        oRm.renderControl(item);
                        oRm.write("</div>");
                    });
                    oRm.write("</div>");
                });

                oRm.write("</div>");
            }
        }

    });

    var getColumnResolutionList = function () {
        return [
            {minWidth: 0, styleClass: "columns-blank", columnCount: 1},
            {minWidth: 240, styleClass: "columns-block", columnCount: 1},
            {minWidth: 352, styleClass: "columns-narrow", columnCount: 1},
            {minWidth: 433, styleClass: "columns-wide", columnCount: 1},
            {minWidth: 704, styleClass: "columns-narrow", columnCount: 2},
            {minWidth: 864, styleClass: "columns-wide", columnCount: 2},
            {minWidth: 1024, styleClass: "columns-narrow", columnCount: 3},
            {minWidth: 1280, styleClass: "columns-wide", columnCount: 3},
            {minWidth: 1440, styleClass: "columns-narrow", columnCount: 4},
            {minWidth: 1920, styleClass: "columns-wide", columnCount: 4},
            {minWidth: 2560, styleClass: "columns-narrow", columnCount: 5},
            {minWidth: 3008, styleClass: "columns-wide", columnCount: 5},

            //This is for 8K and 4K Screens (on 3600px flp make 1rem - 32px)
            {minWidth: 3600, styleClass: "columns-narrow", columnCount: 4},
            {minWidth: 3840, styleClass: "columns-wide", columnCount: 4},
            {minWidth: 5120, styleClass: "columns-wide", columnCount: 5},
            {minWidth: 6016, styleClass: "columns-wide", columnCount: 5}
        ];
    };

    EasyScanLayout.prototype.init = function () {
        this.columnResolutionList = getColumnResolutionList();
        this.columnCount = this.columnResolutionList[0].columnCount;
        this.columnStyle = "";
        this.updateColumnClass(this.columnResolutionList[0].styleClass);
        if (this.getUseMediaQueries()) { //if full page --> use media queries
            this.mediaQueryList = this.initMediaListeners(this.columnResolutionList);
        } else { //if not full page --> use resize handler
            this.resizeHandlerId = this.initResizeHandler(this.columnResolutionList);
        }
    };

    var mediaListenerHandlerTimerId;

    var mediaListenersDebounce = function (columnCount, columnStyle, mq) {
        var mediaListenerHandler = function (cols, className) {
            this.updateColumnClass(className);
            this.refreshColumnCount(cols, this.getContent());
        };
        if (mq.matches) {
            window.clearTimeout(mediaListenerHandlerTimerId);
            mediaListenerHandlerTimerId = window.setTimeout(mediaListenerHandler.bind(this, columnCount, columnStyle), this.getDebounceTime());
        }
    };

    var buildQuery = function (bottomRes, topRes) {
        var min = bottomRes.minWidth;
        var max = topRes && topRes.minWidth;
        return "(min-width: " + min + "px)" + (max ? " and (max-width: " + (max - 1) + "px)" : "");
    };

    EasyScanLayout.prototype.initMediaListeners = function (colResList) {
        var mediaQueryList = [];
        for (var i = 0; i < colResList.length; i++) {
            var query = buildQuery(colResList[i], colResList[i + 1]);
            var mediaQuery = window.matchMedia(query);
            var boundedListener = mediaListenersDebounce.bind(this, colResList[i].columnCount, colResList[i].styleClass);
            mediaQuery.addListener(boundedListener);
            mediaQuery.bindedListener = boundedListener;
            boundedListener(mediaQuery);
            mediaQueryList.push(mediaQuery);
        }
        return mediaQueryList;
    };

    EasyScanLayout.prototype.initResizeHandler = function (colResList) {
        var resizeHandlerTimerId;
        var debounceTime = this.getDebounceTime();
        var resizeHandlerDebounce = function () {
            window.clearTimeout(resizeHandlerTimerId);
            resizeHandlerTimerId = window.setTimeout(this.oControl.resizeHandler.bind(this, colResList), debounceTime);
        };

        return sap.ui.core.ResizeHandler.register(this, resizeHandlerDebounce);
    };

    EasyScanLayout.prototype.resizeHandler = function (colResList) {
        var width = this.iWidth;
        var oControl = this.oControl;
        var resObject;
        for (var i = 0; i < colResList.length; i++) {
            if (!colResList[i + 1]) {
                resObject = colResList[i];
                break;
            }
            if (colResList[i].minWidth <= width && colResList[i + 1].minWidth > width) {
                resObject = colResList[i];
                break;
            }
        }

        oControl.refreshColumnCount(resObject.columnCount, oControl.getContent());
        oControl.updateColumnClass(resObject.styleClass);
    };

    EasyScanLayout.prototype.refreshColumnCount = function (columnCount, content) {
        if (this.columnCount === columnCount) {
            return;
        }
        this.columnCount = columnCount;
        var jqColumnsNew = jQuery();
        for (var i = 0; i < columnCount; i++) {
            jqColumnsNew = jqColumnsNew.add("<div class='easyScanLayoutColumn'/>");
        }
        for (var j = 0; j < content.length; j++) {
            jqColumnsNew.get(j % columnCount).appendChild(content[j].getDomRef().parentNode);
        }

        this.$().empty().append(jqColumnsNew);

    };

    EasyScanLayout.prototype.updateColumnClass = function (columnClass) {
        if (this.columnStyle === columnClass) {
            return;
        }
        this.removeStyleClass(this.columnStyle);
        this.addStyleClass(columnClass);
        this.columnStyle = columnClass;
    };

    EasyScanLayout.prototype.onAfterRendering = function () {
        this.fireAfterRendering();
    };

    EasyScanLayout.prototype.exit = function () {
        if (this.mediaQueryList) {
            this.mediaQueryList.forEach(function (mediaQuery) {
                mediaQuery.removeListener(mediaQuery.bindedListener);
            });
            delete this.mediaQueryList;
        }
        if (this.resizeHandlerId) {
            sap.ui.core.ResizeHandler.deregister(this.resizeHandlerId);
        }
    };

    return EasyScanLayout;

}, /* bExport= */ true);

}; // end of sap/ovp/ui/EasyScanLayout.js
if ( !jQuery.sap.isDeclared('sap.ovp.ui.ObjectStream') ) {
/**
 * Created by i060586 on 11/25/14.
 */
/*!
 * SAP UI development toolkit for HTML5 (SAPUI5/OpenUI5)
 * (c) Copyright 2009-2014 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
jQuery.sap.require('sap.ui.core.delegate.ScrollEnablement'); // unlisted dependency retained


jQuery.sap.declare('sap.ovp.ui.ObjectStream'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ovp/ui/ObjectStream",['jquery.sap.global'],
    function(jQuery) {
        "use strict";

        var ObjectStream = sap.ui.core.Control.extend("sap.ovp.ui.ObjectStream", { metadata : {
            library : "sap.ovp",
            properties : {
                title: {type : "string", defaultValue: ""}
            },
            aggregations : {
                content: {type: "sap.ui.core.Control", multiple: true},
                placeHolder: {type: "sap.ui.core.Control", multiple: false}
            }
        }});


        ObjectStream.prototype.init = function() {
            var that = this;
            this._closeIcon = new sap.ui.core.Icon({
                src: "sap-icon://decline",
                tooltip: "close"
            });
            this._closeIcon.addEventDelegate({
                onclick: function () {
                    that.getParent().close();
                }
            });
        };

        ObjectStream.prototype._startScroll = function(direction) {
            this._direction = direction;
            var leftToScroll;
            if (direction == "left") {
                leftToScroll = this.wrapper.scrollLeft;
                if (leftToScroll <= 0) {
                    return;
                }
                this.jqRightEdge.css("opacity", 1);
            } else {
                leftToScroll = this.wrapper.scrollWidth - this.wrapper.offsetWidth - this.wrapper.scrollLeft;
                if (leftToScroll <= 0) {
                    return;
                }
                this.jqLeftEdge.css("opacity", 1);
            }
            var scrollTime = leftToScroll * 3;
            var translateX = (direction == "left") ? leftToScroll : ~leftToScroll + 1;
            jQuery(this.container).one("transitionend", function () {
                this._mouseLeave({data: this});
            }.bind(this));
            this.container.style.transition = 'transform ' + scrollTime + 'ms linear';
            this.container.style.transform = 'translate(' + translateX + 'px, 0px) scale(1) translateZ(0px) ';
        };

        ObjectStream.prototype._mouseLeave = function (e) {
            var containerTransform = window.getComputedStyle(e.data.container).transform;
            e.data.container.style.transform = containerTransform;
            e.data.container.style.transition = '';

            var transformX;
            var transformParamsArr = containerTransform.split(",");
            if (containerTransform.substr(0, 8) == "matrix3d") {
                transformX = parseInt(transformParamsArr[12], 10);
            } else if (containerTransform.substr(0, 6) == "matrix") {
                transformX = parseInt(transformParamsArr[4], 10);
            }
            if (isNaN(transformX)) {
                return;
            }
            e.data.container.style.transform = "none";
            e.data.wrapper.scrollLeft += ~transformX + (e.data._direction == "left" ? -5 : 5);
            e.data._checkEdgesVisibility();
        };

        ObjectStream.prototype._initScrollVariables = function () {
            var jqObjectStream = this.$();
            this.container =  jqObjectStream.find(".sapOvpObjectStreamScroll").get(0);
            this.wrapper = jqObjectStream.find(".sapOvpObjectStreamCont").get(0);
            this.shouldShowScrollButton = !sap.ui.Device.system.phone && !sap.ui.Device.system.tablet; //should be shown only in desktop (and combi)
            this.jqRightEdge = jqObjectStream.find(".sapOvpOSEdgeRight");
            this.jqLeftEdge = jqObjectStream.find(".sapOvpOSEdgeLeft");
            if (this.shouldShowScrollButton) {
                this.jqRightEdge.add(this.jqLeftEdge).on("mouseenter.objectStream", this, this._mouseEnter).
                    on("mouseleave.objectStream", this, this._mouseLeave);
            }
            this._checkEdgesVisibility();
        };

        ObjectStream.prototype._afterOpen = function () {
            this._initScrollVariables();
            this.jqBackground = jQuery("<div id='objectStreamBackgroundId' class='objectStreamNoBackground'></div>");
            jQuery.sap.byId("sap-ui-static").prepend(this.jqBackground);
            this.jqBackground.on('click.closePopup', function () {
                this._oPopup.close();
            }.bind(this));
            jQuery(".sapUshellEasyScanLayout").addClass("bluredLayout");
        };

        ObjectStream.prototype._beforeClose = function () {
            this.jqBackground.remove();
            this.jqLeftEdge.add(this.jqRightEdge).off(".objectStream");
            jQuery(".sapUshellEasyScanLayout").removeClass("bluredLayout");
        };

        ObjectStream.prototype._mouseEnter = function (evt) {
            if (evt.target == evt.data.jqRightEdge.get(0)) {
                evt.data._startScroll("right");
            }
            if (evt.target == evt.data.jqLeftEdge.get(0)) {
                evt.data._startScroll("left");
            }
        };

        ObjectStream.prototype._checkEdgesVisibility = function () {
            var scrollPosition = this.wrapper.scrollLeft;
            var leftToScroll = this.wrapper.scrollWidth - this.wrapper.offsetWidth - this.wrapper.scrollLeft;
            (scrollPosition == 0) ? this.jqLeftEdge.css("opacity", 0) : this.jqLeftEdge.css("opacity", 1);
            (leftToScroll == 0) ? this.jqRightEdge.css("opacity", 0) : this.jqRightEdge.css("opacity", 1);
        };

        ObjectStream.prototype._createPopup = function () {
            this._oPopup = new sap.m.Dialog({
                showHeader: false,
                afterOpen: this._afterOpen.bind(this),
                beforeClose: this._beforeClose.bind(this),
                content: [this],
                verticalScrolling: false,
                horizontalScrolling: false,
                stretchOnPhone: true
            }).removeStyleClass("sapUiPopupWithPadding").addStyleClass("sapOvpStackedCardPopup");
            this._oPopup.oPopup.setModal(false);
        };

        ObjectStream.prototype.open = function (cardWidth) {
            if (!this._oPopup) {
                this._createPopup();
            }
            //save card width for after rendering
            this._cardWidth = cardWidth;

            //set height and width of each card on object stream
            this.setCardsSize(this._cardWidth);

            this._oPopup.open();
        };

        ObjectStream.prototype.onBeforeRendering = function() {
            //We add this scroller for ios devices scrolling,
            if ((!this._oScroller) && (sap.ui.Device.os.ios)) {
                this._oScroller = new sap.ui.core.delegate.ScrollEnablement(this, this.getId() + "-scroll", {
                    horizontal: true,
                    vertical: false,
                    zynga: false,
                    iscroll: false,
                    preventDefault: false,
                    nonTouchScrolling: "scrollbar",
                    scrollbarClass: "sapMScrollbar"
                });
            }
        };

        ObjectStream.prototype.onAfterRendering = function() {

            if (!this._oPopup || !this._oPopup.isOpen() || !this.getContent().length ) {
                return;
            }

            //set height and width of each card on object stream
            this.setCardsSize(this._cardWidth);
            setTimeout(function () {
                this._initScrollVariables();
            }.bind(this));
        };


        ObjectStream.prototype.exit = function() {
            if (this._oPopup){
                this._oPopup.destroy();
            }
            this._closeIcon.destroy();
            if (this._oScroller) {
                this._oScroller.destroy();
                this._oScroller = null;
            }
        };

        ObjectStream.prototype.setCardsSize = function(cardWidth) {
            var remSize = parseInt(window.getComputedStyle(document.documentElement).fontSize, 10);
            var cardHeight = sap.ui.Device.system.phone ? document.body.clientHeight / remSize - 4.5 : 28.75;
            var cardList = this.getContent();
            cardList.map(function (oCard) {
                oCard.setWidth(cardWidth + "px");
                oCard.setHeight(cardHeight + "rem");
            });

            var oPlaceHolder = this.getPlaceHolder();
            if (oPlaceHolder) {
                oPlaceHolder.setWidth(cardWidth + "px");
                oPlaceHolder.setHeight(cardHeight + "rem");
            }
        };

        ObjectStream.prototype.updateContent = function(reason){
            /* We are updaing the content only data was change and not by refresh
             * This is done due to the fact that UI5 is calling the updateContent
             * twice, one with reason = 'refresh' with no data in the model and second
             * with reason = 'change' with the data.
             * In order to be able to have rendering optimization we are updating only when
             * we have the data in the model and therefore we can reuse most of the items
             * Ticket was open on this # 1570807520
             */
            // in any case we need to call the oBinding.getContexts().
            // it seams that this will trigger the second call with the change reason
            var oBindingInfo = this.mBindingInfos["content"],
                oBinding = oBindingInfo.binding,
                aBindingContexts = oBinding.getContexts(oBindingInfo.startIndex, oBindingInfo.length);
            if (reason === "change"){
                var fnFactory = oBindingInfo.factory,
                    i = 0,
                    aItems = this.getContent(),
                    addNewItem = jQuery.proxy(function (oContext) {
                        var sId = this.getId() + "-" + jQuery.sap.uid(),
                            oClone = fnFactory(sId, oContext);
                        oClone.setBindingContext(oContext, oBindingInfo.model);
                        this.addContent(oClone);
                    }, this);


                // Bind as many context as possible to existing elements. Create new ones if necessary.
                for (i = 0; i < aBindingContexts.length; ++i) {
                    if (i < aItems.length) {
                        aItems[i].setBindingContext(aBindingContexts[i], oBindingInfo.model);
                    } else {
                        addNewItem(aBindingContexts[i]);
                    }
                }

                if (aItems.length > aBindingContexts.length){
                    // Delete unused elements.
                    for (; i < aItems.length; ++i) {
                        aItems[i].destroy();
                    }
                    // Update the array length.
                    aItems.length = aBindingContexts.length;
                }
            }
        };

        return ObjectStream;

    }, /* bExport= */ true);

}; // end of sap/ovp/ui/ObjectStream.js
if ( !jQuery.sap.isDeclared('sap.ovp.ui.ObjectStreamRenderer') ) {
/**
 * Created by i060586 on 11/25/14.
 */

jQuery.sap.declare('sap.ovp.ui.ObjectStreamRenderer'); // unresolved dependency added by SAPUI5 'AllInOne' Builder
jQuery.sap.require('jquery.sap.global'); // unlisted dependency retained
sap.ui.define("sap/ovp/ui/ObjectStreamRenderer",['jquery.sap.global'],

    function(jQuery) {
        "use strict";

        /**
         * Button renderer.
         * @namespace
         */
        var ObjectStreamRenderer = {
        };

        /**
         * Renders the HTML for the given control, using the provided
         * {@link sap.ui.core.RenderManager}.
         *
         * @param {sap.ui.core.RenderManager} oRm
         *            the RenderManager that can be used for writing to
         *            the Render-Output-Buffer
         * @param {sap.ui.core.Control} oButton
         *            the button to be rendered
         */
        ObjectStreamRenderer.render = function(oRm, oControl) {

            if (!oControl.getVisible()) {
                return;
            }

            oRm.write("<div");
            oRm.writeControlData(oControl);
            oRm.addClass("sapOvpObjectStream");
            oRm.writeClasses();
            oRm.write(">");

            /*header*/
            oRm.write('<div class="sapOvpObjectStreamHeader">' + oControl.getTitle() + '</div>');
            oRm.write('<div class="sapOvpObjectStreamClose">');
            oRm.renderControl(oControl._closeIcon);
            oRm.write("</div>");
            /*header*/

            oRm.write('<div id="' + oControl.getId() + '-cont" class="sapOvpObjectStreamCont">');

            oRm.write('<div id="' + oControl.getId() + '-scroll"');
            oRm.addClass("sapOvpObjectStreamScroll");

            oRm.writeClasses();
            oRm.write(">");


            var aContent = oControl.getContent();
            jQuery.each(aContent, function(i, control) {

                oRm.write("<div class='sapOvpObjectStreamItem'>");
                oRm.renderControl(control);
                oRm.write("</div>");
            });

            var placeHolder = oControl.getPlaceHolder();
            if (placeHolder){
                oRm.write("<div class='sapOvpObjectStreamItem'>");
                oRm.renderControl(placeHolder);
                oRm.write("</div>");
            }

            oRm.write("</div>"); // scroll

            oRm.write('<div id="' + oControl.getId() + '-leftedge" class="sapOvpOSEdgeLeft">');
            oRm.renderControl(new sap.ui.core.Icon({src: "sap-icon://slim-arrow-left", useIconTooltip:false}));
            oRm.write('</div>');
            oRm.write('<div id="' + oControl.getId() + '-rightedge" class="sapOvpOSEdgeRight">');
            oRm.renderControl(new sap.ui.core.Icon({src: "sap-icon://slim-arrow-right", useIconTooltip:false}));
            oRm.write('</div>');

            oRm.write("</div>"); // cont
            oRm.write("</div>"); // root

        };

        ObjectStreamRenderer.renderFooterContent = function(oRm, oControl) {

            // overrides this function
        };

        return ObjectStreamRenderer;

    }, /* bExport= */ true);

}; // end of sap/ovp/ui/ObjectStreamRenderer.js
if ( !jQuery.sap.isDeclared('sap.ovp.ui.SmartphoneHeaderToggle') ) {
(function () {
    "use strict";
    /*global jQuery, sap */

    jQuery.sap.declare("sap.ovp.ui.SmartphoneHeaderToggle");

    sap.ovp.ui.SmartphoneHeaderToggle = {
        threshold : 10,
        headerVisible : true,
        startY : undefined,
        app : undefined,
        jqView : undefined,

        startHandler : function(e) {
            if (this.app.globalFilter.getVisible()) {
                return;
            }
            this.startY = e.touches[0].pageY;
        },

        resizeHandler : function() {
            if (!this.headerVisible) {
                this.animateHeader.call(this, this.headerVisible);
            }
        },

        animateHeader : function(setVisible) {
            var jqHeaderVbox = this.jqView.find('.ovpApplication > .sapUiFixFlexFixed > .sapMVBox');
            var jqFlexContainerParent = this.jqView.find('.ovpApplication > .sapUiFixFlexFlexible');
            var jqFlexContainer = jqFlexContainerParent.children();
            var translate;

            if (setVisible) {
                translate = "translateY(0px)";
                jqHeaderVbox.add(jqFlexContainerParent).css({"transform": translate, "-webkit-transform": translate});
                jqFlexContainerParent.one('transitionend', function(e) {
                    if (this.headerVisible) {
                        jqFlexContainer.css({bottom: "0px"});
                    }
                });
            } else {
                var headerHeight = this.view.byId('ovpPageHeader').$().height();
                jqFlexContainer.css({bottom: "-" + headerHeight + "px"});
                translate = "translateY(-" + headerHeight + "px)";
                jqFlexContainerParent.add(jqHeaderVbox).css({"transform": translate, "-webkit-transform": translate});
            }
        },

        moveHandler : function(e) {
            var moveY = e.touches[0].pageY;
            if (typeof this.startY == "undefined") {
                if (this.app.globalFilter.getVisible()) {
                    return;
                }
                this.startY = moveY;
            }
            if (Math.abs(this.startY - moveY) < this.threshold) {
                return;
            }
            if (this.startY > moveY && this.headerVisible) {
                this.headerVisible = false;
                this.startY = moveY;
                this.animateHeader.call(this, this.headerVisible);
            }
            if (this.startY < moveY && !this.headerVisible) {
                this.headerVisible = true;
                this.startY = moveY;
                this.animateHeader.call(this, this.headerVisible);
            }
        },

        endHandler : function() {
            this.startY = undefined;
            return;
        },

        enable : function(app) {
            this.app = app;
            this.view = this.app.getView();
            this.jqView = this.view.$();

            this.jqView.on('touchstart.headerHiding', this.startHandler.bind(this));
            this.jqView.on('touchmove.headerHiding', this.moveHandler.bind(this));
            this.jqView.on('touchend.headerHiding touchcancel.headerHiding touchleave.headerHiding', this.endHandler.bind(this));
            jQuery(window).on("resize.headerHiding", this.resizeHandler.bind(this));
        },

        disable : function() {
            this.jqView.off('touchstart.headerHiding touchmove.headerHiding touchend.headerHiding touchcancel.headerHiding touchleave.headerHiding');
            jQuery(window).off("resize.headerHiding");
        }
    };

}());

}; // end of sap/ovp/ui/SmartphoneHeaderToggle.js
if ( !jQuery.sap.isDeclared('sap.ovp.app.Main.controller') ) {
  jQuery.sap.declare('sap.ovp.app.Main.controller');
(function () {
    "use strict";
    /*global sap, jQuery */

    jQuery.sap.require('sap.ui.model.odata.ODataUtils'); // unlisted dependency retained

    

    sap.ui.controller("sap.ovp.app.Main", {
        oCardsModels: {},
        oLoadedComponents: {},

        onInit: function () {
        },

        //clarify with UI5 Core: why can view models not be accessed in onInit?
        onBeforeRendering: function () {
        },

        onAfterRendering: function(){
            var oView = this.getView();
            this._initGlobalFilter();
            var oUIModel = oView.getModel("ui");
            var cards = oUIModel.getProperty("/cards");
            var sBaseUrl = oUIModel.getProperty("/baseUrl");

            cards.forEach(function (oCard, index) {
                this.createLoadingCard(oCard);
                oCard.settings.baseUrl = sBaseUrl;
                this._initCardModel(oCard.model);
                this._loadCardComponent(oCard.template);
            }, this);

            setTimeout(function(){
                cards.forEach(function (oCard, index) {
                    this.createCard(oCard);
                }, this);
            }.bind(this), 1500);


            if (sap.ui.Device.system.phone) {
                jQuery.sap.require("sap.ovp.ui.SmartphoneHeaderToggle");
                sap.ovp.ui.SmartphoneHeaderToggle.enable(this);
            }
        },

        verifyGlobalFilterLoaded: function(){
            if (this.globalFilter.search()) {
                return true;
            }
            //else make sure filter is open so user will see the required field
            return false;
        },

        /**
         * Register to the filterChange event of the filter bar in order to mark that
         * one or more of the filters were changed
         */
        onGlobalFilterChange: function(){
            this.filterChanged = true;
        },

        /**
         * Register to the search event of the filter bar in order to refresh all models
         * with the changes in the filter bar (if there are changes) when "go" is clicked
         */
        onGlobalFilterSearch: function(){
            if (this.filterChanged){
                var sBatchGroupId = "ovp-" + new Date().getTime();
                for (var modelKey in this.oCardsModels){
                    if (this.oCardsModels.hasOwnProperty(modelKey)){
                        this.oCardsModels[modelKey].refresh(false, false, sBatchGroupId);
                    }
                }
                this.filterChanged = false;
            }
        },

        _initGlobalFilter: function(){
            this.globalFilter = this.getView().byId("ovpGlobalFilter");
            if (!this.globalFilter){
                return;
            }

            this.oGlobalFilterLodedPromise = new Promise(function (resolve, reject){
                this.globalFilter.attachAfterVariantLoad(function(){
                    if (this.verifyGlobalFilterLoaded()){
                        resolve();
                    }
                }, this);

                this.globalFilter.attachInitialise(function(){
                    // in case no variant is selected by user then the attachAfterVariantLoad
                    //event is not fired, therefore we check if there is no variant we
                    //call the verification here
                    if (!this.globalFilter.getCurrentVariantId()) {
                        if (this.verifyGlobalFilterLoaded()){
                            resolve();
                        }
                    }
                }, this);
                this.globalFilter.attachSearch(function(){
                    //If user pressed GO, it means that the required field varification
                    //was allredy done by the globalFilter, therefore we can resolve the promise.
                    //This is needed in case some required field was empty and therefore the promise
                    //object was not resolved in the initial flow, we have to do it now after user
                    //set the filter
                    resolve();

                    this.onGlobalFilterSearch();
                }, this);
                this.globalFilter.attachFilterChange(this.onGlobalFilterChange, this);
            }.bind(this));
        },

        _loadCardComponent: function(sComponentName){
            if (!this.oLoadedComponents[sComponentName]) {
                this.oLoadedComponents[sComponentName] = sap.ui.component.load({
                    name: sComponentName,
                    url: jQuery.sap.getModulePath(sComponentName),
                    async: true
                });
            }
        },

        _initCardModel: function(sCardModel){
            if (this.oCardsModels[sCardModel]){
                return;
            }
            this.oCardsModels[sCardModel] = this.getView().getModel(sCardModel);
            this.oCardsModels[sCardModel].setUseBatch(true);
            if (this.globalFilter){
                this._overrideCardModelRead(this.oCardsModels[sCardModel]);
            }
        },



        toggleFilterBar: function toggleFilterBar() {
            function toOpenState(jqGlobalFilter, jqGlobalFilterWrapper, height) {
                jqGlobalFilterWrapper.height(height);
                jqGlobalFilter.css('top', 0);
            }
            function toCloseState(jqGlobalFilter, jqGlobalFilterWrapper, height) {
                jqGlobalFilterWrapper.height(0);
                jqGlobalFilter.css("top", "-" + height + "px");
            }

            var isVisible = this.globalFilter.getVisible();

            if ((sap.ui.Device.system.phone) || (sap.ui.Device.system.tablet)) {
                this.globalFilter.setVisible(!isVisible);
                return;
            }
            if (toggleFilterBar.animationInProcess) {
                return;
            }
            toggleFilterBar.animationInProcess = true;

            if (isVisible) {
                var jqGlobalFilter = jQuery(this.globalFilter.getDomRef());
                var jqGlobalFilterWrapper = jQuery(this.getView().byId("ovpGlobalFilterWrapper").getDomRef());
                var height = jqGlobalFilterWrapper.height();
                toOpenState(jqGlobalFilter, jqGlobalFilterWrapper, height);
                jqGlobalFilterWrapper.height(); //make browser render css change
                jqGlobalFilterWrapper.one('transitionend', function(e) {
                    this.globalFilter.setVisible(false); //set filterbar invisible in case shell wants to reRender it
                    toggleFilterBar.animationInProcess = false;
                }.bind(this));
                toCloseState(jqGlobalFilter, jqGlobalFilterWrapper, height);
            } else {
                this.globalFilter.setVisible(true);
                setTimeout(function () { //we need this to wait for globalFilter renderer
                    var jqGlobalFilter = jQuery(this.globalFilter.getDomRef());
                    var jqGlobalFilterWrapper = jQuery(this.getView().byId("ovpGlobalFilterWrapper").getDomRef());
                    var height = jqGlobalFilter.outerHeight();
                    toCloseState(jqGlobalFilter, jqGlobalFilterWrapper, height);
                    jqGlobalFilterWrapper.height(); //make browser render css change
                    jqGlobalFilterWrapper.one('transitionend', function(e) {
                        jqGlobalFilterWrapper.css("height", "auto");
                        toggleFilterBar.animationInProcess = false;
                    });
                    toOpenState(jqGlobalFilter, jqGlobalFilterWrapper, height);
                }.bind(this));
            }
        },

        /**
         * This function is overriding the read function of the oDataModel with a function that will
         * first find the relevant filters from the filter bar and then will call the original
         * read function with the relevant filters as parameters.
         * @param oModel
         * @private
         */
        _overrideCardModelRead: function(oModel){
            var fOrigRead = oModel.read;
            var that = this;
            oModel.read = function(){
                var aFilters = that.globalFilter.getFilters();
                var oParameters = arguments[1];
                if (!oParameters) {
                    oParameters = {};
                    Array.prototype.push.call(arguments, oParameters);
                }
                var oEntityType = that._getEntityTypeFromPath(oModel, arguments[0], oParameters.context);
                if (oEntityType){
                    var aRelevantFIlters = that._getEntityRelevantFilters(oEntityType, aFilters);
                    if (aRelevantFIlters.length > 0){
                        var foundIndex = -1;
                        var aUrlParams = oParameters.urlParameters;
                        if (aUrlParams){
                            for (var index = 0; index < aUrlParams.length; index++){
                                // We use here lastIndexOf instead of startsWith because it doesn't work on safari (ios devices)
                                if ((aUrlParams[index]).lastIndexOf("$filter=", 0) === 0){
                                    foundIndex = index;
                                    break;
                                }
                            }
                        }
                        if (foundIndex >= 0) {
                            aUrlParams[foundIndex] = aUrlParams[foundIndex] + "%20and%20" +
                            sap.ui.model.odata.ODataUtils.createFilterParams(aFilters, oModel.oMetadata, oEntityType).substr(8);
                        } else {
                            oParameters.filters = aRelevantFIlters;
                        }

                    }
                }

                fOrigRead.apply(oModel, arguments);
            };
        },

        /**
         * This is a temporary function used to retrieve the EntityType from a given path to an entity.
         * This function is required due to fact that the function _getEntityTypeByPath of the ODataMetadata is not public.
         * @param oModel
         * @param sPath
         * @param oContext
         * @returns {object}
         * @private
         */
        _getEntityTypeFromPath: function(oModel, sPath, oContext){
            //TODO need to request UI5 to have this a public API!!!!
            var sNormPath = sap.ui.model.odata.v2.ODataModel.prototype._normalizePath.apply(oModel, [sPath, oContext]);
            var oEntityType = sap.ui.model.odata.ODataMetadata.prototype._getEntityTypeByPath.apply(oModel.oMetadata, [sNormPath]);
            return oEntityType;
        },

        /**
         * This function goes over the provided list of filters and checks which filter appears as a field
         * in the EntityType provided. The fields that appears in both lists  (filters and EntityType fields)
         * will be returned in an array.
         * @param oEntityType
         * @param aFilters
         * @returns {array}
         * @private
         */
        _getEntityRelevantFilters: function(oEntityType, aFilters){
            var aRelevantFiltes = [];
            if (aFilters.length) {
                var allFilters = aFilters[0].aFilters;
                var entityProperties = oEntityType.property;
                for (var i = 0; i < allFilters.length; i++) {
                    var currentFilterName;
                    if (allFilters[i].aFilters) {
                        currentFilterName = allFilters[i].aFilters[0].sPath;
                    } else {
                        currentFilterName = allFilters[i].sPath;
                    }
                    for (var j = 0; j < entityProperties.length; j++) {
                        if (entityProperties[j].name ===  currentFilterName) {
                            aRelevantFiltes.push(allFilters[i]);
                            break;
                        }
                    }
                }
            }

            return aRelevantFiltes;
        },

        /*
         Check derived Card Component is implemented with respect to the below restrictions:

         Custom card must be instance of sap.ovp.cards.generic.Component. In other words, custom card must extend sap.ovp.cards.generic.Component.
         If sap.ovp.cards.generic.Card view is replaced by another custom View it means the custom card is not valid.
         [If the extended Component has customization (under the component metadata) and the sap.ovp.cards.generic.Card is replaced by another view (using sap.ui.viewReplacements)]
         If the extended Component overrides the createContent function of the base sap.ovp.cards.generic.Component class, the custom card is not valid.
         If the extended Component overrides the getPreprocessors function of the base sap.ovp.cards.generic.Component class, the custom card is not valid.

         */
        _checkIsCardValid: function (sCardTemplate) {
            var sComponentClassName = sCardTemplate + ".Component";
            var oComponentMetadata, oCustomizations;

            jQuery.sap.require(sComponentClassName);

            var oComponentClass = jQuery.sap.getObject(sComponentClassName);

            if (!oComponentClass) {
                return false;
            }

            if ((oComponentClass !== sap.ovp.cards.generic.Component) && !(oComponentClass.prototype instanceof sap.ovp.cards.generic.Component)) {
                return false;
            }

            if ((oComponentMetadata = oComponentClass.getMetadata()) && (oCustomizations = oComponentMetadata.getCustomizing())) {
                //if OVP Card view was replaced
                if (oCustomizations["sap.ui.viewReplacements"] && oCustomizations["sap.ui.viewReplacements"]["sap.ovp.cards.generic.Card"]) {
                    return false;
                }
            }

            if (oComponentClass.prototype.createContent != sap.ovp.cards.generic.Component.prototype.createContent) {
                return false;
            }

            if (oComponentClass.prototype.getPreprocessors != sap.ovp.cards.generic.Component.prototype.getPreprocessors) {
                return false;
            }

            return true;
        },

        _createCardComponent: function (oView, oModel, card) {
            if (card.template && this._checkIsCardValid(card.template)) {
                var oComponentConfig = {
                    name: card.template,
                    componentData: {
                        model: oModel,
                        settings: card.settings
                    }
                };

                if (this.globalFilter) {
                    oComponentConfig.componentData.globalFilter = {
                        getFilterDataAsString : this.globalFilter.getDataSuiteFormat.bind(this.globalFilter)
                    };
                }
                var oComponent = sap.ui.component(oComponentConfig);
                var oComponentContainer = oView.byId(card.id);

                var oOldCard = oComponentContainer.getComponentInstance();
                oComponentContainer.setComponent(oComponent);
                if (oOldCard){
                    //currently the old component is not destroyed when setting a different component
                    //so we need to do that in timeout to make sure that it will not be destoroyed
                    //too early, before real card will be rendered on the screen.
                    setTimeout(function(){
                        oOldCard.destroy();
                    }, 0);
                }
            } else {
                // TODO: define the proper behavior indicating a card loading failure
                jQuery.sap.log.error("Could not create Card from '" + card.template + "' template. Card is not valid.");
            }
        },

        createLoadingCard: function(card, opacityDelay){
            /*
             * we have to make sure metadata and filter are loaded before we create the card
             * so we first create loading card and once all promises will be resulved
             * we will create the real card and replace the loading card
             */
            var loadingCard = jQuery.extend(true, {}, card, {template: "sap.ovp.cards.loading", settings: {opacityDelay: opacityDelay}});
            this._createCardComponent(this.getView(), undefined, loadingCard);
        },

        createCard: function(card){
            var oView = this.getView();
            var oModel = oView.getModel(card.model);

            ///*
            // * we have to make sure metadata and filter are loaded before we create the card
            // * so we first create loading card and once all promises will be resulved
            // * we will create the real card and replace the loading card
            // */

            Promise.all([
                    oModel.getMetaModel().loaded(),
                    this.oGlobalFilterLodedPromise,
                    this.oLoadedComponents[card.template]]
            ).then(
                function() {
                    this._createCardComponent(oView, oModel, card);
                }.bind(this),
                function(reason) {
                    jQuery.sap.log.error("Can't load card with id:'" + card.id + "' and type:'" + card.template + "', reason:" + reason);
                }
            );
        }
    });
}());

}; // end of sap/ovp/app/Main.controller.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.charts.generic.Component') ) {
(function () {
	"use strict";
	/*global jQuery, sap */

	jQuery.sap.declare("sap.ovp.cards.charts.generic.Component");
	
	
	
	sap.ovp.cards.generic.Component.extend("sap.ovp.cards.charts.generic.Component", {
		// use inline declaration instead of component.json to save 1 round trip
		metadata: {
			properties: {
				"headerExtensionFragment":{
					"type": "string",
					"defaultValue": "sap.ovp.cards.charts.AnalyticalHeader"
				}
			},

			version: "1.32.5",

			library: "sap.ovp",

			includes: [],

			dependencies: {
				libs: [ "sap.m" ],
				components: []
			},
			config: {}
		}
	});
})();

}; // end of sap/ovp/cards/charts/generic/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.charts.line.Component') ) {
(function () {
	"use strict";
	/*global jQuery, sap */

	jQuery.sap.declare("sap.ovp.cards.charts.line.Component");
	
	sap.ovp.cards.charts.generic.Component.extend("sap.ovp.cards.charts.line.Component", {
		// use inline declaration instead of component.json to save 1 round trip
		metadata: {
			properties: {
				"contentFragment": {
					"type": "string",
					"defaultValue": "sap.ovp.cards.charts.line.LineChart"
				},
				"headerExtensionFragment":{
					"type": "string",
					"defaultValue": "sap.ovp.cards.charts.AnalyticalHeader"
				}
			},

			version: "1.32.5",

			library: "sap.ovp",

			includes: [],

			dependencies: {
				libs: [ "sap.m" ],
				components: []
			},
			config: {},
			customizing: {
				"sap.ui.controllerExtensions": {
					"sap.ovp.cards.generic.Card": {
						controllerName: "sap.ovp.cards.charts.line.LineChart"
					}
				}
			}
		}
	});
})();

}; // end of sap/ovp/cards/charts/line/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.stack.Stack.controller') ) {
  jQuery.sap.declare('sap.ovp.cards.stack.Stack.controller');
(function () {
    "use strict";
    /*global sap, jQuery */
    

    sap.ui.controller("sap.ovp.cards.stack.Stack", {
        onInit: function () {
            var oVbox = this.getView().byId("stackContent");
            oVbox.addEventDelegate({
                onclick: this.openStack.bind(this)
            });
        },
        onExit: function(){
            this.oObjectStream.destroy();
        },

        onAfterRendering: function () {
            var oView = this.getView();
            var oModel = oView.getModel();
            var oCardPropsModel = oView.getModel("ovpCardProperties");
            var sEntitySet = oCardPropsModel.getProperty("/entitySet");
            var oMetaModel = oModel.getMetaModel();
            var oEntitySet = oMetaModel.getODataEntitySet(sEntitySet);
            var oEntityType = oMetaModel.getODataEntityType(oEntitySet.entityType);
            var iMaxNumberOfCards = 20;
            this.oObjectStream = new sap.ovp.ui.ObjectStream({
                title: oCardPropsModel.getObject("/category"),
                content: {
                    path: "/" + sEntitySet,
                    length: iMaxNumberOfCards,
                    factory: function (sId, oContext) {
                        var oComponent = sap.ui.component({
                            name: "sap.ovp.cards.quickview",
                            componentData: {
                                model: oModel,
                                settings: {
                                    category: oEntityType.name,
                                    entitySet: sEntitySet
                                }
                            }
                        });

                        var oCardComp = new sap.ui.core.ComponentContainer({component: oComponent});
                        /* we need to override the setBindingContext method as from some reason
                         * when calling it on the container its not set on the inner component
                         */
                        oCardComp.setBindingContext = function(oContext){
                            oComponent.setBindingContext(oContext);
                        };
                        return oCardComp;
                    }
                }
            });

            //Check if we have navigate target, if there is create placeHolder card and set it
            var aIntents = this.getEntityIntents();
            if (aIntents.length > 0) {
                var sAppName = aIntents[0].label;
                var oPlaceHolder = this._createPlaceHolder(sAppName);
                var that = this;

                oPlaceHolder.addEventDelegate({
                    onclick: function () {
                        that.doIntentBasedNavigation(null);
                    }
                });

                this.oObjectStream.setPlaceHolder(oPlaceHolder);
            }

            this.oObjectStream.setModel(oModel);
            var oListBinding = this.oObjectStream.getBinding("content");
            oListBinding.attachDataReceived(function () {
                var nCardCount = oListBinding.getCurrentContexts().length;
                oView.byId("stackSize").setText(nCardCount);
            }, this);
        },

        _createPlaceHolder: function (sAppName) {

            var iIcon = new sap.ui.core.Icon({
                src: "sap-icon://offsite-work",
                layoutData: new sap.m.FlexItemData({growFactor : 1, alignSelf: sap.m.FlexAlignSelf.Center})
            });

            iIcon.addStyleClass("sapOvpStackPlaceHolderIcon");

            var lbAppName = new sap.m.Label({text: sAppName});
            var strText = sap.ui.getCore().getLibraryResourceBundle("sap.ovp").getText("ForMoreContentAppName", [sAppName]);
            var txtText = new sap.m.Text({text: strText});

            lbAppName.addStyleClass("sapOvpStackPlaceHolderAppName");
            txtText.addStyleClass("sapOvpStackPlaceHolderTextLine");

            var oDivVbox = new sap.m.VBox({items: [lbAppName, txtText]});
            oDivVbox.addStyleClass("sapOvpStackPlaceHolderLabelsContainer");

            var oVbox = new sap.m.VBox({items: [iIcon, oDivVbox]});
            oVbox.addStyleClass("sapOvpStackPlaceHolder");

            return oVbox;
        },

        openStack: function () {
            var oListBinding = this.oObjectStream.getBinding("content");
            if (oListBinding.getCurrentContexts().length > 0){
                var cardWidth = this.getView().$().width();
                this.oObjectStream.open(cardWidth);
            }
        }
    });
})();

}; // end of sap/ovp/cards/stack/Stack.controller.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.charts.bubble.Component') ) {
(function () {
	"use strict";
	/*global jQuery, sap */

	jQuery.sap.declare("sap.ovp.cards.charts.bubble.Component");
	
	sap.ovp.cards.charts.generic.Component.extend("sap.ovp.cards.charts.bubble.Component", {
		// use inline declaration instead of component.json to save 1 round trip
		metadata: {
			properties: {
				"contentFragment": {
					"type": "string",
					"defaultValue": "sap.ovp.cards.charts.bubble.BubbleChart"
				},
				"headerExtensionFragment":{
					"type": "string",
					"defaultValue": "sap.ovp.cards.charts.AnalyticalHeader"
				}
			},

			version: "1.32.5",

			library: "sap.ovp",

			includes: [],

			dependencies: {
				libs: [ "sap.m" ],
				components: []
			},
			config: {},
			customizing: {
				"sap.ui.controllerExtensions": {
					"sap.ovp.cards.generic.Card": {
						controllerName: "sap.ovp.cards.charts.bubble.BubbleChart"
					}
				}
			}
		}
	});
})();

}; // end of sap/ovp/cards/charts/bubble/Component.js
if ( !jQuery.sap.isDeclared('sap.ovp.cards.charts.donut.Component') ) {
(function () {
	"use strict";
	/*global jQuery, sap */

	jQuery.sap.declare("sap.ovp.cards.charts.donut.Component");
	
	sap.ovp.cards.charts.generic.Component.extend("sap.ovp.cards.charts.donut.Component", {
		// use inline declaration instead of component.json to save 1 round trip
		metadata: {
			properties: {
				"contentFragment": {
					"type": "string",
					"defaultValue": "sap.ovp.cards.charts.donut.DonutChart"
				},
				"headerExtensionFragment":{
					"type": "string",
					"defaultValue": "sap.ovp.cards.charts.AnalyticalHeader"
				}
			},

			version: "1.32.5",

			library: "sap.ovp",

			includes: [],

			dependencies: {
				libs: [ "sap.m" ],
				components: []
			},
			config: {},
			customizing: {
				"sap.ui.controllerExtensions": {
					"sap.ovp.cards.generic.Card": {
						controllerName: "sap.ovp.cards.charts.donut.DonutChart"
					}
				}
			}
		}
	});
})();

}; // end of sap/ovp/cards/charts/donut/Component.js
