ace.define('ace/mode/xsodata', function(require, exports, module) {var oop = require("ace/lib/oop");var TextMode = require("./text").Mode;var Tokenizer = require("../tokenizer").Tokenizer;var XSODataHighlightRules = require("./xsodata_highlight_rules").XSODataHighlightRules;var Mode = function() {    this.$tokenizer = new Tokenizer(new XSODataHighlightRules().getRules());};oop.inherits(Mode, TextMode);(function() {    // Extra logic goes here. (see below)}).call(Mode.prototype);exports.Mode = Mode;});ace.define('ace/mode/xsodata_highlight_rules', function(require, exports, module) {var oop = require("ace/lib/oop");var TextHighlightRules = require("ace/mode/text_highlight_rules").TextHighlightRules;var XSODataHighlightRules = function() {    this.$rules = {        "start" : [                        {                token : "keyword",                regex : '\\b(?:service|namespace|entity|as|with|without|key|keys|generate|local)\\b'            },{                token : "keyword",                regex : '\\b(?:navigates|from|principal|dependent|aggregates|always|of|SUM|AVG|MIN|MAX|parameters|via)\\b'            },{                token : "keyword",                regex : '\\b(?:and|results|property|create|update|delete|forbidden|using)\\b'            },{                token : "keyword",                regex : '\\b(?:events|before|after|precommit|postcommit|association|multiplicity|over)\\b'            },{                token : "keyword",                regex : '\\b(?:storage|no|on|annotations|enable|OData4SAP)\\b'            },                        {                token : "string",                 regex : "\"[^\"]*\""            },                        {                token : "comment",                // regex : '(/\\*([^*]|[\\r\\n|\\r|\\n]|(\\*+([^*/]|[\\r\\n|\\r|\\n])))*\\*+/)|(//.*)'                regex : '(//.*)'            },{                token : "comment", // multi line comment                regex : "\\/\\*",                next : "comment"            }                        //{                //token : "comment",                 //regex : '(/\\*([^*]|[\\r\\n|\\r|\\n]|(\\*+([^*/]|[\\r\\n|\\r|\\n])))*\\*+/)|(//.*)'               // regex : '(/\\*([^*]|[\r\n|\n|\r]|(\\*+([^*/]|[\r\n|\n|\r])))*\\*+/)|(//.*)'            //}        ],        "comment" : [            {                token : "comment", // closing comment                regex : ".*?\\*\\/",                next : "start"            }, {                token : "comment", // comment spanning whole line                regex : ".+"            }        ]    };    };oop.inherits(XSODataHighlightRules, TextHighlightRules);exports.XSODataHighlightRules = XSODataHighlightRules;});