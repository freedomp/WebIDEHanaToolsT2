{
	"name": "sap.watt.uitools.plugin.gitclient.service.GitDispatcher",
	"description": "The GIT client interface",
	"extends": ["sap.watt.common.service.ui.Part"],
	"methods": {
		"initRepository": {
			"params": [{
					"name": "oEntity",
					"type": "object"
                },
				{
					"name": "sActiveFrom",
					"type": "string",
					"optional": "true"
                }]
		},
		"stash": {
			"params": [{
					"name": "oEntity",
					"type": "object"
			},
				{
					"name": "sActiveFrom",
					"type": "string",
					"optional": "true"
        }]
		},
		"useStash": {
			"params": [{
					"name": "oEntity",
					"type": "object"
			},
				{
					"name": "sActiveFrom",
					"type": "string",
					"optional": "true"
        }]
		},
		"isStashAvailable": {
			"params": [
				{
					"name": "oGit",
					"type": "object",
					"description": "The GIT repository object"
				}
			],
			"returns": {
				"type": "boolean",
				"description": "True if there are stashes to Apply/Pop"
			}
		},
		"fetchFromUpstream": {
			"params": [{
					"name": "oEntity",
					"type": "object"
			},
				{
					"name": "sActiveFrom",
					"type": "string",
					"optional": "true"
        }],
			"returns": "object"
		},
		"fetchFromGerrit": {
			"params": [{
					"name": "oEntity",
					"type": "object"
			},
				{
					"name": "sActiveFrom",
					"type": "string",
					"optional": "true"
                }],
			"returns": "object"
		},
		"push": {
			"params": [{
					"name": "oEntity",
					"type": "object"
			},
				{
					"name": "bGerrit",
					"type": "boolean",
					"optional": "true"
				},
				{
					"name": "oBranch",
					"type": "object",
					"optional": "true"
				},
				{
					"name": "sActiveFrom",
					"type": "string",
					"optional": "true"
        }],
			"returns": "object"
		},
		"pushTo": {
			"params": [{
					"name": "oEntity",
					"type": "object"
			},
				{
					"name": "bGerrit",
					"type": "boolean",
					"optional": "true"
				},
				{
					"name": "sActiveFrom",
					"type": "string",
					"optional": "true"
        }],
			"returns": "object"
		},
		"pull": {
			"params": [{
					"name": "oEntity",
					"type": "object"
			},
				{
					"name": "sActiveFrom",
					"type": "string",
					"optional": "true"
                }],
			"returns": "object"
		},
		"rebase": {
			"params": [{
					"name": "oEntity",
					"type": "object"
			},
				{
					"name": "sActiveFrom",
					"type": "string",
					"optional": "true"
                }],
			"returns": "object"
		},
		"merge": {
			"params": [{
					"name": "oEntity",
					"type": "object"
			},
				{
					"name": "sActiveFrom",
					"type": "string",
					"optional": "true"
                }],
			"returns": "object"
		},
		"reset": {
			"params": [{
					"name": "oEntity",
					"type": "object"
			},
				{
					"name": "sActiveFrom",
					"type": "string",
					"optional": "true"
                }],
			"returns": "object"
		},
		"ignore": {
			"params": [{
					"name": "oEntity",
					"type": "object"
			},
				{
					"name": "sActiveFrom",
					"type": "string",
					"optional": "true"
                }],
			"description": "Git ignore update pane"
		},
		"untrackAndIgnore": {
			"params": [{
				"name": "oEntity",
				"type": "object"
			}],
			"description": "Git untrack and ignore update pane"
		},
		"ignoreSystemFiles": {
			"params": [{
					"name": "oEntity",
					"type": "object"
			},
				{
					"name": "sActiveFrom",
					"type": "string",
					"optional": "true"
                }],
			"description": "Git ignoreSystemFiles update pane"
		},
		"openCompareEditor": {
			"params": [{
					"name": "oNewFileDocument",
					"type": "object"
			},
				{
					"name": "bStaged",
					"type": "boolean"
				},
				{
					"name": "sActiveFrom",
					"type": "string",
					"optional": "true"
                }],
			"returns": "object"
		},
		"verifyUserInfo": {
			"description": "verify if user information exists for this repository, if not updates it ",
			"params": [{
				"name": "oEntity",
				"type": "object",
				"description": "the documnt entity of the desired git project"
			}]
		}
	},
	"events": {
		"stashCompleted": {
			"description": "This event is fired when the stash operation is finished"
		},
		"useStashCompleted": {
			"description": "This event is fired when the use stash operation is finished"
		},
		"fetchCompleted": {
			"description": "This event is fired when the fetch operation is finished"
		},
		"fetchFromGerritCompleted": {
			"description": "This event is fired when the fetch from gerrit operation is finished"
		},
		"pullCompleted": {
			"description": "This event is fired when the pull operation is finished"
		},
		"pullCompletedWithConflict": {
			"description": "This event is fired when the pull operation is finished with conflict"
		},
		"rebaseCompleted": {
			"description": "This event is fired when the rebase operation is finished"
		},
		"mergeCompleted": {
			"description": "This event is fired when the merge operation is finished"
		},
		"resetCompleted": {
			"description": "This event is fired when the reset operation is finished"
		},
		"pushCompleted": {
			"description": "This event is fired when the push operation is finished"
		},
		"rebaseInteractive": {
			"description": "This event is fired when rebase is interactive"
		},
		"ignoreCompleted": {
			"description": "This event is fired when a new file is git ignored"
		},
		"ignoreSystemFilesCompleted": {
			"description": "This event is fired when system files are git ignored"
		},
		"stashConflict": {
			"description": "This event is fired when stash is in conflict"
		},
		"operationStarted": {
			"description": "This event is fired when an operation is started. the operation name is a parameter in the oEvent object"
		},
		"operationStopped": {
			"description": "This event is fired when an operation is stopped. the operation name is a parameter in the oEvent object"
		}
	}
}